{"sha":"90b84c5d73db4d0d7fa3e5520358912961b59c43","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwYjg0YzVkNzNkYjRkMGQ3ZmEzZTU1MjAzNTg5MTI5NjFiNTljNDM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"message":"OPENJPA-896. Setting eol-style:native and removing windows eol characters from source files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@757278 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acb22a46ce954612c3f359175e18ce97ad6ecf85","url":"https://api.github.com/repos/apache/openjpa/git/trees/acb22a46ce954612c3f359175e18ce97ad6ecf85"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","html_url":"https://github.com/apache/openjpa/commit/90b84c5d73db4d0d7fa3e5520358912961b59c43","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c3175eea3c3885286898170fae6b487b070f60b5","url":"https://api.github.com/repos/apache/openjpa/commits/c3175eea3c3885286898170fae6b487b070f60b5","html_url":"https://github.com/apache/openjpa/commit/c3175eea3c3885286898170fae6b487b070f60b5"}],"stats":{"total":382166,"additions":191083,"deletions":191083},"files":[{"sha":"5acc179e6ad0c86b2d1d5f4df367c353d2d16b01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/SuperID.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,44 +1,44 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-public abstract class SuperID implements Serializable {\r\n-\t\r\n-\tprivate Integer id;\r\n-\r\n-\tpublic Integer getId() { return id; }\r\n-\tpublic void setId(Integer id) {\tthis.id = id; }\r\n-\t\r\n-\tpublic int hashCode() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-\tpublic boolean equals(Object obj) {\r\n-\t\tif (obj == this) return true;\r\n-\t\tif (!(obj instanceof SuperID)) return false;\r\n-\t\tSuperID pk = (SuperID) obj;\r\n-\t\tif ( pk.getId().equals(id)) {\r\n-\t\t\treturn true;\r\n-\t\t} else {\r\n-\t\t\treturn false;\r\n-\t\t}\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\n+\n+import java.io.Serializable;\n+\n+public abstract class SuperID implements Serializable {\n+\t\n+\tprivate Integer id;\n+\n+\tpublic Integer getId() { return id; }\n+\tpublic void setId(Integer id) {\tthis.id = id; }\n+\t\n+\tpublic int hashCode() {\n+\t\treturn id;\n+\t}\n+\t\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) return true;\n+\t\tif (!(obj instanceof SuperID)) return false;\n+\t\tSuperID pk = (SuperID) obj;\n+\t\tif ( pk.getId().equals(id)) {\n+\t\t\treturn true;\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+}"},{"sha":"bf721a7aac1e8655244a7ddd889304f62ec2d217","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/abstractjoinedappid/Superclass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,40 +1,40 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@IdClass(SuperID.class)\r\n-@Table(name=\"SUPER\")\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-public abstract class Superclass {\r\n-\t\r\n-\tprivate Integer id;\r\n-\tprivate String attr1;\r\n-\t\r\n-\t@Id\r\n-\t@Column(name=\"ID\")\r\n-\tpublic Integer getId() { return id; }\r\n-\tpublic void setId(Integer id) {\tthis.id = id; }\r\n-\t\r\n-\t@Column(name=\"ATTR1\")\r\n-\tpublic String getAttr1() { return attr1; }\r\n-\tpublic void setAttr1(String attr1) { this.attr1 = attr1; }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance.abstractjoinedappid;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@IdClass(SuperID.class)\n+@Table(name=\"SUPER\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class Superclass {\n+\t\n+\tprivate Integer id;\n+\tprivate String attr1;\n+\t\n+\t@Id\n+\t@Column(name=\"ID\")\n+\tpublic Integer getId() { return id; }\n+\tpublic void setId(Integer id) {\tthis.id = id; }\n+\t\n+\t@Column(name=\"ATTR1\")\n+\tpublic String getAttr1() { return attr1; }\n+\tpublic void setAttr1(String attr1) { this.attr1 = attr1; }\n+}"},{"sha":"886f1236a6326994802e96317d11c89681864572","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/embeddable/SharedName2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,30 +1,30 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.embeddable;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-\r\n-/**\r\n- * This class has the same name as {@link\r\n- * org.apache.openjpa.persistence.inheritance.entity.SharedName2}\r\n- */\r\n-@Embeddable\r\n-public class SharedName2 {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.embeddable;\n+\n+import javax.persistence.Embeddable;\n+\n+/**\n+ * This class has the same name as {@link\n+ * org.apache.openjpa.persistence.inheritance.entity.SharedName2}\n+ */\n+@Embeddable\n+public class SharedName2 {\n+\n+}"},{"sha":"8d6e2100bbcc2465226efe1f6bfa5cdd58147889","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.entity;\r\n-\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.OneToMany;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"admin\")\r\n-public class Admin extends ComputerUser {\r\n-\t@OneToMany(mappedBy = \"admin\")\r\n-\tprotected Set<RegularUser> regularUsers = new HashSet<RegularUser>();\r\n-\r\n-\tpublic boolean addRegularUser(RegularUser version) {\r\n-\t\treturn regularUsers.add(version);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+@DiscriminatorValue(\"admin\")\n+public class Admin extends ComputerUser {\n+\t@OneToMany(mappedBy = \"admin\")\n+\tprotected Set<RegularUser> regularUsers = new HashSet<RegularUser>();\n+\n+\tpublic boolean addRegularUser(RegularUser version) {\n+\t\treturn regularUsers.add(version);\n+\t}\n+\n+}"},{"sha":"81830f698820c9bb11a08a9b33e6577fda2f00d2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,40 +1,40 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.entity;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-public abstract class ComputerUser {\r\n-\r\n-\t@GeneratedValue(strategy = GenerationType.AUTO)\r\n-\t@Id\r\n-\tprivate Integer oid;\r\n-\r\n-\tpublic Integer getOid() {\r\n-\t\treturn oid;\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+public abstract class ComputerUser {\n+\n+\t@GeneratedValue(strategy = GenerationType.AUTO)\n+\t@Id\n+\tprivate Integer oid;\n+\n+\tpublic Integer getOid() {\n+\t\treturn oid;\n+\t}\n+\n+}"},{"sha":"cd79b59c421ba6c567fb934dc63ef4fdfd146784","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.entity;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.Nonpolymorphic;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"user\")\r\n-public class RegularUser extends ComputerUser {\r\n-\r\n-\t@ManyToOne(fetch = FetchType.LAZY)\r\n-\tprivate Admin admin;\r\n-\r\n-\tpublic Admin getAdmin() {\r\n-\t\treturn admin;\r\n-\t}\r\n-\r\n-\tpublic void setAdmin(Admin admin) {\r\n-\t\tthis.admin = admin;\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+\n+import org.apache.openjpa.persistence.jdbc.Nonpolymorphic;\n+\n+@Entity\n+@DiscriminatorValue(\"user\")\n+public class RegularUser extends ComputerUser {\n+\n+\t@ManyToOne(fetch = FetchType.LAZY)\n+\tprivate Admin admin;\n+\n+\tpublic Admin getAdmin() {\n+\t\treturn admin;\n+\t}\n+\n+\tpublic void setAdmin(Admin admin) {\n+\t\tthis.admin = admin;\n+\t}\n+\n+}"},{"sha":"ff6857bbb787807c462040ff0c354c4577579378","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.entity;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-/**\r\n- * This class has the same name as {@link\r\n- * org.apache.openjpa.persistence.inheritance.mappedsuperclass.SharedName1}\r\n- */\r\n-@Entity\r\n-public class SharedName1 {\r\n-\r\n-    @Id\r\n-    private long id;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+/**\n+ * This class has the same name as {@link\n+ * org.apache.openjpa.persistence.inheritance.mappedsuperclass.SharedName1}\n+ */\n+@Entity\n+public class SharedName1 {\n+\n+    @Id\n+    private long id;\n+}"},{"sha":"58947ed002d2e50b3eb133edc20c854ac620d4c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/SharedName2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,33 +1,33 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.entity;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-/**\r\n- * This class has the same name as {@link\r\n- * org.apache.openjpa.persistence.inheritance.embeddable.SharedName2}\r\n- */\r\n-@Entity\r\n-public class SharedName2 {\r\n-\r\n-    @Id\r\n-    private long id;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+/**\n+ * This class has the same name as {@link\n+ * org.apache.openjpa.persistence.inheritance.embeddable.SharedName2}\n+ */\n+@Entity\n+public class SharedName2 {\n+\n+    @Id\n+    private long id;\n+}"},{"sha":"63499c417d931a6282be372010a704c50dba9818","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/BaseEntity.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/BaseEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,34 +1,34 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\r\n-\r\n-\r\n-/**\r\n- * Entity used to test MappedSuperClass which does not have IdClass. \r\n- * \r\n- * Test case and domain classes were originally part of the reported issue\r\n- * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\r\n- *  \r\n- * @author pioneer_ip@yahoo.com\r\n- * @author Fay Wang\r\n- *\r\n- */\r\n-public class BaseEntity {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\n+\n+\n+/**\n+ * Entity used to test MappedSuperClass which does not have IdClass. \n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\n+ *  \n+ * @author pioneer_ip@yahoo.com\n+ * @author Fay Wang\n+ *\n+ */\n+public class BaseEntity {\n+\n+}"},{"sha":"97663e7934f65121579a33459cfbf578df4b318e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/CashBaseEntity.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/CashBaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/CashBaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/CashBaseEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * Entity used to test MappedSuperClass which does not have IdClass. \r\n- * \r\n- * Test case and domain classes were originally part of the reported issue\r\n- * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\r\n- *  \r\n- * @author pioneer_ip@yahoo.com\r\n- * @author Fay Wang\r\n- *\r\n- */\r\n-\r\n-@MappedSuperclass\r\n-public abstract class CashBaseEntity extends BaseEntity{\r\n-    @Column(name=\"TRCCRUI\")\r\n-    private String createUser;\r\n-\r\n-    @Column(name=\"TRCCRTS\")\r\n-    private Date createTime;\r\n-\r\n-    @Column(name=\"TRCLUUID\")\r\n-    private String updateUser;\r\n-\r\n-    @Column(name=\"TRCLUTS\")\r\n-    private Date updateTime;\r\n-\r\n-    @Version\r\n-    @Column(name=\"TRCVER\")\r\n-    private int version;\r\n-\r\n-    public String getCreateUser() {\r\n-        return createUser;\r\n-    }\r\n-    \r\n-    public void setCreateUser(String createUser) {\r\n-        this.createUser = createUser;\r\n-    }\r\n-    \r\n-    public Date getCreateTime() {\r\n-        return createTime;\r\n-    }\r\n-    \r\n-    public void setCreateTime(Date createTime) {\r\n-        this.createTime = createTime;\r\n-    }\r\n-    \r\n-    public String getUpdateUser() {\r\n-        return updateUser;\r\n-    }\r\n-    \r\n-    public void setUpdateUser(String updateUser) {\r\n-        this.updateUser = updateUser;\r\n-    }\r\n-\r\n-    public int getVersion() {\r\n-        return version;\r\n-    }\r\n-    \r\n-    public Date getUpdateTime() {\r\n-        return updateTime;\r\n-    }\r\n-    \r\n-    public void setUpdateTime(Date updateTime) {\r\n-        this.updateTime = updateTime;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\n+\n+import java.util.Date;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Entity used to test MappedSuperClass which does not have IdClass. \n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\n+ *  \n+ * @author pioneer_ip@yahoo.com\n+ * @author Fay Wang\n+ *\n+ */\n+\n+@MappedSuperclass\n+public abstract class CashBaseEntity extends BaseEntity{\n+    @Column(name=\"TRCCRUI\")\n+    private String createUser;\n+\n+    @Column(name=\"TRCCRTS\")\n+    private Date createTime;\n+\n+    @Column(name=\"TRCLUUID\")\n+    private String updateUser;\n+\n+    @Column(name=\"TRCLUTS\")\n+    private Date updateTime;\n+\n+    @Version\n+    @Column(name=\"TRCVER\")\n+    private int version;\n+\n+    public String getCreateUser() {\n+        return createUser;\n+    }\n+    \n+    public void setCreateUser(String createUser) {\n+        this.createUser = createUser;\n+    }\n+    \n+    public Date getCreateTime() {\n+        return createTime;\n+    }\n+    \n+    public void setCreateTime(Date createTime) {\n+        this.createTime = createTime;\n+    }\n+    \n+    public String getUpdateUser() {\n+        return updateUser;\n+    }\n+    \n+    public void setUpdateUser(String updateUser) {\n+        this.updateUser = updateUser;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+    \n+    public Date getUpdateTime() {\n+        return updateTime;\n+    }\n+    \n+    public void setUpdateTime(Date updateTime) {\n+        this.updateTime = updateTime;\n+    }\n+}"},{"sha":"ae0534c85816e4ae786993a2072aad3ccae3ec30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SharedName1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,30 +1,30 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\r\n-\r\n-import javax.persistence.MappedSuperclass;\r\n-\r\n-/**\r\n- * This class has the same name as {@link\r\n- * org.apache.openjpa.persistence.inheritance.entity.SharedName1}\r\n- */\r\n-@MappedSuperclass\r\n-public class SharedName1 {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\n+\n+import javax.persistence.MappedSuperclass;\n+\n+/**\n+ * This class has the same name as {@link\n+ * org.apache.openjpa.persistence.inheritance.entity.SharedName1}\n+ */\n+@MappedSuperclass\n+public class SharedName1 {\n+\n+}"},{"sha":"2988f9ad21445b613f0602bc9ddc5f5c8adeb565","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SituationDA.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SituationDA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SituationDA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/SituationDA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * Entity used to test MappedSuperClass which does not have IdClass. \r\n- * \r\n- * Test case and domain classes were originally part of the reported issue\r\n- * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\r\n- *  \r\n- * @author pioneer_ip@yahoo.com\r\n- * @author Fay Wang\r\n- *\r\n- */\r\n-\r\n-@Entity\r\n-@Table (name = \"cc2SITUATION\")\r\n-@IdClass(SituationDA.SituationId.class)\r\n-public class SituationDA extends CashBaseEntity {\r\n-   \r\n-    @Id\r\n-    @Column(name=\"C2008SRL\")\r\n-    private String cashBoxPeriodSerial;\r\n-   \r\n-    @Id\r\n-    @Column(name=\"C2012TYPE\")\r\n-    private short type;\r\n-    \r\n-    public static class SituationId implements java.io.Serializable{\r\n-        private static final long serialVersionUID = 1L;\r\n-        private String cashBoxPeriodSerial;\r\n-        private short type;\r\n-       \r\n-        public SituationId(){}\r\n-        \r\n-        public SituationId(String cashBoxPeriodSerial, short type){\r\n-            this.cashBoxPeriodSerial = cashBoxPeriodSerial;\r\n-            this.type = type;\r\n-        }\r\n-        \r\n-        \r\n-        public boolean equals(Object other){\r\n-            if (other instanceof SituationId) {\r\n-                final SituationId otherId = (SituationId)other;\r\n-                return ( otherId.cashBoxPeriodSerial.equals(\r\n-                    this.cashBoxPeriodSerial) && otherId.type == this.type );\r\n-                }\r\n-                return false;   \r\n-        }\r\n-       \r\n-        public int hashCode() {\r\n-            return super.hashCode();\r\n-        }\r\n-    }\r\n-    \r\n-    public short getType() {\r\n-        return type;\r\n-    }\r\n-    \r\n-    public void setType(short type) {\r\n-        this.type = type;\r\n-    }\r\n-    \r\n-    public String getCashBoxPeriodSerial() {\r\n-        return cashBoxPeriodSerial;\r\n-    }\r\n-    \r\n-    public void setCashBoxPeriodSerial(String cashBoxPeriodSerial) {\r\n-        this.cashBoxPeriodSerial = cashBoxPeriodSerial;\r\n-    }\r\n-    \r\n-}\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Entity used to test MappedSuperClass which does not have IdClass. \n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\n+ *  \n+ * @author pioneer_ip@yahoo.com\n+ * @author Fay Wang\n+ *\n+ */\n+\n+@Entity\n+@Table (name = \"cc2SITUATION\")\n+@IdClass(SituationDA.SituationId.class)\n+public class SituationDA extends CashBaseEntity {\n+   \n+    @Id\n+    @Column(name=\"C2008SRL\")\n+    private String cashBoxPeriodSerial;\n+   \n+    @Id\n+    @Column(name=\"C2012TYPE\")\n+    private short type;\n+    \n+    public static class SituationId implements java.io.Serializable{\n+        private static final long serialVersionUID = 1L;\n+        private String cashBoxPeriodSerial;\n+        private short type;\n+       \n+        public SituationId(){}\n+        \n+        public SituationId(String cashBoxPeriodSerial, short type){\n+            this.cashBoxPeriodSerial = cashBoxPeriodSerial;\n+            this.type = type;\n+        }\n+        \n+        \n+        public boolean equals(Object other){\n+            if (other instanceof SituationId) {\n+                final SituationId otherId = (SituationId)other;\n+                return ( otherId.cashBoxPeriodSerial.equals(\n+                    this.cashBoxPeriodSerial) && otherId.type == this.type );\n+                }\n+                return false;   \n+        }\n+       \n+        public int hashCode() {\n+            return super.hashCode();\n+        }\n+    }\n+    \n+    public short getType() {\n+        return type;\n+    }\n+    \n+    public void setType(short type) {\n+        this.type = type;\n+    }\n+    \n+    public String getCashBoxPeriodSerial() {\n+        return cashBoxPeriodSerial;\n+    }\n+    \n+    public void setCashBoxPeriodSerial(String cashBoxPeriodSerial) {\n+        this.cashBoxPeriodSerial = cashBoxPeriodSerial;\n+    }\n+    \n+}\n+\n+"},{"sha":"c0c2fe9e01d60e2825de8a336d6098f9dd869d4b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/TestMappedSuperClass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test case and domain classes were originally part of the reported issue\r\n- * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\r\n- *  \r\n- * @author pioneer_ip@yahoo.com\r\n- * @author Fay Wang\r\n- *\r\n- */\r\n-public class TestMappedSuperClass extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(CashBaseEntity.class, \r\n-              SituationDA.class, ValuableItemDA.class);\r\n-    }\r\n-\r\n-    public void testMappedSuperClass() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        SituationDA s = new SituationDA();\r\n-        s.setCashBoxPeriodSerial(\"test\");\r\n-        s.setType((short)1);\r\n-        em.persist(s);\r\n-        em.getTransaction().commit();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\n+ *  \n+ * @author pioneer_ip@yahoo.com\n+ * @author Fay Wang\n+ *\n+ */\n+public class TestMappedSuperClass extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CashBaseEntity.class, \n+              SituationDA.class, ValuableItemDA.class);\n+    }\n+\n+    public void testMappedSuperClass() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        SituationDA s = new SituationDA();\n+        s.setCashBoxPeriodSerial(\"test\");\n+        s.setType((short)1);\n+        em.persist(s);\n+        em.getTransaction().commit();\n+    }\n+}"},{"sha":"7e0eac1e92310c84c27d1573e26183c596d8d273","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/ValuableItemDA.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/ValuableItemDA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/ValuableItemDA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/mappedsuperclass/ValuableItemDA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * Entity used to test MappedSuperClass which does not have IdClass. \r\n- * \r\n- * Test case and domain classes were originally part of the reported issue\r\n- * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\r\n- *  \r\n- * @author pioneer_ip@yahoo.com\r\n- * @author Fay Wang\r\n- *\r\n- */\r\n-@Entity\r\n-@Table (name = \"CF2VLUITEM\")\r\n-public class ValuableItemDA extends CashBaseEntity {\r\n-    @Id\r\n-    @Column(name=\"C2001COD\")\r\n-    private short code;\r\n-\r\n-    public void setCode(short code) {\r\n-        this.code = code;\r\n-    }\r\n-    \r\n-    public short getCode() {\r\n-        return code;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.mappedsuperclass;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Entity used to test MappedSuperClass which does not have IdClass. \n+ * \n+ * Test case and domain classes were originally part of the reported issue\n+ * <A href=\"https://issues.apache.org/jira/browse/OPENJPA-873\">OPENJPA-873</A>\n+ *  \n+ * @author pioneer_ip@yahoo.com\n+ * @author Fay Wang\n+ *\n+ */\n+@Entity\n+@Table (name = \"CF2VLUITEM\")\n+public class ValuableItemDA extends CashBaseEntity {\n+    @Id\n+    @Column(name=\"C2001COD\")\n+    private short code;\n+\n+    public void setCode(short code) {\n+        this.code = code;\n+    }\n+    \n+    public short getCode() {\n+        return code;\n+    }\n }\n\\ No newline at end of file"},{"sha":"02c4d2f6498023a5ca13dac2c8be9632dc22456b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/BaseEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n-\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.MappedSuperclass;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * An abstract base entity class with auto-generated identty and version field.\r\n- * Used for testing special case of table-per-class inheritance strategy when \r\n- * the root of persistent inheritance hierarchy is abstract and itself \r\n- * derives from an abstract MappedSuperClass (i.e. this class).\r\n- * \r\n- * For a more detailed description of the domain featureSelection to which this receiver\r\n- * belongs\r\n- * @see TestTablePerClassInheritanceWithAbstractRoot\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-@MappedSuperclass\r\n-public abstract class BaseEntity {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\t\r\n-\t@Version\r\n-\tprivate long version;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic long getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Version;\n+\n+/**\n+ * An abstract base entity class with auto-generated identty and version field.\n+ * Used for testing special case of table-per-class inheritance strategy when \n+ * the root of persistent inheritance hierarchy is abstract and itself \n+ * derives from an abstract MappedSuperClass (i.e. this class).\n+ * \n+ * For a more detailed description of the domain featureSelection to which this receiver\n+ * belongs\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+@MappedSuperclass\n+public abstract class BaseEntity {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\t@Version\n+\tprivate long version;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic long getVersion() {\n+\t\treturn version;\n+\t}\n+}"},{"sha":"3738955bfc5ce008160bbc70f319b2cbac4fd443","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/EnglishParagraph.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * A persistent class derived from an abstract persistent class and \r\n- * using table-per-concrete-class inheritance strategy.\r\n- * \r\n- * For a more detailed description of the domain featureSelection to which this receiver\r\n- * belongs\r\n- * @see TestTablePerClassInheritanceWithAbstractRoot\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class EnglishParagraph extends Translatable {\r\n-\tprivate String content;\r\n-\r\n-\tpublic String getContent() {\r\n-\t\treturn content;\r\n-\t}\r\n-\r\n-\tpublic void setContent(String content) {\r\n-\t\tthis.content = content;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * A persistent class derived from an abstract persistent class and \n+ * using table-per-concrete-class inheritance strategy.\n+ * \n+ * For a more detailed description of the domain featureSelection to which this receiver\n+ * belongs\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class EnglishParagraph extends Translatable {\n+\tprivate String content;\n+\n+\tpublic String getContent() {\n+\t\treturn content;\n+\t}\n+\n+\tpublic void setContent(String content) {\n+\t\tthis.content = content;\n+\t}\n+}"},{"sha":"5accc7cef25514bc3595fbde82827000abc966dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/FrenchParagraph.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * A persistent class derived from an abstract persistent class and \r\n- * using table-per-concrete-class inheritance strategy.\r\n- * \r\n- * For a more detailed description of the domain featureSelection to which this receiver\r\n- * belongs\r\n- * @see TestTablePerClassInheritanceWithAbstractRoot\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class FrenchParagraph extends Translatable {\r\n-\tprivate String content;\r\n-\r\n-\tpublic String getContent() {\r\n-\t\treturn content;\r\n-\t}\r\n-\r\n-\tpublic void setContent(String content) {\r\n-\t\tthis.content = content;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * A persistent class derived from an abstract persistent class and \n+ * using table-per-concrete-class inheritance strategy.\n+ * \n+ * For a more detailed description of the domain featureSelection to which this receiver\n+ * belongs\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class FrenchParagraph extends Translatable {\n+\tprivate String content;\n+\n+\tpublic String getContent() {\n+\t\treturn content;\n+\t}\n+\n+\tpublic void setContent(String content) {\n+\t\tthis.content = content;\n+\t}\n+}"},{"sha":"afb7072ee301328aee6b50ecaa6b2cc2be41433c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/GermanParagraph.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * A persistent class derived from an abstract persistent class and \r\n- * using table-per-concrete-class inheritance strategy.\r\n- * \r\n- * For a more detailed description of the domain featureSelection to which this receiver\r\n- * belongs\r\n- * @see TestTablePerClassInheritanceWithAbstractRoot\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class GermanParagraph extends Translatable {\r\n-\tprivate String content;\r\n-\r\n-\tpublic String getContent() {\r\n-\t\treturn content;\r\n-\t}\r\n-\r\n-\tpublic void setContent(String content) {\r\n-\t\tthis.content = content;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * A persistent class derived from an abstract persistent class and \n+ * using table-per-concrete-class inheritance strategy.\n+ * \n+ * For a more detailed description of the domain featureSelection to which this receiver\n+ * belongs\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class GermanParagraph extends Translatable {\n+\tprivate String content;\n+\n+\tpublic String getContent() {\n+\t\treturn content;\n+\t}\n+\n+\tpublic void setContent(String content) {\n+\t\tthis.content = content;\n+\t}\n+}"},{"sha":"38cfe0fa5d65e3a0b42d83de93274f4f53f123f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","status":"modified","additions":155,"deletions":155,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/TestTablePerClassInheritanceWithAbstractRoot.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,155 +1,155 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Tests a domain featureSelection with following characteristics:\r\n- * a) A typical bidirectional ManyToOne/OneToMany relation \r\n- *    EntityA references a single instance of EntityB\r\n- *    EntityB references a collection of EntityA\r\n- * b) EntityB itself is abstract \r\n- * c) Many concrete subclasses of EntityB exist\r\n- * d) EntityB uses TABLE_PER_CLASS inheritance strategy, hence no mapping table \r\n- *    exists for EntityB itself.\r\n- * e) Relation field in EntityA is declared as abstract type EntityB (for which\r\n- * f) all the domain classes i.e. EntityA, EntityB and all its subclasses is\r\n- *    derived from an abstract MappedSuperClass which holds primary key and\r\n- *    version fields.\r\n- *    \r\n- *  The test addresses a reported error [1] in mapping the above domain featureSelection.\r\n- *  The test verifies basic persist, query and delete operations on the domain\r\n- *  featureSelection.\r\n- *  \r\n- *  [1] <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-602\"> OPENJPA-602</A>}\r\n- *        \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestTablePerClassInheritanceWithAbstractRoot extends\r\n-\t\tSingleEMFTestCase {\r\n-\tClass<?>[] UNJOINED_SUBCLASSES = {\r\n-\t\t\tEnglishParagraph.class, \r\n-\t\t\tFrenchParagraph.class, \r\n-\t\t\tGermanParagraph.class};\r\n-\t\r\n-    public void setUp() {\r\n-        setUp(CLEAR_TABLES, \r\n-        \t\tTranslation.class, BaseEntity.class,\r\n-        \t\tEnglishParagraph.class, FrenchParagraph.class, \r\n-        \t\tGermanParagraph.class, Translatable.class);\r\n-    }\r\n-    \r\n-\t@SuppressWarnings(\"unchecked\")\r\n-    public void testConsistency() {\r\n-\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\t/**\r\n-\t\t * Aggregate query operations can not be performed on unjoined \r\n-\t\t * subclasses. Hence all concrete subclasses of abstract base\r\n-\t\t * class is counted separately to count all Translatable instances.\r\n-\t\t */\r\n-\t\tint nTranslatableBefore = count(UNJOINED_SUBCLASSES);\r\n-\t\tint nTranslationBefore = count(Translation.class);\r\n-\t\t\r\n-\t\tEnglishParagraph english = new EnglishParagraph();\r\n-\t\tFrenchParagraph french   = new FrenchParagraph();\r\n-\t\tGermanParagraph german   = new GermanParagraph();\r\n-\t\t\r\n-\t\tTranslation translation1 = new Translation(); \r\n-\t\tTranslation translation2 = new Translation(); \r\n-\t\tTranslation translation3 = new Translation(); \r\n-\t\tTranslation translation4 = new Translation(); \r\n-\t\t\r\n-\t\tenglish.setContent(\"Hello\");\r\n-\t\tfrench.setContent(\"Bon jour\");\r\n-\t\tgerman.setContent(\"Guten Tag\");\r\n-\r\n-\t\t\r\n-\t\ttranslation1.setTranslatable(english);\r\n-\t\ttranslation2.setTranslatable(english);\r\n-\t\ttranslation3.setTranslatable(french);\r\n-\t\ttranslation4.setTranslatable(german);\r\n-\t\t\r\n-\t\tenglish.addTranslation(translation1);\r\n-\t\tenglish.addTranslation(translation2);\r\n-\t\tfrench.addTranslation(translation3);\r\n-\t\tgerman.addTranslation(translation4);\r\n-\t\t\r\n-\t\tem.persist(translation1);\r\n-\t\tem.persist(translation2);\r\n-\t\tem.persist(translation3);\r\n-\t\tem.persist(translation4);\r\n-\t\tem.getTransaction().commit();\r\n-\t\t\r\n-\t\tem.clear();\r\n-\r\n-\t\tint nTranslatableAfter = count(UNJOINED_SUBCLASSES);\r\n-\t\tint nTranslationAfter  = count(Translation.class);\r\n-\t\t\r\n-\t\tassertEquals(nTranslatableBefore+3, nTranslatableAfter);\r\n-\t\tassertEquals(nTranslationBefore+4, nTranslationAfter);\r\n-\t\t\r\n-\t\t/**\r\n-\t\t * Verify that if A refers to B then A must be a member of the set \r\n-\t\t * referred by B\r\n-\t\t */\r\n-\t\tem.getTransaction().begin();\r\n-\t\tList<Translation> result = em.createQuery(\"SELECT p FROM Translation p\")\r\n-\t\t\t.getResultList();\r\n-\t\tassertTrue(!result.isEmpty());\r\n-\t\tfor (Translation translation : result) {\r\n-\t\t\tassertTrue(translation.getTranslatable()\r\n-\t\t\t\t\t.getTranslations().contains(translation));\r\n-\t\t}\r\n-\t\tem.getTransaction().rollback();\r\n-\t}\r\n-\t\r\n-\t\r\n-\tvoid linkConsistently(Translation translation, Translatable translatable) {\r\n-\t\ttranslatable.addTranslation(translation);\r\n-\t\ttranslation.setTranslatable(translatable);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Count the number of instances in the given class by aggregate JPQL query.\r\n-\t */\r\n-\tpublic int count(Class c) {\r\n-\t\tOpenJPAEntityManager em = emf.createEntityManager();\r\n-\t\treturn ((Number) em.createQuery(\"SELECT COUNT(p) FROM \" + \r\n-\t\t\t\tc.getSimpleName() + \" p\").getSingleResult()).intValue();\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Count total number of instances of all the given classes by separate JPQL\r\n-\t * aggregate query. Useful when a base class has unjoined subclasses.\r\n-\t */\r\n-\tpublic int count(Class<?>... classes) {\r\n-\t\tint total = 0;\r\n-\t\tfor (Class<?> c:classes) {\r\n-\t\t\ttotal += count(c);\r\n-\t\t}\r\n-\t\treturn total;\r\n-\t}\r\n-\t\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\n+\n+import java.util.List;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests a domain featureSelection with following characteristics:\n+ * a) A typical bidirectional ManyToOne/OneToMany relation \n+ *    EntityA references a single instance of EntityB\n+ *    EntityB references a collection of EntityA\n+ * b) EntityB itself is abstract \n+ * c) Many concrete subclasses of EntityB exist\n+ * d) EntityB uses TABLE_PER_CLASS inheritance strategy, hence no mapping table \n+ *    exists for EntityB itself.\n+ * e) Relation field in EntityA is declared as abstract type EntityB (for which\n+ * f) all the domain classes i.e. EntityA, EntityB and all its subclasses is\n+ *    derived from an abstract MappedSuperClass which holds primary key and\n+ *    version fields.\n+ *    \n+ *  The test addresses a reported error [1] in mapping the above domain featureSelection.\n+ *  The test verifies basic persist, query and delete operations on the domain\n+ *  featureSelection.\n+ *  \n+ *  [1] <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-602\"> OPENJPA-602</A>}\n+ *        \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestTablePerClassInheritanceWithAbstractRoot extends\n+\t\tSingleEMFTestCase {\n+\tClass<?>[] UNJOINED_SUBCLASSES = {\n+\t\t\tEnglishParagraph.class, \n+\t\t\tFrenchParagraph.class, \n+\t\t\tGermanParagraph.class};\n+\t\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, \n+        \t\tTranslation.class, BaseEntity.class,\n+        \t\tEnglishParagraph.class, FrenchParagraph.class, \n+        \t\tGermanParagraph.class, Translatable.class);\n+    }\n+    \n+\t@SuppressWarnings(\"unchecked\")\n+    public void testConsistency() {\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\t/**\n+\t\t * Aggregate query operations can not be performed on unjoined \n+\t\t * subclasses. Hence all concrete subclasses of abstract base\n+\t\t * class is counted separately to count all Translatable instances.\n+\t\t */\n+\t\tint nTranslatableBefore = count(UNJOINED_SUBCLASSES);\n+\t\tint nTranslationBefore = count(Translation.class);\n+\t\t\n+\t\tEnglishParagraph english = new EnglishParagraph();\n+\t\tFrenchParagraph french   = new FrenchParagraph();\n+\t\tGermanParagraph german   = new GermanParagraph();\n+\t\t\n+\t\tTranslation translation1 = new Translation(); \n+\t\tTranslation translation2 = new Translation(); \n+\t\tTranslation translation3 = new Translation(); \n+\t\tTranslation translation4 = new Translation(); \n+\t\t\n+\t\tenglish.setContent(\"Hello\");\n+\t\tfrench.setContent(\"Bon jour\");\n+\t\tgerman.setContent(\"Guten Tag\");\n+\n+\t\t\n+\t\ttranslation1.setTranslatable(english);\n+\t\ttranslation2.setTranslatable(english);\n+\t\ttranslation3.setTranslatable(french);\n+\t\ttranslation4.setTranslatable(german);\n+\t\t\n+\t\tenglish.addTranslation(translation1);\n+\t\tenglish.addTranslation(translation2);\n+\t\tfrench.addTranslation(translation3);\n+\t\tgerman.addTranslation(translation4);\n+\t\t\n+\t\tem.persist(translation1);\n+\t\tem.persist(translation2);\n+\t\tem.persist(translation3);\n+\t\tem.persist(translation4);\n+\t\tem.getTransaction().commit();\n+\t\t\n+\t\tem.clear();\n+\n+\t\tint nTranslatableAfter = count(UNJOINED_SUBCLASSES);\n+\t\tint nTranslationAfter  = count(Translation.class);\n+\t\t\n+\t\tassertEquals(nTranslatableBefore+3, nTranslatableAfter);\n+\t\tassertEquals(nTranslationBefore+4, nTranslationAfter);\n+\t\t\n+\t\t/**\n+\t\t * Verify that if A refers to B then A must be a member of the set \n+\t\t * referred by B\n+\t\t */\n+\t\tem.getTransaction().begin();\n+\t\tList<Translation> result = em.createQuery(\"SELECT p FROM Translation p\")\n+\t\t\t.getResultList();\n+\t\tassertTrue(!result.isEmpty());\n+\t\tfor (Translation translation : result) {\n+\t\t\tassertTrue(translation.getTranslatable()\n+\t\t\t\t\t.getTranslations().contains(translation));\n+\t\t}\n+\t\tem.getTransaction().rollback();\n+\t}\n+\t\n+\t\n+\tvoid linkConsistently(Translation translation, Translatable translatable) {\n+\t\ttranslatable.addTranslation(translation);\n+\t\ttranslation.setTranslatable(translatable);\n+\t}\n+\t\n+\t/**\n+\t * Count the number of instances in the given class by aggregate JPQL query.\n+\t */\n+\tpublic int count(Class c) {\n+\t\tOpenJPAEntityManager em = emf.createEntityManager();\n+\t\treturn ((Number) em.createQuery(\"SELECT COUNT(p) FROM \" + \n+\t\t\t\tc.getSimpleName() + \" p\").getSingleResult()).intValue();\n+\t}\n+\t\n+\t/**\n+\t * Count total number of instances of all the given classes by separate JPQL\n+\t * aggregate query. Useful when a base class has unjoined subclasses.\n+\t */\n+\tpublic int count(Class<?>... classes) {\n+\t\tint total = 0;\n+\t\tfor (Class<?> c:classes) {\n+\t\t\ttotal += count(c);\n+\t\t}\n+\t\treturn total;\n+\t}\n+\t\n+}"},{"sha":"95fe843277652decb5215236deb01ae5e96b9899","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translatable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,57 +1,57 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToMany;\r\n-\r\n-/**\r\n- * An abstract persistent class used as root of inheritance hierarchy and \r\n- * using table-per-concrete-class inheritance strategy.\r\n- * \r\n- * For a more detailed description of the domain featureSelection to which this receiver\r\n- * belongs\r\n- * @see TestTablePerClassInheritanceWithAbstractRoot\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n-public abstract class Translatable extends BaseEntity {\r\n-\t@OneToMany(mappedBy=\"translatable\", cascade=CascadeType.PERSIST)\r\n-\tprivate Set<Translation> translations;\r\n-\t\r\n-\tpublic void addTranslation(Translation t) {\r\n-\t\tif (translations == null)\r\n-\t\t\ttranslations = new HashSet<Translation>();\r\n-\t\ttranslations.add(t);\r\n-\t}\r\n-\t\r\n-\tpublic Set<Translation> getTranslations() {\r\n-\t\treturn Collections.unmodifiableSet(translations);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+\n+/**\n+ * An abstract persistent class used as root of inheritance hierarchy and \n+ * using table-per-concrete-class inheritance strategy.\n+ * \n+ * For a more detailed description of the domain featureSelection to which this receiver\n+ * belongs\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\n+public abstract class Translatable extends BaseEntity {\n+\t@OneToMany(mappedBy=\"translatable\", cascade=CascadeType.PERSIST)\n+\tprivate Set<Translation> translations;\n+\t\n+\tpublic void addTranslation(Translation t) {\n+\t\tif (translations == null)\n+\t\t\ttranslations = new HashSet<Translation>();\n+\t\ttranslations.add(t);\n+\t}\n+\t\n+\tpublic Set<Translation> getTranslations() {\n+\t\treturn Collections.unmodifiableSet(translations);\n+\t}\n+}"},{"sha":"4ba8cac03d7d2c82d726cfe2b97557c2786d53bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/polymorphic/Translation.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.inheritance.polymorphic;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"TRANSLATIONS\")\r\n-/**\r\n- * An persistent class that refers to a polymorphic uni-cardinality relation. \r\n- * The polymorphic relation itself derives from an abstract class that uses\r\n- * table-per-class inheritance strategy.\r\n- *   \r\n- * For a more detailed description of the domain featureSelection to which this receiver\r\n- * belongs\r\n- * @see TestTablePerClassInheritanceWithAbstractRoot\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class Translation extends BaseEntity {\r\n-\t@ManyToOne(cascade=CascadeType.PERSIST)\r\n-\tprivate Translatable translatable;\r\n-\r\n-\tpublic Translatable getTranslatable() {\r\n-\t\treturn translatable;\r\n-\t}\r\n-\r\n-\tpublic void setTranslatable(Translatable translatable) {\r\n-\t\tthis.translatable = translatable;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.inheritance.polymorphic;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"TRANSLATIONS\")\n+/**\n+ * An persistent class that refers to a polymorphic uni-cardinality relation. \n+ * The polymorphic relation itself derives from an abstract class that uses\n+ * table-per-class inheritance strategy.\n+ *   \n+ * For a more detailed description of the domain featureSelection to which this receiver\n+ * belongs\n+ * @see TestTablePerClassInheritanceWithAbstractRoot\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class Translation extends BaseEntity {\n+\t@ManyToOne(cascade=CascadeType.PERSIST)\n+\tprivate Translatable translatable;\n+\n+\tpublic Translatable getTranslatable() {\n+\t\treturn translatable;\n+\t}\n+\n+\tpublic void setTranslatable(Translatable translatable) {\n+\t\tthis.translatable = translatable;\n+\t}\n+}"},{"sha":"1869a0e9581fc070a6009bbedf9f12b50e780d14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/SQLSniffer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.apache.regexp.RE;\r\n-\r\n-/**\r\n- * Utility class to verify whether a set of fragments appear in a list of\r\n- * possible SQL statement.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class SQLSniffer {\r\n-\t\r\n-\tprivate static Map<String, RE> cache = new HashMap<String, RE>();\r\n-\t/**\r\n-\t * Checks that the given set of regular expressions occur in at least one of\r\n-\t * the given input SQL.\r\n-\t */\r\n-\tpublic static boolean matches(List<String> SQLs, String...regexes) {\r\n-\t\tif (SQLs == null || regexes == null)\r\n-\t\t\treturn false;\r\n-\t\tfor (String sql : SQLs) {\r\n-\t\t\tboolean matched = true;\r\n-\t\t\tfor (String key : regexes) {\r\n-\t\t\t\tRE regex = getRegularExpression(key);\r\n-\t\t\t\tif (!regex.match(sql)) {\r\n-\t\t\t\t\tmatched = false;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\tif (matched)\r\n-\t\t\t\treturn true;\r\n-\t\t}\r\n-\t\treturn false;\r\n-\t}\r\n-\t\r\n-\tprivate static RE getRegularExpression(String regex) {\r\n-\t\tif (cache.containsKey(regex)) \r\n-\t\t\treturn cache.get(regex);\r\n-\t\tRE re = new RE(regex);\r\n-\t\tcache.put(regex, re);\r\n-\t\treturn re;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.regexp.RE;\n+\n+/**\n+ * Utility class to verify whether a set of fragments appear in a list of\n+ * possible SQL statement.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class SQLSniffer {\n+\t\n+\tprivate static Map<String, RE> cache = new HashMap<String, RE>();\n+\t/**\n+\t * Checks that the given set of regular expressions occur in at least one of\n+\t * the given input SQL.\n+\t */\n+\tpublic static boolean matches(List<String> SQLs, String...regexes) {\n+\t\tif (SQLs == null || regexes == null)\n+\t\t\treturn false;\n+\t\tfor (String sql : SQLs) {\n+\t\t\tboolean matched = true;\n+\t\t\tfor (String key : regexes) {\n+\t\t\t\tRE regex = getRegularExpression(key);\n+\t\t\t\tif (!regex.match(sql)) {\n+\t\t\t\t\tmatched = false;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (matched)\n+\t\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n+\tprivate static RE getRegularExpression(String regex) {\n+\t\tif (cache.containsKey(regex)) \n+\t\t\treturn cache.get(regex);\n+\t\tRE re = new RE(regex);\n+\t\tcache.put(regex, re);\n+\t\treturn re;\n+\t}\n+}"},{"sha":"34b3f97224196e516e1912e398221f1d14ca3bb2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","status":"modified","additions":165,"deletions":165,"changes":330,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestJDBCEnumToKernelConstantMappings.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,166 +1,166 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc;\r\n-\r\n-import java.sql.ResultSet;\r\n-\r\n-import junit.framework.TestCase;\r\n-import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\r\n-import org.apache.openjpa.jdbc.kernel.LRSSizes;\r\n-import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\r\n-\r\n-public class TestJDBCEnumToKernelConstantMappings\r\n-    extends TestCase {\r\n-\r\n-    public void testEagerFetchModes() {\r\n-        assertEquals(EagerFetchModes.EAGER_NONE,\r\n-            FetchMode.NONE.toKernelConstant());\r\n-        assertEquals(FetchMode.NONE,\r\n-            FetchMode.fromKernelConstant(\r\n-                EagerFetchModes.EAGER_NONE));\r\n-        assertEquals(FetchMode.NONE.toKernelConstant(),\r\n-            FetchMode.NONE.ordinal());\r\n-\r\n-        assertEquals(EagerFetchModes.EAGER_JOIN,\r\n-            FetchMode.JOIN.toKernelConstant());\r\n-        assertEquals(FetchMode.JOIN,\r\n-            FetchMode.fromKernelConstant(\r\n-                EagerFetchModes.EAGER_JOIN));\r\n-        assertEquals(FetchMode.JOIN.toKernelConstant(),\r\n-            FetchMode.JOIN.ordinal());\r\n-\r\n-        assertEquals(EagerFetchModes.EAGER_PARALLEL,\r\n-            FetchMode.PARALLEL.toKernelConstant());\r\n-        assertEquals(FetchMode.PARALLEL,\r\n-            FetchMode.fromKernelConstant(\r\n-                EagerFetchModes.EAGER_PARALLEL));\r\n-        assertEquals(FetchMode.PARALLEL.toKernelConstant(),\r\n-            FetchMode.PARALLEL.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(EagerFetchModes.class),\r\n-            FetchMode.values().length);\r\n-    }\r\n-\r\n-    public void testLRSSizeType() {\r\n-        assertEquals(LRSSizes.SIZE_UNKNOWN,\r\n-            LRSSizeAlgorithm.UNKNOWN.toKernelConstant());\r\n-        assertEquals(LRSSizeAlgorithm.UNKNOWN,\r\n-            LRSSizeAlgorithm.fromKernelConstant(\r\n-                LRSSizes.SIZE_UNKNOWN));\r\n-        assertEquals(LRSSizeAlgorithm.UNKNOWN.toKernelConstant(),\r\n-            LRSSizeAlgorithm.UNKNOWN.ordinal());\r\n-\r\n-        assertEquals(LRSSizes.SIZE_LAST,\r\n-            LRSSizeAlgorithm.LAST.toKernelConstant());\r\n-        assertEquals(LRSSizeAlgorithm.LAST,\r\n-            LRSSizeAlgorithm.fromKernelConstant(\r\n-                LRSSizes.SIZE_LAST));\r\n-        assertEquals(LRSSizeAlgorithm.LAST.toKernelConstant(),\r\n-            LRSSizeAlgorithm.LAST.ordinal());\r\n-\r\n-        assertEquals(LRSSizes.SIZE_QUERY,\r\n-            LRSSizeAlgorithm.QUERY.toKernelConstant());\r\n-        assertEquals(LRSSizeAlgorithm.QUERY,\r\n-            LRSSizeAlgorithm.fromKernelConstant(\r\n-                LRSSizes.SIZE_QUERY));\r\n-        assertEquals(LRSSizeAlgorithm.QUERY.toKernelConstant(),\r\n-            LRSSizeAlgorithm.QUERY.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(LRSSizes.class),\r\n-            LRSSizeAlgorithm.values().length);\r\n-    }\r\n-\r\n-    public void testJoinSyntaxType() {\r\n-        assertEquals(JoinSyntaxes.SYNTAX_SQL92,\r\n-            JoinSyntax.SQL92.toKernelConstant());\r\n-        assertEquals(JoinSyntax.SQL92,\r\n-            JoinSyntax.fromKernelConstant(\r\n-                JoinSyntaxes.SYNTAX_SQL92));\r\n-        assertEquals(JoinSyntax.SQL92.toKernelConstant(),\r\n-            JoinSyntax.SQL92.ordinal());\r\n-\r\n-        assertEquals(JoinSyntaxes.SYNTAX_TRADITIONAL,\r\n-            JoinSyntax.TRADITIONAL.toKernelConstant());\r\n-        assertEquals(JoinSyntax.TRADITIONAL,\r\n-            JoinSyntax.fromKernelConstant(\r\n-                JoinSyntaxes.SYNTAX_TRADITIONAL));\r\n-        assertEquals(JoinSyntax.TRADITIONAL.toKernelConstant(),\r\n-            JoinSyntax.TRADITIONAL.ordinal());\r\n-\r\n-        assertEquals(JoinSyntaxes.SYNTAX_DATABASE,\r\n-            JoinSyntax.DATABASE.toKernelConstant());\r\n-        assertEquals(JoinSyntax.DATABASE,\r\n-            JoinSyntax.fromKernelConstant(\r\n-                JoinSyntaxes.SYNTAX_DATABASE));\r\n-        assertEquals(JoinSyntax.DATABASE.toKernelConstant(),\r\n-            JoinSyntax.DATABASE.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(JoinSyntaxes.class),\r\n-            JoinSyntax.values().length);\r\n-    }\r\n-\r\n-    public void testResultSetType() {\r\n-        assertEquals(ResultSet.TYPE_FORWARD_ONLY,\r\n-            ResultSetType.FORWARD_ONLY.toKernelConstant());\r\n-        assertEquals(ResultSetType.FORWARD_ONLY,\r\n-            ResultSetType.fromKernelConstant(\r\n-                ResultSet.TYPE_FORWARD_ONLY));\r\n-\r\n-        assertEquals(ResultSet.TYPE_SCROLL_INSENSITIVE,\r\n-            ResultSetType.SCROLL_INSENSITIVE.toKernelConstant());\r\n-        assertEquals(ResultSetType.SCROLL_INSENSITIVE,\r\n-            ResultSetType.fromKernelConstant(\r\n-                ResultSet.TYPE_SCROLL_INSENSITIVE));\r\n-\r\n-        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE,\r\n-            ResultSetType.SCROLL_SENSITIVE.toKernelConstant());\r\n-        assertEquals(ResultSetType.SCROLL_SENSITIVE,\r\n-            ResultSetType.fromKernelConstant(\r\n-                ResultSet.TYPE_SCROLL_SENSITIVE));\r\n-\r\n-        assertEquals(3, ResultSetType.values().length);\r\n-    }\r\n-\r\n-    public void testFetchDirection() {\r\n-        assertEquals(ResultSet.FETCH_FORWARD,\r\n-            FetchDirection.FORWARD.toKernelConstant());\r\n-        assertEquals(FetchDirection.FORWARD,\r\n-            FetchDirection.fromKernelConstant(\r\n-                ResultSet.FETCH_FORWARD));\r\n-\r\n-        assertEquals(ResultSet.FETCH_REVERSE,\r\n-            FetchDirection.REVERSE.toKernelConstant());\r\n-        assertEquals(FetchDirection.REVERSE,\r\n-            FetchDirection.fromKernelConstant(\r\n-                ResultSet.FETCH_REVERSE));\r\n-\r\n-        assertEquals(ResultSet.FETCH_UNKNOWN,\r\n-            FetchDirection.UNKNOWN.toKernelConstant());\r\n-        assertEquals(FetchDirection.UNKNOWN,\r\n-            FetchDirection.fromKernelConstant(\r\n-                ResultSet.FETCH_UNKNOWN));\r\n-\r\n-        assertEquals(3, FetchDirection.values().length);\r\n-    }\r\n-\r\n-\r\n-    private int getConstantCount(Class cls) {\r\n-        return cls.getDeclaredFields().length;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import java.sql.ResultSet;\n+\n+import junit.framework.TestCase;\n+import org.apache.openjpa.jdbc.kernel.EagerFetchModes;\n+import org.apache.openjpa.jdbc.kernel.LRSSizes;\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n+\n+public class TestJDBCEnumToKernelConstantMappings\n+    extends TestCase {\n+\n+    public void testEagerFetchModes() {\n+        assertEquals(EagerFetchModes.EAGER_NONE,\n+            FetchMode.NONE.toKernelConstant());\n+        assertEquals(FetchMode.NONE,\n+            FetchMode.fromKernelConstant(\n+                EagerFetchModes.EAGER_NONE));\n+        assertEquals(FetchMode.NONE.toKernelConstant(),\n+            FetchMode.NONE.ordinal());\n+\n+        assertEquals(EagerFetchModes.EAGER_JOIN,\n+            FetchMode.JOIN.toKernelConstant());\n+        assertEquals(FetchMode.JOIN,\n+            FetchMode.fromKernelConstant(\n+                EagerFetchModes.EAGER_JOIN));\n+        assertEquals(FetchMode.JOIN.toKernelConstant(),\n+            FetchMode.JOIN.ordinal());\n+\n+        assertEquals(EagerFetchModes.EAGER_PARALLEL,\n+            FetchMode.PARALLEL.toKernelConstant());\n+        assertEquals(FetchMode.PARALLEL,\n+            FetchMode.fromKernelConstant(\n+                EagerFetchModes.EAGER_PARALLEL));\n+        assertEquals(FetchMode.PARALLEL.toKernelConstant(),\n+            FetchMode.PARALLEL.ordinal());\n+\n+        assertEquals(getConstantCount(EagerFetchModes.class),\n+            FetchMode.values().length);\n+    }\n+\n+    public void testLRSSizeType() {\n+        assertEquals(LRSSizes.SIZE_UNKNOWN,\n+            LRSSizeAlgorithm.UNKNOWN.toKernelConstant());\n+        assertEquals(LRSSizeAlgorithm.UNKNOWN,\n+            LRSSizeAlgorithm.fromKernelConstant(\n+                LRSSizes.SIZE_UNKNOWN));\n+        assertEquals(LRSSizeAlgorithm.UNKNOWN.toKernelConstant(),\n+            LRSSizeAlgorithm.UNKNOWN.ordinal());\n+\n+        assertEquals(LRSSizes.SIZE_LAST,\n+            LRSSizeAlgorithm.LAST.toKernelConstant());\n+        assertEquals(LRSSizeAlgorithm.LAST,\n+            LRSSizeAlgorithm.fromKernelConstant(\n+                LRSSizes.SIZE_LAST));\n+        assertEquals(LRSSizeAlgorithm.LAST.toKernelConstant(),\n+            LRSSizeAlgorithm.LAST.ordinal());\n+\n+        assertEquals(LRSSizes.SIZE_QUERY,\n+            LRSSizeAlgorithm.QUERY.toKernelConstant());\n+        assertEquals(LRSSizeAlgorithm.QUERY,\n+            LRSSizeAlgorithm.fromKernelConstant(\n+                LRSSizes.SIZE_QUERY));\n+        assertEquals(LRSSizeAlgorithm.QUERY.toKernelConstant(),\n+            LRSSizeAlgorithm.QUERY.ordinal());\n+\n+        assertEquals(getConstantCount(LRSSizes.class),\n+            LRSSizeAlgorithm.values().length);\n+    }\n+\n+    public void testJoinSyntaxType() {\n+        assertEquals(JoinSyntaxes.SYNTAX_SQL92,\n+            JoinSyntax.SQL92.toKernelConstant());\n+        assertEquals(JoinSyntax.SQL92,\n+            JoinSyntax.fromKernelConstant(\n+                JoinSyntaxes.SYNTAX_SQL92));\n+        assertEquals(JoinSyntax.SQL92.toKernelConstant(),\n+            JoinSyntax.SQL92.ordinal());\n+\n+        assertEquals(JoinSyntaxes.SYNTAX_TRADITIONAL,\n+            JoinSyntax.TRADITIONAL.toKernelConstant());\n+        assertEquals(JoinSyntax.TRADITIONAL,\n+            JoinSyntax.fromKernelConstant(\n+                JoinSyntaxes.SYNTAX_TRADITIONAL));\n+        assertEquals(JoinSyntax.TRADITIONAL.toKernelConstant(),\n+            JoinSyntax.TRADITIONAL.ordinal());\n+\n+        assertEquals(JoinSyntaxes.SYNTAX_DATABASE,\n+            JoinSyntax.DATABASE.toKernelConstant());\n+        assertEquals(JoinSyntax.DATABASE,\n+            JoinSyntax.fromKernelConstant(\n+                JoinSyntaxes.SYNTAX_DATABASE));\n+        assertEquals(JoinSyntax.DATABASE.toKernelConstant(),\n+            JoinSyntax.DATABASE.ordinal());\n+\n+        assertEquals(getConstantCount(JoinSyntaxes.class),\n+            JoinSyntax.values().length);\n+    }\n+\n+    public void testResultSetType() {\n+        assertEquals(ResultSet.TYPE_FORWARD_ONLY,\n+            ResultSetType.FORWARD_ONLY.toKernelConstant());\n+        assertEquals(ResultSetType.FORWARD_ONLY,\n+            ResultSetType.fromKernelConstant(\n+                ResultSet.TYPE_FORWARD_ONLY));\n+\n+        assertEquals(ResultSet.TYPE_SCROLL_INSENSITIVE,\n+            ResultSetType.SCROLL_INSENSITIVE.toKernelConstant());\n+        assertEquals(ResultSetType.SCROLL_INSENSITIVE,\n+            ResultSetType.fromKernelConstant(\n+                ResultSet.TYPE_SCROLL_INSENSITIVE));\n+\n+        assertEquals(ResultSet.TYPE_SCROLL_SENSITIVE,\n+            ResultSetType.SCROLL_SENSITIVE.toKernelConstant());\n+        assertEquals(ResultSetType.SCROLL_SENSITIVE,\n+            ResultSetType.fromKernelConstant(\n+                ResultSet.TYPE_SCROLL_SENSITIVE));\n+\n+        assertEquals(3, ResultSetType.values().length);\n+    }\n+\n+    public void testFetchDirection() {\n+        assertEquals(ResultSet.FETCH_FORWARD,\n+            FetchDirection.FORWARD.toKernelConstant());\n+        assertEquals(FetchDirection.FORWARD,\n+            FetchDirection.fromKernelConstant(\n+                ResultSet.FETCH_FORWARD));\n+\n+        assertEquals(ResultSet.FETCH_REVERSE,\n+            FetchDirection.REVERSE.toKernelConstant());\n+        assertEquals(FetchDirection.REVERSE,\n+            FetchDirection.fromKernelConstant(\n+                ResultSet.FETCH_REVERSE));\n+\n+        assertEquals(ResultSet.FETCH_UNKNOWN,\n+            FetchDirection.UNKNOWN.toKernelConstant());\n+        assertEquals(FetchDirection.UNKNOWN,\n+            FetchDirection.fromKernelConstant(\n+                ResultSet.FETCH_UNKNOWN));\n+\n+        assertEquals(3, FetchDirection.values().length);\n+    }\n+\n+\n+    private int getConstantCount(Class cls) {\n+        return cls.getDeclaredFields().length;\n+    }\n }\n\\ No newline at end of file"},{"sha":"352c4271f150be2aeff3c3cd0254852aaa85585a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","status":"modified","additions":127,"deletions":127,"changes":254,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/TestOptimizeForClause.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,127 +1,127 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.InvalidStateException;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.jdbc.sql.DB2Dictionary;\r\n-import org.apache.openjpa.jdbc.sql.HSQLDictionary;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-\r\n-public class TestOptimizeForClause\r\n-    extends SQLListenerTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n-    }\r\n-\r\n-    public void testOptimizeForClauseViaGetSingleResult() {\r\n-        OpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n-        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\r\n-            .getDBDictionaryInstance();\r\n-        \r\n-        em.getTransaction().begin();\r\n-        AllFieldTypes a = new AllFieldTypes();\r\n-        a.setIntField(123);\r\n-        em.persist(a);\r\n-        em.getTransaction().commit();\r\n-        em.clear();\r\n-\r\n-        sql.clear();\r\n-        Object result = em.createQuery\r\n-            (\"select o from AllFieldTypes o where o.intField = 123\").\r\n-            getSingleResult();\r\n-\r\n-        assertNotNull(result);\r\n-        if (dict instanceof DB2Dictionary ) {\r\n-            assertContainsSQL(\" optimize for 1 row\");\r\n-        }\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOptimizeForClauseViaHint() {\r\n-        tstOptimizeForClause(true,false,false);\r\n-    }\r\n-\r\n-    public void testOptimizeForClauseViaFind() {\r\n-        tstOptimizeForClause(false,true,false);\r\n-    }\r\n-    public void testOptimizeForClauseViaQueryHint() {\r\n-        tstOptimizeForClause(false,true,true);\r\n-    }\r\n-    public void tstOptimizeForClause(boolean hint,\r\n-        boolean find, boolean queryHint) {\r\n-        OpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n-        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\r\n-            .getDBDictionaryInstance();\r\n-\r\n-        // hsql doesn't support optimizing; circumvent the test\r\n-        if (dict instanceof HSQLDictionary)\r\n-            return;\r\n-\r\n-        sql.clear();\r\n-        try {\r\n-            em.getTransaction().begin();\r\n-            if (hint || queryHint) {\r\n-                if (hint) {\r\n-                    Query q = em.createQuery(\r\n-                    \"select o from AllFieldTypes o where o.intField = :p\");\r\n-                    q.setParameter(\"p\", 0);\r\n-                    q.setHint(\"openjpa.hint.OptimizeResultCount\"\r\n-                         ,new Integer(8));\r\n-                    q.getResultList();\r\n-                }    \r\n-                else {\r\n-                    OpenJPAQuery q =  OpenJPAPersistence.cast (em.createQuery \r\n-                        (\"select o from AllFieldTypes o where o.intField \" +\r\n-                         \"= :p\"));\r\n-                    q.setParameter(\"p\", 0);\r\n-                    q.setHint(q.HINT_RESULT_COUNT, new Integer(8)); \r\n-                    q.getResultList();\r\n-               }     \r\n-               if (dict instanceof DB2Dictionary) {\r\n-                   assertEquals(1, sql.size());\r\n-                   assertContainsSQL(\" optimize for 8 row\");\r\n-               }\r\n-            }\r\n-            else {\r\n-                 em.find(AllFieldTypes.class, 0);\r\n-                 if (dict instanceof DB2Dictionary ) {\r\n-                    assertEquals(1, sql.size());\r\n-                    assertContainsSQL(\" optimize for 1 row\");\r\n-                }\r\n-                   \r\n-            }\r\n-        } catch (InvalidStateException pe) {\r\n-            // if we're not using DB2, we expect an InvalidStateException.\r\n-            if (dict instanceof DB2Dictionary)\r\n-                throw pe;\r\n-        } finally {\r\n-            em.getTransaction().rollback();\r\n-            em.close();\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.InvalidStateException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n+import org.apache.openjpa.jdbc.sql.HSQLDictionary;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+\n+public class TestOptimizeForClause\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testOptimizeForClauseViaGetSingleResult() {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        \n+        em.getTransaction().begin();\n+        AllFieldTypes a = new AllFieldTypes();\n+        a.setIntField(123);\n+        em.persist(a);\n+        em.getTransaction().commit();\n+        em.clear();\n+\n+        sql.clear();\n+        Object result = em.createQuery\n+            (\"select o from AllFieldTypes o where o.intField = 123\").\n+            getSingleResult();\n+\n+        assertNotNull(result);\n+        if (dict instanceof DB2Dictionary ) {\n+            assertContainsSQL(\" optimize for 1 row\");\n+        }\n+        em.close();\n+    }\n+\n+    public void testOptimizeForClauseViaHint() {\n+        tstOptimizeForClause(true,false,false);\n+    }\n+\n+    public void testOptimizeForClauseViaFind() {\n+        tstOptimizeForClause(false,true,false);\n+    }\n+    public void testOptimizeForClauseViaQueryHint() {\n+        tstOptimizeForClause(false,true,true);\n+    }\n+    public void tstOptimizeForClause(boolean hint,\n+        boolean find, boolean queryHint) {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+\n+        // hsql doesn't support optimizing; circumvent the test\n+        if (dict instanceof HSQLDictionary)\n+            return;\n+\n+        sql.clear();\n+        try {\n+            em.getTransaction().begin();\n+            if (hint || queryHint) {\n+                if (hint) {\n+                    Query q = em.createQuery(\n+                    \"select o from AllFieldTypes o where o.intField = :p\");\n+                    q.setParameter(\"p\", 0);\n+                    q.setHint(\"openjpa.hint.OptimizeResultCount\"\n+                         ,new Integer(8));\n+                    q.getResultList();\n+                }    \n+                else {\n+                    OpenJPAQuery q =  OpenJPAPersistence.cast (em.createQuery \n+                        (\"select o from AllFieldTypes o where o.intField \" +\n+                         \"= :p\"));\n+                    q.setParameter(\"p\", 0);\n+                    q.setHint(q.HINT_RESULT_COUNT, new Integer(8)); \n+                    q.getResultList();\n+               }     \n+               if (dict instanceof DB2Dictionary) {\n+                   assertEquals(1, sql.size());\n+                   assertContainsSQL(\" optimize for 8 row\");\n+               }\n+            }\n+            else {\n+                 em.find(AllFieldTypes.class, 0);\n+                 if (dict instanceof DB2Dictionary ) {\n+                    assertEquals(1, sql.size());\n+                    assertContainsSQL(\" optimize for 1 row\");\n+                }\n+                   \n+            }\n+        } catch (InvalidStateException pe) {\n+            // if we're not using DB2, we expect an InvalidStateException.\n+            if (dict instanceof DB2Dictionary)\n+                throw pe;\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+        }\n+    }\n+}"},{"sha":"5d2d9407c9cfa07e1d54d9dd57f44af85bfe27b1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","status":"modified","additions":312,"deletions":312,"changes":624,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,312 +1,312 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.*;\r\n-\r\n-@Entity\r\n-@Table(name = \"ANNOTEST1\")\r\n-@Inheritance(strategy = InheritanceType.JOINED)\r\n-@DiscriminatorColumn(name = \"ANNOCLS\")\r\n-@DiscriminatorValue(\"ANNO1\")\r\n-@SecondaryTables({ @SecondaryTable(name = \"OTHER_ANNOTEST1\",\r\n-    pkJoinColumns = @PrimaryKeyJoinColumn(name = \"OTHER_PK\",\r\n-        referencedColumnName = \"PK\")) })\r\n-public class AnnoTest1 {\r\n-\r\n-    @Id\r\n-    @Column(name = \"PK\")\r\n-    protected Long pk;\r\n-\r\n-    @Version\r\n-    @Column(name = \"ANNOVER\")\r\n-    protected int version;\r\n-\r\n-    @Basic\r\n-    protected int basic;\r\n-\r\n-    @Transient\r\n-    protected int trans;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"OTHERVALUE\", table = \"OTHER_ANNOTEST1\")\r\n-    protected int otherTableBasic;\r\n-\r\n-    @OneToOne(fetch = FetchType.LAZY)\r\n-    @JoinColumn(name = \"SELFONEONE_PK\", referencedColumnName = \"PK\")\r\n-    protected AnnoTest1 selfOneOne;\r\n-\r\n-    @OneToOne\r\n-    @PrimaryKeyJoinColumn\r\n-    protected AnnoTest1 pkJoinSelfOneOne;\r\n-\r\n-    @OneToOne\r\n-    @JoinColumns({\r\n-    @JoinColumn(name = \"ONEONE_PK1\", referencedColumnName = \"PK1\"),\r\n-    @JoinColumn(name = \"ONEONE_PK2\", referencedColumnName = \"PK2\") })\r\n-    protected AnnoTest2 oneOne;\r\n-\r\n-    @OneToOne(fetch = FetchType.LAZY)\r\n-    @JoinColumns({\r\n-    @JoinColumn(name = \"OTHERONE_PK1\", referencedColumnName = \"PK1\",\r\n-        table = \"OTHER_ANNOTEST1\"),\r\n-    @JoinColumn(name = \"OTHERONE_PK2\", referencedColumnName = \"PK2\",\r\n-        table = \"OTHER_ANNOTEST1\") })\r\n-    protected AnnoTest2 otherTableOneOne;\r\n-\r\n-    @OneToOne(mappedBy = \"inverseOneOne\", fetch = FetchType.LAZY)\r\n-    protected AnnoTest2 inverseOwnerOneOne;\r\n-\r\n-    @Lob\r\n-    @Column(name = \"BLOBVAL\")\r\n-    protected byte[] blob;\r\n-\r\n-    @Basic\r\n-    @Lob\r\n-    @Column(name = \"SERVAL\")\r\n-    protected Object serial;\r\n-\r\n-    @Column(name = \"CLOBVAL\")\r\n-    @Lob\r\n-    protected String clob;\r\n-\r\n-    // un-annotated enum should be persisted by default\r\n-    @Column(name = \"ENUMVAL\")\r\n-    protected InheritanceType enumeration;\r\n-\r\n-    @Enumerated\r\n-    @Column(name = \"ORD_ENUMVAL\")\r\n-    protected InheritanceType ordinalEnumeration;\r\n-\r\n-    @Enumerated(EnumType.STRING)\r\n-    @Column(name = \"STR_ENUMVAL\")\r\n-    protected InheritanceType stringEnumeration;\r\n-\r\n-    @OneToMany\r\n-    @ElementJoinColumn(name = \"ONEMANY_PK\", referencedColumnName = \"PK\")\r\n-    protected Set<AnnoTest2> oneMany = new HashSet();\r\n-\r\n-    @OneToMany(mappedBy = \"oneManyOwner\")\r\n-    protected Set<AnnoTest2> inverseOwnerOneMany = new HashSet();\r\n-\r\n-    @ManyToMany\r\n-    @JoinTable(name = \"ANNOTEST1_MANYMANY\",\r\n-        joinColumns = @JoinColumn(name = \"MANY_PK\"),\r\n-        inverseJoinColumns = {\r\n-        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n-        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") })\r\n-    protected Set<AnnoTest2> manyMany = new HashSet();\r\n-\r\n-    @ManyToMany(mappedBy = \"manyMany\")\r\n-    protected Set<AnnoTest2> inverseOwnerManyMany = new HashSet();\r\n-\r\n-    @MapKey\r\n-    @OneToMany\r\n-    protected Map<Integer, Flat1> defaultMapKey = new HashMap();\r\n-\r\n-    @MapKey(name = \"basic\")\r\n-    @OneToMany\r\n-    protected Map<Integer, Flat1> namedMapKey = new HashMap();\r\n-\r\n-    @MapKey(name = \"basic\")\r\n-    @OneToMany(mappedBy = \"oneManyOwner\")\r\n-    protected Map<String, AnnoTest2> inverseOwnerMapKey = new HashMap();\r\n-\r\n-    public AnnoTest1() {\r\n-    }\r\n-\r\n-    public AnnoTest1(long pk) {\r\n-        this(new Long(pk));\r\n-    }\r\n-\r\n-    public AnnoTest1(Long pk) {\r\n-        this.pk = pk;\r\n-    }\r\n-\r\n-    public void setPk(Long val) {\r\n-        pk = val;\r\n-    }\r\n-\r\n-    public Long getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public int getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setBasic(int i) {\r\n-        basic = i;\r\n-    }\r\n-\r\n-    public int getBasic() {\r\n-        return basic;\r\n-    }\r\n-\r\n-    public void setTransient(int i) {\r\n-        trans = i;\r\n-    }\r\n-\r\n-    public int getTransient() {\r\n-        return trans;\r\n-    }\r\n-\r\n-    public void setOtherTableBasic(int i) {\r\n-        otherTableBasic = i;\r\n-    }\r\n-\r\n-    public int getOtherTableBasic() {\r\n-        return otherTableBasic;\r\n-    }\r\n-\r\n-    public void setSelfOneOne(AnnoTest1 other) {\r\n-        selfOneOne = other;\r\n-    }\r\n-\r\n-    public AnnoTest1 getSelfOneOne() {\r\n-        return selfOneOne;\r\n-    }\r\n-\r\n-    public void setPKJoinSelfOneOne(AnnoTest1 other) {\r\n-        pkJoinSelfOneOne = other;\r\n-    }\r\n-\r\n-    public AnnoTest1 getPKJoinSelfOneOne() {\r\n-        return pkJoinSelfOneOne;\r\n-    }\r\n-\r\n-    public void setOneOne(AnnoTest2 other) {\r\n-        oneOne = other;\r\n-    }\r\n-\r\n-    public AnnoTest2 getOneOne() {\r\n-        return oneOne;\r\n-    }\r\n-\r\n-    public void setOtherTableOneOne(AnnoTest2 other) {\r\n-        otherTableOneOne = other;\r\n-    }\r\n-\r\n-    public AnnoTest2 getOtherTableOneOne() {\r\n-        return otherTableOneOne;\r\n-    }\r\n-\r\n-    public void setInverseOwnerOneOne(AnnoTest2 other) {\r\n-        inverseOwnerOneOne = other;\r\n-    }\r\n-\r\n-    public AnnoTest2 getInverseOwnerOneOne() {\r\n-        return inverseOwnerOneOne;\r\n-    }\r\n-\r\n-    public void setBlob(byte[] bytes) {\r\n-        blob = bytes;\r\n-    }\r\n-\r\n-    public byte[] getBlob() {\r\n-        return blob;\r\n-    }\r\n-\r\n-    public void setSerialized(Object o) {\r\n-        serial = o;\r\n-    }\r\n-\r\n-    public Object getSerialized() {\r\n-        return serial;\r\n-    }\r\n-\r\n-    public void setClob(String s) {\r\n-        clob = s;\r\n-    }\r\n-\r\n-    public String getClob() {\r\n-        return clob;\r\n-    }\r\n-\r\n-    public InheritanceType getEnumeration() {\r\n-        return enumeration;\r\n-    }\r\n-\r\n-    public void setEnumeration(InheritanceType val) {\r\n-        enumeration = val;\r\n-    }\r\n-\r\n-    public InheritanceType getOrdinalEnumeration() {\r\n-        return ordinalEnumeration;\r\n-    }\r\n-\r\n-    public void setOrdinalEnumeration(InheritanceType val) {\r\n-        ordinalEnumeration = val;\r\n-    }\r\n-\r\n-    public InheritanceType getStringEnumeration() {\r\n-        return stringEnumeration;\r\n-    }\r\n-\r\n-    public void setStringEnumeration(InheritanceType val) {\r\n-        stringEnumeration = val;\r\n-    }\r\n-\r\n-    public Set<AnnoTest2> getOneMany() {\r\n-        return oneMany;\r\n-    }\r\n-\r\n-    public Set<AnnoTest2> getInverseOwnerOneMany() {\r\n-        return inverseOwnerOneMany;\r\n-    }\r\n-\r\n-    public Set<AnnoTest2> getManyMany() {\r\n-        return manyMany;\r\n-    }\r\n-\r\n-    public Set<AnnoTest2> getInverseOwnerManyMany() {\r\n-        return inverseOwnerManyMany;\r\n-    }\r\n-\r\n-    public Map<Integer, Flat1> getDefaultMapKey() {\r\n-        return this.defaultMapKey;\r\n-    }\r\n-\r\n-    public void setDefaultMapKey(Map<Integer, Flat1> defaultMapKey) {\r\n-        this.defaultMapKey = defaultMapKey;\r\n-    }\r\n-\r\n-    public Map<Integer, Flat1> getNamedMapKey() {\r\n-        return this.namedMapKey;\r\n-    }\r\n-\r\n-    public void setNamedMapKey(Map<Integer, Flat1> namedMapKey) {\r\n-        this.namedMapKey = namedMapKey;\r\n-    }\r\n-\r\n-    public Map<String, AnnoTest2> getInverseOwnerMapKey() {\r\n-        return this.inverseOwnerMapKey;\r\n-    }\r\n-\r\n-    public void setInverseOwnerMapKey(\r\n-        Map<String, AnnoTest2> inverseOwnerMapKey) {\r\n-        this.inverseOwnerMapKey = inverseOwnerMapKey;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.persistence.jdbc.*;\n+\n+@Entity\n+@Table(name = \"ANNOTEST1\")\n+@Inheritance(strategy = InheritanceType.JOINED)\n+@DiscriminatorColumn(name = \"ANNOCLS\")\n+@DiscriminatorValue(\"ANNO1\")\n+@SecondaryTables({ @SecondaryTable(name = \"OTHER_ANNOTEST1\",\n+    pkJoinColumns = @PrimaryKeyJoinColumn(name = \"OTHER_PK\",\n+        referencedColumnName = \"PK\")) })\n+public class AnnoTest1 {\n+\n+    @Id\n+    @Column(name = \"PK\")\n+    protected Long pk;\n+\n+    @Version\n+    @Column(name = \"ANNOVER\")\n+    protected int version;\n+\n+    @Basic\n+    protected int basic;\n+\n+    @Transient\n+    protected int trans;\n+\n+    @Basic\n+    @Column(name = \"OTHERVALUE\", table = \"OTHER_ANNOTEST1\")\n+    protected int otherTableBasic;\n+\n+    @OneToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"SELFONEONE_PK\", referencedColumnName = \"PK\")\n+    protected AnnoTest1 selfOneOne;\n+\n+    @OneToOne\n+    @PrimaryKeyJoinColumn\n+    protected AnnoTest1 pkJoinSelfOneOne;\n+\n+    @OneToOne\n+    @JoinColumns({\n+    @JoinColumn(name = \"ONEONE_PK1\", referencedColumnName = \"PK1\"),\n+    @JoinColumn(name = \"ONEONE_PK2\", referencedColumnName = \"PK2\") })\n+    protected AnnoTest2 oneOne;\n+\n+    @OneToOne(fetch = FetchType.LAZY)\n+    @JoinColumns({\n+    @JoinColumn(name = \"OTHERONE_PK1\", referencedColumnName = \"PK1\",\n+        table = \"OTHER_ANNOTEST1\"),\n+    @JoinColumn(name = \"OTHERONE_PK2\", referencedColumnName = \"PK2\",\n+        table = \"OTHER_ANNOTEST1\") })\n+    protected AnnoTest2 otherTableOneOne;\n+\n+    @OneToOne(mappedBy = \"inverseOneOne\", fetch = FetchType.LAZY)\n+    protected AnnoTest2 inverseOwnerOneOne;\n+\n+    @Lob\n+    @Column(name = \"BLOBVAL\")\n+    protected byte[] blob;\n+\n+    @Basic\n+    @Lob\n+    @Column(name = \"SERVAL\")\n+    protected Object serial;\n+\n+    @Column(name = \"CLOBVAL\")\n+    @Lob\n+    protected String clob;\n+\n+    // un-annotated enum should be persisted by default\n+    @Column(name = \"ENUMVAL\")\n+    protected InheritanceType enumeration;\n+\n+    @Enumerated\n+    @Column(name = \"ORD_ENUMVAL\")\n+    protected InheritanceType ordinalEnumeration;\n+\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"STR_ENUMVAL\")\n+    protected InheritanceType stringEnumeration;\n+\n+    @OneToMany\n+    @ElementJoinColumn(name = \"ONEMANY_PK\", referencedColumnName = \"PK\")\n+    protected Set<AnnoTest2> oneMany = new HashSet();\n+\n+    @OneToMany(mappedBy = \"oneManyOwner\")\n+    protected Set<AnnoTest2> inverseOwnerOneMany = new HashSet();\n+\n+    @ManyToMany\n+    @JoinTable(name = \"ANNOTEST1_MANYMANY\",\n+        joinColumns = @JoinColumn(name = \"MANY_PK\"),\n+        inverseJoinColumns = {\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") })\n+    protected Set<AnnoTest2> manyMany = new HashSet();\n+\n+    @ManyToMany(mappedBy = \"manyMany\")\n+    protected Set<AnnoTest2> inverseOwnerManyMany = new HashSet();\n+\n+    @MapKey\n+    @OneToMany\n+    protected Map<Integer, Flat1> defaultMapKey = new HashMap();\n+\n+    @MapKey(name = \"basic\")\n+    @OneToMany\n+    protected Map<Integer, Flat1> namedMapKey = new HashMap();\n+\n+    @MapKey(name = \"basic\")\n+    @OneToMany(mappedBy = \"oneManyOwner\")\n+    protected Map<String, AnnoTest2> inverseOwnerMapKey = new HashMap();\n+\n+    public AnnoTest1() {\n+    }\n+\n+    public AnnoTest1(long pk) {\n+        this(new Long(pk));\n+    }\n+\n+    public AnnoTest1(Long pk) {\n+        this.pk = pk;\n+    }\n+\n+    public void setPk(Long val) {\n+        pk = val;\n+    }\n+\n+    public Long getPk() {\n+        return pk;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setBasic(int i) {\n+        basic = i;\n+    }\n+\n+    public int getBasic() {\n+        return basic;\n+    }\n+\n+    public void setTransient(int i) {\n+        trans = i;\n+    }\n+\n+    public int getTransient() {\n+        return trans;\n+    }\n+\n+    public void setOtherTableBasic(int i) {\n+        otherTableBasic = i;\n+    }\n+\n+    public int getOtherTableBasic() {\n+        return otherTableBasic;\n+    }\n+\n+    public void setSelfOneOne(AnnoTest1 other) {\n+        selfOneOne = other;\n+    }\n+\n+    public AnnoTest1 getSelfOneOne() {\n+        return selfOneOne;\n+    }\n+\n+    public void setPKJoinSelfOneOne(AnnoTest1 other) {\n+        pkJoinSelfOneOne = other;\n+    }\n+\n+    public AnnoTest1 getPKJoinSelfOneOne() {\n+        return pkJoinSelfOneOne;\n+    }\n+\n+    public void setOneOne(AnnoTest2 other) {\n+        oneOne = other;\n+    }\n+\n+    public AnnoTest2 getOneOne() {\n+        return oneOne;\n+    }\n+\n+    public void setOtherTableOneOne(AnnoTest2 other) {\n+        otherTableOneOne = other;\n+    }\n+\n+    public AnnoTest2 getOtherTableOneOne() {\n+        return otherTableOneOne;\n+    }\n+\n+    public void setInverseOwnerOneOne(AnnoTest2 other) {\n+        inverseOwnerOneOne = other;\n+    }\n+\n+    public AnnoTest2 getInverseOwnerOneOne() {\n+        return inverseOwnerOneOne;\n+    }\n+\n+    public void setBlob(byte[] bytes) {\n+        blob = bytes;\n+    }\n+\n+    public byte[] getBlob() {\n+        return blob;\n+    }\n+\n+    public void setSerialized(Object o) {\n+        serial = o;\n+    }\n+\n+    public Object getSerialized() {\n+        return serial;\n+    }\n+\n+    public void setClob(String s) {\n+        clob = s;\n+    }\n+\n+    public String getClob() {\n+        return clob;\n+    }\n+\n+    public InheritanceType getEnumeration() {\n+        return enumeration;\n+    }\n+\n+    public void setEnumeration(InheritanceType val) {\n+        enumeration = val;\n+    }\n+\n+    public InheritanceType getOrdinalEnumeration() {\n+        return ordinalEnumeration;\n+    }\n+\n+    public void setOrdinalEnumeration(InheritanceType val) {\n+        ordinalEnumeration = val;\n+    }\n+\n+    public InheritanceType getStringEnumeration() {\n+        return stringEnumeration;\n+    }\n+\n+    public void setStringEnumeration(InheritanceType val) {\n+        stringEnumeration = val;\n+    }\n+\n+    public Set<AnnoTest2> getOneMany() {\n+        return oneMany;\n+    }\n+\n+    public Set<AnnoTest2> getInverseOwnerOneMany() {\n+        return inverseOwnerOneMany;\n+    }\n+\n+    public Set<AnnoTest2> getManyMany() {\n+        return manyMany;\n+    }\n+\n+    public Set<AnnoTest2> getInverseOwnerManyMany() {\n+        return inverseOwnerManyMany;\n+    }\n+\n+    public Map<Integer, Flat1> getDefaultMapKey() {\n+        return this.defaultMapKey;\n+    }\n+\n+    public void setDefaultMapKey(Map<Integer, Flat1> defaultMapKey) {\n+        this.defaultMapKey = defaultMapKey;\n+    }\n+\n+    public Map<Integer, Flat1> getNamedMapKey() {\n+        return this.namedMapKey;\n+    }\n+\n+    public void setNamedMapKey(Map<Integer, Flat1> namedMapKey) {\n+        this.namedMapKey = namedMapKey;\n+    }\n+\n+    public Map<String, AnnoTest2> getInverseOwnerMapKey() {\n+        return this.inverseOwnerMapKey;\n+    }\n+\n+    public void setInverseOwnerMapKey(\n+        Map<String, AnnoTest2> inverseOwnerMapKey) {\n+        this.inverseOwnerMapKey = inverseOwnerMapKey;\n+    }\n+}\n+"},{"sha":"843d15d04923c1e0a1d7b10be74aa27e5086f7c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","status":"modified","additions":166,"deletions":166,"changes":332,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,166 +1,166 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name = \"ANNOTEST2\")\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"ANNOCLS\")\r\n-@DiscriminatorValue(\"ANNO2\")\r\n-@IdClass(AnnoTest2.Oid.class)\r\n-public class AnnoTest2 {\r\n-\r\n-    @Id\r\n-    @Column(name = \"PK1\")\r\n-    protected long pk1;\r\n-\r\n-    @Id\r\n-    @Column(name = \"PK2\")\r\n-    protected String pk2;\r\n-\r\n-    @Version\r\n-    @Column(name = \"ANNOVER\")\r\n-    protected Date version;\r\n-\r\n-    @Basic\r\n-    protected String basic;\r\n-\r\n-    @OneToOne(fetch = FetchType.LAZY)\r\n-    @JoinColumn(name = \"INVERSEONEONE_PK\", referencedColumnName = \"PK\")\r\n-    protected AnnoTest1 inverseOneOne;\r\n-\r\n-    @ManyToOne(fetch = FetchType.LAZY)\r\n-    @JoinColumn(name = \"MANYONEONE_PK\", referencedColumnName = \"PK\")\r\n-    protected AnnoTest1 oneManyOwner;\r\n-\r\n-    @ManyToMany\r\n-    @JoinTable(name = \"ANNOTEST2_MANYMANY\",\r\n-        joinColumns = {\r\n-        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\r\n-        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") },\r\n-        inverseJoinColumns =\r\n-        @JoinColumn(name = \"MANYE_PK\", referencedColumnName = \"PK\"))\r\n-    protected Set<AnnoTest1> manyMany = new HashSet();\r\n-\r\n-    public AnnoTest2() {\r\n-    }\r\n-\r\n-    public AnnoTest2(long pk1, String pk2) {\r\n-        this.pk1 = pk1;\r\n-        this.pk2 = pk2;\r\n-    }\r\n-\r\n-    public void setPk1(long val) {\r\n-        pk1 = val;\r\n-    }\r\n-\r\n-    public long getPk1() {\r\n-        return pk1;\r\n-    }\r\n-\r\n-    public void setPk2(String str) {\r\n-        pk2 = str;\r\n-    }\r\n-\r\n-    public String getPk2() {\r\n-        return pk2;\r\n-    }\r\n-\r\n-    public Date getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setBasic(String s) {\r\n-        basic = s;\r\n-    }\r\n-\r\n-    public String getBasic() {\r\n-        return basic;\r\n-    }\r\n-\r\n-    public void setInverseOneOne(AnnoTest1 other) {\r\n-        inverseOneOne = other;\r\n-    }\r\n-\r\n-    public AnnoTest1 getInverseOneOne() {\r\n-        return inverseOneOne;\r\n-    }\r\n-\r\n-    public void setOneManyOwner(AnnoTest1 other) {\r\n-        oneManyOwner = other;\r\n-    }\r\n-\r\n-    public AnnoTest1 getOneManyOwner() {\r\n-        return oneManyOwner;\r\n-    }\r\n-\r\n-    public Set getManyMany() {\r\n-        return manyMany;\r\n-    }\r\n-\r\n-    public static class Oid {\r\n-\r\n-        public long pk1;\r\n-        public String pk2;\r\n-\r\n-        public Oid() {\r\n-        }\r\n-\r\n-        public Oid(long pk1, String pk2) {\r\n-            this.pk1 = pk1;\r\n-            this.pk2 = pk2;\r\n-        }\r\n-\r\n-        public Oid(String str) {\r\n-            if (str != null) {\r\n-                int index = str.indexOf(\",\");\r\n-                pk1 = Long.parseLong(str.substring(0, index));\r\n-                pk2 = str.substring(index + 1);\r\n-                if (\"null\".equals(pk2))\r\n-                    pk2 = null;\r\n-            }\r\n-        }\r\n-\r\n-        public boolean equals(Object o) {\r\n-            if (o == this)\r\n-                return true;\r\n-            if (!(o instanceof Oid))\r\n-                return false;\r\n-            Oid other = (Oid) o;\r\n-            if (pk1 != other.pk1)\r\n-                return false;\r\n-            if (pk2 == null)\r\n-                return other.pk2 == null;\r\n-            return pk2.equals(other.pk2);\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return ((int) pk1) + (pk2 == null ? 0 : pk2.hashCode());\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk1 + \",\" + (pk2 == null ? \"null\" : pk2);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name = \"ANNOTEST2\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"ANNOCLS\")\n+@DiscriminatorValue(\"ANNO2\")\n+@IdClass(AnnoTest2.Oid.class)\n+public class AnnoTest2 {\n+\n+    @Id\n+    @Column(name = \"PK1\")\n+    protected long pk1;\n+\n+    @Id\n+    @Column(name = \"PK2\")\n+    protected String pk2;\n+\n+    @Version\n+    @Column(name = \"ANNOVER\")\n+    protected Date version;\n+\n+    @Basic\n+    protected String basic;\n+\n+    @OneToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"INVERSEONEONE_PK\", referencedColumnName = \"PK\")\n+    protected AnnoTest1 inverseOneOne;\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"MANYONEONE_PK\", referencedColumnName = \"PK\")\n+    protected AnnoTest1 oneManyOwner;\n+\n+    @ManyToMany\n+    @JoinTable(name = \"ANNOTEST2_MANYMANY\",\n+        joinColumns = {\n+        @JoinColumn(name = \"MANY_PK1\", referencedColumnName = \"PK1\"),\n+        @JoinColumn(name = \"MANY_PK2\", referencedColumnName = \"PK2\") },\n+        inverseJoinColumns =\n+        @JoinColumn(name = \"MANYE_PK\", referencedColumnName = \"PK\"))\n+    protected Set<AnnoTest1> manyMany = new HashSet();\n+\n+    public AnnoTest2() {\n+    }\n+\n+    public AnnoTest2(long pk1, String pk2) {\n+        this.pk1 = pk1;\n+        this.pk2 = pk2;\n+    }\n+\n+    public void setPk1(long val) {\n+        pk1 = val;\n+    }\n+\n+    public long getPk1() {\n+        return pk1;\n+    }\n+\n+    public void setPk2(String str) {\n+        pk2 = str;\n+    }\n+\n+    public String getPk2() {\n+        return pk2;\n+    }\n+\n+    public Date getVersion() {\n+        return version;\n+    }\n+\n+    public void setBasic(String s) {\n+        basic = s;\n+    }\n+\n+    public String getBasic() {\n+        return basic;\n+    }\n+\n+    public void setInverseOneOne(AnnoTest1 other) {\n+        inverseOneOne = other;\n+    }\n+\n+    public AnnoTest1 getInverseOneOne() {\n+        return inverseOneOne;\n+    }\n+\n+    public void setOneManyOwner(AnnoTest1 other) {\n+        oneManyOwner = other;\n+    }\n+\n+    public AnnoTest1 getOneManyOwner() {\n+        return oneManyOwner;\n+    }\n+\n+    public Set getManyMany() {\n+        return manyMany;\n+    }\n+\n+    public static class Oid {\n+\n+        public long pk1;\n+        public String pk2;\n+\n+        public Oid() {\n+        }\n+\n+        public Oid(long pk1, String pk2) {\n+            this.pk1 = pk1;\n+            this.pk2 = pk2;\n+        }\n+\n+        public Oid(String str) {\n+            if (str != null) {\n+                int index = str.indexOf(\",\");\n+                pk1 = Long.parseLong(str.substring(0, index));\n+                pk2 = str.substring(index + 1);\n+                if (\"null\".equals(pk2))\n+                    pk2 = null;\n+            }\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == this)\n+                return true;\n+            if (!(o instanceof Oid))\n+                return false;\n+            Oid other = (Oid) o;\n+            if (pk1 != other.pk1)\n+                return false;\n+            if (pk2 == null)\n+                return other.pk2 == null;\n+            return pk2.equals(other.pk2);\n+        }\n+\n+        public int hashCode() {\n+            return ((int) pk1) + (pk2 == null ? 0 : pk2.hashCode());\n+        }\n+\n+        public String toString() {\n+            return pk1 + \",\" + (pk2 == null ? \"null\" : pk2);\n+        }\n+    }\n+}"},{"sha":"3cd7171e5eba49fda7fd585e63420ece3fe58edc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/AnnoTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"ANNO3\")\r\n-@Table(name = \"ANNOTEST3\")\r\n-@PrimaryKeyJoinColumns(@PrimaryKeyJoinColumn(name = \"SUB_PK\",\r\n-    referencedColumnName = \"PK\"))\r\n-public class AnnoTest3 extends AnnoTest1 {\r\n-\r\n-    @Basic\r\n-    @Column(name = \"SUBBASIC\")\r\n-    protected int basic2;\r\n-\r\n-    @OneToOne(fetch = FetchType.LAZY)\r\n-    protected AnnoTest2 subOneOne;\r\n-\r\n-    public AnnoTest3() {\r\n-    }\r\n-\r\n-    public AnnoTest3(long pk) {\r\n-        super(pk);\r\n-    }\r\n-\r\n-    public AnnoTest3(Long pk) {\r\n-        super(pk);\r\n-    }\r\n-\r\n-    public void setBasic2(int i) {\r\n-        basic2 = i;\r\n-    }\r\n-\r\n-    public int getBasic2() {\r\n-        return basic2;\r\n-    }\r\n-\r\n-    public AnnoTest2 getSubOneOne() {\r\n-        return subOneOne;\r\n-    }\r\n-\r\n-    public void setSubOneOne(AnnoTest2 anno2) {\r\n-        subOneOne = anno2;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@DiscriminatorValue(\"ANNO3\")\n+@Table(name = \"ANNOTEST3\")\n+@PrimaryKeyJoinColumns(@PrimaryKeyJoinColumn(name = \"SUB_PK\",\n+    referencedColumnName = \"PK\"))\n+public class AnnoTest3 extends AnnoTest1 {\n+\n+    @Basic\n+    @Column(name = \"SUBBASIC\")\n+    protected int basic2;\n+\n+    @OneToOne(fetch = FetchType.LAZY)\n+    protected AnnoTest2 subOneOne;\n+\n+    public AnnoTest3() {\n+    }\n+\n+    public AnnoTest3(long pk) {\n+        super(pk);\n+    }\n+\n+    public AnnoTest3(Long pk) {\n+        super(pk);\n+    }\n+\n+    public void setBasic2(int i) {\n+        basic2 = i;\n+    }\n+\n+    public int getBasic2() {\n+        return basic2;\n+    }\n+\n+    public AnnoTest2 getSubOneOne() {\n+        return subOneOne;\n+    }\n+\n+    public void setSubOneOne(AnnoTest2 anno2) {\n+        subOneOne = anno2;\n+    }\n+}"},{"sha":"fff0ee5e7c201187bf02c4ff2d537c16de5fbea7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@SqlResultSetMapping(name = \"EmbedMapping\", entities = {\r\n-@EntityResult(entityClass = EmbedOwner.class, fields = {\r\n-@FieldResult(name = \"pk\", column = \"OWNER_PK\"),\r\n-@FieldResult(name = \"basic\", column = \"OWNER_BASIC\"),\r\n-@FieldResult(name = \"embed.basic\", column = \"EMBED_BASIC\"),\r\n-@FieldResult(name = \"embed.clob\", column = \"EMBED_CLOB\")\r\n-    })\r\n-    })\r\n-public class EmbedOwner {\r\n-\r\n-    @Embedded\r\n-    @AttributeOverride(name = \"basic\", column = @Column(name = \"OVER_BASIC\"))\r\n-    @AssociationOverride(name = \"owner\",\r\n-        joinColumns = @JoinColumn(name = \"OVER_OWNER\"))\r\n-    protected EmbedValue embed;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"OWN_BASIC\")\r\n-    protected String basic;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    protected int pk;\r\n-\r\n-    public int getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setBasic(String basic) {\r\n-        this.basic = basic;\r\n-    }\r\n-\r\n-    public String getBasic() {\r\n-        return basic;\r\n-    }\r\n-\r\n-    public void setEmbed(EmbedValue embed) {\r\n-        this.embed = embed;\r\n-    }\r\n-\r\n-    public EmbedValue getEmbed() {\r\n-        return embed;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@SqlResultSetMapping(name = \"EmbedMapping\", entities = {\n+@EntityResult(entityClass = EmbedOwner.class, fields = {\n+@FieldResult(name = \"pk\", column = \"OWNER_PK\"),\n+@FieldResult(name = \"basic\", column = \"OWNER_BASIC\"),\n+@FieldResult(name = \"embed.basic\", column = \"EMBED_BASIC\"),\n+@FieldResult(name = \"embed.clob\", column = \"EMBED_CLOB\")\n+    })\n+    })\n+public class EmbedOwner {\n+\n+    @Embedded\n+    @AttributeOverride(name = \"basic\", column = @Column(name = \"OVER_BASIC\"))\n+    @AssociationOverride(name = \"owner\",\n+        joinColumns = @JoinColumn(name = \"OVER_OWNER\"))\n+    protected EmbedValue embed;\n+\n+    @Basic\n+    @Column(name = \"OWN_BASIC\")\n+    protected String basic;\n+\n+    @Id\n+    @GeneratedValue\n+    protected int pk;\n+\n+    public int getPk() {\n+        return pk;\n+    }\n+\n+    public void setBasic(String basic) {\n+        this.basic = basic;\n+    }\n+\n+    public String getBasic() {\n+        return basic;\n+    }\n+\n+    public void setEmbed(EmbedValue embed) {\n+        this.embed = embed;\n+    }\n+\n+    public EmbedValue getEmbed() {\n+        return embed;\n+    }\n+}"},{"sha":"ee9cf4a39980bbf11d3585206ffe2abc4da29c58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,77 +1,77 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Embeddable\r\n-public class EmbedValue {\r\n-\r\n-    @Basic\r\n-    @Column(name = \"EMB_BASIC\")\r\n-    protected String basic;\r\n-\r\n-    @Lob\r\n-    @Column(name = \"EMB_CLOB\")\r\n-    protected String clob;\r\n-\r\n-    @Lob\r\n-    @Column(name = \"EMB_BLOB\")\r\n-    protected byte[] blob;\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumn(name = \"EMB_REL\")\r\n-    protected EmbedOwner owner;\r\n-\r\n-    @Transient\r\n-    private int transientField;\r\n-\r\n-    public void setBasic(String basic) {\r\n-        this.basic = basic;\r\n-    }\r\n-\r\n-    public String getBasic() {\r\n-        return basic;\r\n-    }\r\n-\r\n-    public void setClob(String clob) {\r\n-        this.clob = clob;\r\n-    }\r\n-\r\n-    public String getClob() {\r\n-        return clob;\r\n-    }\r\n-\r\n-    public void setBlob(byte[] blob) {\r\n-        this.blob = blob;\r\n-    }\r\n-\r\n-    public byte[] getBlob() {\r\n-        return blob;\r\n-    }\r\n-\r\n-    public void setOwner(EmbedOwner owner) {\r\n-        this.owner = owner;\r\n-    }\r\n-\r\n-    public EmbedOwner getOwner() {\r\n-        return owner;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Embeddable\n+public class EmbedValue {\n+\n+    @Basic\n+    @Column(name = \"EMB_BASIC\")\n+    protected String basic;\n+\n+    @Lob\n+    @Column(name = \"EMB_CLOB\")\n+    protected String clob;\n+\n+    @Lob\n+    @Column(name = \"EMB_BLOB\")\n+    protected byte[] blob;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"EMB_REL\")\n+    protected EmbedOwner owner;\n+\n+    @Transient\n+    private int transientField;\n+\n+    public void setBasic(String basic) {\n+        this.basic = basic;\n+    }\n+\n+    public String getBasic() {\n+        return basic;\n+    }\n+\n+    public void setClob(String clob) {\n+        this.clob = clob;\n+    }\n+\n+    public String getClob() {\n+        return clob;\n+    }\n+\n+    public void setBlob(byte[] blob) {\n+        this.blob = blob;\n+    }\n+\n+    public byte[] getBlob() {\n+        return blob;\n+    }\n+\n+    public void setOwner(EmbedOwner owner) {\n+        this.owner = owner;\n+    }\n+\n+    public EmbedOwner getOwner() {\n+        return owner;\n+    }\n+}"},{"sha":"34b756cb3d62086be567067ad27d0b0b7b25f485","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbedValue2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * Same as EmbedValue but no blobs for suitable use as key/value/element\r\n- * in oracle.\r\n- */\r\n-@Embeddable\r\n-public class EmbedValue2 {\r\n-\r\n-    @Basic\r\n-    @Column(name = \"EMB_BASIC\")\r\n-    protected String basic;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"EMB_INTBASIC\")\r\n-    protected int intBasic;\r\n-\r\n-    public void setBasic(String basic) {\r\n-        this.basic = basic;\r\n-    }\r\n-\r\n-    public String getBasic() {\r\n-        return basic;\r\n-    }\r\n-\r\n-    public void setIntBasic(int intBasic) {\r\n-        this.intBasic = intBasic;\r\n-    }\r\n-\r\n-    public int getIntBasic() {\r\n-        return intBasic;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Same as EmbedValue but no blobs for suitable use as key/value/element\n+ * in oracle.\n+ */\n+@Embeddable\n+public class EmbedValue2 {\n+\n+    @Basic\n+    @Column(name = \"EMB_BASIC\")\n+    protected String basic;\n+\n+    @Basic\n+    @Column(name = \"EMB_INTBASIC\")\n+    protected int intBasic;\n+\n+    public void setBasic(String basic) {\n+        this.basic = basic;\n+    }\n+\n+    public String getBasic() {\n+        return basic;\n+    }\n+\n+    public void setIntBasic(int intBasic) {\n+        this.intBasic = intBasic;\n+    }\n+\n+    public int getIntBasic() {\n+        return intBasic;\n+    }\n+}"},{"sha":"d9ae68732c1f055f61cb37e551148fc08d185372","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,77 +1,77 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@MappedSuperclass\r\n-public class EmbeddableSuper {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    @Column(name = \"ID\")\r\n-    private long pk;\r\n-\r\n-    @Version\r\n-    @Column(name = \"SUPVERS\")\r\n-    private int version;\r\n-\r\n-    @Transient\r\n-    private int trans;\r\n-\r\n-    @Lob\r\n-    @Column(name = \"CLOBVAL\")\r\n-    protected String clob;\r\n-\r\n-    public EmbeddableSuper() {\r\n-    }\r\n-\r\n-    public long getPK() {\r\n-        return this.pk;\r\n-    }\r\n-\r\n-    public void setPK(long pk) {\r\n-        this.pk = pk;\r\n-    }\r\n-\r\n-    public int getTrans() {\r\n-        return this.trans;\r\n-    }\r\n-\r\n-    public void setTrans(int trans) {\r\n-        this.trans = trans;\r\n-    }\r\n-\r\n-    public String getClob() {\r\n-        return this.clob;\r\n-    }\r\n-\r\n-    public void setClob(String clob) {\r\n-        this.clob = clob;\r\n-    }\r\n-\r\n-    public int getVersion() {\r\n-        return this.version;\r\n-    }\r\n-\r\n-    public void setVersion(int version) {\r\n-        this.version = version;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@MappedSuperclass\n+public class EmbeddableSuper {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long pk;\n+\n+    @Version\n+    @Column(name = \"SUPVERS\")\n+    private int version;\n+\n+    @Transient\n+    private int trans;\n+\n+    @Lob\n+    @Column(name = \"CLOBVAL\")\n+    protected String clob;\n+\n+    public EmbeddableSuper() {\n+    }\n+\n+    public long getPK() {\n+        return this.pk;\n+    }\n+\n+    public void setPK(long pk) {\n+        this.pk = pk;\n+    }\n+\n+    public int getTrans() {\n+        return this.trans;\n+    }\n+\n+    public void setTrans(int trans) {\n+        this.trans = trans;\n+    }\n+\n+    public String getClob() {\n+        return this.clob;\n+    }\n+\n+    public void setClob(String clob) {\n+        this.clob = clob;\n+    }\n+\n+    public int getVersion() {\n+        return this.version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"13b768b6a324b20960c6070316e63c3e9f26a727","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddableSuperSub.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@DiscriminatorColumn(name = \"DISC\")\r\n-@AttributeOverrides({\r\n-    @AttributeOverride(name = \"clob\", column = @Column(name = \"CC\")),\r\n-    @AttributeOverride(name = \"version\", column = @Column(name = \"VERSVAL\"))\r\n-})\r\n-public class EmbeddableSuperSub\r\n-    extends EmbeddableSuper {\r\n-\r\n-    @ManyToOne\r\n-    private EmbeddableSuperSub sub;\r\n-\r\n-    @ManyToOne\r\n-    // #####\r\n-    private EmbeddableSuper sup;\r\n-\r\n-    public EmbeddableSuperSub() {\r\n-    }\r\n-\r\n-    public EmbeddableSuperSub getSub() {\r\n-        return this.sub;\r\n-    }\r\n-\r\n-    public void setSub(EmbeddableSuperSub sub) {\r\n-        this.sub = sub;\r\n-    }\r\n-\r\n-    public EmbeddableSuper getSup() {\r\n-        return this.sup;\r\n-    }\r\n-\r\n-    public void setSup(EmbeddableSuper sup) {\r\n-        this.sup = sup;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@DiscriminatorColumn(name = \"DISC\")\n+@AttributeOverrides({\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"CC\")),\n+    @AttributeOverride(name = \"version\", column = @Column(name = \"VERSVAL\"))\n+})\n+public class EmbeddableSuperSub\n+    extends EmbeddableSuper {\n+\n+    @ManyToOne\n+    private EmbeddableSuperSub sub;\n+\n+    @ManyToOne\n+    // #####\n+    private EmbeddableSuper sup;\n+\n+    public EmbeddableSuperSub() {\n+    }\n+\n+    public EmbeddableSuperSub getSub() {\n+        return this.sub;\n+    }\n+\n+    public void setSub(EmbeddableSuperSub sub) {\n+        this.sub = sub;\n+    }\n+\n+    public EmbeddableSuper getSup() {\n+        return this.sup;\n+    }\n+\n+    public void setSup(EmbeddableSuper sup) {\n+        this.sup = sup;\n+    }\n+}"},{"sha":"b20bbab332ab2d7d2bb5fbeb0e7d18ce4ce46cb1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdClass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,80 +1,80 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Embeddable\r\n-public class EmbeddedIdClass {\r\n-\r\n-    @Column(name = \"EPK1\")\r\n-    private long pk1;\r\n-\r\n-    @Column(name = \"EPK2\")\r\n-    private long pk2;\r\n-\r\n-    @Column(name = \"EPK3\")\r\n-    @GeneratedValue\r\n-    private long pk3;\r\n-\r\n-    public long getPk1() {\r\n-        return pk1;\r\n-    }\r\n-\r\n-    public void setPk1(long pk1) {\r\n-        this.pk1 = pk1;\r\n-    }\r\n-\r\n-    public long getPk2() {\r\n-        return pk2;\r\n-    }\r\n-\r\n-    public void setPk2(long pk2) {\r\n-        this.pk2 = pk2;\r\n-    }\r\n-\r\n-    public long getPk3() {\r\n-        return pk3;\r\n-    }\r\n-\r\n-    public void setPk3(long pk3) {\r\n-        this.pk3 = pk3;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return pk1 + \":\" + pk2 + \":\" + pk3;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        return (int) ((pk1 ^ pk2 ^ pk3) % Integer.MAX_VALUE);\r\n-    }\r\n-\r\n-    public boolean equals(Object other) {\r\n-        if (other == this)\r\n-            return true;\r\n-        if (!(other instanceof EmbeddedIdClass))\r\n-            return false;\r\n-\r\n-        EmbeddedIdClass id = (EmbeddedIdClass) other;\r\n-        return id.pk1 == pk1\r\n-            && id.pk2 == pk2\r\n-            && id.pk3 == pk3;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Embeddable\n+public class EmbeddedIdClass {\n+\n+    @Column(name = \"EPK1\")\n+    private long pk1;\n+\n+    @Column(name = \"EPK2\")\n+    private long pk2;\n+\n+    @Column(name = \"EPK3\")\n+    @GeneratedValue\n+    private long pk3;\n+\n+    public long getPk1() {\n+        return pk1;\n+    }\n+\n+    public void setPk1(long pk1) {\n+        this.pk1 = pk1;\n+    }\n+\n+    public long getPk2() {\n+        return pk2;\n+    }\n+\n+    public void setPk2(long pk2) {\n+        this.pk2 = pk2;\n+    }\n+\n+    public long getPk3() {\n+        return pk3;\n+    }\n+\n+    public void setPk3(long pk3) {\n+        this.pk3 = pk3;\n+    }\n+\n+    public String toString() {\n+        return pk1 + \":\" + pk2 + \":\" + pk3;\n+    }\n+\n+    public int hashCode() {\n+        return (int) ((pk1 ^ pk2 ^ pk3) % Integer.MAX_VALUE);\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof EmbeddedIdClass))\n+            return false;\n+\n+        EmbeddedIdClass id = (EmbeddedIdClass) other;\n+        return id.pk1 == pk1\n+            && id.pk2 == pk2\n+            && id.pk3 == pk3;\n+    }\n+}"},{"sha":"dbefaa304208ac79960237985b0fa52e4d2192af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/EmbeddedIdEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,88 +1,88 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name = \"EMIDENTITY\")\r\n-@SqlResultSetMapping(name = \"EmbeddedIdMapping\", entities = {\r\n-@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n-@FieldResult(name = \"id.pk1\", column = \"OWNER_PK1\"),\r\n-@FieldResult(name = \"id.pk2\", column = \"OWNER_PK2\"),\r\n-@FieldResult(name = \"id.pk3\", column = \"OWNER_PK3\"),\r\n-@FieldResult(name = \"value\", column = \"OWNER_VAL\"),\r\n-@FieldResult(name = \"relation.id.pk1\", column = \"REL_PK1\"),\r\n-@FieldResult(name = \"relation.id.pk2\", column = \"REL_PK2\"),\r\n-@FieldResult(name = \"relation.id.pk3\", column = \"REL_PK3\")\r\n-    }),\r\n-@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\r\n-@FieldResult(name = \"id.pk1\", column = \"REL_PK1\"),\r\n-@FieldResult(name = \"id.pk2\", column = \"REL_PK2\"),\r\n-@FieldResult(name = \"id.pk3\", column = \"REL_PK3\"),\r\n-@FieldResult(name = \"value\", column = \"REL_VAL\")\r\n-    })\r\n-    })\r\n-public class EmbeddedIdEntity {\r\n-\r\n-    @EmbeddedId\r\n-    private EmbeddedIdClass id;\r\n-\r\n-    @Column(name = \"VAL\")\r\n-    private String value;\r\n-\r\n-    @ManyToOne\r\n-    private EmbeddedIdEntity relation;\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumns({\r\n-    @JoinColumn(name = \"MREL_PK1\", referencedColumnName = \"EPK1\"),\r\n-    @JoinColumn(name = \"MREL_PK2\", referencedColumnName = \"EPK2\")\r\n-        })\r\n-    private EmbeddedIdEntity mapOverrideRelation;\r\n-\r\n-    public EmbeddedIdClass getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(EmbeddedIdClass id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(String value) {\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public EmbeddedIdEntity getRelation() {\r\n-        return relation;\r\n-    }\r\n-\r\n-    public void setRelation(EmbeddedIdEntity relation) {\r\n-        this.relation = relation;\r\n-    }\r\n-\r\n-    public EmbeddedIdEntity getMappingOverrideRelation() {\r\n-        return mapOverrideRelation;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name = \"EMIDENTITY\")\n+@SqlResultSetMapping(name = \"EmbeddedIdMapping\", entities = {\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\n+@FieldResult(name = \"id.pk1\", column = \"OWNER_PK1\"),\n+@FieldResult(name = \"id.pk2\", column = \"OWNER_PK2\"),\n+@FieldResult(name = \"id.pk3\", column = \"OWNER_PK3\"),\n+@FieldResult(name = \"value\", column = \"OWNER_VAL\"),\n+@FieldResult(name = \"relation.id.pk1\", column = \"REL_PK1\"),\n+@FieldResult(name = \"relation.id.pk2\", column = \"REL_PK2\"),\n+@FieldResult(name = \"relation.id.pk3\", column = \"REL_PK3\")\n+    }),\n+@EntityResult(entityClass = EmbeddedIdEntity.class, fields = {\n+@FieldResult(name = \"id.pk1\", column = \"REL_PK1\"),\n+@FieldResult(name = \"id.pk2\", column = \"REL_PK2\"),\n+@FieldResult(name = \"id.pk3\", column = \"REL_PK3\"),\n+@FieldResult(name = \"value\", column = \"REL_VAL\")\n+    })\n+    })\n+public class EmbeddedIdEntity {\n+\n+    @EmbeddedId\n+    private EmbeddedIdClass id;\n+\n+    @Column(name = \"VAL\")\n+    private String value;\n+\n+    @ManyToOne\n+    private EmbeddedIdEntity relation;\n+\n+    @ManyToOne\n+    @JoinColumns({\n+    @JoinColumn(name = \"MREL_PK1\", referencedColumnName = \"EPK1\"),\n+    @JoinColumn(name = \"MREL_PK2\", referencedColumnName = \"EPK2\")\n+        })\n+    private EmbeddedIdEntity mapOverrideRelation;\n+\n+    public EmbeddedIdClass getId() {\n+        return id;\n+    }\n+\n+    public void setId(EmbeddedIdClass id) {\n+        this.id = id;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    public EmbeddedIdEntity getRelation() {\n+        return relation;\n+    }\n+\n+    public void setRelation(EmbeddedIdEntity relation) {\n+        this.relation = relation;\n+    }\n+\n+    public EmbeddedIdEntity getMappingOverrideRelation() {\n+        return mapOverrideRelation;\n+    }\n+}"},{"sha":"48a85057620cbe6b0001ecb1ca8f5e3889e09ebb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/ExtensionsEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,106 +1,106 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.strats.*;\r\n-import org.apache.openjpa.persistence.*;\r\n-import org.apache.openjpa.persistence.jdbc.*;\r\n-\r\n-\r\n-@Entity\r\n-@DataStoreId(strategy = GenerationType.SEQUENCE, generator = \"system\")\r\n-@DataCache(enabled = false)\r\n-@FetchGroup(name = \"detail\", attributes = {\r\n-    @FetchAttribute(name = \"rel\", recursionDepth = -1),\r\n-    @FetchAttribute(name = \"seq\")\r\n-})\r\n-@VersionStrategy(StateComparisonVersionStrategy.ALIAS)\r\n-public class ExtensionsEntity {\r\n-\r\n-    @GeneratedValue(generator = \"uuid-hex\")\r\n-    @Column(name = \"UUID_HEX\")\r\n-    private String uuid;\r\n-    \r\n-    @GeneratedValue(generator = \"uuid-string\")\r\n-    @Column(name = \"UUID_STRING\")\r\n-    private String uuidString;\r\n-\r\n-    @GeneratedValue(generator = \"uuid-type4-hex\")\r\n-    @Column(name = \"UUIDT4_HEX\")\r\n-    private String uuidT4Hex;\r\n-\r\n-    @GeneratedValue(generator = \"uuid-type4-string\")\r\n-    @Column(name = \"UUIDT4_STRING\")\r\n-    private String uuidT4String;\r\n-\r\n-    @Basic(fetch = FetchType.LAZY)\r\n-    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"system\")\r\n-    @ReadOnly\r\n-    private int seq;\r\n-\r\n-    @ManyToOne(fetch = FetchType.LAZY)\r\n-    @JoinColumn(name = \"REL_ID\", referencedColumnName = \"ID\")\r\n-    @Dependent\r\n-    @InverseLogical(\"owner\")\r\n-    private ExtensionsEntity rel;\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumn(name = \"OWNER_ID\", referencedColumnName = \"ID\")\r\n-    private ExtensionsEntity owner;\r\n-\r\n-    @ManyToMany\r\n-    @LRS\r\n-    private Collection<ExtensionsEntity> lrs;\r\n-\r\n-    @ManyToMany\r\n-    @EagerFetchMode(FetchMode.JOIN)\r\n-    @ElementClassCriteria\r\n-    @ElementDependent\r\n-    private Collection<ExtensionsEntity> eager;\r\n-\r\n-    @ExternalValues({ \"M=1\", \"F=2\" })\r\n-    @Type(int.class)\r\n-    private char externalValues;\r\n-\r\n-    @Persistent\r\n-    @Externalizer(\"getName\")\r\n-    @Factory(\"Class.forName\")\r\n-    private Class externalizer;\r\n-\r\n-    public char getExternalValues() {\r\n-        return this.externalValues;\r\n-    }\r\n-\r\n-    public void setExternalValues(char externalValues) {\r\n-        this.externalValues = externalValues;\r\n-    }\r\n-\r\n-    public Class getExternalizer() {\r\n-        return this.externalizer;\r\n-    }\r\n-\r\n-    public void setExternalizer(Class externalizer) {\r\n-        this.externalizer = externalizer;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.jdbc.meta.strats.*;\n+import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.jdbc.*;\n+\n+\n+@Entity\n+@DataStoreId(strategy = GenerationType.SEQUENCE, generator = \"system\")\n+@DataCache(enabled = false)\n+@FetchGroup(name = \"detail\", attributes = {\n+    @FetchAttribute(name = \"rel\", recursionDepth = -1),\n+    @FetchAttribute(name = \"seq\")\n+})\n+@VersionStrategy(StateComparisonVersionStrategy.ALIAS)\n+public class ExtensionsEntity {\n+\n+    @GeneratedValue(generator = \"uuid-hex\")\n+    @Column(name = \"UUID_HEX\")\n+    private String uuid;\n+    \n+    @GeneratedValue(generator = \"uuid-string\")\n+    @Column(name = \"UUID_STRING\")\n+    private String uuidString;\n+\n+    @GeneratedValue(generator = \"uuid-type4-hex\")\n+    @Column(name = \"UUIDT4_HEX\")\n+    private String uuidT4Hex;\n+\n+    @GeneratedValue(generator = \"uuid-type4-string\")\n+    @Column(name = \"UUIDT4_STRING\")\n+    private String uuidT4String;\n+\n+    @Basic(fetch = FetchType.LAZY)\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"system\")\n+    @ReadOnly\n+    private int seq;\n+\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"REL_ID\", referencedColumnName = \"ID\")\n+    @Dependent\n+    @InverseLogical(\"owner\")\n+    private ExtensionsEntity rel;\n+\n+    @ManyToOne\n+    @JoinColumn(name = \"OWNER_ID\", referencedColumnName = \"ID\")\n+    private ExtensionsEntity owner;\n+\n+    @ManyToMany\n+    @LRS\n+    private Collection<ExtensionsEntity> lrs;\n+\n+    @ManyToMany\n+    @EagerFetchMode(FetchMode.JOIN)\n+    @ElementClassCriteria\n+    @ElementDependent\n+    private Collection<ExtensionsEntity> eager;\n+\n+    @ExternalValues({ \"M=1\", \"F=2\" })\n+    @Type(int.class)\n+    private char externalValues;\n+\n+    @Persistent\n+    @Externalizer(\"getName\")\n+    @Factory(\"Class.forName\")\n+    private Class externalizer;\n+\n+    public char getExternalValues() {\n+        return this.externalValues;\n+    }\n+\n+    public void setExternalValues(char externalValues) {\n+        this.externalValues = externalValues;\n+    }\n+\n+    public Class getExternalizer() {\n+        return this.externalizer;\n+    }\n+\n+    public void setExternalizer(Class externalizer) {\n+        this.externalizer = externalizer;\n+    }\n+}"},{"sha":"df2b5cfd803cc0df046f17e6e364f73155f292f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity(name=\"Flat1\")\r\n-@Table(name=\"Flat1\")\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name = \"EJB_CLS\", length=100)\r\n-public class Flat1 {\r\n-\r\n-    @Id\r\n-    @Column(name = \"PK\")\r\n-    protected int pk;\r\n-\r\n-    @Version\r\n-    @Column(name = \"EJB_VER\")\r\n-    protected int version;\r\n-\r\n-    @Basic\r\n-    protected int basic;\r\n-\r\n-    public Flat1() {\r\n-    }\r\n-\r\n-    public Flat1(int pk) {\r\n-        this.pk = pk;\r\n-    }\r\n-\r\n-    public void setPk(int val) {\r\n-        pk = val;\r\n-    }\r\n-\r\n-    public int getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public int getVersion() {\r\n-        return version;\r\n-    }\r\n-\r\n-    public void setBasic(int i) {\r\n-        basic = i;\r\n-    }\r\n-\r\n-    public int getBasic() {\r\n-        return basic;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity(name=\"Flat1\")\n+@Table(name=\"Flat1\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name = \"EJB_CLS\", length=100)\n+public class Flat1 {\n+\n+    @Id\n+    @Column(name = \"PK\")\n+    protected int pk;\n+\n+    @Version\n+    @Column(name = \"EJB_VER\")\n+    protected int version;\n+\n+    @Basic\n+    protected int basic;\n+\n+    public Flat1() {\n+    }\n+\n+    public Flat1(int pk) {\n+        this.pk = pk;\n+    }\n+\n+    public void setPk(int val) {\n+        pk = val;\n+    }\n+\n+    public int getPk() {\n+        return pk;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setBasic(int i) {\n+        basic = i;\n+    }\n+\n+    public int getBasic() {\n+        return basic;\n+    }\n+}\n+"},{"sha":"e295af95f12bf6f2588ae47dafef28a225354964","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Flat2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity(name=\"Flat2\")\r\n-public class Flat2\r\n-    extends Flat1 {\r\n-\r\n-    @Basic\r\n-    protected String basic2;\r\n-\r\n-    public Flat2() {\r\n-    }\r\n-\r\n-    public Flat2(int pk) {\r\n-        super(pk);\r\n-    }\r\n-\r\n-    public void setBasic2(String s) {\r\n-        basic2 = s;\r\n-    }\r\n-\r\n-    public String getBasic2() {\r\n-        return basic2;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity(name=\"Flat2\")\n+public class Flat2\n+    extends Flat1 {\n+\n+    @Basic\n+    protected String basic2;\n+\n+    public Flat2() {\n+    }\n+\n+    public Flat2(int pk) {\n+        super(pk);\n+    }\n+\n+    public void setBasic2(String s) {\n+        basic2 = s;\n+    }\n+\n+    public String getBasic2() {\n+        return basic2;\n+    }\n+}\n+"},{"sha":"b0ab6d09888c14a5ae50c546197828f03c98aeef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/Generator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,110 +1,110 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-// non-psql/ora dbs cause issues with SequenceGenerator in auto-mapping\r\n-//@SequenceGenerator(name=\"seq\", sequenceName=\"ejb_sequence\")\r\n-@TableGenerator(name = \"tab\")\r\n-@IdClass(Generator.Oid.class)\r\n-public class Generator {\r\n-\r\n-    @Id\r\n-    protected int pk;\r\n-\r\n-    @Id\r\n-    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"tab\")\r\n-    protected Integer pk2;\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    protected long pk3;\r\n-\r\n-    @Basic\r\n-    protected String stringField;\r\n-\r\n-    // for non-seq\r\n-    public void setPk(int pk) {\r\n-        this.pk = pk;\r\n-    }\r\n-\r\n-    public int getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public Integer getPk2() {\r\n-        return pk2;\r\n-    }\r\n-\r\n-    public long getPk3() {\r\n-        return pk3;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String s) {\r\n-        stringField = s;\r\n-    }\r\n-\r\n-    public static class Oid {\r\n-\r\n-        public int pk;\r\n-        public Integer pk2;\r\n-        public long pk3;\r\n-\r\n-        public Oid() {\r\n-        }\r\n-\r\n-        public Oid(String str) {\r\n-            StringTokenizer tok = new StringTokenizer(str, \",\");\r\n-            pk = Integer.parseInt(tok.nextToken());\r\n-            pk2 = Integer.valueOf(tok.nextToken());\r\n-            pk3 = Long.valueOf(tok.nextToken());\r\n-        }\r\n-\r\n-        public boolean equals(Object o) {\r\n-            if (o == null || !(o instanceof Oid))\r\n-                return false;\r\n-            Oid other = (Oid) o;\r\n-            if (pk != other.pk)\r\n-                return false;\r\n-            if (pk3 != other.pk3)\r\n-                return false;\r\n-            if (pk2 == null)\r\n-                return other.pk2 == null;\r\n-            return pk2.equals(other.pk2);\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return pk + (pk2 == null ? 0 : pk2.hashCode())\r\n-                + (int) (pk3 % Integer.MAX_VALUE);\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk + \",\" + pk2 + \",\" + pk3;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+// non-psql/ora dbs cause issues with SequenceGenerator in auto-mapping\n+//@SequenceGenerator(name=\"seq\", sequenceName=\"ejb_sequence\")\n+@TableGenerator(name = \"tab\")\n+@IdClass(Generator.Oid.class)\n+public class Generator {\n+\n+    @Id\n+    protected int pk;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.TABLE, generator = \"tab\")\n+    protected Integer pk2;\n+\n+    @Id\n+    @GeneratedValue\n+    protected long pk3;\n+\n+    @Basic\n+    protected String stringField;\n+\n+    // for non-seq\n+    public void setPk(int pk) {\n+        this.pk = pk;\n+    }\n+\n+    public int getPk() {\n+        return pk;\n+    }\n+\n+    public Integer getPk2() {\n+        return pk2;\n+    }\n+\n+    public long getPk3() {\n+        return pk3;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String s) {\n+        stringField = s;\n+    }\n+\n+    public static class Oid {\n+\n+        public int pk;\n+        public Integer pk2;\n+        public long pk3;\n+\n+        public Oid() {\n+        }\n+\n+        public Oid(String str) {\n+            StringTokenizer tok = new StringTokenizer(str, \",\");\n+            pk = Integer.parseInt(tok.nextToken());\n+            pk2 = Integer.valueOf(tok.nextToken());\n+            pk3 = Long.valueOf(tok.nextToken());\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == null || !(o instanceof Oid))\n+                return false;\n+            Oid other = (Oid) o;\n+            if (pk != other.pk)\n+                return false;\n+            if (pk3 != other.pk3)\n+                return false;\n+            if (pk2 == null)\n+                return other.pk2 == null;\n+            return pk2.equals(other.pk2);\n+        }\n+\n+        public int hashCode() {\n+            return pk + (pk2 == null ? 0 : pk2.hashCode())\n+                + (int) (pk3 % Integer.MAX_VALUE);\n+        }\n+\n+        public String toString() {\n+            return pk + \",\" + pk2 + \",\" + pk3;\n+        }\n+    }\n+}"},{"sha":"b80e4604016b63384e9b140e0db90b64d7cb3d15","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java","status":"modified","additions":95,"deletions":95,"changes":190,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnSecondaryVersionPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,95 +1,95 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.PrimaryKeyJoinColumn;\r\n-import javax.persistence.SecondaryTable;\r\n-import javax.persistence.SecondaryTables;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.VersionColumn;\r\n-import org.apache.openjpa.persistence.jdbc.VersionColumns;\r\n-import org.apache.openjpa.persistence.jdbc.VersionStrategy;\r\n-\r\n-/**\r\n- * Persistent entity for testing multiple column numeric version strategy as set\r\n- * by <code>@VersionColumns</code> annotations and where the version columns are \r\n- * spread over primary and secondary table(s).\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-@Entity\r\n-@Table(name=\"MCSV\")\r\n-@SecondaryTables({ \r\n-\t@SecondaryTable(name = \"MCSV1\", pkJoinColumns=@PrimaryKeyJoinColumn(name=\"ID\")),\r\n-\t@SecondaryTable(name = \"MCSV2\", pkJoinColumns=@PrimaryKeyJoinColumn(name=\"ID\")) \r\n-})\r\n-@VersionStrategy(\"version-numbers\")\r\n-@VersionColumns({ \r\n-\t@VersionColumn(name = \"v11\", table=\"MCSV1\"), \r\n-\t@VersionColumn(name = \"v12\", table=\"MCSV1\"), \r\n-\t@VersionColumn(name = \"v21\", table=\"MCSV2\"),\r\n-\t@VersionColumn(name = \"v01\") // default is the primary table\r\n-})\r\n-public class MultiColumnSecondaryVersionPC {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\r\n-\tprivate String name;\r\n-\t\r\n-\t@Column(table=\"MCSV1\")\r\n-\tprivate String s1;\r\n-\t\r\n-\t@Column(table=\"MCSV2\")\r\n-\tprivate String s2;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic String getS1() {\r\n-\t\treturn s1;\r\n-\t}\r\n-\r\n-\tpublic void setS1(String s1) {\r\n-\t\tthis.s1 = s1;\r\n-\t}\r\n-\r\n-\tpublic String getS2() {\r\n-\t\treturn s2;\r\n-\t}\r\n-\r\n-\tpublic void setS2(String s2) {\r\n-\t\tthis.s2 = s2;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.PrimaryKeyJoinColumn;\n+import javax.persistence.SecondaryTable;\n+import javax.persistence.SecondaryTables;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+import org.apache.openjpa.persistence.jdbc.VersionColumns;\n+import org.apache.openjpa.persistence.jdbc.VersionStrategy;\n+\n+/**\n+ * Persistent entity for testing multiple column numeric version strategy as set\n+ * by <code>@VersionColumns</code> annotations and where the version columns are \n+ * spread over primary and secondary table(s).\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+@Entity\n+@Table(name=\"MCSV\")\n+@SecondaryTables({ \n+\t@SecondaryTable(name = \"MCSV1\", pkJoinColumns=@PrimaryKeyJoinColumn(name=\"ID\")),\n+\t@SecondaryTable(name = \"MCSV2\", pkJoinColumns=@PrimaryKeyJoinColumn(name=\"ID\")) \n+})\n+@VersionStrategy(\"version-numbers\")\n+@VersionColumns({ \n+\t@VersionColumn(name = \"v11\", table=\"MCSV1\"), \n+\t@VersionColumn(name = \"v12\", table=\"MCSV1\"), \n+\t@VersionColumn(name = \"v21\", table=\"MCSV2\"),\n+\t@VersionColumn(name = \"v01\") // default is the primary table\n+})\n+public class MultiColumnSecondaryVersionPC {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\n+\tprivate String name;\n+\t\n+\t@Column(table=\"MCSV1\")\n+\tprivate String s1;\n+\t\n+\t@Column(table=\"MCSV2\")\n+\tprivate String s2;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic String getS1() {\n+\t\treturn s1;\n+\t}\n+\n+\tpublic void setS1(String s1) {\n+\t\tthis.s1 = s1;\n+\t}\n+\n+\tpublic String getS2() {\n+\t\treturn s2;\n+\t}\n+\n+\tpublic void setS2(String s2) {\n+\t\tthis.s2 = s2;\n+\t}\n+}"},{"sha":"d59a0856bf72d5e5bf75c5b2f721872d00ee1af7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/MultiColumnVersionPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.VersionColumn;\r\n-import org.apache.openjpa.persistence.jdbc.VersionColumns;\r\n-import org.apache.openjpa.persistence.jdbc.VersionStrategy;\r\n-\r\n-/**\r\n- * Persistent entity for testing multiple column numeric version strategy as \r\n- * set by @VersionColumns annotations.\r\n- * \r\n- * The version columns can have numeric values of different types.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-@Table(name=\"MCV\")\r\n-@VersionStrategy(\"version-numbers\")\r\n-@VersionColumns({\r\n-\t@VersionColumn(name=\"v1\"), \r\n-\t@VersionColumn(name=\"v2\"),\r\n-\t@VersionColumn(name=\"v3\", columnDefinition=\"FLOAT\", scale=3, precision=10)\r\n-})\r\n-public class MultiColumnVersionPC {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String name;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.VersionColumn;\n+import org.apache.openjpa.persistence.jdbc.VersionColumns;\n+import org.apache.openjpa.persistence.jdbc.VersionStrategy;\n+\n+/**\n+ * Persistent entity for testing multiple column numeric version strategy as \n+ * set by @VersionColumns annotations.\n+ * \n+ * The version columns can have numeric values of different types.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+@Table(name=\"MCV\")\n+@VersionStrategy(\"version-numbers\")\n+@VersionColumns({\n+\t@VersionColumn(name=\"v1\"), \n+\t@VersionColumn(name=\"v2\"),\n+\t@VersionColumn(name=\"v3\", columnDefinition=\"FLOAT\", scale=3, precision=10)\n+})\n+public class MultiColumnVersionPC {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"7d808a9273baeab8231544f303597a9b4c0a8e2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","status":"modified","additions":149,"deletions":149,"changes":298,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,149 +1,149 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import java.awt.*;\r\n-import java.util.*;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.strats.*;\r\n-import org.apache.openjpa.persistence.*;\r\n-import org.apache.openjpa.persistence.jdbc.*;\r\n-import org.apache.openjpa.persistence.jdbc.OrderColumn;\r\n-\r\n-\r\n-@Entity\r\n-@Table(name = \"NONSTD_ENTITY\")\r\n-@DataStoreIdColumn(name = \"OID\")\r\n-@DiscriminatorStrategy(ClassNameDiscriminatorStrategy.ALIAS)\r\n-@DiscriminatorColumn(name = \"DISCRIM\", length = 128)\r\n-@XMappingOverride(name = \"superCollection\",\r\n-    containerTable = @ContainerTable(name = \"SUP_COLL\",\r\n-        joinColumns = @XJoinColumn(name = \"OWNER\")),\r\n-    elementColumns = @ElementColumn(name = \"SUP_ELEM\"))\r\n-public class NonstandardMappingEntity\r\n-    extends NonstandardMappingMappedSuper {\r\n-\r\n-    @Persistent(fetch = FetchType.LAZY)\r\n-    @Strategy(\"org.apache.openjpa.persistence.jdbc.annotations.PointHandler\")\r\n-    @Columns({\r\n-    @Column(name = \"X_COL\"),\r\n-    @Column(name = \"Y_COL\")\r\n-        })\r\n-    @Index(name = \"PNT_IDX\")\r\n-    private Point custom;\r\n-\r\n-    @PersistentCollection(elementType = String.class)\r\n-    @ContainerTable(name = \"STRINGS_COLL\",\r\n-        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n-        joinIndex = @Index(enabled = false))\r\n-    @ElementColumn(name = \"STR_ELEM\", length = 127)\r\n-    @OrderColumn(name = \"ORDER_COL\")\r\n-    @ElementIndex\r\n-    private List stringCollection = new ArrayList();\r\n-\r\n-    @PersistentCollection\r\n-    @ContainerTable(name = \"JOIN_COLL\",\r\n-        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n-        joinForeignKey = @ForeignKey)\r\n-    @ElementJoinColumn(name = \"JOIN_ELEM\")\r\n-    @ElementForeignKey\r\n-    @ElementNonpolymorphic(NonpolymorphicType.JOINABLE)\r\n-    private List<NonstandardMappingEntity> joinCollection =\r\n-        new ArrayList<NonstandardMappingEntity>();\r\n-\r\n-    @PersistentMap(keyType = String.class, elementType = String.class)\r\n-    @ContainerTable(name = \"STRINGS_MAP\",\r\n-        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n-        joinIndex = @Index(enabled = false))\r\n-    @KeyColumn(name = \"STR_KEY\", length = 127)\r\n-    @ElementColumn(name = \"STR_VAL\", length = 127)\r\n-    @KeyIndex\r\n-    @ElementIndex\r\n-    private Map stringMap = new HashMap();\r\n-\r\n-    @PersistentMap\r\n-    @ContainerTable(name = \"JOIN_MAP\",\r\n-        joinColumns = @XJoinColumn(name = \"OWNER\"),\r\n-        joinForeignKey = @ForeignKey)\r\n-    @KeyJoinColumn(name = \"JOIN_KEY\")\r\n-    @KeyForeignKey\r\n-    @KeyNonpolymorphic\r\n-    @ElementJoinColumn(name = \"JOIN_VAL\")\r\n-    @ElementForeignKey\r\n-    @ElementNonpolymorphic\r\n-    private Map<NonstandardMappingEntity, NonstandardMappingEntity> joinMap =\r\n-        new HashMap<NonstandardMappingEntity, NonstandardMappingEntity>();\r\n-\r\n-    @Embedded\r\n-    @EmbeddedMapping(nullIndicatorAttributeName = \"uuid\", overrides = {\r\n-    @MappingOverride(name = \"rel\",\r\n-        joinColumns = @XJoinColumn(name = \"EM_REL_ID\")),\r\n-    @MappingOverride(name = \"eager\",\r\n-        containerTable = @ContainerTable(name = \"EM_EAGER\"),\r\n-        elementJoinColumns = @ElementJoinColumn(name = \"ELEM_EAGER_ID\"))\r\n-        })\r\n-    private ExtensionsEntity embed;\r\n-\r\n-    @PersistentCollection(elementEmbedded = true)\r\n-    @ContainerTable(name = \"EMBED_COLL\")\r\n-    @ElementEmbeddedMapping(overrides = {\r\n-    @XMappingOverride(name = \"basic\", columns = @Column(name = \"EM_BASIC\"))\r\n-        })\r\n-    private List<EmbedValue2> embedCollection = new ArrayList<EmbedValue2>();\r\n-\r\n-    public Point getCustom() {\r\n-        return this.custom;\r\n-    }\r\n-\r\n-    public void setCustom(Point custom) {\r\n-        this.custom = custom;\r\n-    }\r\n-\r\n-    public List getStringCollection() {\r\n-        return this.stringCollection;\r\n-    }\r\n-\r\n-    public List<NonstandardMappingEntity> getJoinCollection() {\r\n-        return this.joinCollection;\r\n-    }\r\n-\r\n-    public Map getStringMap() {\r\n-        return this.stringMap;\r\n-    }\r\n-\r\n-    public Map<NonstandardMappingEntity,NonstandardMappingEntity> getJoinMap() {\r\n-        return this.joinMap;\r\n-    }\r\n-\r\n-    public ExtensionsEntity getEmbed() {\r\n-        return this.embed;\r\n-    }\r\n-\r\n-    public void setEmbed(ExtensionsEntity embed) {\r\n-        this.embed = embed;\r\n-    }\r\n-\r\n-    public List<EmbedValue2> getEmbedCollection() {\r\n-        return this.embedCollection;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.awt.*;\n+import java.util.*;\n+import java.util.List;\n+\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.jdbc.meta.strats.*;\n+import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.jdbc.*;\n+import org.apache.openjpa.persistence.jdbc.OrderColumn;\n+\n+\n+@Entity\n+@Table(name = \"NONSTD_ENTITY\")\n+@DataStoreIdColumn(name = \"OID\")\n+@DiscriminatorStrategy(ClassNameDiscriminatorStrategy.ALIAS)\n+@DiscriminatorColumn(name = \"DISCRIM\", length = 128)\n+@XMappingOverride(name = \"superCollection\",\n+    containerTable = @ContainerTable(name = \"SUP_COLL\",\n+        joinColumns = @XJoinColumn(name = \"OWNER\")),\n+    elementColumns = @ElementColumn(name = \"SUP_ELEM\"))\n+public class NonstandardMappingEntity\n+    extends NonstandardMappingMappedSuper {\n+\n+    @Persistent(fetch = FetchType.LAZY)\n+    @Strategy(\"org.apache.openjpa.persistence.jdbc.annotations.PointHandler\")\n+    @Columns({\n+    @Column(name = \"X_COL\"),\n+    @Column(name = \"Y_COL\")\n+        })\n+    @Index(name = \"PNT_IDX\")\n+    private Point custom;\n+\n+    @PersistentCollection(elementType = String.class)\n+    @ContainerTable(name = \"STRINGS_COLL\",\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\n+        joinIndex = @Index(enabled = false))\n+    @ElementColumn(name = \"STR_ELEM\", length = 127)\n+    @OrderColumn(name = \"ORDER_COL\")\n+    @ElementIndex\n+    private List stringCollection = new ArrayList();\n+\n+    @PersistentCollection\n+    @ContainerTable(name = \"JOIN_COLL\",\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\n+        joinForeignKey = @ForeignKey)\n+    @ElementJoinColumn(name = \"JOIN_ELEM\")\n+    @ElementForeignKey\n+    @ElementNonpolymorphic(NonpolymorphicType.JOINABLE)\n+    private List<NonstandardMappingEntity> joinCollection =\n+        new ArrayList<NonstandardMappingEntity>();\n+\n+    @PersistentMap(keyType = String.class, elementType = String.class)\n+    @ContainerTable(name = \"STRINGS_MAP\",\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\n+        joinIndex = @Index(enabled = false))\n+    @KeyColumn(name = \"STR_KEY\", length = 127)\n+    @ElementColumn(name = \"STR_VAL\", length = 127)\n+    @KeyIndex\n+    @ElementIndex\n+    private Map stringMap = new HashMap();\n+\n+    @PersistentMap\n+    @ContainerTable(name = \"JOIN_MAP\",\n+        joinColumns = @XJoinColumn(name = \"OWNER\"),\n+        joinForeignKey = @ForeignKey)\n+    @KeyJoinColumn(name = \"JOIN_KEY\")\n+    @KeyForeignKey\n+    @KeyNonpolymorphic\n+    @ElementJoinColumn(name = \"JOIN_VAL\")\n+    @ElementForeignKey\n+    @ElementNonpolymorphic\n+    private Map<NonstandardMappingEntity, NonstandardMappingEntity> joinMap =\n+        new HashMap<NonstandardMappingEntity, NonstandardMappingEntity>();\n+\n+    @Embedded\n+    @EmbeddedMapping(nullIndicatorAttributeName = \"uuid\", overrides = {\n+    @MappingOverride(name = \"rel\",\n+        joinColumns = @XJoinColumn(name = \"EM_REL_ID\")),\n+    @MappingOverride(name = \"eager\",\n+        containerTable = @ContainerTable(name = \"EM_EAGER\"),\n+        elementJoinColumns = @ElementJoinColumn(name = \"ELEM_EAGER_ID\"))\n+        })\n+    private ExtensionsEntity embed;\n+\n+    @PersistentCollection(elementEmbedded = true)\n+    @ContainerTable(name = \"EMBED_COLL\")\n+    @ElementEmbeddedMapping(overrides = {\n+    @XMappingOverride(name = \"basic\", columns = @Column(name = \"EM_BASIC\"))\n+        })\n+    private List<EmbedValue2> embedCollection = new ArrayList<EmbedValue2>();\n+\n+    public Point getCustom() {\n+        return this.custom;\n+    }\n+\n+    public void setCustom(Point custom) {\n+        this.custom = custom;\n+    }\n+\n+    public List getStringCollection() {\n+        return this.stringCollection;\n+    }\n+\n+    public List<NonstandardMappingEntity> getJoinCollection() {\n+        return this.joinCollection;\n+    }\n+\n+    public Map getStringMap() {\n+        return this.stringMap;\n+    }\n+\n+    public Map<NonstandardMappingEntity,NonstandardMappingEntity> getJoinMap() {\n+        return this.joinMap;\n+    }\n+\n+    public ExtensionsEntity getEmbed() {\n+        return this.embed;\n+    }\n+\n+    public void setEmbed(ExtensionsEntity embed) {\n+        this.embed = embed;\n+    }\n+\n+    public List<EmbedValue2> getEmbedCollection() {\n+        return this.embedCollection;\n+    }\n+}"},{"sha":"27a59b0c9d0b3769e99afd9fcc380a7752edd661","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/NonstandardMappingMappedSuper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-import org.apache.openjpa.persistence.*;\r\n-import org.apache.openjpa.persistence.jdbc.*;\r\n-\r\n-@MappedSuperclass\r\n-public class NonstandardMappingMappedSuper {\r\n-\r\n-    @PersistentCollection\r\n-    private List<String> superCollection = new ArrayList<String>();\r\n-\r\n-    @ManyToOne\r\n-    @Nonpolymorphic\r\n-    NonstandardMappingEntity superRel;\r\n-\r\n-    public List<String> getSuperCollection() {\r\n-        return this.superCollection;\r\n-    }\r\n-\r\n-    public NonstandardMappingEntity getSuperRel() {\r\n-        return this.superRel;\r\n-    }\r\n-\r\n-    public void setSuperRel(NonstandardMappingEntity superRel) {\r\n-        this.superRel = superRel;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+import org.apache.openjpa.persistence.*;\n+import org.apache.openjpa.persistence.jdbc.*;\n+\n+@MappedSuperclass\n+public class NonstandardMappingMappedSuper {\n+\n+    @PersistentCollection\n+    private List<String> superCollection = new ArrayList<String>();\n+\n+    @ManyToOne\n+    @Nonpolymorphic\n+    NonstandardMappingEntity superRel;\n+\n+    public List<String> getSuperCollection() {\n+        return this.superCollection;\n+    }\n+\n+    public NonstandardMappingEntity getSuperRel() {\n+        return this.superRel;\n+    }\n+\n+    public void setSuperRel(NonstandardMappingEntity superRel) {\n+        this.superRel = superRel;\n+    }\n+}"},{"sha":"bc2ace9fe412781f0365904722df373e24a6ad2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PointHandler.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.awt.*;\r\n-\r\n-import org.apache.openjpa.jdbc.kernel.JDBCStore;\r\n-import org.apache.openjpa.jdbc.meta.ValueMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.AbstractValueHandler;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-import org.apache.openjpa.jdbc.schema.ColumnIO;\r\n-import org.apache.openjpa.meta.JavaTypes;\r\n-import serp.util.Numbers;\r\n-\r\n-/**\r\n- * Handler for {@link Point}. This is a sample of how to create custom\r\n- * handlers, and is in this package for unit testing purposes.\r\n- */\r\n-public class PointHandler extends AbstractValueHandler {\r\n-\r\n-    /**\r\n-     * Create columns with default names and java type values.  Kodo will\r\n-     * fill in the rest of the information and merge in any information given\r\n-     * in the user's mapping data.  If the user does not give column names,\r\n-     * Kodo will alter your default names as necessary to avoid conflicts and\r\n-     * meet the database's name limitations.\r\n-     *\r\n-     * @param    name    default base name for columns\r\n-     */\r\n-    public Column[] map(ValueMapping vm, String name, ColumnIO io,\r\n-        boolean adapt) {\r\n-        Column xcol = new Column();\r\n-        xcol.setName(\"X\" + name);\r\n-        xcol.setJavaType(JavaTypes.INT);\r\n-        Column ycol = new Column();\r\n-        ycol.setName(\"Y\" + name);\r\n-        ycol.setJavaType(JavaTypes.INT);\r\n-        return new Column[]{ xcol, ycol };\r\n-    }\r\n-\r\n-    /**\r\n-     * Return whether the column value is an exact value that can be used\r\n-     * in state-comparison versioning.\r\n-     */\r\n-    public boolean isVersionable() {\r\n-        return true;\r\n-    }\r\n-\r\n-    /**\r\n-     * Convert the object value to its datastore equivalent.\r\n-     */\r\n-    public Object toDataStoreValue(ValueMapping vm, Object val,\r\n-        JDBCStore store) {\r\n-        if (val == null)\r\n-            return null;\r\n-\r\n-        Point p = (Point) val;\r\n-        return new Object[]{ Numbers.valueOf(p.x), Numbers.valueOf(p.y) };\r\n-    }\r\n-\r\n-    /**\r\n-     *  Convert the datastore value to its object equivalent.\r\n-     */\r\n-    public Object toObjectValue(ValueMapping vm, Object val) {\r\n-        Object[] vals = (Object[]) val;\r\n-        if (vals[0] == null || vals[1] == null)\r\n-            return null;\r\n-\r\n-        int x = ((Number) vals[0]).intValue();\r\n-        int y = ((Number) vals[1]).intValue();\r\n-        return new Point(x, y);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.awt.*;\n+\n+import org.apache.openjpa.jdbc.kernel.JDBCStore;\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.strats.AbstractValueHandler;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.meta.JavaTypes;\n+import serp.util.Numbers;\n+\n+/**\n+ * Handler for {@link Point}. This is a sample of how to create custom\n+ * handlers, and is in this package for unit testing purposes.\n+ */\n+public class PointHandler extends AbstractValueHandler {\n+\n+    /**\n+     * Create columns with default names and java type values.  Kodo will\n+     * fill in the rest of the information and merge in any information given\n+     * in the user's mapping data.  If the user does not give column names,\n+     * Kodo will alter your default names as necessary to avoid conflicts and\n+     * meet the database's name limitations.\n+     *\n+     * @param    name    default base name for columns\n+     */\n+    public Column[] map(ValueMapping vm, String name, ColumnIO io,\n+        boolean adapt) {\n+        Column xcol = new Column();\n+        xcol.setName(\"X\" + name);\n+        xcol.setJavaType(JavaTypes.INT);\n+        Column ycol = new Column();\n+        ycol.setName(\"Y\" + name);\n+        ycol.setJavaType(JavaTypes.INT);\n+        return new Column[]{ xcol, ycol };\n+    }\n+\n+    /**\n+     * Return whether the column value is an exact value that can be used\n+     * in state-comparison versioning.\n+     */\n+    public boolean isVersionable() {\n+        return true;\n+    }\n+\n+    /**\n+     * Convert the object value to its datastore equivalent.\n+     */\n+    public Object toDataStoreValue(ValueMapping vm, Object val,\n+        JDBCStore store) {\n+        if (val == null)\n+            return null;\n+\n+        Point p = (Point) val;\n+        return new Object[]{ Numbers.valueOf(p.x), Numbers.valueOf(p.y) };\n+    }\n+\n+    /**\n+     *  Convert the datastore value to its object equivalent.\n+     */\n+    public Object toObjectValue(ValueMapping vm, Object val) {\n+        Object[] vals = (Object[]) val;\n+        if (vals[0] == null || vals[1] == null)\n+            return null;\n+\n+        int x = ((Number) vals[0]).intValue();\n+        int y = ((Number) vals[1]).intValue();\n+        return new Point(x, y);\n+    }\n+}"},{"sha":"83b79c6377eb9b7220ad88a58f47ee9e8880f611","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/PropertyAccess1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- * Entity test object that uses property access mode.\r\n- */\r\n-@Entity\r\n-public class PropertyAccess1 {\r\n-\r\n-    private int id;\r\n-    private String name;\r\n-    private int intVal; // this intentionally does not match the getter name\r\n-\r\n-    protected PropertyAccess1() {\r\n-    }\r\n-\r\n-    public PropertyAccess1(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    @Id\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String n) {\r\n-        this.name = n;\r\n-    }\r\n-\r\n-    public int getIntValue() {\r\n-        return intVal;\r\n-    }\r\n-\r\n-    public void setIntValue(int intVal) {\r\n-        this.intVal = intVal;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Entity test object that uses property access mode.\n+ */\n+@Entity\n+public class PropertyAccess1 {\n+\n+    private int id;\n+    private String name;\n+    private int intVal; // this intentionally does not match the getter name\n+\n+    protected PropertyAccess1() {\n+    }\n+\n+    public PropertyAccess1(int id) {\n+        this.id = id;\n+    }\n+\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String n) {\n+        this.name = n;\n+    }\n+\n+    public int getIntValue() {\n+        return intVal;\n+    }\n+\n+    public void setIntValue(int intVal) {\n+        this.intVal = intVal;\n+    }\n+}"},{"sha":"d85eb3d66200c77a24b8be374fccfd1a5ec6f385","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\r\n-public class TablePerClass1 {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    protected int pk;\r\n-\r\n-    @Column(name = \"TPC_BASIC\")\r\n-    protected int basic;\r\n-\r\n-    @Embedded\r\n-    @AttributeOverrides({\r\n-    @AttributeOverride(name = \"basic\",\r\n-        column = @Column(name = \"TPC_EMB_BASIC\")),\r\n-    @AttributeOverride(name = \"clob\", column = @Column(name = \"TPC_EMB_CLOB\")),\r\n-    @AttributeOverride(name = \"blob\", column = @Column(name = \"TPC_EMB_BLOB\"))\r\n-        })\r\n-    protected EmbedValue embed;\r\n-\r\n-    public int getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setBasic(int i) {\r\n-        basic = i;\r\n-    }\r\n-\r\n-    public int getBasic() {\r\n-        return basic;\r\n-    }\r\n-\r\n-    public EmbedValue getEmbed() {\r\n-        return embed;\r\n-    }\r\n-\r\n-    public void setEmbed(EmbedValue ev) {\r\n-        embed = ev;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n+public class TablePerClass1 {\n+\n+    @Id\n+    @GeneratedValue\n+    protected int pk;\n+\n+    @Column(name = \"TPC_BASIC\")\n+    protected int basic;\n+\n+    @Embedded\n+    @AttributeOverrides({\n+    @AttributeOverride(name = \"basic\",\n+        column = @Column(name = \"TPC_EMB_BASIC\")),\n+    @AttributeOverride(name = \"clob\", column = @Column(name = \"TPC_EMB_CLOB\")),\n+    @AttributeOverride(name = \"blob\", column = @Column(name = \"TPC_EMB_BLOB\"))\n+        })\n+    protected EmbedValue embed;\n+\n+    public int getPk() {\n+        return pk;\n+    }\n+\n+    public void setBasic(int i) {\n+        basic = i;\n+    }\n+\n+    public int getBasic() {\n+        return basic;\n+    }\n+\n+    public EmbedValue getEmbed() {\n+        return embed;\n+    }\n+\n+    public void setEmbed(EmbedValue ev) {\n+        embed = ev;\n+    }\n+}\n+"},{"sha":"96e259d27f4b84089ff85109419c6a818acfddbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TablePerClass2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-public class TablePerClass2\r\n-    extends TablePerClass1 {\r\n-\r\n-    @Basic\r\n-    protected String basic2;\r\n-\r\n-    public void setBasic2(String s) {\r\n-        basic2 = s;\r\n-    }\r\n-\r\n-    public String getBasic2() {\r\n-        return basic2;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+\n+import javax.persistence.*;\n+\n+@Entity\n+public class TablePerClass2\n+    extends TablePerClass1 {\n+\n+    @Basic\n+    protected String basic2;\n+\n+    public void setBasic2(String s) {\n+        basic2 = s;\n+    }\n+\n+    public String getBasic2() {\n+        return basic2;\n+    }\n+}\n+"},{"sha":"59864080e72a2f03f94b4b847f4349bc3d4fb63a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestDiscriminator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,82 +1,82 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n-import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.SubclassJoinDiscriminatorStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\r\n-import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * <p>Test discriminator mappings.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestDiscriminator\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() throws Exception {\r\n-        super.setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class,\r\n-            CLEAR_TABLES);\r\n-        // Commented out since OpenJPA does not have Entity1 and Entity2.\r\n-        // These tests should be ported to use classes that are available\r\n-        // in OpenJPA.\r\n-//        setUp(Entity1.class, Entity2.class, AnnoTest1.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-//    public void testNoDefaultJoinedDiscriminatorWithoutColumn() {\r\n-//        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-//        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n-//            getMapping(Entity1.class, null, true);\r\n-//        if (conf.getDBDictionaryInstance().joinSyntax\r\n-//            != JoinSyntaxes.SYNTAX_TRADITIONAL) {\r\n-//            assertTrue(cls.getDiscriminator().getStrategy()\r\n-//                instanceof SubclassJoinDiscriminatorStrategy);\r\n-//        } else {\r\n-//            assertEquals(NoneDiscriminatorStrategy.getInstance(),\r\n-//                cls.getDiscriminator().getStrategy());\r\n-//        }\r\n-//        assertEquals(0, cls.getDiscriminator().getColumns().length);\r\n-//    }\r\n-\r\n-    public void testJoinedDiscriminatorWithColumn() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        MappingRepository repo = conf.getMappingRepositoryInstance();\r\n-        ClassMapping cls = repo.getMapping(AnnoTest1.class, \r\n-            null, true);\r\n-        assertTrue(cls.getDiscriminator().getStrategy()\r\n-            instanceof ValueMapDiscriminatorStrategy);\r\n-        assertEquals(1, cls.getDiscriminator().getColumns().length);\r\n-        assertEquals(\"ANNOCLS\", cls.getDiscriminator().getColumns()[0].\r\n-            getName());\r\n-    }\r\n-\r\n-//    public void testDefaultFlatDiscriminator() {\r\n-//        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n-//            getMappingRepositoryInstance().getMapping(Entity2.class,\r\n-//            null, true);\r\n-//        assertTrue(cls.getDiscriminator().getStrategy()\r\n-//            instanceof ValueMapDiscriminatorStrategy);\r\n-//        assertEquals(1, cls.getDiscriminator().getColumns().length);\r\n-//    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.SubclassJoinDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <p>Test discriminator mappings.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestDiscriminator\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() throws Exception {\n+        super.setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class,\n+            CLEAR_TABLES);\n+        // Commented out since OpenJPA does not have Entity1 and Entity2.\n+        // These tests should be ported to use classes that are available\n+        // in OpenJPA.\n+//        setUp(Entity1.class, Entity2.class, AnnoTest1.class, CLEAR_TABLES);\n+    }\n+\n+//    public void testNoDefaultJoinedDiscriminatorWithoutColumn() {\n+//        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+//        ClassMapping cls = conf.getMappingRepositoryInstance().\n+//            getMapping(Entity1.class, null, true);\n+//        if (conf.getDBDictionaryInstance().joinSyntax\n+//            != JoinSyntaxes.SYNTAX_TRADITIONAL) {\n+//            assertTrue(cls.getDiscriminator().getStrategy()\n+//                instanceof SubclassJoinDiscriminatorStrategy);\n+//        } else {\n+//            assertEquals(NoneDiscriminatorStrategy.getInstance(),\n+//                cls.getDiscriminator().getStrategy());\n+//        }\n+//        assertEquals(0, cls.getDiscriminator().getColumns().length);\n+//    }\n+\n+    public void testJoinedDiscriminatorWithColumn() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        MappingRepository repo = conf.getMappingRepositoryInstance();\n+        ClassMapping cls = repo.getMapping(AnnoTest1.class, \n+            null, true);\n+        assertTrue(cls.getDiscriminator().getStrategy()\n+            instanceof ValueMapDiscriminatorStrategy);\n+        assertEquals(1, cls.getDiscriminator().getColumns().length);\n+        assertEquals(\"ANNOCLS\", cls.getDiscriminator().getColumns()[0].\n+            getName());\n+    }\n+\n+//    public void testDefaultFlatDiscriminator() {\n+//        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\n+//            getMappingRepositoryInstance().getMapping(Entity2.class,\n+//            null, true);\n+//        assertTrue(cls.getDiscriminator().getStrategy()\n+//            instanceof ValueMapDiscriminatorStrategy);\n+//        assertEquals(1, cls.getDiscriminator().getColumns().length);\n+//    }\n+}"},{"sha":"9288fd9de72a08d4aa0f541f7ce3d7f5ee10b00e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","status":"modified","additions":139,"deletions":139,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEJBEmbedded.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,139 +1,139 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.sql.Types;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n-import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-\r\n-/**\r\n- * Test for embedded\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestEJBEmbedded extends SingleEMFTestCase {\r\n-\r\n-    private static final String CLOB;\r\n-\r\n-    static {\r\n-        StringBuffer buf = new StringBuffer();\r\n-        for (int i = 0; i < 1000; i++)\r\n-            buf.append('a');\r\n-        CLOB = buf.toString();\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        setUp(EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testEmbedded() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        EmbedOwner owner = new EmbedOwner();\r\n-        owner.setBasic(\"foo\");\r\n-        EmbedValue embed = new EmbedValue();\r\n-        embed.setClob(CLOB);\r\n-        embed.setBasic(\"bar\");\r\n-        embed.setBlob(\"foobar\".getBytes());\r\n-        embed.setOwner(owner);\r\n-        owner.setEmbed(embed);\r\n-        em.persist(owner);\r\n-        int pk = owner.getPk();\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        owner = em.find(EmbedOwner.class, pk);\r\n-        assertEquals(\"foo\", owner.getBasic());\r\n-        embed = owner.getEmbed();\r\n-        assertNotNull(embed);\r\n-        assertEquals(CLOB, embed.getClob());\r\n-        assertEquals(\"bar\", embed.getBasic());\r\n-        assertEquals(\"foobar\", new String(embed.getBlob()));\r\n-        assertEquals(owner, embed.getOwner());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testEmbeddedMetaData() {\r\n-        ClassMetaData ownerMeta =\r\n-            JPAFacadeHelper.getMetaData(emf, EmbedOwner.class);\r\n-        FieldMetaData fmd = ownerMeta.getField(\"embed\");\r\n-        ClassMetaData embeddedMeta = fmd.getDefiningMetaData();\r\n-        assertNotNull(embeddedMeta);\r\n-        assertNull(embeddedMeta.getField(\"transientField\"));\r\n-    }\r\n-\r\n-    public void testNull() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        EmbedOwner owner = new EmbedOwner();\r\n-        owner.setBasic(\"foo\");\r\n-        em.persist(owner);\r\n-        int pk = owner.getPk();\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        owner = em.find(EmbedOwner.class, pk);\r\n-        assertEquals(\"foo\", owner.getBasic());\r\n-        EmbedValue embed = owner.getEmbed();\r\n-        assertNotNull(embed);\r\n-        assertNull(embed.getClob());\r\n-        assertNull(embed.getBasic());\r\n-        assertNull(embed.getBlob());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testMappingTransferAndOverride() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        ClassMapping cls = conf.getMappingRepositoryInstance().getMapping\r\n-            (EmbedOwner.class, null, true);\r\n-        assertEquals(\"OWN_BASIC\", cls.getFieldMapping(\"basic\").\r\n-            getColumns()[0].getName());\r\n-        ClassMapping embed = cls.getFieldMapping(\"embed\").getEmbeddedMapping();\r\n-        assertEquals(\"EMB_BLOB\", embed.getFieldMapping(\"blob\").\r\n-            getColumns()[0].getName());\r\n-        assertEquals(\"OVER_BASIC\", embed.getFieldMapping(\"basic\").\r\n-            getColumns()[0].getName());\r\n-        assertEquals(\"OVER_OWNER\", embed.getFieldMapping(\"owner\").\r\n-            getColumns()[0].getName());\r\n-\r\n-        FieldMapping fm = embed.getFieldMapping(\"clob\");\r\n-        DBDictionary dict = conf.getDBDictionaryInstance();\r\n-        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n-            if (dict.maxEmbeddedClobSize > 0)\r\n-                assertTrue(fm.getStrategy() instanceof\r\n-                    MaxEmbeddedClobFieldStrategy);\r\n-            else\r\n-                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n-        } else\r\n-            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.sql.Types;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+\n+/**\n+ * Test for embedded\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestEJBEmbedded extends SingleEMFTestCase {\n+\n+    private static final String CLOB;\n+\n+    static {\n+        StringBuffer buf = new StringBuffer();\n+        for (int i = 0; i < 1000; i++)\n+            buf.append('a');\n+        CLOB = buf.toString();\n+    }\n+\n+    public void setUp() {\n+        setUp(EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\n+    }\n+\n+    public void testEmbedded() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        EmbedOwner owner = new EmbedOwner();\n+        owner.setBasic(\"foo\");\n+        EmbedValue embed = new EmbedValue();\n+        embed.setClob(CLOB);\n+        embed.setBasic(\"bar\");\n+        embed.setBlob(\"foobar\".getBytes());\n+        embed.setOwner(owner);\n+        owner.setEmbed(embed);\n+        em.persist(owner);\n+        int pk = owner.getPk();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        owner = em.find(EmbedOwner.class, pk);\n+        assertEquals(\"foo\", owner.getBasic());\n+        embed = owner.getEmbed();\n+        assertNotNull(embed);\n+        assertEquals(CLOB, embed.getClob());\n+        assertEquals(\"bar\", embed.getBasic());\n+        assertEquals(\"foobar\", new String(embed.getBlob()));\n+        assertEquals(owner, embed.getOwner());\n+        em.close();\n+    }\n+\n+    public void testEmbeddedMetaData() {\n+        ClassMetaData ownerMeta =\n+            JPAFacadeHelper.getMetaData(emf, EmbedOwner.class);\n+        FieldMetaData fmd = ownerMeta.getField(\"embed\");\n+        ClassMetaData embeddedMeta = fmd.getDefiningMetaData();\n+        assertNotNull(embeddedMeta);\n+        assertNull(embeddedMeta.getField(\"transientField\"));\n+    }\n+\n+    public void testNull() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        EmbedOwner owner = new EmbedOwner();\n+        owner.setBasic(\"foo\");\n+        em.persist(owner);\n+        int pk = owner.getPk();\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        owner = em.find(EmbedOwner.class, pk);\n+        assertEquals(\"foo\", owner.getBasic());\n+        EmbedValue embed = owner.getEmbed();\n+        assertNotNull(embed);\n+        assertNull(embed.getClob());\n+        assertNull(embed.getBasic());\n+        assertNull(embed.getBlob());\n+        em.close();\n+    }\n+\n+    public void testMappingTransferAndOverride() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        ClassMapping cls = conf.getMappingRepositoryInstance().getMapping\n+            (EmbedOwner.class, null, true);\n+        assertEquals(\"OWN_BASIC\", cls.getFieldMapping(\"basic\").\n+            getColumns()[0].getName());\n+        ClassMapping embed = cls.getFieldMapping(\"embed\").getEmbeddedMapping();\n+        assertEquals(\"EMB_BLOB\", embed.getFieldMapping(\"blob\").\n+            getColumns()[0].getName());\n+        assertEquals(\"OVER_BASIC\", embed.getFieldMapping(\"basic\").\n+            getColumns()[0].getName());\n+        assertEquals(\"OVER_OWNER\", embed.getFieldMapping(\"owner\").\n+            getColumns()[0].getName());\n+\n+        FieldMapping fm = embed.getFieldMapping(\"clob\");\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\n+            if (dict.maxEmbeddedClobSize > 0)\n+                assertTrue(fm.getStrategy() instanceof\n+                    MaxEmbeddedClobFieldStrategy);\n+            else\n+                assertTrue(fm.getHandler() instanceof ClobValueHandler);\n+        } else\n+            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\n+    }\n+}"},{"sha":"41160e69dbb2b04460f2a64474b618084745e850","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddableSuperclass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,137 +1,137 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.sql.Types;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n-import org.apache.openjpa.jdbc.meta.strats.EmbedFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.meta.ValueStrategies;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * <p>Test embeddable superclasses.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestEmbeddableSuperclass\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(EmbeddableSuper.class, EmbeddableSuperSub.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testSuperclassEmbeddedOnly() {\r\n-        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n-            getMappingRepositoryInstance().getMapping(EmbeddableSuper.class, \r\n-            null, true);\r\n-        assertTrue(cls.isEmbeddedOnly());\r\n-        assertEquals(NoneClassStrategy.getInstance(), cls.getStrategy());\r\n-    }\r\n-\r\n-    public void testSubclassMappingDefaultsAndOverrides() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n-            getMapping(EmbeddableSuperSub.class, null, true);\r\n-        assertTrue(!cls.isEmbeddedOnly());\r\n-        assertTrue(cls.getStrategy() instanceof FullClassStrategy);\r\n-        assertEquals(ClassMapping.ID_APPLICATION, cls.getIdentityType());\r\n-        assertTrue(cls.isOpenJPAIdentity());\r\n-\r\n-        FieldMapping fm = cls.getFieldMapping(\"pk\");\r\n-        assertTrue(fm.isPrimaryKey());\r\n-        assertEquals(ValueStrategies.SEQUENCE, fm.getValueStrategy());\r\n-        assertEquals(\"ID\", fm.getColumns()[0].getName());\r\n-\r\n-        assertNull(cls.getField(\"trans\"));\r\n-\r\n-        fm = cls.getFieldMapping(\"clob\");\r\n-        assertEquals(\"CC\", fm.getColumns()[0].getName());\r\n-        DBDictionary dict = conf.getDBDictionaryInstance();\r\n-        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\r\n-            if (dict.maxEmbeddedClobSize > 0)\r\n-                assertTrue(fm.getStrategy() instanceof\r\n-                    MaxEmbeddedClobFieldStrategy);\r\n-            else\r\n-                assertTrue(fm.getHandler() instanceof ClobValueHandler);\r\n-        } else\r\n-            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\r\n-    }\r\n-\r\n-    public void testSubclassDiscriminatorMapping() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n-            getMapping(EmbeddableSuperSub.class, null, true);\r\n-        assertEquals(\"DISC\", cls.getDiscriminator().getColumns()[0].\r\n-            getName());\r\n-    }\r\n-\r\n-    public void testVersionOverrideMapping() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n-            getMapping(EmbeddableSuperSub.class, null, true);\r\n-        assertEquals(\"VERSVAL\", cls.getVersion().getColumns()[0].getName());\r\n-    }\r\n-\r\n-    public void testRelationMappings() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        ClassMapping cls = conf.getMappingRepositoryInstance().\r\n-            getMapping(EmbeddableSuperSub.class, null, true);\r\n-        FieldMapping fm = cls.getFieldMapping(\"sub\");\r\n-        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\r\n-\r\n-        fm = cls.getFieldMapping(\"sup\");\r\n-        assertTrue(fm.getStrategy() instanceof EmbedFieldStrategy);\r\n-    }\r\n-\r\n-    public void testPersistAndFind() {\r\n-        EmbeddableSuperSub parent = new EmbeddableSuperSub();\r\n-        parent.setClob(\"parent\");\r\n-        EmbeddableSuperSub sub = new EmbeddableSuperSub();\r\n-        sub.setClob(\"sub\");\r\n-        EmbeddableSuperSub sup = new EmbeddableSuperSub();\r\n-        sup.setClob(\"sup\");\r\n-        parent.setSub(sub);\r\n-        parent.setSup(sup);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persistAll(parent, sub, sup);\r\n-        em.getTransaction().commit();\r\n-        long pk = parent.getPK();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        parent = em.find(EmbeddableSuperSub.class, pk);\r\n-        assertEquals(\"parent\", parent.getClob());\r\n-        assertEquals(\"sub\", parent.getSub().getClob());\r\n-        assertEquals(\"sup\", parent.getSup().getClob());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.sql.Types;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.EmbedFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.NoneClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <p>Test embeddable superclasses.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestEmbeddableSuperclass\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(EmbeddableSuper.class, EmbeddableSuperSub.class, CLEAR_TABLES);\n+    }\n+\n+    public void testSuperclassEmbeddedOnly() {\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\n+            getMappingRepositoryInstance().getMapping(EmbeddableSuper.class, \n+            null, true);\n+        assertTrue(cls.isEmbeddedOnly());\n+        assertEquals(NoneClassStrategy.getInstance(), cls.getStrategy());\n+    }\n+\n+    public void testSubclassMappingDefaultsAndOverrides() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\n+            getMapping(EmbeddableSuperSub.class, null, true);\n+        assertTrue(!cls.isEmbeddedOnly());\n+        assertTrue(cls.getStrategy() instanceof FullClassStrategy);\n+        assertEquals(ClassMapping.ID_APPLICATION, cls.getIdentityType());\n+        assertTrue(cls.isOpenJPAIdentity());\n+\n+        FieldMapping fm = cls.getFieldMapping(\"pk\");\n+        assertTrue(fm.isPrimaryKey());\n+        assertEquals(ValueStrategies.SEQUENCE, fm.getValueStrategy());\n+        assertEquals(\"ID\", fm.getColumns()[0].getName());\n+\n+        assertNull(cls.getField(\"trans\"));\n+\n+        fm = cls.getFieldMapping(\"clob\");\n+        assertEquals(\"CC\", fm.getColumns()[0].getName());\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        if (dict.getPreferredType(Types.CLOB) == Types.CLOB) {\n+            if (dict.maxEmbeddedClobSize > 0)\n+                assertTrue(fm.getStrategy() instanceof\n+                    MaxEmbeddedClobFieldStrategy);\n+            else\n+                assertTrue(fm.getHandler() instanceof ClobValueHandler);\n+        } else\n+            assertTrue(fm.getStrategy() instanceof StringFieldStrategy);\n+    }\n+\n+    public void testSubclassDiscriminatorMapping() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\n+            getMapping(EmbeddableSuperSub.class, null, true);\n+        assertEquals(\"DISC\", cls.getDiscriminator().getColumns()[0].\n+            getName());\n+    }\n+\n+    public void testVersionOverrideMapping() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\n+            getMapping(EmbeddableSuperSub.class, null, true);\n+        assertEquals(\"VERSVAL\", cls.getVersion().getColumns()[0].getName());\n+    }\n+\n+    public void testRelationMappings() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        ClassMapping cls = conf.getMappingRepositoryInstance().\n+            getMapping(EmbeddableSuperSub.class, null, true);\n+        FieldMapping fm = cls.getFieldMapping(\"sub\");\n+        assertTrue(fm.getStrategy() instanceof RelationFieldStrategy);\n+\n+        fm = cls.getFieldMapping(\"sup\");\n+        assertTrue(fm.getStrategy() instanceof EmbedFieldStrategy);\n+    }\n+\n+    public void testPersistAndFind() {\n+        EmbeddableSuperSub parent = new EmbeddableSuperSub();\n+        parent.setClob(\"parent\");\n+        EmbeddableSuperSub sub = new EmbeddableSuperSub();\n+        sub.setClob(\"sub\");\n+        EmbeddableSuperSub sup = new EmbeddableSuperSub();\n+        sup.setClob(\"sup\");\n+        parent.setSub(sub);\n+        parent.setSup(sup);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persistAll(parent, sub, sup);\n+        em.getTransaction().commit();\n+        long pk = parent.getPK();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(EmbeddableSuperSub.class, pk);\n+        assertEquals(\"parent\", parent.getClob());\n+        assertEquals(\"sub\", parent.getSub().getClob());\n+        assertEquals(\"sup\", parent.getSup().getClob());\n+        em.close();\n+    }\n+}"},{"sha":"6eb8fc66e574165fc55302c8fd54b8b592d39f1b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","status":"modified","additions":244,"deletions":244,"changes":488,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEmbeddedId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,244 +1,244 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.enhance.PersistenceCapable;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * <p>Test embedded id classes.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestEmbeddedId\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    EmbeddedIdClass _oid;\r\n-    EmbeddedIdClass _roid;\r\n-\r\n-    public void setUp() {\r\n-        setUp(EmbeddedIdEntity.class, EmbeddedIdClass.class, CLEAR_TABLES);\r\n-\r\n-        _oid = new EmbeddedIdClass();\r\n-        _oid.setPk1(1);\r\n-        _oid.setPk2(2);\r\n-\r\n-        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n-        e.setId(_oid);\r\n-        e.setValue(\"e\");\r\n-\r\n-        _roid = new EmbeddedIdClass();\r\n-        _roid.setPk1(2);\r\n-        _roid.setPk2(3);\r\n-\r\n-        EmbeddedIdEntity rel = new EmbeddedIdEntity();\r\n-        rel.setId(_roid);\r\n-        rel.setValue(\"r\");\r\n-        e.setRelation(rel);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persistAll(e, rel);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testGetObjectId() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n-        assertNotNull(e);\r\n-        assertEquals(\"e\", e.getValue());\r\n-        assertNull(e.getMappingOverrideRelation());\r\n-        assertNotNull(e.getRelation());\r\n-        assertEquals(\"r\", e.getRelation().getValue());\r\n-\r\n-        assertEquals(_oid, em.getObjectId(e));\r\n-        assertEquals(_roid, em.getObjectId(e.getRelation()));\r\n-        assertEquals(_oid, e.getId());\r\n-        assertEquals(_roid, e.getRelation().getId());\r\n-        assertNull(((PersistenceCapable) e.getId()).pcGetGenericContext());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testMutateEmbeddedIdFieldValueOfNew() {\r\n-        EmbeddedIdEntity e1 = new EmbeddedIdEntity();\r\n-        e1.setValue(\"e1\");\r\n-        EmbeddedIdEntity e2 = new EmbeddedIdEntity();\r\n-        e2.setValue(\"e2\");\r\n-        EmbeddedIdClass id = new EmbeddedIdClass();\r\n-        e2.setId(id);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persistAll(e1, e2);\r\n-\r\n-        EmbeddedIdClass oid = new EmbeddedIdClass();\r\n-        oid.setPk1(4);\r\n-        oid.setPk2(5);\r\n-        e1.setId(oid);\r\n-        e2.getId().setPk1(6);\r\n-        e2.getId().setPk2(7);\r\n-        em.getTransaction().commit();\r\n-\r\n-        EmbeddedIdClass oid1 = e1.getId();\r\n-        assertEquals(oid1, em.getObjectId(e1));\r\n-        assertEquals(4, oid1.getPk1());\r\n-        assertEquals(5, oid1.getPk2());\r\n-\r\n-        EmbeddedIdClass oid2 = e2.getId();\r\n-        // pcl: 30 October 2007: this fails currently; commenting out.\r\n-        // See OPENJPA-425\r\n-        //assertEquals(oid2, em.getObjectId(e2));\r\n-        assertEquals(6, oid2.getPk1());\r\n-        assertEquals(7, oid2.getPk2());\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        e1 = em.find(EmbeddedIdEntity.class, oid1);\r\n-        e2 = em.find(EmbeddedIdEntity.class, oid2);\r\n-        assertEquals(oid1, em.getObjectId(e1));\r\n-        assertEquals(oid2, em.getObjectId(e2));\r\n-        assertEquals(oid1, e1.getId());\r\n-        assertEquals(oid2, e2.getId());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testMutateEmbeddedIdFieldValueOfExisting() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-\r\n-        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n-        e.setValue(\"changed\");\r\n-        try {\r\n-            e.getId().setPk1(9);\r\n-            em.getTransaction().commit();\r\n-            fail(\"Committed with changed oid field.\");\r\n-        } catch (RuntimeException re) {\r\n-            if (em.getTransaction().isActive())\r\n-                em.getTransaction().rollback();\r\n-        }\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testDetachAttach() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\r\n-        e.getRelation();\r\n-        em.close();\r\n-\r\n-        e.setValue(\"echanged\");\r\n-        e.getRelation().setValue(\"rchanged\");\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        EmbeddedIdEntity me = (EmbeddedIdEntity) em.mergeAll(e,\r\n-            e.getRelation())[0];\r\n-        assertTrue(me != e);\r\n-        assertNotNull(me.getRelation());\r\n-        assertTrue(me.getRelation() != e.getRelation());\r\n-        assertEquals(\"echanged\", me.getValue());\r\n-        assertEquals(\"rchanged\", me.getRelation().getValue());\r\n-        assertEquals(_oid, me.getId());\r\n-        assertEquals(_oid, em.getObjectId(me));\r\n-        assertEquals(_roid, me.getRelation().getId());\r\n-        assertEquals(_roid, em.getObjectId(me.getRelation()));\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQuery() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        Query q = em.createQuery(\"select e from EmbeddedIdEntity e \"\r\n-            + \"where e.id.pk1 = 1\");\r\n-        EmbeddedIdEntity e = (EmbeddedIdEntity) q.getSingleResult();\r\n-        assertEquals(_oid, e.getId());\r\n-        assertEquals(\"e\", e.getValue());\r\n-\r\n-        q = em.createQuery(\"select e.id.pk2 from EmbeddedIdEntity e \"\r\n-            + \"where e.id.pk1 = 1\");\r\n-        assertEquals(new Long(_oid.getPk2()), q.getSingleResult());\r\n-\r\n-        q = em.createQuery(\"select e.id from EmbeddedIdEntity e \"\r\n-            + \"where e.id.pk1 = 1\");\r\n-        assertEquals(_oid, q.getSingleResult());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testAutoAssigned() {\r\n-        // begin with null id object\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        EmbeddedIdEntity e = new EmbeddedIdEntity();\r\n-        em.persist(e);\r\n-        EmbeddedIdClass oid = e.getId();\r\n-        assertNotNull(oid);\r\n-        assertTrue(oid.getPk3() != 0);\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.getTransaction().commit();\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        e = em.find(EmbeddedIdEntity.class, oid);\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.close();\r\n-\r\n-        // begin with non-null id object\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        e = new EmbeddedIdEntity();\r\n-        oid = new EmbeddedIdClass();\r\n-        oid.setPk1(4);\r\n-        oid.setPk2(5);\r\n-        e.setId(oid);\r\n-        em.persist(e);\r\n-        oid = e.getId();\r\n-        assertEquals(4, oid.getPk1());\r\n-        assertEquals(5, oid.getPk2());\r\n-        assertTrue(oid.getPk3() != 0);\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.getTransaction().commit();\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        e = em.find(EmbeddedIdEntity.class, oid);\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.close();\r\n-\r\n-        // flush before accessing id field\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        e = new EmbeddedIdEntity();\r\n-        em.persist(e);\r\n-        em.getTransaction().commit();\r\n-        oid = e.getId();\r\n-        assertTrue(oid.getPk3() != 0);\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        e = em.find(EmbeddedIdEntity.class, oid);\r\n-        assertEquals(oid, em.getObjectId(e));\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <p>Test embedded id classes.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestEmbeddedId\n+    extends SingleEMFTestCase {\n+\n+    EmbeddedIdClass _oid;\n+    EmbeddedIdClass _roid;\n+\n+    public void setUp() {\n+        setUp(EmbeddedIdEntity.class, EmbeddedIdClass.class, CLEAR_TABLES);\n+\n+        _oid = new EmbeddedIdClass();\n+        _oid.setPk1(1);\n+        _oid.setPk2(2);\n+\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\n+        e.setId(_oid);\n+        e.setValue(\"e\");\n+\n+        _roid = new EmbeddedIdClass();\n+        _roid.setPk1(2);\n+        _roid.setPk2(3);\n+\n+        EmbeddedIdEntity rel = new EmbeddedIdEntity();\n+        rel.setId(_roid);\n+        rel.setValue(\"r\");\n+        e.setRelation(rel);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persistAll(e, rel);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testGetObjectId() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\n+        assertNotNull(e);\n+        assertEquals(\"e\", e.getValue());\n+        assertNull(e.getMappingOverrideRelation());\n+        assertNotNull(e.getRelation());\n+        assertEquals(\"r\", e.getRelation().getValue());\n+\n+        assertEquals(_oid, em.getObjectId(e));\n+        assertEquals(_roid, em.getObjectId(e.getRelation()));\n+        assertEquals(_oid, e.getId());\n+        assertEquals(_roid, e.getRelation().getId());\n+        assertNull(((PersistenceCapable) e.getId()).pcGetGenericContext());\n+        em.close();\n+    }\n+\n+    public void testMutateEmbeddedIdFieldValueOfNew() {\n+        EmbeddedIdEntity e1 = new EmbeddedIdEntity();\n+        e1.setValue(\"e1\");\n+        EmbeddedIdEntity e2 = new EmbeddedIdEntity();\n+        e2.setValue(\"e2\");\n+        EmbeddedIdClass id = new EmbeddedIdClass();\n+        e2.setId(id);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persistAll(e1, e2);\n+\n+        EmbeddedIdClass oid = new EmbeddedIdClass();\n+        oid.setPk1(4);\n+        oid.setPk2(5);\n+        e1.setId(oid);\n+        e2.getId().setPk1(6);\n+        e2.getId().setPk2(7);\n+        em.getTransaction().commit();\n+\n+        EmbeddedIdClass oid1 = e1.getId();\n+        assertEquals(oid1, em.getObjectId(e1));\n+        assertEquals(4, oid1.getPk1());\n+        assertEquals(5, oid1.getPk2());\n+\n+        EmbeddedIdClass oid2 = e2.getId();\n+        // pcl: 30 October 2007: this fails currently; commenting out.\n+        // See OPENJPA-425\n+        //assertEquals(oid2, em.getObjectId(e2));\n+        assertEquals(6, oid2.getPk1());\n+        assertEquals(7, oid2.getPk2());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        e1 = em.find(EmbeddedIdEntity.class, oid1);\n+        e2 = em.find(EmbeddedIdEntity.class, oid2);\n+        assertEquals(oid1, em.getObjectId(e1));\n+        assertEquals(oid2, em.getObjectId(e2));\n+        assertEquals(oid1, e1.getId());\n+        assertEquals(oid2, e2.getId());\n+        em.close();\n+    }\n+\n+    public void testMutateEmbeddedIdFieldValueOfExisting() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\n+        e.setValue(\"changed\");\n+        try {\n+            e.getId().setPk1(9);\n+            em.getTransaction().commit();\n+            fail(\"Committed with changed oid field.\");\n+        } catch (RuntimeException re) {\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+        }\n+        em.close();\n+    }\n+\n+    public void testDetachAttach() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        EmbeddedIdEntity e = em.find(EmbeddedIdEntity.class, _oid);\n+        e.getRelation();\n+        em.close();\n+\n+        e.setValue(\"echanged\");\n+        e.getRelation().setValue(\"rchanged\");\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        EmbeddedIdEntity me = (EmbeddedIdEntity) em.mergeAll(e,\n+            e.getRelation())[0];\n+        assertTrue(me != e);\n+        assertNotNull(me.getRelation());\n+        assertTrue(me.getRelation() != e.getRelation());\n+        assertEquals(\"echanged\", me.getValue());\n+        assertEquals(\"rchanged\", me.getRelation().getValue());\n+        assertEquals(_oid, me.getId());\n+        assertEquals(_oid, em.getObjectId(me));\n+        assertEquals(_roid, me.getRelation().getId());\n+        assertEquals(_roid, em.getObjectId(me.getRelation()));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from EmbeddedIdEntity e \"\n+            + \"where e.id.pk1 = 1\");\n+        EmbeddedIdEntity e = (EmbeddedIdEntity) q.getSingleResult();\n+        assertEquals(_oid, e.getId());\n+        assertEquals(\"e\", e.getValue());\n+\n+        q = em.createQuery(\"select e.id.pk2 from EmbeddedIdEntity e \"\n+            + \"where e.id.pk1 = 1\");\n+        assertEquals(new Long(_oid.getPk2()), q.getSingleResult());\n+\n+        q = em.createQuery(\"select e.id from EmbeddedIdEntity e \"\n+            + \"where e.id.pk1 = 1\");\n+        assertEquals(_oid, q.getSingleResult());\n+        em.close();\n+    }\n+\n+    public void testAutoAssigned() {\n+        // begin with null id object\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        EmbeddedIdEntity e = new EmbeddedIdEntity();\n+        em.persist(e);\n+        EmbeddedIdClass oid = e.getId();\n+        assertNotNull(oid);\n+        assertTrue(oid.getPk3() != 0);\n+        assertEquals(oid, em.getObjectId(e));\n+        em.getTransaction().commit();\n+        assertEquals(oid, em.getObjectId(e));\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        e = em.find(EmbeddedIdEntity.class, oid);\n+        assertEquals(oid, em.getObjectId(e));\n+        em.close();\n+\n+        // begin with non-null id object\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        e = new EmbeddedIdEntity();\n+        oid = new EmbeddedIdClass();\n+        oid.setPk1(4);\n+        oid.setPk2(5);\n+        e.setId(oid);\n+        em.persist(e);\n+        oid = e.getId();\n+        assertEquals(4, oid.getPk1());\n+        assertEquals(5, oid.getPk2());\n+        assertTrue(oid.getPk3() != 0);\n+        assertEquals(oid, em.getObjectId(e));\n+        em.getTransaction().commit();\n+        assertEquals(oid, em.getObjectId(e));\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        e = em.find(EmbeddedIdEntity.class, oid);\n+        assertEquals(oid, em.getObjectId(e));\n+        em.close();\n+\n+        // flush before accessing id field\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        e = new EmbeddedIdEntity();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        oid = e.getId();\n+        assertTrue(oid.getPk3() != 0);\n+        assertEquals(oid, em.getObjectId(e));\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        e = em.find(EmbeddedIdEntity.class, oid);\n+        assertEquals(oid, em.getObjectId(e));\n+        em.close();\n+    }\n+}"},{"sha":"5e33781df348840197226e03f959ab01e23cf95d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestEnumerated.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,97 +1,97 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.InheritanceType;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.meta.JavaTypes;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test enums and the @Enumerated annotation.\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestEnumerated\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testMapping() {\r\n-        ClassMapping cls = (ClassMapping) emf.getConfiguration().\r\n-            getMetaDataRepositoryInstance().getMetaData(AnnoTest1.class, \r\n-            null, true);\r\n-        FieldMapping fm = cls.getDeclaredFieldMapping(\"enumeration\");\r\n-        assertNotNull(fm);\r\n-        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n-        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n-        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n-\r\n-        fm = cls.getDeclaredFieldMapping(\"ordinalEnumeration\");\r\n-        assertNotNull(fm);\r\n-        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n-        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n-        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\r\n-\r\n-        fm = cls.getDeclaredFieldMapping(\"stringEnumeration\");\r\n-        assertNotNull(fm);\r\n-        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\r\n-        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\r\n-        assertEquals(JavaTypes.STRING, fm.getColumns()[0].getJavaType());\r\n-    }\r\n-\r\n-    public void testBehavior() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(1);\r\n-        pc.setEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n-        pc.setOrdinalEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n-        pc.setStringEnumeration(InheritanceType.JOINED);\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(1));\r\n-        assertEquals(InheritanceType.TABLE_PER_CLASS, pc.getEnumeration());\r\n-        assertEquals(InheritanceType.TABLE_PER_CLASS,\r\n-            pc.getOrdinalEnumeration());\r\n-        assertEquals(InheritanceType.JOINED,\r\n-            pc.getStringEnumeration());\r\n-        em.getTransaction().begin();\r\n-        pc.setEnumeration(InheritanceType.JOINED);\r\n-        pc.setOrdinalEnumeration(InheritanceType.JOINED);\r\n-        pc.setStringEnumeration(InheritanceType.TABLE_PER_CLASS);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(1));\r\n-        assertEquals(InheritanceType.JOINED, pc.getEnumeration());\r\n-        assertEquals(InheritanceType.JOINED, pc.getOrdinalEnumeration());\r\n-        assertEquals(InheritanceType.TABLE_PER_CLASS,\r\n-            pc.getStringEnumeration());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.InheritanceType;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test enums and the @Enumerated annotation.\n+ *\n+ * @author Abe White\n+ */\n+public class TestEnumerated\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\n+    }\n+\n+    public void testMapping() {\n+        ClassMapping cls = (ClassMapping) emf.getConfiguration().\n+            getMetaDataRepositoryInstance().getMetaData(AnnoTest1.class, \n+            null, true);\n+        FieldMapping fm = cls.getDeclaredFieldMapping(\"enumeration\");\n+        assertNotNull(fm);\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\n+\n+        fm = cls.getDeclaredFieldMapping(\"ordinalEnumeration\");\n+        assertNotNull(fm);\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\n+        assertEquals(JavaTypes.SHORT, fm.getColumns()[0].getJavaType());\n+\n+        fm = cls.getDeclaredFieldMapping(\"stringEnumeration\");\n+        assertNotNull(fm);\n+        assertEquals(FieldMapping.MANAGE_PERSISTENT, fm.getManagement());\n+        assertEquals(JavaTypes.OBJECT, fm.getTypeCode());\n+        assertEquals(JavaTypes.STRING, fm.getColumns()[0].getJavaType());\n+    }\n+\n+    public void testBehavior() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(1);\n+        pc.setEnumeration(InheritanceType.TABLE_PER_CLASS);\n+        pc.setOrdinalEnumeration(InheritanceType.TABLE_PER_CLASS);\n+        pc.setStringEnumeration(InheritanceType.JOINED);\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(1));\n+        assertEquals(InheritanceType.TABLE_PER_CLASS, pc.getEnumeration());\n+        assertEquals(InheritanceType.TABLE_PER_CLASS,\n+            pc.getOrdinalEnumeration());\n+        assertEquals(InheritanceType.JOINED,\n+            pc.getStringEnumeration());\n+        em.getTransaction().begin();\n+        pc.setEnumeration(InheritanceType.JOINED);\n+        pc.setOrdinalEnumeration(InheritanceType.JOINED);\n+        pc.setStringEnumeration(InheritanceType.TABLE_PER_CLASS);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(1));\n+        assertEquals(InheritanceType.JOINED, pc.getEnumeration());\n+        assertEquals(InheritanceType.JOINED, pc.getOrdinalEnumeration());\n+        assertEquals(InheritanceType.TABLE_PER_CLASS,\n+            pc.getStringEnumeration());\n+        em.close();\n+    }\n+}"},{"sha":"bbd9f592acb022c7788bd5498e9f3426b3a1f36d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","status":"modified","additions":138,"deletions":138,"changes":276,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestExtensionAnnotations.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,138 +1,138 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.meta.FetchGroup;\r\n-import org.apache.openjpa.meta.JavaTypes;\r\n-import org.apache.openjpa.meta.UpdateStrategies;\r\n-import org.apache.openjpa.meta.ValueMetaData;\r\n-import org.apache.openjpa.meta.ValueStrategies;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * <p>Test the parsing of Kodo metadata extension annotations.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestExtensionAnnotations\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    private ClassMapping _mapping;\r\n-\r\n-    public void setUp() {\r\n-        setUp(ExtensionsEntity.class);\r\n-        _mapping = ((JDBCConfiguration) emf.getConfiguration()).\r\n-            getMappingRepositoryInstance().getMapping(ExtensionsEntity.class,\r\n-            null, true);\r\n-    }\r\n-\r\n-    public void testDataStoreId() {\r\n-        assertEquals(ClassMapping.ID_DATASTORE, _mapping.getIdentityType());\r\n-        assertEquals(ValueStrategies.SEQUENCE, _mapping.getIdentityStrategy());\r\n-        assertEquals(\"system\", _mapping.getIdentitySequenceName());\r\n-    }\r\n-\r\n-    public void testDataCache() {\r\n-        assertNull(_mapping.getDataCacheName());\r\n-    }\r\n-\r\n-    public void testFetchGroups() {\r\n-        FetchGroup fg = _mapping.getFetchGroup(\"detail\");\r\n-        assertNotNull(fg);\r\n-        assertFalse(fg.isPostLoad());\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"rel\");\r\n-        assertEquals(1, fm.getCustomFetchGroups().length);\r\n-        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\r\n-        assertEquals(-1, fg.getRecursionDepth(fm));\r\n-        fm = _mapping.getFieldMapping(\"seq\");\r\n-        assertEquals(1, fm.getCustomFetchGroups().length);\r\n-        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\r\n-        assertEquals(1, fg.getRecursionDepth(fm));\r\n-    }\r\n-\r\n-    public void testValueStrategy() {\r\n-        assertEquals(ValueStrategies.UUID_HEX,\r\n-            _mapping.getField(\"uuid\").getValueStrategy());\r\n-        assertEquals(ValueStrategies.UUID_STRING,\r\n-            _mapping.getField(\"uuidString\").getValueStrategy());\r\n-        assertEquals(ValueStrategies.UUID_TYPE4_HEX,\r\n-            _mapping.getField(\"uuidT4Hex\").getValueStrategy());\r\n-        assertEquals(ValueStrategies.UUID_TYPE4_STRING,\r\n-            _mapping.getField(\"uuidT4String\").getValueStrategy());\r\n-        FieldMapping seq = _mapping.getFieldMapping(\"seq\");\r\n-        assertEquals(ValueStrategies.SEQUENCE, seq.getValueStrategy());\r\n-        assertEquals(\"system\", seq.getValueSequenceName());\r\n-    }\r\n-\r\n-    public void testReadOnly() {\r\n-        assertEquals(UpdateStrategies.RESTRICT,\r\n-            _mapping.getField(\"seq\").getUpdateStrategy());\r\n-    }\r\n-\r\n-    public void testInverseLogical() {\r\n-        assertEquals(\"owner\", _mapping.getField(\"rel\").getInverse());\r\n-        assertNull(_mapping.getField(\"owner\").getInverse());\r\n-    }\r\n-\r\n-    public void testDependent() {\r\n-        assertEquals(ValueMetaData.CASCADE_AUTO,\r\n-            _mapping.getField(\"rel\").getCascadeDelete());\r\n-        assertEquals(ValueMetaData.CASCADE_NONE,\r\n-            _mapping.getField(\"eager\").getCascadeDelete());\r\n-        assertEquals(ValueMetaData.CASCADE_AUTO,\r\n-            _mapping.getField(\"eager\").getElement().getCascadeDelete());\r\n-    }\r\n-\r\n-    public void testLRS() {\r\n-        assertTrue(_mapping.getField(\"lrs\").isLRS());\r\n-        assertFalse(_mapping.getField(\"eager\").isLRS());\r\n-    }\r\n-\r\n-    public void testClassCriteria() {\r\n-        assertTrue(_mapping.getFieldMapping(\"eager\").getElementMapping().\r\n-            getUseClassCriteria());\r\n-        assertFalse(_mapping.getFieldMapping(\"eager\").getUseClassCriteria());\r\n-        assertFalse(_mapping.getFieldMapping(\"lrs\").getElementMapping().\r\n-            getUseClassCriteria());\r\n-    }\r\n-\r\n-    public void testExternalValues() {\r\n-        FieldMapping externalValues = _mapping.getFieldMapping\r\n-            (\"externalValues\");\r\n-        assertEquals(JavaTypes.CHAR, externalValues.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.INT, externalValues.getTypeCode());\r\n-        assertEquals(new Integer(1), externalValues.getExternalValueMap().\r\n-            get(new Character('M')));\r\n-        assertEquals(new Integer(2), externalValues.getExternalValueMap().\r\n-            get(new Character('F')));\r\n-    }\r\n-\r\n-    public void testExternalizer() {\r\n-        FieldMapping externalizer = _mapping.getFieldMapping(\"externalizer\");\r\n-        assertEquals(JavaTypes.OBJECT, externalizer.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.STRING, externalizer.getTypeCode());\r\n-        assertEquals(\"java.lang.String\", externalizer.getExternalValue\r\n-            (String.class, null));\r\n-        assertEquals(String.class, externalizer.getFieldValue\r\n-            (String.class.getName(), null));\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.meta.FetchGroup;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.UpdateStrategies;\n+import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <p>Test the parsing of Kodo metadata extension annotations.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestExtensionAnnotations\n+    extends SingleEMFTestCase {\n+\n+    private ClassMapping _mapping;\n+\n+    public void setUp() {\n+        setUp(ExtensionsEntity.class);\n+        _mapping = ((JDBCConfiguration) emf.getConfiguration()).\n+            getMappingRepositoryInstance().getMapping(ExtensionsEntity.class,\n+            null, true);\n+    }\n+\n+    public void testDataStoreId() {\n+        assertEquals(ClassMapping.ID_DATASTORE, _mapping.getIdentityType());\n+        assertEquals(ValueStrategies.SEQUENCE, _mapping.getIdentityStrategy());\n+        assertEquals(\"system\", _mapping.getIdentitySequenceName());\n+    }\n+\n+    public void testDataCache() {\n+        assertNull(_mapping.getDataCacheName());\n+    }\n+\n+    public void testFetchGroups() {\n+        FetchGroup fg = _mapping.getFetchGroup(\"detail\");\n+        assertNotNull(fg);\n+        assertFalse(fg.isPostLoad());\n+        FieldMapping fm = _mapping.getFieldMapping(\"rel\");\n+        assertEquals(1, fm.getCustomFetchGroups().length);\n+        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\n+        assertEquals(-1, fg.getRecursionDepth(fm));\n+        fm = _mapping.getFieldMapping(\"seq\");\n+        assertEquals(1, fm.getCustomFetchGroups().length);\n+        assertEquals(\"detail\", fm.getCustomFetchGroups()[0]);\n+        assertEquals(1, fg.getRecursionDepth(fm));\n+    }\n+\n+    public void testValueStrategy() {\n+        assertEquals(ValueStrategies.UUID_HEX,\n+            _mapping.getField(\"uuid\").getValueStrategy());\n+        assertEquals(ValueStrategies.UUID_STRING,\n+            _mapping.getField(\"uuidString\").getValueStrategy());\n+        assertEquals(ValueStrategies.UUID_TYPE4_HEX,\n+            _mapping.getField(\"uuidT4Hex\").getValueStrategy());\n+        assertEquals(ValueStrategies.UUID_TYPE4_STRING,\n+            _mapping.getField(\"uuidT4String\").getValueStrategy());\n+        FieldMapping seq = _mapping.getFieldMapping(\"seq\");\n+        assertEquals(ValueStrategies.SEQUENCE, seq.getValueStrategy());\n+        assertEquals(\"system\", seq.getValueSequenceName());\n+    }\n+\n+    public void testReadOnly() {\n+        assertEquals(UpdateStrategies.RESTRICT,\n+            _mapping.getField(\"seq\").getUpdateStrategy());\n+    }\n+\n+    public void testInverseLogical() {\n+        assertEquals(\"owner\", _mapping.getField(\"rel\").getInverse());\n+        assertNull(_mapping.getField(\"owner\").getInverse());\n+    }\n+\n+    public void testDependent() {\n+        assertEquals(ValueMetaData.CASCADE_AUTO,\n+            _mapping.getField(\"rel\").getCascadeDelete());\n+        assertEquals(ValueMetaData.CASCADE_NONE,\n+            _mapping.getField(\"eager\").getCascadeDelete());\n+        assertEquals(ValueMetaData.CASCADE_AUTO,\n+            _mapping.getField(\"eager\").getElement().getCascadeDelete());\n+    }\n+\n+    public void testLRS() {\n+        assertTrue(_mapping.getField(\"lrs\").isLRS());\n+        assertFalse(_mapping.getField(\"eager\").isLRS());\n+    }\n+\n+    public void testClassCriteria() {\n+        assertTrue(_mapping.getFieldMapping(\"eager\").getElementMapping().\n+            getUseClassCriteria());\n+        assertFalse(_mapping.getFieldMapping(\"eager\").getUseClassCriteria());\n+        assertFalse(_mapping.getFieldMapping(\"lrs\").getElementMapping().\n+            getUseClassCriteria());\n+    }\n+\n+    public void testExternalValues() {\n+        FieldMapping externalValues = _mapping.getFieldMapping\n+            (\"externalValues\");\n+        assertEquals(JavaTypes.CHAR, externalValues.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.INT, externalValues.getTypeCode());\n+        assertEquals(new Integer(1), externalValues.getExternalValueMap().\n+            get(new Character('M')));\n+        assertEquals(new Integer(2), externalValues.getExternalValueMap().\n+            get(new Character('F')));\n+    }\n+\n+    public void testExternalizer() {\n+        FieldMapping externalizer = _mapping.getFieldMapping(\"externalizer\");\n+        assertEquals(JavaTypes.OBJECT, externalizer.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.STRING, externalizer.getTypeCode());\n+        assertEquals(\"java.lang.String\", externalizer.getExternalValue\n+            (String.class, null));\n+        assertEquals(String.class, externalizer.getFieldValue\n+            (String.class.getName(), null));\n+    }\n+}"},{"sha":"db637442d465e2d1a458d01815b1b1c3753c4869","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestFlatInheritance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for InheritanceType.SINGLE_TABLE\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestFlatInheritance extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(Flat1.class, Flat2.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testInheritance() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Flat1 pc = new Flat1(1);\r\n-        Flat2 pc2 = new Flat2(2);\r\n-        pc.setBasic(10);\r\n-        pc2.setBasic(20);\r\n-        pc2.setBasic2(\"DOG\");\r\n-        em.persist(pc);\r\n-        em.persist(pc2);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(Flat1.class, 1);\r\n-        assertEquals(10, pc.getBasic());\r\n-        pc = em.find(Flat1.class, 2);\r\n-        assertEquals(Flat2.class, pc.getClass());\r\n-        assertEquals(20, pc.getBasic());\r\n-        assertEquals(\"DOG\", ((Flat2) pc).getBasic2());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for InheritanceType.SINGLE_TABLE\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestFlatInheritance extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Flat1.class, Flat2.class, CLEAR_TABLES);\n+    }\n+\n+    public void testInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Flat1 pc = new Flat1(1);\n+        Flat2 pc2 = new Flat2(2);\n+        pc.setBasic(10);\n+        pc2.setBasic(20);\n+        pc2.setBasic2(\"DOG\");\n+        em.persist(pc);\n+        em.persist(pc2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(Flat1.class, 1);\n+        assertEquals(10, pc.getBasic());\n+        pc = em.find(Flat1.class, 2);\n+        assertEquals(Flat2.class, pc.getClass());\n+        assertEquals(20, pc.getBasic());\n+        assertEquals(\"DOG\", ((Flat2) pc).getBasic2());\n+        em.close();\n+    }\n+}"},{"sha":"c957301dd49d470eb9460cbb668ae3b54018a2fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestGenerators.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,96 +1,96 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.enhance.ClassRedefiner;\r\n-import org.apache.openjpa.enhance.PersistenceCapable;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for generators\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestGenerators extends SingleEMFTestCase {\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        setUp(Generator.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testGet() {\r\n-        if (!PersistenceCapable.class.isAssignableFrom(Generator.class)\r\n-            && !ClassRedefiner.canRedefineClasses())\r\n-            fail(\"This test requires a higher level of enhancement than\"\r\n-                + \" is available in the current environment.\");\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Generator g = new Generator();\r\n-        g.setPk(5);\r\n-        em.persist(g);\r\n-        assertPks(g);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-        assertNew();\r\n-    }\r\n-\r\n-    public void testFlush() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Generator g = new Generator();\r\n-        g.setPk(5);\r\n-        em.persist(g);\r\n-        em.flush();\r\n-        assertPks(g);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-        assertNew();\r\n-    }\r\n-\r\n-    public void testCommit() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Generator g = new Generator();\r\n-        g.setPk(5);\r\n-        em.persist(g);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-        assertNew();\r\n-    }\r\n-\r\n-    private void assertNew() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Query q = em.createQuery(\"select g from Generator g where \"\r\n-            + \"g.stringField = 'foo'\");\r\n-        for (Object o : q.getResultList())\r\n-            assertPks((Generator) o);\r\n-        em.close();\r\n-    }\r\n-\r\n-    private void assertPks(Generator g) {\r\n-        assertNotEquals(0, g.getPk());\r\n-        assertNotNull(g.getPk2());\r\n-        assertNotEquals(new Integer(0), g);\r\n-        assertNotEquals(0, g.getPk3());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.enhance.ClassRedefiner;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for generators\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestGenerators extends SingleEMFTestCase {\n+\n+    public void setUp()\n+        throws Exception {\n+        setUp(Generator.class, CLEAR_TABLES);\n+    }\n+\n+    public void testGet() {\n+        if (!PersistenceCapable.class.isAssignableFrom(Generator.class)\n+            && !ClassRedefiner.canRedefineClasses())\n+            fail(\"This test requires a higher level of enhancement than\"\n+                + \" is available in the current environment.\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Generator g = new Generator();\n+        g.setPk(5);\n+        em.persist(g);\n+        assertPks(g);\n+        em.getTransaction().commit();\n+        em.close();\n+        assertNew();\n+    }\n+\n+    public void testFlush() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Generator g = new Generator();\n+        g.setPk(5);\n+        em.persist(g);\n+        em.flush();\n+        assertPks(g);\n+        em.getTransaction().commit();\n+        em.close();\n+        assertNew();\n+    }\n+\n+    public void testCommit() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Generator g = new Generator();\n+        g.setPk(5);\n+        em.persist(g);\n+        em.getTransaction().commit();\n+        em.close();\n+        assertNew();\n+    }\n+\n+    private void assertNew() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select g from Generator g where \"\n+            + \"g.stringField = 'foo'\");\n+        for (Object o : q.getResultList())\n+            assertPks((Generator) o);\n+        em.close();\n+    }\n+\n+    private void assertPks(Generator g) {\n+        assertNotEquals(0, g.getPk());\n+        assertNotNull(g.getPk2());\n+        assertNotEquals(new Integer(0), g);\n+        assertNotEquals(0, g.getPk3());\n+    }\n+}"},{"sha":"6e82a3edc0bcc320641be913a01ab05e14afcfd3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestJoinedInheritance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for InheritanceType.JOINED\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestJoinedInheritance extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\r\n-            CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testInheritance() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest3 pc = new AnnoTest3();\r\n-        pc.setPk(new Long(1));\r\n-        pc.setBasic(10);\r\n-        pc.setBasic2(20);\r\n-        em.persist(pc);\r\n-\r\n-        AnnoTest2 pc2 = new AnnoTest2();\r\n-        pc2.setPk1(2);\r\n-        pc2.setPk2(\"bar\");\r\n-        pc2.setInverseOneOne(pc);\r\n-        pc.setSubOneOne(pc2);\r\n-        em.persist(pc2);\r\n-\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc2 = em.find(AnnoTest2.class, new AnnoTest2.Oid(2, \"bar\"));\r\n-        pc = (AnnoTest3) pc2.getInverseOneOne();\r\n-        assertEquals(pc.getInverseOwnerOneOne(), pc2);\r\n-        assertEquals(10, pc.getBasic());\r\n-        assertEquals(20, pc.getBasic2());\r\n-        assertEquals(pc2, pc.getSubOneOne());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for InheritanceType.JOINED\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestJoinedInheritance extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testInheritance() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest3 pc = new AnnoTest3();\n+        pc.setPk(new Long(1));\n+        pc.setBasic(10);\n+        pc.setBasic2(20);\n+        em.persist(pc);\n+\n+        AnnoTest2 pc2 = new AnnoTest2();\n+        pc2.setPk1(2);\n+        pc2.setPk2(\"bar\");\n+        pc2.setInverseOneOne(pc);\n+        pc.setSubOneOne(pc2);\n+        em.persist(pc2);\n+\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc2 = em.find(AnnoTest2.class, new AnnoTest2.Oid(2, \"bar\"));\n+        pc = (AnnoTest3) pc2.getInverseOneOne();\n+        assertEquals(pc.getInverseOwnerOneOne(), pc2);\n+        assertEquals(10, pc.getBasic());\n+        assertEquals(20, pc.getBasic2());\n+        assertEquals(pc2, pc.getSubOneOne());\n+        em.close();\n+    }\n+}"},{"sha":"1c803aefd9d87dad9c97785843085b5d3c5f854c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestManyToMany.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,110 +1,110 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.util.Set;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for m-m\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestManyToMany\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testManyToMany() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(4);\r\n-        em.persist(pc);\r\n-        AnnoTest2 pc2;\r\n-        for (int i = 0; i < 3; i++) {\r\n-            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n-            pc.getManyMany().add(pc2);\r\n-            em.persist(pc2);\r\n-        }\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(4));\r\n-        Set<AnnoTest2> many = pc.getManyMany();\r\n-        assertEquals(3, many.size());\r\n-        for (AnnoTest2 manyPc2 : many) {\r\n-            switch ((int) manyPc2.getPk1()) {\r\n-                case 5:\r\n-                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n-                    break;\r\n-                case 6:\r\n-                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n-                    break;\r\n-                case 7:\r\n-                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n-                    break;\r\n-                default:\r\n-                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n-            }\r\n-        }\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testInverseOwnerManyToMany() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(4);\r\n-        em.persist(pc);\r\n-        AnnoTest2 pc2;\r\n-        for (int i = 0; i < 3; i++) {\r\n-            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\r\n-            pc2.getManyMany().add(pc);\r\n-            em.persist(pc2);\r\n-        }\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(4));\r\n-        Set<AnnoTest2> many = pc.getInverseOwnerManyMany();\r\n-        assertEquals(3, many.size());\r\n-        for (AnnoTest2 manyPc2 : many) {\r\n-            assertTrue(manyPc2.getManyMany().contains(pc));\r\n-            switch ((int) manyPc2.getPk1()) {\r\n-                case 5:\r\n-                    assertEquals(\"foo0\", manyPc2.getPk2());\r\n-                    break;\r\n-                case 6:\r\n-                    assertEquals(\"foo1\", manyPc2.getPk2());\r\n-                    break;\r\n-                case 7:\r\n-                    assertEquals(\"foo2\", manyPc2.getPk2());\r\n-                    break;\r\n-                default:\r\n-                    fail(\"bad pk:\" + manyPc2.getPk1());\r\n-            }\r\n-        }\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.util.Set;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for m-m\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestManyToMany\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\n+    }\n+\n+    public void testManyToMany() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(4);\n+        em.persist(pc);\n+        AnnoTest2 pc2;\n+        for (int i = 0; i < 3; i++) {\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\n+            pc.getManyMany().add(pc2);\n+            em.persist(pc2);\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(4));\n+        Set<AnnoTest2> many = pc.getManyMany();\n+        assertEquals(3, many.size());\n+        for (AnnoTest2 manyPc2 : many) {\n+            switch ((int) manyPc2.getPk1()) {\n+                case 5:\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\n+                    break;\n+                case 6:\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\n+                    break;\n+                case 7:\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\n+                    break;\n+                default:\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public void testInverseOwnerManyToMany() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(4);\n+        em.persist(pc);\n+        AnnoTest2 pc2;\n+        for (int i = 0; i < 3; i++) {\n+            pc2 = new AnnoTest2(5 + i, \"foo\" + i);\n+            pc2.getManyMany().add(pc);\n+            em.persist(pc2);\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(4));\n+        Set<AnnoTest2> many = pc.getInverseOwnerManyMany();\n+        assertEquals(3, many.size());\n+        for (AnnoTest2 manyPc2 : many) {\n+            assertTrue(manyPc2.getManyMany().contains(pc));\n+            switch ((int) manyPc2.getPk1()) {\n+                case 5:\n+                    assertEquals(\"foo0\", manyPc2.getPk2());\n+                    break;\n+                case 6:\n+                    assertEquals(\"foo1\", manyPc2.getPk2());\n+                    break;\n+                case 7:\n+                    assertEquals(\"foo2\", manyPc2.getPk2());\n+                    break;\n+                default:\n+                    fail(\"bad pk:\" + manyPc2.getPk1());\n+            }\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"530824ad412bf8e6e5d1e80ce23c7ed0aa8c999f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMapKey.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,123 +1,123 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.MapKey;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * <p>Test the use of the {@link MapKey} annotation.  Note that we have\r\n- * more thorough Kodo core tests for the mappings themselves.  See\r\n- * {@link kodo.jdbc.meta.TestMappedByKeyMaps}.\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestMapKey\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(Flat1.class, AnnoTest1.class, AnnoTest2.class, CLEAR_TABLES);\r\n-\r\n-    }\r\n-\r\n-    public void testDefaultMapKeyMapping() {\r\n-        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n-            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n-                null, true);\r\n-        FieldMapping fm = mapping.getFieldMapping(\"defaultMapKey\");\r\n-        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n-        assertEquals(\"pk\", fm.getKey().getValueMappedBy());\r\n-        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\r\n-            true).getField(\"pk\"), fm.getKey().getValueMappedByMetaData());\r\n-    }\r\n-\r\n-    public void testNamedMapKeyMapping() {\r\n-        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n-            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n-                null, true);\r\n-        FieldMapping fm = mapping.getFieldMapping(\"namedMapKey\");\r\n-        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n-        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n-        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\r\n-            true).getField(\"basic\"), fm.getKey().getValueMappedByMetaData());\r\n-    }\r\n-\r\n-    public void testInverseOwnerMapKeyMapping() {\r\n-        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\r\n-            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\r\n-                null, true);\r\n-        FieldMapping fm = mapping.getFieldMapping(\"inverseOwnerMapKey\");\r\n-        assertTrue(fm.getStrategy() instanceof\r\n-            RelationMapInverseKeyFieldStrategy);\r\n-        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\r\n-        assertEquals(mapping.getRepository().getMetaData(AnnoTest2.class,\r\n-            null, true).getField(\"basic\"), fm.getKey().\r\n-            getValueMappedByMetaData());\r\n-    }\r\n-\r\n-    public void testInsertAndRetrieve() {\r\n-        Flat1 f1 = new Flat1(1);\r\n-        f1.setBasic(100);\r\n-        Flat1 f2 = new Flat1(2);\r\n-        f2.setBasic(200);\r\n-        AnnoTest2 a1 = new AnnoTest2(1L, \"1\");\r\n-        a1.setBasic(\"100\");\r\n-        AnnoTest2 a2 = new AnnoTest2(2L, \"2\");\r\n-        a2.setBasic(\"200\");\r\n-\r\n-        AnnoTest1 pc = new AnnoTest1(1L);\r\n-        pc.getDefaultMapKey().put(f1.getPk(), f1);\r\n-        pc.getDefaultMapKey().put(f2.getPk(), f2);\r\n-        pc.getNamedMapKey().put(f1.getBasic(), f1);\r\n-        pc.getNamedMapKey().put(f2.getBasic(), f2);\r\n-        pc.getInverseOwnerMapKey().put(a1.getBasic(), a1);\r\n-        pc.getInverseOwnerMapKey().put(a2.getBasic(), a2);\r\n-        a1.setOneManyOwner(pc);\r\n-        a2.setOneManyOwner(pc);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persistAll(new Object[]{ pc, f1, f2, a1, a2 });\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(1));\r\n-        assertEquals(2, pc.getDefaultMapKey().size());\r\n-        assertEquals(1, pc.getDefaultMapKey().get(1).getPk());\r\n-        assertEquals(2, pc.getDefaultMapKey().get(2).getPk());\r\n-        assertEquals(2, pc.getNamedMapKey().size());\r\n-        assertEquals(100, pc.getNamedMapKey().get(100).getBasic());\r\n-        assertEquals(200, pc.getNamedMapKey().get(200).getBasic());\r\n-        assertEquals(2, pc.getInverseOwnerMapKey().size());\r\n-        assertEquals(\"100\", pc.getInverseOwnerMapKey().get(\"100\").\r\n-            getBasic());\r\n-        assertEquals(\"200\", pc.getInverseOwnerMapKey().get(\"200\").\r\n-            getBasic());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.MapKey;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <p>Test the use of the {@link MapKey} annotation.  Note that we have\n+ * more thorough Kodo core tests for the mappings themselves.  See\n+ * {@link kodo.jdbc.meta.TestMappedByKeyMaps}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestMapKey\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Flat1.class, AnnoTest1.class, AnnoTest2.class, CLEAR_TABLES);\n+\n+    }\n+\n+    public void testDefaultMapKeyMapping() {\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\n+                null, true);\n+        FieldMapping fm = mapping.getFieldMapping(\"defaultMapKey\");\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\n+        assertEquals(\"pk\", fm.getKey().getValueMappedBy());\n+        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\n+            true).getField(\"pk\"), fm.getKey().getValueMappedByMetaData());\n+    }\n+\n+    public void testNamedMapKeyMapping() {\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\n+                null, true);\n+        FieldMapping fm = mapping.getFieldMapping(\"namedMapKey\");\n+        assertTrue(fm.getStrategy() instanceof RelationMapTableFieldStrategy);\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\n+        assertEquals(mapping.getRepository().getMetaData(Flat1.class, null,\n+            true).getField(\"basic\"), fm.getKey().getValueMappedByMetaData());\n+    }\n+\n+    public void testInverseOwnerMapKeyMapping() {\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration())\n+            .getMappingRepositoryInstance().getMapping(AnnoTest1.class,\n+                null, true);\n+        FieldMapping fm = mapping.getFieldMapping(\"inverseOwnerMapKey\");\n+        assertTrue(fm.getStrategy() instanceof\n+            RelationMapInverseKeyFieldStrategy);\n+        assertEquals(\"basic\", fm.getKey().getValueMappedBy());\n+        assertEquals(mapping.getRepository().getMetaData(AnnoTest2.class,\n+            null, true).getField(\"basic\"), fm.getKey().\n+            getValueMappedByMetaData());\n+    }\n+\n+    public void testInsertAndRetrieve() {\n+        Flat1 f1 = new Flat1(1);\n+        f1.setBasic(100);\n+        Flat1 f2 = new Flat1(2);\n+        f2.setBasic(200);\n+        AnnoTest2 a1 = new AnnoTest2(1L, \"1\");\n+        a1.setBasic(\"100\");\n+        AnnoTest2 a2 = new AnnoTest2(2L, \"2\");\n+        a2.setBasic(\"200\");\n+\n+        AnnoTest1 pc = new AnnoTest1(1L);\n+        pc.getDefaultMapKey().put(f1.getPk(), f1);\n+        pc.getDefaultMapKey().put(f2.getPk(), f2);\n+        pc.getNamedMapKey().put(f1.getBasic(), f1);\n+        pc.getNamedMapKey().put(f2.getBasic(), f2);\n+        pc.getInverseOwnerMapKey().put(a1.getBasic(), a1);\n+        pc.getInverseOwnerMapKey().put(a2.getBasic(), a2);\n+        a1.setOneManyOwner(pc);\n+        a2.setOneManyOwner(pc);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persistAll(new Object[]{ pc, f1, f2, a1, a2 });\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(1));\n+        assertEquals(2, pc.getDefaultMapKey().size());\n+        assertEquals(1, pc.getDefaultMapKey().get(1).getPk());\n+        assertEquals(2, pc.getDefaultMapKey().get(2).getPk());\n+        assertEquals(2, pc.getNamedMapKey().size());\n+        assertEquals(100, pc.getNamedMapKey().get(100).getBasic());\n+        assertEquals(200, pc.getNamedMapKey().get(200).getBasic());\n+        assertEquals(2, pc.getInverseOwnerMapKey().size());\n+        assertEquals(\"100\", pc.getInverseOwnerMapKey().get(\"100\").\n+            getBasic());\n+        assertEquals(\"200\", pc.getInverseOwnerMapKey().get(\"200\").\n+            getBasic());\n+        em.close();\n+    }\n+}"},{"sha":"bf1c27236567c7fbbd26b5849a39cc80a1b0210a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMixedAccess.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.PersistenceException;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n-\r\n-public class TestMixedAccess extends PersistenceTestCase {\r\n-\r\n-    public void testMixedAccessEntityError() {\r\n-        try {\r\n-            EntityManagerFactory emf = createEMF(UnenhancedMixedAccess.class);\r\n-            emf.createEntityManager().close();\r\n-        } catch (RuntimeException e) {\r\n-            String msg = e.getMessage();\r\n-            if (!(msg.contains(\"UnenhancedMixedAccess.id\") &&\r\n-                msg.contains(\"UnenhancedMixedAccess.getStringField\")))\r\n-                throw e;\r\n-        }\r\n-    }\r\n-\r\n-    public void testInappropriateTransientError() {\r\n-        try {\r\n-            EntityManagerFactory emf = createEMF(\r\n-                UnenhancedInappropriateTransient.class);\r\n-            emf.createEntityManager().close();\r\n-         } catch (RuntimeException e) {\r\n-            String msg = e.getMessage();\r\n-            if (!(msg.contains(\"UnenhancedInappropriateTransient.id\") &&\r\n-                msg.contains(\"UnenhancedInappropriateTransient.prePersist\")))\r\n-                throw e;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.PersistenceException;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+\n+public class TestMixedAccess extends PersistenceTestCase {\n+\n+    public void testMixedAccessEntityError() {\n+        try {\n+            EntityManagerFactory emf = createEMF(UnenhancedMixedAccess.class);\n+            emf.createEntityManager().close();\n+        } catch (RuntimeException e) {\n+            String msg = e.getMessage();\n+            if (!(msg.contains(\"UnenhancedMixedAccess.id\") &&\n+                msg.contains(\"UnenhancedMixedAccess.getStringField\")))\n+                throw e;\n+        }\n+    }\n+\n+    public void testInappropriateTransientError() {\n+        try {\n+            EntityManagerFactory emf = createEMF(\n+                UnenhancedInappropriateTransient.class);\n+            emf.createEntityManager().close();\n+         } catch (RuntimeException e) {\n+            String msg = e.getMessage();\n+            if (!(msg.contains(\"UnenhancedInappropriateTransient.id\") &&\n+                msg.contains(\"UnenhancedInappropriateTransient.prePersist\")))\n+                throw e;\n+        }\n+    }\n+}"},{"sha":"4c83b082d8657ede4f29beba1f4bfa56afd6910c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java","status":"modified","additions":197,"deletions":197,"changes":394,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestMultiColumnVersion.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,197 +1,197 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.lang.reflect.Array;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Tests numeric version spanning multiple columns and those columns spanning\r\n- * multiple tables. \r\n- *\r\n- * @author Pinaki Poddar\r\n- */\r\n-public class TestMultiColumnVersion extends SingleEMFTestCase {\r\n-    public void setUp() {\r\n-        setUp(MultiColumnVersionPC.class, MultiColumnSecondaryVersionPC.class,\r\n-        \t\tCLEAR_TABLES);\r\n-    }\r\n-    \r\n-    public void testVersionStrategyIsSet() {\r\n-    \tassertStrategy(MultiColumnVersionPC.class);\r\n-    \tassertStrategy(MultiColumnSecondaryVersionPC.class);\r\n-    }\r\n-    \r\n-    public void assertStrategy(Class cls) {\r\n-    \tClassMapping mapping = getMapping(cls);\r\n-    \tassertNotNull(mapping.getVersion());\r\n-    \tassertTrue(mapping.getVersion().getStrategy() \r\n-    \t\tinstanceof MultiColumnVersionStrategy);\r\n-    }\r\n-    \r\n-    public void testVersionOnPersistAndUpdateForSingleTable() {\r\n-    \tOpenJPAEntityManager em = emf.createEntityManager();\r\n-    \tem.getTransaction().begin();\r\n-        MultiColumnVersionPC pc = new MultiColumnVersionPC();\r\n-        assertEquals(null, em.getVersion(pc));\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        assertVersionEquals(new Number[]{1,1, 1.0f}, em.getVersion(pc));\r\n-    \t\r\n-    \tem.getTransaction().begin();\r\n-    \tpc.setName(\"updated\");\r\n-    \tem.merge(pc);\r\n-        em.getTransaction().commit();\r\n-        assertVersionEquals(new Number[]{2,2, 2.0f}, em.getVersion(pc));\r\n-    }\r\n-\r\n-    public void testConcurrentOptimisticUpdateFailsForSingleTable() {\r\n-    \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n-        em1.getTransaction().begin();\r\n-        OpenJPAEntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-\r\n-        MultiColumnVersionPC pc1 = new MultiColumnVersionPC();\r\n-        em1.persist(pc1);\r\n-        em1.getTransaction().commit();\r\n-        em1.getTransaction().begin();\r\n-        Object oid = em1.getObjectId(pc1);\r\n-        \r\n-        \r\n-        MultiColumnVersionPC pc2 = em2.find(MultiColumnVersionPC.class, oid);\r\n-        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\r\n-        \r\n-        pc1.setName(\"Updated in em1\");\r\n-        pc2.setName(\"Updated in em2\");\r\n-        em1.getTransaction().commit();\r\n-        \r\n-        try {\r\n-            em2.getTransaction().commit();\r\n-            fail(\"Optimistic fail\");\r\n-        } catch (Exception e) {\r\n-        } finally {\r\n-            em2.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testConcurrentOptimisticReadSucceedsForSingleTable() {\r\n-    \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n-        em1.getTransaction().begin();\r\n-        OpenJPAEntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-\r\n-        MultiColumnVersionPC pc1 = new MultiColumnVersionPC();\r\n-        em1.persist(pc1);\r\n-        em1.getTransaction().commit();\r\n-        em1.getTransaction().begin();\r\n-        Object oid = em1.getObjectId(pc1);\r\n-        \r\n-        \r\n-        MultiColumnVersionPC pc2 = em2.find(MultiColumnVersionPC.class, oid);\r\n-        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\r\n-        \r\n-        em1.getTransaction().commit();\r\n-        em2.getTransaction().commit();\r\n-    }\r\n-    \r\n-    public void testVersionOnPersistAndUpdateForMultiTable() {\r\n-    \tOpenJPAEntityManager em = emf.createEntityManager();\r\n-    \tem.getTransaction().begin();\r\n-    \tMultiColumnSecondaryVersionPC pc = new MultiColumnSecondaryVersionPC();\r\n-        assertEquals(null, em.getVersion(pc));\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        assertVersionEquals(new Number[]{1,1,1,1}, em.getVersion(pc));\r\n-    \t\r\n-    \tem.getTransaction().begin();\r\n-    \tpc.setName(\"updated\");\r\n-    \tem.merge(pc);\r\n-        em.getTransaction().commit();\r\n-        assertVersionEquals(new Number[]{2,2,2,2}, em.getVersion(pc));\r\n-    }\r\n-\r\n-    public void testConcurrentOptimisticUpdateFailsForMultiTable() {\r\n-    \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n-        em1.getTransaction().begin();\r\n-        OpenJPAEntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-\r\n-    \tMultiColumnSecondaryVersionPC pc1 = new MultiColumnSecondaryVersionPC();\r\n-        em1.persist(pc1);\r\n-        em1.getTransaction().commit();\r\n-        em1.getTransaction().begin();\r\n-        Object oid = em1.getObjectId(pc1);\r\n-        \r\n-        \r\n-        MultiColumnSecondaryVersionPC pc2 = em2.find(MultiColumnSecondaryVersionPC.class, oid);\r\n-        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\r\n-        \r\n-        pc1.setName(\"Updated in em1\");\r\n-        pc2.setName(\"Updated in em2\");\r\n-        em1.getTransaction().commit();\r\n-        \r\n-        try {\r\n-            em2.getTransaction().commit();\r\n-            fail(\"Optimistic fail\");\r\n-        } catch (Exception e) {\r\n-        } finally {\r\n-            em2.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testConcurrentOptimisticReadSucceedsForMultiTable() {\r\n-    \tOpenJPAEntityManager em1 = emf.createEntityManager();\r\n-        em1.getTransaction().begin();\r\n-        OpenJPAEntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-\r\n-    \tMultiColumnSecondaryVersionPC pc1 = new MultiColumnSecondaryVersionPC();\r\n-        em1.persist(pc1);\r\n-        em1.getTransaction().commit();\r\n-        em1.getTransaction().begin();\r\n-        Object oid = em1.getObjectId(pc1);\r\n-        \r\n-        \r\n-    \tMultiColumnSecondaryVersionPC pc2 = em2.find(MultiColumnSecondaryVersionPC.class, oid);\r\n-        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\r\n-        \r\n-        em1.getTransaction().commit();\r\n-        em2.getTransaction().commit();\r\n-    }\r\n-\r\n-    static void assertVersionEquals(Object expected, Object actual) {\r\n-    \tassertTrue(expected.getClass().isArray());\r\n-    \tassertTrue(actual.getClass().isArray());\r\n-    \tassertEquals(Array.getLength(expected), Array.getLength(actual));\r\n-    \tint n = Array.getLength(expected);\r\n-    \tfor (int i = 0; i < n; i++) {\r\n-    \t\tObject v1 = Array.get(expected, i);\r\n-    \t\tObject v2 = Array.get(actual, i);\r\n-    \t\t// exact equality may fail on non-integral values\r\n-    \t\tassertTrue(\"element \" + i + \" mismatch. Expeceted: \" + \r\n-       \t\t    v1 + \" actual: \" + v2,\r\n-       \t\t    Math.abs(((Number)v1).doubleValue() - ((Number)v2).doubleValue()) \r\n-       \t\t    < 0.01);\r\n-    \t}\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.lang.reflect.Array;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.MultiColumnVersionStrategy;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests numeric version spanning multiple columns and those columns spanning\n+ * multiple tables. \n+ *\n+ * @author Pinaki Poddar\n+ */\n+public class TestMultiColumnVersion extends SingleEMFTestCase {\n+    public void setUp() {\n+        setUp(MultiColumnVersionPC.class, MultiColumnSecondaryVersionPC.class,\n+        \t\tCLEAR_TABLES);\n+    }\n+    \n+    public void testVersionStrategyIsSet() {\n+    \tassertStrategy(MultiColumnVersionPC.class);\n+    \tassertStrategy(MultiColumnSecondaryVersionPC.class);\n+    }\n+    \n+    public void assertStrategy(Class cls) {\n+    \tClassMapping mapping = getMapping(cls);\n+    \tassertNotNull(mapping.getVersion());\n+    \tassertTrue(mapping.getVersion().getStrategy() \n+    \t\tinstanceof MultiColumnVersionStrategy);\n+    }\n+    \n+    public void testVersionOnPersistAndUpdateForSingleTable() {\n+    \tOpenJPAEntityManager em = emf.createEntityManager();\n+    \tem.getTransaction().begin();\n+        MultiColumnVersionPC pc = new MultiColumnVersionPC();\n+        assertEquals(null, em.getVersion(pc));\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        assertVersionEquals(new Number[]{1,1, 1.0f}, em.getVersion(pc));\n+    \t\n+    \tem.getTransaction().begin();\n+    \tpc.setName(\"updated\");\n+    \tem.merge(pc);\n+        em.getTransaction().commit();\n+        assertVersionEquals(new Number[]{2,2, 2.0f}, em.getVersion(pc));\n+    }\n+\n+    public void testConcurrentOptimisticUpdateFailsForSingleTable() {\n+    \tOpenJPAEntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        OpenJPAEntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+\n+        MultiColumnVersionPC pc1 = new MultiColumnVersionPC();\n+        em1.persist(pc1);\n+        em1.getTransaction().commit();\n+        em1.getTransaction().begin();\n+        Object oid = em1.getObjectId(pc1);\n+        \n+        \n+        MultiColumnVersionPC pc2 = em2.find(MultiColumnVersionPC.class, oid);\n+        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\n+        \n+        pc1.setName(\"Updated in em1\");\n+        pc2.setName(\"Updated in em2\");\n+        em1.getTransaction().commit();\n+        \n+        try {\n+            em2.getTransaction().commit();\n+            fail(\"Optimistic fail\");\n+        } catch (Exception e) {\n+        } finally {\n+            em2.close();\n+        }\n+    }\n+\n+    public void testConcurrentOptimisticReadSucceedsForSingleTable() {\n+    \tOpenJPAEntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        OpenJPAEntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+\n+        MultiColumnVersionPC pc1 = new MultiColumnVersionPC();\n+        em1.persist(pc1);\n+        em1.getTransaction().commit();\n+        em1.getTransaction().begin();\n+        Object oid = em1.getObjectId(pc1);\n+        \n+        \n+        MultiColumnVersionPC pc2 = em2.find(MultiColumnVersionPC.class, oid);\n+        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\n+        \n+        em1.getTransaction().commit();\n+        em2.getTransaction().commit();\n+    }\n+    \n+    public void testVersionOnPersistAndUpdateForMultiTable() {\n+    \tOpenJPAEntityManager em = emf.createEntityManager();\n+    \tem.getTransaction().begin();\n+    \tMultiColumnSecondaryVersionPC pc = new MultiColumnSecondaryVersionPC();\n+        assertEquals(null, em.getVersion(pc));\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        assertVersionEquals(new Number[]{1,1,1,1}, em.getVersion(pc));\n+    \t\n+    \tem.getTransaction().begin();\n+    \tpc.setName(\"updated\");\n+    \tem.merge(pc);\n+        em.getTransaction().commit();\n+        assertVersionEquals(new Number[]{2,2,2,2}, em.getVersion(pc));\n+    }\n+\n+    public void testConcurrentOptimisticUpdateFailsForMultiTable() {\n+    \tOpenJPAEntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        OpenJPAEntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+\n+    \tMultiColumnSecondaryVersionPC pc1 = new MultiColumnSecondaryVersionPC();\n+        em1.persist(pc1);\n+        em1.getTransaction().commit();\n+        em1.getTransaction().begin();\n+        Object oid = em1.getObjectId(pc1);\n+        \n+        \n+        MultiColumnSecondaryVersionPC pc2 = em2.find(MultiColumnSecondaryVersionPC.class, oid);\n+        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\n+        \n+        pc1.setName(\"Updated in em1\");\n+        pc2.setName(\"Updated in em2\");\n+        em1.getTransaction().commit();\n+        \n+        try {\n+            em2.getTransaction().commit();\n+            fail(\"Optimistic fail\");\n+        } catch (Exception e) {\n+        } finally {\n+            em2.close();\n+        }\n+    }\n+\n+    public void testConcurrentOptimisticReadSucceedsForMultiTable() {\n+    \tOpenJPAEntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        OpenJPAEntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+\n+    \tMultiColumnSecondaryVersionPC pc1 = new MultiColumnSecondaryVersionPC();\n+        em1.persist(pc1);\n+        em1.getTransaction().commit();\n+        em1.getTransaction().begin();\n+        Object oid = em1.getObjectId(pc1);\n+        \n+        \n+    \tMultiColumnSecondaryVersionPC pc2 = em2.find(MultiColumnSecondaryVersionPC.class, oid);\n+        assertVersionEquals(em1.getVersion(pc1), em2.getVersion(pc2));\n+        \n+        em1.getTransaction().commit();\n+        em2.getTransaction().commit();\n+    }\n+\n+    static void assertVersionEquals(Object expected, Object actual) {\n+    \tassertTrue(expected.getClass().isArray());\n+    \tassertTrue(actual.getClass().isArray());\n+    \tassertEquals(Array.getLength(expected), Array.getLength(actual));\n+    \tint n = Array.getLength(expected);\n+    \tfor (int i = 0; i < n; i++) {\n+    \t\tObject v1 = Array.get(expected, i);\n+    \t\tObject v2 = Array.get(actual, i);\n+    \t\t// exact equality may fail on non-integral values\n+    \t\tassertTrue(\"element \" + i + \" mismatch. Expeceted: \" + \n+       \t\t    v1 + \" actual: \" + v2,\n+       \t\t    Math.abs(((Number)v1).doubleValue() - ((Number)v2).doubleValue()) \n+       \t\t    < 0.01);\n+    \t}\n+    }\n+}"},{"sha":"5597f9f2540de214d93fbde1eb8bcab7a29a04aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"modified","additions":280,"deletions":280,"changes":560,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,280 +1,280 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.awt.*;\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.Discriminator;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.ValueMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.ClassNameDiscriminatorStrategy;\r\n-import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * <p>Test the parsing of non-standard mapping annotations.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestNonstandardMappingAnnotations\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    private ClassMapping _mapping;\r\n-    private DBDictionary _dict;\r\n-\r\n-    public void setUp() {\r\n-        setUp(NonstandardMappingEntity.class, ExtensionsEntity.class,\r\n-            NonstandardMappingMappedSuper.class, EmbedValue2.class,\r\n-            EmbedValue.class,\r\n-            CLEAR_TABLES, RETAIN_DATA);\r\n-\r\n-        // trigger complete resolution of metadata etc.\r\n-        emf.createEntityManager().close();\r\n-\r\n-        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\r\n-        _dict = conf.getDBDictionaryInstance();\r\n-        _mapping = (ClassMapping) JPAFacadeHelper.getMetaData(emf,\r\n-            NonstandardMappingEntity.class);\r\n-    }\r\n-\r\n-    public void testNonpolymorphic() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"superRel\");\r\n-        assertEquals(ValueMapping.POLY_FALSE, fm.getPolymorphic());\r\n-\r\n-        ValueMapping vm = _mapping.getFieldMapping(\"joinCollection\").\r\n-            getElementMapping();\r\n-        assertEquals(ValueMapping.POLY_JOINABLE, vm.getPolymorphic());\r\n-\r\n-        vm = _mapping.getFieldMapping(\"joinMap\").getKeyMapping();\r\n-        assertEquals(ValueMapping.POLY_FALSE, vm.getPolymorphic());\r\n-        vm = _mapping.getFieldMapping(\"joinMap\").getElementMapping();\r\n-        assertEquals(ValueMapping.POLY_FALSE, vm.getPolymorphic());\r\n-    }\r\n-\r\n-    public void testDataStoreIdColumn() {\r\n-        assertEquals(\"NONSTD_ENTITY\", _mapping.getTable().getName());\r\n-        assertEquals(ClassMapping.ID_DATASTORE, _mapping.getIdentityType());\r\n-        assertEquals(1, _mapping.getPrimaryKeyColumns().length);\r\n-        assertEquals(\"OID\", _mapping.getPrimaryKeyColumns()[0].getName());\r\n-    }\r\n-\r\n-    public void testDiscriminator() {\r\n-        Discriminator disc = _mapping.getDiscriminator();\r\n-        assertTrue(disc.getStrategy() instanceof\r\n-            ClassNameDiscriminatorStrategy);\r\n-        assertEquals(1, disc.getColumns().length);\r\n-        assertEquals(\"DISCRIM\", disc.getColumns()[0].getName());\r\n-    }\r\n-\r\n-    public void testSuperclassOverride() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"superCollection\");\r\n-        assertEquals(\"SUP_COLL\", fm.getTable().getName());\r\n-        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n-        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n-        assertEquals(\"SUP_ELEM\", fm.getElementMapping().getColumns()[0].\r\n-            getName());\r\n-        assertNull(fm.getElementMapping().getValueIndex());\r\n-        assertNotNull(fm.getJoinIndex());\r\n-    }\r\n-\r\n-    public void testCustomField() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"custom\");\r\n-        assertTrue(fm.getHandler() instanceof PointHandler);\r\n-        assertEquals(2, fm.getColumns().length);\r\n-        assertEquals(\"X_COL\", fm.getColumns()[0].getName());\r\n-        assertEquals(\"Y_COL\", fm.getColumns()[1].getName());\r\n-        assertNotNull(fm.getValueIndex());\r\n-    }\r\n-\r\n-    public void testValueCollection() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"stringCollection\");\r\n-        assertEquals(\"STRINGS_COLL\", fm.getTable().getName());\r\n-        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n-        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n-        assertEquals(\"STR_ELEM\", fm.getElementMapping().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(127, fm.getElementMapping().getColumns()[0].getSize());\r\n-        assertNotNull(fm.getElementMapping().getValueIndex());\r\n-        assertNull(fm.getJoinIndex());\r\n-    }\r\n-\r\n-    public void testJoinCollection() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"joinCollection\");\r\n-        assertEquals(\"JOIN_COLL\", fm.getTable().getName());\r\n-        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n-        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n-        assertEquals(\"JOIN_ELEM\", fm.getElementMapping().getColumns()[0].\r\n-            getName());\r\n-        assertForeignKey(fm.getJoinForeignKey());\r\n-        assertForeignKey(fm.getElementMapping().getForeignKey());\r\n-    }\r\n-\r\n-    private void assertForeignKey(ForeignKey fk) {\r\n-        if (_dict.supportsForeignKeys)\r\n-            assertEquals(ForeignKey.ACTION_RESTRICT, fk.getDeleteAction());\r\n-    }\r\n-\r\n-    public void testValueMap() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"stringMap\");\r\n-        assertEquals(\"STRINGS_MAP\", fm.getTable().getName());\r\n-        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n-        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(1, fm.getKeyMapping().getColumns().length);\r\n-        assertEquals(\"STR_KEY\", fm.getKeyMapping().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(127, fm.getKeyMapping().getColumns()[0].getSize());\r\n-        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n-        assertEquals(\"STR_VAL\", fm.getElementMapping().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(127, fm.getElementMapping().getColumns()[0].getSize());\r\n-        assertNull(fm.getJoinIndex());\r\n-        assertNotNull(fm.getKeyMapping().getValueIndex());\r\n-        assertNotNull(fm.getElementMapping().getValueIndex());\r\n-    }\r\n-\r\n-    public void testJoinMap() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"joinMap\");\r\n-        assertEquals(\"JOIN_MAP\", fm.getTable().getName());\r\n-        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\r\n-        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(1, fm.getKeyMapping().getColumns().length);\r\n-        assertEquals(\"JOIN_KEY\", fm.getKeyMapping().getColumns()[0].\r\n-            getName());\r\n-        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n-        assertEquals(\"JOIN_VAL\", fm.getElementMapping().getColumns()[0].\r\n-            getName());\r\n-        assertForeignKey(fm.getJoinForeignKey());\r\n-        assertForeignKey(fm.getKeyMapping().getForeignKey());\r\n-        assertForeignKey(fm.getElementMapping().getForeignKey());\r\n-    }\r\n-\r\n-    public void testEmbeddedOverride() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"embed\");\r\n-        assertTrue(fm.isEmbedded());\r\n-        assertEquals(1, fm.getColumns().length);\r\n-        assertTrue(\"UUID_HEX\".equalsIgnoreCase(fm.getColumns()[0].\r\n-            getName()));\r\n-\r\n-        ClassMapping embed = fm.getEmbeddedMapping();\r\n-        fm = embed.getFieldMapping(\"rel\");\r\n-        assertEquals(1, fm.getColumns().length);\r\n-        assertEquals(\"EM_REL_ID\", fm.getColumns()[0].getName());\r\n-        fm = embed.getFieldMapping(\"eager\");\r\n-        assertEquals(\"EM_EAGER\", fm.getTable().getName());\r\n-        assertEquals(1, fm.getElementMapping().getColumns().length);\r\n-        assertEquals(\"ELEM_EAGER_ID\", fm.getElementMapping().getColumns()[0].\r\n-            getName());\r\n-    }\r\n-\r\n-    public void testEmbeddedElementOverride() {\r\n-        FieldMapping fm = _mapping.getFieldMapping(\"embedCollection\");\r\n-        assertTrue(fm.getElement().isEmbedded());\r\n-        assertEquals(\"EMBED_COLL\", fm.getTable().getName());\r\n-        assertEquals(0, fm.getElementMapping().getColumns().length);\r\n-\r\n-        ClassMapping embed = fm.getElementMapping().getEmbeddedMapping();\r\n-        fm = embed.getFieldMapping(\"basic\");\r\n-        assertEquals(1, fm.getColumns().length);\r\n-        assertEquals(\"EM_BASIC\", fm.getColumns()[0].getName());\r\n-    }\r\n-\r\n-    public void testInsertAndRetrieve() {\r\n-        NonstandardMappingEntity pc = new NonstandardMappingEntity();\r\n-        pc.getSuperCollection().add(\"super\");\r\n-        pc.setCustom(new Point(1, 2));\r\n-        pc.getStringCollection().add(\"string\");\r\n-        NonstandardMappingEntity pc2 = new NonstandardMappingEntity();\r\n-        pc.getJoinCollection().add(pc2);\r\n-        pc.getStringMap().put(\"stringKey\", \"stringValue\");\r\n-        NonstandardMappingEntity pc3 = new NonstandardMappingEntity();\r\n-        pc.getJoinMap().put(pc2, pc3);\r\n-        ExtensionsEntity embed = new ExtensionsEntity();\r\n-        embed.setExternalValues('M');\r\n-        embed.setExternalizer(String.class);\r\n-        pc.setEmbed(embed);\r\n-        EmbedValue2 embed2 = new EmbedValue2();\r\n-        embed2.setBasic(\"basic\");\r\n-        pc.getEmbedCollection().add(embed2);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persistAll(new Object[]{ pc, pc2, pc3 });\r\n-        em.getTransaction().commit();\r\n-        Object pcId = em.getObjectId(pc);\r\n-        Object pc2Id = em.getObjectId(pc2);\r\n-        Object pc3Id = em.getObjectId(pc3);\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(NonstandardMappingEntity.class, pcId);\r\n-        assertEquals(1, pc.getSuperCollection().size());\r\n-        assertEquals(\"super\", pc.getSuperCollection().get(0));\r\n-        assertEquals(1, pc.getCustom().x);\r\n-        assertEquals(2, pc.getCustom().y);\r\n-        assertEquals(1, pc.getStringCollection().size());\r\n-        assertEquals(\"string\", pc.getStringCollection().get(0));\r\n-        assertEquals(1, pc.getJoinCollection().size());\r\n-        assertEquals(pc2Id, em.getObjectId(pc.getJoinCollection().get(0)));\r\n-        assertEquals(1, pc.getStringMap().size());\r\n-        assertEquals(\"stringValue\", pc.getStringMap().get(\"stringKey\"));\r\n-        assertEquals(1, pc.getJoinMap().size());\r\n-        Map.Entry entry = pc.getJoinMap().entrySet().iterator().next();\r\n-        assertEquals(pc2Id, em.getObjectId(entry.getKey()));\r\n-        assertEquals(pc3Id, em.getObjectId(entry.getValue()));\r\n-        assertEquals('M', pc.getEmbed().getExternalValues());\r\n-        assertEquals(String.class, pc.getEmbed().getExternalizer());\r\n-        assertEquals(1, pc.getEmbedCollection().size());\r\n-        assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testInsertAndRetrieveEmbeddedCollection() {\r\n-        NonstandardMappingEntity pc = new NonstandardMappingEntity();\r\n-        EmbedValue2 embed2 = new EmbedValue2();\r\n-        embed2.setBasic(\"basic\");\r\n-        pc.getEmbedCollection().add(embed2);\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        Object pcId = em.getObjectId(pc);\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(NonstandardMappingEntity.class, pcId);\r\n-        assertEquals(1, pc.getEmbedCollection().size());\r\n-        assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.awt.*;\n+import java.util.Map;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.Discriminator;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.ValueMapping;\n+import org.apache.openjpa.jdbc.meta.strats.ClassNameDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <p>Test the parsing of non-standard mapping annotations.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestNonstandardMappingAnnotations\n+    extends SingleEMFTestCase {\n+\n+    private ClassMapping _mapping;\n+    private DBDictionary _dict;\n+\n+    public void setUp() {\n+        setUp(NonstandardMappingEntity.class, ExtensionsEntity.class,\n+            NonstandardMappingMappedSuper.class, EmbedValue2.class,\n+            EmbedValue.class,\n+            CLEAR_TABLES, RETAIN_DATA);\n+\n+        // trigger complete resolution of metadata etc.\n+        emf.createEntityManager().close();\n+\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        _dict = conf.getDBDictionaryInstance();\n+        _mapping = (ClassMapping) JPAFacadeHelper.getMetaData(emf,\n+            NonstandardMappingEntity.class);\n+    }\n+\n+    public void testNonpolymorphic() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"superRel\");\n+        assertEquals(ValueMapping.POLY_FALSE, fm.getPolymorphic());\n+\n+        ValueMapping vm = _mapping.getFieldMapping(\"joinCollection\").\n+            getElementMapping();\n+        assertEquals(ValueMapping.POLY_JOINABLE, vm.getPolymorphic());\n+\n+        vm = _mapping.getFieldMapping(\"joinMap\").getKeyMapping();\n+        assertEquals(ValueMapping.POLY_FALSE, vm.getPolymorphic());\n+        vm = _mapping.getFieldMapping(\"joinMap\").getElementMapping();\n+        assertEquals(ValueMapping.POLY_FALSE, vm.getPolymorphic());\n+    }\n+\n+    public void testDataStoreIdColumn() {\n+        assertEquals(\"NONSTD_ENTITY\", _mapping.getTable().getName());\n+        assertEquals(ClassMapping.ID_DATASTORE, _mapping.getIdentityType());\n+        assertEquals(1, _mapping.getPrimaryKeyColumns().length);\n+        assertEquals(\"OID\", _mapping.getPrimaryKeyColumns()[0].getName());\n+    }\n+\n+    public void testDiscriminator() {\n+        Discriminator disc = _mapping.getDiscriminator();\n+        assertTrue(disc.getStrategy() instanceof\n+            ClassNameDiscriminatorStrategy);\n+        assertEquals(1, disc.getColumns().length);\n+        assertEquals(\"DISCRIM\", disc.getColumns()[0].getName());\n+    }\n+\n+    public void testSuperclassOverride() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"superCollection\");\n+        assertEquals(\"SUP_COLL\", fm.getTable().getName());\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\n+            getName());\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\n+        assertEquals(\"SUP_ELEM\", fm.getElementMapping().getColumns()[0].\n+            getName());\n+        assertNull(fm.getElementMapping().getValueIndex());\n+        assertNotNull(fm.getJoinIndex());\n+    }\n+\n+    public void testCustomField() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"custom\");\n+        assertTrue(fm.getHandler() instanceof PointHandler);\n+        assertEquals(2, fm.getColumns().length);\n+        assertEquals(\"X_COL\", fm.getColumns()[0].getName());\n+        assertEquals(\"Y_COL\", fm.getColumns()[1].getName());\n+        assertNotNull(fm.getValueIndex());\n+    }\n+\n+    public void testValueCollection() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"stringCollection\");\n+        assertEquals(\"STRINGS_COLL\", fm.getTable().getName());\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\n+            getName());\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\n+        assertEquals(\"STR_ELEM\", fm.getElementMapping().getColumns()[0].\n+            getName());\n+        assertEquals(127, fm.getElementMapping().getColumns()[0].getSize());\n+        assertNotNull(fm.getElementMapping().getValueIndex());\n+        assertNull(fm.getJoinIndex());\n+    }\n+\n+    public void testJoinCollection() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"joinCollection\");\n+        assertEquals(\"JOIN_COLL\", fm.getTable().getName());\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\n+            getName());\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\n+        assertEquals(\"JOIN_ELEM\", fm.getElementMapping().getColumns()[0].\n+            getName());\n+        assertForeignKey(fm.getJoinForeignKey());\n+        assertForeignKey(fm.getElementMapping().getForeignKey());\n+    }\n+\n+    private void assertForeignKey(ForeignKey fk) {\n+        if (_dict.supportsForeignKeys)\n+            assertEquals(ForeignKey.ACTION_RESTRICT, fk.getDeleteAction());\n+    }\n+\n+    public void testValueMap() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"stringMap\");\n+        assertEquals(\"STRINGS_MAP\", fm.getTable().getName());\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\n+            getName());\n+        assertEquals(1, fm.getKeyMapping().getColumns().length);\n+        assertEquals(\"STR_KEY\", fm.getKeyMapping().getColumns()[0].\n+            getName());\n+        assertEquals(127, fm.getKeyMapping().getColumns()[0].getSize());\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\n+        assertEquals(\"STR_VAL\", fm.getElementMapping().getColumns()[0].\n+            getName());\n+        assertEquals(127, fm.getElementMapping().getColumns()[0].getSize());\n+        assertNull(fm.getJoinIndex());\n+        assertNotNull(fm.getKeyMapping().getValueIndex());\n+        assertNotNull(fm.getElementMapping().getValueIndex());\n+    }\n+\n+    public void testJoinMap() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"joinMap\");\n+        assertEquals(\"JOIN_MAP\", fm.getTable().getName());\n+        assertEquals(1, fm.getJoinForeignKey().getColumns().length);\n+        assertEquals(\"OWNER\", fm.getJoinForeignKey().getColumns()[0].\n+            getName());\n+        assertEquals(1, fm.getKeyMapping().getColumns().length);\n+        assertEquals(\"JOIN_KEY\", fm.getKeyMapping().getColumns()[0].\n+            getName());\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\n+        assertEquals(\"JOIN_VAL\", fm.getElementMapping().getColumns()[0].\n+            getName());\n+        assertForeignKey(fm.getJoinForeignKey());\n+        assertForeignKey(fm.getKeyMapping().getForeignKey());\n+        assertForeignKey(fm.getElementMapping().getForeignKey());\n+    }\n+\n+    public void testEmbeddedOverride() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"embed\");\n+        assertTrue(fm.isEmbedded());\n+        assertEquals(1, fm.getColumns().length);\n+        assertTrue(\"UUID_HEX\".equalsIgnoreCase(fm.getColumns()[0].\n+            getName()));\n+\n+        ClassMapping embed = fm.getEmbeddedMapping();\n+        fm = embed.getFieldMapping(\"rel\");\n+        assertEquals(1, fm.getColumns().length);\n+        assertEquals(\"EM_REL_ID\", fm.getColumns()[0].getName());\n+        fm = embed.getFieldMapping(\"eager\");\n+        assertEquals(\"EM_EAGER\", fm.getTable().getName());\n+        assertEquals(1, fm.getElementMapping().getColumns().length);\n+        assertEquals(\"ELEM_EAGER_ID\", fm.getElementMapping().getColumns()[0].\n+            getName());\n+    }\n+\n+    public void testEmbeddedElementOverride() {\n+        FieldMapping fm = _mapping.getFieldMapping(\"embedCollection\");\n+        assertTrue(fm.getElement().isEmbedded());\n+        assertEquals(\"EMBED_COLL\", fm.getTable().getName());\n+        assertEquals(0, fm.getElementMapping().getColumns().length);\n+\n+        ClassMapping embed = fm.getElementMapping().getEmbeddedMapping();\n+        fm = embed.getFieldMapping(\"basic\");\n+        assertEquals(1, fm.getColumns().length);\n+        assertEquals(\"EM_BASIC\", fm.getColumns()[0].getName());\n+    }\n+\n+    public void testInsertAndRetrieve() {\n+        NonstandardMappingEntity pc = new NonstandardMappingEntity();\n+        pc.getSuperCollection().add(\"super\");\n+        pc.setCustom(new Point(1, 2));\n+        pc.getStringCollection().add(\"string\");\n+        NonstandardMappingEntity pc2 = new NonstandardMappingEntity();\n+        pc.getJoinCollection().add(pc2);\n+        pc.getStringMap().put(\"stringKey\", \"stringValue\");\n+        NonstandardMappingEntity pc3 = new NonstandardMappingEntity();\n+        pc.getJoinMap().put(pc2, pc3);\n+        ExtensionsEntity embed = new ExtensionsEntity();\n+        embed.setExternalValues('M');\n+        embed.setExternalizer(String.class);\n+        pc.setEmbed(embed);\n+        EmbedValue2 embed2 = new EmbedValue2();\n+        embed2.setBasic(\"basic\");\n+        pc.getEmbedCollection().add(embed2);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persistAll(new Object[]{ pc, pc2, pc3 });\n+        em.getTransaction().commit();\n+        Object pcId = em.getObjectId(pc);\n+        Object pc2Id = em.getObjectId(pc2);\n+        Object pc3Id = em.getObjectId(pc3);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(NonstandardMappingEntity.class, pcId);\n+        assertEquals(1, pc.getSuperCollection().size());\n+        assertEquals(\"super\", pc.getSuperCollection().get(0));\n+        assertEquals(1, pc.getCustom().x);\n+        assertEquals(2, pc.getCustom().y);\n+        assertEquals(1, pc.getStringCollection().size());\n+        assertEquals(\"string\", pc.getStringCollection().get(0));\n+        assertEquals(1, pc.getJoinCollection().size());\n+        assertEquals(pc2Id, em.getObjectId(pc.getJoinCollection().get(0)));\n+        assertEquals(1, pc.getStringMap().size());\n+        assertEquals(\"stringValue\", pc.getStringMap().get(\"stringKey\"));\n+        assertEquals(1, pc.getJoinMap().size());\n+        Map.Entry entry = pc.getJoinMap().entrySet().iterator().next();\n+        assertEquals(pc2Id, em.getObjectId(entry.getKey()));\n+        assertEquals(pc3Id, em.getObjectId(entry.getValue()));\n+        assertEquals('M', pc.getEmbed().getExternalValues());\n+        assertEquals(String.class, pc.getEmbed().getExternalizer());\n+        assertEquals(1, pc.getEmbedCollection().size());\n+        assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\n+        em.close();\n+    }\n+\n+    public void testInsertAndRetrieveEmbeddedCollection() {\n+        NonstandardMappingEntity pc = new NonstandardMappingEntity();\n+        EmbedValue2 embed2 = new EmbedValue2();\n+        embed2.setBasic(\"basic\");\n+        pc.getEmbedCollection().add(embed2);\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        Object pcId = em.getObjectId(pc);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(NonstandardMappingEntity.class, pcId);\n+        assertEquals(1, pc.getEmbedCollection().size());\n+        assertEquals(\"basic\", pc.getEmbedCollection().get(0).getBasic());\n+        em.close();\n+    }\n+}"},{"sha":"c2e4dadf7addda8fd5f2679de9ae62b0c7cbbcec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToMany.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,102 +1,102 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.util.Collection;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for 1-m\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestOneToMany\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testOneToMany() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(5);\r\n-        pc.getOneMany().add(new AnnoTest2(15, \"foo\"));\r\n-        pc.getOneMany().add(new AnnoTest2(20, \"foobar\"));\r\n-        em.persist(pc);\r\n-        em.persistAll(pc.getOneMany());\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        Collection<AnnoTest2> many = pc.getOneMany();\r\n-        assertEquals(2, many.size());\r\n-        for (AnnoTest2 pc2 : many) {\r\n-            switch ((int) pc2.getPk1()) {\r\n-                case 15:\r\n-                    assertEquals(\"foo\", pc2.getPk2());\r\n-                    break;\r\n-                case 20:\r\n-                    assertEquals(\"foobar\", pc2.getPk2());\r\n-                    break;\r\n-                default:\r\n-                    fail(\"unknown element:\" + pc2.getPk1());\r\n-            }\r\n-        }\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testInverseOwnerOneToMany() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(5);\r\n-        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n-        pc.getInverseOwnerOneMany().add(pc2);\r\n-        pc2.setOneManyOwner(pc);\r\n-        pc2 = new AnnoTest2(20, \"foobar\");\r\n-        pc.getInverseOwnerOneMany().add(pc2);\r\n-        pc2.setOneManyOwner(pc);\r\n-        em.persist(pc);\r\n-        em.persistAll(pc.getInverseOwnerOneMany());\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        Collection<AnnoTest2> many = pc.getInverseOwnerOneMany();\r\n-        assertEquals(2, many.size());\r\n-        for (AnnoTest2 pc3 : many) {\r\n-            assertEquals(pc, pc3.getOneManyOwner());\r\n-            switch ((int) pc3.getPk1()) {\r\n-                case 15:\r\n-                    assertEquals(\"foo\", pc3.getPk2());\r\n-                    break;\r\n-                case 20:\r\n-                    assertEquals(\"foobar\", pc3.getPk2());\r\n-                    break;\r\n-                default:\r\n-                    fail(\"unknown element:\" + pc3.getPk1());\r\n-            }\r\n-        }\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.util.Collection;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for 1-m\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestOneToMany\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\n+    }\n+\n+    public void testOneToMany() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(5);\n+        pc.getOneMany().add(new AnnoTest2(15, \"foo\"));\n+        pc.getOneMany().add(new AnnoTest2(20, \"foobar\"));\n+        em.persist(pc);\n+        em.persistAll(pc.getOneMany());\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        Collection<AnnoTest2> many = pc.getOneMany();\n+        assertEquals(2, many.size());\n+        for (AnnoTest2 pc2 : many) {\n+            switch ((int) pc2.getPk1()) {\n+                case 15:\n+                    assertEquals(\"foo\", pc2.getPk2());\n+                    break;\n+                case 20:\n+                    assertEquals(\"foobar\", pc2.getPk2());\n+                    break;\n+                default:\n+                    fail(\"unknown element:\" + pc2.getPk1());\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public void testInverseOwnerOneToMany() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(5);\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\n+        pc.getInverseOwnerOneMany().add(pc2);\n+        pc2.setOneManyOwner(pc);\n+        pc2 = new AnnoTest2(20, \"foobar\");\n+        pc.getInverseOwnerOneMany().add(pc2);\n+        pc2.setOneManyOwner(pc);\n+        em.persist(pc);\n+        em.persistAll(pc.getInverseOwnerOneMany());\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        Collection<AnnoTest2> many = pc.getInverseOwnerOneMany();\n+        assertEquals(2, many.size());\n+        for (AnnoTest2 pc3 : many) {\n+            assertEquals(pc, pc3.getOneManyOwner());\n+            switch ((int) pc3.getPk1()) {\n+                case 15:\n+                    assertEquals(\"foo\", pc3.getPk2());\n+                    break;\n+                case 20:\n+                    assertEquals(\"foobar\", pc3.getPk2());\n+                    break;\n+                default:\n+                    fail(\"unknown element:\" + pc3.getPk1());\n+            }\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"89321aabc5b2f671e5553e21d6131698a73d4f7e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestOneToOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,135 +1,135 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for 1-1\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestOneToOne\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testOneToOne() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(5);\r\n-        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n-        pc.setOneOne(pc2);\r\n-        em.persist(pc);\r\n-        em.persist(pc2);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        pc2 = pc.getOneOne();\r\n-        assertNotNull(pc2);\r\n-        assertEquals(15, pc2.getPk1());\r\n-        assertEquals(\"foo\", pc2.getPk2());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testSelfOneToOne() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(5);\r\n-        AnnoTest1 pc2 = new AnnoTest1(15);\r\n-        pc.setSelfOneOne(pc2);\r\n-        em.persist(pc);\r\n-        em.persist(pc2);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        pc2 = pc.getSelfOneOne();\r\n-        assertNotNull(pc2);\r\n-        assertEquals(new Long(15), pc2.getPk());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPKJoinSelfOneToOne() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(5);\r\n-        AnnoTest1 pc2 = new AnnoTest1(15);\r\n-        pc.setSelfOneOne(pc2);\r\n-        em.persist(pc);\r\n-        em.persist(pc2);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        pc2 = pc.getSelfOneOne();\r\n-        assertNotNull(pc2);\r\n-        assertEquals(new Long(15), pc2.getPk());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOtherTableOneToOne() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(5);\r\n-        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n-        pc.setOtherTableOneOne(pc2);\r\n-        em.persist(pc);\r\n-        em.persist(pc2);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        pc2 = pc.getOtherTableOneOne();\r\n-        assertNotNull(pc2);\r\n-        assertEquals(15, pc2.getPk1());\r\n-        assertEquals(\"foo\", pc2.getPk2());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testInverseOneToOne() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc = new AnnoTest1(5);\r\n-        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\r\n-        pc2.setInverseOneOne(pc);\r\n-        em.persist(pc);\r\n-        em.persist(pc2);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        pc2 = pc.getInverseOwnerOneOne();\r\n-        assertNotNull(pc2);\r\n-        assertEquals(15, pc2.getPk1());\r\n-        assertEquals(\"foo\", pc2.getPk2());\r\n-        assertEquals(pc, pc2.getInverseOneOne());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for 1-1\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestOneToOne\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\n+    }\n+\n+    public void testOneToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(5);\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\n+        pc.setOneOne(pc2);\n+        em.persist(pc);\n+        em.persist(pc2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        pc2 = pc.getOneOne();\n+        assertNotNull(pc2);\n+        assertEquals(15, pc2.getPk1());\n+        assertEquals(\"foo\", pc2.getPk2());\n+        em.close();\n+    }\n+\n+    public void testSelfOneToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(5);\n+        AnnoTest1 pc2 = new AnnoTest1(15);\n+        pc.setSelfOneOne(pc2);\n+        em.persist(pc);\n+        em.persist(pc2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        pc2 = pc.getSelfOneOne();\n+        assertNotNull(pc2);\n+        assertEquals(new Long(15), pc2.getPk());\n+        em.close();\n+    }\n+\n+    public void testPKJoinSelfOneToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(5);\n+        AnnoTest1 pc2 = new AnnoTest1(15);\n+        pc.setSelfOneOne(pc2);\n+        em.persist(pc);\n+        em.persist(pc2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        pc2 = pc.getSelfOneOne();\n+        assertNotNull(pc2);\n+        assertEquals(new Long(15), pc2.getPk());\n+        em.close();\n+    }\n+\n+    public void testOtherTableOneToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(5);\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\n+        pc.setOtherTableOneOne(pc2);\n+        em.persist(pc);\n+        em.persist(pc2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        pc2 = pc.getOtherTableOneOne();\n+        assertNotNull(pc2);\n+        assertEquals(15, pc2.getPk1());\n+        assertEquals(\"foo\", pc2.getPk2());\n+        em.close();\n+    }\n+\n+    public void testInverseOneToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc = new AnnoTest1(5);\n+        AnnoTest2 pc2 = new AnnoTest2(15, \"foo\");\n+        pc2.setInverseOneOne(pc);\n+        em.persist(pc);\n+        em.persist(pc2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        pc2 = pc.getInverseOwnerOneOne();\n+        assertNotNull(pc2);\n+        assertEquals(15, pc2.getPk1());\n+        assertEquals(\"foo\", pc2.getPk2());\n+        assertEquals(pc, pc2.getInverseOneOne());\n+        em.close();\n+    }\n+}"},{"sha":"44b9c6cd448b265c952f8087e1973c8056fd8d08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestPropertyAccess.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestPropertyAccess\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(PropertyAccess1.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testPropertyAccessBasicCreation() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n-        pa1_1.setName(\"foo\");\r\n-        em.persist(pa1_1);\r\n-        em.getTransaction().commit();\r\n-\r\n-        // getting a new EM should not be necessary once the extended PC stuff\r\n-        // is complete.\r\n-        em = emf.createEntityManager();\r\n-\r\n-        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n-        assertNotSame(pa1_1, pa1_2);\r\n-        assertNotNull(pa1_2);\r\n-        assertEquals(10, pa1_2.getId());\r\n-        assertEquals(\"foo\", pa1_2.getName());\r\n-    }\r\n-\r\n-    public void testPropertyAccessBasicMutation() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\r\n-        pa1_1.setName(\"foo\");\r\n-        em.persist(pa1_1);\r\n-        em.getTransaction().commit();\r\n-\r\n-        // getting a new EM should not be necessary once the extended PC stuff\r\n-        // is complete.\r\n-        em = emf.createEntityManager();\r\n-\r\n-        em.getTransaction().begin();\r\n-        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\r\n-        pa1_2.setName(pa1_2.getName() + \"bar\");\r\n-        em.getTransaction().commit();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        PropertyAccess1 pa1_3 = em.find(PropertyAccess1.class, 10);\r\n-        assertNotSame(pa1_2, pa1_3);\r\n-        assertEquals(\"foobar\", pa1_3.getName());\r\n-    }\r\n-\r\n-    public void testJPQL() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n-            \"o.name = 'foo'\").getResultList();\r\n-        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n-            \"o.name asc\").getResultList();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testJPQLWithFieldNameMismatch() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.createQuery(\"select o from PropertyAccess1 o where \" +\r\n-            \"o.intValue = 0\").getResultList();\r\n-        em.createQuery(\"select o from PropertyAccess1 o order by \" +\r\n-            \"o.intValue asc\").getResultList();\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestPropertyAccess\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(PropertyAccess1.class, CLEAR_TABLES);\n+    }\n+\n+    public void testPropertyAccessBasicCreation() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\n+        pa1_1.setName(\"foo\");\n+        em.persist(pa1_1);\n+        em.getTransaction().commit();\n+\n+        // getting a new EM should not be necessary once the extended PC stuff\n+        // is complete.\n+        em = emf.createEntityManager();\n+\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\n+        assertNotSame(pa1_1, pa1_2);\n+        assertNotNull(pa1_2);\n+        assertEquals(10, pa1_2.getId());\n+        assertEquals(\"foo\", pa1_2.getName());\n+    }\n+\n+    public void testPropertyAccessBasicMutation() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        PropertyAccess1 pa1_1 = new PropertyAccess1(10);\n+        pa1_1.setName(\"foo\");\n+        em.persist(pa1_1);\n+        em.getTransaction().commit();\n+\n+        // getting a new EM should not be necessary once the extended PC stuff\n+        // is complete.\n+        em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        PropertyAccess1 pa1_2 = em.find(PropertyAccess1.class, 10);\n+        pa1_2.setName(pa1_2.getName() + \"bar\");\n+        em.getTransaction().commit();\n+\n+        em = emf.createEntityManager();\n+        PropertyAccess1 pa1_3 = em.find(PropertyAccess1.class, 10);\n+        assertNotSame(pa1_2, pa1_3);\n+        assertEquals(\"foobar\", pa1_3.getName());\n+    }\n+\n+    public void testJPQL() {\n+        EntityManager em = emf.createEntityManager();\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\n+            \"o.name = 'foo'\").getResultList();\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\n+            \"o.name asc\").getResultList();\n+        em.close();\n+    }\n+\n+    public void testJPQLWithFieldNameMismatch() {\n+        EntityManager em = emf.createEntityManager();\n+        em.createQuery(\"select o from PropertyAccess1 o where \" +\n+            \"o.intValue = 0\").getResultList();\n+        em.createQuery(\"select o from PropertyAccess1 o order by \" +\n+            \"o.intValue asc\").getResultList();\n+        em.close();\n+    }\n+}"},{"sha":"b515d3dacf653772aa7f71a155d37ecf4e89ce4e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestSerializedLobs.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,137 +1,137 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import java.sql.Blob;\r\n-import java.sql.Connection;\r\n-import java.sql.ResultSet;\r\n-import java.sql.SQLException;\r\n-import java.sql.Statement;\r\n-import java.util.Date;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for serialized, clob, and lob types.\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestSerializedLobs extends SingleEMFTestCase {\r\n-\r\n-    private static final Date DATE = new Date();\r\n-\r\n-    public void setUp() {\r\n-        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    // Serialized fields not being read properly\r\n-    public void testSerialized() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 pc1 = new AnnoTest1(1);\r\n-        AnnoTest1 pc2 = new AnnoTest1(2);\r\n-        pc1.setSerialized(\"ASDASD\");\r\n-        pc2.setSerialized(DATE);\r\n-        em.persist(pc1);\r\n-        em.persist(pc2);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc1 = em.find(AnnoTest1.class, new Long(1));\r\n-        pc2 = em.find(AnnoTest1.class, new Long(2));\r\n-        assertEquals(\"ASDASD\", pc1.getSerialized());\r\n-        assertEquals(DATE, pc2.getSerialized());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testBlob()\r\n-        throws Exception {\r\n-        OpenJPAEntityManagerSPI em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-\r\n-        AnnoTest1 pc = new AnnoTest1(1);\r\n-        pc.setBlob(\"Not Null\".getBytes());\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(1));\r\n-        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n-        Connection conn = (Connection) em.getConnection();\r\n-        Statement stmnt = conn.createStatement();\r\n-        ResultSet rs = stmnt.executeQuery(\"SELECT BLOBVAL FROM ANNOTEST1 \"\r\n-            + \"WHERE PK = 1\");\r\n-        assertTrue(rs.next());\r\n-\r\n-        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\r\n-        DBDictionary dict = conf.getDBDictionaryInstance();\r\n-        if (dict.useGetBytesForBlobs)\r\n-            rs.getBytes(1);\r\n-        else if (dict.useGetObjectForBlobs)\r\n-            rs.getObject(1);\r\n-        else {\r\n-            Blob blob = rs.getBlob(1);\r\n-            blob.getBytes(1L, (int) blob.length());\r\n-        }\r\n-        assertEquals(\"Not Null\", new String(pc.getBlob()));\r\n-\r\n-        try {\r\n-            rs.close();\r\n-        } catch (SQLException e) {\r\n-        }\r\n-        try {\r\n-            stmnt.close();\r\n-        } catch (SQLException e) {\r\n-        }\r\n-        try {\r\n-            conn.close();\r\n-        } catch (SQLException e) {\r\n-        }\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testClob()\r\n-        throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-\r\n-        AnnoTest1 pc = new AnnoTest1(1);\r\n-        StringBuffer buf = new StringBuffer();\r\n-        for (int i = 0; i < 1000; i++)\r\n-            buf.append((char) ('a' + (i % 24)));\r\n-        pc.setClob(buf.toString());\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(1));\r\n-        String str = pc.getClob();\r\n-        assertEquals(1000, str.length());\r\n-        for (int i = 0; i < str.length(); i++)\r\n-            assertEquals('a' + (i % 24), str.charAt(i));\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import java.sql.Blob;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Date;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for serialized, clob, and lob types.\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestSerializedLobs extends SingleEMFTestCase {\n+\n+    private static final Date DATE = new Date();\n+\n+    public void setUp() {\n+        setUp(AnnoTest1.class, AnnoTest2.class, Flat1.class, CLEAR_TABLES);\n+    }\n+\n+    // Serialized fields not being read properly\n+    public void testSerialized() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 pc1 = new AnnoTest1(1);\n+        AnnoTest1 pc2 = new AnnoTest1(2);\n+        pc1.setSerialized(\"ASDASD\");\n+        pc2.setSerialized(DATE);\n+        em.persist(pc1);\n+        em.persist(pc2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc1 = em.find(AnnoTest1.class, new Long(1));\n+        pc2 = em.find(AnnoTest1.class, new Long(2));\n+        assertEquals(\"ASDASD\", pc1.getSerialized());\n+        assertEquals(DATE, pc2.getSerialized());\n+        em.close();\n+    }\n+\n+    public void testBlob()\n+        throws Exception {\n+        OpenJPAEntityManagerSPI em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        AnnoTest1 pc = new AnnoTest1(1);\n+        pc.setBlob(\"Not Null\".getBytes());\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(1));\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\n+        Connection conn = (Connection) em.getConnection();\n+        Statement stmnt = conn.createStatement();\n+        ResultSet rs = stmnt.executeQuery(\"SELECT BLOBVAL FROM ANNOTEST1 \"\n+            + \"WHERE PK = 1\");\n+        assertTrue(rs.next());\n+\n+        JDBCConfiguration conf = (JDBCConfiguration) em.getConfiguration();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        if (dict.useGetBytesForBlobs)\n+            rs.getBytes(1);\n+        else if (dict.useGetObjectForBlobs)\n+            rs.getObject(1);\n+        else {\n+            Blob blob = rs.getBlob(1);\n+            blob.getBytes(1L, (int) blob.length());\n+        }\n+        assertEquals(\"Not Null\", new String(pc.getBlob()));\n+\n+        try {\n+            rs.close();\n+        } catch (SQLException e) {\n+        }\n+        try {\n+            stmnt.close();\n+        } catch (SQLException e) {\n+        }\n+        try {\n+            conn.close();\n+        } catch (SQLException e) {\n+        }\n+        em.close();\n+    }\n+\n+    public void testClob()\n+        throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        AnnoTest1 pc = new AnnoTest1(1);\n+        StringBuffer buf = new StringBuffer();\n+        for (int i = 0; i < 1000; i++)\n+            buf.append((char) ('a' + (i % 24)));\n+        pc.setClob(buf.toString());\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(1));\n+        String str = pc.getClob();\n+        assertEquals(1000, str.length());\n+        for (int i = 0; i < str.length(); i++)\n+            assertEquals('a' + (i % 24), str.charAt(i));\n+        em.close();\n+    }\n+}"},{"sha":"d2bf954afc45e0660d8ef24215ff59292108607b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestTablePerClassInheritance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * <p>Test that InheritanceType.TABLE_PER_CLASS JPA mapping is translated\r\n- * correctly.  See the <code>kodo.jdbc.meta.tableperclass</code> test package\r\n- * for more detailed tests of functionality.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestTablePerClassInheritance\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(TablePerClass1.class, TablePerClass2.class, EmbedOwner.class,\r\n-            EmbedValue.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testMapping() {\r\n-        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration()).\r\n-            getMappingRepositoryInstance().getMapping(TablePerClass2.class,\r\n-            null, true);\r\n-        assertTrue(mapping.getStrategy() instanceof FullClassStrategy);\r\n-        assertTrue(mapping.getDiscriminator().getStrategy()\r\n-            instanceof NoneDiscriminatorStrategy);\r\n-        assertNull(mapping.getJoinForeignKey());\r\n-        assertNull(mapping.getJoinablePCSuperclassMapping());\r\n-        assertEquals(\"TPC_BASIC\", mapping.getFieldMapping(\"basic\").\r\n-            getColumns()[0].getName());\r\n-        ClassMapping embed = mapping.getFieldMapping(\"embed\").\r\n-            getEmbeddedMapping();\r\n-        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n-            getColumns()[0].getName());\r\n-\r\n-        ClassMapping sup = mapping.getPCSuperclassMapping();\r\n-        assertEquals(TablePerClass1.class, sup.getDescribedType());\r\n-        assertTrue(sup.getStrategy() instanceof FullClassStrategy);\r\n-        assertTrue(sup.getDiscriminator().getStrategy()\r\n-            instanceof NoneDiscriminatorStrategy);\r\n-        assertEquals(\"TPC_BASIC\", sup.getFieldMapping(\"basic\").\r\n-            getColumns()[0].getName());\r\n-        embed = sup.getFieldMapping(\"embed\").getEmbeddedMapping();\r\n-        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\r\n-            getColumns()[0].getName());\r\n-    }\r\n-\r\n-    public void testInsertAndRetrieve() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        TablePerClass1 tpc1 = new TablePerClass1();\r\n-        tpc1.setBasic(1);\r\n-        EmbedValue ev = new EmbedValue();\r\n-        ev.setBasic(\"11\");\r\n-        tpc1.setEmbed(ev);\r\n-        TablePerClass2 tpc2 = new TablePerClass2();\r\n-        tpc2.setBasic(2);\r\n-        tpc2.setBasic2(\"2\");\r\n-        ev = new EmbedValue();\r\n-        ev.setBasic(\"22\");\r\n-        tpc2.setEmbed(ev);\r\n-        em.persistAll(tpc1, tpc2);\r\n-        em.getTransaction().commit();\r\n-        int id1 = tpc1.getPk();\r\n-        int id2 = tpc2.getPk();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        tpc1 = em.find(TablePerClass1.class, id1);\r\n-        assertEquals(1, tpc1.getBasic());\r\n-        assertEquals(\"11\", tpc1.getEmbed().getBasic());\r\n-        tpc2 = (TablePerClass2) em.find(TablePerClass1.class, id2);\r\n-        assertEquals(2, tpc2.getBasic());\r\n-        assertEquals(\"2\", tpc2.getBasic2());\r\n-        assertEquals(\"22\", tpc2.getEmbed().getBasic());\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.FullClassStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.NoneDiscriminatorStrategy;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * <p>Test that InheritanceType.TABLE_PER_CLASS JPA mapping is translated\n+ * correctly.  See the <code>kodo.jdbc.meta.tableperclass</code> test package\n+ * for more detailed tests of functionality.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestTablePerClassInheritance\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(TablePerClass1.class, TablePerClass2.class, EmbedOwner.class,\n+            EmbedValue.class, CLEAR_TABLES);\n+    }\n+\n+    public void testMapping() {\n+        ClassMapping mapping = ((JDBCConfiguration) emf.getConfiguration()).\n+            getMappingRepositoryInstance().getMapping(TablePerClass2.class,\n+            null, true);\n+        assertTrue(mapping.getStrategy() instanceof FullClassStrategy);\n+        assertTrue(mapping.getDiscriminator().getStrategy()\n+            instanceof NoneDiscriminatorStrategy);\n+        assertNull(mapping.getJoinForeignKey());\n+        assertNull(mapping.getJoinablePCSuperclassMapping());\n+        assertEquals(\"TPC_BASIC\", mapping.getFieldMapping(\"basic\").\n+            getColumns()[0].getName());\n+        ClassMapping embed = mapping.getFieldMapping(\"embed\").\n+            getEmbeddedMapping();\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\n+            getColumns()[0].getName());\n+\n+        ClassMapping sup = mapping.getPCSuperclassMapping();\n+        assertEquals(TablePerClass1.class, sup.getDescribedType());\n+        assertTrue(sup.getStrategy() instanceof FullClassStrategy);\n+        assertTrue(sup.getDiscriminator().getStrategy()\n+            instanceof NoneDiscriminatorStrategy);\n+        assertEquals(\"TPC_BASIC\", sup.getFieldMapping(\"basic\").\n+            getColumns()[0].getName());\n+        embed = sup.getFieldMapping(\"embed\").getEmbeddedMapping();\n+        assertEquals(\"TPC_EMB_BASIC\", embed.getFieldMapping(\"basic\").\n+            getColumns()[0].getName());\n+    }\n+\n+    public void testInsertAndRetrieve() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        TablePerClass1 tpc1 = new TablePerClass1();\n+        tpc1.setBasic(1);\n+        EmbedValue ev = new EmbedValue();\n+        ev.setBasic(\"11\");\n+        tpc1.setEmbed(ev);\n+        TablePerClass2 tpc2 = new TablePerClass2();\n+        tpc2.setBasic(2);\n+        tpc2.setBasic2(\"2\");\n+        ev = new EmbedValue();\n+        ev.setBasic(\"22\");\n+        tpc2.setEmbed(ev);\n+        em.persistAll(tpc1, tpc2);\n+        em.getTransaction().commit();\n+        int id1 = tpc1.getPk();\n+        int id2 = tpc2.getPk();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        tpc1 = em.find(TablePerClass1.class, id1);\n+        assertEquals(1, tpc1.getBasic());\n+        assertEquals(\"11\", tpc1.getEmbed().getBasic());\n+        tpc2 = (TablePerClass2) em.find(TablePerClass1.class, id2);\n+        assertEquals(2, tpc2.getBasic());\n+        assertEquals(\"2\", tpc2.getBasic2());\n+        assertEquals(\"22\", tpc2.getEmbed().getBasic());\n+        em.close();\n+    }\n+}"},{"sha":"3106e02fa02cf35317b0427160cd14ede59e7ccf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","status":"modified","additions":195,"deletions":195,"changes":390,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestVersion.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,195 +1,195 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.NoneVersionStrategy;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Test for opt-lock\r\n- *\r\n- * @author Steve Kim\r\n- */\r\n-public class TestVersion extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\r\n-            EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AnnoTest1 test1 = new AnnoTest1();\r\n-        test1.setPk(new Long(5));\r\n-        test1.setBasic(50);\r\n-        test1.setTransient(500);\r\n-        em.persist(test1);\r\n-\r\n-        AnnoTest2 test2 = new AnnoTest2();\r\n-        test2.setPk1(5);\r\n-        test2.setPk2(\"bar\");\r\n-        test2.setBasic(\"50\");\r\n-        em.persist(test2);\r\n-\r\n-        AnnoTest3 test3 = new AnnoTest3();\r\n-        test3.setPk(new Long(3));\r\n-        test3.setBasic2(50);\r\n-        em.persist(test3);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testVersionNumeric() {\r\n-        EntityManager em1 = emf.createEntityManager();\r\n-        em1.getTransaction().begin();\r\n-        EntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-\r\n-        AnnoTest1 pc1 = em1.find(AnnoTest1.class, new Long(5));\r\n-        AnnoTest1 pc2 = em2.find(AnnoTest1.class, new Long(5));\r\n-        assertEquals(1, pc1.getVersion());\r\n-        assertEquals(1, pc2.getVersion());\r\n-        assertEquals(0, pc1.getTransient());\r\n-        pc1.setBasic(75);\r\n-        pc2.setBasic(75);\r\n-        em1.getTransaction().commit();\r\n-        em1.close();\r\n-\r\n-        em1 = emf.createEntityManager();\r\n-        pc1 = em1.find(AnnoTest1.class, new Long(5));\r\n-        assertEquals(2, pc1.getVersion());\r\n-        em1.close();\r\n-        try {\r\n-            em2.getTransaction().commit();\r\n-            fail(\"Optimistic fail\");\r\n-        } catch (Exception e) {\r\n-        } finally {\r\n-            em2.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testVersionTimestamp() {\r\n-        // ensure that some time has passed\r\n-        // since the records were created\r\n-        try {\r\n-            Thread.sleep(50);\r\n-        }\r\n-        catch (InterruptedException e) {\r\n-            // do nothing\r\n-        }\r\n-        \r\n-        EntityManager em1 = emf.createEntityManager();\r\n-        em1.getTransaction().begin();\r\n-        EntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-\r\n-        AnnoTest2 pc1 = em1.find(AnnoTest2.class,\r\n-            new AnnoTest2.Oid(5, \"bar\"));\r\n-        AnnoTest2 pc2 = em2.find(AnnoTest2.class,\r\n-            new AnnoTest2.Oid(5, \"bar\"));\r\n-        assertNotNull(pc1.getVersion());\r\n-        assertEquals(pc1.getVersion(), pc2.getVersion());\r\n-        pc1.setBasic(\"75\");\r\n-        pc2.setBasic(\"75\");\r\n-        em1.getTransaction().commit();\r\n-        em1.close();\r\n-\r\n-        em1 = emf.createEntityManager();\r\n-        pc1 = em1.find(AnnoTest2.class,\r\n-            new AnnoTest2.Oid(5, \"bar\"));\r\n-        java.util.Date pc1Version = pc1.getVersion();\r\n-        java.util.Date pc2Version = pc2.getVersion();\r\n-        assertTrue(pc1Version.compareTo(pc2Version) > 0);\r\n-        em1.close();\r\n-        try {\r\n-            em2.getTransaction().commit();\r\n-            fail(\"Optimistic fail\");\r\n-        } catch (Exception e) {\r\n-        } finally {\r\n-            em2.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testVersionSubclass() {\r\n-        EntityManager em1 = emf.createEntityManager();\r\n-        em1.getTransaction().begin();\r\n-        EntityManager em2 = emf.createEntityManager();\r\n-        em2.getTransaction().begin();\r\n-\r\n-        AnnoTest3 pc1 = em1.find(AnnoTest3.class, new Long(3));\r\n-        AnnoTest3 pc2 = em2.find(AnnoTest3.class, new Long(3));\r\n-        assertEquals(1, pc1.getVersion());\r\n-        assertEquals(1, pc2.getVersion());\r\n-        pc1.setBasic2(75);\r\n-        pc2.setBasic2(75);\r\n-        em1.getTransaction().commit();\r\n-        em1.close();\r\n-\r\n-        em1 = emf.createEntityManager();\r\n-        pc1 = em1.find(AnnoTest3.class, new Long(3));\r\n-        assertEquals(2, pc1.getVersion());\r\n-        em1.close();\r\n-        try {\r\n-            em2.getTransaction().commit();\r\n-            fail(\"Optimistic fail\");\r\n-        } catch (Exception e) {\r\n-        } finally {\r\n-            em2.close();\r\n-        }\r\n-    }\r\n-\r\n-    public void testVersionNoChange() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-\r\n-        AnnoTest1 pc = em.find(AnnoTest1.class, new Long(5));\r\n-        assertEquals(1, pc.getVersion());\r\n-        assertEquals(0, pc.getTransient());\r\n-        pc.setTransient(750);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(AnnoTest1.class, new Long(5));\r\n-        assertEquals(1, pc.getVersion());\r\n-        assertEquals(0, pc.getTransient());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testNoDefaultVersionWithoutFieldOrColumn() {\r\n-        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n-            getMappingRepositoryInstance().getMapping(EmbedOwner.class, \r\n-            null, true);\r\n-        assertEquals(NoneVersionStrategy.getInstance(),\r\n-            cls.getVersion().getStrategy());\r\n-        assertEquals(0, cls.getVersion().getColumns().length);\r\n-    }\r\n-\r\n-    public void testVersionWithField() {\r\n-        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\r\n-            getMappingRepositoryInstance().getMapping(AnnoTest1.class, \r\n-            null, true);\r\n-        assertTrue(NoneVersionStrategy.getInstance() !=\r\n-            cls.getVersion().getStrategy());\r\n-        assertEquals(1, cls.getVersion().getColumns().length);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.NoneVersionStrategy;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test for opt-lock\n+ *\n+ * @author Steve Kim\n+ */\n+public class TestVersion extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AnnoTest1.class, AnnoTest2.class, AnnoTest3.class, Flat1.class,\n+            EmbedOwner.class, EmbedValue.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AnnoTest1 test1 = new AnnoTest1();\n+        test1.setPk(new Long(5));\n+        test1.setBasic(50);\n+        test1.setTransient(500);\n+        em.persist(test1);\n+\n+        AnnoTest2 test2 = new AnnoTest2();\n+        test2.setPk1(5);\n+        test2.setPk2(\"bar\");\n+        test2.setBasic(\"50\");\n+        em.persist(test2);\n+\n+        AnnoTest3 test3 = new AnnoTest3();\n+        test3.setPk(new Long(3));\n+        test3.setBasic2(50);\n+        em.persist(test3);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testVersionNumeric() {\n+        EntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+\n+        AnnoTest1 pc1 = em1.find(AnnoTest1.class, new Long(5));\n+        AnnoTest1 pc2 = em2.find(AnnoTest1.class, new Long(5));\n+        assertEquals(1, pc1.getVersion());\n+        assertEquals(1, pc2.getVersion());\n+        assertEquals(0, pc1.getTransient());\n+        pc1.setBasic(75);\n+        pc2.setBasic(75);\n+        em1.getTransaction().commit();\n+        em1.close();\n+\n+        em1 = emf.createEntityManager();\n+        pc1 = em1.find(AnnoTest1.class, new Long(5));\n+        assertEquals(2, pc1.getVersion());\n+        em1.close();\n+        try {\n+            em2.getTransaction().commit();\n+            fail(\"Optimistic fail\");\n+        } catch (Exception e) {\n+        } finally {\n+            em2.close();\n+        }\n+    }\n+\n+    public void testVersionTimestamp() {\n+        // ensure that some time has passed\n+        // since the records were created\n+        try {\n+            Thread.sleep(50);\n+        }\n+        catch (InterruptedException e) {\n+            // do nothing\n+        }\n+        \n+        EntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+\n+        AnnoTest2 pc1 = em1.find(AnnoTest2.class,\n+            new AnnoTest2.Oid(5, \"bar\"));\n+        AnnoTest2 pc2 = em2.find(AnnoTest2.class,\n+            new AnnoTest2.Oid(5, \"bar\"));\n+        assertNotNull(pc1.getVersion());\n+        assertEquals(pc1.getVersion(), pc2.getVersion());\n+        pc1.setBasic(\"75\");\n+        pc2.setBasic(\"75\");\n+        em1.getTransaction().commit();\n+        em1.close();\n+\n+        em1 = emf.createEntityManager();\n+        pc1 = em1.find(AnnoTest2.class,\n+            new AnnoTest2.Oid(5, \"bar\"));\n+        java.util.Date pc1Version = pc1.getVersion();\n+        java.util.Date pc2Version = pc2.getVersion();\n+        assertTrue(pc1Version.compareTo(pc2Version) > 0);\n+        em1.close();\n+        try {\n+            em2.getTransaction().commit();\n+            fail(\"Optimistic fail\");\n+        } catch (Exception e) {\n+        } finally {\n+            em2.close();\n+        }\n+    }\n+\n+    public void testVersionSubclass() {\n+        EntityManager em1 = emf.createEntityManager();\n+        em1.getTransaction().begin();\n+        EntityManager em2 = emf.createEntityManager();\n+        em2.getTransaction().begin();\n+\n+        AnnoTest3 pc1 = em1.find(AnnoTest3.class, new Long(3));\n+        AnnoTest3 pc2 = em2.find(AnnoTest3.class, new Long(3));\n+        assertEquals(1, pc1.getVersion());\n+        assertEquals(1, pc2.getVersion());\n+        pc1.setBasic2(75);\n+        pc2.setBasic2(75);\n+        em1.getTransaction().commit();\n+        em1.close();\n+\n+        em1 = emf.createEntityManager();\n+        pc1 = em1.find(AnnoTest3.class, new Long(3));\n+        assertEquals(2, pc1.getVersion());\n+        em1.close();\n+        try {\n+            em2.getTransaction().commit();\n+            fail(\"Optimistic fail\");\n+        } catch (Exception e) {\n+        } finally {\n+            em2.close();\n+        }\n+    }\n+\n+    public void testVersionNoChange() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        AnnoTest1 pc = em.find(AnnoTest1.class, new Long(5));\n+        assertEquals(1, pc.getVersion());\n+        assertEquals(0, pc.getTransient());\n+        pc.setTransient(750);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(AnnoTest1.class, new Long(5));\n+        assertEquals(1, pc.getVersion());\n+        assertEquals(0, pc.getTransient());\n+        em.close();\n+    }\n+\n+    public void testNoDefaultVersionWithoutFieldOrColumn() {\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\n+            getMappingRepositoryInstance().getMapping(EmbedOwner.class, \n+            null, true);\n+        assertEquals(NoneVersionStrategy.getInstance(),\n+            cls.getVersion().getStrategy());\n+        assertEquals(0, cls.getVersion().getColumns().length);\n+    }\n+\n+    public void testVersionWithField() {\n+        ClassMapping cls = ((JDBCConfiguration) emf.getConfiguration()).\n+            getMappingRepositoryInstance().getMapping(AnnoTest1.class, \n+            null, true);\n+        assertTrue(NoneVersionStrategy.getInstance() !=\n+            cls.getVersion().getStrategy());\n+        assertEquals(1, cls.getVersion().getColumns().length);\n+    }\n+}"},{"sha":"35bb2895ca6d124aeb981d85568b1a3601eed78b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedInappropriateTransient.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,34 +1,34 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Transient;\r\n-import javax.persistence.PrePersist;\r\n-\r\n-@Entity\r\n-public class UnenhancedInappropriateTransient {\r\n-\r\n-    @Id private int id;\r\n-\r\n-    @Transient @PrePersist public void prePersist() {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Transient;\n+import javax.persistence.PrePersist;\n+\n+@Entity\n+public class UnenhancedInappropriateTransient {\n+\n+    @Id private int id;\n+\n+    @Transient @PrePersist public void prePersist() {\n+        throw new UnsupportedOperationException();\n+    }\n }\n\\ No newline at end of file"},{"sha":"b0b71c1b44cca8cef35d9ba20a42c8355cb8e098","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/UnenhancedMixedAccess.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,37 +1,37 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.annotations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Transient;\r\n-\r\n-@Entity\r\n-public class UnenhancedMixedAccess {\r\n-\r\n-    @Id private int id;\r\n-\r\n-    @Transient public String getStringField() {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public void setStringField(String str) {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.annotations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Transient;\n+\n+@Entity\n+public class UnenhancedMixedAccess {\n+\n+    @Id private int id;\n+\n+    @Transient public String getStringField() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void setStringField(String str) {\n+        throw new UnsupportedOperationException();\n+    }\n+}"},{"sha":"22f627d677f78b6d82b56fc3f41530406309f619","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,118 +1,118 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import java.util.*;\r\n-import java.io.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-@Entity\r\n-\r\n-\r\n-public class AttachA\r\n-    implements Serializable, PreDetachCallback,\r\n-    PostDetachCallback, PreAttachCallback, PostAttachCallback {\r\n-\r\n-    // transient method for testing callbacks\r\n-    public transient Object detachSource = null;\r\n-    public transient Object attachSource = null;\r\n-    public transient int preAttachCalls = 0;\r\n-    public transient int postAttachCalls = 0;\r\n-    public transient int preDetachCalls = 0;\r\n-    public transient int postDetachCalls = 0;\r\n-\r\n-    private String astr;\r\n-    private int aint;\r\n-    private double adbl;\r\n-    private String [] stringArray = new String [0];\r\n-    private AttachE [] attachEArray = new AttachE [0];\r\n-\r\n-    public void jdoPreDetach() {\r\n-        preDetachCalls++;\r\n-    }\r\n-\r\n-    public void jdoPostDetach(Object orig) {\r\n-        postDetachCalls++;\r\n-        detachSource = orig;\r\n-    }\r\n-\r\n-    public void jdoPreAttach() {\r\n-        preAttachCalls++;\r\n-    }\r\n-\r\n-    public void jdoPostAttach(Object orig) {\r\n-        postAttachCalls++;\r\n-        attachSource = orig;\r\n-    }\r\n-\r\n-    public void setAstr(String astr) {\r\n-        this.astr = astr;\r\n-    }\r\n-\r\n-    public String getAstr() {\r\n-        return this.astr;\r\n-    }\r\n-\r\n-    public void setAint(int aint) {\r\n-        this.aint = aint;\r\n-    }\r\n-\r\n-    public int getAint() {\r\n-        return this.aint;\r\n-    }\r\n-\r\n-    public void setAdbl(double adbl) {\r\n-        this.adbl = adbl;\r\n-    }\r\n-\r\n-    public double getAdbl() {\r\n-        return this.adbl;\r\n-    }\r\n-\r\n-    public void setStringArray(String [] stringArray) {\r\n-        this.stringArray = stringArray;\r\n-    }\r\n-\r\n-    public String [] getStringArray() {\r\n-        return this.stringArray;\r\n-    }\r\n-\r\n-    public void setAttachEArray(AttachE [] attachEArray) {\r\n-        this.attachEArray = attachEArray;\r\n-    }\r\n-\r\n-    public AttachE [] getAttachEArray() {\r\n-        return this.attachEArray;\r\n-    }\r\n-\r\n-    private void writeObject(ObjectOutputStream out)\r\n-        throws IOException {\r\n-        out.defaultWriteObject();\r\n-    }\r\n-\r\n-    private void readObject(ObjectInputStream in)\r\n-        throws IOException, ClassNotFoundException {\r\n-        in.defaultReadObject();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+@Entity\n+\n+\n+public class AttachA\n+    implements Serializable, PreDetachCallback,\n+    PostDetachCallback, PreAttachCallback, PostAttachCallback {\n+\n+    // transient method for testing callbacks\n+    public transient Object detachSource = null;\n+    public transient Object attachSource = null;\n+    public transient int preAttachCalls = 0;\n+    public transient int postAttachCalls = 0;\n+    public transient int preDetachCalls = 0;\n+    public transient int postDetachCalls = 0;\n+\n+    private String astr;\n+    private int aint;\n+    private double adbl;\n+    private String [] stringArray = new String [0];\n+    private AttachE [] attachEArray = new AttachE [0];\n+\n+    public void jdoPreDetach() {\n+        preDetachCalls++;\n+    }\n+\n+    public void jdoPostDetach(Object orig) {\n+        postDetachCalls++;\n+        detachSource = orig;\n+    }\n+\n+    public void jdoPreAttach() {\n+        preAttachCalls++;\n+    }\n+\n+    public void jdoPostAttach(Object orig) {\n+        postAttachCalls++;\n+        attachSource = orig;\n+    }\n+\n+    public void setAstr(String astr) {\n+        this.astr = astr;\n+    }\n+\n+    public String getAstr() {\n+        return this.astr;\n+    }\n+\n+    public void setAint(int aint) {\n+        this.aint = aint;\n+    }\n+\n+    public int getAint() {\n+        return this.aint;\n+    }\n+\n+    public void setAdbl(double adbl) {\n+        this.adbl = adbl;\n+    }\n+\n+    public double getAdbl() {\n+        return this.adbl;\n+    }\n+\n+    public void setStringArray(String [] stringArray) {\n+        this.stringArray = stringArray;\n+    }\n+\n+    public String [] getStringArray() {\n+        return this.stringArray;\n+    }\n+\n+    public void setAttachEArray(AttachE [] attachEArray) {\n+        this.attachEArray = attachEArray;\n+    }\n+\n+    public AttachE [] getAttachEArray() {\n+        return this.attachEArray;\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.defaultWriteObject();\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+    }\n+}"},{"sha":"8ef39b6e2d09d5a9c8eacc2b76cba40822a05276","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,79 +1,79 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-@Entity\r\n-public class AttachB\r\n-    extends AttachA {\r\n-\r\n-    private String bstr;\r\n-    private int bint;\r\n-    private double bdbl;\r\n-    private Set ds = new HashSet();\r\n-    private Map stringIntMap = new TreeMap();\r\n-\r\n-    public void setBstr(String bstr) {\r\n-        this.bstr = bstr;\r\n-    }\r\n-\r\n-    public String getBstr() {\r\n-        return this.bstr;\r\n-    }\r\n-\r\n-    public void setBint(int bint) {\r\n-        this.bint = bint;\r\n-    }\r\n-\r\n-    public int getBint() {\r\n-        return this.bint;\r\n-    }\r\n-\r\n-    public void setBdbl(double bdbl) {\r\n-        this.bdbl = bdbl;\r\n-    }\r\n-\r\n-    public double getBdbl() {\r\n-        return this.bdbl;\r\n-    }\r\n-\r\n-    public void setDs(Set ds) {\r\n-        this.ds = ds;\r\n-    }\r\n-\r\n-    public Set getDs() {\r\n-        return this.ds;\r\n-    }\r\n-\r\n-    public void setStringIntMap(Map stringIntMap) {\r\n-        this.stringIntMap = stringIntMap;\r\n-    }\r\n-\r\n-    public Map getStringIntMap() {\r\n-        return this.stringIntMap;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+@Entity\n+public class AttachB\n+    extends AttachA {\n+\n+    private String bstr;\n+    private int bint;\n+    private double bdbl;\n+    private Set ds = new HashSet();\n+    private Map stringIntMap = new TreeMap();\n+\n+    public void setBstr(String bstr) {\n+        this.bstr = bstr;\n+    }\n+\n+    public String getBstr() {\n+        return this.bstr;\n+    }\n+\n+    public void setBint(int bint) {\n+        this.bint = bint;\n+    }\n+\n+    public int getBint() {\n+        return this.bint;\n+    }\n+\n+    public void setBdbl(double bdbl) {\n+        this.bdbl = bdbl;\n+    }\n+\n+    public double getBdbl() {\n+        return this.bdbl;\n+    }\n+\n+    public void setDs(Set ds) {\n+        this.ds = ds;\n+    }\n+\n+    public Set getDs() {\n+        return this.ds;\n+    }\n+\n+    public void setStringIntMap(Map stringIntMap) {\n+        this.stringIntMap = stringIntMap;\n+    }\n+\n+    public Map getStringIntMap() {\n+        return this.stringIntMap;\n+    }\n+}"},{"sha":"b0f0ad95baebf0c5bd9dbb7ccd8b1f6f10e66a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,70 +1,70 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import java.util.*;\r\n-import java.io.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-@Entity\r\n-public class AttachC\r\n-    extends AttachB {\r\n-\r\n-    private String cstr;\r\n-    private int cint;\r\n-    private double cdbl;\r\n-    private List es = new LinkedList(); // non-DFG\r\n-\r\n-    public void setCstr(String cstr) {\r\n-        this.cstr = cstr;\r\n-    }\r\n-\r\n-    public String getCstr() {\r\n-        return this.cstr;\r\n-    }\r\n-\r\n-    public void setCint(int cint) {\r\n-        this.cint = cint;\r\n-    }\r\n-\r\n-    public int getCint() {\r\n-        return this.cint;\r\n-    }\r\n-\r\n-    public void setCdbl(double cdbl) {\r\n-        this.cdbl = cdbl;\r\n-    }\r\n-\r\n-    public double getCdbl() {\r\n-        return this.cdbl;\r\n-    }\r\n-\r\n-    public void setEs(List es) {\r\n-        this.es = es;\r\n-    }\r\n-\r\n-    public List getEs() {\r\n-        return this.es;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+@Entity\n+public class AttachC\n+    extends AttachB {\n+\n+    private String cstr;\n+    private int cint;\n+    private double cdbl;\n+    private List es = new LinkedList(); // non-DFG\n+\n+    public void setCstr(String cstr) {\n+        this.cstr = cstr;\n+    }\n+\n+    public String getCstr() {\n+        return this.cstr;\n+    }\n+\n+    public void setCint(int cint) {\n+        this.cint = cint;\n+    }\n+\n+    public int getCint() {\n+        return this.cint;\n+    }\n+\n+    public void setCdbl(double cdbl) {\n+        this.cdbl = cdbl;\n+    }\n+\n+    public double getCdbl() {\n+        return this.cdbl;\n+    }\n+\n+    public void setEs(List es) {\n+        this.es = es;\n+    }\n+\n+    public List getEs() {\n+        return this.es;\n+    }\n+}"},{"sha":"2488521456a840bead8c11ef5a7381e3c825508e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,122 +1,122 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import java.util.*;\r\n-import java.io.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-@Entity\r\n-public class AttachD\r\n-    implements Serializable {\r\n-\r\n-    private Object version;\r\n-\r\n-    private String dstr;\r\n-    private int dint;\r\n-    private double ddbl;\r\n-    private AttachA a;\r\n-    private Set bs = new HashSet(); // DFG\r\n-    private Map pcStringMap = new HashMap();\r\n-    private TreeMap bigIntegerPCMap = new TreeMap();\r\n-\r\n-    private AttachE embeddedE;\r\n-    private AttachA embeddedA;\r\n-\r\n-    public void setDstr(String dstr) {\r\n-        this.dstr = dstr;\r\n-    }\r\n-\r\n-    public String getDstr() {\r\n-        return this.dstr;\r\n-    }\r\n-\r\n-    public void setDint(int dint) {\r\n-        this.dint = dint;\r\n-    }\r\n-\r\n-    public int getDint() {\r\n-        return this.dint;\r\n-    }\r\n-\r\n-    public void setDdbl(double ddbl) {\r\n-        this.ddbl = ddbl;\r\n-    }\r\n-\r\n-    public double getDdbl() {\r\n-        return this.ddbl;\r\n-    }\r\n-\r\n-    public AttachA getA() {\r\n-        return a;\r\n-    }\r\n-\r\n-    public void setA(AttachA a) {\r\n-        this.a = a;\r\n-    }\r\n-\r\n-    public void setBs(Set bs) {\r\n-        this.bs = bs;\r\n-    }\r\n-\r\n-    public Set getBs() {\r\n-        return this.bs;\r\n-    }\r\n-\r\n-    public void setPcStringMap(Map pcStringMap) {\r\n-        this.pcStringMap = pcStringMap;\r\n-    }\r\n-\r\n-    public Map getPcStringMap() {\r\n-        return this.pcStringMap;\r\n-    }\r\n-\r\n-    public void setBigIntegerPCMap(TreeMap bigIntegerPCMap) {\r\n-        this.bigIntegerPCMap = bigIntegerPCMap;\r\n-    }\r\n-\r\n-    public TreeMap getBigIntegerPCMap() {\r\n-        return this.bigIntegerPCMap;\r\n-    }\r\n-\r\n-    public void setEmbeddedE(AttachE embeddedE) {\r\n-        this.embeddedE = embeddedE;\r\n-    }\r\n-\r\n-    public AttachE getEmbeddedE() {\r\n-        return this.embeddedE;\r\n-    }\r\n-\r\n-    public void setEmbeddedA(AttachA embeddedA) {\r\n-        this.embeddedA = embeddedA;\r\n-    }\r\n-\r\n-    public AttachA getEmbeddedA() {\r\n-        return this.embeddedA;\r\n-    }\r\n-\r\n-    public Object getVersion() {\r\n-        return this.version;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+@Entity\n+public class AttachD\n+    implements Serializable {\n+\n+    private Object version;\n+\n+    private String dstr;\n+    private int dint;\n+    private double ddbl;\n+    private AttachA a;\n+    private Set bs = new HashSet(); // DFG\n+    private Map pcStringMap = new HashMap();\n+    private TreeMap bigIntegerPCMap = new TreeMap();\n+\n+    private AttachE embeddedE;\n+    private AttachA embeddedA;\n+\n+    public void setDstr(String dstr) {\n+        this.dstr = dstr;\n+    }\n+\n+    public String getDstr() {\n+        return this.dstr;\n+    }\n+\n+    public void setDint(int dint) {\n+        this.dint = dint;\n+    }\n+\n+    public int getDint() {\n+        return this.dint;\n+    }\n+\n+    public void setDdbl(double ddbl) {\n+        this.ddbl = ddbl;\n+    }\n+\n+    public double getDdbl() {\n+        return this.ddbl;\n+    }\n+\n+    public AttachA getA() {\n+        return a;\n+    }\n+\n+    public void setA(AttachA a) {\n+        this.a = a;\n+    }\n+\n+    public void setBs(Set bs) {\n+        this.bs = bs;\n+    }\n+\n+    public Set getBs() {\n+        return this.bs;\n+    }\n+\n+    public void setPcStringMap(Map pcStringMap) {\n+        this.pcStringMap = pcStringMap;\n+    }\n+\n+    public Map getPcStringMap() {\n+        return this.pcStringMap;\n+    }\n+\n+    public void setBigIntegerPCMap(TreeMap bigIntegerPCMap) {\n+        this.bigIntegerPCMap = bigIntegerPCMap;\n+    }\n+\n+    public TreeMap getBigIntegerPCMap() {\n+        return this.bigIntegerPCMap;\n+    }\n+\n+    public void setEmbeddedE(AttachE embeddedE) {\n+        this.embeddedE = embeddedE;\n+    }\n+\n+    public AttachE getEmbeddedE() {\n+        return this.embeddedE;\n+    }\n+\n+    public void setEmbeddedA(AttachA embeddedA) {\n+        this.embeddedA = embeddedA;\n+    }\n+\n+    public AttachA getEmbeddedA() {\n+        return this.embeddedA;\n+    }\n+\n+    public Object getVersion() {\n+        return this.version;\n+    }\n+}"},{"sha":"0263a59e3076ee80d0853ee73f6edae6128f1395","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,90 +1,90 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import java.util.*;\r\n-import java.io.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-@Entity\r\n-public class AttachE\r\n-    implements Serializable {\r\n-\r\n-    private Object version;\r\n-\r\n-    private String estr;\r\n-    private int eint;\r\n-    private double edbl;\r\n-    private AttachB b;\r\n-    private AttachF f;\r\n-    private Date date;\r\n-\r\n-    public void setEstr(String estr) {\r\n-        this.estr = estr;\r\n-    }\r\n-\r\n-    public String getEstr() {\r\n-        return this.estr;\r\n-    }\r\n-\r\n-    public void setEint(int eint) {\r\n-        this.eint = eint;\r\n-    }\r\n-\r\n-    public int getEint() {\r\n-        return this.eint;\r\n-    }\r\n-\r\n-    public void setEdbl(double edbl) {\r\n-        this.edbl = edbl;\r\n-    }\r\n-\r\n-    public double getEdbl() {\r\n-        return this.edbl;\r\n-    }\r\n-\r\n-    public void setB(AttachB b) {\r\n-        this.b = b;\r\n-    }\r\n-\r\n-    public AttachB getB() {\r\n-        return this.b;\r\n-    }\r\n-\r\n-    public void setF(AttachF f) {\r\n-        this.f = f;\r\n-    }\r\n-\r\n-    public AttachF getF() {\r\n-        return this.f;\r\n-    }\r\n-\r\n-    public void setDate(Date date) {\r\n-        this.date = date;\r\n-    }\r\n-\r\n-    public Date getDate() {\r\n-        return this.date;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+@Entity\n+public class AttachE\n+    implements Serializable {\n+\n+    private Object version;\n+\n+    private String estr;\n+    private int eint;\n+    private double edbl;\n+    private AttachB b;\n+    private AttachF f;\n+    private Date date;\n+\n+    public void setEstr(String estr) {\n+        this.estr = estr;\n+    }\n+\n+    public String getEstr() {\n+        return this.estr;\n+    }\n+\n+    public void setEint(int eint) {\n+        this.eint = eint;\n+    }\n+\n+    public int getEint() {\n+        return this.eint;\n+    }\n+\n+    public void setEdbl(double edbl) {\n+        this.edbl = edbl;\n+    }\n+\n+    public double getEdbl() {\n+        return this.edbl;\n+    }\n+\n+    public void setB(AttachB b) {\n+        this.b = b;\n+    }\n+\n+    public AttachB getB() {\n+        return this.b;\n+    }\n+\n+    public void setF(AttachF f) {\n+        this.f = f;\n+    }\n+\n+    public AttachF getF() {\n+        return this.f;\n+    }\n+\n+    public void setDate(Date date) {\n+        this.date = date;\n+    }\n+\n+    public Date getDate() {\n+        return this.date;\n+    }\n+}"},{"sha":"b17d31bb51fe9d57ca174e2c664ec4d716565ce9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","status":"modified","additions":139,"deletions":139,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AttachF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,139 +1,139 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-import java.util.*;\r\n-import java.io.*;\r\n-\r\n-\r\n-@Entity\r\n-public class AttachF\r\n-    implements Serializable {\r\n-\r\n-    private int id1;\r\n-    private String id2;\r\n-\r\n-    private String fstr;\r\n-    private int fint;\r\n-    private double fdbl;\r\n-    private AttachE e;\r\n-    private List strings = new ArrayList();\r\n-\r\n-    private AttachC embeddedC;\r\n-\r\n-    public void setFstr(String fstr) {\r\n-        this.fstr = fstr;\r\n-    }\r\n-\r\n-    public String getFstr() {\r\n-        return this.fstr;\r\n-    }\r\n-\r\n-    public void setFint(int fint) {\r\n-        this.fint = fint;\r\n-    }\r\n-\r\n-    public int getFint() {\r\n-        return this.fint;\r\n-    }\r\n-\r\n-    public void setFdbl(double fdbl) {\r\n-        this.fdbl = fdbl;\r\n-    }\r\n-\r\n-    public double getFdbl() {\r\n-        return this.fdbl;\r\n-    }\r\n-\r\n-    public void setE(AttachE e) {\r\n-        this.e = e;\r\n-    }\r\n-\r\n-    public AttachE getE() {\r\n-        return this.e;\r\n-    }\r\n-\r\n-    public void setStrings(List strings) {\r\n-        this.strings = strings;\r\n-    }\r\n-\r\n-    public List getStrings() {\r\n-        return this.strings;\r\n-    }\r\n-\r\n-    public static class ID {\r\n-\r\n-        public int id1;\r\n-        public String id2;\r\n-\r\n-        public ID() {\r\n-        }\r\n-\r\n-        public ID(String str) {\r\n-            StringTokenizer tok = new StringTokenizer(str, \":\");\r\n-            id1 = Integer.parseInt(tok.nextToken());\r\n-            id2 = tok.nextToken();\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return id1 + (id2 == null ? 0 : id2.hashCode());\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return id1 + \":\" + id2;\r\n-        }\r\n-\r\n-        public boolean equals(Object other) {\r\n-            return other instanceof ID\r\n-                && ((ID) other).id1 == id1\r\n-                && (id2 == null ? ((ID) other).id2 == null\r\n-                : id2.equals(((ID) other).id2));\r\n-        }\r\n-    }\r\n-\r\n-    public void setId1(int id1) {\r\n-        this.id1 = id1;\r\n-    }\r\n-\r\n-    public int getId1() {\r\n-        return this.id1;\r\n-    }\r\n-\r\n-    public void setId2(String id2) {\r\n-        this.id2 = id2;\r\n-    }\r\n-\r\n-    public String getId2() {\r\n-        return this.id2;\r\n-    }\r\n-\r\n-    public void setEmbeddedC(AttachC embeddedC) {\r\n-        this.embeddedC = embeddedC;\r\n-    }\r\n-\r\n-    public AttachC getEmbeddedC() {\r\n-        return this.embeddedC;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+\n+@Entity\n+public class AttachF\n+    implements Serializable {\n+\n+    private int id1;\n+    private String id2;\n+\n+    private String fstr;\n+    private int fint;\n+    private double fdbl;\n+    private AttachE e;\n+    private List strings = new ArrayList();\n+\n+    private AttachC embeddedC;\n+\n+    public void setFstr(String fstr) {\n+        this.fstr = fstr;\n+    }\n+\n+    public String getFstr() {\n+        return this.fstr;\n+    }\n+\n+    public void setFint(int fint) {\n+        this.fint = fint;\n+    }\n+\n+    public int getFint() {\n+        return this.fint;\n+    }\n+\n+    public void setFdbl(double fdbl) {\n+        this.fdbl = fdbl;\n+    }\n+\n+    public double getFdbl() {\n+        return this.fdbl;\n+    }\n+\n+    public void setE(AttachE e) {\n+        this.e = e;\n+    }\n+\n+    public AttachE getE() {\n+        return this.e;\n+    }\n+\n+    public void setStrings(List strings) {\n+        this.strings = strings;\n+    }\n+\n+    public List getStrings() {\n+        return this.strings;\n+    }\n+\n+    public static class ID {\n+\n+        public int id1;\n+        public String id2;\n+\n+        public ID() {\n+        }\n+\n+        public ID(String str) {\n+            StringTokenizer tok = new StringTokenizer(str, \":\");\n+            id1 = Integer.parseInt(tok.nextToken());\n+            id2 = tok.nextToken();\n+        }\n+\n+        public int hashCode() {\n+            return id1 + (id2 == null ? 0 : id2.hashCode());\n+        }\n+\n+        public String toString() {\n+            return id1 + \":\" + id2;\n+        }\n+\n+        public boolean equals(Object other) {\n+            return other instanceof ID\n+                && ((ID) other).id1 == id1\n+                && (id2 == null ? ((ID) other).id2 == null\n+                : id2.equals(((ID) other).id2));\n+        }\n+    }\n+\n+    public void setId1(int id1) {\n+        this.id1 = id1;\n+    }\n+\n+    public int getId1() {\n+        return this.id1;\n+    }\n+\n+    public void setId2(String id2) {\n+        this.id2 = id2;\n+    }\n+\n+    public String getId2() {\n+        return this.id2;\n+    }\n+\n+    public void setEmbeddedC(AttachC embeddedC) {\n+        this.embeddedC = embeddedC;\n+    }\n+\n+    public AttachC getEmbeddedC() {\n+        return this.embeddedC;\n+    }\n+}"},{"sha":"cdd9f38c76afca8336404bfa82ca1bb348ce25cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-\r\n-@Entity\r\n-public class AutoIncrementOpOrderPC {\r\n-\r\n-\t@Id\r\n-    private long id;\r\n-    private AutoIncrementOpOrderPC rel;\r\n-    private AutoIncrementOpOrderPC owner;\r\n-    private String secondary;\r\n-    private List relList = new ArrayList();\r\n-    private List mappedRelList = new ArrayList();\r\n-    private List inverseKeyRelList = new ArrayList();\r\n-\r\n-    public long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public OpOrder getRel() {\r\n-        return (OpOrder) rel;\r\n-    }\r\n-\r\n-    public void setRel(AutoIncrementOpOrderPC rel) {\r\n-        this.rel = rel;\r\n-    }\r\n-\r\n-    public OpOrder getOwner() {\r\n-        return (OpOrder) owner;\r\n-    }\r\n-\r\n-    public void setOwner(AutoIncrementOpOrderPC owner) {\r\n-        this.owner = owner;\r\n-    }\r\n-\r\n-    public String getSecondary() {\r\n-        return secondary;\r\n-    }\r\n-\r\n-    public void setSecondary(String secondary) {\r\n-        this.secondary = secondary;\r\n-    }\r\n-\r\n-    public List getRelList() {\r\n-        return relList;\r\n-    }\r\n-\r\n-    public List getMappedRelList() {\r\n-        return mappedRelList;\r\n-    }\r\n-\r\n-    public List getInverseKeyRelList() {\r\n-        return inverseKeyRelList;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+import java.util.*;\n+\n+\n+@Entity\n+public class AutoIncrementOpOrderPC {\n+\n+\t@Id\n+    private long id;\n+    private AutoIncrementOpOrderPC rel;\n+    private AutoIncrementOpOrderPC owner;\n+    private String secondary;\n+    private List relList = new ArrayList();\n+    private List mappedRelList = new ArrayList();\n+    private List inverseKeyRelList = new ArrayList();\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public OpOrder getRel() {\n+        return (OpOrder) rel;\n+    }\n+\n+    public void setRel(AutoIncrementOpOrderPC rel) {\n+        this.rel = rel;\n+    }\n+\n+    public OpOrder getOwner() {\n+        return (OpOrder) owner;\n+    }\n+\n+    public void setOwner(AutoIncrementOpOrderPC owner) {\n+        this.owner = owner;\n+    }\n+\n+    public String getSecondary() {\n+        return secondary;\n+    }\n+\n+    public void setSecondary(String secondary) {\n+        this.secondary = secondary;\n+    }\n+\n+    public List getRelList() {\n+        return relList;\n+    }\n+\n+    public List getMappedRelList() {\n+        return mappedRelList;\n+    }\n+\n+    public List getInverseKeyRelList() {\n+        return inverseKeyRelList;\n+    }\n+}"},{"sha":"d4ebd4d9eee4dabf451332e89b0a2e7166e61e27","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementOpOrderPCSub.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-import java.util.*;\r\n-\r\n-\r\n-@Entity\r\n-public class AutoIncrementOpOrderPCSub\r\n-    extends AutoIncrementOpOrderPC\r\n-    implements OpOrder {\r\n-\r\n-\t@Id\r\n-    private String sub;\r\n-\r\n-    public String getSub() {\r\n-        return sub;\r\n-    }\r\n-\r\n-    public void setSub(String sub) {\r\n-        this.sub = sub;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+\n+@Entity\n+public class AutoIncrementOpOrderPCSub\n+    extends AutoIncrementOpOrderPC\n+    implements OpOrder {\n+\n+\t@Id\n+    private String sub;\n+\n+    public String getSub() {\n+        return sub;\n+    }\n+\n+    public void setSub(String sub) {\n+        this.sub = sub;\n+    }\n+}"},{"sha":"125a35fee0f2398cc9527eb6ce84fe8288e2e8e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@Table(name=\"autoincpc1\")\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-public class AutoIncrementPC1\r\n-{\r\n-\r\n-\tprivate Set \t\t\t\tsetField \t= new HashSet ();\r\n-\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\t@Column(name=\"strngfld\", length=50)\r\n-\tprivate String\t\t\t\tstringField\t= null;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate AutoIncrementPC1\toneOne\t\t= null;\r\n-\r\n-\tpublic AutoIncrementPC1()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic AutoIncrementPC1(int key)\r\n-\t{\r\n-\t\tthis.id = key;\r\n-\t}\r\n-\r\n-\tpublic Set getSetField ()\r\n-\t{\r\n-\t\treturn this.setField;\r\n-\t}\r\n-\r\n-\tpublic void setSetField (Set setField)\r\n-\t{\r\n-\t\tthis.setField = setField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic AutoIncrementPC1 getOneOne ()\r\n-\t{\r\n-\t\treturn this.oneOne;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setOneOne (AutoIncrementPC1 oneOne)\r\n-\t{\r\n-\t\tthis.oneOne = oneOne;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import java.util.*;\n+import javax.persistence.*;\n+\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@Table(name=\"autoincpc1\")\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class AutoIncrementPC1\n+{\n+\n+\tprivate Set \t\t\t\tsetField \t= new HashSet ();\n+\n+\t@Id\n+\tprivate int id;\n+\n+\t@Column(name=\"strngfld\", length=50)\n+\tprivate String\t\t\t\tstringField\t= null;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate AutoIncrementPC1\toneOne\t\t= null;\n+\n+\tpublic AutoIncrementPC1()\n+\t{\n+\t}\n+\n+\tpublic AutoIncrementPC1(int key)\n+\t{\n+\t\tthis.id = key;\n+\t}\n+\n+\tpublic Set getSetField ()\n+\t{\n+\t\treturn this.setField;\n+\t}\n+\n+\tpublic void setSetField (Set setField)\n+\t{\n+\t\tthis.setField = setField;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\n+\tpublic AutoIncrementPC1 getOneOne ()\n+\t{\n+\t\treturn this.oneOne;\n+\t}\n+\n+\n+\tpublic void setOneOne (AutoIncrementPC1 oneOne)\n+\t{\n+\t\tthis.oneOne = oneOne;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+}"},{"sha":"8eb37bee2af200ef2e03b79e487a75741b9dd2dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@DiscriminatorValue(\"autoinc2\")\r\n-@Entity\r\n-public class AutoIncrementPC2 extends AutoIncrementPC1\r\n-{\r\n-\tprivate int intField = 0;\r\n-\r\n-\tpublic AutoIncrementPC2()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic AutoIncrementPC2(int id)\r\n-\t{\r\n-\t\tsuper(id);\r\n-\t}\r\n-\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn this.intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setIntField (int intField)\r\n-\t{\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@DiscriminatorValue(\"autoinc2\")\n+@Entity\n+public class AutoIncrementPC2 extends AutoIncrementPC1\n+{\n+\tprivate int intField = 0;\n+\n+\tpublic AutoIncrementPC2()\n+\t{\n+\t}\n+\n+\tpublic AutoIncrementPC2(int id)\n+\t{\n+\t\tsuper(id);\n+\t}\n+\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn this.intField;\n+\t}\n+\n+\n+\tpublic void setIntField (int intField)\n+\t{\n+\t\tthis.intField = intField;\n+\t}\n+}"},{"sha":"0b6aadf0b8f5ba28863f5cee6a191d1ecaccf01f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,104 +1,104 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@IdClass(AutoIncrementPC3Id.class)\r\n-@Entity\r\n-@Table(name=\"autoincpc3\")\r\n-public class AutoIncrementPC3\r\n-{\r\n-\t@Id\r\n-\tprivate long\t\t\t\tid\t\t\t= 0;\r\n-\tprivate Set \t\t\t\tsetField \t= new HashSet ();\r\n-\r\n-\t@Column(name=\"strngfld\", length=50)\r\n-\tprivate String\t\t\t\tstringField\t= null;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate AutoIncrementPC3\toneOne\t\t= null;\r\n-\r\n-\tpublic AutoIncrementPC3()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic AutoIncrementPC3(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\r\n-\tpublic long getId ()\r\n-\t{\r\n-\t\treturn this.id;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setId (long id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\r\n-\tpublic Set getSetField ()\r\n-\t{\r\n-\t\treturn this.setField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setSetField (Set setField)\r\n-\t{\r\n-\t\tthis.setField = setField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic AutoIncrementPC3 getOneOne ()\r\n-\t{\r\n-\t\treturn this.oneOne;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setOneOne (AutoIncrementPC3 oneOne)\r\n-\t{\r\n-\t\tthis.oneOne = oneOne;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@IdClass(AutoIncrementPC3Id.class)\n+@Entity\n+@Table(name=\"autoincpc3\")\n+public class AutoIncrementPC3\n+{\n+\t@Id\n+\tprivate long\t\t\t\tid\t\t\t= 0;\n+\tprivate Set \t\t\t\tsetField \t= new HashSet ();\n+\n+\t@Column(name=\"strngfld\", length=50)\n+\tprivate String\t\t\t\tstringField\t= null;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate AutoIncrementPC3\toneOne\t\t= null;\n+\n+\tpublic AutoIncrementPC3()\n+\t{\n+\t}\n+\n+\tpublic AutoIncrementPC3(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\n+\tpublic long getId ()\n+\t{\n+\t\treturn this.id;\n+\t}\n+\n+\n+\tpublic void setId (long id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\n+\tpublic Set getSetField ()\n+\t{\n+\t\treturn this.setField;\n+\t}\n+\n+\n+\tpublic void setSetField (Set setField)\n+\t{\n+\t\tthis.setField = setField;\n+\t}\n+\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\n+\tpublic AutoIncrementPC3 getOneOne ()\n+\t{\n+\t\treturn this.oneOne;\n+\t}\n+\n+\n+\tpublic void setOneOne (AutoIncrementPC3 oneOne)\n+\t{\n+\t\tthis.oneOne = oneOne;\n+\t}\n+}"},{"sha":"a634cf6b386aee150256faaab767b1d0ee3a2f07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/AutoIncrementPC3Id.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,74 +1,74 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import java.io.*;\r\n-\r\n-\r\n-/**\r\n- * Auto-generated by:\r\n- * kodo.enhance.ApplicationIdTool\r\n- */\r\n-@SuppressWarnings(\"serial\")\r\n-public class AutoIncrementPC3Id\timplements Serializable\r\n-{\r\n-\tstatic\r\n-\t{\r\n-\t\t// register persistent class in JVM\r\n-\t\tClass c = AutoIncrementPC3.class;\r\n-\t}\r\n-\r\n-\tpublic long id;\r\n-\r\n-\r\n-\tpublic AutoIncrementPC3Id ()\r\n-\t{\r\n-\t}\r\n-\r\n-\r\n-\tpublic AutoIncrementPC3Id (String fromString)\r\n-\t{\r\n-\t\tid = Long.parseLong (fromString);\r\n-\t}\r\n-\r\n-\r\n-\tpublic String toString ()\r\n-\t{\r\n-\t\treturn String.valueOf (id);\r\n-\t}\r\n-\r\n-\r\n-\tpublic int hashCode ()\r\n-\t{\r\n-\t\treturn (int) (id % Integer.MAX_VALUE);\r\n-\t}\r\n-\r\n-\r\n-\tpublic boolean equals (Object obj)\r\n-\t{\r\n-\t\tif (this == obj)\r\n-\t\t\treturn true;\r\n-\t\tif (!(obj instanceof AutoIncrementPC3Id))\r\n-\t\t\treturn false;\r\n-\r\n-\t\tAutoIncrementPC3Id other = (AutoIncrementPC3Id) obj;\r\n-\t\treturn (id == other.id);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import java.io.*;\n+\n+\n+/**\n+ * Auto-generated by:\n+ * kodo.enhance.ApplicationIdTool\n+ */\n+@SuppressWarnings(\"serial\")\n+public class AutoIncrementPC3Id\timplements Serializable\n+{\n+\tstatic\n+\t{\n+\t\t// register persistent class in JVM\n+\t\tClass c = AutoIncrementPC3.class;\n+\t}\n+\n+\tpublic long id;\n+\n+\n+\tpublic AutoIncrementPC3Id ()\n+\t{\n+\t}\n+\n+\n+\tpublic AutoIncrementPC3Id (String fromString)\n+\t{\n+\t\tid = Long.parseLong (fromString);\n+\t}\n+\n+\n+\tpublic String toString ()\n+\t{\n+\t\treturn String.valueOf (id);\n+\t}\n+\n+\n+\tpublic int hashCode ()\n+\t{\n+\t\treturn (int) (id % Integer.MAX_VALUE);\n+\t}\n+\n+\n+\tpublic boolean equals (Object obj)\n+\t{\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (!(obj instanceof AutoIncrementPC3Id))\n+\t\t\treturn false;\n+\n+\t\tAutoIncrementPC3Id other = (AutoIncrementPC3Id) obj;\n+\t\treturn (id == other.id);\n+\t}\n+}"},{"sha":"e6361f138ed03a6240134188696c1467ff18ba86","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Base.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class Base\r\n-    implements Comparable {\r\n-\r\n-    private int baseField;\r\n-\r\n-    public int getBaseField() {\r\n-        return this.baseField;\r\n-    }\r\n-\r\n-    public void setBaseField(int baseField) {\r\n-        this.baseField = baseField;\r\n-    }\r\n-\r\n-    public int compareTo(Object other) {\r\n-        if (other == this)\r\n-            return 0;\r\n-        if (other == null)\r\n-            return 1;\r\n-        return baseField - ((Base) other).baseField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class Base\n+    implements Comparable {\n+\n+    private int baseField;\n+\n+    public int getBaseField() {\n+        return this.baseField;\n+    }\n+\n+    public void setBaseField(int baseField) {\n+        this.baseField = baseField;\n+    }\n+\n+    public int compareTo(Object other) {\n+        if (other == this)\n+            return 0;\n+        if (other == null)\n+            return 1;\n+        return baseField - ((Base) other).baseField;\n+    }\n+}"},{"sha":"286d610428267cddfbb5cfaca185405477236761","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class BaseSub1\r\n-    extends Base {\r\n-\r\n-    private int baseSub1Field;\r\n-\r\n-    public int getBaseSub1Field() {\r\n-        return this.baseSub1Field;\r\n-    }\r\n-\r\n-    public void setBaseSub1Field(int baseSub1Field) {\r\n-        this.baseSub1Field = baseSub1Field;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class BaseSub1\n+    extends Base {\n+\n+    private int baseSub1Field;\n+\n+    public int getBaseSub1Field() {\n+        return this.baseSub1Field;\n+    }\n+\n+    public void setBaseSub1Field(int baseSub1Field) {\n+        this.baseSub1Field = baseSub1Field;\n+    }\n+}"},{"sha":"53fe24bd911cc5759bc26b65f4997013388f6348","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class BaseSub1Sub1\r\n-    extends BaseSub1 {\r\n-\r\n-    private int baseSub1Sub1Field;\r\n-\r\n-    public int getBaseSub1Sub1Field() {\r\n-        return this.baseSub1Sub1Field;\r\n-    }\r\n-\r\n-    public void setBaseSub1Sub1Field(int baseSub1Sub1Field) {\r\n-        this.baseSub1Sub1Field = baseSub1Sub1Field;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class BaseSub1Sub1\n+    extends BaseSub1 {\n+\n+    private int baseSub1Sub1Field;\n+\n+    public int getBaseSub1Sub1Field() {\n+        return this.baseSub1Sub1Field;\n+    }\n+\n+    public void setBaseSub1Sub1Field(int baseSub1Sub1Field) {\n+        this.baseSub1Sub1Field = baseSub1Sub1Field;\n+    }\n+}"},{"sha":"9e89486ae08fc8571889cafe1b9e53428c1f9a55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub1Sub2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class BaseSub1Sub2\r\n-    extends BaseSub1 {\r\n-\r\n-    private int baseSub1Sub2Field;\r\n-\r\n-    public int getBaseSub1Sub2Field() {\r\n-        return this.baseSub1Sub2Field;\r\n-    }\r\n-\r\n-    public void setBaseSub1Sub2Field(int baseSub1Sub2Field) {\r\n-        this.baseSub1Sub2Field = baseSub1Sub2Field;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class BaseSub1Sub2\n+    extends BaseSub1 {\n+\n+    private int baseSub1Sub2Field;\n+\n+    public int getBaseSub1Sub2Field() {\n+        return this.baseSub1Sub2Field;\n+    }\n+\n+    public void setBaseSub1Sub2Field(int baseSub1Sub2Field) {\n+        this.baseSub1Sub2Field = baseSub1Sub2Field;\n+    }\n+}"},{"sha":"ac0dec07efdd6af8663768a84bdc4ab094b85227","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BaseSub2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class BaseSub2\r\n-    extends Base {\r\n-\r\n-    private int baseSub2Field;\r\n-\r\n-    public int getBaseSub2Field() {\r\n-        return this.baseSub2Field;\r\n-    }\r\n-\r\n-    public void setBaseSub2Field(int baseSub2Field) {\r\n-        this.baseSub2Field = baseSub2Field;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class BaseSub2\n+    extends Base {\n+\n+    private int baseSub2Field;\n+\n+    public int getBaseSub2Field() {\n+        return this.baseSub2Field;\n+    }\n+\n+    public void setBaseSub2Field(int baseSub2Field) {\n+        this.baseSub2Field = baseSub2Field;\n+    }\n+}"},{"sha":"4f3111dca0d2ad2cf04f7946929b96d5474253cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/BuildSchemaPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing the mappingtool's buildSchema action.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class BuildSchemaPC {\r\n-\r\n-    private String stringField = null;\r\n-    private int intField = 0;\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persistent type used in testing the mappingtool's buildSchema action.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class BuildSchemaPC {\n+\n+    private String stringField = null;\n+    private int intField = 0;\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+}"},{"sha":"986b42b5290c7683370770fda2ac0003cfc5a83c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,77 +1,77 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persistent type using a byte[] for a primary key field.  Used in\r\n- * {@link TestByteArrayAppId}.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class ByteArrayPKPC {\r\n-\r\n-    private byte[] pk = null;\r\n-    private String stringField = null;\r\n-    private List rels = new ArrayList();\r\n-    private ByteArrayPKPC parent = null;\r\n-\r\n-    public ByteArrayPKPC() {\r\n-    }\r\n-\r\n-    public ByteArrayPKPC(byte[] pk, String stringField) {\r\n-        this.pk = pk;\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public byte[] getPK() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setPK(byte[] pk) {\r\n-        this.pk = pk;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public ByteArrayPKPC getParent() {\r\n-        return parent;\r\n-    }\r\n-\r\n-    public void setParent(ByteArrayPKPC parent) {\r\n-        this.parent = parent;\r\n-    }\r\n-\r\n-    public List getRels() {\r\n-        return this.rels;\r\n-    }\r\n-\r\n-    public void setRels(List rels) {\r\n-        this.rels = rels;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persistent type using a byte[] for a primary key field.  Used in\n+ * {@link TestByteArrayAppId}.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class ByteArrayPKPC {\n+\n+    private byte[] pk = null;\n+    private String stringField = null;\n+    private List rels = new ArrayList();\n+    private ByteArrayPKPC parent = null;\n+\n+    public ByteArrayPKPC() {\n+    }\n+\n+    public ByteArrayPKPC(byte[] pk, String stringField) {\n+        this.pk = pk;\n+        this.stringField = stringField;\n+    }\n+\n+    public byte[] getPK() {\n+        return pk;\n+    }\n+\n+    public void setPK(byte[] pk) {\n+        this.pk = pk;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public ByteArrayPKPC getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(ByteArrayPKPC parent) {\n+        this.parent = parent;\n+    }\n+\n+    public List getRels() {\n+        return this.rels;\n+    }\n+\n+    public void setRels(List rels) {\n+        this.rels = rels;\n+    }\n+}"},{"sha":"10ae14f1cb29d195d49c74d5c945edc7406e60b7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persistent type using a byte[] for a primary key field.  Used in\r\n- * {@link TestByteArrayAppId}.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class ByteArrayPKPC2\r\n-    extends ByteArrayPKPC {\r\n-\r\n-    private String subfield = null;\r\n-\r\n-    public ByteArrayPKPC2() {\r\n-    }\r\n-\r\n-    public ByteArrayPKPC2(byte[] pk, String stringField) {\r\n-        super(pk, stringField);\r\n-    }\r\n-\r\n-    public String getSubfield() {\r\n-        return this.subfield;\r\n-    }\r\n-\r\n-    public void setSubfield(String subfield) {\r\n-        this.subfield = subfield;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persistent type using a byte[] for a primary key field.  Used in\n+ * {@link TestByteArrayAppId}.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class ByteArrayPKPC2\n+    extends ByteArrayPKPC {\n+\n+    private String subfield = null;\n+\n+    public ByteArrayPKPC2() {\n+    }\n+\n+    public ByteArrayPKPC2(byte[] pk, String stringField) {\n+        super(pk, stringField);\n+    }\n+\n+    public String getSubfield() {\n+        return this.subfield;\n+    }\n+\n+    public void setSubfield(String subfield) {\n+        this.subfield = subfield;\n+    }\n+}"},{"sha":"33152dbd2bc83772069752a63df12324dd221630","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","status":"modified","additions":120,"deletions":120,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ByteArrayPKPCId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,120 +1,120 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.*;\r\n-\r\n-/**\r\n- * Auto-generated by:\r\n- * org.apache.openjpa.enhance.ApplicationIdTool\r\n- */\r\n-public class ByteArrayPKPCId implements Serializable {\r\n-\r\n-    private static final char[] HEX = new char[]{\r\n-        '0', '1', '2', '3', '4', '5', '6', '7',\r\n-        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\r\n-    };\r\n-\r\n-    static {\r\n-        // register persistent class in JVM\r\n-        Class c = ByteArrayPKPC.class;\r\n-    }\r\n-\r\n-    public byte[] pk;\r\n-\r\n-    public ByteArrayPKPCId() {\r\n-    }\r\n-\r\n-    public ByteArrayPKPCId(String fromString) {\r\n-        pk = toBytes(fromString);\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return toString(pk);\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        return hashCode(pk);\r\n-    }\r\n-\r\n-    public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n-            return true;\r\n-        if (!(obj instanceof ByteArrayPKPCId))\r\n-            return false;\r\n-\r\n-        ByteArrayPKPCId other = (ByteArrayPKPCId) obj;\r\n-        return (equals(pk, other.pk));\r\n-    }\r\n-\r\n-    private static byte[] toBytes(String s) {\r\n-        if (\"null\".equals(s))\r\n-            return null;\r\n-\r\n-        int len = s.length();\r\n-        byte[] r = new byte[len / 2];\r\n-        for (int i = 0; i < r.length; i++) {\r\n-            int digit1 = s.charAt(i * 2), digit2 = s.charAt(i * 2 + 1);\r\n-            if (digit1 >= '0' && digit1 <= '9')\r\n-                digit1 -= '0';\r\n-            else if (digit1 >= 'A' && digit1 <= 'F')\r\n-                digit1 -= 'A' - 10;\r\n-            if (digit2 >= '0' && digit2 <= '9')\r\n-                digit2 -= '0';\r\n-            else if (digit2 >= 'A' && digit2 <= 'F')\r\n-                digit2 -= 'A' - 10;\r\n-\r\n-            r[i] = (byte) ((digit1 << 4) + digit2);\r\n-        }\r\n-        return r;\r\n-    }\r\n-\r\n-    private static String toString(byte[] b) {\r\n-        if (b == null)\r\n-            return \"null\";\r\n-\r\n-        StringBuffer r = new StringBuffer(b.length * 2);\r\n-        for (int i = 0; i < b.length; i++)\r\n-            for (int j = 1; j >= 0; j--)\r\n-                r.append(HEX[(b[i] >> (j * 4)) & 0xF]);\r\n-        return r.toString();\r\n-    }\r\n-\r\n-    private static boolean equals(byte[] b1, byte[] b2) {\r\n-        if (b1 == null && b2 == null)\r\n-            return true;\r\n-        if (b1 == null || b2 == null)\r\n-            return false;\r\n-        if (b1.length != b2.length)\r\n-            return false;\r\n-        for (int i = 0; i < b1.length; i++)\r\n-            if (b1[i] != b2[i])\r\n-                return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    private static int hashCode(byte[] b) {\r\n-        if (b == null)\r\n-            return 0;\r\n-        int sum = 0;\r\n-        for (int i = 0; i < b.length; i++)\r\n-            sum += b[i];\r\n-        return sum;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.*;\n+\n+/**\n+ * Auto-generated by:\n+ * org.apache.openjpa.enhance.ApplicationIdTool\n+ */\n+public class ByteArrayPKPCId implements Serializable {\n+\n+    private static final char[] HEX = new char[]{\n+        '0', '1', '2', '3', '4', '5', '6', '7',\n+        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n+    };\n+\n+    static {\n+        // register persistent class in JVM\n+        Class c = ByteArrayPKPC.class;\n+    }\n+\n+    public byte[] pk;\n+\n+    public ByteArrayPKPCId() {\n+    }\n+\n+    public ByteArrayPKPCId(String fromString) {\n+        pk = toBytes(fromString);\n+    }\n+\n+    public String toString() {\n+        return toString(pk);\n+    }\n+\n+    public int hashCode() {\n+        return hashCode(pk);\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (!(obj instanceof ByteArrayPKPCId))\n+            return false;\n+\n+        ByteArrayPKPCId other = (ByteArrayPKPCId) obj;\n+        return (equals(pk, other.pk));\n+    }\n+\n+    private static byte[] toBytes(String s) {\n+        if (\"null\".equals(s))\n+            return null;\n+\n+        int len = s.length();\n+        byte[] r = new byte[len / 2];\n+        for (int i = 0; i < r.length; i++) {\n+            int digit1 = s.charAt(i * 2), digit2 = s.charAt(i * 2 + 1);\n+            if (digit1 >= '0' && digit1 <= '9')\n+                digit1 -= '0';\n+            else if (digit1 >= 'A' && digit1 <= 'F')\n+                digit1 -= 'A' - 10;\n+            if (digit2 >= '0' && digit2 <= '9')\n+                digit2 -= '0';\n+            else if (digit2 >= 'A' && digit2 <= 'F')\n+                digit2 -= 'A' - 10;\n+\n+            r[i] = (byte) ((digit1 << 4) + digit2);\n+        }\n+        return r;\n+    }\n+\n+    private static String toString(byte[] b) {\n+        if (b == null)\n+            return \"null\";\n+\n+        StringBuffer r = new StringBuffer(b.length * 2);\n+        for (int i = 0; i < b.length; i++)\n+            for (int j = 1; j >= 0; j--)\n+                r.append(HEX[(b[i] >> (j * 4)) & 0xF]);\n+        return r.toString();\n+    }\n+\n+    private static boolean equals(byte[] b1, byte[] b2) {\n+        if (b1 == null && b2 == null)\n+            return true;\n+        if (b1 == null || b2 == null)\n+            return false;\n+        if (b1.length != b2.length)\n+            return false;\n+        for (int i = 0; i < b1.length; i++)\n+            if (b1[i] != b2[i])\n+                return false;\n+        return true;\n+    }\n+\n+    private static int hashCode(byte[] b) {\n+        if (b == null)\n+            return 0;\n+        int sum = 0;\n+        for (int i = 0; i < b.length; i++)\n+            sum += b[i];\n+        return sum;\n+    }\n+}"},{"sha":"852775adcc03b5351f08d33e8d3ffb8e00586226","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,57 +1,57 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing.</p>\r\n- *\r\n- */\r\n-\r\n-@Entity\r\n-public class CircularFKPC {\r\n-\t\r\n-    @Id\r\n-    private String stringField;\r\n-    private CircularFKPC2 fkField;\r\n-\r\n-\tpublic CircularFKPC() {\r\n-\r\n-\t}\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public CircularFKPC2 getFKField() {\r\n-        return this.fkField;\r\n-    }\r\n-\r\n-    public void setFKField(CircularFKPC2 fkField) {\r\n-        this.fkField = fkField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * <p>Persistent type used in testing.</p>\n+ *\n+ */\n+\n+@Entity\n+public class CircularFKPC {\n+\t\n+    @Id\n+    private String stringField;\n+    private CircularFKPC2 fkField;\n+\n+\tpublic CircularFKPC() {\n+\n+\t}\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public CircularFKPC2 getFKField() {\n+        return this.fkField;\n+    }\n+\n+    public void setFKField(CircularFKPC2 fkField) {\n+        this.fkField = fkField;\n+    }\n+}"},{"sha":"ffecac5e7da4f990556c11091d7b94b06170598a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CircularFKPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,57 +1,57 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing.</p>\r\n- *\r\n- */\r\n-\r\n-@Entity\r\n-public class CircularFKPC2 {\r\n-\r\n-\t@Id\r\n-    private String stringField;\r\n-    private CircularFKPC fkField;\r\n-\r\n-\tpublic CircularFKPC2() {\r\n-\r\n-\t}\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public CircularFKPC getFKField() {\r\n-        return this.fkField;\r\n-    }\r\n-\r\n-    public void setFKField(CircularFKPC fkField) {\r\n-        this.fkField = fkField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * <p>Persistent type used in testing.</p>\n+ *\n+ */\n+\n+@Entity\n+public class CircularFKPC2 {\n+\n+\t@Id\n+    private String stringField;\n+    private CircularFKPC fkField;\n+\n+\tpublic CircularFKPC2() {\n+\n+\t}\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public CircularFKPC getFKField() {\n+        return this.fkField;\n+    }\n+\n+    public void setFKField(CircularFKPC fkField) {\n+        this.fkField = fkField;\n+    }\n+}"},{"sha":"b1acbf9f6972f7df1ce4a4260ab109e7699b885c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ComplexEmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * <p>Embedded type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class ComplexEmbeddedPC\r\n-    extends RecursivelyEmbeddedPC {\r\n-\t\r\n-\r\n-    private String stringField;\r\n-    private EmbeddedOwnerPC ownerField;\r\n-    private Set stringSet = new HashSet();\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public EmbeddedOwnerPC getOwnerField() {\r\n-        return this.ownerField;\r\n-    }\r\n-\r\n-    public void setOwnerField(EmbeddedOwnerPC ownerField) {\r\n-        this.ownerField = ownerField;\r\n-    }\r\n-\r\n-    public Set getStringSet() {\r\n-        return this.stringSet;\r\n-    }\r\n-\r\n-    public void setStringSet(Set stringSet) {\r\n-        this.stringSet = stringSet;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * <p>Embedded type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class ComplexEmbeddedPC\n+    extends RecursivelyEmbeddedPC {\n+\t\n+\n+    private String stringField;\n+    private EmbeddedOwnerPC ownerField;\n+    private Set stringSet = new HashSet();\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public EmbeddedOwnerPC getOwnerField() {\n+        return this.ownerField;\n+    }\n+\n+    public void setOwnerField(EmbeddedOwnerPC ownerField) {\n+        this.ownerField = ownerField;\n+    }\n+\n+    public Set getStringSet() {\n+        return this.stringSet;\n+    }\n+\n+    public void setStringSet(Set stringSet) {\n+        this.stringSet = stringSet;\n+    }\n+}"},{"sha":"13896d738ff46d38075133861a3103dc7b3dcf66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,72 +1,72 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class ConstantJoinPC {\r\n-\r\n-    private int pk1;\r\n-    private int pk2;\r\n-    private NonPKJoinPC nonPK;\r\n-    private NonPKJoinPC nonPK2;\r\n-    private Collection nonPKs = new HashSet();\r\n-\r\n-    public int getPk1() {\r\n-        return this.pk1;\r\n-    }\r\n-\r\n-    public void setPk1(int pk1) {\r\n-        this.pk1 = pk1;\r\n-    }\r\n-\r\n-    public int getPk2() {\r\n-        return this.pk2;\r\n-    }\r\n-\r\n-    public void setPk2(int pk2) {\r\n-        this.pk2 = pk2;\r\n-    }\r\n-\r\n-    public NonPKJoinPC getNonPK() {\r\n-        return this.nonPK;\r\n-    }\r\n-\r\n-    public void setNonPK(NonPKJoinPC nonPK) {\r\n-        this.nonPK = nonPK;\r\n-    }\r\n-\r\n-    public NonPKJoinPC getNonPK2() {\r\n-        return this.nonPK2;\r\n-    }\r\n-\r\n-    public void setNonPK2(NonPKJoinPC nonPK2) {\r\n-        this.nonPK2 = nonPK2;\r\n-    }\r\n-\r\n-    public Collection getNonPKs() {\r\n-        return this.nonPKs;\r\n-    }\r\n-\r\n-    public void setNonPKs(Collection nonPKs) {\r\n-        this.nonPKs = nonPKs;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ConstantJoinPC {\n+\n+    private int pk1;\n+    private int pk2;\n+    private NonPKJoinPC nonPK;\n+    private NonPKJoinPC nonPK2;\n+    private Collection nonPKs = new HashSet();\n+\n+    public int getPk1() {\n+        return this.pk1;\n+    }\n+\n+    public void setPk1(int pk1) {\n+        this.pk1 = pk1;\n+    }\n+\n+    public int getPk2() {\n+        return this.pk2;\n+    }\n+\n+    public void setPk2(int pk2) {\n+        this.pk2 = pk2;\n+    }\n+\n+    public NonPKJoinPC getNonPK() {\n+        return this.nonPK;\n+    }\n+\n+    public void setNonPK(NonPKJoinPC nonPK) {\n+        this.nonPK = nonPK;\n+    }\n+\n+    public NonPKJoinPC getNonPK2() {\n+        return this.nonPK2;\n+    }\n+\n+    public void setNonPK2(NonPKJoinPC nonPK2) {\n+        this.nonPK2 = nonPK2;\n+    }\n+\n+    public Collection getNonPKs() {\n+        return this.nonPKs;\n+    }\n+\n+    public void setNonPKs(Collection nonPKs) {\n+        this.nonPKs = nonPKs;\n+    }\n+}"},{"sha":"23e7fade60289e31aecf79e6d32211ebeb6372f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class ConstantJoinPC2\r\n-    extends ConstantJoinPC {\r\n-\r\n-    private int pc2Field;\r\n-\r\n-    public int getPc2Field() {\r\n-        return this.pc2Field;\r\n-    }\r\n-\r\n-    public void setPc2Field(int pc2Field) {\r\n-        this.pc2Field = pc2Field;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ConstantJoinPC2\n+    extends ConstantJoinPC {\n+\n+    private int pc2Field;\n+\n+    public int getPc2Field() {\n+        return this.pc2Field;\n+    }\n+\n+    public void setPc2Field(int pc2Field) {\n+        this.pc2Field = pc2Field;\n+    }\n+}"},{"sha":"c291681d57f3b9d1df08c7999e0605412650cf70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class ConstantJoinPC3\r\n-    extends ConstantJoinPC {\r\n-\r\n-    private int pc3Field;\r\n-\r\n-    public int getPc3Field() {\r\n-        return this.pc3Field;\r\n-    }\r\n-\r\n-    public void setPc3Field(int pc3Field) {\r\n-        this.pc3Field = pc3Field;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ConstantJoinPC3\n+    extends ConstantJoinPC {\n+\n+    private int pc3Field;\n+\n+    public int getPc3Field() {\n+        return this.pc3Field;\n+    }\n+\n+    public void setPc3Field(int pc3Field) {\n+        this.pc3Field = pc3Field;\n+    }\n+}"},{"sha":"71f79b9bbe2abb61321a66c67823c079fb6777e7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,90 +1,90 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"conjoinpc4\")\r\n-public class ConstantJoinPC4\r\n-{\r\n-\t@Column(length=50)\r\n-\tprivate String name;\r\n-\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate ConstantJoinPC5 oneToOne1;\r\n-\t@ManyToMany\r\n-\tprivate Set manyToMany = new HashSet ();\r\n-\r\n-\tpublic ConstantJoinPC4()\r\n-\t{}\r\n-\r\n-\tpublic ConstantJoinPC4 (String name, int id)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getName ()\r\n-\t{\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setOneToOne1 (ConstantJoinPC5 val)\r\n-\t{\r\n-\t\toneToOne1 = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic ConstantJoinPC5 getOneToOne1 ()\r\n-\t{\r\n-\t\treturn oneToOne1;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setManyToMany (Set val)\r\n-\t{\r\n-\t\tmanyToMany = val;\r\n-\t}\r\n-\r\n-\r\n-\tpublic Set getManyToMany ()\r\n-\t{\r\n-\t\treturn manyToMany;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+\n+import java.util.*;\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"conjoinpc4\")\n+public class ConstantJoinPC4\n+{\n+\t@Column(length=50)\n+\tprivate String name;\n+\n+\t@Id\n+\tprivate int id;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate ConstantJoinPC5 oneToOne1;\n+\t@ManyToMany\n+\tprivate Set manyToMany = new HashSet ();\n+\n+\tpublic ConstantJoinPC4()\n+\t{}\n+\n+\tpublic ConstantJoinPC4 (String name, int id)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.id = id;\n+\t}\n+\n+\n+\tpublic String getName ()\n+\t{\n+\t\treturn name;\n+\t}\n+\n+\n+\tpublic void setOneToOne1 (ConstantJoinPC5 val)\n+\t{\n+\t\toneToOne1 = val;\n+\t}\n+\n+\n+\tpublic ConstantJoinPC5 getOneToOne1 ()\n+\t{\n+\t\treturn oneToOne1;\n+\t}\n+\n+\n+\tpublic void setManyToMany (Set val)\n+\t{\n+\t\tmanyToMany = val;\n+\t}\n+\n+\n+\tpublic Set getManyToMany ()\n+\t{\n+\t\treturn manyToMany;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+}"},{"sha":"4c4c072ee12b86a975042de0ac5d3a5054d4165f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/ConstantJoinPC5.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"conjoinpc5\")\r\n-public class ConstantJoinPC5\r\n-{\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\t@Basic\r\n-\tprivate String name;\r\n-\r\n-\tpublic ConstantJoinPC5()\r\n-\t{}\r\n-\r\n-\tpublic ConstantJoinPC5(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic ConstantJoinPC5 (String name)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getName ()\r\n-\t{\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"conjoinpc5\")\n+public class ConstantJoinPC5\n+{\n+\t@Id\n+\tprivate int id;\n+\n+\t@Basic\n+\tprivate String name;\n+\n+\tpublic ConstantJoinPC5()\n+\t{}\n+\n+\tpublic ConstantJoinPC5(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic ConstantJoinPC5 (String name)\n+\t{\n+\t\tthis.name = name;\n+\t}\n+\n+\n+\tpublic String getName ()\n+\t{\n+\t\treturn name;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n }\n\\ No newline at end of file"},{"sha":"0f74e7d96c160dfa83c6fce9db2e28bd9e797598","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/CustomMappingPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,80 +1,80 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-\r\n-@Entity\r\n-@Table(name=\"custmappc\")\r\n-public class CustomMappingPC\r\n-{\r\n-\r\n-\tprivate boolean female;\r\n-\t@Column(length=50)\r\n-\tprivate String \tname;\r\n-\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\tpublic CustomMappingPC()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic CustomMappingPC(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\r\n-\tpublic boolean isFemale ()\r\n-\t{\r\n-\t\treturn this.female;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setFemale (boolean female)\r\n-\t{\r\n-\t\tthis.female = female;\r\n-\t}\r\n-\r\n-\r\n-\tpublic String getName ()\r\n-\t{\r\n-\t\treturn this.name;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setName (String name)\r\n-\t{\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.*;\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+\n+@Entity\n+@Table(name=\"custmappc\")\n+public class CustomMappingPC\n+{\n+\n+\tprivate boolean female;\n+\t@Column(length=50)\n+\tprivate String \tname;\n+\n+\t@Id\n+\tprivate int id;\n+\n+\tpublic CustomMappingPC()\n+\t{\n+\t}\n+\n+\tpublic CustomMappingPC(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\n+\tpublic boolean isFemale ()\n+\t{\n+\t\treturn this.female;\n+\t}\n+\n+\n+\tpublic void setFemale (boolean female)\n+\t{\n+\t\tthis.female = female;\n+\t}\n+\n+\n+\tpublic String getName ()\n+\t{\n+\t\treturn this.name;\n+\t}\n+\n+\n+\tpublic void setName (String name)\n+\t{\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+}"},{"sha":"b7f06e29a12dd7f82f3f81d2eaf8c2707afe0484","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DFGTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class DFGTest {\r\n-\r\n-    private int dfgField;\r\n-    private int nonDFGField;\r\n-\r\n-    public int getDFGField() {\r\n-        return this.dfgField;\r\n-    }\r\n-\r\n-    public void setDFGField(int dfgField) {\r\n-        this.dfgField = dfgField;\r\n-    }\r\n-\r\n-    public int getNonDFGField() {\r\n-        return this.nonDFGField;\r\n-    }\r\n-\r\n-    public void setNonDFGField(int nonDFGField) {\r\n-        this.nonDFGField = nonDFGField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persistent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class DFGTest {\n+\n+    private int dfgField;\n+    private int nonDFGField;\n+\n+    public int getDFGField() {\n+        return this.dfgField;\n+    }\n+\n+    public void setDFGField(int dfgField) {\n+        this.dfgField = dfgField;\n+    }\n+\n+    public int getNonDFGField() {\n+        return this.nonDFGField;\n+    }\n+\n+    public void setNonDFGField(int nonDFGField) {\n+        this.nonDFGField = nonDFGField;\n+    }\n+}"},{"sha":"deef14b47b527d120216c461887d8f5b8bfa0533","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/DataStoreTripsPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class DataStoreTripsPC {\r\n-\r\n-    private int intField;\r\n-    private String stringField;\r\n-\r\n-    public DataStoreTripsPC() {\r\n-    }\r\n-\r\n-    public DataStoreTripsPC(int i) {\r\n-        this.intField = i;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+\n+/**\n+ * <p>Persistent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class DataStoreTripsPC {\n+\n+    private int intField;\n+    private String stringField;\n+\n+    public DataStoreTripsPC() {\n+    }\n+\n+    public DataStoreTripsPC(int i) {\n+        this.intField = i;\n+    }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+}"},{"sha":"81ba47efb63dd1a403e514cc9938f2c4ccf2d30b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Class that uses eager outer joins for its collection fields.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class EagerOuterJoinPC {\r\n-\r\n-    private String name = null;\r\n-    private Collection stringCollection = new HashSet();\r\n-    private List stringList = new ArrayList();\r\n-    private Collection oneManyCollection = new HashSet();\r\n-    private Collection manyManyCollection = new HashSet();\r\n-    private List manyManyList = new ArrayList();\r\n-    private HelperPC helper = null;\r\n-\r\n-    public Collection getStringCollection() {\r\n-        return this.stringCollection;\r\n-    }\r\n-\r\n-    public void setStringCollection(Collection stringCollection) {\r\n-        this.stringCollection = stringCollection;\r\n-    }\r\n-\r\n-    public List getStringList() {\r\n-        return this.stringList;\r\n-    }\r\n-\r\n-    public void setStringList(List stringList) {\r\n-        this.stringList = stringList;\r\n-    }\r\n-\r\n-    public Collection getOneManyCollection() {\r\n-        return this.oneManyCollection;\r\n-    }\r\n-\r\n-    public void setOneManyCollection(Collection oneManyCollection) {\r\n-        this.oneManyCollection = oneManyCollection;\r\n-    }\r\n-\r\n-    public Collection getManyManyCollection() {\r\n-        return this.manyManyCollection;\r\n-    }\r\n-\r\n-    public void setManyManyCollection(Collection manyManyCollection) {\r\n-        this.manyManyCollection = manyManyCollection;\r\n-    }\r\n-\r\n-    public List getManyManyList() {\r\n-        return this.manyManyList;\r\n-    }\r\n-\r\n-    public void setManyManyList(List manyManyList) {\r\n-        this.manyManyList = manyManyList;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return this.name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return getClass().getName() + \": \" + name;\r\n-    }\r\n-\r\n-    public HelperPC getHelper() {\r\n-        return this.helper;\r\n-    }\r\n-\r\n-    public void setHelper(HelperPC helper) {\r\n-        this.helper = helper;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Class that uses eager outer joins for its collection fields.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class EagerOuterJoinPC {\n+\n+    private String name = null;\n+    private Collection stringCollection = new HashSet();\n+    private List stringList = new ArrayList();\n+    private Collection oneManyCollection = new HashSet();\n+    private Collection manyManyCollection = new HashSet();\n+    private List manyManyList = new ArrayList();\n+    private HelperPC helper = null;\n+\n+    public Collection getStringCollection() {\n+        return this.stringCollection;\n+    }\n+\n+    public void setStringCollection(Collection stringCollection) {\n+        this.stringCollection = stringCollection;\n+    }\n+\n+    public List getStringList() {\n+        return this.stringList;\n+    }\n+\n+    public void setStringList(List stringList) {\n+        this.stringList = stringList;\n+    }\n+\n+    public Collection getOneManyCollection() {\n+        return this.oneManyCollection;\n+    }\n+\n+    public void setOneManyCollection(Collection oneManyCollection) {\n+        this.oneManyCollection = oneManyCollection;\n+    }\n+\n+    public Collection getManyManyCollection() {\n+        return this.manyManyCollection;\n+    }\n+\n+    public void setManyManyCollection(Collection manyManyCollection) {\n+        this.manyManyCollection = manyManyCollection;\n+    }\n+\n+    public List getManyManyList() {\n+        return this.manyManyList;\n+    }\n+\n+    public void setManyManyList(List manyManyList) {\n+        this.manyManyList = manyManyList;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String toString() {\n+        return getClass().getName() + \": \" + name;\n+    }\n+\n+    public HelperPC getHelper() {\n+        return this.helper;\n+    }\n+\n+    public void setHelper(HelperPC helper) {\n+        this.helper = helper;\n+    }\n+}"},{"sha":"eff3d4476b86f70649e4892ecf5c0c08c188ebb8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerOuterJoinPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,72 +1,72 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Helper class in eager to-many join testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class EagerOuterJoinPC2 {\r\n-\r\n-    private String name = null;\r\n-    private EagerOuterJoinPC ref = null;\r\n-    private HelperPC helper = null;\r\n-    private Collection stringCollection = new HashSet();\r\n-\r\n-    public String getName() {\r\n-        return this.name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public EagerOuterJoinPC getRef() {\r\n-        return this.ref;\r\n-    }\r\n-\r\n-    public void setRef(EagerOuterJoinPC ref) {\r\n-        this.ref = ref;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return getClass().getName() + \": \" + name;\r\n-    }\r\n-\r\n-    public HelperPC getHelper() {\r\n-        return this.helper;\r\n-    }\r\n-\r\n-    public void setHelper(HelperPC helper) {\r\n-        this.helper = helper;\r\n-    }\r\n-\r\n-    public Collection getStringCollection() {\r\n-        return this.stringCollection;\r\n-    }\r\n-\r\n-    public void setStringCollection(Collection stringCollection) {\r\n-        this.stringCollection = stringCollection;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Helper class in eager to-many join testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class EagerOuterJoinPC2 {\n+\n+    private String name = null;\n+    private EagerOuterJoinPC ref = null;\n+    private HelperPC helper = null;\n+    private Collection stringCollection = new HashSet();\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public EagerOuterJoinPC getRef() {\n+        return this.ref;\n+    }\n+\n+    public void setRef(EagerOuterJoinPC ref) {\n+        this.ref = ref;\n+    }\n+\n+    public String toString() {\n+        return getClass().getName() + \": \" + name;\n+    }\n+\n+    public HelperPC getHelper() {\n+        return this.helper;\n+    }\n+\n+    public void setHelper(HelperPC helper) {\n+        this.helper = helper;\n+    }\n+\n+    public Collection getStringCollection() {\n+        return this.stringCollection;\n+    }\n+\n+    public void setStringCollection(Collection stringCollection) {\n+        this.stringCollection = stringCollection;\n+    }\n+}"},{"sha":"53c10d8a2b3d2332de5f104b19647c6e48024db5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","status":"modified","additions":161,"deletions":161,"changes":322,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,161 +1,161 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.JOINED)\r\n-public class EagerPC\r\n-{\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\t@Column(name=\"strngfld\", length=50)\r\n-\tprivate String\t\tstringField;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate HelperPC \teager;\r\n-\t@Column(name=\"eagsub\")\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate HelperPC4\teagerSub;\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate HelperPC2\trecurse;\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate HelperPC \thelper;\r\n-\t@Transient private List\t\teagerCollection\t\t= new LinkedList ();\r\n-\t@Transient private List\t\trecurseCollection\t= new LinkedList ();\r\n-\t@Transient private List\t \thelperCollection\t= new LinkedList ();\r\n-\r\n-\tpublic EagerPC()\r\n-\t{}\r\n-\r\n-\tpublic EagerPC(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic HelperPC getEager ()\r\n-\t{\r\n-\t\treturn this.eager;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setEager (HelperPC eager)\r\n-\t{\r\n-\t\tthis.eager = eager;\r\n-\t}\r\n-\r\n-\r\n-\tpublic HelperPC2 getRecurse ()\r\n-\t{\r\n-\t\treturn this.recurse;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setRecurse (HelperPC2 recurse)\r\n-\t{\r\n-\t\tthis.recurse = recurse;\r\n-\t}\r\n-\r\n-\r\n-\tpublic HelperPC getHelper ()\r\n-\t{\r\n-\t\treturn this.helper;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setHelper (HelperPC helper)\r\n-\t{\r\n-\t\tthis.helper = helper;\r\n-\t}\r\n-\r\n-\r\n-\tpublic List getEagerCollection ()\r\n-\t{\r\n-\t\treturn this.eagerCollection;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setEagerCollection (List eagerCollection)\r\n-\t{\r\n-\t\tthis.eagerCollection = eagerCollection;\r\n-\t}\r\n-\r\n-\r\n-\tpublic List getRecurseCollection ()\r\n-\t{\r\n-\t\treturn this.recurseCollection;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setRecurseCollection (List recurseCollection)\r\n-\t{\r\n-\t\tthis.recurseCollection = recurseCollection;\r\n-\t}\r\n-\r\n-\r\n-\tpublic List getHelperCollection ()\r\n-\t{\r\n-\t\treturn this.helperCollection;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setHelperCollection (List helperCollection)\r\n-\t{\r\n-\t\tthis.helperCollection = helperCollection;\r\n-\t}\r\n-\r\n-\r\n-\tpublic HelperPC4 getEagerSub ()\r\n-\t{\r\n-\t\treturn this.eagerSub;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setEagerSub (HelperPC4 eagerSub)\r\n-\t{\r\n-\t\tthis.eagerSub = eagerSub;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public class EagerPC\n+{\n+\t@Id\n+\tprivate int id;\n+\n+\t@Column(name=\"strngfld\", length=50)\n+\tprivate String\t\tstringField;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate HelperPC \teager;\n+\t@Column(name=\"eagsub\")\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate HelperPC4\teagerSub;\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate HelperPC2\trecurse;\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate HelperPC \thelper;\n+\t@Transient private List\t\teagerCollection\t\t= new LinkedList ();\n+\t@Transient private List\t\trecurseCollection\t= new LinkedList ();\n+\t@Transient private List\t \thelperCollection\t= new LinkedList ();\n+\n+\tpublic EagerPC()\n+\t{}\n+\n+\tpublic EagerPC(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\n+\tpublic HelperPC getEager ()\n+\t{\n+\t\treturn this.eager;\n+\t}\n+\n+\n+\tpublic void setEager (HelperPC eager)\n+\t{\n+\t\tthis.eager = eager;\n+\t}\n+\n+\n+\tpublic HelperPC2 getRecurse ()\n+\t{\n+\t\treturn this.recurse;\n+\t}\n+\n+\n+\tpublic void setRecurse (HelperPC2 recurse)\n+\t{\n+\t\tthis.recurse = recurse;\n+\t}\n+\n+\n+\tpublic HelperPC getHelper ()\n+\t{\n+\t\treturn this.helper;\n+\t}\n+\n+\n+\tpublic void setHelper (HelperPC helper)\n+\t{\n+\t\tthis.helper = helper;\n+\t}\n+\n+\n+\tpublic List getEagerCollection ()\n+\t{\n+\t\treturn this.eagerCollection;\n+\t}\n+\n+\n+\tpublic void setEagerCollection (List eagerCollection)\n+\t{\n+\t\tthis.eagerCollection = eagerCollection;\n+\t}\n+\n+\n+\tpublic List getRecurseCollection ()\n+\t{\n+\t\treturn this.recurseCollection;\n+\t}\n+\n+\n+\tpublic void setRecurseCollection (List recurseCollection)\n+\t{\n+\t\tthis.recurseCollection = recurseCollection;\n+\t}\n+\n+\n+\tpublic List getHelperCollection ()\n+\t{\n+\t\treturn this.helperCollection;\n+\t}\n+\n+\n+\tpublic void setHelperCollection (List helperCollection)\n+\t{\n+\t\tthis.helperCollection = helperCollection;\n+\t}\n+\n+\n+\tpublic HelperPC4 getEagerSub ()\n+\t{\n+\t\treturn this.eagerSub;\n+\t}\n+\n+\n+\tpublic void setEagerSub (HelperPC4 eagerSub)\n+\t{\n+\t\tthis.eagerSub = eagerSub;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+}"},{"sha":"0ce52f9da239ec95a00e9412ea9d9e161eb5119f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EagerPCSub.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.*;\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-public class EagerPCSub\textends EagerPC\r\n-{\r\n-\tprivate int \tintField;\r\n-\r\n-\t@Column(name=\"eagercoll2\")\r\n-\t@OneToMany\r\n-\t@Transient private List eagerCollection2 = new LinkedList ();\r\n-\r\n-\tpublic EagerPCSub()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic EagerPCSub(int id)\r\n-\t{\r\n-\t\tsuper(id);\r\n-\t}\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn this.intField;\r\n-\t}\r\n-\r\n-\tpublic void setIntField (int intField)\r\n-\t{\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-\r\n-\tpublic List getEagerCollection2 ()\r\n-\t{\r\n-\t\treturn this.eagerCollection2;\r\n-\t}\r\n-\r\n-\tpublic void setEagerCollection2 (List eagerCollection2)\r\n-\t{\r\n-\t\tthis.eagerCollection2 = eagerCollection2;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+public class EagerPCSub\textends EagerPC\n+{\n+\tprivate int \tintField;\n+\n+\t@Column(name=\"eagercoll2\")\n+\t@OneToMany\n+\t@Transient private List eagerCollection2 = new LinkedList ();\n+\n+\tpublic EagerPCSub()\n+\t{\n+\t}\n+\n+\tpublic EagerPCSub(int id)\n+\t{\n+\t\tsuper(id);\n+\t}\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn this.intField;\n+\t}\n+\n+\tpublic void setIntField (int intField)\n+\t{\n+\t\tthis.intField = intField;\n+\t}\n+\n+\tpublic List getEagerCollection2 ()\n+\t{\n+\t\treturn this.eagerCollection2;\n+\t}\n+\n+\tpublic void setEagerCollection2 (List eagerCollection2)\n+\t{\n+\t\tthis.eagerCollection2 = eagerCollection2;\n+\t}\n+}"},{"sha":"a944a9ff98d4af02ff80baddc8474fe9077b7084","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedOwnerPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,79 +1,79 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * <p>Persistent type used in testing embedded instances.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class EmbeddedOwnerPC {\r\n-\r\n-    private int id1;\r\n-    private int id2;\r\n-    private String stringField;\r\n-    private EmbeddedPC embedded;\r\n-    private ComplexEmbeddedPC complexEmbedded;\r\n-\r\n-    protected EmbeddedOwnerPC() {\r\n-    }\r\n-\r\n-    public EmbeddedOwnerPC(int id1, int id2) {\r\n-        this.id1 = id1;\r\n-        this.id2 = id2;\r\n-    }\r\n-\r\n-    public int getId1() {\r\n-        return id1;\r\n-    }\r\n-\r\n-    public int getId2() {\r\n-        return id2;\r\n-    }\r\n-\r\n-    public EmbeddedPC getEmbedded() {\r\n-        return this.embedded;\r\n-    }\r\n-\r\n-    public void setEmbedded(EmbeddedPC embedded) {\r\n-        this.embedded = embedded;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public ComplexEmbeddedPC getComplexEmbedded() {\r\n-        return this.complexEmbedded;\r\n-    }\r\n-\r\n-    public void setComplexEmbedded(ComplexEmbeddedPC complexEmbedded) {\r\n-        this.complexEmbedded = complexEmbedded;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * <p>Persistent type used in testing embedded instances.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class EmbeddedOwnerPC {\n+\n+    private int id1;\n+    private int id2;\n+    private String stringField;\n+    private EmbeddedPC embedded;\n+    private ComplexEmbeddedPC complexEmbedded;\n+\n+    protected EmbeddedOwnerPC() {\n+    }\n+\n+    public EmbeddedOwnerPC(int id1, int id2) {\n+        this.id1 = id1;\n+        this.id2 = id2;\n+    }\n+\n+    public int getId1() {\n+        return id1;\n+    }\n+\n+    public int getId2() {\n+        return id2;\n+    }\n+\n+    public EmbeddedPC getEmbedded() {\n+        return this.embedded;\n+    }\n+\n+    public void setEmbedded(EmbeddedPC embedded) {\n+        this.embedded = embedded;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public ComplexEmbeddedPC getComplexEmbedded() {\n+        return this.complexEmbedded;\n+    }\n+\n+    public void setComplexEmbedded(ComplexEmbeddedPC complexEmbedded) {\n+        this.complexEmbedded = complexEmbedded;\n+    }\n+}"},{"sha":"e4a18faf00adcfd6400922d94669255760da0583","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/EmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import org.apache.openjpa.kernel.*;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import java.lang.annotation.Annotation;\r\n-\r\n-/**\r\n- * <p>Embedded type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-\r\n-@Entity\r\n-public class EmbeddedPC {\r\n-\r\n-    private int intField;\r\n-    private String stringField;\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import org.apache.openjpa.kernel.*;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import java.lang.annotation.Annotation;\n+\n+/**\n+ * <p>Embedded type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+\n+@Entity\n+public class EmbeddedPC {\n+\n+    private int intField;\n+    private String stringField;\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+}"},{"sha":"a5ba18c6e45ed71f96344773d0b838478782affa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-import javax.persistence.*;\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@SuppressWarnings(\"serial\")\r\n-@Entity\r\n-public class HelperPC implements Serializable\r\n-{\r\n-\t@Column(length=50, name=\"strngfld\")\r\n-\tprivate String \t\tstringField;\r\n-\r\n-\tprivate HelperPC \thelper;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate EagerPC\t\teager;\r\n-\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\tpublic HelperPC()\r\n-\t{}\r\n-\r\n-\tpublic HelperPC(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\tpublic HelperPC getHelper ()\r\n-\t{\r\n-\t\treturn this.helper;\r\n-\t}\r\n-\r\n-\tpublic void setHelper (HelperPC helper)\r\n-\t{\r\n-\t\tthis.helper = helper;\r\n-\t}\r\n-\r\n-\tpublic EagerPC getEager ()\r\n-\t{\r\n-\t\treturn this.eager;\r\n-\t}\r\n-\r\n-\tpublic void setEager (EagerPC eager)\r\n-\t{\r\n-\t\tthis.eager = eager;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.*;\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@SuppressWarnings(\"serial\")\n+@Entity\n+public class HelperPC implements Serializable\n+{\n+\t@Column(length=50, name=\"strngfld\")\n+\tprivate String \t\tstringField;\n+\n+\tprivate HelperPC \thelper;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate EagerPC\t\teager;\n+\n+\t@Id\n+\tprivate int id;\n+\n+\tpublic HelperPC()\n+\t{}\n+\n+\tpublic HelperPC(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\tpublic HelperPC getHelper ()\n+\t{\n+\t\treturn this.helper;\n+\t}\n+\n+\tpublic void setHelper (HelperPC helper)\n+\t{\n+\t\tthis.helper = helper;\n+\t}\n+\n+\tpublic EagerPC getEager ()\n+\t{\n+\t\treturn this.eager;\n+\t}\n+\n+\tpublic void setEager (EagerPC eager)\n+\t{\n+\t\tthis.eager = eager;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+}"},{"sha":"f4ddd7e6c73592c0a863bc2d91c73c36054e12a4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,90 +1,90 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-public class HelperPC2\r\n-{\r\n-\t@Column(name=\"strngfld\", length=50)\r\n-\tprivate String \t\tstringField;\r\n-\r\n-\t@Id @GeneratedValue\r\n-\tprivate int id;\r\n-\r\n-\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\r\n-\tprivate HelperPC3 \thelper;\r\n-\t@Column(name=\"helpcoll\")\r\n-\tprivate List\t\thelperCollection = new LinkedList ();\r\n-\r\n-\tpublic HelperPC2()\r\n-\t{}\r\n-\r\n-\tpublic HelperPC2(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\tpublic HelperPC3 getHelper ()\r\n-\t{\r\n-\t\treturn this.helper;\r\n-\t}\r\n-\r\n-\tpublic void setHelper (HelperPC3 helper)\r\n-\t{\r\n-\t\tthis.helper = helper;\r\n-\t}\r\n-\r\n-\tpublic List getHelperCollection ()\r\n-\t{\r\n-\t\treturn this.helperCollection;\r\n-\t}\r\n-\r\n-\tpublic void setHelperCollection (List helperCollection)\r\n-\t{\r\n-\t\tthis.helperCollection = helperCollection;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+\n+import javax.persistence.*;\n+\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+public class HelperPC2\n+{\n+\t@Column(name=\"strngfld\", length=50)\n+\tprivate String \t\tstringField;\n+\n+\t@Id @GeneratedValue\n+\tprivate int id;\n+\n+\t@OneToOne(cascade={CascadeType.PERSIST, CascadeType.REMOVE})\n+\tprivate HelperPC3 \thelper;\n+\t@Column(name=\"helpcoll\")\n+\tprivate List\t\thelperCollection = new LinkedList ();\n+\n+\tpublic HelperPC2()\n+\t{}\n+\n+\tpublic HelperPC2(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\tpublic HelperPC3 getHelper ()\n+\t{\n+\t\treturn this.helper;\n+\t}\n+\n+\tpublic void setHelper (HelperPC3 helper)\n+\t{\n+\t\tthis.helper = helper;\n+\t}\n+\n+\tpublic List getHelperCollection ()\n+\t{\n+\t\treturn this.helperCollection;\n+\t}\n+\n+\tpublic void setHelperCollection (List helperCollection)\n+\t{\n+\t\tthis.helperCollection = helperCollection;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+}"},{"sha":"5e388563a95da25c9f1b22b3d2e2847ebc6c0a4d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-public class HelperPC3\r\n-{\r\n-\t@Column(name=\"strngfld\", length=50)\r\n-\tprivate String stringField;\r\n-\r\n-\t@Id\r\n-\tprivate int id;\r\n-\r\n-\tpublic HelperPC3()\r\n-\t{\r\n-\t}\r\n-\r\n-\tpublic HelperPC3(int id)\r\n-\t{\r\n-\t\tthis.id = id;\r\n-\t}\r\n-\r\n-\tpublic String getStringField ()\r\n-\t{\r\n-\t\treturn this.stringField;\r\n-\t}\r\n-\r\n-\tpublic void setStringField (String stringField)\r\n-\t{\r\n-\t\tthis.stringField = stringField;\r\n-\t}\r\n-\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic void setId(int id) {\r\n-\t\tthis.id = id;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.*;\n+\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class HelperPC3\n+{\n+\t@Column(name=\"strngfld\", length=50)\n+\tprivate String stringField;\n+\n+\t@Id\n+\tprivate int id;\n+\n+\tpublic HelperPC3()\n+\t{\n+\t}\n+\n+\tpublic HelperPC3(int id)\n+\t{\n+\t\tthis.id = id;\n+\t}\n+\n+\tpublic String getStringField ()\n+\t{\n+\t\treturn this.stringField;\n+\t}\n+\n+\tpublic void setStringField (String stringField)\n+\t{\n+\t\tthis.stringField = stringField;\n+\t}\n+\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic void setId(int id) {\n+\t\tthis.id = id;\n+\t}\n+}"},{"sha":"49c668781eccfa1115b988d99fb3946bad3025b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HelperPC4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-/**\r\n- *\t<p>Persistent type used in testing.</p>\r\n- *\r\n- *\t@author\t\tAbe White\r\n- */\r\n-@Entity\r\n-@DiscriminatorValue(\"helppc4\")\r\n-public class HelperPC4 extends HelperPC3\r\n-{\r\n-\tprivate int intField;\r\n-\r\n-\tpublic int getIntField ()\r\n-\t{\r\n-\t\treturn this.intField;\r\n-\t}\r\n-\r\n-\r\n-\tpublic void setIntField (int intField)\r\n-\t{\r\n-\t\tthis.intField = intField;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.*;\n+\n+\n+/**\n+ *\t<p>Persistent type used in testing.</p>\n+ *\n+ *\t@author\t\tAbe White\n+ */\n+@Entity\n+@DiscriminatorValue(\"helppc4\")\n+public class HelperPC4 extends HelperPC3\n+{\n+\tprivate int intField;\n+\n+\tpublic int getIntField ()\n+\t{\n+\t\treturn this.intField;\n+\t}\n+\n+\n+\tpublic void setIntField (int intField)\n+\t{\n+\t\tthis.intField = intField;\n+\t}\n+}"},{"sha":"555015c7564de66d03f606fd266a07e0ecd16095","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import java.io.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public abstract class HorizA\r\n-    implements Serializable {\r\n-\r\n-    private String stringA;\r\n-    private int intA;\r\n-    private Set relations = new HashSet();\r\n-\r\n-    public void setStringA(String stringA) {\r\n-        this.stringA = stringA;\r\n-    }\r\n-\r\n-    public String getStringA() {\r\n-        return this.stringA;\r\n-    }\r\n-\r\n-    public void setIntA(int intA) {\r\n-        this.intA = intA;\r\n-    }\r\n-\r\n-    public int getIntA() {\r\n-        return this.intA;\r\n-    }\r\n-\r\n-    public void setRelations(Set relations) {\r\n-        this.relations = relations;\r\n-    }\r\n-\r\n-    public Set getRelations() {\r\n-        return this.relations;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import java.io.*;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public abstract class HorizA\n+    implements Serializable {\n+\n+    private String stringA;\n+    private int intA;\n+    private Set relations = new HashSet();\n+\n+    public void setStringA(String stringA) {\n+        this.stringA = stringA;\n+    }\n+\n+    public String getStringA() {\n+        return this.stringA;\n+    }\n+\n+    public void setIntA(int intA) {\n+        this.intA = intA;\n+    }\n+\n+    public int getIntA() {\n+        return this.intA;\n+    }\n+\n+    public void setRelations(Set relations) {\n+        this.relations = relations;\n+    }\n+\n+    public Set getRelations() {\n+        return this.relations;\n+    }\n+}"},{"sha":"ca4b4e3e92b95221e6bfd460e90507da7bc9d941","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,44 +1,44 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-\r\n-import serp.util.*;\r\n-\r\n-public interface HorizAppA {\r\n-\r\n-    public void setPk1(String pk1);\r\n-\r\n-    public String getPk1();\r\n-\r\n-    public void setPk2(int pk2);\r\n-\r\n-    public int getPk2();\r\n-\r\n-    public void setStringA(String stringA);\r\n-\r\n-    public String getStringA();\r\n-\r\n-    public void setIntA(int intA);\r\n-\r\n-    public int getIntA();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+\n+import serp.util.*;\n+\n+public interface HorizAppA {\n+\n+    public void setPk1(String pk1);\n+\n+    public String getPk1();\n+\n+    public void setPk2(int pk2);\n+\n+    public int getPk2();\n+\n+    public void setStringA(String stringA);\n+\n+    public String getStringA();\n+\n+    public void setIntA(int intA);\n+\n+    public int getIntA();\n+}"},{"sha":"6c9145ffcdc0b68edc4b81080b54de78443fc63e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-\r\n-import serp.util.*;\r\n-\r\n-public interface HorizAppB\r\n-    extends HorizAppA {\r\n-\r\n-    public void setStringB(String stringB);\r\n-\r\n-    public String getStringB();\r\n-\r\n-    public void setIntB(int intB);\r\n-\r\n-    public int getIntB();\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+\n+import serp.util.*;\n+\n+public interface HorizAppB\n+    extends HorizAppA {\n+\n+    public void setStringB(String stringB);\n+\n+    public String getStringB();\n+\n+    public void setIntB(int intB);\n+\n+    public int getIntB();\n+}\n+"},{"sha":"fc4cf5a1af139befa97545d68f7eae8c60fa56e0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-\r\n-import serp.util.*;\r\n-\r\n-public interface HorizAppC\r\n-    extends HorizAppA {\r\n-\r\n-    public void setStringC(String stringC);\r\n-\r\n-    public String getStringC();\r\n-\r\n-    public void setIntC(int intC);\r\n-\r\n-    public int getIntC();\r\n-}\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+\n+import serp.util.*;\n+\n+public interface HorizAppC\n+    extends HorizAppA {\n+\n+    public void setStringC(String stringC);\n+\n+    public String getStringC();\n+\n+    public void setIntC(int intC);\n+\n+    public int getIntC();\n+}\n+\n+"},{"sha":"c3c7d5485ed2ec8db96978df4595afa488a35808","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,40 +1,40 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-\r\n-import serp.util.*;\r\n-\r\n-public interface HorizAppD\r\n-    extends HorizAppA {\r\n-\r\n-    public void setStringD(String stringD);\r\n-\r\n-    public String getStringD();\r\n-\r\n-    public void setIntD(int intD);\r\n-\r\n-    public int getIntD();\r\n-}\r\n-\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+\n+import serp.util.*;\n+\n+public interface HorizAppD\n+    extends HorizAppA {\n+\n+    public void setStringD(String stringD);\n+\n+    public String getStringD();\n+\n+    public void setIntD(int intD);\n+\n+    public int getIntD();\n+}\n+\n+\n+"},{"sha":"625c3a9cde08b731d8a86089d8e7908ec9d35098","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,76 +1,76 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * Interface for intermediate horizontal mappings with flat mappings.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-@Entity\r\n-public class HorizAppInterVerticalA\r\n-    implements HorizInterA {\r\n-\r\n-    private int pk;\r\n-    private String stringA;\r\n-    private int intA;\r\n-\r\n-    public void setStringA(String stringA) {\r\n-        this.stringA = stringA;\r\n-    }\r\n-\r\n-    public String getStringA() {\r\n-        return this.stringA;\r\n-    }\r\n-\r\n-    public void setIntA(int intA) {\r\n-        this.intA = intA;\r\n-    }\r\n-\r\n-    public int getIntA() {\r\n-        return this.intA;\r\n-    }\r\n-\r\n-    public static class Id implements java.io.Serializable {\r\n-\r\n-        public int pk;\r\n-\r\n-        public Id() {\r\n-        }\r\n-\r\n-        public Id(String str) {\r\n-            pk = Integer.parseInt(str);\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk + \"\";\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return pk;\r\n-        }\r\n-\r\n-        public boolean equals(Object other) {\r\n-            return other instanceof Id\r\n-                && ((Id) other).pk == pk;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * Interface for intermediate horizontal mappings with flat mappings.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+@Entity\n+public class HorizAppInterVerticalA\n+    implements HorizInterA {\n+\n+    private int pk;\n+    private String stringA;\n+    private int intA;\n+\n+    public void setStringA(String stringA) {\n+        this.stringA = stringA;\n+    }\n+\n+    public String getStringA() {\n+        return this.stringA;\n+    }\n+\n+    public void setIntA(int intA) {\n+        this.intA = intA;\n+    }\n+\n+    public int getIntA() {\n+        return this.intA;\n+    }\n+\n+    public static class Id implements java.io.Serializable {\n+\n+        public int pk;\n+\n+        public Id() {\n+        }\n+\n+        public Id(String str) {\n+            pk = Integer.parseInt(str);\n+        }\n+\n+        public String toString() {\n+            return pk + \"\";\n+        }\n+\n+        public int hashCode() {\n+            return pk;\n+        }\n+\n+        public boolean equals(Object other) {\n+            return other instanceof Id\n+                && ((Id) other).pk == pk;\n+        }\n+    }\n+}"},{"sha":"8264f726292a69813e2f19fb040beb45980b975b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * Interface for intermediate horizontal mappings with flat mappings.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-@Entity\r\n-public class HorizAppInterVerticalB\r\n-    extends HorizAppInterVerticalA\r\n-    implements HorizInterB {\r\n-\r\n-    private String stringB;\r\n-    private int intB;\r\n-\r\n-    public void setStringB(String stringB) {\r\n-        this.stringB = stringB;\r\n-    }\r\n-\r\n-    public String getStringB() {\r\n-        return this.stringB;\r\n-    }\r\n-\r\n-    public void setIntB(int intB) {\r\n-        this.intB = intB;\r\n-    }\r\n-\r\n-    public int getIntB() {\r\n-        return this.intB;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * Interface for intermediate horizontal mappings with flat mappings.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+@Entity\n+public class HorizAppInterVerticalB\n+    extends HorizAppInterVerticalA\n+    implements HorizInterB {\n+\n+    private String stringB;\n+    private int intB;\n+\n+    public void setStringB(String stringB) {\n+        this.stringB = stringB;\n+    }\n+\n+    public String getStringB() {\n+        return this.stringB;\n+    }\n+\n+    public void setIntB(int intB) {\n+        this.intB = intB;\n+    }\n+\n+    public int getIntB() {\n+        return this.intB;\n+    }\n+}\n+"},{"sha":"057805da953fad04eb308e79c5ab38cc98214b7b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * Interface for intermediate horizontal mappings with flat mappings.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-@Entity\r\n-public class HorizAppInterVerticalC\r\n-    extends HorizAppInterVerticalB\r\n-    implements HorizInterC {\r\n-\r\n-    private String stringC;\r\n-    private int intC;\r\n-\r\n-    public void setStringC(String stringC) {\r\n-        this.stringC = stringC;\r\n-    }\r\n-\r\n-    public String getStringC() {\r\n-        return this.stringC;\r\n-    }\r\n-\r\n-    public void setIntC(int intC) {\r\n-        this.intC = intC;\r\n-    }\r\n-\r\n-    public int getIntC() {\r\n-        return this.intC;\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * Interface for intermediate horizontal mappings with flat mappings.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+@Entity\n+public class HorizAppInterVerticalC\n+    extends HorizAppInterVerticalB\n+    implements HorizInterC {\n+\n+    private String stringC;\n+    private int intC;\n+\n+    public void setStringC(String stringC) {\n+        this.stringC = stringC;\n+    }\n+\n+    public String getStringC() {\n+        return this.stringC;\n+    }\n+\n+    public void setIntC(int intC) {\n+        this.intC = intC;\n+    }\n+\n+    public int getIntC() {\n+        return this.intC;\n+    }\n+}\n+"},{"sha":"cbbd3fb4d56f47e06cbfb85c1765e842027cb7ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppInterVerticalD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * Interface for intermediate horizontal mappings with flat mappings.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-@Entity\r\n-public class HorizAppInterVerticalD\r\n-    extends HorizAppInterVerticalB\r\n-    implements HorizInterD {\r\n-\r\n-    private String stringD;\r\n-    private int intD;\r\n-\r\n-    public void setStringD(String stringD) {\r\n-        this.stringD = stringD;\r\n-    }\r\n-\r\n-    public String getStringD() {\r\n-        return this.stringD;\r\n-    }\r\n-\r\n-    public void setIntD(int intD) {\r\n-        this.intD = intD;\r\n-    }\r\n-\r\n-    public int getIntD() {\r\n-        return this.intD;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * Interface for intermediate horizontal mappings with flat mappings.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+@Entity\n+public class HorizAppInterVerticalD\n+    extends HorizAppInterVerticalB\n+    implements HorizInterD {\n+\n+    private String stringD;\n+    private int intD;\n+\n+    public void setStringD(String stringD) {\n+        this.stringD = stringD;\n+    }\n+\n+    public String getStringD() {\n+        return this.stringD;\n+    }\n+\n+    public void setIntD(int intD) {\n+        this.intD = intD;\n+    }\n+\n+    public int getIntD() {\n+        return this.intD;\n+    }\n+}"},{"sha":"adbf600c720ae83dfbf16d5810f97243c37301e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,122 +1,122 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import serp.util.*;\r\n-\r\n-@Entity\r\n-public class HorizAppMultiA\r\n-    implements HorizAppA {\r\n-\r\n-    // initialize PK values to random values\r\n-\t//FIXME \r\n-\t/*\r\n-    private String pk1 = \"PK-\" + Strings.getClassName(getClass().getName());\r\n-    private int pk2 = com.solarmetric.test.AbstractTestCase.\r\n-        randomInt().intValue();\r\n-    */\r\n-\tprivate String pk1;\r\n-    private int pk2;\r\n-\t\r\n-\r\n-    private String stringA;\r\n-    private int intA;\r\n-    private List relations = new ArrayList();\r\n-\r\n-    public void setPk1(String pk1) {\r\n-        this.pk1 = pk1;\r\n-    }\r\n-\r\n-    public String getPk1() {\r\n-        return this.pk1;\r\n-    }\r\n-\r\n-    public void setPk2(int pk2) {\r\n-        this.pk2 = pk2;\r\n-    }\r\n-\r\n-    public int getPk2() {\r\n-        return this.pk2;\r\n-    }\r\n-\r\n-    public void setStringA(String stringA) {\r\n-        this.stringA = stringA;\r\n-    }\r\n-\r\n-    public String getStringA() {\r\n-        return this.stringA;\r\n-    }\r\n-\r\n-    public void setIntA(int intA) {\r\n-        this.intA = intA;\r\n-    }\r\n-\r\n-    public int getIntA() {\r\n-        return this.intA;\r\n-    }\r\n-\r\n-    public static class ID\r\n-        implements Serializable {\r\n-\r\n-        public String pk1;\r\n-        public int pk2;\r\n-\r\n-        public ID() {\r\n-        }\r\n-\r\n-        public ID(String str) {\r\n-            StringTokenizer tok = new StringTokenizer(str, \":\");\r\n-            pk1 = tok.nextToken();\r\n-            pk2 = Integer.parseInt(tok.nextToken());\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk1 + \":\" + pk2;\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return (pk2 + (pk1 == null ? 0 : pk1.hashCode()))\r\n-                % Integer.MAX_VALUE;\r\n-        }\r\n-\r\n-        public boolean equals(Object other) {\r\n-            return other instanceof ID\r\n-                && ((ID) other).pk2 == pk2\r\n-                && (((ID) other).pk1 == null\r\n-                ? pk1 == null\r\n-                : ((ID) other).pk1.equals(pk1));\r\n-        }\r\n-    }\r\n-\r\n-    public void setRelations(List relations) {\r\n-        this.relations = relations;\r\n-    }\r\n-\r\n-    public List getRelations() {\r\n-        return this.relations;\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import javax.persistence.Entity;\n+\n+import serp.util.*;\n+\n+@Entity\n+public class HorizAppMultiA\n+    implements HorizAppA {\n+\n+    // initialize PK values to random values\n+\t//FIXME \n+\t/*\n+    private String pk1 = \"PK-\" + Strings.getClassName(getClass().getName());\n+    private int pk2 = com.solarmetric.test.AbstractTestCase.\n+        randomInt().intValue();\n+    */\n+\tprivate String pk1;\n+    private int pk2;\n+\t\n+\n+    private String stringA;\n+    private int intA;\n+    private List relations = new ArrayList();\n+\n+    public void setPk1(String pk1) {\n+        this.pk1 = pk1;\n+    }\n+\n+    public String getPk1() {\n+        return this.pk1;\n+    }\n+\n+    public void setPk2(int pk2) {\n+        this.pk2 = pk2;\n+    }\n+\n+    public int getPk2() {\n+        return this.pk2;\n+    }\n+\n+    public void setStringA(String stringA) {\n+        this.stringA = stringA;\n+    }\n+\n+    public String getStringA() {\n+        return this.stringA;\n+    }\n+\n+    public void setIntA(int intA) {\n+        this.intA = intA;\n+    }\n+\n+    public int getIntA() {\n+        return this.intA;\n+    }\n+\n+    public static class ID\n+        implements Serializable {\n+\n+        public String pk1;\n+        public int pk2;\n+\n+        public ID() {\n+        }\n+\n+        public ID(String str) {\n+            StringTokenizer tok = new StringTokenizer(str, \":\");\n+            pk1 = tok.nextToken();\n+            pk2 = Integer.parseInt(tok.nextToken());\n+        }\n+\n+        public String toString() {\n+            return pk1 + \":\" + pk2;\n+        }\n+\n+        public int hashCode() {\n+            return (pk2 + (pk1 == null ? 0 : pk1.hashCode()))\n+                % Integer.MAX_VALUE;\n+        }\n+\n+        public boolean equals(Object other) {\n+            return other instanceof ID\n+                && ((ID) other).pk2 == pk2\n+                && (((ID) other).pk1 == null\n+                ? pk1 == null\n+                : ((ID) other).pk1.equals(pk1));\n+        }\n+    }\n+\n+    public void setRelations(List relations) {\n+        this.relations = relations;\n+    }\n+\n+    public List getRelations() {\n+        return this.relations;\n+    }\n+}\n+\n+\n+"},{"sha":"a02c7ade92152238bd724ea6a1af04f9e030890d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class HorizAppMultiB\r\n-    extends HorizAppMultiA\r\n-    implements HorizAppB {\r\n-\r\n-    private String stringB;\r\n-    private int intB;\r\n-\r\n-    public void setStringB(String stringB) {\r\n-        this.stringB = stringB;\r\n-    }\r\n-\r\n-    public String getStringB() {\r\n-        return this.stringB;\r\n-    }\r\n-\r\n-    public void setIntB(int intB) {\r\n-        this.intB = intB;\r\n-    }\r\n-\r\n-    public int getIntB() {\r\n-        return this.intB;\r\n-    }\r\n-\r\n-    public static class ID\r\n-        extends HorizAppMultiA.ID {\r\n-\r\n-        public ID() {\r\n-            super();\r\n-        }\r\n-\r\n-        public ID(String str) {\r\n-            super(str);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class HorizAppMultiB\n+    extends HorizAppMultiA\n+    implements HorizAppB {\n+\n+    private String stringB;\n+    private int intB;\n+\n+    public void setStringB(String stringB) {\n+        this.stringB = stringB;\n+    }\n+\n+    public String getStringB() {\n+        return this.stringB;\n+    }\n+\n+    public void setIntB(int intB) {\n+        this.intB = intB;\n+    }\n+\n+    public int getIntB() {\n+        return this.intB;\n+    }\n+\n+    public static class ID\n+        extends HorizAppMultiA.ID {\n+\n+        public ID() {\n+            super();\n+        }\n+\n+        public ID(String str) {\n+            super(str);\n+        }\n+    }\n+}"},{"sha":"eb4864828249c17a24561ebae858813ceaf52654","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class HorizAppMultiC\r\n-    extends HorizAppMultiA\r\n-    implements HorizAppC {\r\n-\r\n-    private String stringC;\r\n-    private int intC;\r\n-\r\n-    public void setStringC(String stringC) {\r\n-        this.stringC = stringC;\r\n-    }\r\n-\r\n-    public String getStringC() {\r\n-        return this.stringC;\r\n-    }\r\n-\r\n-    public void setIntC(int intC) {\r\n-        this.intC = intC;\r\n-    }\r\n-\r\n-    public int getIntC() {\r\n-        return this.intC;\r\n-    }\r\n-\r\n-    public static class ID\r\n-        extends HorizAppMultiA.ID {\r\n-\r\n-        public ID() {\r\n-            super();\r\n-        }\r\n-\r\n-        public ID(String str) {\r\n-            super(str);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class HorizAppMultiC\n+    extends HorizAppMultiA\n+    implements HorizAppC {\n+\n+    private String stringC;\n+    private int intC;\n+\n+    public void setStringC(String stringC) {\n+        this.stringC = stringC;\n+    }\n+\n+    public String getStringC() {\n+        return this.stringC;\n+    }\n+\n+    public void setIntC(int intC) {\n+        this.intC = intC;\n+    }\n+\n+    public int getIntC() {\n+        return this.intC;\n+    }\n+\n+    public static class ID\n+        extends HorizAppMultiA.ID {\n+\n+        public ID() {\n+            super();\n+        }\n+\n+        public ID(String str) {\n+            super(str);\n+        }\n+    }\n+}"},{"sha":"1906ba2ffd50824651d49749fea9dcbff964dcf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppMultiD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.common.apps;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class HorizAppMultiD\r\n-    extends HorizAppMultiA\r\n-    implements HorizAppD {\r\n-\r\n-    private String stringD;\r\n-    private int intD;\r\n-\r\n-    public void setStringD(String stringD) {\r\n-        this.stringD = stringD;\r\n-    }\r\n-\r\n-    public String getStringD() {\r\n-        return this.stringD;\r\n-    }\r\n-\r\n-    public void setIntD(int intD) {\r\n-        this.intD = intD;\r\n-    }\r\n-\r\n-    public int getIntD() {\r\n-        return this.intD;\r\n-    }\r\n-\r\n-    public static class ID\r\n-        extends HorizAppMultiA.ID {\r\n-\r\n-        public ID() {\r\n-            super();\r\n-        }\r\n-\r\n-        public ID(String str) {\r\n-            super(str);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.common.apps;\n+\n+import java.util.*;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class HorizAppMultiD\n+    extends HorizAppMultiA\n+    implements HorizAppD {\n+\n+    private String stringD;\n+    private int intD;\n+\n+    public void setStringD(String stringD) {\n+        this.stringD = stringD;\n+    }\n+\n+    public String getStringD() {\n+        return this.stringD;\n+    }\n+\n+    public void setIntD(int intD) {\n+        this.intD = intD;\n+    }\n+\n+    public int getIntD() {\n+        return this.intD;\n+    }\n+\n+    public static class ID\n+        extends HorizAppMultiA.ID {\n+\n+        public ID() {\n+            super();\n+        }\n+\n+        public ID(String str) {\n+            super(str);\n+        }\n+    }\n+}"},{"sha":"5178653172918c20d78f0b9c0810455681a9db2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ac5ea797e38ad27f95064fb2d8a91fe7e3f88ce2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"abd7634dbb201e95787d9698f9f68547d7bbe2d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f0f2dc477c7fc1252c608f4d52108ec37a709ae7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizAppSingleD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fc7db699278e1af3454809f4bc42e1283d5192fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"733bdf637b1997aa78e9e1946afa4deb9dc77f7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9058c8f249822b38b7585be0495555f98afb0609","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"57dd08db77ddfff8c5c446ff36aa85dea1c8106e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3f228487c8c8f3d73afc8a9aa00338b1de392491","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ca4f2973e0664bd486372b17e5f99dab87c7cb40","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizG.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"23857266fcdb6e4124a71728aa793fb5cc501d11","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizH.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"290d10b7179a0e9fb7d1e7ec9a5adf8de1bacffa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizI.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"09b1d3bfc56c25e4c40bdd8772d9a3cb5a5ef0ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"11dc09fd88917312d424d6ae69e0fa75cd1a78ef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"05545a868834ee8e188525fcf3dc54c4f33f53ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d572b042a3c2c395bb72144a92ec9be54eb33b72","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eaee845972cdf746b039923168ae0f63d86afbcb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"dddd88240b3a13266fcc4be4bdbd80fe7343a76b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"59dcff3f436625b18a60aaeaced0adad41413365","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"10997d57ed15be7f30ccced99fd81a252048f35c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterFlatD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"064ae8b983831883ef181af937e49bc75917d731","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"da890e15d174257db5023d9c464e938827c5429c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7fa928b100dcdd4e0b72ccfa5938c89be19b4711","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"758494e22dba0ffdad92b2c07e7c295b64758aaf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizInterVerticalD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f8d1a3330b8378e970f56908ec0da324b0d0f863","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizJ.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e02ae025a131d5fd681a718480ff1679a96d1c7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizK.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c16fdf5d25dc56040cea1323784fc02ba5c65463","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"63074652a6bb01ac2e13d17fee3abf6c9951585d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizM.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cf15496ee3fd078317ab11618c6cc350b31dcc08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizN.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f7b2ac77d94d458d8c6b2976b0dc47bc40790be5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizO.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f2c34033d48499cb76496ac198cac2efbc267d40","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","status":"modified","additions":406,"deletions":406,"changes":812,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/HorizRelation.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"16caf17f53afd2abbd399b1f563d4c3afbb40b82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InverseKeyMapPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"02c3c5fcfc3c64dce04ca5a4a81a27a34a7a32fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ffd601f35a29ba6125d9f9e1da22a37e0a3d139a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/InvertB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6d7f6c87f5f9ac0ab59d4128b6651459e63f8af1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d4a8df6d070edfda94b9c5851aa537ea0faffb2f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubFlat.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"84c00cb936f758a2b3b0efc3de79efd6eae9c2b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinSubclassBaseSubVert.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9eb0c1ef25ca456b1d6696c74e6f617552763c75","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/JoinTableMapPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c146048c88b0548b3ff94fafec7a58f7449aa04e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSCompoundPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4de696878a7b27190e68143739f605ddc5c85e70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","status":"modified","additions":107,"deletions":107,"changes":214,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"36b817175fce9552d6d877c6a9fb119f45da7c81","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LRSPCIntf.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"77893d836c2169fe47e9b315234fd7904341b4dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LocatorTestObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6b40b1f58af87ea13b43af6cbbf6996322645675","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/LockGroupSubclass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6c2c9918e89112e6fa484a94599bb7d4798edfe4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappedByMapPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bacc415652c5a22f8ca21cecc29de82be6fb38a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","status":"modified","additions":254,"deletions":254,"changes":508,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"24fc671d535c654445f2f55ca9931331153e7f6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"11c93b08589cf770441111511dd5fb9019697471","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest2ID.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1c66b164d12742ab282e255de1843c941af3c472","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"741272ab1154254de1d3f59401fed5393ca35391","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6c4999bdd288391485f4e240c17944913761fb15","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MappingTest5.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6d94fd1479d79bdc75c0c387867f307ea0c421d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1d985906b0f1f492f95a6d47418e2e7832549a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d245e596e26691e21b9de0ea7a398cc78a426c73","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ca9209d1d29d3f7dc1e8f387ea15c561d2cd3bf1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c0dd69824d904d8b56cf4dede9d68666d21ad449","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9d5bbc11dc5a9280392104cab2024b2377944ce3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/MultiF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"182e0aaeb6e233df5c9c61d81c2a71e8c0fe9529","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NamedSQL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e2d90115b81b2aa8d98059add66cd35ede4268f0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NoClassColumn.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bb57f3118d6acd022a7b797bd2d934bd617a3dd9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fab232554cd954ca38cc6a7577db182fffb57d5a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"72da97f9a4172fccdd6de693eed21bfca78600af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/NonPKJoinPC3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"100e9d231dba34d351d54296f314951ae69d3bcd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e12e5d5df3c45f97587e5b8111ec1d5631d0eda0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b3d4d397e0d1fc032dc9c69800f0afa7c00bc76e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/OpOrderPCSub.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d77d1b0e260c86bb3e059e9ce61626ea5417ed32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingAppIdPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3aaba4eead284b709b0b86249e7a53c5c543f330","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingHelperPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7e169ef7ef06dd7b7e36542aa8fd5e24b545addc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PagingPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6678d3ddcdcdb8e44ada6d6f0bf215745b7e3787","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"924e12f3b9519dbac44abe2bd699c1006b03fea8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b5f5d19d755edfff2286fc54cf811037176e5734","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PartialJoinPC3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a322ac72e61bdfd7e73c53b462e29cc5bd2a5ad7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f48a789dc0418e79779a72f400854455b6f97711","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7a06f48197afc85b791b5c91b0f871bf499bcf20","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PerClassTestObject3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"126c2d433941e464d9b0f3914a248c114a9d58ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4ebbaf31d76fc68be0b86fd0eb094ca2b26e9261","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PlaceholderTypesB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e7060fe54beb07c12e1c2b601cc8e70df9d03bf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostAttachCallback.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5ce64b22415ad696262592c4b7f7447886d2c563","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PostDetachCallback.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"611a66a0ae792ca8ad468b68ca0a94ad163935ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreAttachCallback.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8d091b062b63480f7aed05096724a3d14bbd7a5d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/PreDetachCallback.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ad80635e034fb6063c49b6f35cc7b7c25104ea9d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/QueryTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"01cdf263260b31384b390c1775778301e08dbcd4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawField.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c51ba11ef03ee71b1d59f8be48c7fe6f5cd2a4ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RawSQL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9d21f16636b3636fe6d95f005079fb948fa73cf4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RecursivelyEmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7c8388455671a23bfcdf63d7a35eb1f0c3b1e869","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/Relations.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"00d0938e7682aa9fa93c457bc2e77dd20bd5a914","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","status":"modified","additions":131,"deletions":131,"changes":262,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4f2456404d4ee4bdfed92c3a09ae501c88f9e667","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ab668551503aef1c89ccb8fc2439e3471438295f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/RuntimeTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"92360a48c2cf37d8029c1b3d173875b3c3f8f498","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0bfaea3a0623dd04981d91850bf015cfcf55ac2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"592010ec98ba0f2e070974722b4d8d0ada188512","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3f978e9f1be92412e5c7773e078100e1c99af0f8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6432fe0ab9f0ba67220e50c3f3c85060c269faae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5f7b0044a9b3f412bddf085bf015e96e76bb6492","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1401dcb6ed1fd0a1bf8efd4e5ed4775b541fa0ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/SeqG.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1a0c52bba6860c6774640957ffc17fd3566ae09d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0a64cbfd5f6b091c33ba59ea010bc296305e1cfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c42e119fa115f6db9a9ce741a1310d72a45c6ada","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/StateImagePC3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eb85b689648827eca73dfd3f0e4909134ae17a53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/TransactionalClassPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"55930aa13be75040165d1d57c874167910f88240","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwned.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2b20accebb58d7a60ee927b0afff58372162147a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnidirectionalOneToOneOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bcf9846892fb485dbda7d15c5e1268066cdf151c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/UnknownSubclassParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"606de5997db955556e5c12a3bda57951ce50fbf5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/CompositeId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"62e56dfe3fe6530b90614e42e1c9bf2381aef7c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1e47ca405f27413c428fd7616173e3c32c59db55","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/Entity2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a928ddace914c521b82831e370a497f7f688fac2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/EntityWithCompositeId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f36b35822e0054ce5b887331a76f5760a3eba53c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/OwnerOfEntityWithCompositeId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"15757f5447693f69359bfd782b703b2cd2449af4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/RecursiveEntityWithCompositeId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4e38c4146f57c33d626f7f94853a5f0d8254f9c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","status":"modified","additions":177,"deletions":177,"changes":354,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapAddress.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"625413f73097537622dea76849816e60f48996ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","status":"modified","additions":157,"deletions":157,"changes":314,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapItem.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fd546a1a3c9996df4adc6f50cebb56dbedf24aa7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapOrder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"652cd93a705638e69e5cc4341b447f645561c710","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/SQLMapPerson.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f87f5d32727a60b5f26ce753b8fa4c90d3cd7377","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","status":"modified","additions":191,"deletions":191,"changes":382,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/BaseJDBCTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6e03bd59b75cc3664d2d90d44cf56aaed6d85a07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/JDBCTestCase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d54d1b928926b83a645846765a92b17042abf1c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","status":"modified","additions":373,"deletions":373,"changes":746,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestByteArrayAppId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5427d8145fdd0f8e3cb8ab9541a8f2c97e1131ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","status":"modified","additions":139,"deletions":139,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestCircularFK.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"acc5341b81781afa9561f85cd6837f05c23a40dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","status":"modified","additions":199,"deletions":199,"changes":398,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestDataStoreTrips.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"96cafa7fe8e01c62b74500a19338371f37dc182e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","status":"modified","additions":238,"deletions":238,"changes":476,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEJBAutoIncrement.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"188724b57c32b4bddf6f8b1751cc2ba2241d3dae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","status":"modified","additions":121,"deletions":121,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEfficientAttach.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4df2e5d4551c83c32253ad516a42b12c9d6d8d5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","status":"modified","additions":285,"deletions":285,"changes":570,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestEmbeddedPessimisticLocking.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7c3a4d15cdecf96ec5ae2f9967eac71fcab65ba9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestIncrementalJDBCFlushes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a62a7c67718ddefa5961f2343605c64b11bfab45","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","status":"modified","additions":319,"deletions":319,"changes":638,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestOperationOrderUpdateManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5a6ddfd0b147f38e91a3b5f246cbc13c69e059b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","status":"modified","additions":656,"deletions":656,"changes":1312,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestPagingResultObjectProvider.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ef66634821d7e41c2b10f2700377fe28d451a60b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","status":"modified","additions":180,"deletions":180,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestRawSQL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"432b80ffe45e98dc5b8d91a2caa91e9cdbd9d796","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","status":"modified","additions":176,"deletions":176,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestSQLListenerTestCase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a8ed49f5b1b2847a5c1b1723f79249f974da24bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","status":"modified","additions":138,"deletions":138,"changes":276,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/kernel/TestUnknownSubclass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"518adfa5c067f4becd9da7f72e63c4da56d7d4b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","status":"modified","additions":264,"deletions":264,"changes":528,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestCompositeIdTraversalInSQLMapping.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c3003f85f3aa693403dff6b984c9d3f7871dc1d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","status":"modified","additions":156,"deletions":156,"changes":312,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/TestNativeQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0435802dcb1e5f394e41cff9feab8c3b92a64240","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Address.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9f9d4eda198c5fd35c9a7784570b432b071ce551","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Child.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e6c74e684d061426d3d24ce2747073a407561907","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/IParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ebab75b793b4c3e101e13462fa153463c877c06a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAppIdentity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e9bc6af4130ce6c2d9f0bca49ddde5aac12e76dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java","status":"modified","additions":112,"deletions":112,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithAutoIdentity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a394705a85dace2a19555cc1e7f0ba0185113ebe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java","status":"modified","additions":112,"deletions":112,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/ParentWithSequenceIdentity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"33bd593c5468a3ad701d04bbd8944f6836cdb05d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/Person.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6b7f78bac151a74fd868532e5ebb63fd4f6cffd6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","status":"modified","additions":174,"deletions":174,"changes":348,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/mapping/bidi/TestBiDirectionalJoinTable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6b2e2a14a200ae0c0726b96071e944089b60f994","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Division.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Division.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Division.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6257f3ab83160a719fa9e1c7d79bf514d812e401","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Employee.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2630a0654f72e9431c03a5dc662c1b51b26edd68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/PhoneNumber.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a9283623b2ccbe1a34f6f64edb47fd092f729257","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java","status":"modified","additions":289,"deletions":289,"changes":578,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex0/TestMany2ManyMap.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b6f9e50f54ebc32944e3ccb8e8cc331dc15866bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Department.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"51913df9cbd00d1e2ebca5cc5eb962d768df8220","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Division.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Division.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Division.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7cd8ba20b005b731c06746db0d1ec7ac8b23e072","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Employee.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2f9b6b87b02af758028ffda2a58b97a23e94d52a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/PhoneNumber.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b1c6e653537788921b29e8222a34c8bf4e9e9fcc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java","status":"modified","additions":321,"deletions":321,"changes":642,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex1/TestMany2ManyMapEx1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"84259a5f93e64193a416858934ddd036bf6470ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2b648dd688279b93d57ef5f8294fc7b1968222a2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/EmployeePK.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e9f2f90477aed6206c75b92ba465b68b9ed1f1c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f68dcbae16a8e51df59abd7f74999cdf6e39e1eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhonePK.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhonePK.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhonePK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/PhonePK.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3e7028a64486bf8fc13024c00a8bd001c4b17ddb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex10/TestMany2ManyMapEx10.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"00e0d7c2bacd93f7db3566f787b4b2581d1a73d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Department.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5cd3d5c883e1ffe32378963d53b1aae0b12e4d42","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Employee.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9eef6d3ae11caebe9fe8da63a97f8761d0baab03","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/PhoneNumber.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ba93f88cbf2c8e51edbdc7298ae75a2ac6a95cc2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java","status":"modified","additions":236,"deletions":236,"changes":472,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex2/TestMany2ManyMapEx2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c115871a2f873dcda3f88d3f615ef3ce9b94a366","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Department.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9924f5b156f50bcf36a938bd7abc79f3989bfc0c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Employee.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a8343cf6f688b9ca9b1927c7d36d8f80ed746a04","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/FullName.java","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/FullName.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/FullName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/FullName.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a6a17942d88de604d01c1df0f10153b101b274de","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/PhoneNumber.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f2a3411beff3e5b97cc141fb0394ff3261b3e842","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java","status":"modified","additions":260,"deletions":260,"changes":520,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex3/TestMany2ManyMapEx3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"17a790d6359a9a156267002d1364daecc1cd3bc0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Division.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Division.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Division.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0b1ae3c8af0faebd575f36889978191d05f85b91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Employee.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8ac47297736b2b5a87b4e0be37be14fd7872f854","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/PhoneNumber.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8d8e3849388f8667167ae0f36381becc44114ee7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java","status":"modified","additions":267,"deletions":267,"changes":534,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex4/TestMany2ManyMapEx4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f6b7dc2fe438f0b64a1927f119742c93bceff136","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/Employee.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b70e77fc078019fce184d06f7a24236b533664ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/PhoneNumber.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4b3068cff50673b3e394963fd245db7cef313991","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java","status":"modified","additions":225,"deletions":225,"changes":450,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex5/TestMany2ManyMapEx5.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"57eaa66345f40c674c0c66de4f432deada89de98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/Employee.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"512753ac327af704ceb4c0127cb9d186bf72202a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/FullName.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/FullName.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/FullName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/FullName.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1b72a84fb4d9732eb207466fb12b63730f5b6b7b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/PhoneNumber.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"293c848d9f4647c864c0866affdb79254a20f638","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java","status":"modified","additions":235,"deletions":235,"changes":470,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex6/TestMany2ManyMapEx6.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6768bf1f98b4edd6dad4c2c11153a23d362e74b7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Division.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Division.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Division.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Division.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cd609a7156eabf7fb3319d2779bfb4cd8f34a97f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Employee.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ceb862491bfc087f008396771394eded10d3984d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/FullName.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/FullName.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/FullName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/FullName.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a7aa85a005fb38587547291815842627918df1ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/PhoneNumber.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8e4f534b301c9b99d743150ac24fe30298cec9f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java","status":"modified","additions":239,"deletions":239,"changes":478,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex7/TestMany2ManyMapEx7.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"beb6a0c4a7ec1667d9656db71da612835204ee91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/Employee.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8ce572724d770175ed7c1c3df8c53b8f37c502ba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/FullName.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/FullName.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/FullName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/FullName.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"41cc7062183ac199d9ee52b9d37df53995d5082e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/PhoneNumber.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"}]}

