{"sha":"90b84c5d73db4d0d7fa3e5520358912961b59c43","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwYjg0YzVkNzNkYjRkMGQ3ZmEzZTU1MjAzNTg5MTI5NjFiNTljNDM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"message":"OPENJPA-896. Setting eol-style:native and removing windows eol characters from source files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@757278 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acb22a46ce954612c3f359175e18ce97ad6ecf85","url":"https://api.github.com/repos/apache/openjpa/git/trees/acb22a46ce954612c3f359175e18ce97ad6ecf85"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","html_url":"https://github.com/apache/openjpa/commit/90b84c5d73db4d0d7fa3e5520358912961b59c43","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c3175eea3c3885286898170fae6b487b070f60b5","url":"https://api.github.com/repos/apache/openjpa/commits/c3175eea3c3885286898170fae6b487b070f60b5","html_url":"https://github.com/apache/openjpa/commit/c3175eea3c3885286898170fae6b487b070f60b5"}],"stats":{"total":382166,"additions":191083,"deletions":191083},"files":[{"sha":"7dd24320d8b991c44eeb88636effd91f31a9954a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java","status":"modified","additions":236,"deletions":236,"changes":472,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex8/TestMany2ManyMapEx8.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,237 +1,237 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.m2mmapex8;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestMany2ManyMapEx8 extends SingleEMFTestCase {\r\n-\r\n-    public int numEmployees = 2;\r\n-    public int numPhoneNumbers = numEmployees + 1;\r\n-    public int numEmployeesPerPhoneNumber = 2;\r\n-    public int numPhoneNumbersPerEmployee = 2;\r\n-    public Map<Integer, PhoneNumber> phones =\r\n-        new HashMap<Integer, PhoneNumber>();\r\n-    public List<String> namedQueries = new ArrayList<String>();\r\n-\r\n-    public Map<Integer, Employee> empMap = new HashMap<Integer, Employee>();\r\n-    public Map<Integer, PhoneNumber> phoneMap =\r\n-        new HashMap<Integer, PhoneNumber>();\r\n-\r\n-    public int empId = 1;\r\n-    public int phoneId = 1;\r\n-    public int divId = 1;\r\n-    public int deptId = 1;\r\n-\r\n-    protected List<String> sql = new ArrayList<String>();\r\n-    protected int sqlCount;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(CLEAR_TABLES,\r\n-            Employee.class,\r\n-            FullName.class,\r\n-            PhoneNumber.class,\r\n-            \"openjpa.jdbc.JDBCListeners\", \r\n-            new JDBCListener[] {  this.new Listener() }\r\n-        );\r\n-        createObj();\r\n-    }\r\n-\r\n-    public void testQueryQualifiedId() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String query = \"select KEY(e) from PhoneNumber p, \" +\r\n-            \" in (p.emps) e order by e.empId\";\r\n-        List rs = em.createQuery(query).getResultList();\r\n-        String d = (String) rs.get(0);\r\n-\r\n-        String query2 = \"select KEY(p) from Employee e, \" +\r\n-            \" in (e.phones) p\";\r\n-        List rs2 = em.createQuery(query2).getResultList();\r\n-        FullName d2 = (FullName) rs2.get(0);\r\n-\r\n-        em.clear();\r\n-        String query4 = \"select ENTRY(e) from PhoneNumber p, \" +\r\n-            \" in (p.emps) e order by e.empId\";\r\n-        List rs4 = em.createQuery(query4).getResultList();\r\n-        Map.Entry me = (Map.Entry) rs4.get(0);\r\n-\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        // test KEY(e) of basic type in conditional expression\r\n-        sql.clear();\r\n-        query = \"select KEY(e) from PhoneNumber p, \" +\r\n-            \" in (p.emps) e where KEY(e) like '%1'\";\r\n-        rs = em.createQuery(query).getResultList();\r\n-        assertTrue(sql.get(0).toUpperCase().indexOf(\"LIKE\") > 0);\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQueryObject() throws Exception {\r\n-        queryObj();\r\n-        findObj();\r\n-    }\r\n-\r\n-    public List<String> getSql() {\r\n-        return sql;\r\n-    }\r\n-\r\n-    public int getSqlCount() {\r\n-        return sqlCount;\r\n-    }\r\n-\r\n-    public void createObj() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        for (int i = 0; i < numEmployees; i++) {\r\n-            Employee e = createEmployee(em, empId++);\r\n-            empMap.put(e.getEmpId(), e);\r\n-        }\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public Employee createEmployee(EntityManager em, int id) {\r\n-        Employee e = new Employee();\r\n-        e.setEmpId(id);\r\n-        for (int i = 0; i < numPhoneNumbersPerEmployee; i++) { \r\n-            FullName name = new FullName(\"f\" + id + i, \"l\" + id + i);\r\n-            PhoneNumber phoneNumber = new PhoneNumber();\r\n-            phoneNumber.setNumber(phoneId++);\r\n-            phoneNumber.addEmployees(\"String\" + e.getEmpId() + i, e);\r\n-            e.addPhoneNumber(name, phoneNumber);\r\n-            em.persist(phoneNumber);\r\n-            phoneMap.put(phoneNumber.getNumber(), phoneNumber);\r\n-        }\r\n-        em.persist(e);\r\n-        return e;\r\n-    }\r\n-\r\n-    public void findObj() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Employee e = em.find(Employee.class, 1);\r\n-        assertEmployee(e);\r\n-\r\n-        PhoneNumber p = em.find(PhoneNumber.class, 1);\r\n-        assertPhoneNumber(p);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryObj() throws Exception {\r\n-        queryEmployee();\r\n-        queryPhoneNumber();\r\n-    }\r\n-\r\n-    public void queryPhoneNumber() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select p from PhoneNumber p\");\r\n-        List<PhoneNumber> ps = q.getResultList();\r\n-        for (PhoneNumber p : ps){\r\n-            assertPhoneNumber(p);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee() throws Exception  {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee e\");\r\n-        List<Employee> es = q.getResultList();\r\n-        for (Employee e : es){\r\n-            assertEmployee(e);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void assertEmployee(Employee e) throws Exception {\r\n-        int id = e.getEmpId();\r\n-        Employee e0 = empMap.get(id);\r\n-        Map<FullName, PhoneNumber> phones = e.getPhoneNumbers();\r\n-        Map<FullName, PhoneNumber> phones0 = e0.getPhoneNumbers();\r\n-        Assert.assertEquals(phones0.size(), phones.size());\r\n-        checkPhoneMap(phones0, phones);\r\n-    }\r\n-\r\n-    public void assertPhoneNumber(PhoneNumber p) throws Exception {\r\n-        int number = p.getNumber();\r\n-        PhoneNumber p0 = phoneMap.get(number);\r\n-        Map<String, Employee> es = p.getEmployees();\r\n-        Map<String, Employee> es0 = p0.getEmployees();\r\n-        Assert.assertEquals(es0.size(), es.size());\r\n-        checkEmpMap(es0, es);\r\n-    }\r\n-\r\n-    public void checkPhoneMap(Map<FullName, PhoneNumber> es0, \r\n-        Map<FullName, PhoneNumber> es) throws Exception {\r\n-        Collection<Map.Entry<FullName, PhoneNumber>> entrySets0 =\r\n-            es0.entrySet();\r\n-        for (Map.Entry<FullName, PhoneNumber> entry0 : entrySets0) {\r\n-            FullName key0 = entry0.getKey();\r\n-            PhoneNumber p0 = entry0.getValue();\r\n-            PhoneNumber p = es.get(key0);\r\n-            if (!p0.equals(p))\r\n-                throw new Exception(\"Assertion Failure\");\r\n-\r\n-        }\r\n-    }\r\n-\r\n-    public void checkEmpMap(Map<String, Employee> es0, Map<String, Employee> es)\r\n-        throws Exception {\r\n-        Collection<Map.Entry<String, Employee>> entrySets0 = es0.entrySet();\r\n-        for (Map.Entry<String, Employee> entry0 : entrySets0) {\r\n-            String key0 = entry0.getKey();\r\n-            Employee e0 = entry0.getValue();\r\n-            Employee e = es.get(key0);\r\n-            if (!e0.equals(e))\r\n-                throw new Exception(\"Assertion failure\");\r\n-        }\r\n-    }\r\n-\r\n-    public class Listener extends AbstractJDBCListener {\r\n-        @Override\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL() != null && sql != null) {\r\n-                sql.add(event.getSQL());\r\n-                sqlCount++;\r\n-            }\r\n-        }\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.m2mmapex8;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestMany2ManyMapEx8 extends SingleEMFTestCase {\n+\n+    public int numEmployees = 2;\n+    public int numPhoneNumbers = numEmployees + 1;\n+    public int numEmployeesPerPhoneNumber = 2;\n+    public int numPhoneNumbersPerEmployee = 2;\n+    public Map<Integer, PhoneNumber> phones =\n+        new HashMap<Integer, PhoneNumber>();\n+    public List<String> namedQueries = new ArrayList<String>();\n+\n+    public Map<Integer, Employee> empMap = new HashMap<Integer, Employee>();\n+    public Map<Integer, PhoneNumber> phoneMap =\n+        new HashMap<Integer, PhoneNumber>();\n+\n+    public int empId = 1;\n+    public int phoneId = 1;\n+    public int divId = 1;\n+    public int deptId = 1;\n+\n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Employee.class,\n+            FullName.class,\n+            PhoneNumber.class,\n+            \"openjpa.jdbc.JDBCListeners\", \n+            new JDBCListener[] {  this.new Listener() }\n+        );\n+        createObj();\n+    }\n+\n+    public void testQueryQualifiedId() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select KEY(e) from PhoneNumber p, \" +\n+            \" in (p.emps) e order by e.empId\";\n+        List rs = em.createQuery(query).getResultList();\n+        String d = (String) rs.get(0);\n+\n+        String query2 = \"select KEY(p) from Employee e, \" +\n+            \" in (e.phones) p\";\n+        List rs2 = em.createQuery(query2).getResultList();\n+        FullName d2 = (FullName) rs2.get(0);\n+\n+        em.clear();\n+        String query4 = \"select ENTRY(e) from PhoneNumber p, \" +\n+            \" in (p.emps) e order by e.empId\";\n+        List rs4 = em.createQuery(query4).getResultList();\n+        Map.Entry me = (Map.Entry) rs4.get(0);\n+\n+        assertTrue(d.equals(me.getKey()));\n+\n+        // test KEY(e) of basic type in conditional expression\n+        sql.clear();\n+        query = \"select KEY(e) from PhoneNumber p, \" +\n+            \" in (p.emps) e where KEY(e) like '%1'\";\n+        rs = em.createQuery(query).getResultList();\n+        assertTrue(sql.get(0).toUpperCase().indexOf(\"LIKE\") > 0);\n+\n+        em.close();\n+    }\n+\n+    public void testQueryObject() throws Exception {\n+        queryObj();\n+        findObj();\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public int getSqlCount() {\n+        return sqlCount;\n+    }\n+\n+    public void createObj() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numEmployees; i++) {\n+            Employee e = createEmployee(em, empId++);\n+            empMap.put(e.getEmpId(), e);\n+        }\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public Employee createEmployee(EntityManager em, int id) {\n+        Employee e = new Employee();\n+        e.setEmpId(id);\n+        for (int i = 0; i < numPhoneNumbersPerEmployee; i++) { \n+            FullName name = new FullName(\"f\" + id + i, \"l\" + id + i);\n+            PhoneNumber phoneNumber = new PhoneNumber();\n+            phoneNumber.setNumber(phoneId++);\n+            phoneNumber.addEmployees(\"String\" + e.getEmpId() + i, e);\n+            e.addPhoneNumber(name, phoneNumber);\n+            em.persist(phoneNumber);\n+            phoneMap.put(phoneNumber.getNumber(), phoneNumber);\n+        }\n+        em.persist(e);\n+        return e;\n+    }\n+\n+    public void findObj() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        Employee e = em.find(Employee.class, 1);\n+        assertEmployee(e);\n+\n+        PhoneNumber p = em.find(PhoneNumber.class, 1);\n+        assertPhoneNumber(p);\n+        em.close();\n+    }\n+\n+    public void queryObj() throws Exception {\n+        queryEmployee();\n+        queryPhoneNumber();\n+    }\n+\n+    public void queryPhoneNumber() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select p from PhoneNumber p\");\n+        List<PhoneNumber> ps = q.getResultList();\n+        for (PhoneNumber p : ps){\n+            assertPhoneNumber(p);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee() throws Exception  {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee e\");\n+        List<Employee> es = q.getResultList();\n+        for (Employee e : es){\n+            assertEmployee(e);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void assertEmployee(Employee e) throws Exception {\n+        int id = e.getEmpId();\n+        Employee e0 = empMap.get(id);\n+        Map<FullName, PhoneNumber> phones = e.getPhoneNumbers();\n+        Map<FullName, PhoneNumber> phones0 = e0.getPhoneNumbers();\n+        Assert.assertEquals(phones0.size(), phones.size());\n+        checkPhoneMap(phones0, phones);\n+    }\n+\n+    public void assertPhoneNumber(PhoneNumber p) throws Exception {\n+        int number = p.getNumber();\n+        PhoneNumber p0 = phoneMap.get(number);\n+        Map<String, Employee> es = p.getEmployees();\n+        Map<String, Employee> es0 = p0.getEmployees();\n+        Assert.assertEquals(es0.size(), es.size());\n+        checkEmpMap(es0, es);\n+    }\n+\n+    public void checkPhoneMap(Map<FullName, PhoneNumber> es0, \n+        Map<FullName, PhoneNumber> es) throws Exception {\n+        Collection<Map.Entry<FullName, PhoneNumber>> entrySets0 =\n+            es0.entrySet();\n+        for (Map.Entry<FullName, PhoneNumber> entry0 : entrySets0) {\n+            FullName key0 = entry0.getKey();\n+            PhoneNumber p0 = entry0.getValue();\n+            PhoneNumber p = es.get(key0);\n+            if (!p0.equals(p))\n+                throw new Exception(\"Assertion Failure\");\n+\n+        }\n+    }\n+\n+    public void checkEmpMap(Map<String, Employee> es0, Map<String, Employee> es)\n+        throws Exception {\n+        Collection<Map.Entry<String, Employee>> entrySets0 = es0.entrySet();\n+        for (Map.Entry<String, Employee> entry0 : entrySets0) {\n+            String key0 = entry0.getKey();\n+            Employee e0 = entry0.getValue();\n+            Employee e = es.get(key0);\n+            if (!e0.equals(e))\n+                throw new Exception(\"Assertion failure\");\n+        }\n+    }\n+\n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n }\n\\ No newline at end of file"},{"sha":"49dac9480ffc7d45f36d84788d854b2fbd2b4b06","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/Employee.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,77 +1,77 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-\r\n-import java.util.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"MEx9Emp\")\r\n-public class Employee {\r\n-    @Id\r\n-    int empId;\r\n-\r\n-    @ManyToMany\r\n-    //@AttributeOverrides({\r\n-    //    @AttributeOverride(name=\"fName\", column=@Column(name=\"fName_Emp\")),\r\n-    //    @AttributeOverride(name=\"lName\", column=@Column(name=\"lName_Emp\"))\r\n-    //})\r\n-    Map<FullPhoneName, PhoneNumber> phones =\r\n-        new HashMap<FullPhoneName, PhoneNumber>(); // Bidirectional\r\n-\r\n-    public Map<FullPhoneName, PhoneNumber> getPhoneNumbers() {\r\n-        return phones;\r\n-    }\r\n-\r\n-    public void addPhoneNumber(FullPhoneName name, PhoneNumber phoneNumber) {\r\n-        phones.put(name, phoneNumber);\r\n-    }\r\n-\r\n-    public void removePhoneNumber(FullPhoneName name) {\r\n-        phones.remove(name);\r\n-    }\r\n-\r\n-    public int getEmpId() {\r\n-        return empId;\r\n-    }\r\n-\r\n-    public void setEmpId(int empId) {\r\n-        this.empId = empId;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        Employee e = (Employee) o;\r\n-        Map<FullPhoneName, PhoneNumber> map = e.getPhoneNumbers();\r\n-        if (map.size() != phones.size())\r\n-            return false;\r\n-        Collection<Map.Entry<FullPhoneName, PhoneNumber>> entries =\r\n-            (Collection<Map.Entry<FullPhoneName, PhoneNumber>>)\r\n-            phones.entrySet();\r\n-        for (Map.Entry<FullPhoneName, PhoneNumber> entry : entries) {\r\n-            FullPhoneName key = entry.getKey();\r\n-            PhoneNumber p = entry.getValue();\r\n-            PhoneNumber p0 = map.get(key);\r\n-            if (p.getNumber() != p0.getNumber())\r\n-                return false;\r\n-        }\r\n-        return true;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\n+\n+import javax.persistence.*;\n+\n+\n+import java.util.*;\n+\n+@Entity\n+@Table(name=\"MEx9Emp\")\n+public class Employee {\n+    @Id\n+    int empId;\n+\n+    @ManyToMany\n+    //@AttributeOverrides({\n+    //    @AttributeOverride(name=\"fName\", column=@Column(name=\"fName_Emp\")),\n+    //    @AttributeOverride(name=\"lName\", column=@Column(name=\"lName_Emp\"))\n+    //})\n+    Map<FullPhoneName, PhoneNumber> phones =\n+        new HashMap<FullPhoneName, PhoneNumber>(); // Bidirectional\n+\n+    public Map<FullPhoneName, PhoneNumber> getPhoneNumbers() {\n+        return phones;\n+    }\n+\n+    public void addPhoneNumber(FullPhoneName name, PhoneNumber phoneNumber) {\n+        phones.put(name, phoneNumber);\n+    }\n+\n+    public void removePhoneNumber(FullPhoneName name) {\n+        phones.remove(name);\n+    }\n+\n+    public int getEmpId() {\n+        return empId;\n+    }\n+\n+    public void setEmpId(int empId) {\n+        this.empId = empId;\n+    }\n+\n+    public boolean equals(Object o) {\n+        Employee e = (Employee) o;\n+        Map<FullPhoneName, PhoneNumber> map = e.getPhoneNumbers();\n+        if (map.size() != phones.size())\n+            return false;\n+        Collection<Map.Entry<FullPhoneName, PhoneNumber>> entries =\n+            (Collection<Map.Entry<FullPhoneName, PhoneNumber>>)\n+            phones.entrySet();\n+        for (Map.Entry<FullPhoneName, PhoneNumber> entry : entries) {\n+            FullPhoneName key = entry.getKey();\n+            PhoneNumber p = entry.getValue();\n+            PhoneNumber p0 = map.get(key);\n+            if (p.getNumber() != p0.getNumber())\n+                return false;\n+        }\n+        return true;\n+    }\n }\n\\ No newline at end of file"},{"sha":"3c1d9f8061fa716fee431154f4a744e1baba6842","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullName.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullName.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullName.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-\r\n-@Embeddable\r\n-public class FullName {\r\n-\r\n-    String fName1;\r\n-    String lName1;\r\n-\r\n-    public FullName() {}\r\n-\r\n-    public FullName(String fName, String lName) {\r\n-        this.fName1 = fName;\r\n-        this.lName1 = lName;\r\n-    }\r\n-\r\n-    public String getFName() {\r\n-        return fName1;\r\n-    }\r\n-\r\n-    public void setFName(String fName) {\r\n-        this.fName1 = fName;\r\n-    }\r\n-\r\n-    public String getLName() {\r\n-        return lName1;\r\n-    }\r\n-\r\n-    public void setLName(String lName) {\r\n-        this.lName1 = lName;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        if (!(o instanceof FullName))\r\n-            return false;\r\n-        FullName other = (FullName) o;\r\n-        if (fName1.equals(other.fName1) &&\r\n-            lName1.equals(other.lName1))\r\n-            return true;\r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int ret = 0;\r\n-        ret += lName1.hashCode();\r\n-        ret = 31 * ret + fName1.hashCode();\r\n-        return ret;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class FullName {\n+\n+    String fName1;\n+    String lName1;\n+\n+    public FullName() {}\n+\n+    public FullName(String fName, String lName) {\n+        this.fName1 = fName;\n+        this.lName1 = lName;\n+    }\n+\n+    public String getFName() {\n+        return fName1;\n+    }\n+\n+    public void setFName(String fName) {\n+        this.fName1 = fName;\n+    }\n+\n+    public String getLName() {\n+        return lName1;\n+    }\n+\n+    public void setLName(String lName) {\n+        this.lName1 = lName;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof FullName))\n+            return false;\n+        FullName other = (FullName) o;\n+        if (fName1.equals(other.fName1) &&\n+            lName1.equals(other.lName1))\n+            return true;\n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int ret = 0;\n+        ret += lName1.hashCode();\n+        ret = 31 * ret + fName1.hashCode();\n+        return ret;\n+    }\n+}"},{"sha":"feb0cbe4a3384d2d54bd532c2f1a6de400bd985b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullPhoneName.java","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullPhoneName.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullPhoneName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/FullPhoneName.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,67 +1,67 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-\r\n-@Embeddable\r\n-public class FullPhoneName {\r\n-\r\n-    String fName;\r\n-    String lName;\r\n-\r\n-    public FullPhoneName() {}\r\n-\r\n-    public FullPhoneName(String fName, String lName) {\r\n-        this.fName = fName;\r\n-        this.lName = lName;\r\n-    }\r\n-\r\n-    public String getFName() {\r\n-        return fName;\r\n-    }\r\n-\r\n-    public void setFName(String fName) {\r\n-        this.fName = fName;\r\n-    }\r\n-\r\n-    public String getLName() {\r\n-        return lName;\r\n-    }\r\n-\r\n-    public void setLName(String lName) {\r\n-        this.lName = lName;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        if (!(o instanceof FullPhoneName)) return false;\r\n-        FullPhoneName other = (FullPhoneName) o;\r\n-        if (fName.equals(other.fName) &&\r\n-                lName.equals(other.lName))\r\n-            return true;\r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int ret = 0;\r\n-        ret += lName.hashCode();\r\n-        ret = 31 * ret + fName.hashCode();\r\n-        return ret;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class FullPhoneName {\n+\n+    String fName;\n+    String lName;\n+\n+    public FullPhoneName() {}\n+\n+    public FullPhoneName(String fName, String lName) {\n+        this.fName = fName;\n+        this.lName = lName;\n+    }\n+\n+    public String getFName() {\n+        return fName;\n+    }\n+\n+    public void setFName(String fName) {\n+        this.fName = fName;\n+    }\n+\n+    public String getLName() {\n+        return lName;\n+    }\n+\n+    public void setLName(String lName) {\n+        this.lName = lName;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof FullPhoneName)) return false;\n+        FullPhoneName other = (FullPhoneName) o;\n+        if (fName.equals(other.fName) &&\n+                lName.equals(other.lName))\n+            return true;\n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int ret = 0;\n+        ret += lName.hashCode();\n+        ret = 31 * ret + fName.hashCode();\n+        return ret;\n+    }\n+}"},{"sha":"a0cdcd70a3ecf0a27200c10724e71b32414eac7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/PhoneNumber.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/PhoneNumber.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/PhoneNumber.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/PhoneNumber.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,73 +1,73 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-import java.util.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"MEx9Phone\")\r\n-public class PhoneNumber {\r\n-    @Id int number;\r\n-\r\n-    @ManyToMany(mappedBy=\"phones\")\r\n-    //@AttributeOverrides({\r\n-    //    @AttributeOverride(name=\"fName\", column=@Column(name=\"fName_phone\")),\r\n-    //    @AttributeOverride(name=\"lName\", column=@Column(name=\"lName_phone\"))\r\n-    //})\r\n-    Map<FullName, Employee> emps = new HashMap<FullName, Employee>();\r\n-\r\n-    public int getNumber() {\r\n-        return number;\r\n-    }\r\n-\r\n-    public void setNumber(int number) {\r\n-        this.number = number;\r\n-    }\r\n-\r\n-    public Map<FullName, Employee>  getEmployees() {\r\n-        return emps;\r\n-    }\r\n-\r\n-    public void addEmployees(FullName d, Employee employee) {\r\n-        emps.put(d, employee);\r\n-    }\r\n-\r\n-    public void removeEmployee(FullName d) {\r\n-        emps.remove(d);\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        PhoneNumber p = (PhoneNumber) o;\r\n-        Map<FullName, Employee> map = p.getEmployees();\r\n-        if (p.getEmployees().size() != emps.size())\r\n-            return false;\r\n-        Collection<Map.Entry<FullName, Employee>> entries =\r\n-            (Collection<Map.Entry<FullName, Employee>>) emps.entrySet();\r\n-        for (Map.Entry<FullName, Employee> entry : entries) {\r\n-            FullName key = entry.getKey();\r\n-            Employee e = map.get(key);\r\n-            Employee e0 = entry.getValue();\r\n-            if (e.getEmpId() != e0.getEmpId())\r\n-                return false;\r\n-        }\r\n-        return true;\r\n-    }        \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\n+\n+import javax.persistence.*;\n+\n+import java.util.*;\n+\n+@Entity\n+@Table(name=\"MEx9Phone\")\n+public class PhoneNumber {\n+    @Id int number;\n+\n+    @ManyToMany(mappedBy=\"phones\")\n+    //@AttributeOverrides({\n+    //    @AttributeOverride(name=\"fName\", column=@Column(name=\"fName_phone\")),\n+    //    @AttributeOverride(name=\"lName\", column=@Column(name=\"lName_phone\"))\n+    //})\n+    Map<FullName, Employee> emps = new HashMap<FullName, Employee>();\n+\n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public void setNumber(int number) {\n+        this.number = number;\n+    }\n+\n+    public Map<FullName, Employee>  getEmployees() {\n+        return emps;\n+    }\n+\n+    public void addEmployees(FullName d, Employee employee) {\n+        emps.put(d, employee);\n+    }\n+\n+    public void removeEmployee(FullName d) {\n+        emps.remove(d);\n+    }\n+\n+    public boolean equals(Object o) {\n+        PhoneNumber p = (PhoneNumber) o;\n+        Map<FullName, Employee> map = p.getEmployees();\n+        if (p.getEmployees().size() != emps.size())\n+            return false;\n+        Collection<Map.Entry<FullName, Employee>> entries =\n+            (Collection<Map.Entry<FullName, Employee>>) emps.entrySet();\n+        for (Map.Entry<FullName, Employee> entry : entries) {\n+            FullName key = entry.getKey();\n+            Employee e = map.get(key);\n+            Employee e0 = entry.getValue();\n+            if (e.getEmpId() != e0.getEmpId())\n+                return false;\n+        }\n+        return true;\n+    }        \n+}"},{"sha":"2a7bc24263beca88db88a47c922401aa1ecc3a3d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java","status":"modified","additions":246,"deletions":246,"changes":492,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/m2mmapex9/TestMany2ManyMapEx9.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,247 +1,247 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-\r\n-public class TestMany2ManyMapEx9 extends SingleEMFTestCase {\r\n-\r\n-    public int numEmployees = 2;\r\n-    public int numPhoneNumbers = numEmployees + 1;\r\n-    public int numEmployeesPerPhoneNumber = 2;\r\n-    public int numPhoneNumbersPerEmployee = 2;\r\n-    public Map<Integer, PhoneNumber> phones =\r\n-        new HashMap<Integer, PhoneNumber>();\r\n-    public List<String> namedQueries = new ArrayList<String>();\r\n-\r\n-    public int empId = 1;\r\n-    public int phoneId = 1;\r\n-    public int divId = 1;\r\n-    public int deptId = 1;\r\n-\r\n-    public Map<Integer, Employee> empMap = new HashMap<Integer, Employee>();\r\n-    public Map<Integer, PhoneNumber> phoneMap =\r\n-        new HashMap<Integer, PhoneNumber>();\r\n-\r\n-    protected List<String> sql = new ArrayList<String>();\r\n-    protected int sqlCount;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(CLEAR_TABLES,\r\n-            Employee.class,\r\n-            FullName.class,\r\n-            PhoneNumber.class,\r\n-            FullPhoneName.class,\r\n-            \"openjpa.jdbc.JDBCListeners\", \r\n-            new JDBCListener[] {  this.new Listener() }\r\n-        );\r\n-        createObj();\r\n-    }\r\n-\r\n-    public void testQueryQualifiedId() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String query = \"select KEY(e) from PhoneNumber p, \" +\r\n-            \" in (p.emps) e order by e.empId\";\r\n-        List rs = em.createQuery(query).getResultList();\r\n-        FullName d = (FullName) rs.get(0);\r\n-\r\n-        String query2 = \"select KEY(p) from Employee e, \" +\r\n-            \" in (e.phones) p\";\r\n-        List rs2 = em.createQuery(query2).getResultList();\r\n-        FullPhoneName k = (FullPhoneName) rs2.get(0);\r\n-\r\n-        em.clear();\r\n-        String query4 = \"select ENTRY(e) from PhoneNumber p, \" +\r\n-            \" in (p.emps) e order by e.empId\";\r\n-        List rs4 = em.createQuery(query4).getResultList();\r\n-        Map.Entry me = (Map.Entry) rs4.get(0);\r\n-\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQueryObject() throws Exception {\r\n-        queryObj();\r\n-        findObj();\r\n-    }\r\n-\r\n-    public List<String> getSql() {\r\n-        return sql;\r\n-    }\r\n-\r\n-    public int getSqlCount() {\r\n-        return sqlCount;\r\n-    }\r\n-\r\n-    public void createObj() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        for (int i = 0; i < numEmployees; i++) {\r\n-            Employee e = createEmployee(em, empId++);\r\n-            empMap.put(e.getEmpId(), e);\r\n-        }\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public Employee createEmployee(EntityManager em, int id) {\r\n-        Employee e = new Employee();\r\n-        e.setEmpId(id);\r\n-        for (int i = 0; i < numPhoneNumbersPerEmployee; i++) { \r\n-            FullPhoneName name1 = new FullPhoneName(\"f1\" + id + i,\r\n-                    \"l1\" + id + i);\r\n-            PhoneNumber phoneNumber = new PhoneNumber();\r\n-            phoneNumber.setNumber(phoneId++);\r\n-            FullName name2 = new FullName(\"f2\" + phoneNumber.getNumber() + i,\r\n-                    \"l2\" + phoneNumber.getNumber() + i);\r\n-            phoneNumber.addEmployees(name2, e);\r\n-            e.addPhoneNumber(name1, phoneNumber);\r\n-            em.persist(phoneNumber);\r\n-            phoneMap.put(phoneNumber.getNumber(), phoneNumber);\r\n-        }\r\n-        em.persist(e);\r\n-        return e;\r\n-    }\r\n-\r\n-    public void removeAll() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createNativeQuery(\"delete from phonenumber\");\r\n-        q.executeUpdate();\r\n-        q = em.createNativeQuery(\"delete from employee\");\r\n-        q.executeUpdate();\r\n-        System.out.println(\"committing removes\");\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void findObj() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Employee e = em.find(Employee.class, 1);\r\n-        assertEmployee(e);\r\n-\r\n-        PhoneNumber p = em.find(PhoneNumber.class, 1);\r\n-        assertPhoneNumber(p);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryObj() throws Exception {\r\n-        queryEmployee();\r\n-        queryPhoneNumber();\r\n-    }\r\n-\r\n-    public void queryPhoneNumber() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select p from PhoneNumber p\");\r\n-        List<PhoneNumber> ps = q.getResultList();\r\n-        for (PhoneNumber p : ps) {\r\n-            assertPhoneNumber(p);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee e\");\r\n-        List<Employee> es = q.getResultList();\r\n-        for (Employee e : es) {\r\n-            assertEmployee(e);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void assertEmployee(Employee e) throws Exception {\r\n-        int id = e.getEmpId();\r\n-        Employee e0 = empMap.get(id);\r\n-        Map<FullPhoneName, PhoneNumber> phones = e.getPhoneNumbers();\r\n-        Map<FullPhoneName, PhoneNumber> phones0 = e0.getPhoneNumbers();\r\n-        Assert.assertEquals(phones0.size(), phones.size());\r\n-        checkPhoneMap(phones0, phones);\r\n-    }\r\n-\r\n-    public void assertPhoneNumber(PhoneNumber p) throws Exception {\r\n-        int number = p.getNumber();\r\n-        PhoneNumber p0 = phoneMap.get(number);\r\n-        Map<FullName, Employee> es = p.getEmployees();\r\n-        Map<FullName, Employee> es0 = p0.getEmployees();\r\n-        Assert.assertEquals(es0.size(), es.size());\r\n-        checkEmpMap(es0, es);\r\n-    }\r\n-\r\n-    public void checkPhoneMap(Map<FullPhoneName, PhoneNumber> es0, \r\n-        Map<FullPhoneName, PhoneNumber> es) throws Exception {\r\n-        Collection<Map.Entry<FullPhoneName, PhoneNumber>> entrySets0 =\r\n-            es0.entrySet();\r\n-        for (Map.Entry<FullPhoneName, PhoneNumber> entry0 : entrySets0) {\r\n-            FullPhoneName key0 = entry0.getKey();\r\n-            PhoneNumber p0 = entry0.getValue();\r\n-            PhoneNumber p = es.get(key0);\r\n-            if (!p0.equals(p))\r\n-                throw new Exception(\"Assertion Failure\");            \r\n-        }\r\n-    }\r\n-\r\n-    public void checkEmpMap(Map<FullName, Employee> es0,\r\n-        Map<FullName, Employee> es) throws Exception {\r\n-        Collection<Map.Entry<FullName, Employee>> entrySets0 = es0.entrySet();\r\n-        for (Map.Entry<FullName, Employee> entry0 : entrySets0) {\r\n-            FullName key0 = entry0.getKey();\r\n-            Employee e0 = entry0.getValue();\r\n-            Employee e = es.get(key0);\r\n-            if (!e0.equals(e))\r\n-                throw new Exception(\"Assertion failure\");\r\n-        }\r\n-    }\r\n-\r\n-    public class Listener extends AbstractJDBCListener {\r\n-        @Override\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL() != null && sql != null) {\r\n-                sql.add(event.getSQL());\r\n-                sqlCount++;\r\n-            }\r\n-        }\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.m2mmapex9;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+public class TestMany2ManyMapEx9 extends SingleEMFTestCase {\n+\n+    public int numEmployees = 2;\n+    public int numPhoneNumbers = numEmployees + 1;\n+    public int numEmployeesPerPhoneNumber = 2;\n+    public int numPhoneNumbersPerEmployee = 2;\n+    public Map<Integer, PhoneNumber> phones =\n+        new HashMap<Integer, PhoneNumber>();\n+    public List<String> namedQueries = new ArrayList<String>();\n+\n+    public int empId = 1;\n+    public int phoneId = 1;\n+    public int divId = 1;\n+    public int deptId = 1;\n+\n+    public Map<Integer, Employee> empMap = new HashMap<Integer, Employee>();\n+    public Map<Integer, PhoneNumber> phoneMap =\n+        new HashMap<Integer, PhoneNumber>();\n+\n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Employee.class,\n+            FullName.class,\n+            PhoneNumber.class,\n+            FullPhoneName.class,\n+            \"openjpa.jdbc.JDBCListeners\", \n+            new JDBCListener[] {  this.new Listener() }\n+        );\n+        createObj();\n+    }\n+\n+    public void testQueryQualifiedId() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select KEY(e) from PhoneNumber p, \" +\n+            \" in (p.emps) e order by e.empId\";\n+        List rs = em.createQuery(query).getResultList();\n+        FullName d = (FullName) rs.get(0);\n+\n+        String query2 = \"select KEY(p) from Employee e, \" +\n+            \" in (e.phones) p\";\n+        List rs2 = em.createQuery(query2).getResultList();\n+        FullPhoneName k = (FullPhoneName) rs2.get(0);\n+\n+        em.clear();\n+        String query4 = \"select ENTRY(e) from PhoneNumber p, \" +\n+            \" in (p.emps) e order by e.empId\";\n+        List rs4 = em.createQuery(query4).getResultList();\n+        Map.Entry me = (Map.Entry) rs4.get(0);\n+\n+        assertTrue(d.equals(me.getKey()));\n+\n+        em.close();\n+    }\n+\n+    public void testQueryObject() throws Exception {\n+        queryObj();\n+        findObj();\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public int getSqlCount() {\n+        return sqlCount;\n+    }\n+\n+    public void createObj() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numEmployees; i++) {\n+            Employee e = createEmployee(em, empId++);\n+            empMap.put(e.getEmpId(), e);\n+        }\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public Employee createEmployee(EntityManager em, int id) {\n+        Employee e = new Employee();\n+        e.setEmpId(id);\n+        for (int i = 0; i < numPhoneNumbersPerEmployee; i++) { \n+            FullPhoneName name1 = new FullPhoneName(\"f1\" + id + i,\n+                    \"l1\" + id + i);\n+            PhoneNumber phoneNumber = new PhoneNumber();\n+            phoneNumber.setNumber(phoneId++);\n+            FullName name2 = new FullName(\"f2\" + phoneNumber.getNumber() + i,\n+                    \"l2\" + phoneNumber.getNumber() + i);\n+            phoneNumber.addEmployees(name2, e);\n+            e.addPhoneNumber(name1, phoneNumber);\n+            em.persist(phoneNumber);\n+            phoneMap.put(phoneNumber.getNumber(), phoneNumber);\n+        }\n+        em.persist(e);\n+        return e;\n+    }\n+\n+    public void removeAll() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createNativeQuery(\"delete from phonenumber\");\n+        q.executeUpdate();\n+        q = em.createNativeQuery(\"delete from employee\");\n+        q.executeUpdate();\n+        System.out.println(\"committing removes\");\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void findObj() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        Employee e = em.find(Employee.class, 1);\n+        assertEmployee(e);\n+\n+        PhoneNumber p = em.find(PhoneNumber.class, 1);\n+        assertPhoneNumber(p);\n+        em.close();\n+    }\n+\n+    public void queryObj() throws Exception {\n+        queryEmployee();\n+        queryPhoneNumber();\n+    }\n+\n+    public void queryPhoneNumber() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select p from PhoneNumber p\");\n+        List<PhoneNumber> ps = q.getResultList();\n+        for (PhoneNumber p : ps) {\n+            assertPhoneNumber(p);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee e\");\n+        List<Employee> es = q.getResultList();\n+        for (Employee e : es) {\n+            assertEmployee(e);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void assertEmployee(Employee e) throws Exception {\n+        int id = e.getEmpId();\n+        Employee e0 = empMap.get(id);\n+        Map<FullPhoneName, PhoneNumber> phones = e.getPhoneNumbers();\n+        Map<FullPhoneName, PhoneNumber> phones0 = e0.getPhoneNumbers();\n+        Assert.assertEquals(phones0.size(), phones.size());\n+        checkPhoneMap(phones0, phones);\n+    }\n+\n+    public void assertPhoneNumber(PhoneNumber p) throws Exception {\n+        int number = p.getNumber();\n+        PhoneNumber p0 = phoneMap.get(number);\n+        Map<FullName, Employee> es = p.getEmployees();\n+        Map<FullName, Employee> es0 = p0.getEmployees();\n+        Assert.assertEquals(es0.size(), es.size());\n+        checkEmpMap(es0, es);\n+    }\n+\n+    public void checkPhoneMap(Map<FullPhoneName, PhoneNumber> es0, \n+        Map<FullPhoneName, PhoneNumber> es) throws Exception {\n+        Collection<Map.Entry<FullPhoneName, PhoneNumber>> entrySets0 =\n+            es0.entrySet();\n+        for (Map.Entry<FullPhoneName, PhoneNumber> entry0 : entrySets0) {\n+            FullPhoneName key0 = entry0.getKey();\n+            PhoneNumber p0 = entry0.getValue();\n+            PhoneNumber p = es.get(key0);\n+            if (!p0.equals(p))\n+                throw new Exception(\"Assertion Failure\");            \n+        }\n+    }\n+\n+    public void checkEmpMap(Map<FullName, Employee> es0,\n+        Map<FullName, Employee> es) throws Exception {\n+        Collection<Map.Entry<FullName, Employee>> entrySets0 = es0.entrySet();\n+        for (Map.Entry<FullName, Employee> entry0 : entrySets0) {\n+            FullName key0 = entry0.getKey();\n+            Employee e0 = entry0.getValue();\n+            Employee e = es.get(key0);\n+            if (!e0.equals(e))\n+                throw new Exception(\"Assertion failure\");\n+        }\n+    }\n+\n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n }\n\\ No newline at end of file"},{"sha":"2e6af930ec5b89fd59cf5b102125949d85b20745","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department1.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Dept1\")\r\n-//@Access(AccessType.PROPERTY)\r\n-public class Department1 {\r\n-\r\n-    //@Id\r\n-    int deptId;\r\n-\r\n-    //@OneToMany(mappedBy=\"department\", fetch=FetchType.EAGER)\r\n-    //@MapKey(name=\"empId\")\r\n-    Map<Integer, Employee1> empMap = new HashMap<Integer, Employee1>();\r\n-\r\n-    @Id\r\n-    public int getDeptId() {\r\n-        return deptId;\r\n-    }\r\n-\r\n-    public void setDeptId(int deptId) {\r\n-        this.deptId = deptId;\r\n-    }\r\n-\r\n-    @OneToMany(mappedBy=\"department\", fetch=FetchType.EAGER)\r\n-    @MapKey(name=\"empId\")\r\n-    public Map<Integer, Employee1> getEmpMap() {\r\n-        return empMap;\r\n-    }\r\n-\r\n-    public void setEmpMap(Map<Integer, Employee1> empMap) {\r\n-        this.empMap = empMap;\r\n-    }\r\n-\r\n-    //public void addEmployee(Employee emp) {\r\n-    //    empMap.put(emp.getEmpId(), emp);\r\n-    //}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Dept1\")\n+//@Access(AccessType.PROPERTY)\n+public class Department1 {\n+\n+    //@Id\n+    int deptId;\n+\n+    //@OneToMany(mappedBy=\"department\", fetch=FetchType.EAGER)\n+    //@MapKey(name=\"empId\")\n+    Map<Integer, Employee1> empMap = new HashMap<Integer, Employee1>();\n+\n+    @Id\n+    public int getDeptId() {\n+        return deptId;\n+    }\n+\n+    public void setDeptId(int deptId) {\n+        this.deptId = deptId;\n+    }\n+\n+    @OneToMany(mappedBy=\"department\", fetch=FetchType.EAGER)\n+    @MapKey(name=\"empId\")\n+    public Map<Integer, Employee1> getEmpMap() {\n+        return empMap;\n+    }\n+\n+    public void setEmpMap(Map<Integer, Employee1> empMap) {\n+        this.empMap = empMap;\n+    }\n+\n+    //public void addEmployee(Employee emp) {\n+    //    empMap.put(emp.getEmpId(), emp);\n+    //}\n+}"},{"sha":"28c2f6ea05c58e65bd14b5e348b6fdcb00e6baab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department2.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Dept2\")\r\n-public class Department2 {\r\n-\r\n-    int deptId;\r\n-    Map<EmployeePK2, Employee2> empMap = new HashMap<EmployeePK2, Employee2>();\r\n-\r\n-    @Id\r\n-    public int getDeptId() {\r\n-        return deptId;\r\n-    }\r\n-\r\n-    public void setDeptId(int deptId) {\r\n-        this.deptId = deptId;\r\n-    }\r\n-\r\n-    @OneToMany(mappedBy=\"department\")\r\n-    @MapKey(name=\"empPK\")\r\n-    public Map<EmployeePK2, Employee2> getEmpMap() {\r\n-        return empMap;\r\n-    }\r\n-\r\n-    public void setEmpMap(Map<EmployeePK2, Employee2> empMap) {\r\n-        this.empMap = empMap;\r\n-    }\r\n-\r\n-    public void addEmployee(Employee2 emp) {\r\n-        empMap.put(emp.getEmpPK(), emp);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Dept2\")\n+public class Department2 {\n+\n+    int deptId;\n+    Map<EmployeePK2, Employee2> empMap = new HashMap<EmployeePK2, Employee2>();\n+\n+    @Id\n+    public int getDeptId() {\n+        return deptId;\n+    }\n+\n+    public void setDeptId(int deptId) {\n+        this.deptId = deptId;\n+    }\n+\n+    @OneToMany(mappedBy=\"department\")\n+    @MapKey(name=\"empPK\")\n+    public Map<EmployeePK2, Employee2> getEmpMap() {\n+        return empMap;\n+    }\n+\n+    public void setEmpMap(Map<EmployeePK2, Employee2> empMap) {\n+        this.empMap = empMap;\n+    }\n+\n+    public void addEmployee(Employee2 emp) {\n+        empMap.put(emp.getEmpPK(), emp);\n+    }\n+}"},{"sha":"c52e6047cc5831e6a4f73f5456b73745caa334b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department3.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Department3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.MapKey;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Dept3\")\r\n-public class Department3 {\r\n-\r\n-    @Id\r\n-    int deptId;\r\n-\r\n-    @OneToMany(mappedBy=\"department\", fetch=FetchType.EAGER)\r\n-    @MapKey(name=\"name\")\r\n-    Map<EmployeeName3, Employee3> emps =\r\n-        new HashMap<EmployeeName3, Employee3>();\r\n-\r\n-    public int getDeptId() {\r\n-        return deptId;\r\n-    }\r\n-\r\n-    public void setDeptId(int deptId) {\r\n-        this.deptId = deptId;\r\n-    }\r\n-\r\n-    public Map<EmployeeName3, Employee3> getEmployees() {\r\n-        return emps;\r\n-    }\r\n-\r\n-    public void addEmployee(Employee3 emp) {\r\n-        emps.put(emp.getName(), emp);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.MapKey;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"S26Dept3\")\n+public class Department3 {\n+\n+    @Id\n+    int deptId;\n+\n+    @OneToMany(mappedBy=\"department\", fetch=FetchType.EAGER)\n+    @MapKey(name=\"name\")\n+    Map<EmployeeName3, Employee3> emps =\n+        new HashMap<EmployeeName3, Employee3>();\n+\n+    public int getDeptId() {\n+        return deptId;\n+    }\n+\n+    public void setDeptId(int deptId) {\n+        this.deptId = deptId;\n+    }\n+\n+    public Map<EmployeeName3, Employee3> getEmployees() {\n+        return emps;\n+    }\n+\n+    public void addEmployee(Employee3 emp) {\n+        emps.put(emp.getName(), emp);\n+    }\n+}"},{"sha":"4c63b8cdc769ec161db6e614dfb1a24ad30756c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee1.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Emp1\")\r\n-public class Employee1 {\r\n-    @Id\r\n-    int empId;\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumn(name=\"dept_id\")\r\n-    Department1 department;\r\n-\r\n-    //@Id\r\n-    public int getEmpId() {\r\n-        return empId;\r\n-    }\r\n-\r\n-    public void setEmpId(int empId) {\r\n-        this.empId = empId;\r\n-    }\r\n-\r\n-    //@ManyToOne\r\n-    //@JoinColumn(name=\"dept_id\")\r\n-    public Department1 getDepartment() {\r\n-        return department;\r\n-    }\r\n-\r\n-    public void setDepartment(Department1 department) {\r\n-        this.department = department;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Emp1\")\n+public class Employee1 {\n+    @Id\n+    int empId;\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"dept_id\")\n+    Department1 department;\n+\n+    //@Id\n+    public int getEmpId() {\n+        return empId;\n+    }\n+\n+    public void setEmpId(int empId) {\n+        this.empId = empId;\n+    }\n+\n+    //@ManyToOne\n+    //@JoinColumn(name=\"dept_id\")\n+    public Department1 getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(Department1 department) {\n+        this.department = department;\n+    }\n+}"},{"sha":"7414e1d56745f8c5c7719a44ab818cd02eb3c012","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee2.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Emp2\")\r\n-public class Employee2 {\r\n-    EmployeePK2 empPK;\r\n-\r\n-    Department2 department;\r\n-\r\n-    public Employee2() {}\r\n-\r\n-    public Employee2(String name, Date bDate) {\r\n-        this.empPK = new EmployeePK2(name, bDate);\r\n-    }\r\n-\r\n-    @EmbeddedId\r\n-    public EmployeePK2 getEmpPK() {\r\n-        return empPK;\r\n-    }\r\n-\r\n-    public void setEmpPK(EmployeePK2 empPK) {\r\n-        this.empPK = empPK;\r\n-    }\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumn(name=\"dept_id\")\r\n-    public Department2 getDepartment() {\r\n-        return department;\r\n-    }\r\n-\r\n-    public void setDepartment(Department2 department) {\r\n-        this.department = department;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import java.util.Date;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Emp2\")\n+public class Employee2 {\n+    EmployeePK2 empPK;\n+\n+    Department2 department;\n+\n+    public Employee2() {}\n+\n+    public Employee2(String name, Date bDate) {\n+        this.empPK = new EmployeePK2(name, bDate);\n+    }\n+\n+    @EmbeddedId\n+    public EmployeePK2 getEmpPK() {\n+        return empPK;\n+    }\n+\n+    public void setEmpPK(EmployeePK2 empPK) {\n+        this.empPK = empPK;\n+    }\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"dept_id\")\n+    public Department2 getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(Department2 department) {\n+        this.department = department;\n+    }\n+}"},{"sha":"e5f7651a71af17bbf95b50525a360e6b47cda28e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee3.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/Employee3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Emp3\")\r\n-public class Employee3 {\r\n-    @Id\r\n-    int empId;\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumn(name=\"dept_id\")\r\n-    Department3 department;\r\n-\r\n-    @Embedded\r\n-    EmployeeName3 name;\r\n-\r\n-    public int getEmpId() {\r\n-        return empId;\r\n-    }\r\n-\r\n-    public void setEmpId(int empId) {\r\n-        this.empId = empId;\r\n-    }\r\n-\r\n-    public Department3 getDepartment() {\r\n-        return department;\r\n-    }\r\n-\r\n-    public void setDepartment(Department3 department) {\r\n-        this.department = department;\r\n-    }\r\n-\r\n-    public EmployeeName3 getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(EmployeeName3 name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Emp3\")\n+public class Employee3 {\n+    @Id\n+    int empId;\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"dept_id\")\n+    Department3 department;\n+\n+    @Embedded\n+    EmployeeName3 name;\n+\n+    public int getEmpId() {\n+        return empId;\n+    }\n+\n+    public void setEmpId(int empId) {\n+        this.empId = empId;\n+    }\n+\n+    public Department3 getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(Department3 department) {\n+        this.department = department;\n+    }\n+\n+    public EmployeeName3 getName() {\n+        return name;\n+    }\n+\n+    public void setName(EmployeeName3 name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"75da23f8dc8af574971a6d6d0a924b99f862fbd6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeeName3.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeeName3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeeName3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeeName3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-\r\n-@Embeddable\r\n-public class EmployeeName3 {\r\n-\r\n-    String fName;\r\n-    String lName;\r\n-\r\n-    public EmployeeName3() {}\r\n-\r\n-    public EmployeeName3(String fName, String lName) {\r\n-        this.fName = fName;\r\n-        this.lName = lName;\r\n-    }\r\n-\r\n-    public String getFName() {\r\n-        return fName;\r\n-    }\r\n-\r\n-    public void setFName(String fName) {\r\n-        this.fName = fName;\r\n-    }\r\n-\r\n-    public String getLName() {\r\n-        return lName;\r\n-    }\r\n-\r\n-    public void setLName(String lName) {\r\n-        this.lName = lName;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        if (!(o instanceof EmployeeName3))\r\n-            return false;\r\n-        EmployeeName3 other = (EmployeeName3) o;\r\n-        if (fName.equals(other.fName) &&\r\n-            lName.equals(other.lName))\r\n-            return true;\r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int ret = 0;\r\n-        ret += lName.hashCode();\r\n-        ret = 31 * ret + fName.hashCode();\r\n-        return ret;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class EmployeeName3 {\n+\n+    String fName;\n+    String lName;\n+\n+    public EmployeeName3() {}\n+\n+    public EmployeeName3(String fName, String lName) {\n+        this.fName = fName;\n+        this.lName = lName;\n+    }\n+\n+    public String getFName() {\n+        return fName;\n+    }\n+\n+    public void setFName(String fName) {\n+        this.fName = fName;\n+    }\n+\n+    public String getLName() {\n+        return lName;\n+    }\n+\n+    public void setLName(String lName) {\n+        this.lName = lName;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof EmployeeName3))\n+            return false;\n+        EmployeeName3 other = (EmployeeName3) o;\n+        if (fName.equals(other.fName) &&\n+            lName.equals(other.lName))\n+            return true;\n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int ret = 0;\n+        ret += lName.hashCode();\n+        ret = 31 * ret + fName.hashCode();\n+        return ret;\n+    }\n+}"},{"sha":"32c548bd56b515d726e3d1d2bea2a406ec059ecf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeePK2.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeePK2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeePK2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/EmployeePK2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Embeddable\r\n-public class EmployeePK2 implements Serializable {\r\n-    String name;\r\n-    Date bDay;\r\n-\r\n-    public EmployeePK2() {}\r\n-    public EmployeePK2(String name, Date bDay) {\r\n-        this.name = name;\r\n-        this.bDay = bDay;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        if (this == o)\r\n-            return true;\r\n-        if (!(o instanceof EmployeePK2))\r\n-            return false;\r\n-        EmployeePK2 pk = (EmployeePK2) o;\r\n-        if (pk.name.equals(name) &&\r\n-            pk.bDay.equals(bDay))\r\n-            return true;    \r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int code = 0;\r\n-        code += name.hashCode();\r\n-        code += bDay.hashCode();\r\n-        return code;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+import javax.persistence.*;\n+\n+@Embeddable\n+public class EmployeePK2 implements Serializable {\n+    String name;\n+    Date bDay;\n+\n+    public EmployeePK2() {}\n+    public EmployeePK2(String name, Date bDay) {\n+        this.name = name;\n+        this.bDay = bDay;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (!(o instanceof EmployeePK2))\n+            return false;\n+        EmployeePK2 pk = (EmployeePK2) o;\n+        if (pk.name.equals(name) &&\n+            pk.bDay.equals(bDay))\n+            return true;    \n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int code = 0;\n+        code += name.hashCode();\n+        code += bDay.hashCode();\n+        return code;\n+    }\n+}"},{"sha":"e310c6676e2a80d84725d343a968d4d0d9ec9a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","status":"modified","additions":348,"deletions":348,"changes":696,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex0/TestSpec10_1_26.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,349 +1,349 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import junit.framework.*;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestSpec10_1_26 extends SingleEMFTestCase {\r\n-\r\n-    public int numDepartments = 2;\r\n-    public int numEmployeesPerDept = 2;\r\n-    public List<String> namedQueries = new ArrayList<String>();\r\n-\r\n-    public int deptId = 1;\r\n-    public int empId = 1;\r\n-\r\n-    protected List<String> sql = new ArrayList<String>();\r\n-    protected int sqlCount;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(DROP_TABLES,\r\n-            Department1.class,\r\n-            Department2.class,\r\n-            Department3.class,\r\n-            Employee1.class,\r\n-            Employee2.class,\r\n-            Employee3.class,\r\n-            EmployeeName3.class,\r\n-            EmployeePK2.class,\r\n-            \"openjpa.jdbc.JDBCListeners\", \r\n-            new JDBCListener[] { \r\n-            this.new Listener() \r\n-        });\r\n-        createObj();\r\n-    }\r\n-\r\n-    public void testQueryQualifiedId() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String query = \"select KEY(e) from Department1 d, \" +\r\n-            \" in (d.empMap) e\";\r\n-        List rs = em.createQuery(query).getResultList();\r\n-        Integer d = (Integer) rs.get(0);\r\n-        String query2 = \"select KEY(e) from Department2 d, \" +\r\n-            \" in (d.empMap) e\";\r\n-        List rs2 = em.createQuery(query2).getResultList();\r\n-        EmployeePK2 d2 = (EmployeePK2) rs2.get(0);\r\n-        String query3 = \"select KEY(e) from Department3 d, \" +\r\n-            \" in (d.emps) e\";\r\n-        List rs3 = em.createQuery(query3).getResultList();\r\n-        EmployeeName3 d3 = (EmployeeName3) rs3.get(0);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQueryObject() {\r\n-        queryObj();\r\n-    }\r\n-\r\n-    public List<String> getSql() {\r\n-        return sql;\r\n-    }\r\n-\r\n-    public int getSqlCount() {\r\n-        return sqlCount;\r\n-    }\r\n-\r\n-\r\n-    public void createObj() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        for (int i = 0; i < numDepartments; i++)\r\n-            createDepartment1(em, deptId++);\r\n-\r\n-        for (int i = 0; i < numDepartments; i++)\r\n-            createDepartment2(em, deptId++);\r\n-\r\n-        for (int i = 0; i < numDepartments; i++)\r\n-            createDepartment3(em, deptId++);\r\n-\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void createDepartment1(EntityManager em, int id) {\r\n-        Department1 d = new Department1();\r\n-        d.setDeptId(id);\r\n-        Map empMap = new HashMap();\r\n-        for (int i = 0; i < numEmployeesPerDept; i++) {\r\n-            Employee1 e = createEmployee1(em, empId++);\r\n-            //d.addEmployee1(e);\r\n-            empMap.put(e.getEmpId(), e);\r\n-            e.setDepartment(d);\r\n-            em.persist(e);\r\n-        }\r\n-        d.setEmpMap(empMap);\r\n-        em.persist(d);\r\n-    }\r\n-\r\n-    public Employee1 createEmployee1(EntityManager em, int id) {\r\n-        Employee1 e = new Employee1();\r\n-        e.setEmpId(id);\r\n-        return e;\r\n-    }\r\n-\r\n-    public void createDepartment2(EntityManager em, int id) {\r\n-        Department2 d = new Department2();\r\n-        d.setDeptId(id);\r\n-        for (int i = 0; i < numEmployeesPerDept; i++) {\r\n-            Employee2 e = createEmployee2(em, empId++);\r\n-            d.addEmployee(e);\r\n-            e.setDepartment(d);\r\n-            em.persist(e);\r\n-        }\r\n-        em.persist(d);\r\n-    }\r\n-\r\n-    public Employee2 createEmployee2(EntityManager em, int id) {\r\n-        Employee2 e = new Employee2(\"e\" + id, new Date());\r\n-        return e;\r\n-    }\r\n-\r\n-    public void createDepartment3(EntityManager em, int id) {\r\n-        Department3 d = new Department3();\r\n-        d.setDeptId(id);\r\n-        for (int i = 0; i < numEmployeesPerDept; i++) {\r\n-            Employee3 e = createEmployee3(em, empId++);\r\n-            d.addEmployee(e);\r\n-            e.setDepartment(d);\r\n-            em.persist(e);\r\n-        }\r\n-        em.persist(d);\r\n-    }\r\n-\r\n-    public Employee3 createEmployee3(EntityManager em, int id) {\r\n-        Employee3 e = new Employee3();\r\n-        EmployeeName3 name = new EmployeeName3(\"f\" + id, \"l\" + id);\r\n-        e.setEmpId(id);\r\n-        e.setName(name);\r\n-        return e;\r\n-    }\r\n-\r\n-    public void findObj() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Department1 d1 = em.find(Department1.class, 1);\r\n-        assertDepartment1(d1);\r\n-\r\n-        Employee1 e1 = em.find(Employee1.class, 1);\r\n-        assertEmployee1(e1);\r\n-\r\n-        Department2 d2 = em.find(Department2.class, 3);\r\n-        assertDepartment2(d2);\r\n-\r\n-        Map empMap = d2.getEmpMap();\r\n-        Set<EmployeePK2> keys = empMap.keySet();\r\n-        for (EmployeePK2 key : keys) {\r\n-            Employee2 e2 = em.find(Employee2.class, key);\r\n-            assertEmployee2(e2);\r\n-        }\r\n-\r\n-        Department3 d3 = em.find(Department3.class, 5);\r\n-        assertDepartment3(d3);\r\n-\r\n-        Employee3 e3 = em.find(Employee3.class, 9);\r\n-        assertEmployee3(e3);\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void assertDepartment1(Department1 d) {\r\n-        int id = d.getDeptId();\r\n-        Map<Integer, Employee1> es = d.getEmpMap();\r\n-        Assert.assertEquals(2,es.size());\r\n-        Set keys = es.keySet();\r\n-        for (Object obj : keys) {\r\n-            Integer empId = (Integer) obj;\r\n-            Employee1 e = es.get(empId);\r\n-            Assert.assertEquals(empId.intValue(), e.getEmpId());\r\n-        }\r\n-    }\r\n-\r\n-    public void assertDepartment2(Department2 d) {\r\n-        int id = d.getDeptId();\r\n-        Map<EmployeePK2, Employee2> es = d.getEmpMap();\r\n-        Assert.assertEquals(2,es.size());\r\n-        Set<EmployeePK2> keys = es.keySet();\r\n-        for (EmployeePK2 pk : keys) {\r\n-            Employee2 e = es.get(pk);\r\n-            Assert.assertEquals(pk, e.getEmpPK());\r\n-        }\r\n-    }\t\r\n-\r\n-    public void assertDepartment3(Department3 d) {\r\n-        int id = d.getDeptId();\r\n-        Map<EmployeeName3, Employee3> es = d.getEmployees();\r\n-        Assert.assertEquals(2,es.size());\r\n-        Set<EmployeeName3> keys = es.keySet();\r\n-        for (EmployeeName3 key : keys) {\r\n-            Employee3 e = es.get(key);\r\n-            Assert.assertEquals(key, e.getName());\r\n-        }\r\n-    }\r\n-\r\n-    public void assertEmployee1(Employee1 e) {\r\n-        int id = e.getEmpId();\r\n-        Department1 d = e.getDepartment();\r\n-        assertDepartment1(d);\r\n-    }\r\n-\r\n-    public void assertEmployee2(Employee2 e) {\r\n-        EmployeePK2 pk = e.getEmpPK();\r\n-        Department2 d = e.getDepartment();\r\n-        assertDepartment2(d);\r\n-    }\r\n-\r\n-    public void assertEmployee3(Employee3 e) {\r\n-        int id = e.getEmpId();\r\n-        Department3 d = e.getDepartment();\r\n-        assertDepartment3(d);\r\n-    }\r\n-\r\n-    public void queryObj() {\r\n-        queryDepartment1(emf);\r\n-        queryEmployee1(emf);\r\n-        queryDepartment2(emf);\r\n-        queryEmployee2(emf);\r\n-        queryDepartment3(emf);\r\n-        queryEmployee3(emf);\r\n-    }\r\n-\r\n-    public void queryDepartment1(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select d from Department1 d\");\r\n-        List<Department1> ds = q.getResultList();\r\n-        for (Department1 d : ds)\r\n-            assertDepartment1(d);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee1(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee1 e\");\r\n-        List<Employee1> es = q.getResultList();\r\n-        for (Employee1 e : es)\r\n-            assertEmployee1(e);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryDepartment2(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select d from Department2 d\");\r\n-        List<Department2> ds = q.getResultList();\r\n-        for (Department2 d : ds)\r\n-            assertDepartment2(d);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee2(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee2 e\");\r\n-        List<Employee2> es = q.getResultList();\r\n-        for (Employee2 e : es)\r\n-            assertEmployee2(e);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryDepartment3(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select d from Department3 d\");\r\n-        List<Department3> ds = q.getResultList();\r\n-        for (Department3 d : ds)\r\n-            assertDepartment3(d);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee3(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee3 e\");\r\n-        List<Employee3> es = q.getResultList();\r\n-        for (Employee3 e : es)\r\n-            assertEmployee3(e);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public class Listener extends AbstractJDBCListener {\r\n-        @Override\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL() != null && sql != null) {\r\n-                sql.add(event.getSQL());\r\n-                sqlCount++;\r\n-            }\r\n-        }\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex0;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import junit.framework.*;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestSpec10_1_26 extends SingleEMFTestCase {\n+\n+    public int numDepartments = 2;\n+    public int numEmployeesPerDept = 2;\n+    public List<String> namedQueries = new ArrayList<String>();\n+\n+    public int deptId = 1;\n+    public int empId = 1;\n+\n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n+    public void setUp() {\n+        super.setUp(DROP_TABLES,\n+            Department1.class,\n+            Department2.class,\n+            Department3.class,\n+            Employee1.class,\n+            Employee2.class,\n+            Employee3.class,\n+            EmployeeName3.class,\n+            EmployeePK2.class,\n+            \"openjpa.jdbc.JDBCListeners\", \n+            new JDBCListener[] { \n+            this.new Listener() \n+        });\n+        createObj();\n+    }\n+\n+    public void testQueryQualifiedId() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select KEY(e) from Department1 d, \" +\n+            \" in (d.empMap) e\";\n+        List rs = em.createQuery(query).getResultList();\n+        Integer d = (Integer) rs.get(0);\n+        String query2 = \"select KEY(e) from Department2 d, \" +\n+            \" in (d.empMap) e\";\n+        List rs2 = em.createQuery(query2).getResultList();\n+        EmployeePK2 d2 = (EmployeePK2) rs2.get(0);\n+        String query3 = \"select KEY(e) from Department3 d, \" +\n+            \" in (d.emps) e\";\n+        List rs3 = em.createQuery(query3).getResultList();\n+        EmployeeName3 d3 = (EmployeeName3) rs3.get(0);\n+        em.close();\n+    }\n+\n+    public void testQueryObject() {\n+        queryObj();\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public int getSqlCount() {\n+        return sqlCount;\n+    }\n+\n+\n+    public void createObj() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numDepartments; i++)\n+            createDepartment1(em, deptId++);\n+\n+        for (int i = 0; i < numDepartments; i++)\n+            createDepartment2(em, deptId++);\n+\n+        for (int i = 0; i < numDepartments; i++)\n+            createDepartment3(em, deptId++);\n+\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void createDepartment1(EntityManager em, int id) {\n+        Department1 d = new Department1();\n+        d.setDeptId(id);\n+        Map empMap = new HashMap();\n+        for (int i = 0; i < numEmployeesPerDept; i++) {\n+            Employee1 e = createEmployee1(em, empId++);\n+            //d.addEmployee1(e);\n+            empMap.put(e.getEmpId(), e);\n+            e.setDepartment(d);\n+            em.persist(e);\n+        }\n+        d.setEmpMap(empMap);\n+        em.persist(d);\n+    }\n+\n+    public Employee1 createEmployee1(EntityManager em, int id) {\n+        Employee1 e = new Employee1();\n+        e.setEmpId(id);\n+        return e;\n+    }\n+\n+    public void createDepartment2(EntityManager em, int id) {\n+        Department2 d = new Department2();\n+        d.setDeptId(id);\n+        for (int i = 0; i < numEmployeesPerDept; i++) {\n+            Employee2 e = createEmployee2(em, empId++);\n+            d.addEmployee(e);\n+            e.setDepartment(d);\n+            em.persist(e);\n+        }\n+        em.persist(d);\n+    }\n+\n+    public Employee2 createEmployee2(EntityManager em, int id) {\n+        Employee2 e = new Employee2(\"e\" + id, new Date());\n+        return e;\n+    }\n+\n+    public void createDepartment3(EntityManager em, int id) {\n+        Department3 d = new Department3();\n+        d.setDeptId(id);\n+        for (int i = 0; i < numEmployeesPerDept; i++) {\n+            Employee3 e = createEmployee3(em, empId++);\n+            d.addEmployee(e);\n+            e.setDepartment(d);\n+            em.persist(e);\n+        }\n+        em.persist(d);\n+    }\n+\n+    public Employee3 createEmployee3(EntityManager em, int id) {\n+        Employee3 e = new Employee3();\n+        EmployeeName3 name = new EmployeeName3(\"f\" + id, \"l\" + id);\n+        e.setEmpId(id);\n+        e.setName(name);\n+        return e;\n+    }\n+\n+    public void findObj() {\n+        EntityManager em = emf.createEntityManager();\n+        Department1 d1 = em.find(Department1.class, 1);\n+        assertDepartment1(d1);\n+\n+        Employee1 e1 = em.find(Employee1.class, 1);\n+        assertEmployee1(e1);\n+\n+        Department2 d2 = em.find(Department2.class, 3);\n+        assertDepartment2(d2);\n+\n+        Map empMap = d2.getEmpMap();\n+        Set<EmployeePK2> keys = empMap.keySet();\n+        for (EmployeePK2 key : keys) {\n+            Employee2 e2 = em.find(Employee2.class, key);\n+            assertEmployee2(e2);\n+        }\n+\n+        Department3 d3 = em.find(Department3.class, 5);\n+        assertDepartment3(d3);\n+\n+        Employee3 e3 = em.find(Employee3.class, 9);\n+        assertEmployee3(e3);\n+\n+        em.close();\n+    }\n+\n+    public void assertDepartment1(Department1 d) {\n+        int id = d.getDeptId();\n+        Map<Integer, Employee1> es = d.getEmpMap();\n+        Assert.assertEquals(2,es.size());\n+        Set keys = es.keySet();\n+        for (Object obj : keys) {\n+            Integer empId = (Integer) obj;\n+            Employee1 e = es.get(empId);\n+            Assert.assertEquals(empId.intValue(), e.getEmpId());\n+        }\n+    }\n+\n+    public void assertDepartment2(Department2 d) {\n+        int id = d.getDeptId();\n+        Map<EmployeePK2, Employee2> es = d.getEmpMap();\n+        Assert.assertEquals(2,es.size());\n+        Set<EmployeePK2> keys = es.keySet();\n+        for (EmployeePK2 pk : keys) {\n+            Employee2 e = es.get(pk);\n+            Assert.assertEquals(pk, e.getEmpPK());\n+        }\n+    }\t\n+\n+    public void assertDepartment3(Department3 d) {\n+        int id = d.getDeptId();\n+        Map<EmployeeName3, Employee3> es = d.getEmployees();\n+        Assert.assertEquals(2,es.size());\n+        Set<EmployeeName3> keys = es.keySet();\n+        for (EmployeeName3 key : keys) {\n+            Employee3 e = es.get(key);\n+            Assert.assertEquals(key, e.getName());\n+        }\n+    }\n+\n+    public void assertEmployee1(Employee1 e) {\n+        int id = e.getEmpId();\n+        Department1 d = e.getDepartment();\n+        assertDepartment1(d);\n+    }\n+\n+    public void assertEmployee2(Employee2 e) {\n+        EmployeePK2 pk = e.getEmpPK();\n+        Department2 d = e.getDepartment();\n+        assertDepartment2(d);\n+    }\n+\n+    public void assertEmployee3(Employee3 e) {\n+        int id = e.getEmpId();\n+        Department3 d = e.getDepartment();\n+        assertDepartment3(d);\n+    }\n+\n+    public void queryObj() {\n+        queryDepartment1(emf);\n+        queryEmployee1(emf);\n+        queryDepartment2(emf);\n+        queryEmployee2(emf);\n+        queryDepartment3(emf);\n+        queryEmployee3(emf);\n+    }\n+\n+    public void queryDepartment1(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select d from Department1 d\");\n+        List<Department1> ds = q.getResultList();\n+        for (Department1 d : ds)\n+            assertDepartment1(d);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee1(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee1 e\");\n+        List<Employee1> es = q.getResultList();\n+        for (Employee1 e : es)\n+            assertEmployee1(e);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryDepartment2(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select d from Department2 d\");\n+        List<Department2> ds = q.getResultList();\n+        for (Department2 d : ds)\n+            assertDepartment2(d);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee2(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee2 e\");\n+        List<Employee2> es = q.getResultList();\n+        for (Employee2 e : es)\n+            assertEmployee2(e);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryDepartment3(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select d from Department3 d\");\n+        List<Department3> ds = q.getResultList();\n+        for (Department3 d : ds)\n+            assertDepartment3(d);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee3(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee3 e\");\n+        List<Employee3> es = q.getResultList();\n+        for (Employee3 e : es)\n+            assertEmployee3(e);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n }\n\\ No newline at end of file"},{"sha":"0ad4770f345e88a443c3edf948c0abfc09e4b14c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Department.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex1;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Ex1Dept\")\r\n-public class Department {\r\n-    \r\n-    @Id\r\n-    int deptId;\r\n-    \r\n-    @OneToMany(cascade=CascadeType.ALL, mappedBy=\"dept\", fetch=FetchType.EAGER)\r\n-    @MapKey(name=\"empId\")\r\n-    Map<Integer, Employee> empMap = new HashMap<Integer, Employee>();\r\n-    \r\n-    public int getDeptId() {\r\n-        return deptId;\r\n-    }\r\n-    \r\n-    public void setDeptId(int deptId) {\r\n-        this.deptId = deptId;\r\n-    }\r\n-    \r\n-    public Map<Integer, Employee> getEmpMap() {\r\n-        return empMap;\r\n-    }\r\n-    \r\n-    public void setEmpMap(Map<Integer, Employee> empMap) {\r\n-        this.empMap = empMap;\r\n-    }\r\n-    \r\n-    public void addEmployee(Employee e) {\r\n-        empMap.put(e.getEmpId(), e);\r\n-    }\r\n-    \r\n-    public void removeEmployee(Integer empId) {\r\n-        empMap.remove(empId);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex1;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Ex1Dept\")\n+public class Department {\n+    \n+    @Id\n+    int deptId;\n+    \n+    @OneToMany(cascade=CascadeType.ALL, mappedBy=\"dept\", fetch=FetchType.EAGER)\n+    @MapKey(name=\"empId\")\n+    Map<Integer, Employee> empMap = new HashMap<Integer, Employee>();\n+    \n+    public int getDeptId() {\n+        return deptId;\n+    }\n+    \n+    public void setDeptId(int deptId) {\n+        this.deptId = deptId;\n+    }\n+    \n+    public Map<Integer, Employee> getEmpMap() {\n+        return empMap;\n+    }\n+    \n+    public void setEmpMap(Map<Integer, Employee> empMap) {\n+        this.empMap = empMap;\n+    }\n+    \n+    public void addEmployee(Employee e) {\n+        empMap.put(e.getEmpId(), e);\n+    }\n+    \n+    public void removeEmployee(Integer empId) {\n+        empMap.remove(empId);\n+    }\n+}"},{"sha":"dabf5de7785b411b8f489850b0a1700ae630f4d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Employee.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex1;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Ex1Emp\")\r\n-public class Employee {\r\n-    @Id\r\n-    int empId;\r\n-    \r\n-    @ManyToOne\r\n-    @JoinColumn(name=\"dept_id\")\r\n-    Department dept;\r\n-    \r\n-    public int getEmpId() {\r\n-        return empId;\r\n-    }\r\n-    \r\n-    public void setEmpId(int empId) {\r\n-        this.empId = empId;\r\n-    }\r\n-    \r\n-    public Department getDepartment() {\r\n-        return dept;\r\n-    }\r\n-    \r\n-    public void setDepartment(Department department) {\r\n-        this.dept = department;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex1;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Ex1Emp\")\n+public class Employee {\n+    @Id\n+    int empId;\n+    \n+    @ManyToOne\n+    @JoinColumn(name=\"dept_id\")\n+    Department dept;\n+    \n+    public int getEmpId() {\n+        return empId;\n+    }\n+    \n+    public void setEmpId(int empId) {\n+        this.empId = empId;\n+    }\n+    \n+    public Department getDepartment() {\n+        return dept;\n+    }\n+    \n+    public void setDepartment(Department department) {\n+        this.dept = department;\n+    }\n+}"},{"sha":"4d7041bf3db2980f31f2f91f760750c14f88d6f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java","status":"modified","additions":235,"deletions":235,"changes":470,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex1/TestSpec10_1_26_Ex1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,235 +1,235 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex1;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestSpec10_1_26_Ex1 extends SingleEMFTestCase {\r\n-\r\n-    public int numDepartments = 2;\r\n-    public int numEmployeesPerDept = 2;\r\n-    public List<String> namedQueries = new ArrayList<String>();\r\n-\r\n-    public int deptId = 1;\r\n-    public int empId = 1;\r\n-\r\n-    protected List<String> sql = new ArrayList<String>();\r\n-    protected int sqlCount;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(CLEAR_TABLES,\r\n-            Department.class,\r\n-            Employee.class,\r\n-            \"openjpa.jdbc.JDBCListeners\", \r\n-            new JDBCListener[] { \r\n-            this.new Listener() \r\n-        });\r\n-        createObj();\r\n-    }\r\n-\r\n-    public void testQualifiedId() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String query = \"select KEY(e) from Department d, \" +\r\n-            \" in (d.empMap) e order by d.deptId, e.empId\";\r\n-        List rs = em.createQuery(query).getResultList();\r\n-        Integer d = (Integer) rs.get(0);\r\n-\r\n-        em.clear();\r\n-        String query4 = \"select ENTRY(e) from Department d, \" +\r\n-            \" in (d.empMap) e order by d.deptId, e.empId\";\r\n-        List rs4 = em.createQuery(query4).getResultList();\r\n-        Map.Entry me = (Map.Entry) rs4.get(0);\r\n-\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        // test KEY(e) of basic type in conditional expression\r\n-        sql.clear();\r\n-        query = \"select KEY(e) from Department d, \" +\r\n-            \" in (d.empMap) e where KEY(e) > 1\";\r\n-        rs = em.createQuery(query).getResultList();\r\n-        assertTrue(sql.get(0).toUpperCase().indexOf(\">\") > 0);\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQueryObject() throws Exception {\r\n-        queryObj();\r\n-        findObj();\r\n-    }\r\n-                \r\n-    public List<String> getSql() {\r\n-        return sql;\r\n-    }\r\n-\r\n-    public int getSqlCount() {\r\n-        return sqlCount;\r\n-    }\r\n-\r\n-    public void createObj() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        for (int i = 0; i < numDepartments; i++)\r\n-            createDepartment(em, deptId++);\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void createDepartment(EntityManager em, int id) {\r\n-        Department d = new Department();\r\n-        d.setDeptId(id);\r\n-        Map emps = new HashMap();\r\n-        for (int i = 0; i < numEmployeesPerDept; i++) {\r\n-            Employee e = createEmployee(em, empId++);\r\n-            d.addEmployee(e);\r\n-            emps.put(e.getEmpId(), e);\r\n-            e.setDepartment(d);\r\n-            em.persist(e);\r\n-        }\r\n-        em.persist(d);\r\n-    }\r\n-\r\n-    public Employee createEmployee(EntityManager em, int id) {\r\n-        Employee e = new Employee();\r\n-        e.setEmpId(id);\r\n-        return e;\r\n-    }\r\n-\r\n-    public void findObj() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Department d = em.find(Department.class, 1);\r\n-        assertDepartment(d);\r\n-\r\n-        Employee e = em.find(Employee.class, 1);\r\n-        assertEmployee(e);\r\n-\r\n-        // updateObj by adding a new Employee\r\n-        updateObj(em, d);\r\n-\r\n-        deleteObj(em, d);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void updateObj(EntityManager em, Department d) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        \r\n-        // add an element\r\n-        tran.begin();\r\n-        Employee e = createEmployee(em,\r\n-            numDepartments * numEmployeesPerDept + 1);\r\n-        d.addEmployee(e);\r\n-        e.setDepartment(d);\r\n-        em.persist(d);\r\n-        em.persist(e);\r\n-        em.flush();\r\n-        tran.commit();\r\n-\r\n-        // remove an element\r\n-        tran.begin();\r\n-        d.removeEmployee(e.getEmpId());\r\n-        e.setDepartment(null);\r\n-        em.persist(d);\r\n-        em.persist(e);\r\n-        em.flush();\r\n-        tran.commit();\r\n-        \r\n-    }\r\n-\r\n-    public void deleteObj(EntityManager em, Department d) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        em.remove(d);\r\n-        tran.commit();\r\n-    }\r\n-    \r\n-    public void assertDepartment(Department d) {\r\n-        int id = d.getDeptId();\r\n-        Map<Integer, Employee> es = d.getEmpMap();\r\n-        Assert.assertEquals(2, es.size());\r\n-        Set keys = es.keySet();\r\n-        for (Object obj : keys) {\r\n-            Integer empId = (Integer) obj;\r\n-            Employee e = es.get(empId);\r\n-            Assert.assertEquals(empId.intValue(), e.getEmpId());\r\n-        }\r\n-    }\r\n-\r\n-    public void queryObj() {\r\n-        queryDepartment();\r\n-        queryEmployee();\r\n-    }\r\n-\r\n-    public void queryDepartment() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select d from Department d\");\r\n-        List<Department> ds = q.getResultList();\r\n-        for (Department d : ds)\r\n-            assertDepartment(d);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee e\");\r\n-        List<Employee> es = q.getResultList();\r\n-        for (Employee e : es)\r\n-            assertEmployee(e);\r\n-\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void assertEmployee(Employee e) {\r\n-        int id = e.getEmpId();\r\n-        Department d = e.getDepartment();\r\n-        assertDepartment(d);\r\n-    }\r\n-\r\n-    public class Listener extends AbstractJDBCListener {\r\n-        @Override\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL() != null && sql != null) {\r\n-                sql.add(event.getSQL());\r\n-                sqlCount++;\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex1;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestSpec10_1_26_Ex1 extends SingleEMFTestCase {\n+\n+    public int numDepartments = 2;\n+    public int numEmployeesPerDept = 2;\n+    public List<String> namedQueries = new ArrayList<String>();\n+\n+    public int deptId = 1;\n+    public int empId = 1;\n+\n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Department.class,\n+            Employee.class,\n+            \"openjpa.jdbc.JDBCListeners\", \n+            new JDBCListener[] { \n+            this.new Listener() \n+        });\n+        createObj();\n+    }\n+\n+    public void testQualifiedId() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select KEY(e) from Department d, \" +\n+            \" in (d.empMap) e order by d.deptId, e.empId\";\n+        List rs = em.createQuery(query).getResultList();\n+        Integer d = (Integer) rs.get(0);\n+\n+        em.clear();\n+        String query4 = \"select ENTRY(e) from Department d, \" +\n+            \" in (d.empMap) e order by d.deptId, e.empId\";\n+        List rs4 = em.createQuery(query4).getResultList();\n+        Map.Entry me = (Map.Entry) rs4.get(0);\n+\n+        assertTrue(d.equals(me.getKey()));\n+\n+        // test KEY(e) of basic type in conditional expression\n+        sql.clear();\n+        query = \"select KEY(e) from Department d, \" +\n+            \" in (d.empMap) e where KEY(e) > 1\";\n+        rs = em.createQuery(query).getResultList();\n+        assertTrue(sql.get(0).toUpperCase().indexOf(\">\") > 0);\n+\n+        em.close();\n+    }\n+\n+    public void testQueryObject() throws Exception {\n+        queryObj();\n+        findObj();\n+    }\n+                \n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public int getSqlCount() {\n+        return sqlCount;\n+    }\n+\n+    public void createObj() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numDepartments; i++)\n+            createDepartment(em, deptId++);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void createDepartment(EntityManager em, int id) {\n+        Department d = new Department();\n+        d.setDeptId(id);\n+        Map emps = new HashMap();\n+        for (int i = 0; i < numEmployeesPerDept; i++) {\n+            Employee e = createEmployee(em, empId++);\n+            d.addEmployee(e);\n+            emps.put(e.getEmpId(), e);\n+            e.setDepartment(d);\n+            em.persist(e);\n+        }\n+        em.persist(d);\n+    }\n+\n+    public Employee createEmployee(EntityManager em, int id) {\n+        Employee e = new Employee();\n+        e.setEmpId(id);\n+        return e;\n+    }\n+\n+    public void findObj() {\n+        EntityManager em = emf.createEntityManager();\n+        Department d = em.find(Department.class, 1);\n+        assertDepartment(d);\n+\n+        Employee e = em.find(Employee.class, 1);\n+        assertEmployee(e);\n+\n+        // updateObj by adding a new Employee\n+        updateObj(em, d);\n+\n+        deleteObj(em, d);\n+        em.close();\n+    }\n+\n+    public void updateObj(EntityManager em, Department d) {\n+        EntityTransaction tran = em.getTransaction();\n+        \n+        // add an element\n+        tran.begin();\n+        Employee e = createEmployee(em,\n+            numDepartments * numEmployeesPerDept + 1);\n+        d.addEmployee(e);\n+        e.setDepartment(d);\n+        em.persist(d);\n+        em.persist(e);\n+        em.flush();\n+        tran.commit();\n+\n+        // remove an element\n+        tran.begin();\n+        d.removeEmployee(e.getEmpId());\n+        e.setDepartment(null);\n+        em.persist(d);\n+        em.persist(e);\n+        em.flush();\n+        tran.commit();\n+        \n+    }\n+\n+    public void deleteObj(EntityManager em, Department d) {\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.remove(d);\n+        tran.commit();\n+    }\n+    \n+    public void assertDepartment(Department d) {\n+        int id = d.getDeptId();\n+        Map<Integer, Employee> es = d.getEmpMap();\n+        Assert.assertEquals(2, es.size());\n+        Set keys = es.keySet();\n+        for (Object obj : keys) {\n+            Integer empId = (Integer) obj;\n+            Employee e = es.get(empId);\n+            Assert.assertEquals(empId.intValue(), e.getEmpId());\n+        }\n+    }\n+\n+    public void queryObj() {\n+        queryDepartment();\n+        queryEmployee();\n+    }\n+\n+    public void queryDepartment() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select d from Department d\");\n+        List<Department> ds = q.getResultList();\n+        for (Department d : ds)\n+            assertDepartment(d);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee e\");\n+        List<Employee> es = q.getResultList();\n+        for (Employee e : es)\n+            assertEmployee(e);\n+\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void assertEmployee(Employee e) {\n+        int id = e.getEmpId();\n+        Department d = e.getDepartment();\n+        assertDepartment(d);\n+    }\n+\n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n+}"},{"sha":"385c7d4b7a2a3ad3b4bed3d1edd6657fdbb7c79d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Department.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Ex2Dept\")\r\n-public class Department {\r\n-\r\n-    int deptId;\r\n-    Map<EmployeePK, Employee> empMap = new HashMap<EmployeePK, Employee>();\r\n-\r\n-    @Id\r\n-    public int getDeptId() {\r\n-        return deptId;\r\n-    }\r\n-\r\n-    public void setDeptId(int deptId) {\r\n-        this.deptId = deptId;\r\n-    }\r\n-\r\n-    @OneToMany(cascade=CascadeType.ALL,mappedBy=\"department\")\r\n-    @MapKey(name=\"empPK\")\r\n-    public Map<EmployeePK, Employee> getEmpMap() {\r\n-        return empMap;\r\n-    }\r\n-\r\n-    public void setEmpMap(Map<EmployeePK, Employee> empMap) {\r\n-        this.empMap = empMap;\r\n-    }\r\n-\r\n-    public void addEmployee(Employee e) {\r\n-        empMap.put(e.getEmpPK(), e);\r\n-    }\r\n-\r\n-    public void removeEmployee(EmployeePK pk) {\r\n-        empMap.remove(pk);\r\n-    }    \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Ex2Dept\")\n+public class Department {\n+\n+    int deptId;\n+    Map<EmployeePK, Employee> empMap = new HashMap<EmployeePK, Employee>();\n+\n+    @Id\n+    public int getDeptId() {\n+        return deptId;\n+    }\n+\n+    public void setDeptId(int deptId) {\n+        this.deptId = deptId;\n+    }\n+\n+    @OneToMany(cascade=CascadeType.ALL,mappedBy=\"department\")\n+    @MapKey(name=\"empPK\")\n+    public Map<EmployeePK, Employee> getEmpMap() {\n+        return empMap;\n+    }\n+\n+    public void setEmpMap(Map<EmployeePK, Employee> empMap) {\n+        this.empMap = empMap;\n+    }\n+\n+    public void addEmployee(Employee e) {\n+        empMap.put(e.getEmpPK(), e);\n+    }\n+\n+    public void removeEmployee(EmployeePK pk) {\n+        empMap.remove(pk);\n+    }    \n+}"},{"sha":"5a03428757de50f7eaff288c594597e9d3a2f199","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Employee.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\r\n-\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Ex2Emp\")\r\n-public class Employee {\r\n-    EmployeePK empPK;\r\n-\r\n-    Department department;\r\n-\r\n-    public Employee() {}\r\n-\r\n-    public Employee(String name, Date bDate) {\r\n-        this.empPK = new EmployeePK(name, bDate);\r\n-    }\r\n-\r\n-    @EmbeddedId\r\n-    public EmployeePK getEmpPK() {\r\n-        return empPK;\r\n-    }\r\n-\r\n-    public void setEmpPK(EmployeePK empPK) {\r\n-        this.empPK = empPK;\r\n-    }\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumn(name=\"dept_id\")\r\n-    public Department getDepartment() {\r\n-        return department;\r\n-    }\r\n-\r\n-    public void setDepartment(Department department) {\r\n-        this.department = department;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\n+\n+import java.util.Date;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Ex2Emp\")\n+public class Employee {\n+    EmployeePK empPK;\n+\n+    Department department;\n+\n+    public Employee() {}\n+\n+    public Employee(String name, Date bDate) {\n+        this.empPK = new EmployeePK(name, bDate);\n+    }\n+\n+    @EmbeddedId\n+    public EmployeePK getEmpPK() {\n+        return empPK;\n+    }\n+\n+    public void setEmpPK(EmployeePK empPK) {\n+        this.empPK = empPK;\n+    }\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"dept_id\")\n+    public Department getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(Department department) {\n+        this.department = department;\n+    }\n+}"},{"sha":"58e9f6f696dc7ddd1052e85953da87f5961c152a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/EmployeePK.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/EmployeePK.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/EmployeePK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/EmployeePK.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Embeddable\r\n-public class EmployeePK implements Serializable {\r\n-    String name;\r\n-    Date bDay;\r\n-\r\n-    public EmployeePK() {}\r\n-    public EmployeePK(String name, Date bDay) {\r\n-        this.name = name;\r\n-        this.bDay = bDay;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public Date getBDay() {\r\n-        return bDay;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        if (this == o)\r\n-            return true;\r\n-        if (!(o instanceof EmployeePK))\r\n-            return false;\r\n-        EmployeePK pk = (EmployeePK) o;\r\n-        if (pk.name.equals(name) &&\r\n-            pk.bDay.equals(bDay))\r\n-            return true;    \r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int code = 0;\r\n-        code += name.hashCode();\r\n-        code += bDay.hashCode();\r\n-        return code;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+import javax.persistence.*;\n+\n+@Embeddable\n+public class EmployeePK implements Serializable {\n+    String name;\n+    Date bDay;\n+\n+    public EmployeePK() {}\n+    public EmployeePK(String name, Date bDay) {\n+        this.name = name;\n+        this.bDay = bDay;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Date getBDay() {\n+        return bDay;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (!(o instanceof EmployeePK))\n+            return false;\n+        EmployeePK pk = (EmployeePK) o;\n+        if (pk.name.equals(name) &&\n+            pk.bDay.equals(bDay))\n+            return true;    \n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int code = 0;\n+        code += name.hashCode();\n+        code += bDay.hashCode();\n+        return code;\n+    }\n+}"},{"sha":"0c7b03650073cd0d618adefe6a043c8242a2a510","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java","status":"modified","additions":235,"deletions":235,"changes":470,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex2/TestSpec10_1_26_Ex2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,235 +1,235 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Date;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestSpec10_1_26_Ex2 extends SingleEMFTestCase {\r\n-    public int numDepartments = 2;\r\n-    public int numEmployeesPerDept = 2;\r\n-    public List<String> namedQueries = new ArrayList<String>();\r\n-\r\n-    public int deptId = 1;\r\n-    public int empId = 1;\r\n-\r\n-    protected List<String> sql = new ArrayList<String>();\r\n-    protected int sqlCount;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(CLEAR_TABLES,\r\n-            Department.class,\r\n-            Employee.class,\r\n-            EmployeePK.class,\r\n-            \"openjpa.jdbc.JDBCListeners\", \r\n-            new JDBCListener[] { \r\n-            this.new Listener() \r\n-        });\r\n-        createObj(emf);\r\n-    }\r\n-\r\n-    public void testQualifiedId() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String query = \"select KEY(e), KEY(e).name from Department d, \" +\r\n-            \" in (d.empMap) e where d.deptId = 1\";\r\n-        List rs = em.createQuery(query).getResultList(); \r\n-        EmployeePK d = (EmployeePK) ((Object[]) rs.get(0))[0];\r\n-        String name = (String) ((Object[]) rs.get(0))[1];\r\n-        assertEquals(d.getName(), name);\r\n-\r\n-        em.clear();\r\n-        String query4 = \"select ENTRY(e) from Department d, \" +\r\n-            \" in (d.empMap) e  where d.deptId = 1\";\r\n-        List rs4 = em.createQuery(query4).getResultList();\r\n-        Map.Entry me = (Map.Entry) rs4.get(0);\r\n-\r\n-        assertTrue(d.equals(me.getKey()));\r\n-\r\n-        // test GROUP BY qualified path\r\n-        sql.clear();\r\n-        String query5 = \"select count(KEY(e).bDay) from Department d \" +\r\n-            \" left join d.empMap e GROUP BY KEY(e).bDay\";\r\n-        List rs5 = em.createQuery(query5).getResultList();\r\n-        assertTrue(sql.get(0).toUpperCase().indexOf(\" GROUP BY \") != -1);\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQueryObject() {\r\n-        queryObj(emf);\r\n-    }\r\n-\r\n-    public List<String> getSql() {\r\n-        return sql;\r\n-    }\r\n-\r\n-    public int getSqlCount() {\r\n-        return sqlCount;\r\n-    }\r\n-\r\n-    public void createObj(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        for (int i = 0; i < numDepartments; i++)\r\n-            createDepartment(em, deptId++);\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void createDepartment(EntityManager em, int id) {\r\n-        Department d = new Department();\r\n-        d.setDeptId(id);\r\n-        for (int i = 0; i < numEmployeesPerDept; i++) {\r\n-            Employee e = createEmployee(em, empId++);\r\n-            d.addEmployee(e);\r\n-            e.setDepartment(d);\r\n-            em.persist(e);\r\n-        }\r\n-        em.persist(d);\r\n-    }\r\n-\r\n-    public Employee createEmployee(EntityManager em, int id) {\r\n-        Employee e = new Employee(\"e\" + id, new Date());\r\n-        return e;\r\n-    }\r\n-\r\n-    public void findObj(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Department d = em.find(Department.class, 1);\r\n-        assertDepartment(d);\r\n-\r\n-        Map emps = d.getEmpMap();\r\n-        Set<EmployeePK> keys = emps.keySet();\r\n-        for (EmployeePK key : keys) {\r\n-            Employee e = em.find(Employee.class, key);\r\n-            assertEmployee(e);\r\n-        }\r\n-\r\n-        // updateObj by adding a new Employee\r\n-        updateObj(em, d);\r\n-        deleteObj(em, d);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void updateObj(EntityManager em, Department d) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-\r\n-        // add an element\r\n-        tran.begin();\r\n-        Employee e = createEmployee(em, numDepartments * numEmployeesPerDept\r\n-                + 1);\r\n-        d.addEmployee(e);\r\n-        e.setDepartment(d);\r\n-        em.persist(d);\r\n-        em.persist(e);\r\n-        em.flush();\r\n-        tran.commit();\r\n-\r\n-        // remove an element\r\n-        tran.begin();\r\n-        d.removeEmployee(e.getEmpPK());\r\n-        e.setDepartment(null);\r\n-        em.persist(d);\r\n-        em.persist(e);\r\n-        em.flush();\r\n-        tran.commit();\r\n-    }\r\n-\r\n-    public void deleteObj(EntityManager em, Department d) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        em.remove(d);\r\n-        tran.commit();\r\n-    }\r\n-\r\n-    public void assertDepartment(Department d) {\r\n-        int id = d.getDeptId();\r\n-        Map es = d.getEmpMap();\r\n-        Assert.assertEquals(2, es.size());\r\n-        Set keys = es.keySet();\r\n-        for (Object obj : keys) {\r\n-            EmployeePK empPK = (EmployeePK) obj;\r\n-            Employee e = (Employee) es.get(empPK);\r\n-            Assert.assertEquals(empPK, e.getEmpPK());\r\n-        }\r\n-    }\r\n-\r\n-    public void queryObj(EntityManagerFactory emf) {\r\n-        queryDepartment(emf);\r\n-        queryEmployee(emf);\r\n-    }\r\n-\r\n-    public void queryDepartment(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select d from Department d\");\r\n-        List<Department> ds = q.getResultList();\r\n-        for (Department d : ds) {\r\n-            assertDepartment(d);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee e\");\r\n-        List<Employee> es = q.getResultList();\r\n-        for (Employee e : es) {\r\n-            assertEmployee(e);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void assertEmployee(Employee e) {\r\n-        EmployeePK pk = e.getEmpPK();\r\n-        Department d = e.getDepartment();\r\n-    }\r\n-\r\n-    public class Listener extends AbstractJDBCListener {\r\n-        @Override\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL() != null && sql != null) {\r\n-                sql.add(event.getSQL());\r\n-                sqlCount++;\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex2;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestSpec10_1_26_Ex2 extends SingleEMFTestCase {\n+    public int numDepartments = 2;\n+    public int numEmployeesPerDept = 2;\n+    public List<String> namedQueries = new ArrayList<String>();\n+\n+    public int deptId = 1;\n+    public int empId = 1;\n+\n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            Department.class,\n+            Employee.class,\n+            EmployeePK.class,\n+            \"openjpa.jdbc.JDBCListeners\", \n+            new JDBCListener[] { \n+            this.new Listener() \n+        });\n+        createObj(emf);\n+    }\n+\n+    public void testQualifiedId() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select KEY(e), KEY(e).name from Department d, \" +\n+            \" in (d.empMap) e where d.deptId = 1\";\n+        List rs = em.createQuery(query).getResultList(); \n+        EmployeePK d = (EmployeePK) ((Object[]) rs.get(0))[0];\n+        String name = (String) ((Object[]) rs.get(0))[1];\n+        assertEquals(d.getName(), name);\n+\n+        em.clear();\n+        String query4 = \"select ENTRY(e) from Department d, \" +\n+            \" in (d.empMap) e  where d.deptId = 1\";\n+        List rs4 = em.createQuery(query4).getResultList();\n+        Map.Entry me = (Map.Entry) rs4.get(0);\n+\n+        assertTrue(d.equals(me.getKey()));\n+\n+        // test GROUP BY qualified path\n+        sql.clear();\n+        String query5 = \"select count(KEY(e).bDay) from Department d \" +\n+            \" left join d.empMap e GROUP BY KEY(e).bDay\";\n+        List rs5 = em.createQuery(query5).getResultList();\n+        assertTrue(sql.get(0).toUpperCase().indexOf(\" GROUP BY \") != -1);\n+\n+        em.close();\n+    }\n+\n+    public void testQueryObject() {\n+        queryObj(emf);\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public int getSqlCount() {\n+        return sqlCount;\n+    }\n+\n+    public void createObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numDepartments; i++)\n+            createDepartment(em, deptId++);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void createDepartment(EntityManager em, int id) {\n+        Department d = new Department();\n+        d.setDeptId(id);\n+        for (int i = 0; i < numEmployeesPerDept; i++) {\n+            Employee e = createEmployee(em, empId++);\n+            d.addEmployee(e);\n+            e.setDepartment(d);\n+            em.persist(e);\n+        }\n+        em.persist(d);\n+    }\n+\n+    public Employee createEmployee(EntityManager em, int id) {\n+        Employee e = new Employee(\"e\" + id, new Date());\n+        return e;\n+    }\n+\n+    public void findObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        Department d = em.find(Department.class, 1);\n+        assertDepartment(d);\n+\n+        Map emps = d.getEmpMap();\n+        Set<EmployeePK> keys = emps.keySet();\n+        for (EmployeePK key : keys) {\n+            Employee e = em.find(Employee.class, key);\n+            assertEmployee(e);\n+        }\n+\n+        // updateObj by adding a new Employee\n+        updateObj(em, d);\n+        deleteObj(em, d);\n+        em.close();\n+    }\n+\n+    public void updateObj(EntityManager em, Department d) {\n+        EntityTransaction tran = em.getTransaction();\n+\n+        // add an element\n+        tran.begin();\n+        Employee e = createEmployee(em, numDepartments * numEmployeesPerDept\n+                + 1);\n+        d.addEmployee(e);\n+        e.setDepartment(d);\n+        em.persist(d);\n+        em.persist(e);\n+        em.flush();\n+        tran.commit();\n+\n+        // remove an element\n+        tran.begin();\n+        d.removeEmployee(e.getEmpPK());\n+        e.setDepartment(null);\n+        em.persist(d);\n+        em.persist(e);\n+        em.flush();\n+        tran.commit();\n+    }\n+\n+    public void deleteObj(EntityManager em, Department d) {\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.remove(d);\n+        tran.commit();\n+    }\n+\n+    public void assertDepartment(Department d) {\n+        int id = d.getDeptId();\n+        Map es = d.getEmpMap();\n+        Assert.assertEquals(2, es.size());\n+        Set keys = es.keySet();\n+        for (Object obj : keys) {\n+            EmployeePK empPK = (EmployeePK) obj;\n+            Employee e = (Employee) es.get(empPK);\n+            Assert.assertEquals(empPK, e.getEmpPK());\n+        }\n+    }\n+\n+    public void queryObj(EntityManagerFactory emf) {\n+        queryDepartment(emf);\n+        queryEmployee(emf);\n+    }\n+\n+    public void queryDepartment(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select d from Department d\");\n+        List<Department> ds = q.getResultList();\n+        for (Department d : ds) {\n+            assertDepartment(d);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee e\");\n+        List<Employee> es = q.getResultList();\n+        for (Employee e : es) {\n+            assertEmployee(e);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void assertEmployee(Employee e) {\n+        EmployeePK pk = e.getEmpPK();\n+        Department d = e.getDepartment();\n+    }\n+\n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n+}"},{"sha":"a6c5ef9f913a13be92bf3e6357e24a8301c8717e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Department.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.MapKey;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Ex3Dept\")\r\n-public class Department {\r\n-\r\n-    @Id\r\n-    int deptId;\r\n-\r\n-    @OneToMany(cascade=CascadeType.ALL)\r\n-    @MapKey(name=\"name\")\r\n-    Map<EmployeeName, Employee> emps = new HashMap<EmployeeName, Employee>();\r\n-\r\n-    public int getDeptId() {\r\n-        return deptId;\r\n-    }\r\n-\r\n-    public void setDeptId(int deptId) {\r\n-        this.deptId = deptId;\r\n-    }\r\n-\r\n-    public Map<EmployeeName, Employee> getEmployees() {\r\n-        return emps;\r\n-    }\r\n-\r\n-    public void addEmployee(Employee emp) {\r\n-        emps.put(emp.getName(), emp);\r\n-    }\r\n-\r\n-    public void removeEmployee(EmployeeName name) {\r\n-        emps.remove(name);\r\n-    }      \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.MapKey;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"S26Ex3Dept\")\n+public class Department {\n+\n+    @Id\n+    int deptId;\n+\n+    @OneToMany(cascade=CascadeType.ALL)\n+    @MapKey(name=\"name\")\n+    Map<EmployeeName, Employee> emps = new HashMap<EmployeeName, Employee>();\n+\n+    public int getDeptId() {\n+        return deptId;\n+    }\n+\n+    public void setDeptId(int deptId) {\n+        this.deptId = deptId;\n+    }\n+\n+    public Map<EmployeeName, Employee> getEmployees() {\n+        return emps;\n+    }\n+\n+    public void addEmployee(Employee emp) {\n+        emps.put(emp.getName(), emp);\n+    }\n+\n+    public void removeEmployee(EmployeeName name) {\n+        emps.remove(name);\n+    }      \n+}"},{"sha":"29e8c3b784ce8be531698e505c3ac9546e31e818","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Employee.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\r\n-\r\n-import javax.persistence.*;\r\n-\r\n-@Entity\r\n-@Table(name=\"S26Ex3Emp\")\r\n-public class Employee {\r\n-    @Id\r\n-    int empId;\r\n-\r\n-    @ManyToOne\r\n-    @JoinColumn(name=\"dept_id\")\r\n-    Department department;\r\n-\r\n-    @Embedded\r\n-    EmployeeName name;\r\n-\r\n-    public int getEmpId() {\r\n-        return empId;\r\n-    }\r\n-\r\n-    public void setEmpId(int empId) {\r\n-        this.empId = empId;\r\n-    }\r\n-\r\n-    public Department getDepartment() {\r\n-        return department;\r\n-    }\r\n-\r\n-    public void setDepartment(Department department) {\r\n-        this.department = department;\r\n-    }\r\n-\r\n-    public EmployeeName getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(EmployeeName name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\n+\n+import javax.persistence.*;\n+\n+@Entity\n+@Table(name=\"S26Ex3Emp\")\n+public class Employee {\n+    @Id\n+    int empId;\n+\n+    @ManyToOne\n+    @JoinColumn(name=\"dept_id\")\n+    Department department;\n+\n+    @Embedded\n+    EmployeeName name;\n+\n+    public int getEmpId() {\n+        return empId;\n+    }\n+\n+    public void setEmpId(int empId) {\n+        this.empId = empId;\n+    }\n+\n+    public Department getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(Department department) {\n+        this.department = department;\n+    }\n+\n+    public EmployeeName getName() {\n+        return name;\n+    }\n+\n+    public void setName(EmployeeName name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"ccf1872c4261f0909703cc36f29bde14279eb7dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/EmployeeName.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/EmployeeName.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/EmployeeName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/EmployeeName.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-\r\n-@Embeddable\r\n-public class EmployeeName {\r\n-    \r\n-    String fName;\r\n-    String lName;\r\n-\r\n-    public EmployeeName() {}\r\n-\r\n-    public EmployeeName(String fName, String lName) {\r\n-        this.fName = fName;\r\n-        this.lName = lName;\r\n-    }\r\n-\r\n-    public String getFName() {\r\n-        return fName;\r\n-    }\r\n-\r\n-    public void setFName(String fName) {\r\n-        this.fName = fName;\r\n-    }\r\n-\r\n-    public String getLName() {\r\n-        return lName;\r\n-    }\r\n-\r\n-    public void setLName(String lName) {\r\n-        this.lName = lName;\r\n-    }\r\n-\r\n-    public boolean equals(Object o) {\r\n-        if (!(o instanceof EmployeeName))\r\n-            return false;\r\n-        EmployeeName other = (EmployeeName) o;\r\n-        if (fName.equals(other.fName) &&\r\n-            lName.equals(other.lName))\r\n-            return true;\r\n-        return false;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        int ret = 0;\r\n-        ret += lName.hashCode();\r\n-        ret = 31 * ret + fName.hashCode();\r\n-        return ret;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class EmployeeName {\n+    \n+    String fName;\n+    String lName;\n+\n+    public EmployeeName() {}\n+\n+    public EmployeeName(String fName, String lName) {\n+        this.fName = fName;\n+        this.lName = lName;\n+    }\n+\n+    public String getFName() {\n+        return fName;\n+    }\n+\n+    public void setFName(String fName) {\n+        this.fName = fName;\n+    }\n+\n+    public String getLName() {\n+        return lName;\n+    }\n+\n+    public void setLName(String lName) {\n+        this.lName = lName;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof EmployeeName))\n+            return false;\n+        EmployeeName other = (EmployeeName) o;\n+        if (fName.equals(other.fName) &&\n+            lName.equals(other.lName))\n+            return true;\n+        return false;\n+    }\n+\n+    public int hashCode() {\n+        int ret = 0;\n+        ret += lName.hashCode();\n+        ret = 31 * ret + fName.hashCode();\n+        return ret;\n+    }\n+}"},{"sha":"ec22de3f4975bd265aa7f2123fdaee2fb17b78eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java","status":"modified","additions":239,"deletions":239,"changes":478,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/spec_10_1_26_ex3/TestSpec10_1_26_Ex3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,239 +1,239 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.framework.Assert;\r\n-\r\n-import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-import org.apache.openjpa.lib.jdbc.JDBCListener;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestSpec10_1_26_Ex3 extends SingleEMFTestCase {\r\n-\r\n-    public int numDepartments = 2;\r\n-    public int numEmployeesPerDept = 2;\r\n-    public List<String> namedQueries = new ArrayList<String>();\r\n-    \r\n-    public int deptId = 1;\r\n-    public int empId = 1;\r\n-    \r\n-    protected List<String> sql = new ArrayList<String>();\r\n-    protected int sqlCount;\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(DROP_TABLES,\r\n-            Department.class,\r\n-            Employee.class,\r\n-            EmployeeName.class,\r\n-            \"openjpa.jdbc.JDBCListeners\", \r\n-            new JDBCListener[] { \r\n-            this.new Listener() \r\n-        });\r\n-        createObj(emf);\r\n-    }\r\n-\r\n-    public void testQualifiedId() throws Exception {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        String query = \"select KEY(e) from Department d, \" +\r\n-            \" in (d.emps) e order by d.deptId, e.empId\";\r\n-        List rs = em.createQuery(query).getResultList(); \r\n-        EmployeeName d = (EmployeeName) rs.get(0);\r\n-\r\n-        em.clear();\r\n-        String query4 = \"select ENTRY(e) from Department d, \" +\r\n-            \" in (d.emps) e order by d.deptId, e.empId\";\r\n-        List rs4 = em.createQuery(query4).getResultList();\r\n-        Map.Entry me = (Map.Entry) rs4.get(0);\r\n-\r\n-        assertTrue(d.equals(me.getKey()));\r\n-        \r\n-        // test ORDER BY qualified path\r\n-        query = \"select KEY(e), KEY(e).fName from Department d, \" +\r\n-            \" in (d.emps) e order by KEY(e).fName\";\r\n-        rs = em.createQuery(query).getResultList(); \r\n-        d = (EmployeeName) ((Object[]) rs.get(0))[0];\r\n-        String fname = (String) ((Object[]) rs.get(0))[1];\r\n-\r\n-        assertEquals(d.getFName(), fname);\r\n-\r\n-        // test GROUP BY qualified path\r\n-        sql.clear();\r\n-        query = \"select COUNT(KEY(e).fName) from Department d \" +\r\n-            \" left join d.emps e GROUP BY KEY(e).fName\";\r\n-        rs = em.createQuery(query).getResultList(); \r\n-        assertTrue(sql.get(0).toUpperCase().indexOf(\" GROUP BY \") != -1);\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testQueryObject() {\r\n-        queryObj(emf);\r\n-    }\r\n-\r\n-    public List<String> getSql() {\r\n-        return sql;\r\n-    }\r\n-\r\n-    public int getSqlCount() {\r\n-        return sqlCount;\r\n-    }\r\n-\r\n-    public void createObj(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        for (int i = 0; i < numDepartments; i++)\r\n-            createDepartment(em, deptId++);\r\n-        tran.begin();\r\n-        em.flush();\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void createDepartment(EntityManager em, int id) {\r\n-        Department d = new Department();\r\n-        d.setDeptId(id);\r\n-        for (int i = 0; i < numEmployeesPerDept; i++) {\r\n-            Employee e = createEmployee(em, empId++);\r\n-            d.addEmployee(e);\r\n-            e.setDepartment(d);\r\n-            em.persist(e);\r\n-        }\r\n-        em.persist(d);\r\n-    }\r\n-\r\n-    public Employee createEmployee(EntityManager em, int id) {\r\n-        Employee e = new Employee();\r\n-        EmployeeName name = new EmployeeName(\"f\" + id, \"l\" + id);\r\n-        e.setEmpId(id);\r\n-        e.setName(name);\r\n-        return e;\r\n-    }\r\n-\r\n-    public void findObj(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        Department d = em.find(Department.class, 1);\r\n-        assertDepartment(d);\r\n-\r\n-        //Employee e = em.find(Employee.class, 1);\r\n-        //assertEmployee(e);\r\n-\r\n-        updateObj(em, d);\r\n-        deleteObj(em, d);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void updateObj(EntityManager em, Department d) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        // add an element\r\n-        tran.begin();\r\n-        Employee e = createEmployee(em, numDepartments * numEmployeesPerDept + 1);\r\n-        d.addEmployee(e);\r\n-        e.setDepartment(d);\r\n-        em.persist(d);\r\n-        em.persist(e);\r\n-        em.flush();\r\n-        tran.commit();\r\n-\r\n-        // remove an element\r\n-        tran.begin();\r\n-        d.removeEmployee(e.getName());\r\n-        e.setDepartment(null);\r\n-        em.persist(d);\r\n-        em.flush();\r\n-        tran.commit();\r\n-    }\r\n-\r\n-    public void deleteObj(EntityManager em, Department d) {\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        em.remove(d);\r\n-        tran.commit();\r\n-    }\r\n-\r\n-    public void assertDepartment(Department d) {\r\n-        int id = d.getDeptId();\r\n-        Map<EmployeeName, Employee> es = d.getEmployees();\r\n-        Assert.assertEquals(2,es.size());\r\n-        Set keys = es.keySet();\r\n-        for (Object obj : keys) {\r\n-            EmployeeName empName = (EmployeeName) obj;\r\n-            Employee e = (Employee)es.get(empName);\r\n-            Assert.assertEquals(empName, e.getName());\r\n-        }\r\n-    }\r\n-\r\n-    public void queryObj(EntityManagerFactory emf) {\r\n-        queryDepartment(emf);\r\n-        queryEmployee(emf);\r\n-    }\r\n-\r\n-    public void queryDepartment(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select d from Department d\");\r\n-        List<Department> ds = q.getResultList();\r\n-        for (Department d : ds){\r\n-            assertDepartment(d);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void queryEmployee(EntityManagerFactory emf) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        EntityTransaction tran = em.getTransaction();\r\n-        tran.begin();\r\n-        Query q = em.createQuery(\"select e from Employee e\");\r\n-        List<Employee> es = q.getResultList();\r\n-        for (Employee e : es){\r\n-            assertEmployee(e);\r\n-        }\r\n-        tran.commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void assertEmployee(Employee e) {\r\n-        int id = e.getEmpId();\r\n-        Department d = e.getDepartment();\r\n-        assertDepartment(d);\r\n-    }\r\n-\r\n-    public class Listener extends AbstractJDBCListener {\r\n-        @Override\r\n-        public void beforeExecuteStatement(JDBCEvent event) {\r\n-            if (event.getSQL() != null && sql != null) {\r\n-                sql.add(event.getSQL());\r\n-                sqlCount++;\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.spec_10_1_26_ex3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Query;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+import org.apache.openjpa.lib.jdbc.JDBCListener;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestSpec10_1_26_Ex3 extends SingleEMFTestCase {\n+\n+    public int numDepartments = 2;\n+    public int numEmployeesPerDept = 2;\n+    public List<String> namedQueries = new ArrayList<String>();\n+    \n+    public int deptId = 1;\n+    public int empId = 1;\n+    \n+    protected List<String> sql = new ArrayList<String>();\n+    protected int sqlCount;\n+\n+    public void setUp() {\n+        super.setUp(DROP_TABLES,\n+            Department.class,\n+            Employee.class,\n+            EmployeeName.class,\n+            \"openjpa.jdbc.JDBCListeners\", \n+            new JDBCListener[] { \n+            this.new Listener() \n+        });\n+        createObj(emf);\n+    }\n+\n+    public void testQualifiedId() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        String query = \"select KEY(e) from Department d, \" +\n+            \" in (d.emps) e order by d.deptId, e.empId\";\n+        List rs = em.createQuery(query).getResultList(); \n+        EmployeeName d = (EmployeeName) rs.get(0);\n+\n+        em.clear();\n+        String query4 = \"select ENTRY(e) from Department d, \" +\n+            \" in (d.emps) e order by d.deptId, e.empId\";\n+        List rs4 = em.createQuery(query4).getResultList();\n+        Map.Entry me = (Map.Entry) rs4.get(0);\n+\n+        assertTrue(d.equals(me.getKey()));\n+        \n+        // test ORDER BY qualified path\n+        query = \"select KEY(e), KEY(e).fName from Department d, \" +\n+            \" in (d.emps) e order by KEY(e).fName\";\n+        rs = em.createQuery(query).getResultList(); \n+        d = (EmployeeName) ((Object[]) rs.get(0))[0];\n+        String fname = (String) ((Object[]) rs.get(0))[1];\n+\n+        assertEquals(d.getFName(), fname);\n+\n+        // test GROUP BY qualified path\n+        sql.clear();\n+        query = \"select COUNT(KEY(e).fName) from Department d \" +\n+            \" left join d.emps e GROUP BY KEY(e).fName\";\n+        rs = em.createQuery(query).getResultList(); \n+        assertTrue(sql.get(0).toUpperCase().indexOf(\" GROUP BY \") != -1);\n+\n+        em.close();\n+    }\n+\n+    public void testQueryObject() {\n+        queryObj(emf);\n+    }\n+\n+    public List<String> getSql() {\n+        return sql;\n+    }\n+\n+    public int getSqlCount() {\n+        return sqlCount;\n+    }\n+\n+    public void createObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        for (int i = 0; i < numDepartments; i++)\n+            createDepartment(em, deptId++);\n+        tran.begin();\n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void createDepartment(EntityManager em, int id) {\n+        Department d = new Department();\n+        d.setDeptId(id);\n+        for (int i = 0; i < numEmployeesPerDept; i++) {\n+            Employee e = createEmployee(em, empId++);\n+            d.addEmployee(e);\n+            e.setDepartment(d);\n+            em.persist(e);\n+        }\n+        em.persist(d);\n+    }\n+\n+    public Employee createEmployee(EntityManager em, int id) {\n+        Employee e = new Employee();\n+        EmployeeName name = new EmployeeName(\"f\" + id, \"l\" + id);\n+        e.setEmpId(id);\n+        e.setName(name);\n+        return e;\n+    }\n+\n+    public void findObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        Department d = em.find(Department.class, 1);\n+        assertDepartment(d);\n+\n+        //Employee e = em.find(Employee.class, 1);\n+        //assertEmployee(e);\n+\n+        updateObj(em, d);\n+        deleteObj(em, d);\n+        em.close();\n+    }\n+\n+    public void updateObj(EntityManager em, Department d) {\n+        EntityTransaction tran = em.getTransaction();\n+        // add an element\n+        tran.begin();\n+        Employee e = createEmployee(em, numDepartments * numEmployeesPerDept + 1);\n+        d.addEmployee(e);\n+        e.setDepartment(d);\n+        em.persist(d);\n+        em.persist(e);\n+        em.flush();\n+        tran.commit();\n+\n+        // remove an element\n+        tran.begin();\n+        d.removeEmployee(e.getName());\n+        e.setDepartment(null);\n+        em.persist(d);\n+        em.flush();\n+        tran.commit();\n+    }\n+\n+    public void deleteObj(EntityManager em, Department d) {\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        em.remove(d);\n+        tran.commit();\n+    }\n+\n+    public void assertDepartment(Department d) {\n+        int id = d.getDeptId();\n+        Map<EmployeeName, Employee> es = d.getEmployees();\n+        Assert.assertEquals(2,es.size());\n+        Set keys = es.keySet();\n+        for (Object obj : keys) {\n+            EmployeeName empName = (EmployeeName) obj;\n+            Employee e = (Employee)es.get(empName);\n+            Assert.assertEquals(empName, e.getName());\n+        }\n+    }\n+\n+    public void queryObj(EntityManagerFactory emf) {\n+        queryDepartment(emf);\n+        queryEmployee(emf);\n+    }\n+\n+    public void queryDepartment(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select d from Department d\");\n+        List<Department> ds = q.getResultList();\n+        for (Department d : ds){\n+            assertDepartment(d);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void queryEmployee(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        Query q = em.createQuery(\"select e from Employee e\");\n+        List<Employee> es = q.getResultList();\n+        for (Employee e : es){\n+            assertEmployee(e);\n+        }\n+        tran.commit();\n+        em.close();\n+    }\n+\n+    public void assertEmployee(Employee e) {\n+        int id = e.getEmpId();\n+        Department d = e.getDepartment();\n+        assertDepartment(d);\n+    }\n+\n+    public class Listener extends AbstractJDBCListener {\n+        @Override\n+        public void beforeExecuteStatement(JDBCEvent event) {\n+            if (event.getSQL() != null && sql != null) {\n+                sql.add(event.getSQL());\n+                sqlCount++;\n+            }\n+        }\n+    }\n+}\n+"},{"sha":"779286efdbea91d3343a18c2a906e3a5323c00aa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestBuildSchema.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,91 +1,91 @@\n-/*\r\n- * TestBuildSchema.java\r\n- *\r\n- * Created on October 4, 2006, 4:52 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.io.BufferedReader;\r\n-import java.io.InputStreamReader;\r\n-import java.io.StringWriter;\r\n-\r\n-import org.apache.regexp.REUtil;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.MappingTool;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-public class TestBuildSchema extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-       \r\n-    /** Creates a new instance of TestBuildSchema */\r\n-    public TestBuildSchema() {\r\n-    }\r\n-    public TestBuildSchema(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void testSchema()\r\n-        throws Exception {\r\n-        StringWriter out = new StringWriter();\r\n-\r\n-        MappingTool tool = new MappingTool((JDBCConfiguration)\r\n-            getConfiguration(), MappingTool.ACTION_BUILD_SCHEMA, false);\r\n-        tool.setMappingWriter(new StringWriter());    // throw away\r\n-        tool.setSchemaWriter(out);\r\n-        tool.run(BuildSchemaPC.class);\r\n-        tool.record();\r\n-\r\n-        BufferedReader in = new BufferedReader(new InputStreamReader\r\n-            (getClass().getResourceAsStream(\"TestBuildSchema-schema.rsrc\")));\r\n-        StringBuffer buf = new StringBuffer();\r\n-        for (int ch; (ch = in.read()) != -1;)\r\n-            buf.append((char) ch);\r\n-        in.close();\r\n-\r\n-        // the <schema> sometimes has a name (depending on whether the database\r\n-        // reports a schema name or not). If there is a\r\n-        // <scheme name=\"something\">, then replace it with <schema> so\r\n-        // the match is successful.\r\n-        String schema = out.toString();\r\n-        schema = REUtil.createRE\r\n-            (\"<schema name=\\\"*\\\">\").subst(schema, \"<schema>\");\r\n-\r\n-        // convert CRLF to CR so we pass on Windows\r\n-        assertEquals(fixNewline(buf.toString()).trim(),\r\n-            fixNewline(schema).trim());\r\n-    }\r\n-\r\n-    private String fixNewline(String str) {\r\n-        //FIXME \r\n-        /*\r\n-        return serp.util.Strings.join\r\n-            (serp.util.Strings.split\r\n-                (str, \"\\r\\n\", -1), \"\\n\");\r\n-         */\r\n-        return \"\";\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestBuildSchema.java\n+ *\n+ * Created on October 4, 2006, 4:52 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.StringWriter;\n+\n+import org.apache.regexp.REUtil;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.MappingTool;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+public class TestBuildSchema extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+       \n+    /** Creates a new instance of TestBuildSchema */\n+    public TestBuildSchema() {\n+    }\n+    public TestBuildSchema(String test) {\n+        super(test);\n+    }\n+\n+    public void testSchema()\n+        throws Exception {\n+        StringWriter out = new StringWriter();\n+\n+        MappingTool tool = new MappingTool((JDBCConfiguration)\n+            getConfiguration(), MappingTool.ACTION_BUILD_SCHEMA, false);\n+        tool.setMappingWriter(new StringWriter());    // throw away\n+        tool.setSchemaWriter(out);\n+        tool.run(BuildSchemaPC.class);\n+        tool.record();\n+\n+        BufferedReader in = new BufferedReader(new InputStreamReader\n+            (getClass().getResourceAsStream(\"TestBuildSchema-schema.rsrc\")));\n+        StringBuffer buf = new StringBuffer();\n+        for (int ch; (ch = in.read()) != -1;)\n+            buf.append((char) ch);\n+        in.close();\n+\n+        // the <schema> sometimes has a name (depending on whether the database\n+        // reports a schema name or not). If there is a\n+        // <scheme name=\"something\">, then replace it with <schema> so\n+        // the match is successful.\n+        String schema = out.toString();\n+        schema = REUtil.createRE\n+            (\"<schema name=\\\"*\\\">\").subst(schema, \"<schema>\");\n+\n+        // convert CRLF to CR so we pass on Windows\n+        assertEquals(fixNewline(buf.toString()).trim(),\n+            fixNewline(schema).trim());\n+    }\n+\n+    private String fixNewline(String str) {\n+        //FIXME \n+        /*\n+        return serp.util.Strings.join\n+            (serp.util.Strings.split\n+                (str, \"\\r\\n\", -1), \"\\n\");\n+         */\n+        return \"\";\n+    }\n+    \n+}"},{"sha":"4f1540875f24dbb564c5f565cad026ad2d1de4f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestDFG.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,115 +1,115 @@\n-/*\r\n- * TestDFG.java\r\n- *\r\n- * Created on October 2, 2006, 5:55 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.EntityTransaction;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-\r\n-public class TestDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-    private Object oid;\r\n-    /** Creates a new instance of TestDFG */\r\n-    public TestDFG(String name)\r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-       deleteAll(DFGTest.class);\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        EntityTransaction t= pm.getTransaction();\r\n-        t.begin();\r\n-        DFGTest a = new DFGTest();\r\n-        pm.persist(a);\r\n-        a.setNonDFGField(2);\r\n-        t.commit();\r\n-        \r\n-        // modify a field so that if we're examining sql we can see\r\n-        // how much is flushed.\r\n-        t.begin();\r\n-        a.setDFGField(1);\r\n-        t.commit();\r\n-        \r\n-        oid = pm.getObjectId(a);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testDFG() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        DFGTest a = (DFGTest) pm.getObjectId(oid);\r\n-        \r\n-        // check the non-dfg fields\r\n-        \r\n-        OpenJPAStateManager sm = getStateManager(a,pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"nonDFGField\");\r\n-        assertTrue(\"nonDFGField should not be loaded\",\r\n-                !sm.getLoaded().get(fmd.getIndex()));\r\n-        \r\n-        fmd = sm.getMetaData().getField(\"dfgField\");\r\n-        assertTrue(\"dfgField should be loaded\",\r\n-                sm.getLoaded().get(fmd.getIndex()));\r\n-        \r\n-        int val = a.getNonDFGField();\r\n-        assertTrue(\"nonDFGField should be loaded\",\r\n-                sm.getLoaded().get(fmd.getIndex()));\r\n-        assertEquals(2, val);\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    // it'd be nice if we could actually automate this test. As it\r\n-    // stands, this is just here so that there's an easy place to look\r\n-    // at the SQL.\r\n-    public void testDFGWrites() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-        \r\n-        DFGTest a = (DFGTest) pm.getObjectId(oid);\r\n-        a.setDFGField(3);\r\n-        endTx(pm);\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestDFG.java\n+ *\n+ * Created on October 2, 2006, 5:55 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import javax.persistence.EntityTransaction;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+\n+public class TestDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+    private Object oid;\n+    /** Creates a new instance of TestDFG */\n+    public TestDFG(String name)\n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public void setUp() {\n+       deleteAll(DFGTest.class);\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        EntityTransaction t= pm.getTransaction();\n+        t.begin();\n+        DFGTest a = new DFGTest();\n+        pm.persist(a);\n+        a.setNonDFGField(2);\n+        t.commit();\n+        \n+        // modify a field so that if we're examining sql we can see\n+        // how much is flushed.\n+        t.begin();\n+        a.setDFGField(1);\n+        t.commit();\n+        \n+        oid = pm.getObjectId(a);\n+        pm.close();\n+    }\n+    \n+    public void testDFG() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        \n+        DFGTest a = (DFGTest) pm.getObjectId(oid);\n+        \n+        // check the non-dfg fields\n+        \n+        OpenJPAStateManager sm = getStateManager(a,pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"nonDFGField\");\n+        assertTrue(\"nonDFGField should not be loaded\",\n+                !sm.getLoaded().get(fmd.getIndex()));\n+        \n+        fmd = sm.getMetaData().getField(\"dfgField\");\n+        assertTrue(\"dfgField should be loaded\",\n+                sm.getLoaded().get(fmd.getIndex()));\n+        \n+        int val = a.getNonDFGField();\n+        assertTrue(\"nonDFGField should be loaded\",\n+                sm.getLoaded().get(fmd.getIndex()));\n+        assertEquals(2, val);\n+        \n+        pm.close();\n+    }\n+    \n+    // it'd be nice if we could actually automate this test. As it\n+    // stands, this is just here so that there's an easy place to look\n+    // at the SQL.\n+    public void testDFGWrites() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        \n+        \n+        DFGTest a = (DFGTest) pm.getObjectId(oid);\n+        a.setDFGField(3);\n+        endTx(pm);\n+        \n+        pm.close();\n+    }\n+    \n+}"},{"sha":"3b4f1ab2597ae4dc3e4cdebb5fc61536ebe87d92","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","status":"modified","additions":140,"deletions":140,"changes":280,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBByteArray.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,140 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n-\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBByteArray extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int _null;\r\n-\tprivate int _empty;\r\n-\tprivate int _small;\r\n-\tprivate int _large;\r\n-\r\n-\r\n-\tpublic TestEJBByteArray(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp() throws Exception\r\n-\t{\r\n-\t\tdeleteAll(ByteArray.class);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\r\n-\t\tByteArray pc = new ByteArray (\"Null\", 1);\r\n-\t\tpm.persist (pc);\r\n-\t\t_null = 1;\r\n-\r\n-\t\tpc = new ByteArray (\"Empty\", 2);\r\n-\t\tpc.setBytes (new byte[0]);\r\n-\t\tpm.persist (pc);\r\n-\t\t_empty = 2;\r\n-\r\n-\t\tpc = new ByteArray (\"Small\", 3);\r\n-\t\tpc.setBytes (pc.getString ().getBytes ());\r\n-\t\tpm.persist (pc);\r\n-\t\t_small = 3;\r\n-\r\n-\t\tbyte[] bytes = new byte [10000];\r\n-\t\tfor (int i = 0; i < bytes.length; i++)\r\n-\t\t\tbytes[i] = (byte) (i % 8);\r\n-\r\n-\t\tpc = new ByteArray (\"Large\", 4);\r\n-\t\tpc.setBytes (bytes);\r\n-\t\tpm.persist (pc);\r\n-\t\t_large = 4;\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testNull ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\r\n-\t\tByteArray pc = pm.find(ByteArray.class, _null);\r\n-\t\tassertNull (pc.getBytes ());\r\n-\r\n-\r\n-\t\tpc.setBytes (\"Not Null\".getBytes ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ByteArray.class, _null);\r\n-\r\n-\t\tassertEquals (\"Not Null\", new String (pc.getBytes ()));\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testEmpty ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\r\n-\t\tByteArray pc = pm.find(ByteArray.class, _empty);\r\n-\t\tbyte [] bytes = pc.getBytes ();\r\n-\t\tassertNotNull (bytes);\r\n-\t\tassertEquals (0, bytes.length);\r\n-\r\n-\t\tpc.setBytes (\"Not Empty\".getBytes ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ByteArray.class, _empty);\r\n-\t\tassertEquals (\"Not Empty\", new String (pc.getBytes ()));\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testLarge ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tByteArray pc = pm.find(ByteArray.class, _large);\r\n-\t\tbyte [] bytes = pc.getBytes ();\r\n-\t\tassertNotNull (bytes);\r\n-\t\tassertEquals (10000, bytes.length);\r\n-\t\tfor (int i = 0; i < bytes.length; i++)\r\n-\t\t\tassertEquals (bytes[i], (byte) (i % 8));\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\n+\n+import junit.framework.*;\n+\n+public class TestEJBByteArray extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int _null;\n+\tprivate int _empty;\n+\tprivate int _small;\n+\tprivate int _large;\n+\n+\n+\tpublic TestEJBByteArray(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp() throws Exception\n+\t{\n+\t\tdeleteAll(ByteArray.class);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\n+\t\tByteArray pc = new ByteArray (\"Null\", 1);\n+\t\tpm.persist (pc);\n+\t\t_null = 1;\n+\n+\t\tpc = new ByteArray (\"Empty\", 2);\n+\t\tpc.setBytes (new byte[0]);\n+\t\tpm.persist (pc);\n+\t\t_empty = 2;\n+\n+\t\tpc = new ByteArray (\"Small\", 3);\n+\t\tpc.setBytes (pc.getString ().getBytes ());\n+\t\tpm.persist (pc);\n+\t\t_small = 3;\n+\n+\t\tbyte[] bytes = new byte [10000];\n+\t\tfor (int i = 0; i < bytes.length; i++)\n+\t\t\tbytes[i] = (byte) (i % 8);\n+\n+\t\tpc = new ByteArray (\"Large\", 4);\n+\t\tpc.setBytes (bytes);\n+\t\tpm.persist (pc);\n+\t\t_large = 4;\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testNull ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\n+\t\tByteArray pc = pm.find(ByteArray.class, _null);\n+\t\tassertNull (pc.getBytes ());\n+\n+\n+\t\tpc.setBytes (\"Not Null\".getBytes ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ByteArray.class, _null);\n+\n+\t\tassertEquals (\"Not Null\", new String (pc.getBytes ()));\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testEmpty ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\n+\t\tByteArray pc = pm.find(ByteArray.class, _empty);\n+\t\tbyte [] bytes = pc.getBytes ();\n+\t\tassertNotNull (bytes);\n+\t\tassertEquals (0, bytes.length);\n+\n+\t\tpc.setBytes (\"Not Empty\".getBytes ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ByteArray.class, _empty);\n+\t\tassertEquals (\"Not Empty\", new String (pc.getBytes ()));\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testLarge ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tByteArray pc = pm.find(ByteArray.class, _large);\n+\t\tbyte [] bytes = pc.getBytes ();\n+\t\tassertNotNull (bytes);\n+\t\tassertEquals (10000, bytes.length);\n+\t\tfor (int i = 0; i < bytes.length; i++)\n+\t\t\tassertEquals (bytes[i], (byte) (i % 8));\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\n+\n+\n+\n+}"},{"sha":"0ba31f8780a893053a6351fa1c4b22aff39d50bd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","status":"modified","additions":165,"deletions":165,"changes":330,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBColumnIOMappings.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,165 +1,165 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBColumnIOMappings extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tpublic TestEJBColumnIOMappings(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(ColumnIOPC.class);\r\n-\t}\r\n-\r\n-\tpublic void testIgnoreInsert ()\r\n-\t{\r\n-\t\tColumnIOPC pc = new ColumnIOPC (2);\r\n-\t\tpc.setName (\"pc\");\r\n-\t\tpc.setIgnoreInsert (10);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tstartTx(pm);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tint oid = pc.getId();\r\n-        endTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tpc.setIgnoreInsert (10);\r\n-\t\tendTx(pm);\r\n-\t\tstartTx(pm);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreInsert ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testIgnoreUpdate ()\r\n-\t{\r\n-\t\tColumnIOPC pc = new ColumnIOPC (3);\r\n-\t\tpc.setName (\"pc\");\r\n-\t\tpc.setIgnoreUpdate (10);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tObject oid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tstartTx(pm);\r\n-\t\tpc.setIgnoreUpdate (100);\r\n-\t\tassertEquals (100, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, oid);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (10, pc.getIgnoreUpdate ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\tpublic void testPrimitiveMappedToFieldOfForeignKey ()\r\n-\t{\r\n-\t\t// have to make rel persistent before setting ident field b/c not\r\n-\t\t// insertable\r\n-\t\tColumnIOPC rel = new ColumnIOPC (1);\r\n-\t\trel.setName (\"rel\");\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(rel);\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tstartTx(pm);\r\n-\t\tColumnIOPC pc = new ColumnIOPC (2);\r\n-\t\tpc.setName (\"pc\");\r\n-\t\trel = pm.find(ColumnIOPC.class, 1);\r\n-\t\tpc.setRel (rel);\r\n-\t\trel.setIdent (10);\r\n-\t\tpm.persist(pc);\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, 2);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (0, pc.getIdent ());\r\n-\t\tassertNotNull (pc.getRel ());\r\n-\t\tassertEquals (\"rel\", pc.getRel ().getName ());\r\n-\r\n-\t\tpc.setIdent (50);\r\n-\t\tpc.setRel (new ColumnIOPC (3));\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(ColumnIOPC.class, 2);\r\n-\t\tassertNotNull (pc);\r\n-\t\tassertEquals (50, pc.getIdent());\r\n-\t\tassertNotNull (pc.getRel());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\n+import junit.framework.*;\n+\n+public class TestEJBColumnIOMappings extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tpublic TestEJBColumnIOMappings(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(ColumnIOPC.class);\n+\t}\n+\n+\tpublic void testIgnoreInsert ()\n+\t{\n+\t\tColumnIOPC pc = new ColumnIOPC (2);\n+\t\tpc.setName (\"pc\");\n+\t\tpc.setIgnoreInsert (10);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tendTx(pm);\n+\n+\t\tstartTx(pm);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tint oid = pc.getId();\n+        endTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tpc.setIgnoreInsert (10);\n+\t\tendTx(pm);\n+\t\tstartTx(pm);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreInsert ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testIgnoreUpdate ()\n+\t{\n+\t\tColumnIOPC pc = new ColumnIOPC (3);\n+\t\tpc.setName (\"pc\");\n+\t\tpc.setIgnoreUpdate (10);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\n+\t\tObject oid = pc.getId();\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\n+\t\tstartTx(pm);\n+\t\tpc.setIgnoreUpdate (100);\n+\t\tassertEquals (100, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, oid);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (10, pc.getIgnoreUpdate ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\tpublic void testPrimitiveMappedToFieldOfForeignKey ()\n+\t{\n+\t\t// have to make rel persistent before setting ident field b/c not\n+\t\t// insertable\n+\t\tColumnIOPC rel = new ColumnIOPC (1);\n+\t\trel.setName (\"rel\");\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(rel);\n+\t\tendTx(pm);\n+\n+\t\tstartTx(pm);\n+\t\tColumnIOPC pc = new ColumnIOPC (2);\n+\t\tpc.setName (\"pc\");\n+\t\trel = pm.find(ColumnIOPC.class, 1);\n+\t\tpc.setRel (rel);\n+\t\trel.setIdent (10);\n+\t\tpm.persist(pc);\n+\t\tendTx(pm);\n+\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, 2);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (0, pc.getIdent ());\n+\t\tassertNotNull (pc.getRel ());\n+\t\tassertEquals (\"rel\", pc.getRel ().getName ());\n+\n+\t\tpc.setIdent (50);\n+\t\tpc.setRel (new ColumnIOPC (3));\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(ColumnIOPC.class, 2);\n+\t\tassertNotNull (pc);\n+\t\tassertEquals (50, pc.getIdent());\n+\t\tassertNotNull (pc.getRel());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\n+\n+}"},{"sha":"4f7d9ab0692bba361db414b161e68f80c545bce8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBConstantJoinOnSameRefTable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,110 +1,110 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.Iterator;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5;\r\n-\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBConstantJoinOnSameRefTable extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int oid;\r\n-\t\r\n-\tpublic TestEJBConstantJoinOnSameRefTable(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic void setUp ()\r\n-\t{\r\n-\t\tdeleteAll(ConstantJoinPC4.class);\r\n-\t\tdeleteAll(ConstantJoinPC5.class);\r\n-\r\n-\t\tConstantJoinPC4 pc4 = new ConstantJoinPC4 (\"pc4-1\", 1);\r\n-\t\tpc4.setOneToOne1 (new ConstantJoinPC5 (\"pc5-one-to-one-1\"));\r\n-\t\t//### see note in testConstantOneToOne2\r\n-\t\t//### pc4.setOneToOne2 (new ConstantJoinPC5 (\"pc5-one-to-one-2\"));\r\n-\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-1\"));\r\n-\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-2\"));\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc4);\r\n-\t\tendTx(pm);\r\n-\t\toid = pc4.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testConstantManyToMany ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\r\n-\t\tassertEquals (2, pc4.getManyToMany ().size ());\r\n-\t\tIterator iter = pc4.getManyToMany ().iterator ();\r\n-\t\tConstantJoinPC5 pc5_1 = (ConstantJoinPC5) iter.next ();\r\n-\t\tConstantJoinPC5 pc5_2 = (ConstantJoinPC5) iter.next ();\r\n-\t\tif (\"pc5-many-to-many-2\".equals (pc5_1.getName ()))\r\n-\t\t{\r\n-\t\t\tConstantJoinPC5 other = pc5_1;\r\n-\t\t\tpc5_1 = pc5_2;\r\n-\t\t\tpc5_2 = other;\r\n-\t\t}\r\n-\t\tassertEquals (\"pc5-many-to-many-1\", pc5_1.getName ());\r\n-\t\tassertEquals (\"pc5-many-to-many-2\", pc5_2.getName ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\r\n-\tpublic void testConstantOneToOne1 ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tConstantJoinPC4 pc4 =  pm.find(ConstantJoinPC4.class, oid);\r\n-\t\tassertEquals (2, pc4.getManyToMany ().size ());\r\n-\t\tassertEquals (\"pc5-one-to-one-1\", pc4.getOneToOne1 ().getName ());\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testSharedJoinTableModifications ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\r\n-\t\tstartTx(pm);\r\n-\t\tpc4.getManyToMany ().clear ();\r\n-\t\tendTx(pm);\r\n-\r\n-\t\tEntityManager pm2 = currentEntityManager();\r\n-\t\tpc4 = pm2.find(ConstantJoinPC4.class, oid);\r\n-\t\tassertNotNull (pc4.getOneToOne1 ());\r\n-\t\tassertEquals (0, pc4.getManyToMany ().size ());\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.Iterator;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4;\n+import org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5;\n+\n+import junit.framework.*;\n+\n+public class TestEJBConstantJoinOnSameRefTable extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int oid;\n+\t\n+\tpublic TestEJBConstantJoinOnSameRefTable(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void setUp ()\n+\t{\n+\t\tdeleteAll(ConstantJoinPC4.class);\n+\t\tdeleteAll(ConstantJoinPC5.class);\n+\n+\t\tConstantJoinPC4 pc4 = new ConstantJoinPC4 (\"pc4-1\", 1);\n+\t\tpc4.setOneToOne1 (new ConstantJoinPC5 (\"pc5-one-to-one-1\"));\n+\t\t//### see note in testConstantOneToOne2\n+\t\t//### pc4.setOneToOne2 (new ConstantJoinPC5 (\"pc5-one-to-one-2\"));\n+\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-1\"));\n+\t\tpc4.getManyToMany ().add (new ConstantJoinPC5 (\"pc5-many-to-many-2\"));\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc4);\n+\t\tendTx(pm);\n+\t\toid = pc4.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testConstantManyToMany ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\n+\t\tassertEquals (2, pc4.getManyToMany ().size ());\n+\t\tIterator iter = pc4.getManyToMany ().iterator ();\n+\t\tConstantJoinPC5 pc5_1 = (ConstantJoinPC5) iter.next ();\n+\t\tConstantJoinPC5 pc5_2 = (ConstantJoinPC5) iter.next ();\n+\t\tif (\"pc5-many-to-many-2\".equals (pc5_1.getName ()))\n+\t\t{\n+\t\t\tConstantJoinPC5 other = pc5_1;\n+\t\t\tpc5_1 = pc5_2;\n+\t\t\tpc5_2 = other;\n+\t\t}\n+\t\tassertEquals (\"pc5-many-to-many-1\", pc5_1.getName ());\n+\t\tassertEquals (\"pc5-many-to-many-2\", pc5_2.getName ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\n+\tpublic void testConstantOneToOne1 ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tConstantJoinPC4 pc4 =  pm.find(ConstantJoinPC4.class, oid);\n+\t\tassertEquals (2, pc4.getManyToMany ().size ());\n+\t\tassertEquals (\"pc5-one-to-one-1\", pc4.getOneToOne1 ().getName ());\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testSharedJoinTableModifications ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tConstantJoinPC4 pc4 = pm.find(ConstantJoinPC4.class, oid);\n+\t\tstartTx(pm);\n+\t\tpc4.getManyToMany ().clear ();\n+\t\tendTx(pm);\n+\n+\t\tEntityManager pm2 = currentEntityManager();\n+\t\tpc4 = pm2.find(ConstantJoinPC4.class, oid);\n+\t\tassertNotNull (pc4.getOneToOne1 ());\n+\t\tassertEquals (0, pc4.getManyToMany ().size ());\n+\t}\n+\n+}"},{"sha":"dd199aac271340b7096f800bd93cec647c43a99c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,85 +1,85 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC;\r\n-import junit.framework.*;\r\n-\r\n-\r\n-public class TestEJBCustomMapping extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int _oid;\r\n-\r\n-\tpublic TestEJBCustomMapping(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp ()\r\n-\t{\r\n-\t\tdeleteAll(CustomMappingPC.class);\r\n-\r\n-\t\tCustomMappingPC pc = new CustomMappingPC (2);\r\n-\t\tpc.setName (\"name\");\r\n-\t\tpc.setFemale (true);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tendTx(pm);\r\n-\t\t_oid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testInsert ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n-\t\tassertNotNull (pc);\r\n-\r\n-\t\tassertEquals (\"name\", pc.getName ());\r\n-\t\tassertEquals (true, pc.isFemale ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testUpdate ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n-\r\n-\t\tpc.setName (\"name2\");\r\n-\t\tpc.setFemale (false);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(CustomMappingPC.class, _oid);\r\n-\t\tassertEquals (\"name2\", pc.getName ());\r\n-\t\tassertTrue (!pc.isFemale ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC;\n+import junit.framework.*;\n+\n+\n+public class TestEJBCustomMapping extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int _oid;\n+\n+\tpublic TestEJBCustomMapping(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp ()\n+\t{\n+\t\tdeleteAll(CustomMappingPC.class);\n+\n+\t\tCustomMappingPC pc = new CustomMappingPC (2);\n+\t\tpc.setName (\"name\");\n+\t\tpc.setFemale (true);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tendTx(pm);\n+\t\t_oid = pc.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testInsert ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\n+\t\tassertNotNull (pc);\n+\n+\t\tassertEquals (\"name\", pc.getName ());\n+\t\tassertEquals (true, pc.isFemale ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testUpdate ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\n+\n+\t\tpc.setName (\"name2\");\n+\t\tpc.setFemale (false);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(CustomMappingPC.class, _oid);\n+\t\tassertEquals (\"name2\", pc.getName ());\n+\t\tassertTrue (!pc.isFemale ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+}"},{"sha":"48ff4826cdcf84ec7cdb15d3f67174d3196818cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.DateVersion;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBDateVersion extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int oid;\r\n-\r\n-\tpublic TestEJBDateVersion(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp() throws Exception\r\n-\t{\r\n-\t\tdeleteAll(DateVersion.class);\r\n-\r\n-\t\tDateVersion pc = new DateVersion (\"pc1\", 1);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\r\n-\t\toid = pc.getId();\r\n-\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testOptLock ()\tthrows InterruptedException\r\n-{\r\n-\tEntityManager pm1 = currentEntityManager();\r\n-\tEntityManager pm2 = currentEntityManager();\r\n-\r\n-\r\n-\tstartTx(pm1);\r\n-\tstartTx(pm2);\r\n-\tDateVersion pc1 = (DateVersion) pm1.find(DateVersion.class, oid);\r\n-\tDateVersion pc2 = (DateVersion) pm2.find(DateVersion.class, oid);\r\n-\r\n-\tpc1.setString (\"pc-2-1\");\r\n-\tpc2.setString (\"pc-2-2\");\r\n-\r\n-\t// some DBs do not distinguish dates unless there is 1 sec diff\r\n-\tThread.currentThread ().sleep (1 * 1000);\r\n-\tendTx(pm1);\r\n-\ttry\r\n-\t{\r\n-\t\tThread.currentThread ().sleep (1 * 1000);\r\n-\t\tendTx(pm2);\r\n-\t\tfail (\"Should have caused OL exception.\");\r\n-\t}\r\n-\tcatch (Exception jfe)\r\n-\t{\r\n-\t\tstartTx(pm2);\r\n-\t\tpm2.refresh (pc2);\r\n-\t\tpc2.setString (\"pc-3-2\");\r\n-\t\tendTx(pm2);\r\n-\t}\r\n-\r\n-\t// make sure the next transaction works too\r\n-\tstartTx(pm2);\r\n-\tpc2.setString (\"pc-string-4-2\");\r\n-\tendTx(pm2);\r\n-\r\n-\tstartTx(pm1);\r\n-\tpm1.refresh (pc1);\r\n-\tpc1.setString (\"pc-string-3-1\");\r\n-\r\n-\tstartTx(pm2);\r\n-\tpc2.setString (\"pc-string-5-2\");\r\n-\r\n-\tThread.currentThread ().sleep (1 * 1000);\r\n-\tendTx(pm1);\r\n-\ttry\r\n-\t{\r\n-\t\tThread.currentThread ().sleep (1 * 1000);\r\n-\t\tendTx(pm2);\r\n-\t\tfail (\"Should have caused OL exception2.\");\r\n-\t}\r\n-\tcatch (Exception jfe)\r\n-\t{\r\n-\t\tstartTx(pm2);\r\n-\t\tpm2.refresh (pc2);\r\n-\t\tpc2.setString (\"pc-string-6-2\");\r\n-\t\tendTx(pm2);\r\n-\t}\r\n-\tendEm(pm1);\r\n-\tendEm(pm2);\r\n-\r\n-\tEntityManager pm = currentEntityManager();\r\n-\tDateVersion pc = pm.find(DateVersion.class, oid);\r\n-\tassertEquals (\"pc-string-6-2\", pc.toString ());\r\n-\tendEm(pm);\r\n-  }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.DateVersion;\n+import junit.framework.*;\n+\n+public class TestEJBDateVersion extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int oid;\n+\n+\tpublic TestEJBDateVersion(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp() throws Exception\n+\t{\n+\t\tdeleteAll(DateVersion.class);\n+\n+\t\tDateVersion pc = new DateVersion (\"pc1\", 1);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\n+\t\toid = pc.getId();\n+\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testOptLock ()\tthrows InterruptedException\n+{\n+\tEntityManager pm1 = currentEntityManager();\n+\tEntityManager pm2 = currentEntityManager();\n+\n+\n+\tstartTx(pm1);\n+\tstartTx(pm2);\n+\tDateVersion pc1 = (DateVersion) pm1.find(DateVersion.class, oid);\n+\tDateVersion pc2 = (DateVersion) pm2.find(DateVersion.class, oid);\n+\n+\tpc1.setString (\"pc-2-1\");\n+\tpc2.setString (\"pc-2-2\");\n+\n+\t// some DBs do not distinguish dates unless there is 1 sec diff\n+\tThread.currentThread ().sleep (1 * 1000);\n+\tendTx(pm1);\n+\ttry\n+\t{\n+\t\tThread.currentThread ().sleep (1 * 1000);\n+\t\tendTx(pm2);\n+\t\tfail (\"Should have caused OL exception.\");\n+\t}\n+\tcatch (Exception jfe)\n+\t{\n+\t\tstartTx(pm2);\n+\t\tpm2.refresh (pc2);\n+\t\tpc2.setString (\"pc-3-2\");\n+\t\tendTx(pm2);\n+\t}\n+\n+\t// make sure the next transaction works too\n+\tstartTx(pm2);\n+\tpc2.setString (\"pc-string-4-2\");\n+\tendTx(pm2);\n+\n+\tstartTx(pm1);\n+\tpm1.refresh (pc1);\n+\tpc1.setString (\"pc-string-3-1\");\n+\n+\tstartTx(pm2);\n+\tpc2.setString (\"pc-string-5-2\");\n+\n+\tThread.currentThread ().sleep (1 * 1000);\n+\tendTx(pm1);\n+\ttry\n+\t{\n+\t\tThread.currentThread ().sleep (1 * 1000);\n+\t\tendTx(pm2);\n+\t\tfail (\"Should have caused OL exception2.\");\n+\t}\n+\tcatch (Exception jfe)\n+\t{\n+\t\tstartTx(pm2);\n+\t\tpm2.refresh (pc2);\n+\t\tpc2.setString (\"pc-string-6-2\");\n+\t\tendTx(pm2);\n+\t}\n+\tendEm(pm1);\n+\tendEm(pm2);\n+\n+\tEntityManager pm = currentEntityManager();\n+\tDateVersion pc = pm.find(DateVersion.class, oid);\n+\tassertEquals (\"pc-string-6-2\", pc.toString ());\n+\tendEm(pm);\n+  }\n }\n\\ No newline at end of file"},{"sha":"6af5dbc2898f3fb46e89ba756a9dd6f1ce6772fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","status":"modified","additions":153,"deletions":153,"changes":306,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,153 +1,153 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBEager extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tprivate int _oid;\r\n-\r\n-\tpublic TestEJBEager(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(EagerPCSub.class);\r\n-\t\tdeleteAll(EagerPC.class);\r\n-\t\tdeleteAll(HelperPC.class);\r\n-\t\tdeleteAll(HelperPC2.class);\r\n-\t\tdeleteAll(HelperPC4.class);\r\n-\t\tdeleteAll(HelperPC3.class);\r\n-\r\n-\t\tEagerPCSub pc = new EagerPCSub (1);\r\n-\t\tpc.setStringField (\"string1\");\r\n-\t\tEagerPCSub pc2 = new EagerPCSub (2);\r\n-\t\tpc2.setStringField (\"string2\");\r\n-\r\n-\t\tHelperPC helper1 = new HelperPC (4);\r\n-\t\thelper1.setStringField (\"helper1\");\r\n-\t\tpc.setHelper (helper1);\r\n-\r\n-\t\tHelperPC2 helperCollection1 = new HelperPC2 ();\r\n-\t\thelperCollection1.setStringField (\"helperCollection1\");\r\n-\t\thelperCollection1.getHelperCollection ().add (new HelperPC (5));\r\n-\t\tHelperPC2 helperCollection2 = new HelperPC2 (6);\r\n-\t\thelperCollection2.setStringField (\"helperCollection2\");\r\n-\t\tpc.getHelperCollection ().add (helperCollection1);\r\n-\t\tpc.getHelperCollection ().add (helperCollection2);\r\n-\r\n-\t\tHelperPC eager = new HelperPC (7);\r\n-\t\teager.setStringField (\"eager\");\r\n-\t\tpc.setEager (eager);\r\n-\r\n-\t\tHelperPC4 eagerSub = new HelperPC4 ();\r\n-\t\teagerSub.setStringField (\"eagerSub\");\r\n-\t\teagerSub.setIntField (1);\r\n-\t\tpc.setEagerSub (eagerSub);\r\n-\r\n-\t\tHelperPC eagerCollection1 = new HelperPC (8);\r\n-\t\teagerCollection1.setStringField (\"eagerCollection1\");\r\n-\t\tHelperPC eagerCollection2 = new HelperPC (9);\r\n-\t\teagerCollection2.setStringField (\"eagerCollection2\");\r\n-\t\tpc.getEagerCollection ().add (eagerCollection1);\r\n-\t\tpc.getEagerCollection ().add (eagerCollection2);\r\n-\t\teagerCollection1.setEager (pc);\r\n-\t\teagerCollection2.setEager (pc);\r\n-\t\tpc.getEagerCollection2 ().add (eagerCollection1);\r\n-\t\tpc.getEagerCollection2 ().add (eagerCollection2);\r\n-\r\n-\t\tHelperPC eagerCollection3 = new HelperPC (10);\r\n-\t\teagerCollection3.setStringField (\"eagerCollection3\");\r\n-\t\tpc2.getEagerCollection ().add (eagerCollection3);\r\n-\r\n-\t\tHelperPC2 recurse = new HelperPC2 (11);\r\n-\t\trecurse.setStringField (\"recurse\");\r\n-\t\tHelperPC3 helper3 = new HelperPC3 (12);\r\n-\t\thelper3.setStringField (\"helper3\");\r\n-\t\trecurse.setHelper (helper3);\r\n-\t\teager.setHelper (helper1);\r\n-\t\tpc.setRecurse (recurse);\r\n-\r\n-\t\tHelperPC2 recurseCollection1 = new HelperPC2 (13);\r\n-\t\trecurseCollection1.setStringField (\"recurseCollection1\");\r\n-\t\tHelperPC2 recurseCollection2 = new HelperPC2 (14);\r\n-\t\trecurseCollection2.setStringField (\"recurseCollection2\");\r\n-\t\tpc.getRecurseCollection ().add (recurseCollection1);\r\n-\t\tpc.getRecurseCollection ().add (recurseCollection2);\r\n-\t\trecurseCollection1.getHelperCollection ().add (helper1);\r\n-\t\tHelperPC helper2 = new HelperPC (15);\r\n-\t\thelper2.setStringField (\"helper2\");\r\n-\t\trecurseCollection1.getHelperCollection ().add (helper2);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tpm.persist(pc2);\r\n-\t\tendTx(pm);\r\n-\t\t_oid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testOuterJoin ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tpc.setEager (null);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tassertNull (pc.getEager());\r\n-\t\tassertNotNull (pc.getRecurse ());\r\n-\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().\r\n-\t\t\tgetStringField ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testOuterJoinToSubclass ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tpc.setEagerSub (null);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n-\t\tassertNull (pc.getEagerSub ());\r\n-\t\tassertNotNull (pc.getRecurse ());\r\n-\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().getStringField ());\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import junit.framework.*;\n+\n+public class TestEJBEager extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tprivate int _oid;\n+\n+\tpublic TestEJBEager(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(EagerPCSub.class);\n+\t\tdeleteAll(EagerPC.class);\n+\t\tdeleteAll(HelperPC.class);\n+\t\tdeleteAll(HelperPC2.class);\n+\t\tdeleteAll(HelperPC4.class);\n+\t\tdeleteAll(HelperPC3.class);\n+\n+\t\tEagerPCSub pc = new EagerPCSub (1);\n+\t\tpc.setStringField (\"string1\");\n+\t\tEagerPCSub pc2 = new EagerPCSub (2);\n+\t\tpc2.setStringField (\"string2\");\n+\n+\t\tHelperPC helper1 = new HelperPC (4);\n+\t\thelper1.setStringField (\"helper1\");\n+\t\tpc.setHelper (helper1);\n+\n+\t\tHelperPC2 helperCollection1 = new HelperPC2 ();\n+\t\thelperCollection1.setStringField (\"helperCollection1\");\n+\t\thelperCollection1.getHelperCollection ().add (new HelperPC (5));\n+\t\tHelperPC2 helperCollection2 = new HelperPC2 (6);\n+\t\thelperCollection2.setStringField (\"helperCollection2\");\n+\t\tpc.getHelperCollection ().add (helperCollection1);\n+\t\tpc.getHelperCollection ().add (helperCollection2);\n+\n+\t\tHelperPC eager = new HelperPC (7);\n+\t\teager.setStringField (\"eager\");\n+\t\tpc.setEager (eager);\n+\n+\t\tHelperPC4 eagerSub = new HelperPC4 ();\n+\t\teagerSub.setStringField (\"eagerSub\");\n+\t\teagerSub.setIntField (1);\n+\t\tpc.setEagerSub (eagerSub);\n+\n+\t\tHelperPC eagerCollection1 = new HelperPC (8);\n+\t\teagerCollection1.setStringField (\"eagerCollection1\");\n+\t\tHelperPC eagerCollection2 = new HelperPC (9);\n+\t\teagerCollection2.setStringField (\"eagerCollection2\");\n+\t\tpc.getEagerCollection ().add (eagerCollection1);\n+\t\tpc.getEagerCollection ().add (eagerCollection2);\n+\t\teagerCollection1.setEager (pc);\n+\t\teagerCollection2.setEager (pc);\n+\t\tpc.getEagerCollection2 ().add (eagerCollection1);\n+\t\tpc.getEagerCollection2 ().add (eagerCollection2);\n+\n+\t\tHelperPC eagerCollection3 = new HelperPC (10);\n+\t\teagerCollection3.setStringField (\"eagerCollection3\");\n+\t\tpc2.getEagerCollection ().add (eagerCollection3);\n+\n+\t\tHelperPC2 recurse = new HelperPC2 (11);\n+\t\trecurse.setStringField (\"recurse\");\n+\t\tHelperPC3 helper3 = new HelperPC3 (12);\n+\t\thelper3.setStringField (\"helper3\");\n+\t\trecurse.setHelper (helper3);\n+\t\teager.setHelper (helper1);\n+\t\tpc.setRecurse (recurse);\n+\n+\t\tHelperPC2 recurseCollection1 = new HelperPC2 (13);\n+\t\trecurseCollection1.setStringField (\"recurseCollection1\");\n+\t\tHelperPC2 recurseCollection2 = new HelperPC2 (14);\n+\t\trecurseCollection2.setStringField (\"recurseCollection2\");\n+\t\tpc.getRecurseCollection ().add (recurseCollection1);\n+\t\tpc.getRecurseCollection ().add (recurseCollection2);\n+\t\trecurseCollection1.getHelperCollection ().add (helper1);\n+\t\tHelperPC helper2 = new HelperPC (15);\n+\t\thelper2.setStringField (\"helper2\");\n+\t\trecurseCollection1.getHelperCollection ().add (helper2);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tpm.persist(pc2);\n+\t\tendTx(pm);\n+\t\t_oid = pc.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testOuterJoin ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\n+\t\tpc.setEager (null);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\n+\t\tassertNull (pc.getEager());\n+\t\tassertNotNull (pc.getRecurse ());\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().\n+\t\t\tgetStringField ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testOuterJoinToSubclass ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\n+\t\tpc.setEagerSub (null);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\n+\t\tassertNull (pc.getEagerSub ());\n+\t\tassertNotNull (pc.getRecurse ());\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().getStringField ());\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+}"},{"sha":"edf56828c03f0f407dca8118920f95103b643e37","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,83 +1,83 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.InvertA;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.InvertB;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBInverseOneToOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tpublic TestEJBInverseOneToOne(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp ()\r\n-\t{\r\n-\t\tdeleteAll(InvertA.class);\r\n-\t\tdeleteAll(InvertB.class);\r\n-\t}\r\n-\r\n-\r\n-\tprivate static Object insertData (EntityManager pm)\r\n-\t{\r\n-\t\tInvertA a;\r\n-\t\tInvertB b;\r\n-\t\ta = new InvertA (1);\r\n-\t\tb = new InvertB (2);\r\n-\t\ta.setTest (\"testA\");\r\n-\t\tb.setTest (\"testB\");\r\n-\t\tb.setInvertA (a);\r\n-\r\n-\t\tEntityTransaction t = pm.getTransaction ();\r\n-\t\tt.begin ();\r\n-\t\tpm.persist(b);\r\n-\t\t//pm.makeTransactional (b);\r\n-\r\n-\t\treturn (pm.find(InvertB.class, 2));\r\n-\t}\r\n-\r\n-\r\n-\tpublic void testLoad ()\r\n-\t{\r\n-\t\tInvertA a;\r\n-\t\tInvertB b;\r\n-\t\tObject aId;\r\n-\t\tObject bId;\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\taId = insertData (pm);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tb = (InvertB) aId;\r\n-\r\n-\t\tassertNotNull(b.getInvertA().getTest());\r\n-\t\tassertEquals (b.getInvertA().getTest (), \"testA\");\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertA;\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertB;\n+import junit.framework.*;\n+\n+public class TestEJBInverseOneToOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tpublic TestEJBInverseOneToOne(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp ()\n+\t{\n+\t\tdeleteAll(InvertA.class);\n+\t\tdeleteAll(InvertB.class);\n+\t}\n+\n+\n+\tprivate static Object insertData (EntityManager pm)\n+\t{\n+\t\tInvertA a;\n+\t\tInvertB b;\n+\t\ta = new InvertA (1);\n+\t\tb = new InvertB (2);\n+\t\ta.setTest (\"testA\");\n+\t\tb.setTest (\"testB\");\n+\t\tb.setInvertA (a);\n+\n+\t\tEntityTransaction t = pm.getTransaction ();\n+\t\tt.begin ();\n+\t\tpm.persist(b);\n+\t\t//pm.makeTransactional (b);\n+\n+\t\treturn (pm.find(InvertB.class, 2));\n+\t}\n+\n+\n+\tpublic void testLoad ()\n+\t{\n+\t\tInvertA a;\n+\t\tInvertB b;\n+\t\tObject aId;\n+\t\tObject bId;\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\taId = insertData (pm);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tb = (InvertB) aId;\n+\n+\t\tassertNotNull(b.getInvertA().getTest());\n+\t\tassertEquals (b.getInvertA().getTest (), \"testA\");\n+\t}\n+\n+}"},{"sha":"68b872f8af24f5d66269899e2ac450e7a12052ff","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,101 +1,101 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBOuterJoinValues extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tpublic int oid = 0;\r\n-\r\n-\tpublic TestEJBOuterJoinValues(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll(OuterJoinValuePC.class);\r\n-\r\n-\t\tOuterJoinValuePC pc = new OuterJoinValuePC (10);\r\n-\t\tpc.setStringField (\"pc\");\r\n-\t\tpc.setValue1 (1);\r\n-\t\tpc.setValue2 (2);\r\n-\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tpm.persist(pc);\r\n-\t\tendTx(pm);\r\n-\r\n-\t\toid = pc.getId();\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testNull ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n-\r\n-\t\tpc.setValue1 (0);\r\n-\t\tpc.setValue2 (0);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tassertEquals (0, pc.getValue1 ());\r\n-\t\tassertEquals (0, pc.getValue2 ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testUpdate ()\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tstartTx(pm);\r\n-\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tpc.setValue1 (3);\r\n-\t\tpc.setValue2 (0);\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\r\n-\t\tpm = currentEntityManager();\r\n-\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tassertEquals (3, pc.getValue1 ());\r\n-\t\tassertEquals (0, pc.getValue2 ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testInsert ()\r\n-\t{\r\n-\t\t// just tests the values inserted in the setup method\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n-\t\tassertEquals (\"pc\", pc.getStringField ());\r\n-\t\tassertEquals (1, pc.getValue1 ());\r\n-\t\tassertEquals (2, pc.getValue2 ());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC;\n+import junit.framework.*;\n+\n+public class TestEJBOuterJoinValues extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tpublic int oid = 0;\n+\n+\tpublic TestEJBOuterJoinValues(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll(OuterJoinValuePC.class);\n+\n+\t\tOuterJoinValuePC pc = new OuterJoinValuePC (10);\n+\t\tpc.setStringField (\"pc\");\n+\t\tpc.setValue1 (1);\n+\t\tpc.setValue2 (2);\n+\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tpm.persist(pc);\n+\t\tendTx(pm);\n+\n+\t\toid = pc.getId();\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testNull ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\n+\n+\t\tpc.setValue1 (0);\n+\t\tpc.setValue2 (0);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tassertEquals (0, pc.getValue1 ());\n+\t\tassertEquals (0, pc.getValue2 ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testUpdate ()\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tstartTx(pm);\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tpc.setValue1 (3);\n+\t\tpc.setValue2 (0);\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\n+\t\tpm = currentEntityManager();\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tassertEquals (3, pc.getValue1 ());\n+\t\tassertEquals (0, pc.getValue2 ());\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testInsert ()\n+\t{\n+\t\t// just tests the values inserted in the setup method\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\n+\t\tassertEquals (\"pc\", pc.getStringField ());\n+\t\tassertEquals (1, pc.getValue1 ());\n+\t\tassertEquals (2, pc.getValue2 ());\n+\t\tendEm(pm);\n+\t}\n+\n+}"},{"sha":"53d79e48804b54cd7b8de6cf23660117a0199ea0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","status":"modified","additions":242,"deletions":242,"changes":484,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,242 +1,242 @@\n-/*\r\n- * TestEagerDistinct.java\r\n- *\r\n- * Created on October 4, 2006, 4:27 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.Join;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestEagerDistinct extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \r\n-{\r\n-        \r\n-    /** Creates a new instance of TestEagerDistinct */\r\n-    public TestEagerDistinct(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public boolean skipTest() {\r\n-        return ((JDBCConfiguration) getConfiguration()).\r\n-                getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n-    }\r\n-    \r\n-    public void setUpTestCase() {\r\n-       deleteAll(EagerPC.class);\r\n-       deleteAll(HelperPC.class);\r\n-       deleteAll(HelperPC2.class);\r\n-        \r\n-        HelperPC shared = new HelperPC();\r\n-        shared.setStringField(\"shared\");\r\n-        \r\n-        HelperPC2 pc1 = new HelperPC2();\r\n-        pc1.setStringField(\"pc1\");\r\n-        pc1.getHelperCollection().add(shared);\r\n-        pc1.getHelperCollection().add(new HelperPC());\r\n-        \r\n-        HelperPC2 pc2 = new HelperPC2();\r\n-        pc2.setStringField(\"pc2\");\r\n-        pc2.getHelperCollection().add(shared);\r\n-        pc2.getHelperCollection().add(new HelperPC());\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        \r\n-        // to make sure subclasses are selected, etc\r\n-        //FIXME jthomas\r\n-        //pm.createNativeQuery(\"\",HelperPC.class).execute();\r\n-        //pm.newQuery(HelperPC2.class).execute();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public OpenJPAEntityManager getPM() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n-        return pm;\r\n-    }\r\n-    \r\n-    public void testEagerParallelWithNonDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithNonDistinctQuery(-1);\r\n-    }\r\n-    \r\n-    public void testPagingEagerParallelWithNonDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithNonDistinctQuery(0);\r\n-    }\r\n-    \r\n-    private void eagerParallelWithNonDistinctQuery(int fetchSize)\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"stringField.startsWith ('pc')\",HelperPC2.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n-        List res = (List) q.getResultList();\r\n-        \r\n-        if (fetchSize == -1)\r\n-            assertEquals(2, sql.size());\r\n-        \r\n-        assertEquals(2, res.size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n-        \r\n-        assertNotSQL(\"DISTINCT\");\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void assertHelperPC2(String stringField, HelperPC2 pc) {\r\n-        assertEquals(stringField, pc.getStringField());\r\n-        assertEquals(2, pc.getHelperCollection().size());\r\n-        assertEquals(\"shared\", ((HelperPC) pc.getHelperCollection().get(0)).\r\n-                getStringField());\r\n-        assertNull(((HelperPC) pc.getHelperCollection().get(1)).\r\n-                getStringField());\r\n-    }\r\n-    \r\n-    public void testEagerParallelWithDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithDistinctQuery(-1);\r\n-    }\r\n-    \r\n-    public void testPagingEagerParallelWithDistinctQuery()\r\n-    throws Exception {\r\n-        eagerParallelWithDistinctQuery(0);\r\n-    }\r\n-    \r\n-    private void eagerParallelWithDistinctQuery(int fetchSize)\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q =  pm.createNativeQuery(\"helperCollection.contains (h) && h.stringField == 'shared'\",HelperPC2.class);\r\n-        //FIXME  jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n-        List res = (List) q.getResultList();\r\n-        \r\n-        if (fetchSize == -1) {\r\n-            sql.remove(0);    // orig sel\r\n-            assertSQL(\"DISTINCT\");\r\n-        }\r\n-        \r\n-        assertEquals(2, res.size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testNestedEagerParallel()\r\n-    throws Exception {\r\n-        nestedEagerParallel(-1);\r\n-    }\r\n-    \r\n-    public void testPagingNestedEagerParallel()\r\n-    throws Exception {\r\n-        nestedEagerParallel(0);\r\n-    }\r\n-    \r\n-    private void nestedEagerParallel(int fetchSize)\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",HelperPC2.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        List helpers = (List) q.getResultList();\r\n-        \r\n-        EagerPC eager1 = new EagerPC();\r\n-        eager1.setStringField(\"eager1\");\r\n-        eager1.getRecurseCollection().addAll(helpers);\r\n-        \r\n-        EagerPC eager2 = new EagerPC();\r\n-        eager2.setStringField(\"eager2\");\r\n-        eager2.getRecurseCollection().addAll(helpers);\r\n-        HelperPC2 pc3 = new HelperPC2();\r\n-        pc3.setStringField(\"pc3\");\r\n-        pc3.getHelperCollection().add(new HelperPC());\r\n-        pc3.getHelperCollection().add(new HelperPC());\r\n-        pc3.getHelperCollection().add(new HelperPC());\r\n-        eager2.getRecurseCollection().add(pc3);\r\n-        \r\n-        startTx(pm);;\r\n-        pm.persist(eager1);\r\n-        pm.persist(eager2);\r\n-        endTx(pm);;\r\n-        // make sure subclasses selected, etc\r\n-        //FIXME jthomas\r\n-        pm.createNativeQuery(\"\",EagerPC.class).getResultList();\r\n-        pm.close();\r\n-        sql.clear();\r\n-        \r\n-        pm = getPM();\r\n-        q = pm.createNativeQuery(\"stringField.startsWith ('eager')\",EagerPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"stringField ascending\");\r\n-        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n-        List res = (List) q.getResultList();\r\n-        \r\n-        if (fetchSize == -1) {\r\n-            sql.remove(0); // orig sel\r\n-            assertSQL(\"DISTINCT\");\r\n-        }\r\n-        \r\n-        assertEquals(2, res.size());\r\n-        eager1 = (EagerPC) res.get(0);\r\n-        assertEquals(\"eager1\", eager1.getStringField());\r\n-        assertEquals(2, eager1.getRecurseCollection().size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) eager1.getRecurseCollection().\r\n-                get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) eager1.getRecurseCollection().\r\n-                get(1));\r\n-        \r\n-        eager2 = (EagerPC) res.get(1);\r\n-        assertEquals(\"eager2\", eager2.getStringField());\r\n-        assertEquals(3, eager2.getRecurseCollection().size());\r\n-        assertHelperPC2(\"pc1\", (HelperPC2) eager2.getRecurseCollection().\r\n-                get(0));\r\n-        assertHelperPC2(\"pc2\", (HelperPC2) eager2.getRecurseCollection().\r\n-                get(1));\r\n-        pc3 = (HelperPC2) eager2.getRecurseCollection().get(2);\r\n-        assertEquals(\"pc3\", pc3.getStringField());\r\n-        assertEquals(3, pc3.getHelperCollection().size());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestEagerDistinct.java\n+ *\n+ * Created on October 4, 2006, 4:27 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.Join;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestEagerDistinct extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \n+{\n+        \n+    /** Creates a new instance of TestEagerDistinct */\n+    public TestEagerDistinct(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public boolean skipTest() {\n+        return ((JDBCConfiguration) getConfiguration()).\n+                getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\n+    }\n+    \n+    public void setUpTestCase() {\n+       deleteAll(EagerPC.class);\n+       deleteAll(HelperPC.class);\n+       deleteAll(HelperPC2.class);\n+        \n+        HelperPC shared = new HelperPC();\n+        shared.setStringField(\"shared\");\n+        \n+        HelperPC2 pc1 = new HelperPC2();\n+        pc1.setStringField(\"pc1\");\n+        pc1.getHelperCollection().add(shared);\n+        pc1.getHelperCollection().add(new HelperPC());\n+        \n+        HelperPC2 pc2 = new HelperPC2();\n+        pc2.setStringField(\"pc2\");\n+        pc2.getHelperCollection().add(shared);\n+        pc2.getHelperCollection().add(new HelperPC());\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        \n+        // to make sure subclasses are selected, etc\n+        //FIXME jthomas\n+        //pm.createNativeQuery(\"\",HelperPC.class).execute();\n+        //pm.newQuery(HelperPC2.class).execute();\n+        pm.close();\n+    }\n+    \n+    public OpenJPAEntityManager getPM() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\n+        return pm;\n+    }\n+    \n+    public void testEagerParallelWithNonDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithNonDistinctQuery(-1);\n+    }\n+    \n+    public void testPagingEagerParallelWithNonDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithNonDistinctQuery(0);\n+    }\n+    \n+    private void eagerParallelWithNonDistinctQuery(int fetchSize)\n+    throws Exception {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createNativeQuery(\"stringField.startsWith ('pc')\",HelperPC2.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\n+        List res = (List) q.getResultList();\n+        \n+        if (fetchSize == -1)\n+            assertEquals(2, sql.size());\n+        \n+        assertEquals(2, res.size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\n+        \n+        assertNotSQL(\"DISTINCT\");\n+        pm.close();\n+    }\n+    \n+    private void assertHelperPC2(String stringField, HelperPC2 pc) {\n+        assertEquals(stringField, pc.getStringField());\n+        assertEquals(2, pc.getHelperCollection().size());\n+        assertEquals(\"shared\", ((HelperPC) pc.getHelperCollection().get(0)).\n+                getStringField());\n+        assertNull(((HelperPC) pc.getHelperCollection().get(1)).\n+                getStringField());\n+    }\n+    \n+    public void testEagerParallelWithDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithDistinctQuery(-1);\n+    }\n+    \n+    public void testPagingEagerParallelWithDistinctQuery()\n+    throws Exception {\n+        eagerParallelWithDistinctQuery(0);\n+    }\n+    \n+    private void eagerParallelWithDistinctQuery(int fetchSize)\n+    throws Exception {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q =  pm.createNativeQuery(\"helperCollection.contains (h) && h.stringField == 'shared'\",HelperPC2.class);\n+        //FIXME  jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\n+        List res = (List) q.getResultList();\n+        \n+        if (fetchSize == -1) {\n+            sql.remove(0);    // orig sel\n+            assertSQL(\"DISTINCT\");\n+        }\n+        \n+        assertEquals(2, res.size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\n+        pm.close();\n+    }\n+    \n+    public void testNestedEagerParallel()\n+    throws Exception {\n+        nestedEagerParallel(-1);\n+    }\n+    \n+    public void testPagingNestedEagerParallel()\n+    throws Exception {\n+        nestedEagerParallel(0);\n+    }\n+    \n+    private void nestedEagerParallel(int fetchSize)\n+    throws Exception {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",HelperPC2.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        List helpers = (List) q.getResultList();\n+        \n+        EagerPC eager1 = new EagerPC();\n+        eager1.setStringField(\"eager1\");\n+        eager1.getRecurseCollection().addAll(helpers);\n+        \n+        EagerPC eager2 = new EagerPC();\n+        eager2.setStringField(\"eager2\");\n+        eager2.getRecurseCollection().addAll(helpers);\n+        HelperPC2 pc3 = new HelperPC2();\n+        pc3.setStringField(\"pc3\");\n+        pc3.getHelperCollection().add(new HelperPC());\n+        pc3.getHelperCollection().add(new HelperPC());\n+        pc3.getHelperCollection().add(new HelperPC());\n+        eager2.getRecurseCollection().add(pc3);\n+        \n+        startTx(pm);;\n+        pm.persist(eager1);\n+        pm.persist(eager2);\n+        endTx(pm);;\n+        // make sure subclasses selected, etc\n+        //FIXME jthomas\n+        pm.createNativeQuery(\"\",EagerPC.class).getResultList();\n+        pm.close();\n+        sql.clear();\n+        \n+        pm = getPM();\n+        q = pm.createNativeQuery(\"stringField.startsWith ('eager')\",EagerPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"stringField ascending\");\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\n+        List res = (List) q.getResultList();\n+        \n+        if (fetchSize == -1) {\n+            sql.remove(0); // orig sel\n+            assertSQL(\"DISTINCT\");\n+        }\n+        \n+        assertEquals(2, res.size());\n+        eager1 = (EagerPC) res.get(0);\n+        assertEquals(\"eager1\", eager1.getStringField());\n+        assertEquals(2, eager1.getRecurseCollection().size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager1.getRecurseCollection().\n+                get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager1.getRecurseCollection().\n+                get(1));\n+        \n+        eager2 = (EagerPC) res.get(1);\n+        assertEquals(\"eager2\", eager2.getStringField());\n+        assertEquals(3, eager2.getRecurseCollection().size());\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager2.getRecurseCollection().\n+                get(0));\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager2.getRecurseCollection().\n+                get(1));\n+        pc3 = (HelperPC2) eager2.getRecurseCollection().get(2);\n+        assertEquals(\"pc3\", pc3.getStringField());\n+        assertEquals(3, pc3.getHelperCollection().size());\n+        pm.close();\n+    }\n+    \n+}"},{"sha":"89814d79e0b35bf69bafed78266dd10efcdace70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","status":"modified","additions":874,"deletions":874,"changes":1748,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,874 +1,874 @@\n-/*\r\n- * TestEagerOuterToManyJoins.java\r\n- *\r\n- * Created on October 3, 2006, 10:53 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.persistence.FetchPlan;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC;\r\n-\r\n-\r\n-public class TestEagerOuterToManyJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-    /** Creates a new instance of TestEagerOuterToManyJoins */\r\n-    public TestEagerOuterToManyJoins(String name) {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public boolean skipTest() {\r\n-        DBDictionary dict = ((JDBCConfiguration) getConfiguration()).\r\n-                getDBDictionaryInstance();\r\n-        return !dict.supportsSubselect;\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-        \r\n-       deleteAll(HelperPC.class);\r\n-       deleteAll(EagerOuterJoinPC2.class);\r\n-       deleteAll(EagerOuterJoinPC.class);\r\n-    }\r\n-    \r\n-    \r\n-    public void testStringCollectionById() {\r\n-        stringCollectionByIdTest(false);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionById() {\r\n-        stringCollectionByIdTest(true);\r\n-    }\r\n-    \r\n-    private void stringCollectionByIdTest(boolean empty) {\r\n-        Object oid = insertStringCollection((empty) ? 1 : 0);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if (empty)\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    0, pc.getStringCollection().size());\r\n-        else {\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    2, pc.getStringCollection().size());\r\n-            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        }\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testStringCollectionByQuery() {\r\n-        stringCollectionByQueryTest(0);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionByQuery1() {\r\n-        stringCollectionByQueryTest(1);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionByQuery2() {\r\n-        stringCollectionByQueryTest(2);\r\n-    }\r\n-    \r\n-    public void testEmptyStringCollectionByQuery3() {\r\n-        stringCollectionByQueryTest(3);\r\n-    }\r\n-    \r\n-    private void stringCollectionByQueryTest(int empty) {\r\n-        insertStringCollection(empty);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        \r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if ((empty & 1) > 0)\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    0, pc.getStringCollection().size());\r\n-        else {\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    2, pc.getStringCollection().size());\r\n-            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        }\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        if ((empty & 2) > 0)\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    0, pc.getStringCollection().size());\r\n-        else {\r\n-            assertEquals(pc.getStringCollection().toString(),\r\n-                    2, pc.getStringCollection().size());\r\n-            assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n-            assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n-        }\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertStringCollection(int empty) {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        if ((empty & 1) == 0) {\r\n-            pc1.getStringCollection().add(\"1.1\");\r\n-            pc1.getStringCollection().add(\"1.2\");\r\n-        }\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        if ((empty & 2) == 0) {\r\n-            pc2.getStringCollection().add(\"2.1\");\r\n-            pc2.getStringCollection().add(\"2.2\");\r\n-        }\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testStringListById() {\r\n-        Object oid = insertStringList();\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        \r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringList().size());\r\n-        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n-        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testStringListByQuery() {\r\n-        insertStringList();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringList().size());\r\n-        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n-        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        assertEquals(2, pc.getStringList().size());\r\n-        assertEquals(\"2.1\", pc.getStringList().get(0));\r\n-        assertEquals(\"2.2\", pc.getStringList().get(1));\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertStringList() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        pc1.getStringList().add(\"1.1\");\r\n-        pc1.getStringList().add(\"1.2\");\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        pc2.getStringList().add(\"2.1\");\r\n-        pc2.getStringList().add(\"2.2\");\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testOneManyCollectionById() {\r\n-        oneManyCollectionByIdTest(false);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionById() {\r\n-        oneManyCollectionByIdTest(true);\r\n-    }\r\n-    \r\n-    private void oneManyCollectionByIdTest(boolean empty) {\r\n-        Object oid = insertOneManyCollection((empty) ? 1 : 0);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if (empty)\r\n-            assertEquals(0, pc.getOneManyCollection().size());\r\n-        else\r\n-            assertEquals(2, pc.getOneManyCollection().size());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testOneManyCollectionByQuery() {\r\n-        oneManyCollectionByQueryTest(0);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionByQuery1() {\r\n-        oneManyCollectionByQueryTest(1);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionByQuery2() {\r\n-        oneManyCollectionByQueryTest(2);\r\n-    }\r\n-    \r\n-    public void testEmptyOneManyCollectionByQuery3() {\r\n-        oneManyCollectionByQueryTest(3);\r\n-    }\r\n-    \r\n-    private void oneManyCollectionByQueryTest(int empty) {\r\n-        insertOneManyCollection(empty);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if ((empty & 1) > 0)\r\n-            assertEquals(0, pc.getOneManyCollection().size());\r\n-        else\r\n-            assertEquals(2, pc.getOneManyCollection().size());\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        if ((empty & 2) > 0)\r\n-            assertEquals(0, pc.getOneManyCollection().size());\r\n-        else\r\n-            assertEquals(2, pc.getOneManyCollection().size());\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertOneManyCollection(int empty) {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        EagerOuterJoinPC2 hpc;\r\n-        if ((empty & 1) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.1\");\r\n-            hpc.setRef(pc1);\r\n-            pc1.getOneManyCollection().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.2\");\r\n-            hpc.setRef(pc1);\r\n-            pc1.getOneManyCollection().add(hpc);\r\n-        }\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        if ((empty & 2) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.1\");\r\n-            hpc.setRef(pc2);\r\n-            pc2.getOneManyCollection().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.2\");\r\n-            hpc.setRef(pc2);\r\n-            pc2.getOneManyCollection().add(hpc);\r\n-        }\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testManyManyCollectionById() {\r\n-        Object oid = insertManyManyCollection();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyCollection().size());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testManyManyCollectionByQuery() {\r\n-        insertManyManyCollection();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyCollection().size());\r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyCollection().size());\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertManyManyCollection() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.1\");\r\n-        pc1.getManyManyCollection().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.2\");\r\n-        pc1.getManyManyCollection().add(hpc);\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.1\");\r\n-        pc2.getManyManyCollection().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.2\");\r\n-        pc2.getManyManyCollection().add(hpc);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testManyManyListById() {\r\n-        manyManyListByIdTest(false);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListById() {\r\n-        manyManyListByIdTest(true);\r\n-    }\r\n-    \r\n-    private void manyManyListByIdTest(boolean empty) {\r\n-        Object oid = insertManyManyList((empty) ? 1 : 0);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        if (empty)\r\n-            assertEquals(0, pc.getManyManyList().size());\r\n-        else {\r\n-            assertEquals(2, pc.getManyManyList().size());\r\n-            EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n-            pc.getManyManyList().get(0);\r\n-            assertEquals(\"1.1\", hpc.getName());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-            assertEquals(\"1.2\", hpc.getName());\r\n-        }\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testManyManyListByQuery() {\r\n-        manyManyListByQueryTest(0);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListByQuery1() {\r\n-        manyManyListByQueryTest(1);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListByQuery2() {\r\n-        manyManyListByQueryTest(2);\r\n-    }\r\n-    \r\n-    public void testEmptyManyManyListByQuery3() {\r\n-        manyManyListByQueryTest(3);\r\n-    }\r\n-    \r\n-    private void manyManyListByQueryTest(int empty) {\r\n-        insertManyManyList(empty);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        EagerOuterJoinPC2 hpc;\r\n-        if ((empty & 1) > 0)\r\n-            assertEquals(0, pc.getManyManyList().size());\r\n-        else {\r\n-            assertEquals(2, pc.getManyManyList().size());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n-            assertEquals(\"1.1\", hpc.getName());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-            assertEquals(\"1.2\", hpc.getName());\r\n-        }\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        if ((empty & 2) > 0)\r\n-            assertEquals(0, pc.getManyManyList().size());\r\n-        else {\r\n-            assertEquals(2, pc.getManyManyList().size());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n-            assertEquals(\"2.1\", hpc.getName());\r\n-            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-            assertEquals(\"2.2\", hpc.getName());\r\n-        }\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertManyManyList(int empty) {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        EagerOuterJoinPC2 hpc;\r\n-        if ((empty & 1) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.1\");\r\n-            pc1.getManyManyList().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"1.2\");\r\n-            pc1.getManyManyList().add(hpc);\r\n-        }\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        if ((empty & 2) == 0) {\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.1\");\r\n-            pc2.getManyManyList().add(hpc);\r\n-            hpc = new EagerOuterJoinPC2();\r\n-            hpc.setName(\"2.2\");\r\n-            pc2.getManyManyList().add(hpc);\r\n-        }\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testTwoCollectionsInFetchGroupsById() {\r\n-        Object oid = insertTwoCollections();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"1.1\", hpc.getName());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"1.2\", hpc.getName());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testTwoCollectionsInFetchGroupsByQuery() {\r\n-        insertTwoCollections();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.setFetchBatchSize(-1);\r\n-        \r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        \r\n-        assertEquals(2, results.size());\r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"1.1\", hpc.getName());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"1.2\", hpc.getName());\r\n-        \r\n-        pc = (EagerOuterJoinPC) itr.next();\r\n-        assertEquals(\"2\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n-        assertEquals(\"2.1\", hpc.getName());\r\n-        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"2.2\", hpc.getName());\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertTwoCollections() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        pc1.getStringCollection().add(\"1.1\");\r\n-        pc1.getStringCollection().add(\"1.2\");\r\n-        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.1\");\r\n-        pc1.getManyManyList().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"1.2\");\r\n-        pc1.getManyManyList().add(hpc);\r\n-        \r\n-        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n-        pc2.setName(\"2\");\r\n-        pc2.getStringCollection().add(\"2.1\");\r\n-        pc2.getStringCollection().add(\"2.2\");\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.1\");\r\n-        pc2.getManyManyList().add(hpc);\r\n-        hpc = new EagerOuterJoinPC2();\r\n-        hpc.setName(\"2.2\");\r\n-        pc2.getManyManyList().add(hpc);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    public void testQueryRandomAccess() {\r\n-        insertManyStringList();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        fetch.setFetchBatchSize(3);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        List results = (List) q.getResultList();\r\n-        assertEquals(10, results.size());\r\n-        \r\n-        for (int i = 5; i < results.size(); i++) {\r\n-            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n-            assertEquals(String.valueOf(i), pc.getName());\r\n-            assertEquals(2, pc.getStringList().size());\r\n-            assertEquals(i + \".1\", pc.getStringList().get(0));\r\n-            assertEquals(i + \".2\", pc.getStringList().get(1));\r\n-        }\r\n-        q.closeAll();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testQueryRange() {\r\n-        insertManyStringList();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n-        fetch.setFetchBatchSize(3);\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        //q.setRange(5, 20);\r\n-        \r\n-        List results = (List) q.getResultList();\r\n-        assertEquals(5, results.size());\r\n-        \r\n-        for (int i = 0; i < results.size(); i++) {\r\n-            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n-            assertEquals(String.valueOf(i + 5), pc.getName());\r\n-            assertEquals(2, pc.getStringList().size());\r\n-            assertEquals((i + 5) + \".1\", pc.getStringList().get(0));\r\n-            assertEquals((i + 5) + \".2\", pc.getStringList().get(1));\r\n-        }\r\n-        q.closeAll();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void insertManyStringList() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        for (int i = 0; i < 10; i++) {\r\n-            EagerOuterJoinPC pc = new EagerOuterJoinPC();\r\n-            pc.setName(String.valueOf(i));\r\n-            pc.getStringList().add(i + \".1\");\r\n-            pc.getStringList().add(i + \".2\");\r\n-            pm.persist(pc);\r\n-        }\r\n-        endTx(pm);;\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToOneThenEagerToMany() {\r\n-        insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"ref\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC2.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(new ArrayList(results).toString(), 2, results.size());\r\n-        \r\n-        Iterator itr = results.iterator();\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n-        assertEquals(\"r1\", ref.getName());\r\n-        EagerOuterJoinPC pc = ref.getRef();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getStringCollection().size());\r\n-        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n-        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n-        \r\n-        ref = (EagerOuterJoinPC2) itr.next();\r\n-        assertEquals(\"r2\", ref.getName());\r\n-        assertTrue(pc == ref.getRef());\r\n-        \r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToManyThenEagerToOne() {\r\n-        insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(1, results.size());\r\n-        \r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"r1\", ref.getName());\r\n-        assertEquals(\"h1\", ref.getHelper().getStringField());\r\n-        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"r2\", ref.getName());\r\n-        assertEquals(\"h2\", ref.getHelper().getStringField());\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToManyThenEagerToMany() {\r\n-        insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"stringCollection\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(1, results.size());\r\n-        \r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(2, pc.getManyManyList().size());\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n-        pc.getManyManyList().get(0);\r\n-        assertEquals(\"r1\", ref.getName());\r\n-        assertEquals(2, ref.getStringCollection().size());\r\n-        assertTrue(ref.getStringCollection().contains(\"r1.1\"));\r\n-        assertTrue(ref.getStringCollection().contains(\"r1.2\"));\r\n-        \r\n-        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n-        assertEquals(\"r2\", ref.getName());\r\n-        assertEquals(2, ref.getStringCollection().size());\r\n-        assertTrue(ref.getStringCollection().contains(\"r2.1\"));\r\n-        assertTrue(ref.getStringCollection().contains(\"r2.2\"));\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testEagerToOneAndToManyThenEagerToOne() {\r\n-        Object oid = insertEagers();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n-        fetch.addField(EagerOuterJoinPC.class, \"helper\");\r\n-        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"name ascending\");\r\n-        Collection results = (Collection) q.getResultList();\r\n-        assertEquals(1, results.size());\r\n-        \r\n-        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n-        assertEquals(\"1\", pc.getName());\r\n-        assertEquals(\"h3\", pc.getHelper().getStringField());\r\n-        assertEquals(2, pc.getOneManyCollection().size());\r\n-        Iterator itr = pc.getOneManyCollection().iterator();\r\n-        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n-        if (\"r1\".equals(ref.getName())) {\r\n-            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n-            ref = (EagerOuterJoinPC2) itr.next();\r\n-            assertEquals(\"r2\", ref.getName());\r\n-            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n-        } else {\r\n-            assertEquals(\"r2\", ref.getName());\r\n-            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n-            ref = (EagerOuterJoinPC2) itr.next();\r\n-            assertEquals(\"r1\", ref.getName());\r\n-            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n-        }\r\n-        assertTrue(!itr.hasNext());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private Object insertEagers() {\r\n-        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n-        pc1.setName(\"1\");\r\n-        pc1.getStringCollection().add(\"1.1\");\r\n-        pc1.getStringCollection().add(\"1.2\");\r\n-        \r\n-        EagerOuterJoinPC2 ref1 = new EagerOuterJoinPC2();\r\n-        ref1.setName(\"r1\");\r\n-        ref1.getStringCollection().add(\"r1.1\");\r\n-        ref1.getStringCollection().add(\"r1.2\");\r\n-        \r\n-        EagerOuterJoinPC2 ref2 = new EagerOuterJoinPC2();\r\n-        ref2.setName(\"r2\");\r\n-        ref2.getStringCollection().add(\"r2.1\");\r\n-        ref2.getStringCollection().add(\"r2.2\");\r\n-        \r\n-        HelperPC hpc1 = new HelperPC();\r\n-        hpc1.setStringField(\"h1\");\r\n-        \r\n-        HelperPC hpc2 = new HelperPC();\r\n-        hpc2.setStringField(\"h2\");\r\n-        \r\n-        HelperPC hpc3 = new HelperPC();\r\n-        hpc3.setStringField(\"h3\");\r\n-        \r\n-        pc1.getManyManyList().add(ref1);\r\n-        pc1.getOneManyCollection().add(ref1);\r\n-        ref1.setRef(pc1);\r\n-        pc1.getManyManyList().add(ref2);\r\n-        pc1.getOneManyCollection().add(ref2);\r\n-        ref2.setRef(pc1);\r\n-        \r\n-        ref1.setHelper(hpc1);\r\n-        ref2.setHelper(hpc2);\r\n-        pc1.setHelper(hpc3);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        pm.persist(pc1);\r\n-        endTx(pm);;\r\n-        Object oid = pm.getObjectId(pc1);\r\n-        pm.close();\r\n-        return oid;\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestEagerOuterToManyJoins.java\n+ *\n+ * Created on October 3, 2006, 10:53 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC;\n+\n+\n+public class TestEagerOuterToManyJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+    /** Creates a new instance of TestEagerOuterToManyJoins */\n+    public TestEagerOuterToManyJoins(String name) {\n+    \tsuper(name);\n+    }\n+    \n+    public boolean skipTest() {\n+        DBDictionary dict = ((JDBCConfiguration) getConfiguration()).\n+                getDBDictionaryInstance();\n+        return !dict.supportsSubselect;\n+    }\n+    \n+    public void setUp() {\n+        \n+       deleteAll(HelperPC.class);\n+       deleteAll(EagerOuterJoinPC2.class);\n+       deleteAll(EagerOuterJoinPC.class);\n+    }\n+    \n+    \n+    public void testStringCollectionById() {\n+        stringCollectionByIdTest(false);\n+    }\n+    \n+    public void testEmptyStringCollectionById() {\n+        stringCollectionByIdTest(true);\n+    }\n+    \n+    private void stringCollectionByIdTest(boolean empty) {\n+        Object oid = insertStringCollection((empty) ? 1 : 0);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        if (empty)\n+            assertEquals(pc.getStringCollection().toString(),\n+                    0, pc.getStringCollection().size());\n+        else {\n+            assertEquals(pc.getStringCollection().toString(),\n+                    2, pc.getStringCollection().size());\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        }\n+        pm.close();\n+    }\n+    \n+    public void testStringCollectionByQuery() {\n+        stringCollectionByQueryTest(0);\n+    }\n+    \n+    public void testEmptyStringCollectionByQuery1() {\n+        stringCollectionByQueryTest(1);\n+    }\n+    \n+    public void testEmptyStringCollectionByQuery2() {\n+        stringCollectionByQueryTest(2);\n+    }\n+    \n+    public void testEmptyStringCollectionByQuery3() {\n+        stringCollectionByQueryTest(3);\n+    }\n+    \n+    private void stringCollectionByQueryTest(int empty) {\n+        insertStringCollection(empty);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        \n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        if ((empty & 1) > 0)\n+            assertEquals(pc.getStringCollection().toString(),\n+                    0, pc.getStringCollection().size());\n+        else {\n+            assertEquals(pc.getStringCollection().toString(),\n+                    2, pc.getStringCollection().size());\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        }\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        if ((empty & 2) > 0)\n+            assertEquals(pc.getStringCollection().toString(),\n+                    0, pc.getStringCollection().size());\n+        else {\n+            assertEquals(pc.getStringCollection().toString(),\n+                    2, pc.getStringCollection().size());\n+            assertTrue(pc.getStringCollection().contains(\"2.1\"));\n+            assertTrue(pc.getStringCollection().contains(\"2.2\"));\n+        }\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertStringCollection(int empty) {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        if ((empty & 1) == 0) {\n+            pc1.getStringCollection().add(\"1.1\");\n+            pc1.getStringCollection().add(\"1.2\");\n+        }\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        if ((empty & 2) == 0) {\n+            pc2.getStringCollection().add(\"2.1\");\n+            pc2.getStringCollection().add(\"2.2\");\n+        }\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        \n+        startTx(pm);;\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testStringListById() {\n+        Object oid = insertStringList();\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        \n+        \n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringList().size());\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\n+        pm.close();\n+    }\n+    \n+    public void testStringListByQuery() {\n+        insertStringList();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringList().size());\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        assertEquals(2, pc.getStringList().size());\n+        assertEquals(\"2.1\", pc.getStringList().get(0));\n+        assertEquals(\"2.2\", pc.getStringList().get(1));\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertStringList() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        pc1.getStringList().add(\"1.1\");\n+        pc1.getStringList().add(\"1.2\");\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        pc2.getStringList().add(\"2.1\");\n+        pc2.getStringList().add(\"2.2\");\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testOneManyCollectionById() {\n+        oneManyCollectionByIdTest(false);\n+    }\n+    \n+    public void testEmptyOneManyCollectionById() {\n+        oneManyCollectionByIdTest(true);\n+    }\n+    \n+    private void oneManyCollectionByIdTest(boolean empty) {\n+        Object oid = insertOneManyCollection((empty) ? 1 : 0);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        if (empty)\n+            assertEquals(0, pc.getOneManyCollection().size());\n+        else\n+            assertEquals(2, pc.getOneManyCollection().size());\n+        pm.close();\n+    }\n+    \n+    public void testOneManyCollectionByQuery() {\n+        oneManyCollectionByQueryTest(0);\n+    }\n+    \n+    public void testEmptyOneManyCollectionByQuery1() {\n+        oneManyCollectionByQueryTest(1);\n+    }\n+    \n+    public void testEmptyOneManyCollectionByQuery2() {\n+        oneManyCollectionByQueryTest(2);\n+    }\n+    \n+    public void testEmptyOneManyCollectionByQuery3() {\n+        oneManyCollectionByQueryTest(3);\n+    }\n+    \n+    private void oneManyCollectionByQueryTest(int empty) {\n+        insertOneManyCollection(empty);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        if ((empty & 1) > 0)\n+            assertEquals(0, pc.getOneManyCollection().size());\n+        else\n+            assertEquals(2, pc.getOneManyCollection().size());\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        if ((empty & 2) > 0)\n+            assertEquals(0, pc.getOneManyCollection().size());\n+        else\n+            assertEquals(2, pc.getOneManyCollection().size());\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertOneManyCollection(int empty) {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        EagerOuterJoinPC2 hpc;\n+        if ((empty & 1) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.1\");\n+            hpc.setRef(pc1);\n+            pc1.getOneManyCollection().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.2\");\n+            hpc.setRef(pc1);\n+            pc1.getOneManyCollection().add(hpc);\n+        }\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        if ((empty & 2) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.1\");\n+            hpc.setRef(pc2);\n+            pc2.getOneManyCollection().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.2\");\n+            hpc.setRef(pc2);\n+            pc2.getOneManyCollection().add(hpc);\n+        }\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testManyManyCollectionById() {\n+        Object oid = insertManyManyCollection();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyCollection().size());\n+        pm.close();\n+    }\n+    \n+    public void testManyManyCollectionByQuery() {\n+        insertManyManyCollection();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyCollection().size());\n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        assertEquals(2, pc.getManyManyCollection().size());\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertManyManyCollection() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.1\");\n+        pc1.getManyManyCollection().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.2\");\n+        pc1.getManyManyCollection().add(hpc);\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.1\");\n+        pc2.getManyManyCollection().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.2\");\n+        pc2.getManyManyCollection().add(hpc);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testManyManyListById() {\n+        manyManyListByIdTest(false);\n+    }\n+    \n+    public void testEmptyManyManyListById() {\n+        manyManyListByIdTest(true);\n+    }\n+    \n+    private void manyManyListByIdTest(boolean empty) {\n+        Object oid = insertManyManyList((empty) ? 1 : 0);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        if (empty)\n+            assertEquals(0, pc.getManyManyList().size());\n+        else {\n+            assertEquals(2, pc.getManyManyList().size());\n+            EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\n+            pc.getManyManyList().get(0);\n+            assertEquals(\"1.1\", hpc.getName());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+            assertEquals(\"1.2\", hpc.getName());\n+        }\n+        pm.close();\n+    }\n+    \n+    public void testManyManyListByQuery() {\n+        manyManyListByQueryTest(0);\n+    }\n+    \n+    public void testEmptyManyManyListByQuery1() {\n+        manyManyListByQueryTest(1);\n+    }\n+    \n+    public void testEmptyManyManyListByQuery2() {\n+        manyManyListByQueryTest(2);\n+    }\n+    \n+    public void testEmptyManyManyListByQuery3() {\n+        manyManyListByQueryTest(3);\n+    }\n+    \n+    private void manyManyListByQueryTest(int empty) {\n+        insertManyManyList(empty);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.setFetchBatchSize(-1);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        EagerOuterJoinPC2 hpc;\n+        if ((empty & 1) > 0)\n+            assertEquals(0, pc.getManyManyList().size());\n+        else {\n+            assertEquals(2, pc.getManyManyList().size());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\n+            assertEquals(\"1.1\", hpc.getName());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+            assertEquals(\"1.2\", hpc.getName());\n+        }\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        if ((empty & 2) > 0)\n+            assertEquals(0, pc.getManyManyList().size());\n+        else {\n+            assertEquals(2, pc.getManyManyList().size());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\n+            assertEquals(\"2.1\", hpc.getName());\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+            assertEquals(\"2.2\", hpc.getName());\n+        }\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertManyManyList(int empty) {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        EagerOuterJoinPC2 hpc;\n+        if ((empty & 1) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.1\");\n+            pc1.getManyManyList().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"1.2\");\n+            pc1.getManyManyList().add(hpc);\n+        }\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        if ((empty & 2) == 0) {\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.1\");\n+            pc2.getManyManyList().add(hpc);\n+            hpc = new EagerOuterJoinPC2();\n+            hpc.setName(\"2.2\");\n+            pc2.getManyManyList().add(hpc);\n+        }\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testTwoCollectionsInFetchGroupsById() {\n+        Object oid = insertTwoCollections();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"1.1\", hpc.getName());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"1.2\", hpc.getName());\n+        pm.close();\n+    }\n+    \n+    public void testTwoCollectionsInFetchGroupsByQuery() {\n+        insertTwoCollections();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.setFetchBatchSize(-1);\n+        \n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        \n+        assertEquals(2, results.size());\n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"1.1\", hpc.getName());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"1.2\", hpc.getName());\n+        \n+        pc = (EagerOuterJoinPC) itr.next();\n+        assertEquals(\"2\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"2.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"2.2\"));\n+        assertEquals(2, pc.getManyManyList().size());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\n+        assertEquals(\"2.1\", hpc.getName());\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"2.2\", hpc.getName());\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertTwoCollections() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        pc1.getStringCollection().add(\"1.1\");\n+        pc1.getStringCollection().add(\"1.2\");\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.1\");\n+        pc1.getManyManyList().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"1.2\");\n+        pc1.getManyManyList().add(hpc);\n+        \n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\n+        pc2.setName(\"2\");\n+        pc2.getStringCollection().add(\"2.1\");\n+        pc2.getStringCollection().add(\"2.2\");\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.1\");\n+        pc2.getManyManyList().add(hpc);\n+        hpc = new EagerOuterJoinPC2();\n+        hpc.setName(\"2.2\");\n+        pc2.getManyManyList().add(hpc);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        pm.persist(pc1);\n+        pm.persist(pc2);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    public void testQueryRandomAccess() {\n+        insertManyStringList();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        fetch.setFetchBatchSize(3);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        List results = (List) q.getResultList();\n+        assertEquals(10, results.size());\n+        \n+        for (int i = 5; i < results.size(); i++) {\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\n+            assertEquals(String.valueOf(i), pc.getName());\n+            assertEquals(2, pc.getStringList().size());\n+            assertEquals(i + \".1\", pc.getStringList().get(0));\n+            assertEquals(i + \".2\", pc.getStringList().get(1));\n+        }\n+        q.closeAll();\n+        pm.close();\n+    }\n+    \n+    public void testQueryRange() {\n+        insertManyStringList();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\n+        fetch.setFetchBatchSize(3);\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        //q.setRange(5, 20);\n+        \n+        List results = (List) q.getResultList();\n+        assertEquals(5, results.size());\n+        \n+        for (int i = 0; i < results.size(); i++) {\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\n+            assertEquals(String.valueOf(i + 5), pc.getName());\n+            assertEquals(2, pc.getStringList().size());\n+            assertEquals((i + 5) + \".1\", pc.getStringList().get(0));\n+            assertEquals((i + 5) + \".2\", pc.getStringList().get(1));\n+        }\n+        q.closeAll();\n+        pm.close();\n+    }\n+    \n+    private void insertManyStringList() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        for (int i = 0; i < 10; i++) {\n+            EagerOuterJoinPC pc = new EagerOuterJoinPC();\n+            pc.setName(String.valueOf(i));\n+            pc.getStringList().add(i + \".1\");\n+            pc.getStringList().add(i + \".2\");\n+            pm.persist(pc);\n+        }\n+        endTx(pm);;\n+        pm.close();\n+    }\n+    \n+    public void testEagerToOneThenEagerToMany() {\n+        insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC2.class, \"ref\");\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC2.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(new ArrayList(results).toString(), 2, results.size());\n+        \n+        Iterator itr = results.iterator();\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\n+        assertEquals(\"r1\", ref.getName());\n+        EagerOuterJoinPC pc = ref.getRef();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getStringCollection().size());\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\n+        \n+        ref = (EagerOuterJoinPC2) itr.next();\n+        assertEquals(\"r2\", ref.getName());\n+        assertTrue(pc == ref.getRef());\n+        \n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    public void testEagerToManyThenEagerToOne() {\n+        insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(1, results.size());\n+        \n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"r1\", ref.getName());\n+        assertEquals(\"h1\", ref.getHelper().getStringField());\n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"r2\", ref.getName());\n+        assertEquals(\"h2\", ref.getHelper().getStringField());\n+        \n+        pm.close();\n+    }\n+    \n+    public void testEagerToManyThenEagerToMany() {\n+        insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\n+        fetch.addField(EagerOuterJoinPC2.class, \"stringCollection\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(1, results.size());\n+        \n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(2, pc.getManyManyList().size());\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\n+        pc.getManyManyList().get(0);\n+        assertEquals(\"r1\", ref.getName());\n+        assertEquals(2, ref.getStringCollection().size());\n+        assertTrue(ref.getStringCollection().contains(\"r1.1\"));\n+        assertTrue(ref.getStringCollection().contains(\"r1.2\"));\n+        \n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\n+        assertEquals(\"r2\", ref.getName());\n+        assertEquals(2, ref.getStringCollection().size());\n+        assertTrue(ref.getStringCollection().contains(\"r2.1\"));\n+        assertTrue(ref.getStringCollection().contains(\"r2.2\"));\n+        \n+        pm.close();\n+    }\n+    \n+    public void testEagerToOneAndToManyThenEagerToOne() {\n+        Object oid = insertEagers();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\n+        fetch.addField(EagerOuterJoinPC.class, \"helper\");\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\n+        //FIXME jthomas\n+        //q.setOrdering(\"name ascending\");\n+        Collection results = (Collection) q.getResultList();\n+        assertEquals(1, results.size());\n+        \n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\n+        assertEquals(\"1\", pc.getName());\n+        assertEquals(\"h3\", pc.getHelper().getStringField());\n+        assertEquals(2, pc.getOneManyCollection().size());\n+        Iterator itr = pc.getOneManyCollection().iterator();\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\n+        if (\"r1\".equals(ref.getName())) {\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\n+            ref = (EagerOuterJoinPC2) itr.next();\n+            assertEquals(\"r2\", ref.getName());\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\n+        } else {\n+            assertEquals(\"r2\", ref.getName());\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\n+            ref = (EagerOuterJoinPC2) itr.next();\n+            assertEquals(\"r1\", ref.getName());\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\n+        }\n+        assertTrue(!itr.hasNext());\n+        pm.close();\n+    }\n+    \n+    private Object insertEagers() {\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\n+        pc1.setName(\"1\");\n+        pc1.getStringCollection().add(\"1.1\");\n+        pc1.getStringCollection().add(\"1.2\");\n+        \n+        EagerOuterJoinPC2 ref1 = new EagerOuterJoinPC2();\n+        ref1.setName(\"r1\");\n+        ref1.getStringCollection().add(\"r1.1\");\n+        ref1.getStringCollection().add(\"r1.2\");\n+        \n+        EagerOuterJoinPC2 ref2 = new EagerOuterJoinPC2();\n+        ref2.setName(\"r2\");\n+        ref2.getStringCollection().add(\"r2.1\");\n+        ref2.getStringCollection().add(\"r2.2\");\n+        \n+        HelperPC hpc1 = new HelperPC();\n+        hpc1.setStringField(\"h1\");\n+        \n+        HelperPC hpc2 = new HelperPC();\n+        hpc2.setStringField(\"h2\");\n+        \n+        HelperPC hpc3 = new HelperPC();\n+        hpc3.setStringField(\"h3\");\n+        \n+        pc1.getManyManyList().add(ref1);\n+        pc1.getOneManyCollection().add(ref1);\n+        ref1.setRef(pc1);\n+        pc1.getManyManyList().add(ref2);\n+        pc1.getOneManyCollection().add(ref2);\n+        ref2.setRef(pc1);\n+        \n+        ref1.setHelper(hpc1);\n+        ref2.setHelper(hpc2);\n+        pc1.setHelper(hpc3);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        pm.persist(pc1);\n+        endTx(pm);;\n+        Object oid = pm.getObjectId(pc1);\n+        pm.close();\n+        return oid;\n+    }\n+    \n+    \n+}"},{"sha":"7cbc469e3fccc4f93884980bcac890a87090eb32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","status":"modified","additions":132,"deletions":132,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,132 +1,132 @@\n-/*\r\n- * TestIntermediate.java\r\n- *\r\n- * Created on October 3, 2006, 12:01 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestIntermediate extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-    \r\n-    private Object _pc;\r\n-    private Object _rel;\r\n-    \r\n-    public TestIntermediate(String test) {\r\n-        super(test);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestIntermediate */\r\n-    public TestIntermediate() {\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-        RuntimeTest1 pc = new RuntimeTest1(\"pc\", 1);\r\n-        RuntimeTest1 rel = new RuntimeTest1(\"rel\", 2);\r\n-        pc.setSelfOneOne(rel);\r\n-        \r\n-        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-        broker.begin();\r\n-        broker.persist(pc, null);\r\n-        broker.commit();\r\n-        _pc = broker.getObjectId(pc);\r\n-        _rel = broker.getObjectId(rel);\r\n-        broker.close();\r\n-        em.close();\r\n-    }\r\n-    \r\n-    public void testOneOneSetsIntermediate() {\r\n-        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-        try {\r\n-            oneOneIntermediateTest(broker);\r\n-        } finally {\r\n-            broker.close();\r\n-            em.close();\r\n-        }\r\n-    }\r\n-    \r\n-    public void testDataCacheOneOneSetsIntermediate() {\r\n-        BrokerFactory factory = getBrokerFactory(new String[]{\r\n-            \"openjpa.DataCache\", \"true\",\r\n-            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n-        });\r\n-        \r\n-        // get obj into cache\r\n-        Broker broker = factory.newBroker();\r\n-        try {\r\n-            broker.find(_pc, true, null);\r\n-        } finally {\r\n-            broker.close();\r\n-        }\r\n-        \r\n-        // test from cache\r\n-        broker = factory.newBroker();\r\n-        try {\r\n-            oneOneIntermediateTest(broker);\r\n-        } finally {\r\n-            broker.close();\r\n-            try {\r\n-                factory.close();\r\n-            } catch (Exception e) {\r\n-            }\r\n-        }\r\n-    }\r\n-    \r\n-    /**\r\n-     * Helper method to see that the one to one uses an intermediate values.\r\n-     */\r\n-    private void oneOneIntermediateTest(Broker broker) {\r\n-        RuntimeTest1 pc = (RuntimeTest1) broker.find(_pc, true, null);\r\n-        OpenJPAStateManager sm = broker.getStateManager(pc);\r\n-        assertNotNull(sm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"selfOneOne\");\r\n-        assertNotNull(fmd);\r\n-        assertEquals(_rel, sm.getIntermediate(fmd.getIndex()));\r\n-        assertEquals(_rel, broker.getObjectId(pc.getSelfOneOne()));\r\n-        assertNull(sm.getIntermediate(fmd.getIndex()));\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestIntermediate.java\n+ *\n+ * Created on October 3, 2006, 12:01 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestIntermediate extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+    \n+    private Object _pc;\n+    private Object _rel;\n+    \n+    public TestIntermediate(String test) {\n+        super(test);\n+    }\n+    \n+    /** Creates a new instance of TestIntermediate */\n+    public TestIntermediate() {\n+    }\n+    \n+    public void setUp() {\n+        RuntimeTest1 pc = new RuntimeTest1(\"pc\", 1);\n+        RuntimeTest1 rel = new RuntimeTest1(\"rel\", 2);\n+        pc.setSelfOneOne(rel);\n+        \n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+        broker.begin();\n+        broker.persist(pc, null);\n+        broker.commit();\n+        _pc = broker.getObjectId(pc);\n+        _rel = broker.getObjectId(rel);\n+        broker.close();\n+        em.close();\n+    }\n+    \n+    public void testOneOneSetsIntermediate() {\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+        try {\n+            oneOneIntermediateTest(broker);\n+        } finally {\n+            broker.close();\n+            em.close();\n+        }\n+    }\n+    \n+    public void testDataCacheOneOneSetsIntermediate() {\n+        BrokerFactory factory = getBrokerFactory(new String[]{\n+            \"openjpa.DataCache\", \"true\",\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\n+        });\n+        \n+        // get obj into cache\n+        Broker broker = factory.newBroker();\n+        try {\n+            broker.find(_pc, true, null);\n+        } finally {\n+            broker.close();\n+        }\n+        \n+        // test from cache\n+        broker = factory.newBroker();\n+        try {\n+            oneOneIntermediateTest(broker);\n+        } finally {\n+            broker.close();\n+            try {\n+                factory.close();\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Helper method to see that the one to one uses an intermediate values.\n+     */\n+    private void oneOneIntermediateTest(Broker broker) {\n+        RuntimeTest1 pc = (RuntimeTest1) broker.find(_pc, true, null);\n+        OpenJPAStateManager sm = broker.getStateManager(pc);\n+        assertNotNull(sm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"selfOneOne\");\n+        assertNotNull(fmd);\n+        assertEquals(_rel, sm.getIntermediate(fmd.getIndex()));\n+        assertEquals(_rel, broker.getObjectId(pc.getSelfOneOne()));\n+        assertNull(sm.getIntermediate(fmd.getIndex()));\n+    }\n+    \n+    \n+}"},{"sha":"5c1a436cdc7870cf0408ea4251db8e2289b6bace","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","status":"modified","additions":363,"deletions":363,"changes":726,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,363 +1,363 @@\n-/*\r\n- * TestIrregularJoins.java\r\n- *\r\n- * Created on October 3, 2006, 12:47 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.NonPKJoinPC2;\r\n-\r\n-\r\n-\r\n-public class TestIrregularJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-\r\n-    private Object _nonpk = null;\r\n-    private Object _nonpk3 = null;\r\n-    private Object _partial = null;\r\n-    private Object _partial3 = null;\r\n-    private Object _constant2 = null;\r\n-    private Object _constant3 = null;\r\n-\r\n-    public TestIrregularJoins(String test) {\r\n-        super(test);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestIrregularJoins */\r\n-    public TestIrregularJoins() {\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        // make sure these classes are registered since we're using metadata\r\n-        // values for the class indicator\r\n-        new ConstantJoinPC();\r\n-        new ConstantJoinPC2();\r\n-        new ConstantJoinPC3();\r\n-\r\n-       deleteAll(PartialJoinPC.class);\r\n-       deleteAll(NonPKJoinPC.class);\r\n-       deleteAll(ConstantJoinPC.class);\r\n-\r\n-        PartialJoinPC partial = new PartialJoinPC();\r\n-        partial.setPk1(1);\r\n-        partial.setPk2(2);\r\n-        PartialJoinPC2 partial2 = new PartialJoinPC2();\r\n-        partial2.setPk1(2);\r\n-        partial2.setPk2(3);\r\n-        PartialJoinPC3 partial3 = new PartialJoinPC3();\r\n-        partial3.setPk1(3);\r\n-        partial3.setPk2(4);\r\n-\r\n-        NonPKJoinPC nonpk = new NonPKJoinPC();\r\n-        nonpk.setId1(1);\r\n-        nonpk.setId2(2);\r\n-        NonPKJoinPC2 nonpk2 = new NonPKJoinPC2();\r\n-        nonpk2.setId1(2);\r\n-        nonpk2.setId2(3);\r\n-        NonPKJoinPC3 nonpk3 = new NonPKJoinPC3();\r\n-        nonpk3.setId1(3);\r\n-        nonpk3.setId2(4);\r\n-\r\n-        partial.setNonPK(nonpk);\r\n-        partial.getNonPKs().add(nonpk);\r\n-        nonpk.setPartial(partial);\r\n-        nonpk.getPartials().add(partial);\r\n-\r\n-        partial3.setNonPK(nonpk);\r\n-        partial3.setNonPK3(nonpk3);\r\n-        partial3.getNonPKs().add(nonpk);\r\n-        partial3.getNonPK2s().add(nonpk2);\r\n-        nonpk3.setPartial(partial);\r\n-        nonpk3.setPartial3(partial3);\r\n-        nonpk3.getPartials().add(partial);\r\n-        nonpk3.getPartial2s().add(partial2);\r\n-\r\n-        ConstantJoinPC2 constant2 = new ConstantJoinPC2();\r\n-        constant2.setPk1(1);\r\n-        constant2.setPk2(2);\r\n-        constant2.setNonPK(nonpk3);\r\n-        constant2.setNonPK2(nonpk3);\r\n-\r\n-        // set the object's inverse on diff objects so we can be sure\r\n-        // that its 1-many includes only the object with the right constant\r\n-        nonpk.setConstant(constant2);\r\n-        nonpk2.setConstant(constant2);\r\n-        nonpk3.setConstant(constant2);\r\n-\r\n-        ConstantJoinPC3 constant3 = new ConstantJoinPC3();\r\n-        constant3.setPk1(1);\r\n-        constant3.setPk2(3);\r\n-\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-        pm.persist(partial);\r\n-        pm.persist(partial3);\r\n-        pm.persist(constant2);\r\n-        pm.persist(constant3);\r\n-        endTx(pm);\r\n-        _partial = pm.getObjectId(partial);\r\n-        _partial3 = pm.getObjectId(partial3);\r\n-        _nonpk = pm.getObjectId(nonpk);\r\n-        _nonpk3 = pm.getObjectId(nonpk3);\r\n-        _constant2 = pm.getObjectId(constant2);\r\n-        _constant3 = pm.getObjectId(constant3);\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testNonPKOneOne() {\r\n-        \r\n-        nonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerNonPKOneOne() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n-        nonPKOneOne(pm);\r\n-    }\r\n-\r\n-    private void nonPKOneOne(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n-        NonPKJoinPC nonpk = partial.getNonPK();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testPartialOneOne() {\r\n-        partialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerPartialOneOne() {\r\n-        \r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partial\");\r\n-        partialOneOne(pm);\r\n-    }\r\n-\r\n-    private void partialOneOne(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n-        PartialJoinPC partial = nonpk.getPartial();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalNonPKOneOne() {\r\n-        verticalNonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalNonPKOneOne() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK3\");\r\n-        verticalNonPKOneOne(pm);\r\n-    }\r\n-\r\n-    private void verticalNonPKOneOne(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n-        NonPKJoinPC nonpk = partial3.getNonPK();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        NonPKJoinPC3 nonpk3 = partial3.getNonPK3();\r\n-        assertEquals(3, nonpk3.getId1());\r\n-        assertEquals(4, nonpk3.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalPartialOneOne() {\r\n-        verticalPartialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalPartialOneOne() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partial3\");\r\n-        verticalPartialOneOne(pm);\r\n-    }\r\n-\r\n-    private void verticalPartialOneOne(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n-        PartialJoinPC partial = nonpk3.getPartial();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        PartialJoinPC3 partial3 = nonpk3.getPartial3();\r\n-        assertEquals(3, partial3.getPk1());\r\n-        assertEquals(4, partial3.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testNonPKManyMany() {\r\n-        nonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerNonPKManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n-        nonPKManyMany(pm);\r\n-    }\r\n-\r\n-    private void nonPKManyMany(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n-        Collection nonpks = partial.getNonPKs();\r\n-        assertEquals(1, nonpks.size());\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testPartialManyMany() {\r\n-        partialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerPartialManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partials\");\r\n-        partialManyMany(pm);\r\n-    }\r\n-\r\n-    private void partialManyMany(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n-        Collection partials = nonpk.getPartials();\r\n-        assertEquals(1, partials.size());\r\n-        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalNonPKManyMany() {\r\n-        verticalNonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalNonPKManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK2s\");\r\n-        verticalNonPKManyMany(pm);\r\n-    }\r\n-\r\n-    private void verticalNonPKManyMany(OpenJPAEntityManager pm) {\r\n-        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n-        Collection nonpks = partial3.getNonPKs();\r\n-        assertEquals(1, nonpks.size());\r\n-        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n-        assertEquals(1, nonpk.getId1());\r\n-        assertEquals(2, nonpk.getId2());\r\n-        Collection nonpk2s = partial3.getNonPK2s();\r\n-        assertEquals(1, nonpk2s.size());\r\n-        NonPKJoinPC2 nonpk2 = (NonPKJoinPC2) nonpk2s.iterator().next();\r\n-        assertEquals(2, nonpk2.getId1());\r\n-        assertEquals(3, nonpk2.getId2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalPartialManyMany() {\r\n-        verticalPartialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerVerticalPartialManyMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"partial2s\");\r\n-        verticalPartialManyMany(pm);\r\n-    }\r\n-\r\n-    private void verticalPartialManyMany(OpenJPAEntityManager pm) {\r\n-        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n-        Collection partials = nonpk3.getPartials();\r\n-        assertEquals(1, partials.size());\r\n-        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n-        assertEquals(1, partial.getPk1());\r\n-        assertEquals(2, partial.getPk2());\r\n-        Collection partial2s = nonpk3.getPartial2s();\r\n-        assertEquals(1, partial2s.size());\r\n-        PartialJoinPC2 partial2 = (PartialJoinPC2) partial2s.iterator().next();\r\n-        assertEquals(2, partial2.getPk1());\r\n-        assertEquals(3, partial2.getPk2());\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testVerticalConstant() {\r\n-        \r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n-        assertEquals(1, constant2.getPk1());\r\n-        assertEquals(2, constant2.getPk2());\r\n-        ConstantJoinPC3 constant3 = (ConstantJoinPC3) pm.getObjectId(_constant3);\r\n-        assertEquals(1, constant3.getPk1());\r\n-        assertEquals(3, constant3.getPk2());\r\n-    }\r\n-\r\n-    public void testConstantOneOne() {\r\n-        constantOneOne((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerConstantOneOne() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n-        constantOneOne(pm);\r\n-    }\r\n-\r\n-    private void constantOneOne(OpenJPAEntityManager pm) {\r\n-        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n-\r\n-        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK()));\r\n-        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK2()));\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testConstantOneMany() {\r\n-        constantOneMany((OpenJPAEntityManager)currentEntityManager());\r\n-    }\r\n-\r\n-    public void testEagerConstantOneMany() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n-        constantOneMany(pm);\r\n-    }\r\n-\r\n-    private void constantOneMany(OpenJPAEntityManager pm) {\r\n-        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n-\r\n-        Collection nonpks = constant2.getNonPKs();\r\n-        assertEquals(1, nonpks.size());\r\n-        assertEquals(_nonpk, pm.getObjectId\r\n-            (nonpks.iterator().next()));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestIrregularJoins.java\n+ *\n+ * Created on October 3, 2006, 12:47 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.jdbc.common.apps.NonPKJoinPC2;\n+\n+\n+\n+public class TestIrregularJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+\n+    private Object _nonpk = null;\n+    private Object _nonpk3 = null;\n+    private Object _partial = null;\n+    private Object _partial3 = null;\n+    private Object _constant2 = null;\n+    private Object _constant3 = null;\n+\n+    public TestIrregularJoins(String test) {\n+        super(test);\n+    }\n+    \n+    /** Creates a new instance of TestIrregularJoins */\n+    public TestIrregularJoins() {\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        // make sure these classes are registered since we're using metadata\n+        // values for the class indicator\n+        new ConstantJoinPC();\n+        new ConstantJoinPC2();\n+        new ConstantJoinPC3();\n+\n+       deleteAll(PartialJoinPC.class);\n+       deleteAll(NonPKJoinPC.class);\n+       deleteAll(ConstantJoinPC.class);\n+\n+        PartialJoinPC partial = new PartialJoinPC();\n+        partial.setPk1(1);\n+        partial.setPk2(2);\n+        PartialJoinPC2 partial2 = new PartialJoinPC2();\n+        partial2.setPk1(2);\n+        partial2.setPk2(3);\n+        PartialJoinPC3 partial3 = new PartialJoinPC3();\n+        partial3.setPk1(3);\n+        partial3.setPk2(4);\n+\n+        NonPKJoinPC nonpk = new NonPKJoinPC();\n+        nonpk.setId1(1);\n+        nonpk.setId2(2);\n+        NonPKJoinPC2 nonpk2 = new NonPKJoinPC2();\n+        nonpk2.setId1(2);\n+        nonpk2.setId2(3);\n+        NonPKJoinPC3 nonpk3 = new NonPKJoinPC3();\n+        nonpk3.setId1(3);\n+        nonpk3.setId2(4);\n+\n+        partial.setNonPK(nonpk);\n+        partial.getNonPKs().add(nonpk);\n+        nonpk.setPartial(partial);\n+        nonpk.getPartials().add(partial);\n+\n+        partial3.setNonPK(nonpk);\n+        partial3.setNonPK3(nonpk3);\n+        partial3.getNonPKs().add(nonpk);\n+        partial3.getNonPK2s().add(nonpk2);\n+        nonpk3.setPartial(partial);\n+        nonpk3.setPartial3(partial3);\n+        nonpk3.getPartials().add(partial);\n+        nonpk3.getPartial2s().add(partial2);\n+\n+        ConstantJoinPC2 constant2 = new ConstantJoinPC2();\n+        constant2.setPk1(1);\n+        constant2.setPk2(2);\n+        constant2.setNonPK(nonpk3);\n+        constant2.setNonPK2(nonpk3);\n+\n+        // set the object's inverse on diff objects so we can be sure\n+        // that its 1-many includes only the object with the right constant\n+        nonpk.setConstant(constant2);\n+        nonpk2.setConstant(constant2);\n+        nonpk3.setConstant(constant2);\n+\n+        ConstantJoinPC3 constant3 = new ConstantJoinPC3();\n+        constant3.setPk1(1);\n+        constant3.setPk2(3);\n+\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        \n+        pm.persist(partial);\n+        pm.persist(partial3);\n+        pm.persist(constant2);\n+        pm.persist(constant3);\n+        endTx(pm);\n+        _partial = pm.getObjectId(partial);\n+        _partial3 = pm.getObjectId(partial3);\n+        _nonpk = pm.getObjectId(nonpk);\n+        _nonpk3 = pm.getObjectId(nonpk3);\n+        _constant2 = pm.getObjectId(constant2);\n+        _constant3 = pm.getObjectId(constant3);\n+        pm.close();\n+    }\n+\n+    public void testNonPKOneOne() {\n+        \n+        nonPKOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerNonPKOneOne() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\n+        nonPKOneOne(pm);\n+    }\n+\n+    private void nonPKOneOne(OpenJPAEntityManager pm) {\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\n+        NonPKJoinPC nonpk = partial.getNonPK();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        pm.close();\n+    }\n+\n+    public void testPartialOneOne() {\n+        partialOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerPartialOneOne() {\n+        \n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partial\");\n+        partialOneOne(pm);\n+    }\n+\n+    private void partialOneOne(OpenJPAEntityManager pm) {\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\n+        PartialJoinPC partial = nonpk.getPartial();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalNonPKOneOne() {\n+        verticalNonPKOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalNonPKOneOne() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK3\");\n+        verticalNonPKOneOne(pm);\n+    }\n+\n+    private void verticalNonPKOneOne(OpenJPAEntityManager pm) {\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\n+        NonPKJoinPC nonpk = partial3.getNonPK();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        NonPKJoinPC3 nonpk3 = partial3.getNonPK3();\n+        assertEquals(3, nonpk3.getId1());\n+        assertEquals(4, nonpk3.getId2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalPartialOneOne() {\n+        verticalPartialOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalPartialOneOne() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partial3\");\n+        verticalPartialOneOne(pm);\n+    }\n+\n+    private void verticalPartialOneOne(OpenJPAEntityManager pm) {\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\n+        PartialJoinPC partial = nonpk3.getPartial();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        PartialJoinPC3 partial3 = nonpk3.getPartial3();\n+        assertEquals(3, partial3.getPk1());\n+        assertEquals(4, partial3.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testNonPKManyMany() {\n+        nonPKManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerNonPKManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\n+        nonPKManyMany(pm);\n+    }\n+\n+    private void nonPKManyMany(OpenJPAEntityManager pm) {\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\n+        Collection nonpks = partial.getNonPKs();\n+        assertEquals(1, nonpks.size());\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        pm.close();\n+    }\n+\n+    public void testPartialManyMany() {\n+        partialManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerPartialManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partials\");\n+        partialManyMany(pm);\n+    }\n+\n+    private void partialManyMany(OpenJPAEntityManager pm) {\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\n+        Collection partials = nonpk.getPartials();\n+        assertEquals(1, partials.size());\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalNonPKManyMany() {\n+        verticalNonPKManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalNonPKManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK2s\");\n+        verticalNonPKManyMany(pm);\n+    }\n+\n+    private void verticalNonPKManyMany(OpenJPAEntityManager pm) {\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\n+        Collection nonpks = partial3.getNonPKs();\n+        assertEquals(1, nonpks.size());\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\n+        assertEquals(1, nonpk.getId1());\n+        assertEquals(2, nonpk.getId2());\n+        Collection nonpk2s = partial3.getNonPK2s();\n+        assertEquals(1, nonpk2s.size());\n+        NonPKJoinPC2 nonpk2 = (NonPKJoinPC2) nonpk2s.iterator().next();\n+        assertEquals(2, nonpk2.getId1());\n+        assertEquals(3, nonpk2.getId2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalPartialManyMany() {\n+        verticalPartialManyMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerVerticalPartialManyMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"partial2s\");\n+        verticalPartialManyMany(pm);\n+    }\n+\n+    private void verticalPartialManyMany(OpenJPAEntityManager pm) {\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\n+        Collection partials = nonpk3.getPartials();\n+        assertEquals(1, partials.size());\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\n+        assertEquals(1, partial.getPk1());\n+        assertEquals(2, partial.getPk2());\n+        Collection partial2s = nonpk3.getPartial2s();\n+        assertEquals(1, partial2s.size());\n+        PartialJoinPC2 partial2 = (PartialJoinPC2) partial2s.iterator().next();\n+        assertEquals(2, partial2.getPk1());\n+        assertEquals(3, partial2.getPk2());\n+        pm.close();\n+    }\n+\n+    public void testVerticalConstant() {\n+        \n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\n+        assertEquals(1, constant2.getPk1());\n+        assertEquals(2, constant2.getPk2());\n+        ConstantJoinPC3 constant3 = (ConstantJoinPC3) pm.getObjectId(_constant3);\n+        assertEquals(1, constant3.getPk1());\n+        assertEquals(3, constant3.getPk2());\n+    }\n+\n+    public void testConstantOneOne() {\n+        constantOneOne((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerConstantOneOne() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\n+        constantOneOne(pm);\n+    }\n+\n+    private void constantOneOne(OpenJPAEntityManager pm) {\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\n+\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK()));\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK2()));\n+        pm.close();\n+    }\n+\n+    public void testConstantOneMany() {\n+        constantOneMany((OpenJPAEntityManager)currentEntityManager());\n+    }\n+\n+    public void testEagerConstantOneMany() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\n+        constantOneMany(pm);\n+    }\n+\n+    private void constantOneMany(OpenJPAEntityManager pm) {\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\n+\n+        Collection nonpks = constant2.getNonPKs();\n+        assertEquals(1, nonpks.size());\n+        assertEquals(_nonpk, pm.getObjectId\n+            (nonpks.iterator().next()));\n+        pm.close();\n+    }\n+    \n+    \n+    \n+}"},{"sha":"6cb687ae511534fb62b60417ce20afd4d04fc909","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * TestJDBCType.java\r\n- *\r\n- * Created on October 3, 2006, 4:11 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n-import org.apache.openjpa.jdbc.meta.RefreshStrategyInstaller;\r\n-import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\r\n-import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n-import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n-import org.apache.openjpa.jdbc.schema.Table;\r\n-import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-\r\n-public class TestJDBCType extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\t\r\n-    /** Creates a new instance of TestJDBCType */\r\n-    public TestJDBCType(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    /**\r\n-     * Tests that application identity classes are returned correctly.\r\n-     */\r\n-    public void testSchemaGeneration() {\r\n-        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n-        DBDictionary dict = conf.getDBDictionaryInstance();\r\n-        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n-        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\r\n-        ClassMapping mapping = repos.getMapping(Column.class, null, true);\r\n-\r\n-        Class cls;\r\n-        if (dict.getPreferredType(JavaSQLTypes.CLOB) ==  JavaSQLTypes.CLOB) {\r\n-            if (dict.maxEmbeddedClobSize > 0) {\r\n-                cls = mapping.getFieldMapping(\"toClob\").getStrategy().\r\n-                    getClass();\r\n-                assertTrue(cls.getName(),\r\n-                    MaxEmbeddedClobFieldStrategy.class.isAssignableFrom(cls));\r\n-            } else {\r\n-                cls = mapping.getFieldMapping(\"toClob\").getHandler().\r\n-                    getClass();\r\n-                assertTrue(cls.getName(),\r\n-                    ClobValueHandler.class.isAssignableFrom(cls));\r\n-            }\r\n-        } else\r\n-            assertTrue(mapping.getFieldMapping(\"toClob\").getStrategy()\r\n-                instanceof StringFieldStrategy);\r\n-\r\n-        cls = mapping.getFieldMapping(\"toBlob\").getHandler().getClass();\r\n-        assertTrue(cls.getName(),\r\n-            BlobValueHandler.class.isAssignableFrom(cls));\r\n-\r\n-        SchemaGroup schema = repos.getSchemaGroup();\r\n-        Table table = schema.getSchemas()[0].getTables()[0];\r\n-        Column[] cols = table.getColumns();\r\n-        for (int i = 0; i < cols.length; i++) {\r\n-            if (cols[i].getName().equalsIgnoreCase(\"id\")\r\n-                || cols[i].getName().equalsIgnoreCase(\"versn\")\r\n-                || cols[i].getName().equalsIgnoreCase(\"typ\"))\r\n-                continue;\r\n-            if (\"longToInt\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(dict.getPreferredType(JavaSQLTypes.INT),\r\n-                    cols[i].getType());\r\n-            else if (\"longToSQL\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(\"varchar\", cols[i].getTypeName());\r\n-            else if (\"toClob\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(dict.getPreferredType(JavaSQLTypes.CLOB),\r\n-                    cols[i].getType());\r\n-            else if (\"toBlob\".equalsIgnoreCase(cols[i].getName()))\r\n-                assertEquals(dict.getPreferredType(JavaSQLTypes.BLOB),\r\n-                    cols[i].getType());\r\n-            else\r\n-                fail(\"Unknown column:\" + cols[i].getName());\r\n-        }\r\n-    }    \r\n-}\r\n+/*\n+ * TestJDBCType.java\n+ *\n+ * Created on October 3, 2006, 4:11 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\n+import org.apache.openjpa.jdbc.meta.RefreshStrategyInstaller;\n+import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.schema.Column;\n+\n+public class TestJDBCType extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\t\n+    /** Creates a new instance of TestJDBCType */\n+    public TestJDBCType(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    /**\n+     * Tests that application identity classes are returned correctly.\n+     */\n+    public void testSchemaGeneration() {\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\n+        DBDictionary dict = conf.getDBDictionaryInstance();\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\n+        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\n+        ClassMapping mapping = repos.getMapping(Column.class, null, true);\n+\n+        Class cls;\n+        if (dict.getPreferredType(JavaSQLTypes.CLOB) ==  JavaSQLTypes.CLOB) {\n+            if (dict.maxEmbeddedClobSize > 0) {\n+                cls = mapping.getFieldMapping(\"toClob\").getStrategy().\n+                    getClass();\n+                assertTrue(cls.getName(),\n+                    MaxEmbeddedClobFieldStrategy.class.isAssignableFrom(cls));\n+            } else {\n+                cls = mapping.getFieldMapping(\"toClob\").getHandler().\n+                    getClass();\n+                assertTrue(cls.getName(),\n+                    ClobValueHandler.class.isAssignableFrom(cls));\n+            }\n+        } else\n+            assertTrue(mapping.getFieldMapping(\"toClob\").getStrategy()\n+                instanceof StringFieldStrategy);\n+\n+        cls = mapping.getFieldMapping(\"toBlob\").getHandler().getClass();\n+        assertTrue(cls.getName(),\n+            BlobValueHandler.class.isAssignableFrom(cls));\n+\n+        SchemaGroup schema = repos.getSchemaGroup();\n+        Table table = schema.getSchemas()[0].getTables()[0];\n+        Column[] cols = table.getColumns();\n+        for (int i = 0; i < cols.length; i++) {\n+            if (cols[i].getName().equalsIgnoreCase(\"id\")\n+                || cols[i].getName().equalsIgnoreCase(\"versn\")\n+                || cols[i].getName().equalsIgnoreCase(\"typ\"))\n+                continue;\n+            if (\"longToInt\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.INT),\n+                    cols[i].getType());\n+            else if (\"longToSQL\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(\"varchar\", cols[i].getTypeName());\n+            else if (\"toClob\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.CLOB),\n+                    cols[i].getType());\n+            else if (\"toBlob\".equalsIgnoreCase(cols[i].getName()))\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.BLOB),\n+                    cols[i].getType());\n+            else\n+                fail(\"Unknown column:\" + cols[i].getName());\n+        }\n+    }    \n+}"},{"sha":"1cdd1607a6e0bf7351d4548b10b73f00db093831","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,118 +1,118 @@\n-/*\r\n- * TestJoinToBaseClass.java\r\n- *\r\n- * Created on October 3, 2006, 4:19 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.schema.Column;\r\n-import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n-import org.apache.openjpa.jdbc.schema.Table;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestJoinToBaseClass extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-    \r\n-    \r\n-    /** Creates a new instance of TestJoinToBaseClass */\r\n-    public TestJoinToBaseClass(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public void testMapping() {\r\n-        ClassMapping mapping = ((JDBCConfiguration) getConfiguration()).\r\n-            getMappingRepositoryInstance().\r\n-            getMapping(MappingTest5.class, null, true);\r\n-\r\n-        Table supTable = mapping.getPCSuperclassMapping().getTable();\r\n-        assertTrue(mapping.getTable() != supTable);\r\n-        FieldMapping field = mapping.getFieldMapping(\"vertRel\");\r\n-        ForeignKey fk = field.getForeignKey();\r\n-        assertEquals(mapping.getTable(), fk.getTable());\r\n-        assertEquals(supTable, fk.getPrimaryKeyTable());\r\n-        Column[] cols = field.getColumns();\r\n-        assertEquals(2, cols.length);\r\n-        assertEquals(\"V1\", cols[0].getName());\r\n-        assertEquals(\"V2\", cols[1].getName());\r\n-    }\r\n-\r\n-    public void testConstraintAnalysis() {\r\n-        //FIXME jthomas\r\n-        //PersistenceManagerFactory factory = getPMFactory(new String[]{\r\n-          //  \"openjpa.jdbc.SchemaFactory\", \"native(ForeignKeys=true)\",\r\n-        //});\r\n-        OpenJPAEntityManagerFactory factory=null;\r\n-        OpenJPAEntityManager pm = factory.createEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-       deleteAll( MappingTest1.class,pm);\r\n-       deleteAll( MappingTest2.class,pm);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        pm = factory.createEntityManager();\r\n-        startTx(pm);\r\n-        for (int i = 0; i < 10; i++) {\r\n-            MappingTest5 pc1 = new MappingTest5();\r\n-            pc1.setPk1(i);\r\n-            pc1.setPk2(i + 1);\r\n-            MappingTest5 pc2 = new MappingTest5();\r\n-            pc2.setPk1(i + 10);\r\n-            pc2.setPk2(i + 11);\r\n-            pc1.setVertRel(pc2);\r\n-            pc2.setVertRel(pc1);\r\n-            pm.persist(pc1);\r\n-        }\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        assertSizes(20, MappingTest5.class);\r\n-\r\n-        pm = factory.createEntityManager();\r\n-        startTx(pm);\r\n-        deleteAll(MappingTest2.class,pm);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-    }\r\n-\r\n-    private void assertSizes(int size, Class cls) {\r\n-        assertSize(size, currentEntityManager().createExtent(cls, true).list());\r\n-    }\r\n-}\r\n+/*\n+ * TestJoinToBaseClass.java\n+ *\n+ * Created on October 3, 2006, 4:19 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n+import org.apache.openjpa.jdbc.schema.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestJoinToBaseClass extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+    \n+    \n+    /** Creates a new instance of TestJoinToBaseClass */\n+    public TestJoinToBaseClass(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public void testMapping() {\n+        ClassMapping mapping = ((JDBCConfiguration) getConfiguration()).\n+            getMappingRepositoryInstance().\n+            getMapping(MappingTest5.class, null, true);\n+\n+        Table supTable = mapping.getPCSuperclassMapping().getTable();\n+        assertTrue(mapping.getTable() != supTable);\n+        FieldMapping field = mapping.getFieldMapping(\"vertRel\");\n+        ForeignKey fk = field.getForeignKey();\n+        assertEquals(mapping.getTable(), fk.getTable());\n+        assertEquals(supTable, fk.getPrimaryKeyTable());\n+        Column[] cols = field.getColumns();\n+        assertEquals(2, cols.length);\n+        assertEquals(\"V1\", cols[0].getName());\n+        assertEquals(\"V2\", cols[1].getName());\n+    }\n+\n+    public void testConstraintAnalysis() {\n+        //FIXME jthomas\n+        //PersistenceManagerFactory factory = getPMFactory(new String[]{\n+          //  \"openjpa.jdbc.SchemaFactory\", \"native(ForeignKeys=true)\",\n+        //});\n+        OpenJPAEntityManagerFactory factory=null;\n+        OpenJPAEntityManager pm = factory.createEntityManager();\n+        startTx(pm);\n+        \n+       deleteAll( MappingTest1.class,pm);\n+       deleteAll( MappingTest2.class,pm);\n+        endTx(pm);\n+        pm.close();\n+\n+        pm = factory.createEntityManager();\n+        startTx(pm);\n+        for (int i = 0; i < 10; i++) {\n+            MappingTest5 pc1 = new MappingTest5();\n+            pc1.setPk1(i);\n+            pc1.setPk2(i + 1);\n+            MappingTest5 pc2 = new MappingTest5();\n+            pc2.setPk1(i + 10);\n+            pc2.setPk2(i + 11);\n+            pc1.setVertRel(pc2);\n+            pc2.setVertRel(pc1);\n+            pm.persist(pc1);\n+        }\n+        endTx(pm);\n+        pm.close();\n+\n+        assertSizes(20, MappingTest5.class);\n+\n+        pm = factory.createEntityManager();\n+        startTx(pm);\n+        deleteAll(MappingTest2.class,pm);\n+        endTx(pm);\n+        pm.close();\n+    }\n+\n+    private void assertSizes(int size, Class cls) {\n+        assertSize(size, currentEntityManager().createExtent(cls, true).list());\n+    }\n+}"},{"sha":"84f2e672db31aa5a3fa3e736e67020798f90882c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","status":"modified","additions":601,"deletions":601,"changes":1202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,601 +1,601 @@\n-/*\r\n- * TestLRSProxies.java\r\n- *\r\n- * Created on October 3, 2006, 5:01 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestLRSProxies extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-   \r\n-    private Object _oid = null;\r\n-    private Object _coid = null;\r\n-    \r\n-    public TestLRSProxies(String casename) {\r\n-        super(casename);\r\n-    }\r\n-    \r\n-    \r\n-    /** Creates a new instance of TestLRSProxies */\r\n-    public TestLRSProxies() {\r\n-    }\r\n-    public void setUp() {\r\n-       deleteAll(LRSPC.class);\r\n-       deleteAll(LRSCompoundPC.class);\r\n-        \r\n-        LRSPC pc = new LRSPC(\"main\");\r\n-        \r\n-        pc.getStringSet().add(\"val1\");\r\n-        pc.getStringSet().add(\"val2\");\r\n-        pc.getStringSet().add(\"val3\");\r\n-        \r\n-        pc.getRelSet().add(new LRSPC(\"set1\"));\r\n-        pc.getRelSet().add(new LRSPC(\"set2\"));\r\n-        pc.getRelSet().add(new LRSPC(\"set3\"));\r\n-        \r\n-        pc.getStringCollection().add(\"val1\");\r\n-        pc.getStringCollection().add(\"val2\");\r\n-        pc.getStringCollection().add(\"val3\");\r\n-        \r\n-        pc.getRelCollection().add(new LRSPC(\"set1\"));\r\n-        pc.getRelCollection().add(new LRSPC(\"set2\"));\r\n-        pc.getRelCollection().add(new LRSPC(\"set3\"));\r\n-        \r\n-        pc.getStringMap().put(\"key1\", \"1\");\r\n-        pc.getStringMap().put(\"key2\", \"2\");\r\n-        pc.getStringMap().put(\"key3\", \"3\");\r\n-        \r\n-        pc.getRelMap().put(\"key1\", new LRSPC(\"map1\"));\r\n-        pc.getRelMap().put(\"key2\", new LRSPC(\"map2\"));\r\n-        pc.getRelMap().put(\"key3\", new LRSPC(\"map3\"));\r\n-        \r\n-        LRSCompoundPC cpc = new LRSCompoundPC(\"main\");\r\n-        \r\n-        cpc.getStringSet().add(\"val1\");\r\n-        cpc.getStringSet().add(\"val2\");\r\n-        cpc.getStringSet().add(\"val3\");\r\n-        \r\n-        cpc.getRelSet().add(new LRSCompoundPC(\"set1\"));\r\n-        cpc.getRelSet().add(new LRSCompoundPC(\"set2\"));\r\n-        cpc.getRelSet().add(new LRSCompoundPC(\"set3\"));\r\n-        \r\n-        cpc.getStringCollection().add(\"val1\");\r\n-        cpc.getStringCollection().add(\"val2\");\r\n-        cpc.getStringCollection().add(\"val3\");\r\n-        \r\n-        cpc.getRelCollection().add(new LRSCompoundPC(\"set1\"));\r\n-        cpc.getRelCollection().add(new LRSCompoundPC(\"set2\"));\r\n-        cpc.getRelCollection().add(new LRSCompoundPC(\"set3\"));\r\n-        \r\n-        cpc.getStringMap().put(\"key1\", \"1\");\r\n-        cpc.getStringMap().put(\"key2\", \"2\");\r\n-        cpc.getStringMap().put(\"key3\", \"3\");\r\n-        \r\n-        cpc.getRelMap().put(\"key1\", new LRSCompoundPC(\"map1\"));\r\n-        cpc.getRelMap().put(\"key2\", new LRSCompoundPC(\"map2\"));\r\n-        cpc.getRelMap().put(\"key3\", new LRSCompoundPC(\"map3\"));\r\n-        \r\n-        \r\n-        \r\n-        OpenJPAEntityManager pm = getEm(false, false);\r\n-        \r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(cpc);\r\n-        endTx(pm);\r\n-        _oid = pm.getObjectId(pc);\r\n-        _coid = pm.getObjectId(cpc);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testStringSet() {\r\n-        stringCollectionTest(_oid, true, true);\r\n-        stringCollectionTest(_coid, true, true);\r\n-    }\r\n-    \r\n-    public void testStringSetRetain() {\r\n-        stringCollectionTest(_oid, false, true);\r\n-        stringCollectionTest(_coid, false, true);\r\n-    }\r\n-    \r\n-    public void testStringCollection() {\r\n-        stringCollectionTest(_oid, true, false);\r\n-        stringCollectionTest(_coid, true, false);\r\n-    }\r\n-    \r\n-    public void testStringCollectionRetain() {\r\n-        stringCollectionTest(_oid, false, false);\r\n-        stringCollectionTest(_coid, false, false);\r\n-    }\r\n-    \r\n-    private void stringCollectionTest(Object oid, boolean close,\r\n-            boolean isSet) {\r\n-        //FIXME jthomas\r\n-        //PersistenceManager pm = getPM(!close, !close);\r\n-        OpenJPAEntityManager pm =null;\r\n-        startTx(pm);\r\n-        \r\n-        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        \r\n-        // check that orig values are correct\r\n-        Collection set = isSet ? pc.getStringSet() : pc.getStringCollection();\r\n-        assertEquals(3, set.size());\r\n-        assertTrue(set.contains(\"val1\"));\r\n-        assertTrue(set.contains(\"val2\"));\r\n-        assertTrue(set.contains(\"val3\"));\r\n-        if (!isSet) {\r\n-            Iterator itr = set.iterator();\r\n-            assertEquals(\"val1\", itr.next());\r\n-            assertEquals(\"val2\", itr.next());\r\n-            assertEquals(\"val3\", itr.next());\r\n-            //FIXME jthomas\r\n-            //KodoJDOHelper.close(itr);\r\n-        }\r\n-        \r\n-        // do some mods to try to confuse the proxy\r\n-        set.remove(\"val1\");\r\n-        set.remove(\"val1\");\r\n-        set.add(\"val4\");\r\n-        set.remove(\"val4\");\r\n-        set.add(\"val5\");\r\n-        set.add(\"val6\");\r\n-        assertStringCollectionChanged(set, isSet);\r\n-        endTx(pm);\r\n-        if (close) {\r\n-            pm.close();\r\n-            pm = getEm(false, false);\r\n-        }\r\n-        \r\n-        // re-retrieve and check set\r\n-        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        set = isSet ? pc.getStringSet() : pc.getStringCollection();\r\n-        assertStringCollectionChanged(set, isSet);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void assertStringCollectionChanged(Collection set, boolean isSet) {\r\n-        assertEquals(4, set.size());\r\n-        assertTrue(!set.contains(\"val1\"));\r\n-        assertTrue(set.contains(\"val2\"));\r\n-        assertTrue(set.contains(\"val3\"));\r\n-        assertTrue(!set.contains(\"val4\"));\r\n-        assertTrue(set.contains(\"val5\"));\r\n-        assertTrue(set.contains(\"val6\"));\r\n-        if (!isSet) {\r\n-            Iterator itr = set.iterator();\r\n-            assertEquals(\"val2\", itr.next());\r\n-            assertEquals(\"val3\", itr.next());\r\n-            assertEquals(\"val5\", itr.next());\r\n-            assertEquals(\"val6\", itr.next());\r\n-            assertTrue(!itr.hasNext());\r\n-            //FIXME jthomas\r\n-            //KodoJDOHelper.close(itr);\r\n-        }\r\n-    }\r\n-    \r\n-    public void testStringMap() {\r\n-        stringMapTest(_oid, true);\r\n-        stringMapTest(_coid, true);\r\n-    }\r\n-    \r\n-    public void testStringMapRetain() {\r\n-        stringMapTest(_oid, false);\r\n-        stringMapTest(_coid, false);\r\n-    }\r\n-    \r\n-    private void stringMapTest(Object oid, boolean close) {\r\n-        OpenJPAEntityManager pm = getEm(!close, !close);\r\n-        startTx(pm);\r\n-        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        \r\n-        // check that orig values are correct\r\n-        Map map = pc.getStringMap();\r\n-        assertEquals(3, map.size());\r\n-        assertEquals(\"1\", map.get(\"key1\"));\r\n-        assertEquals(\"2\", map.get(\"key2\"));\r\n-        assertEquals(\"3\", map.get(\"key3\"));\r\n-        \r\n-        // do some mods to try to confuse the proxy\r\n-        map.put(\"key1\", \"1a\");\r\n-        map.put(\"key1\", \"1b\");\r\n-        map.put(\"key2\", \"4\");\r\n-        map.remove(\"key2\");\r\n-        map.remove(\"foo\");\r\n-        map.put(\"key5\", \"5\");\r\n-        assertStringMapChanged(map);\r\n-        endTx(pm);\r\n-        \r\n-        if (close) {\r\n-            pm.close();\r\n-            pm = getEm(false, false);\r\n-        }\r\n-        \r\n-        // re-retrieve and check map\r\n-        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        map = pc.getStringMap();\r\n-        assertStringMapChanged(map);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void assertStringMapChanged(Map map) {\r\n-        assertEquals(3, map.size());\r\n-        assertEquals(\"1b\", map.get(\"key1\"));\r\n-        assertEquals(\"3\", map.get(\"key3\"));\r\n-        assertEquals(\"5\", map.get(\"key5\"));\r\n-        assertNull(map.get(\"key2\"));\r\n-        assertTrue(map.containsKey(\"key1\"));\r\n-        assertFalse(map.containsKey(\"key2\"));\r\n-        assertTrue(map.containsValue(\"5\"));\r\n-        assertFalse(map.containsValue(\"1\"));\r\n-        \r\n-        Iterator itr = map.entrySet().iterator();\r\n-        Map.Entry entry;\r\n-        int count = 0;\r\n-        for (; itr.hasNext(); count++) {\r\n-            entry = (Map.Entry) itr.next();\r\n-            if (entry.getKey().equals(\"key1\"))\r\n-                assertEquals(\"1b\", entry.getValue());\r\n-            else if (entry.getKey().equals(\"key3\"))\r\n-                assertEquals(\"3\", entry.getValue());\r\n-            else if (entry.getKey().equals(\"key5\"))\r\n-                assertEquals(\"5\", entry.getValue());\r\n-            else\r\n-                fail(\"Bad key: \" + entry.getKey());\r\n-        }\r\n-        assertEquals(3, count);\r\n-        //FIXME\r\n-        //KodoJDOHelper.close(itr);\r\n-    }\r\n-    \r\n-    public void testRelSet() {\r\n-        relCollectionTest(_oid, true, true);\r\n-        relCollectionTest(_coid, true, true);\r\n-    }\r\n-    \r\n-    public void testRelSetRetain() {\r\n-        relCollectionTest(_oid, false, true);\r\n-        relCollectionTest(_coid, false, true);\r\n-    }\r\n-    \r\n-    public void testRelCollection() {\r\n-        relCollectionTest(_oid, true, false);\r\n-        relCollectionTest(_coid, true, false);\r\n-    }\r\n-    \r\n-    public void testRelCollectionRetain() {\r\n-        relCollectionTest(_oid, false, false);\r\n-        relCollectionTest(_coid, false, false);\r\n-    }\r\n-    \r\n-    private void relCollectionTest(Object oid, boolean close, boolean isSet) {\r\n-        OpenJPAEntityManager pm = getEm(!close, !close);\r\n-        startTx(pm);\r\n-        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        \r\n-        // check that orig values are correct\r\n-        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\r\n-        assertEquals(3, set.size());\r\n-        Collection ordered = new TreeSet();\r\n-        Iterator itr = set.iterator();\r\n-        ordered.add(itr.next());\r\n-        ordered.add(itr.next());\r\n-        ordered.add(itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-        //FIXME\r\n-        //KodoJDOHelper.close(itr);\r\n-        itr = ordered.iterator();\r\n-        LRSPCIntf set1 = (LRSPCIntf) itr.next();\r\n-        if (!isSet) {\r\n-            LRSPCIntf set2 = (LRSPCIntf) itr.next();\r\n-            LRSPCIntf set3 = (LRSPCIntf) itr.next();\r\n-            assertEquals(\"set1\", set1.getStringField());\r\n-            assertEquals(\"set2\", set2.getStringField());\r\n-            assertEquals(\"set3\", set3.getStringField());\r\n-        }\r\n-        assertTrue(set.contains(set1));\r\n-        assertFalse(set.contains(pc));\r\n-        \r\n-        // do some mods to try to confuse the proxy\r\n-        set.remove(set1);\r\n-        set.remove(set1);\r\n-        LRSPCIntf set4 = pc.newInstance(\"set4\");\r\n-        set.add(set4);\r\n-        set.remove(set4);\r\n-        LRSPCIntf set5 = pc.newInstance(\"set5\");\r\n-        set.add(set5);\r\n-        assertRelCollectionChanged(pc, isSet);\r\n-        endTx(pm);\r\n-        \r\n-        if (close) {\r\n-            pm.close();\r\n-            pm = getEm(false, false);\r\n-        }\r\n-        \r\n-        // re-retrieve and check set\r\n-        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        assertRelCollectionChanged(pc, isSet);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void assertRelCollectionChanged(LRSPCIntf pc, boolean isSet) {\r\n-        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\r\n-        assertEquals(3, set.size());\r\n-        Collection ordered = new TreeSet();\r\n-        Iterator itr = set.iterator();\r\n-        ordered.add(itr.next());\r\n-        ordered.add(itr.next());\r\n-        ordered.add(itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-        //FIXME\r\n-        //KodoJDOHelper.close(itr);\r\n-        itr = ordered.iterator();\r\n-        LRSPCIntf set2 = (LRSPCIntf) itr.next();\r\n-        if (!isSet) {\r\n-            LRSPCIntf set3 = (LRSPCIntf) itr.next();\r\n-            LRSPCIntf set5 = (LRSPCIntf) itr.next();\r\n-            assertEquals(\"set2\", set2.getStringField());\r\n-            assertEquals(\"set3\", set3.getStringField());\r\n-            assertEquals(\"set5\", set5.getStringField());\r\n-        }\r\n-        assertTrue(set.contains(set2));\r\n-        assertFalse(set.contains(pc));\r\n-    }\r\n-    \r\n-    public void testRelMap() {\r\n-        relMapTest(_oid, true);\r\n-        relMapTest(_coid, true);\r\n-    }\r\n-    \r\n-    public void testRelMapRetain() {\r\n-        relMapTest(_oid, false);\r\n-        relMapTest(_coid, false);\r\n-    }\r\n-    \r\n-    private void relMapTest(Object oid, boolean close) {\r\n-        OpenJPAEntityManager pm = getEm(!close, !close);\r\n-        startTx(pm);\r\n-        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        \r\n-        // check that orig values are correct\r\n-        Map map = pc.getRelMap();\r\n-        assertEquals(3, map.size());\r\n-        LRSPCIntf map1 = (LRSPCIntf) map.get(\"key1\");\r\n-        LRSPCIntf map2 = (LRSPCIntf) map.get(\"key2\");\r\n-        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\r\n-        assertEquals(\"map1\", map1.getStringField());\r\n-        assertEquals(\"map2\", map2.getStringField());\r\n-        assertEquals(\"map3\", map3.getStringField());\r\n-        assertTrue(map.containsKey(\"key1\"));\r\n-        assertFalse(map.containsKey(\"key4\"));\r\n-        assertTrue(map.containsValue(map1));\r\n-        assertFalse(map.containsValue(pc));\r\n-        \r\n-        // do some mods to try to confuse the proxy\r\n-        LRSPCIntf map1a = pc.newInstance(\"map1a\");\r\n-        map.put(\"key1\", map1a);\r\n-        LRSPCIntf map1b = pc.newInstance(\"map1b\");\r\n-        map.put(\"key1\", map1b);\r\n-        map.remove(\"key2\");\r\n-        map.put(\"key4\", pc.newInstance(\"map4\"));\r\n-        map.remove(\"key4\");\r\n-        map.remove(\"foo\");\r\n-        map.put(\"key5\", pc.newInstance(\"map5\"));\r\n-        assertRelMapChanged(pc);\r\n-        endTx(pm);\r\n-        \r\n-        if (close) {\r\n-            pm.close();\r\n-            pm = getEm(false, false);\r\n-        }\r\n-        \r\n-        // re-retrieve and check map\r\n-        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n-        assertRelMapChanged(pc);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void assertRelMapChanged(LRSPCIntf pc) {\r\n-        Map map = pc.getRelMap();\r\n-        assertEquals(3, map.size());\r\n-        LRSPCIntf map1b = (LRSPCIntf) map.get(\"key1\");\r\n-        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\r\n-        LRSPCIntf map5 = (LRSPCIntf) map.get(\"key5\");\r\n-        assertEquals(\"map1b\", map1b.getStringField());\r\n-        assertEquals(\"map3\", map3.getStringField());\r\n-        assertEquals(\"map5\", map5.getStringField());\r\n-        assertTrue(map.containsKey(\"key1\"));\r\n-        assertFalse(map.containsKey(\"key2\"));\r\n-        assertTrue(map.containsValue(map1b));\r\n-        assertFalse(map.containsValue(pc));\r\n-        \r\n-        Iterator itr = map.entrySet().iterator();\r\n-        Map.Entry entry;\r\n-        int count = 0;\r\n-        for (; itr.hasNext(); count++) {\r\n-            entry = (Map.Entry) itr.next();\r\n-            if (entry.getKey().equals(\"key1\"))\r\n-                assertEquals(map1b, entry.getValue());\r\n-            else if (entry.getKey().equals(\"key3\"))\r\n-                assertEquals(map3, entry.getValue());\r\n-            else if (entry.getKey().equals(\"key5\"))\r\n-                assertEquals(map5, entry.getValue());\r\n-            else\r\n-                fail(\"Bad key: \" + entry.getKey());\r\n-        }\r\n-        assertEquals(3, count);\r\n-        //FIXME\r\n-        //KodoJDOHelper.close(itr);\r\n-    }\r\n-    \r\n-    public void testTransfer() {\r\n-        // cannot transfer an lrs from one field to another\r\n-        \r\n-        OpenJPAEntityManager pm = getEm(true, true);\r\n-        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n-        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n-        assertNotNull(map1);\r\n-        \r\n-        startTx(pm);\r\n-        Map map = pc.getRelMap();\r\n-        pc.setRelMap(null);\r\n-        map1.setRelMap(map);\r\n-        \r\n-        try {\r\n-            endTx(pm);\r\n-            fail(\"Allowed transfer of lrs field\");\r\n-        } catch (Exception jue) {\r\n-        }\r\n-        if (pm.getTransaction().isActive())\r\n-            pm.getTransaction().rollback();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testShare() {\r\n-        OpenJPAEntityManager pm = getEm(true, true);\r\n-        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n-        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n-        assertNotNull(map1);\r\n-        \r\n-        startTx(pm);\r\n-        Map map = pc.getRelMap();\r\n-        map1.setRelMap(map);\r\n-        endTx(pm);\r\n-        assertTrue(pc.getRelMap() != map1.getRelMap());\r\n-        assertEquals(3, map1.getRelMap().size());\r\n-        assertTrue(map1.getRelMap().containsValue(map1));\r\n-        pm.close();\r\n-        \r\n-        // make sure it sticks\r\n-        pm = getEm(true, true);\r\n-        pc = (LRSPC) pm.getObjectId(_oid);\r\n-        map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n-        assertEquals(map1, map1.getRelMap().get(\"key1\"));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testRollback() {\r\n-        //FIXME\r\n-        //PersistenceManagerFactory factory = getPMFactory(new String[]{\r\n-        //    \"openjpa.RestoreMutableValues\", \"true\",\r\n-        //});\r\n-        OpenJPAEntityManagerFactory factory =null;\r\n-        OpenJPAEntityManager pm = factory.createEntityManager();\r\n-        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n-        startTx(pm);\r\n-        pc.getStringCollection().remove(\"val2\");\r\n-        pc.getStringCollection().add(\"val4\");\r\n-        rollbackTx(pm);\r\n-        assertTrue(pc.getStringCollection().contains(\"val2\"));\r\n-        assertFalse(pc.getStringCollection().contains(\"val4\"));\r\n-        pm.close();\r\n-        factory.close();\r\n-    }\r\n-    \r\n-    public void testReplace() {\r\n-        OpenJPAEntityManager pm = getEm(false, false);\r\n-        startTx(pm);\r\n-        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n-        \r\n-        // totally replace set\r\n-        Collection set = new HashSet();\r\n-        set.add(\"new\");\r\n-        pc.setStringCollection(set);\r\n-        \r\n-        endTx(pm);\r\n-        pm.close();\r\n-        \r\n-        // re-retrieve and check set\r\n-        pm = getEm(false, false);\r\n-        pc = (LRSPC) pm.getObjectId(_oid);\r\n-        \r\n-        set = pc.getStringCollection();\r\n-        assertEquals(1, set.size());\r\n-        assertTrue(set.contains(\"new\"));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testAdd()\r\n-    throws Exception {\r\n-/*\r\n-        //FIXME\r\n-        //KodoPersistenceManagerFactory pmf = getPMFactory(new String []{\r\n-        //    \"openjpa.jdbc.JDBCListeners\", Listener.class.getName(),\r\n-        //});\r\n-        OpenJPAEntityManagerFactory pmf =null;\r\n-        JDBCConfiguration conf = (JDBCConfiguration) pmf.getConfiguration();\r\n-        //FIXME need to fix inner class\r\n-        //Listener l = (Listener) conf.getJDBCListenerInstances()[0];\r\n-        OpenJPAEntityManager pm = pmf.createEntityManager();\r\n-        try {\r\n-            startTx(pm);\r\n-            LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n-            l.count = 0;\r\n-            pc.getStringCollection().add(\"testAddStringValue\");\r\n-            endTx(pm);\r\n-            assertEquals(3, l.count);\r\n-        } catch (Exception e) {\r\n-            if (pm.getTransaction().isActive())\r\n-                pm.getTransaction().rollback();\r\n-            throw e;\r\n-        } finally {\r\n-            pm.close();\r\n-        }\r\n- */\r\n-    }\r\n-    \r\n-    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\r\n-        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-        em.setNontransactionalRead(true);\r\n-        em.setRetainState(retainValues);\r\n-        em.setOptimistic(optimistic);\r\n-        return em;\r\n-    }\r\n-    \r\n-    //FIXME - could not find AbstractJDBCListener because of package imports in source file\r\n-/*\r\n-    public static class Listener extends AbstractJDBCListener {\r\n- \r\n-        public int count = 0;\r\n- \r\n-        public void afterExecuteStatement(JDBCEvent ev) {\r\n-            count++;\r\n-        }\r\n-    }\r\n- */\r\n-}\r\n+/*\n+ * TestLRSProxies.java\n+ *\n+ * Created on October 3, 2006, 5:01 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestLRSProxies extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+   \n+    private Object _oid = null;\n+    private Object _coid = null;\n+    \n+    public TestLRSProxies(String casename) {\n+        super(casename);\n+    }\n+    \n+    \n+    /** Creates a new instance of TestLRSProxies */\n+    public TestLRSProxies() {\n+    }\n+    public void setUp() {\n+       deleteAll(LRSPC.class);\n+       deleteAll(LRSCompoundPC.class);\n+        \n+        LRSPC pc = new LRSPC(\"main\");\n+        \n+        pc.getStringSet().add(\"val1\");\n+        pc.getStringSet().add(\"val2\");\n+        pc.getStringSet().add(\"val3\");\n+        \n+        pc.getRelSet().add(new LRSPC(\"set1\"));\n+        pc.getRelSet().add(new LRSPC(\"set2\"));\n+        pc.getRelSet().add(new LRSPC(\"set3\"));\n+        \n+        pc.getStringCollection().add(\"val1\");\n+        pc.getStringCollection().add(\"val2\");\n+        pc.getStringCollection().add(\"val3\");\n+        \n+        pc.getRelCollection().add(new LRSPC(\"set1\"));\n+        pc.getRelCollection().add(new LRSPC(\"set2\"));\n+        pc.getRelCollection().add(new LRSPC(\"set3\"));\n+        \n+        pc.getStringMap().put(\"key1\", \"1\");\n+        pc.getStringMap().put(\"key2\", \"2\");\n+        pc.getStringMap().put(\"key3\", \"3\");\n+        \n+        pc.getRelMap().put(\"key1\", new LRSPC(\"map1\"));\n+        pc.getRelMap().put(\"key2\", new LRSPC(\"map2\"));\n+        pc.getRelMap().put(\"key3\", new LRSPC(\"map3\"));\n+        \n+        LRSCompoundPC cpc = new LRSCompoundPC(\"main\");\n+        \n+        cpc.getStringSet().add(\"val1\");\n+        cpc.getStringSet().add(\"val2\");\n+        cpc.getStringSet().add(\"val3\");\n+        \n+        cpc.getRelSet().add(new LRSCompoundPC(\"set1\"));\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set2\"));\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set3\"));\n+        \n+        cpc.getStringCollection().add(\"val1\");\n+        cpc.getStringCollection().add(\"val2\");\n+        cpc.getStringCollection().add(\"val3\");\n+        \n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set1\"));\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set2\"));\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set3\"));\n+        \n+        cpc.getStringMap().put(\"key1\", \"1\");\n+        cpc.getStringMap().put(\"key2\", \"2\");\n+        cpc.getStringMap().put(\"key3\", \"3\");\n+        \n+        cpc.getRelMap().put(\"key1\", new LRSCompoundPC(\"map1\"));\n+        cpc.getRelMap().put(\"key2\", new LRSCompoundPC(\"map2\"));\n+        cpc.getRelMap().put(\"key3\", new LRSCompoundPC(\"map3\"));\n+        \n+        \n+        \n+        OpenJPAEntityManager pm = getEm(false, false);\n+        \n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(cpc);\n+        endTx(pm);\n+        _oid = pm.getObjectId(pc);\n+        _coid = pm.getObjectId(cpc);\n+        pm.close();\n+    }\n+    \n+    public void testStringSet() {\n+        stringCollectionTest(_oid, true, true);\n+        stringCollectionTest(_coid, true, true);\n+    }\n+    \n+    public void testStringSetRetain() {\n+        stringCollectionTest(_oid, false, true);\n+        stringCollectionTest(_coid, false, true);\n+    }\n+    \n+    public void testStringCollection() {\n+        stringCollectionTest(_oid, true, false);\n+        stringCollectionTest(_coid, true, false);\n+    }\n+    \n+    public void testStringCollectionRetain() {\n+        stringCollectionTest(_oid, false, false);\n+        stringCollectionTest(_coid, false, false);\n+    }\n+    \n+    private void stringCollectionTest(Object oid, boolean close,\n+            boolean isSet) {\n+        //FIXME jthomas\n+        //PersistenceManager pm = getPM(!close, !close);\n+        OpenJPAEntityManager pm =null;\n+        startTx(pm);\n+        \n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\n+        \n+        // check that orig values are correct\n+        Collection set = isSet ? pc.getStringSet() : pc.getStringCollection();\n+        assertEquals(3, set.size());\n+        assertTrue(set.contains(\"val1\"));\n+        assertTrue(set.contains(\"val2\"));\n+        assertTrue(set.contains(\"val3\"));\n+        if (!isSet) {\n+            Iterator itr = set.iterator();\n+            assertEquals(\"val1\", itr.next());\n+            assertEquals(\"val2\", itr.next());\n+            assertEquals(\"val3\", itr.next());\n+            //FIXME jthomas\n+            //KodoJDOHelper.close(itr);\n+        }\n+        \n+        // do some mods to try to confuse the proxy\n+        set.remove(\"val1\");\n+        set.remove(\"val1\");\n+        set.add(\"val4\");\n+        set.remove(\"val4\");\n+        set.add(\"val5\");\n+        set.add(\"val6\");\n+        assertStringCollectionChanged(set, isSet);\n+        endTx(pm);\n+        if (close) {\n+            pm.close();\n+            pm = getEm(false, false);\n+        }\n+        \n+        // re-retrieve and check set\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\n+        set = isSet ? pc.getStringSet() : pc.getStringCollection();\n+        assertStringCollectionChanged(set, isSet);\n+        pm.close();\n+    }\n+    \n+    private void assertStringCollectionChanged(Collection set, boolean isSet) {\n+        assertEquals(4, set.size());\n+        assertTrue(!set.contains(\"val1\"));\n+        assertTrue(set.contains(\"val2\"));\n+        assertTrue(set.contains(\"val3\"));\n+        assertTrue(!set.contains(\"val4\"));\n+        assertTrue(set.contains(\"val5\"));\n+        assertTrue(set.contains(\"val6\"));\n+        if (!isSet) {\n+            Iterator itr = set.iterator();\n+            assertEquals(\"val2\", itr.next());\n+            assertEquals(\"val3\", itr.next());\n+            assertEquals(\"val5\", itr.next());\n+            assertEquals(\"val6\", itr.next());\n+            assertTrue(!itr.hasNext());\n+            //FIXME jthomas\n+            //KodoJDOHelper.close(itr);\n+        }\n+    }\n+    \n+    public void testStringMap() {\n+        stringMapTest(_oid, true);\n+        stringMapTest(_coid, true);\n+    }\n+    \n+    public void testStringMapRetain() {\n+        stringMapTest(_oid, false);\n+        stringMapTest(_coid, false);\n+    }\n+    \n+    private void stringMapTest(Object oid, boolean close) {\n+        OpenJPAEntityManager pm = getEm(!close, !close);\n+        startTx(pm);\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\n+        \n+        // check that orig values are correct\n+        Map map = pc.getStringMap();\n+        assertEquals(3, map.size());\n+        assertEquals(\"1\", map.get(\"key1\"));\n+        assertEquals(\"2\", map.get(\"key2\"));\n+        assertEquals(\"3\", map.get(\"key3\"));\n+        \n+        // do some mods to try to confuse the proxy\n+        map.put(\"key1\", \"1a\");\n+        map.put(\"key1\", \"1b\");\n+        map.put(\"key2\", \"4\");\n+        map.remove(\"key2\");\n+        map.remove(\"foo\");\n+        map.put(\"key5\", \"5\");\n+        assertStringMapChanged(map);\n+        endTx(pm);\n+        \n+        if (close) {\n+            pm.close();\n+            pm = getEm(false, false);\n+        }\n+        \n+        // re-retrieve and check map\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\n+        map = pc.getStringMap();\n+        assertStringMapChanged(map);\n+        pm.close();\n+    }\n+    \n+    private void assertStringMapChanged(Map map) {\n+        assertEquals(3, map.size());\n+        assertEquals(\"1b\", map.get(\"key1\"));\n+        assertEquals(\"3\", map.get(\"key3\"));\n+        assertEquals(\"5\", map.get(\"key5\"));\n+        assertNull(map.get(\"key2\"));\n+        assertTrue(map.containsKey(\"key1\"));\n+        assertFalse(map.containsKey(\"key2\"));\n+        assertTrue(map.containsValue(\"5\"));\n+        assertFalse(map.containsValue(\"1\"));\n+        \n+        Iterator itr = map.entrySet().iterator();\n+        Map.Entry entry;\n+        int count = 0;\n+        for (; itr.hasNext(); count++) {\n+            entry = (Map.Entry) itr.next();\n+            if (entry.getKey().equals(\"key1\"))\n+                assertEquals(\"1b\", entry.getValue());\n+            else if (entry.getKey().equals(\"key3\"))\n+                assertEquals(\"3\", entry.getValue());\n+            else if (entry.getKey().equals(\"key5\"))\n+                assertEquals(\"5\", entry.getValue());\n+            else\n+                fail(\"Bad key: \" + entry.getKey());\n+        }\n+        assertEquals(3, count);\n+        //FIXME\n+        //KodoJDOHelper.close(itr);\n+    }\n+    \n+    public void testRelSet() {\n+        relCollectionTest(_oid, true, true);\n+        relCollectionTest(_coid, true, true);\n+    }\n+    \n+    public void testRelSetRetain() {\n+        relCollectionTest(_oid, false, true);\n+        relCollectionTest(_coid, false, true);\n+    }\n+    \n+    public void testRelCollection() {\n+        relCollectionTest(_oid, true, false);\n+        relCollectionTest(_coid, true, false);\n+    }\n+    \n+    public void testRelCollectionRetain() {\n+        relCollectionTest(_oid, false, false);\n+        relCollectionTest(_coid, false, false);\n+    }\n+    \n+    private void relCollectionTest(Object oid, boolean close, boolean isSet) {\n+        OpenJPAEntityManager pm = getEm(!close, !close);\n+        startTx(pm);\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\n+        \n+        // check that orig values are correct\n+        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\n+        assertEquals(3, set.size());\n+        Collection ordered = new TreeSet();\n+        Iterator itr = set.iterator();\n+        ordered.add(itr.next());\n+        ordered.add(itr.next());\n+        ordered.add(itr.next());\n+        assertTrue(!itr.hasNext());\n+        //FIXME\n+        //KodoJDOHelper.close(itr);\n+        itr = ordered.iterator();\n+        LRSPCIntf set1 = (LRSPCIntf) itr.next();\n+        if (!isSet) {\n+            LRSPCIntf set2 = (LRSPCIntf) itr.next();\n+            LRSPCIntf set3 = (LRSPCIntf) itr.next();\n+            assertEquals(\"set1\", set1.getStringField());\n+            assertEquals(\"set2\", set2.getStringField());\n+            assertEquals(\"set3\", set3.getStringField());\n+        }\n+        assertTrue(set.contains(set1));\n+        assertFalse(set.contains(pc));\n+        \n+        // do some mods to try to confuse the proxy\n+        set.remove(set1);\n+        set.remove(set1);\n+        LRSPCIntf set4 = pc.newInstance(\"set4\");\n+        set.add(set4);\n+        set.remove(set4);\n+        LRSPCIntf set5 = pc.newInstance(\"set5\");\n+        set.add(set5);\n+        assertRelCollectionChanged(pc, isSet);\n+        endTx(pm);\n+        \n+        if (close) {\n+            pm.close();\n+            pm = getEm(false, false);\n+        }\n+        \n+        // re-retrieve and check set\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\n+        assertRelCollectionChanged(pc, isSet);\n+        pm.close();\n+    }\n+    \n+    private void assertRelCollectionChanged(LRSPCIntf pc, boolean isSet) {\n+        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\n+        assertEquals(3, set.size());\n+        Collection ordered = new TreeSet();\n+        Iterator itr = set.iterator();\n+        ordered.add(itr.next());\n+        ordered.add(itr.next());\n+        ordered.add(itr.next());\n+        assertTrue(!itr.hasNext());\n+        //FIXME\n+        //KodoJDOHelper.close(itr);\n+        itr = ordered.iterator();\n+        LRSPCIntf set2 = (LRSPCIntf) itr.next();\n+        if (!isSet) {\n+            LRSPCIntf set3 = (LRSPCIntf) itr.next();\n+            LRSPCIntf set5 = (LRSPCIntf) itr.next();\n+            assertEquals(\"set2\", set2.getStringField());\n+            assertEquals(\"set3\", set3.getStringField());\n+            assertEquals(\"set5\", set5.getStringField());\n+        }\n+        assertTrue(set.contains(set2));\n+        assertFalse(set.contains(pc));\n+    }\n+    \n+    public void testRelMap() {\n+        relMapTest(_oid, true);\n+        relMapTest(_coid, true);\n+    }\n+    \n+    public void testRelMapRetain() {\n+        relMapTest(_oid, false);\n+        relMapTest(_coid, false);\n+    }\n+    \n+    private void relMapTest(Object oid, boolean close) {\n+        OpenJPAEntityManager pm = getEm(!close, !close);\n+        startTx(pm);\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\n+        \n+        // check that orig values are correct\n+        Map map = pc.getRelMap();\n+        assertEquals(3, map.size());\n+        LRSPCIntf map1 = (LRSPCIntf) map.get(\"key1\");\n+        LRSPCIntf map2 = (LRSPCIntf) map.get(\"key2\");\n+        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\n+        assertEquals(\"map1\", map1.getStringField());\n+        assertEquals(\"map2\", map2.getStringField());\n+        assertEquals(\"map3\", map3.getStringField());\n+        assertTrue(map.containsKey(\"key1\"));\n+        assertFalse(map.containsKey(\"key4\"));\n+        assertTrue(map.containsValue(map1));\n+        assertFalse(map.containsValue(pc));\n+        \n+        // do some mods to try to confuse the proxy\n+        LRSPCIntf map1a = pc.newInstance(\"map1a\");\n+        map.put(\"key1\", map1a);\n+        LRSPCIntf map1b = pc.newInstance(\"map1b\");\n+        map.put(\"key1\", map1b);\n+        map.remove(\"key2\");\n+        map.put(\"key4\", pc.newInstance(\"map4\"));\n+        map.remove(\"key4\");\n+        map.remove(\"foo\");\n+        map.put(\"key5\", pc.newInstance(\"map5\"));\n+        assertRelMapChanged(pc);\n+        endTx(pm);\n+        \n+        if (close) {\n+            pm.close();\n+            pm = getEm(false, false);\n+        }\n+        \n+        // re-retrieve and check map\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\n+        assertRelMapChanged(pc);\n+        pm.close();\n+    }\n+    \n+    private void assertRelMapChanged(LRSPCIntf pc) {\n+        Map map = pc.getRelMap();\n+        assertEquals(3, map.size());\n+        LRSPCIntf map1b = (LRSPCIntf) map.get(\"key1\");\n+        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\n+        LRSPCIntf map5 = (LRSPCIntf) map.get(\"key5\");\n+        assertEquals(\"map1b\", map1b.getStringField());\n+        assertEquals(\"map3\", map3.getStringField());\n+        assertEquals(\"map5\", map5.getStringField());\n+        assertTrue(map.containsKey(\"key1\"));\n+        assertFalse(map.containsKey(\"key2\"));\n+        assertTrue(map.containsValue(map1b));\n+        assertFalse(map.containsValue(pc));\n+        \n+        Iterator itr = map.entrySet().iterator();\n+        Map.Entry entry;\n+        int count = 0;\n+        for (; itr.hasNext(); count++) {\n+            entry = (Map.Entry) itr.next();\n+            if (entry.getKey().equals(\"key1\"))\n+                assertEquals(map1b, entry.getValue());\n+            else if (entry.getKey().equals(\"key3\"))\n+                assertEquals(map3, entry.getValue());\n+            else if (entry.getKey().equals(\"key5\"))\n+                assertEquals(map5, entry.getValue());\n+            else\n+                fail(\"Bad key: \" + entry.getKey());\n+        }\n+        assertEquals(3, count);\n+        //FIXME\n+        //KodoJDOHelper.close(itr);\n+    }\n+    \n+    public void testTransfer() {\n+        // cannot transfer an lrs from one field to another\n+        \n+        OpenJPAEntityManager pm = getEm(true, true);\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\n+        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\n+        assertNotNull(map1);\n+        \n+        startTx(pm);\n+        Map map = pc.getRelMap();\n+        pc.setRelMap(null);\n+        map1.setRelMap(map);\n+        \n+        try {\n+            endTx(pm);\n+            fail(\"Allowed transfer of lrs field\");\n+        } catch (Exception jue) {\n+        }\n+        if (pm.getTransaction().isActive())\n+            pm.getTransaction().rollback();\n+        pm.close();\n+    }\n+    \n+    public void testShare() {\n+        OpenJPAEntityManager pm = getEm(true, true);\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\n+        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\n+        assertNotNull(map1);\n+        \n+        startTx(pm);\n+        Map map = pc.getRelMap();\n+        map1.setRelMap(map);\n+        endTx(pm);\n+        assertTrue(pc.getRelMap() != map1.getRelMap());\n+        assertEquals(3, map1.getRelMap().size());\n+        assertTrue(map1.getRelMap().containsValue(map1));\n+        pm.close();\n+        \n+        // make sure it sticks\n+        pm = getEm(true, true);\n+        pc = (LRSPC) pm.getObjectId(_oid);\n+        map1 = (LRSPC) pc.getRelMap().get(\"key1\");\n+        assertEquals(map1, map1.getRelMap().get(\"key1\"));\n+        pm.close();\n+    }\n+    \n+    public void testRollback() {\n+        //FIXME\n+        //PersistenceManagerFactory factory = getPMFactory(new String[]{\n+        //    \"openjpa.RestoreMutableValues\", \"true\",\n+        //});\n+        OpenJPAEntityManagerFactory factory =null;\n+        OpenJPAEntityManager pm = factory.createEntityManager();\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\n+        startTx(pm);\n+        pc.getStringCollection().remove(\"val2\");\n+        pc.getStringCollection().add(\"val4\");\n+        rollbackTx(pm);\n+        assertTrue(pc.getStringCollection().contains(\"val2\"));\n+        assertFalse(pc.getStringCollection().contains(\"val4\"));\n+        pm.close();\n+        factory.close();\n+    }\n+    \n+    public void testReplace() {\n+        OpenJPAEntityManager pm = getEm(false, false);\n+        startTx(pm);\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\n+        \n+        // totally replace set\n+        Collection set = new HashSet();\n+        set.add(\"new\");\n+        pc.setStringCollection(set);\n+        \n+        endTx(pm);\n+        pm.close();\n+        \n+        // re-retrieve and check set\n+        pm = getEm(false, false);\n+        pc = (LRSPC) pm.getObjectId(_oid);\n+        \n+        set = pc.getStringCollection();\n+        assertEquals(1, set.size());\n+        assertTrue(set.contains(\"new\"));\n+        pm.close();\n+    }\n+    \n+    public void testAdd()\n+    throws Exception {\n+/*\n+        //FIXME\n+        //KodoPersistenceManagerFactory pmf = getPMFactory(new String []{\n+        //    \"openjpa.jdbc.JDBCListeners\", Listener.class.getName(),\n+        //});\n+        OpenJPAEntityManagerFactory pmf =null;\n+        JDBCConfiguration conf = (JDBCConfiguration) pmf.getConfiguration();\n+        //FIXME need to fix inner class\n+        //Listener l = (Listener) conf.getJDBCListenerInstances()[0];\n+        OpenJPAEntityManager pm = pmf.createEntityManager();\n+        try {\n+            startTx(pm);\n+            LRSPC pc = (LRSPC) pm.getObjectId(_oid);\n+            l.count = 0;\n+            pc.getStringCollection().add(\"testAddStringValue\");\n+            endTx(pm);\n+            assertEquals(3, l.count);\n+        } catch (Exception e) {\n+            if (pm.getTransaction().isActive())\n+                pm.getTransaction().rollback();\n+            throw e;\n+        } finally {\n+            pm.close();\n+        }\n+ */\n+    }\n+    \n+    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+        em.setNontransactionalRead(true);\n+        em.setRetainState(retainValues);\n+        em.setOptimistic(optimistic);\n+        return em;\n+    }\n+    \n+    //FIXME - could not find AbstractJDBCListener because of package imports in source file\n+/*\n+    public static class Listener extends AbstractJDBCListener {\n+ \n+        public int count = 0;\n+ \n+        public void afterExecuteStatement(JDBCEvent ev) {\n+            count++;\n+        }\n+    }\n+ */\n+}"},{"sha":"69daf02d15151131cee4b1a9153edddbebe407d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","status":"modified","additions":229,"deletions":229,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,229 +1,229 @@\n-/*\r\n- * TestLocators.java\r\n- *\r\n- * Created on October 3, 2006, 4:37 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-\r\n-\r\n-public class TestLocators extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-    private OpenJPAEntityManagerFactory pmf;\r\n-\r\n-    public TestLocators(String name) {\r\n-        super(name);\r\n-    }    \r\n-    \r\n-    /** Creates a new instance of TestLocators */\r\n-    public TestLocators() {\r\n-    }\r\n-    public void setUp() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        \r\n-        Extent e = pm.createExtent(LocatorTestObject.class, true);\r\n-        for (Iterator i = e.iterator(); i.hasNext();) {\r\n-            pm.remove(i.next());\r\n-            \r\n-        }\r\n-        endTx(pm);\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        super.tearDown();\r\n-\r\n-       deleteAll(LocatorTestObject.class);\r\n-    }\r\n-\r\n-    public void testBLOBs() {\r\n-        doBlobTest(50000);\r\n-    }\r\n-\r\n-    public void testSmallBLOBs() {\r\n-        doBlobTest(50);\r\n-\r\n-        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\r\n-            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-            JDBCConfiguration conf = (JDBCConfiguration)\r\n-                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n-            OracleDictionary dict = (OracleDictionary)\r\n-                conf.getDBDictionaryInstance();\r\n-\r\n-            int t = dict.maxEmbeddedBlobSize;\r\n-            doBlobTest(t - 1);\r\n-            doBlobTest(t);\r\n-            doBlobTest(t + 1);\r\n-        }\r\n-    }\r\n-\r\n-    public void doBlobTest(int size) {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        LocatorTestObject o = new LocatorTestObject();\r\n-        byte[] bytes = new byte[size];\r\n-        Arrays.fill(bytes, (byte) 'b');\r\n-        o.setBytes(bytes);\r\n-        pm.persist(o);\r\n-        Object oid = pm.getObjectId(o);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        o = (LocatorTestObject) pm.getObjectId(oid);\r\n-        byte[] newbytes = o.getBytes();\r\n-        assertNotNull(newbytes);\r\n-        assertEquals(bytes.length, newbytes.length);\r\n-        for (int i = 0; i < bytes.length; i++) {\r\n-            assertEquals(bytes[i], newbytes[i]);\r\n-        }\r\n-    }\r\n-\r\n-    public void testShrinkBLOB() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        LocatorTestObject o = new LocatorTestObject();\r\n-        byte[] bytes = new byte[50000];\r\n-        Arrays.fill(bytes, (byte) 'b');\r\n-        o.setBytes(bytes);\r\n-        pm.persist(o);\r\n-        Object oid = pm.getObjectId(o);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        o = (LocatorTestObject) pm.getObjectId(oid);\r\n-\r\n-        startTx(pm);\r\n-        bytes = new byte[40000];\r\n-        Arrays.fill(bytes, (byte) 'c');\r\n-        o.setBytes(bytes);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        o = (LocatorTestObject) pm.getObjectId(oid);\r\n-        byte[] newbytes = o.getBytes();\r\n-        assertEquals(bytes.length, newbytes.length);\r\n-        for (int i = 0; i < bytes.length; i++) {\r\n-            assertEquals(bytes[i], newbytes[i]);\r\n-        }\r\n-    }\r\n-\r\n-    public void testCLOBs() {\r\n-        doClobTest(50000);\r\n-    }\r\n-\r\n-    public void testSmallCLOBs() {\r\n-        doClobTest(50);\r\n-\r\n-        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\r\n-            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-            JDBCConfiguration conf = (JDBCConfiguration)\r\n-                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n-            OracleDictionary dict = (OracleDictionary)\r\n-                conf.getDBDictionaryInstance();\r\n-\r\n-            int t = dict.maxEmbeddedClobSize;\r\n-            doClobTest(t - 1);\r\n-            doClobTest(t);\r\n-            doClobTest(t + 1);\r\n-        }\r\n-    }\r\n-\r\n-    public void doClobTest(int size) {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        LocatorTestObject o = new LocatorTestObject();\r\n-        char[] chars = new char[size];\r\n-        Arrays.fill(chars, (char) 'c');\r\n-        o.setClobString(new String(chars));\r\n-        pm.persist(o);\r\n-        Object oid = pm.getObjectId(o);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        o = (LocatorTestObject) pm.getObjectId(oid);\r\n-        char[] newchars = o.getClobString().toCharArray();\r\n-\r\n-        assertNotNull(newchars);\r\n-        assertEquals(chars.length, newchars.length);\r\n-        for (int i = 0; i < chars.length; i++) {\r\n-            assertEquals(chars[i], newchars[i]);\r\n-        }\r\n-    }\r\n-\r\n-    public void testShrinkCLOB() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);\r\n-        LocatorTestObject o = new LocatorTestObject();\r\n-        char[] chars = new char[50000];\r\n-        Arrays.fill(chars, (char) 'c');\r\n-        o.setClobString(new String(chars));\r\n-        pm.persist(o);\r\n-        Object oid = pm.getObjectId(o);\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        o = (LocatorTestObject) pm.getObjectId(oid);\r\n-\r\n-        startTx(pm);\r\n-        chars = new char[40000];\r\n-        Arrays.fill(chars, (char) 'd');\r\n-        o.setClobString(new String(chars));\r\n-        endTx(pm);\r\n-        pm.close();\r\n-\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        o = (LocatorTestObject) pm.getObjectId(oid);\r\n-        char[] newchars = o.getClobString().toCharArray();\r\n-        assertEquals(chars.length, newchars.length);\r\n-        for (int i = 0; i < chars.length; i++) {\r\n-            assertEquals(chars[i], newchars[i]);\r\n-        }\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestLocators.java\n+ *\n+ * Created on October 3, 2006, 4:37 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\n+import org.apache.openjpa.persistence.Extent;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+\n+public class TestLocators extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+    private OpenJPAEntityManagerFactory pmf;\n+\n+    public TestLocators(String name) {\n+        super(name);\n+    }    \n+    \n+    /** Creates a new instance of TestLocators */\n+    public TestLocators() {\n+    }\n+    public void setUp() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        \n+        Extent e = pm.createExtent(LocatorTestObject.class, true);\n+        for (Iterator i = e.iterator(); i.hasNext();) {\n+            pm.remove(i.next());\n+            \n+        }\n+        endTx(pm);\n+        pm.close();\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        super.tearDown();\n+\n+       deleteAll(LocatorTestObject.class);\n+    }\n+\n+    public void testBLOBs() {\n+        doBlobTest(50000);\n+    }\n+\n+    public void testSmallBLOBs() {\n+        doBlobTest(50);\n+\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\n+            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+            JDBCConfiguration conf = (JDBCConfiguration)\n+                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\n+            OracleDictionary dict = (OracleDictionary)\n+                conf.getDBDictionaryInstance();\n+\n+            int t = dict.maxEmbeddedBlobSize;\n+            doBlobTest(t - 1);\n+            doBlobTest(t);\n+            doBlobTest(t + 1);\n+        }\n+    }\n+\n+    public void doBlobTest(int size) {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        LocatorTestObject o = new LocatorTestObject();\n+        byte[] bytes = new byte[size];\n+        Arrays.fill(bytes, (byte) 'b');\n+        o.setBytes(bytes);\n+        pm.persist(o);\n+        Object oid = pm.getObjectId(o);\n+        endTx(pm);\n+        pm.close();\n+\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        o = (LocatorTestObject) pm.getObjectId(oid);\n+        byte[] newbytes = o.getBytes();\n+        assertNotNull(newbytes);\n+        assertEquals(bytes.length, newbytes.length);\n+        for (int i = 0; i < bytes.length; i++) {\n+            assertEquals(bytes[i], newbytes[i]);\n+        }\n+    }\n+\n+    public void testShrinkBLOB() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        LocatorTestObject o = new LocatorTestObject();\n+        byte[] bytes = new byte[50000];\n+        Arrays.fill(bytes, (byte) 'b');\n+        o.setBytes(bytes);\n+        pm.persist(o);\n+        Object oid = pm.getObjectId(o);\n+        endTx(pm);\n+        pm.close();\n+\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        o = (LocatorTestObject) pm.getObjectId(oid);\n+\n+        startTx(pm);\n+        bytes = new byte[40000];\n+        Arrays.fill(bytes, (byte) 'c');\n+        o.setBytes(bytes);\n+        endTx(pm);\n+        pm.close();\n+\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        o = (LocatorTestObject) pm.getObjectId(oid);\n+        byte[] newbytes = o.getBytes();\n+        assertEquals(bytes.length, newbytes.length);\n+        for (int i = 0; i < bytes.length; i++) {\n+            assertEquals(bytes[i], newbytes[i]);\n+        }\n+    }\n+\n+    public void testCLOBs() {\n+        doClobTest(50000);\n+    }\n+\n+    public void testSmallCLOBs() {\n+        doClobTest(50);\n+\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\n+            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+            JDBCConfiguration conf = (JDBCConfiguration)\n+                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\n+            OracleDictionary dict = (OracleDictionary)\n+                conf.getDBDictionaryInstance();\n+\n+            int t = dict.maxEmbeddedClobSize;\n+            doClobTest(t - 1);\n+            doClobTest(t);\n+            doClobTest(t + 1);\n+        }\n+    }\n+\n+    public void doClobTest(int size) {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        LocatorTestObject o = new LocatorTestObject();\n+        char[] chars = new char[size];\n+        Arrays.fill(chars, (char) 'c');\n+        o.setClobString(new String(chars));\n+        pm.persist(o);\n+        Object oid = pm.getObjectId(o);\n+        endTx(pm);\n+        pm.close();\n+\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        o = (LocatorTestObject) pm.getObjectId(oid);\n+        char[] newchars = o.getClobString().toCharArray();\n+\n+        assertNotNull(newchars);\n+        assertEquals(chars.length, newchars.length);\n+        for (int i = 0; i < chars.length; i++) {\n+            assertEquals(chars[i], newchars[i]);\n+        }\n+    }\n+\n+    public void testShrinkCLOB() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);\n+        LocatorTestObject o = new LocatorTestObject();\n+        char[] chars = new char[50000];\n+        Arrays.fill(chars, (char) 'c');\n+        o.setClobString(new String(chars));\n+        pm.persist(o);\n+        Object oid = pm.getObjectId(o);\n+        endTx(pm);\n+        pm.close();\n+\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        o = (LocatorTestObject) pm.getObjectId(oid);\n+\n+        startTx(pm);\n+        chars = new char[40000];\n+        Arrays.fill(chars, (char) 'd');\n+        o.setClobString(new String(chars));\n+        endTx(pm);\n+        pm.close();\n+\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        o = (LocatorTestObject) pm.getObjectId(oid);\n+        char[] newchars = o.getClobString().toCharArray();\n+        assertEquals(chars.length, newchars.length);\n+        for (int i = 0; i < chars.length; i++) {\n+            assertEquals(chars[i], newchars[i]);\n+        }\n+    }\n+    \n+}"},{"sha":"3acd04bcc31161087014bcb5c3ec9cc951a8119d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,268 +1,268 @@\n-/*\r\n- * TestMappedByKeyMaps.java\r\n- *\r\n- * Created on October 4, 2006, 9:26 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\r\n-import org.apache.openjpa.util.AbstractLRSProxyMap;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-\r\n-public class TestMappedByKeyMaps extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-    \r\n-    /** Creates a new instance of TestMappedByKeyMaps */\r\n-    public TestMappedByKeyMaps(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public void testInverseKeyMapMapping() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n-        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\r\n-                (InverseKeyMapPC.class, null, true);\r\n-        FieldMapping map = pc.getFieldMapping(\"helpers\");\r\n-        \r\n-        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\r\n-                (HelperPC.class, null, true);\r\n-        FieldMapping str = helper.getFieldMapping(\"stringField\");\r\n-        \r\n-        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\r\n-        assertEquals(str, map.getKey().getValueMappedByMetaData());\r\n-        assertTrue(map.getStrategy() instanceof\r\n-                RelationMapInverseKeyFieldStrategy);\r\n-        assertEquals(1, map.getKeyMapping().getColumns().length);\r\n-        assertEquals(map.getKeyMapping().getColumns()[0],\r\n-                str.getColumns()[0]);\r\n-    }\r\n-    \r\n-    public void testJoinTableMapMapping() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n-        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\r\n-                (JoinTableMapPC.class, null, true);\r\n-        FieldMapping map = pc.getFieldMapping(\"helpers\");\r\n-        \r\n-        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\r\n-                (HelperPC.class, null, true);\r\n-        FieldMapping str = helper.getFieldMapping(\"stringField\");\r\n-        \r\n-        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\r\n-        assertEquals(str, map.getKey().getValueMappedByMetaData());\r\n-        assertTrue(map.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n-        assertEquals(1, map.getKeyMapping().getColumns().length);\r\n-        assertEquals(map.getKeyMapping().getColumns()[0],\r\n-                str.getColumns()[0]);\r\n-    }\r\n-    \r\n-    public void testInverseKeyMap() {\r\n-        mappedByMap(new InverseKeyMapPC(), false);\r\n-        queryMap(new InverseKeyMapPC());\r\n-    }\r\n-    \r\n-    public void testInverseKeyLRSMap() {\r\n-        mappedByMap(new InverseKeyMapPC(), true);\r\n-    }\r\n-    \r\n-    public void testJoinTableMap() {\r\n-        mappedByMap(new JoinTableMapPC(), false);\r\n-        queryMap(new JoinTableMapPC());\r\n-    }\r\n-    \r\n-    public void testJoinTableLRSMap() {\r\n-        mappedByMap(new JoinTableMapPC(), true);\r\n-    }\r\n-    \r\n-    private void mappedByMap(MappedByMapPC pc, boolean lrs) {\r\n-       deleteAll(HelperPC.class);\r\n-       deleteAll(pc.getClass());\r\n-        \r\n-        HelperPC h1 = new HelperPC();\r\n-        h1.setStringField(\"h1\");\r\n-        pc.getHelpers().put(h1.getStringField(), h1);\r\n-        HelperPC h2 = new HelperPC();\r\n-        h2.setStringField(\"h2\");\r\n-        pc.getHelpers().put(h2.getStringField(), h2);\r\n-        HelperPC h3 = new HelperPC();\r\n-        h3.setStringField(\"h3\");\r\n-        pc.getHelpers().put(h3.getStringField(), h3);\r\n-        \r\n-        setLRS(pc.getClass(), lrs);\r\n-        try {\r\n-            OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-            startTx(pm);;\r\n-            pm.persist(pc);\r\n-            endTx(pm);;\r\n-            Object oid = pm.getObjectId(pc);\r\n-            \r\n-            assertFalse(pc.getHelpers().containsKey(\"foo\"));\r\n-            assertNull(pc.getHelpers().get(\"foo\"));\r\n-            assertEquals(3, pc.getHelpers().size());\r\n-            assertEquals(h1, pc.getHelpers().get(\"h1\"));\r\n-            assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n-            pm.close();\r\n-            \r\n-            pm = (OpenJPAEntityManager)currentEntityManager();;\r\n-            pc = (MappedByMapPC) pm.getObjectId(oid);\r\n-            if (lrs)\r\n-                assertTrue(pc.getHelpers() instanceof AbstractLRSProxyMap);\r\n-            assertEquals(3, pc.getHelpers().size());\r\n-            assertFalse(pc.getHelpers().containsKey(\"foo\"));\r\n-            assertNull(pc.getHelpers().get(\"foo\"));\r\n-            assertEquals(\"h1\", ((HelperPC) pc.getHelpers().get(\"h1\")).\r\n-                    getStringField());\r\n-            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n-                    getStringField());\r\n-            \r\n-            pm.begin();\r\n-            pc.getHelpers().remove(\"h1\");\r\n-            assertEquals(2, pc.getHelpers().size());\r\n-            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n-            assertNull(pc.getHelpers().get(\"h1\"));\r\n-            HelperPC h4 = new HelperPC();\r\n-            h4.setStringField(\"h4\");\r\n-            pc.getHelpers().put(\"h4\", h4);\r\n-            assertTrue(pc.getHelpers().containsKey(\"h4\"));\r\n-            assertEquals(h4, pc.getHelpers().get(\"h4\"));\r\n-            assertEquals(3, pc.getHelpers().size());\r\n-            pm.commit();\r\n-            assertEquals(3, pc.getHelpers().size());\r\n-            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n-            assertNull(pc.getHelpers().get(\"h1\"));\r\n-            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n-                    getStringField());\r\n-            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\r\n-                    getStringField());\r\n-            pm.close();\r\n-            \r\n-            pm = (OpenJPAEntityManager)currentEntityManager();;\r\n-            pc = (MappedByMapPC) pm.getObjectId(oid);\r\n-            assertEquals(3, pc.getHelpers().size());\r\n-            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n-            assertNull(pc.getHelpers().get(\"h1\"));\r\n-            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n-                    getStringField());\r\n-            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\r\n-                    getStringField());\r\n-            \r\n-            // to test lrs functions\r\n-            assertTrue(pc.getHelpers().containsValue\r\n-                    (pc.getHelpers().get(\"h2\")));\r\n-            \r\n-            Set keySet = pc.getHelpers().keySet();\r\n-            Set ordered = new TreeSet();\r\n-            assertEquals(3, keySet.size());\r\n-            Iterator itr = keySet.iterator();\r\n-            while (itr.hasNext())\r\n-                ordered.add(itr.next());\r\n-            //FIXME jthomas\r\n-            //KodoJDOHelper.close(itr);\r\n-            assertEquals(3, ordered.size());\r\n-            assertTrue(ordered.contains(\"h2\"));\r\n-            assertTrue(ordered.contains(\"h3\"));\r\n-            assertTrue(ordered.contains(\"h4\"));\r\n-            ordered.clear();\r\n-            \r\n-            Collection values = pc.getHelpers().values();\r\n-            assertEquals(3, values.size());\r\n-            itr = values.iterator();\r\n-            while (itr.hasNext()) {\r\n-                Object next = itr.next();\r\n-                assertTrue(next instanceof HelperPC);\r\n-                ordered.add(((HelperPC) next).getStringField());\r\n-            }\r\n-            //FIXME jthomas\r\n-            //KodoJDOHelper.close(itr);\r\n-            assertEquals(3, ordered.size());\r\n-            assertTrue(ordered.contains(\"h2\"));\r\n-            assertTrue(ordered.contains(\"h3\"));\r\n-            assertTrue(ordered.contains(\"h4\"));\r\n-            pm.close();\r\n-        } finally {\r\n-            unsetLRS(pc.getClass());\r\n-        }\r\n-    }\r\n-    \r\n-    private void queryMap(MappedByMapPC pc) {\r\n-        HelperPC h5 = new HelperPC();\r\n-        h5.setStringField(\"h5\");\r\n-        pc.getHelpers().put(\"h5\", h5);\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.begin();\r\n-        pm.persist(pc);\r\n-        pm.commit();\r\n-        pm.close();\r\n-        \r\n-        pm = (OpenJPAEntityManager)currentEntityManager();;\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"stringField == 'h2'\",HelperPC.class);\r\n-        //FIXME jthomas\r\n-        //q.setUnique(true);\r\n-        HelperPC h2 = (HelperPC) q.getSingleResult();\r\n-        \r\n-        q = pm.createNativeQuery(\"helpers.containsKey ('h2')\",pc.getClass());\r\n-        //FIXME jthomas\r\n-        //q.setUnique(true);\r\n-        pc = (MappedByMapPC) q.getSingleResult();\r\n-        assertEquals(3, pc.getHelpers().size());\r\n-        assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n-        \r\n-        q = pm.createNativeQuery(\"helpers.containsValue (:h2)\",pc.getClass());\r\n-        //FIXME  jthomas\r\n-        //q.setUnique(true);\r\n-        pc = (MappedByMapPC) q.getSingleResult();\r\n-        assertEquals(3, pc.getHelpers().size());\r\n-        assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void setLRS(Class cls, boolean lrs) {\r\n-        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\r\n-                getMappingRepositoryInstance().getMapping(cls, null, true);\r\n-        cm.getFieldMapping(\"helpers\").setLRS(lrs);\r\n-    }\r\n-    \r\n-    private void unsetLRS(Class cls) {\r\n-        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\r\n-                getMappingRepositoryInstance().getMapping(cls, null, true);\r\n-        cm.getFieldMapping(\"helpers\").setLRS(false);\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestMappedByKeyMaps.java\n+ *\n+ * Created on October 4, 2006, 9:26 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\n+import org.apache.openjpa.util.AbstractLRSProxyMap;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+\n+public class TestMappedByKeyMaps extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+    \n+    /** Creates a new instance of TestMappedByKeyMaps */\n+    public TestMappedByKeyMaps(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public void testInverseKeyMapMapping() {\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n+        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\n+                (InverseKeyMapPC.class, null, true);\n+        FieldMapping map = pc.getFieldMapping(\"helpers\");\n+        \n+        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\n+                (HelperPC.class, null, true);\n+        FieldMapping str = helper.getFieldMapping(\"stringField\");\n+        \n+        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\n+        assertEquals(str, map.getKey().getValueMappedByMetaData());\n+        assertTrue(map.getStrategy() instanceof\n+                RelationMapInverseKeyFieldStrategy);\n+        assertEquals(1, map.getKeyMapping().getColumns().length);\n+        assertEquals(map.getKeyMapping().getColumns()[0],\n+                str.getColumns()[0]);\n+    }\n+    \n+    public void testJoinTableMapMapping() {\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n+        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\n+                (JoinTableMapPC.class, null, true);\n+        FieldMapping map = pc.getFieldMapping(\"helpers\");\n+        \n+        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\n+                (HelperPC.class, null, true);\n+        FieldMapping str = helper.getFieldMapping(\"stringField\");\n+        \n+        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\n+        assertEquals(str, map.getKey().getValueMappedByMetaData());\n+        assertTrue(map.getStrategy() instanceof RelationMapTableFieldStrategy);\n+        assertEquals(1, map.getKeyMapping().getColumns().length);\n+        assertEquals(map.getKeyMapping().getColumns()[0],\n+                str.getColumns()[0]);\n+    }\n+    \n+    public void testInverseKeyMap() {\n+        mappedByMap(new InverseKeyMapPC(), false);\n+        queryMap(new InverseKeyMapPC());\n+    }\n+    \n+    public void testInverseKeyLRSMap() {\n+        mappedByMap(new InverseKeyMapPC(), true);\n+    }\n+    \n+    public void testJoinTableMap() {\n+        mappedByMap(new JoinTableMapPC(), false);\n+        queryMap(new JoinTableMapPC());\n+    }\n+    \n+    public void testJoinTableLRSMap() {\n+        mappedByMap(new JoinTableMapPC(), true);\n+    }\n+    \n+    private void mappedByMap(MappedByMapPC pc, boolean lrs) {\n+       deleteAll(HelperPC.class);\n+       deleteAll(pc.getClass());\n+        \n+        HelperPC h1 = new HelperPC();\n+        h1.setStringField(\"h1\");\n+        pc.getHelpers().put(h1.getStringField(), h1);\n+        HelperPC h2 = new HelperPC();\n+        h2.setStringField(\"h2\");\n+        pc.getHelpers().put(h2.getStringField(), h2);\n+        HelperPC h3 = new HelperPC();\n+        h3.setStringField(\"h3\");\n+        pc.getHelpers().put(h3.getStringField(), h3);\n+        \n+        setLRS(pc.getClass(), lrs);\n+        try {\n+            OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+            startTx(pm);;\n+            pm.persist(pc);\n+            endTx(pm);;\n+            Object oid = pm.getObjectId(pc);\n+            \n+            assertFalse(pc.getHelpers().containsKey(\"foo\"));\n+            assertNull(pc.getHelpers().get(\"foo\"));\n+            assertEquals(3, pc.getHelpers().size());\n+            assertEquals(h1, pc.getHelpers().get(\"h1\"));\n+            assertEquals(h2, pc.getHelpers().get(\"h2\"));\n+            pm.close();\n+            \n+            pm = (OpenJPAEntityManager)currentEntityManager();;\n+            pc = (MappedByMapPC) pm.getObjectId(oid);\n+            if (lrs)\n+                assertTrue(pc.getHelpers() instanceof AbstractLRSProxyMap);\n+            assertEquals(3, pc.getHelpers().size());\n+            assertFalse(pc.getHelpers().containsKey(\"foo\"));\n+            assertNull(pc.getHelpers().get(\"foo\"));\n+            assertEquals(\"h1\", ((HelperPC) pc.getHelpers().get(\"h1\")).\n+                    getStringField());\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\n+                    getStringField());\n+            \n+            pm.begin();\n+            pc.getHelpers().remove(\"h1\");\n+            assertEquals(2, pc.getHelpers().size());\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\n+            assertNull(pc.getHelpers().get(\"h1\"));\n+            HelperPC h4 = new HelperPC();\n+            h4.setStringField(\"h4\");\n+            pc.getHelpers().put(\"h4\", h4);\n+            assertTrue(pc.getHelpers().containsKey(\"h4\"));\n+            assertEquals(h4, pc.getHelpers().get(\"h4\"));\n+            assertEquals(3, pc.getHelpers().size());\n+            pm.commit();\n+            assertEquals(3, pc.getHelpers().size());\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\n+            assertNull(pc.getHelpers().get(\"h1\"));\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\n+                    getStringField());\n+            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\n+                    getStringField());\n+            pm.close();\n+            \n+            pm = (OpenJPAEntityManager)currentEntityManager();;\n+            pc = (MappedByMapPC) pm.getObjectId(oid);\n+            assertEquals(3, pc.getHelpers().size());\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\n+            assertNull(pc.getHelpers().get(\"h1\"));\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\n+                    getStringField());\n+            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\n+                    getStringField());\n+            \n+            // to test lrs functions\n+            assertTrue(pc.getHelpers().containsValue\n+                    (pc.getHelpers().get(\"h2\")));\n+            \n+            Set keySet = pc.getHelpers().keySet();\n+            Set ordered = new TreeSet();\n+            assertEquals(3, keySet.size());\n+            Iterator itr = keySet.iterator();\n+            while (itr.hasNext())\n+                ordered.add(itr.next());\n+            //FIXME jthomas\n+            //KodoJDOHelper.close(itr);\n+            assertEquals(3, ordered.size());\n+            assertTrue(ordered.contains(\"h2\"));\n+            assertTrue(ordered.contains(\"h3\"));\n+            assertTrue(ordered.contains(\"h4\"));\n+            ordered.clear();\n+            \n+            Collection values = pc.getHelpers().values();\n+            assertEquals(3, values.size());\n+            itr = values.iterator();\n+            while (itr.hasNext()) {\n+                Object next = itr.next();\n+                assertTrue(next instanceof HelperPC);\n+                ordered.add(((HelperPC) next).getStringField());\n+            }\n+            //FIXME jthomas\n+            //KodoJDOHelper.close(itr);\n+            assertEquals(3, ordered.size());\n+            assertTrue(ordered.contains(\"h2\"));\n+            assertTrue(ordered.contains(\"h3\"));\n+            assertTrue(ordered.contains(\"h4\"));\n+            pm.close();\n+        } finally {\n+            unsetLRS(pc.getClass());\n+        }\n+    }\n+    \n+    private void queryMap(MappedByMapPC pc) {\n+        HelperPC h5 = new HelperPC();\n+        h5.setStringField(\"h5\");\n+        pc.getHelpers().put(\"h5\", h5);\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.begin();\n+        pm.persist(pc);\n+        pm.commit();\n+        pm.close();\n+        \n+        pm = (OpenJPAEntityManager)currentEntityManager();;\n+        OpenJPAQuery q = pm.createNativeQuery(\"stringField == 'h2'\",HelperPC.class);\n+        //FIXME jthomas\n+        //q.setUnique(true);\n+        HelperPC h2 = (HelperPC) q.getSingleResult();\n+        \n+        q = pm.createNativeQuery(\"helpers.containsKey ('h2')\",pc.getClass());\n+        //FIXME jthomas\n+        //q.setUnique(true);\n+        pc = (MappedByMapPC) q.getSingleResult();\n+        assertEquals(3, pc.getHelpers().size());\n+        assertEquals(h2, pc.getHelpers().get(\"h2\"));\n+        \n+        q = pm.createNativeQuery(\"helpers.containsValue (:h2)\",pc.getClass());\n+        //FIXME  jthomas\n+        //q.setUnique(true);\n+        pc = (MappedByMapPC) q.getSingleResult();\n+        assertEquals(3, pc.getHelpers().size());\n+        assertEquals(h2, pc.getHelpers().get(\"h2\"));\n+        pm.close();\n+    }\n+    \n+    private void setLRS(Class cls, boolean lrs) {\n+        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\n+                getMappingRepositoryInstance().getMapping(cls, null, true);\n+        cm.getFieldMapping(\"helpers\").setLRS(lrs);\n+    }\n+    \n+    private void unsetLRS(Class cls) {\n+        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\n+                getMappingRepositoryInstance().getMapping(cls, null, true);\n+        cm.getFieldMapping(\"helpers\").setLRS(false);\n+    }\n+    \n+}"},{"sha":"987d44bc8babc9e21d9473198a638def55504a95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,141 +1,141 @@\n-/*\r\n- * TestMetaDataValueIndicator.java\r\n- *\r\n- * Created on October 4, 2006, 1:35 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\r\n-import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-\r\n-\r\n-public class TestMetaDataValueIndicator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{    \r\n-    private OpenJPAEntityManager pm;\r\n-    \r\n-    private ClassMapping eMapping;\r\n-    private ClassMapping fMapping;\r\n-    \r\n-    public TestMetaDataValueIndicator(String str) {\r\n-        super(str);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestMetaDataValueIndicator */\r\n-    public TestMetaDataValueIndicator() {\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-        // ### I hate that we have to do this\r\n-        Class c = MultiE.class;\r\n-        c = MultiF.class;\r\n-        \r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        eMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n-                getMetaDataRepositoryInstance().getMetaData(MultiE.class,\r\n-                pm.getClassLoader(), true);\r\n-        fMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n-                getMetaDataRepositoryInstance().getMetaData(MultiF.class,\r\n-                pm.getClassLoader(), true);\r\n-    }\r\n-    \r\n-    public void tearDown()\r\n-    throws Exception {\r\n-        if (pm.getTransaction().isActive())\r\n-            pm.getTransaction().rollback();\r\n-        pm.close();\r\n-        super.tearDown();\r\n-    }\r\n-    \r\n-    public void testMetaData() {\r\n-        assertEquals(ValueMapDiscriminatorStrategy.class,\r\n-                eMapping.getDiscriminator().getStrategy().getClass());\r\n-        assertEquals(SuperclassDiscriminatorStrategy.class,\r\n-                fMapping.getDiscriminator().getStrategy().getClass());\r\n-    }\r\n-    \r\n-    public void testOperations() {\r\n-       deleteAll(MultiE.class);\r\n-        \r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getTransaction().begin();\r\n-        \r\n-        MultiE e = new MultiE();\r\n-        e.setString0(\"foo\");\r\n-        pm.persist(e);\r\n-        \r\n-        MultiF f = new MultiF();\r\n-        f.setString0(\"bar\");\r\n-        pm.persist(f);\r\n-        \r\n-        pm.getTransaction().commit();\r\n-        \r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        //FIXME jthomas\r\n-        /* Cant find equivalent of getExtent()\r\n-        assertEquals(2, countExtent(pm.getExtent(MultiE.class, true)));\r\n-        assertEquals(1, countExtent(pm.getExtent(MultiE.class, false)));\r\n-        assertEquals(1, countExtent(pm.getExtent(MultiF.class, true)));\r\n-        assertEquals(1, countExtent(pm.getExtent(MultiF.class, false)));\r\n-         \r\n-        Object oid = pm.getObjectId\r\n-            (pm.getExtent(MultiE.class, true).iterator().next());\r\n-         */\r\n-        //FIXME remove the next line once the above block is fixed\r\n-        Object oid =null;\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        assertNotNull(pm.getObjectId(oid));\r\n-        pm.close();\r\n-        \r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        assertNotNull(pm.getObjectId(oid));\r\n-    }\r\n-    \r\n-    private int countExtent(Extent e) {\r\n-        int count = 0;\r\n-        for (Iterator iter = e.iterator(); iter.hasNext();) {\r\n-            iter.next();\r\n-            count++;\r\n-        }\r\n-        return count;\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestMetaDataValueIndicator.java\n+ *\n+ * Created on October 4, 2006, 1:35 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\n+import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\n+import org.apache.openjpa.persistence.Extent;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.*;\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+\n+public class TestMetaDataValueIndicator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{    \n+    private OpenJPAEntityManager pm;\n+    \n+    private ClassMapping eMapping;\n+    private ClassMapping fMapping;\n+    \n+    public TestMetaDataValueIndicator(String str) {\n+        super(str);\n+    }\n+    \n+    /** Creates a new instance of TestMetaDataValueIndicator */\n+    public TestMetaDataValueIndicator() {\n+    }\n+    \n+    public void setUp() {\n+        // ### I hate that we have to do this\n+        Class c = MultiE.class;\n+        c = MultiF.class;\n+        \n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        \n+        eMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData(MultiE.class,\n+                pm.getClassLoader(), true);\n+        fMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData(MultiF.class,\n+                pm.getClassLoader(), true);\n+    }\n+    \n+    public void tearDown()\n+    throws Exception {\n+        if (pm.getTransaction().isActive())\n+            pm.getTransaction().rollback();\n+        pm.close();\n+        super.tearDown();\n+    }\n+    \n+    public void testMetaData() {\n+        assertEquals(ValueMapDiscriminatorStrategy.class,\n+                eMapping.getDiscriminator().getStrategy().getClass());\n+        assertEquals(SuperclassDiscriminatorStrategy.class,\n+                fMapping.getDiscriminator().getStrategy().getClass());\n+    }\n+    \n+    public void testOperations() {\n+       deleteAll(MultiE.class);\n+        \n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getTransaction().begin();\n+        \n+        MultiE e = new MultiE();\n+        e.setString0(\"foo\");\n+        pm.persist(e);\n+        \n+        MultiF f = new MultiF();\n+        f.setString0(\"bar\");\n+        pm.persist(f);\n+        \n+        pm.getTransaction().commit();\n+        \n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        //FIXME jthomas\n+        /* Cant find equivalent of getExtent()\n+        assertEquals(2, countExtent(pm.getExtent(MultiE.class, true)));\n+        assertEquals(1, countExtent(pm.getExtent(MultiE.class, false)));\n+        assertEquals(1, countExtent(pm.getExtent(MultiF.class, true)));\n+        assertEquals(1, countExtent(pm.getExtent(MultiF.class, false)));\n+         \n+        Object oid = pm.getObjectId\n+            (pm.getExtent(MultiE.class, true).iterator().next());\n+         */\n+        //FIXME remove the next line once the above block is fixed\n+        Object oid =null;\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        assertNotNull(pm.getObjectId(oid));\n+        pm.close();\n+        \n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        assertNotNull(pm.getObjectId(oid));\n+    }\n+    \n+    private int countExtent(Extent e) {\n+        int count = 0;\n+        for (Iterator iter = e.iterator(); iter.hasNext();) {\n+            iter.next();\n+            count++;\n+        }\n+        return count;\n+    }\n+    \n+    \n+}"},{"sha":"cb4557bca74f786bd5b4a13f98dedb760e37c52c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * TestMultiDFG.java\r\n- *\r\n- * Created on October 4, 2006, 1:50 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.transaction.Transaction;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestMultiDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{    \r\n-    private Object boid;\r\n-    \r\n-    public TestMultiDFG(String name) {\r\n-        super(name);\r\n-    }\r\n-    \r\n-    \r\n-    /** Creates a new instance of TestMultiDFG */\r\n-    public TestMultiDFG() {\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-        \r\n-       deleteAll(MultiB.class);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        EntityTransaction t = pm.getTransaction();\r\n-        t.begin();\r\n-        MultiB b = new MultiB();\r\n-        pm.persist(b);\r\n-        t.commit();\r\n-        boid = pm.getObjectId(b);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testDFG() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        MultiB b = (MultiB) pm.getObjectId(boid);\r\n-        \r\n-        // check the non-dfg fields\r\n-        OpenJPAStateManager sm = getStateManager(b, pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"bString\");\r\n-        assertTrue(\"bString should not be loaded\",\r\n-                !sm.getLoaded().get(fmd.getIndex()));\r\n-        \r\n-        fmd = sm.getMetaData().getField(\"bInt\");\r\n-        assertTrue(\"bInt should not be loaded\",\r\n-                !sm.getLoaded().get(fmd.getIndex()));\r\n-        \r\n-        System.out.println(\"### getting values\");\r\n-        b.getBString();\r\n-        \r\n-        System.out.println(\"### getting values again\");\r\n-        b.getString0();\r\n-        b.getBString();\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestMultiDFG.java\n+ *\n+ * Created on October 4, 2006, 1:50 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import javax.persistence.EntityTransaction;\n+import javax.transaction.Transaction;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestMultiDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{    \n+    private Object boid;\n+    \n+    public TestMultiDFG(String name) {\n+        super(name);\n+    }\n+    \n+    \n+    /** Creates a new instance of TestMultiDFG */\n+    public TestMultiDFG() {\n+    }\n+    \n+    public void setUp() {\n+        \n+       deleteAll(MultiB.class);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        EntityTransaction t = pm.getTransaction();\n+        t.begin();\n+        MultiB b = new MultiB();\n+        pm.persist(b);\n+        t.commit();\n+        boid = pm.getObjectId(b);\n+        pm.close();\n+    }\n+    \n+    public void testDFG() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        MultiB b = (MultiB) pm.getObjectId(boid);\n+        \n+        // check the non-dfg fields\n+        OpenJPAStateManager sm = getStateManager(b, pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"bString\");\n+        assertTrue(\"bString should not be loaded\",\n+                !sm.getLoaded().get(fmd.getIndex()));\n+        \n+        fmd = sm.getMetaData().getField(\"bInt\");\n+        assertTrue(\"bInt should not be loaded\",\n+                !sm.getLoaded().get(fmd.getIndex()));\n+        \n+        System.out.println(\"### getting values\");\n+        b.getBString();\n+        \n+        System.out.println(\"### getting values again\");\n+        b.getString0();\n+        b.getBString();\n+        \n+        pm.close();\n+    }\n+    \n+    \n+}"},{"sha":"8b3980d79bb6a57cd1f31f815ec9cb4fa95864bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","status":"modified","additions":237,"deletions":237,"changes":474,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,237 +1,237 @@\n-/*\r\n- * TestMultiTableMappings.java\r\n- *\r\n- * Created on October 4, 2006, 4:09 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import javax.persistence.EntityTransaction;\r\n-import javax.transaction.Transaction;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.jdbc.JDBCFetchPlan;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestMultiTableMappings extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n-    \r\n-\r\n-    private Object aoid;\r\n-    private Object boid;\r\n-    private Object coid;\r\n-    private Object doid;\r\n-    \r\n-    public TestMultiTableMappings(String name) {\r\n-        super(name);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestMultiTableMappings */\r\n-    public TestMultiTableMappings() {\r\n-    }\r\n-    \r\n-    public void setUpTestCase() {\r\n-       deleteAll(MultiA.class);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Collection os = new ArrayList();\r\n-        MultiA a = new MultiA();\r\n-        MultiB b = new MultiB();\r\n-        MultiC c = new MultiC();\r\n-        MultiD d = new MultiD();\r\n-        os.add(a);\r\n-        os.add(b);\r\n-        os.add(c);\r\n-        os.add(d);\r\n-        d.setA(new MultiA());\r\n-        os.add(new MultiD());\r\n-        d.setDString1(\"d string 1\");\r\n-        \r\n-        EntityTransaction t = pm.getTransaction();\r\n-        t.begin();\r\n-        pm.persistAll(os);\r\n-        t.commit();\r\n-        aoid = pm.getObjectId(a);\r\n-        boid = pm.getObjectId(b);\r\n-        coid = pm.getObjectId(c);\r\n-        doid = pm.getObjectId(d);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void XXXtestUpdates() {\r\n-        //TEST DISABLED ... not converted\r\n-        /*\r\n-        PersistenceManager pm = getPM();\r\n-        Transaction t = pm.currentTransaction();\r\n-        try {\r\n-            for (int i = 0; i < 2; i++) {\r\n-                t.begin();\r\n-                changeA((MultiA) pm.getObjectById(aoid, i == 0));\r\n-                changeB((MultiB) pm.getObjectById(boid, i == 0));\r\n-                changeC((MultiC) pm.getObjectById(coid, i == 0));\r\n-                changeD((MultiD) pm.getObjectById(doid, i == 0));\r\n-                t.commit();\r\n-            }\r\n-        } finally {\r\n-            if (t.isActive()) {\r\n-                t.rollback();\r\n-            }\r\n-            pm.close();\r\n-        }\r\n-         */\r\n-    }\r\n-    \r\n-    public void XXXtestInserts() {\r\n-        //TEST DISABLED ... not converted\r\n-        /*\r\n-        PersistenceManager pm = getPM();\r\n-        assertEquals(2,\r\n-                ((Collection) pm.newQuery\r\n-                (pm.getExtent(MultiA.class, false)).execute()).size());\r\n-         \r\n-        assertEquals(4,\r\n-                ((Collection) pm.newQuery\r\n-                (pm.getExtent(MultiB.class, true)).execute()).size());\r\n-         \r\n-        assertEquals(1,\r\n-                ((Collection) pm.newQuery\r\n-                (pm.getExtent(MultiB.class, false)).execute()).size());\r\n-         \r\n-        assertEquals(1,\r\n-                ((Collection) pm.newQuery\r\n-                (pm.getExtent(MultiC.class, false)).execute()).size());\r\n-         \r\n-        assertEquals(2,\r\n-                ((Collection) pm.newQuery\r\n-                (pm.getExtent(MultiD.class, false)).execute()).size());\r\n-         \r\n-        assertEquals(6,\r\n-                ((Collection) pm.newQuery\r\n-                (pm.getExtent(MultiA.class, true)).execute()).size());\r\n-         \r\n-        pm.close();\r\n-         */\r\n-    }\r\n-    \r\n-    public void XXXtestOneToOne() {\r\n-        //TEST DISABLED ... not converted\r\n-        /*\r\n-        PersistenceManager pm = getPM();\r\n-        MultiD d = (MultiD) pm.getObjectById(doid, true);\r\n-        assertNotNull(d.getA());\r\n-        pm.close();\r\n-         */\r\n-    }\r\n-    \r\n-    public void XXXtestQueries() {\r\n-        //TEST DISABLED ... not converted\r\n-        /*\r\n-        PersistenceManager pm = getPM();\r\n-        Query q = pm.newQuery(pm.getExtent(MultiD.class, false),\r\n-                \"dString1 == \\\"d string 1\\\"\");\r\n-        //### this behaves like '\"\"': \"d string 1\");\r\n-        Collection c = (Collection) q.execute();\r\n-        assertEquals(1, c.size());\r\n-        pm.close();\r\n-         */\r\n-    }\r\n-    \r\n-    // ### more tests:\r\n-    // ### - horizontal with extent with subclass=false\r\n-    // ### - aggregates with horizontal, interface, this stuff,\r\n-    // ### - base A, vertical B extends A, virtual C extends B,\r\n-    // ###   vertical D extends C, vertical E extends C, flat F extends C\r\n-    \r\n-    public void testVerticalQueryModeQueries() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",MultiA.class);\r\n-        ((JDBCFetchPlan) q.getFetchPlan()).\r\n-                setSubclassFetchMode(JDBCFetchPlan.EAGER_PARALLEL);\r\n-        // we need ordering; otherwise kodo is smart enough to only run first\r\n-        // select until its results are exhausted\r\n-        \r\n-        //FIXME jthomas\r\n-        //q.setOrdering(\"string0 ascending\");\r\n-        sql.clear();\r\n-        assertEquals(sql.toString(), 0, sql.size());\r\n-        \r\n-        Collection c = (Collection) q.getCandidateCollection();\r\n-        \r\n-        // account for the select distinct\r\n-        if (((String) sql.get(0)).startsWith(\"SELECT DISTINCT\"))\r\n-            assertEquals(sql.toString(), 5, sql.size());\r\n-        else\r\n-            assertEquals(sql.toString(), 4, sql.size());\r\n-        sql.clear();\r\n-        \r\n-        assertEquals(6, c.size());\r\n-        \r\n-        // only check for counts sql if any was executed (some databases\r\n-        // might eagerly instantiate all the rows, such as pointbase)\r\n-        if (sql.size() != 0)\r\n-            assertEquals(sql.toString(), 4, sql.size()); // select counts\r\n-        sql.clear();\r\n-        \r\n-        // walk through the results. This will cause individual\r\n-        // objects to be loaded, and therefore the dfgs to be loaded,\r\n-        // and therefore any additional SQL to be executed.\r\n-        for (Iterator iter = c.iterator(); iter.hasNext();)\r\n-            iter.next();\r\n-        \r\n-        assertEquals(sql.toString(), 0, sql.size());\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    private void changeA(MultiA a) {\r\n-        a.setString0(a.getString0() + \" changed\");\r\n-        a.setInt0(a.getInt0() + 1);\r\n-    }\r\n-    \r\n-    private void changeB(MultiB b) {\r\n-        changeA(b);\r\n-        b.setBString(b.getBString() + \" changed\");\r\n-    }\r\n-    \r\n-    private void changeC(MultiC c) {\r\n-        changeB(c);\r\n-        c.setCString0(c.getCString0() + \" changed\");\r\n-    }\r\n-    \r\n-    private void changeD(MultiD d) {\r\n-        changeB(d);\r\n-        d.setDString0(d.getDString0() + \" changed\");\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestMultiTableMappings.java\n+ *\n+ * Created on October 4, 2006, 4:09 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import javax.persistence.EntityTransaction;\n+import javax.transaction.Transaction;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.jdbc.JDBCFetchPlan;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestMultiTableMappings extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\n+    \n+\n+    private Object aoid;\n+    private Object boid;\n+    private Object coid;\n+    private Object doid;\n+    \n+    public TestMultiTableMappings(String name) {\n+        super(name);\n+    }\n+    \n+    /** Creates a new instance of TestMultiTableMappings */\n+    public TestMultiTableMappings() {\n+    }\n+    \n+    public void setUpTestCase() {\n+       deleteAll(MultiA.class);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Collection os = new ArrayList();\n+        MultiA a = new MultiA();\n+        MultiB b = new MultiB();\n+        MultiC c = new MultiC();\n+        MultiD d = new MultiD();\n+        os.add(a);\n+        os.add(b);\n+        os.add(c);\n+        os.add(d);\n+        d.setA(new MultiA());\n+        os.add(new MultiD());\n+        d.setDString1(\"d string 1\");\n+        \n+        EntityTransaction t = pm.getTransaction();\n+        t.begin();\n+        pm.persistAll(os);\n+        t.commit();\n+        aoid = pm.getObjectId(a);\n+        boid = pm.getObjectId(b);\n+        coid = pm.getObjectId(c);\n+        doid = pm.getObjectId(d);\n+        pm.close();\n+    }\n+    \n+    public void XXXtestUpdates() {\n+        //TEST DISABLED ... not converted\n+        /*\n+        PersistenceManager pm = getPM();\n+        Transaction t = pm.currentTransaction();\n+        try {\n+            for (int i = 0; i < 2; i++) {\n+                t.begin();\n+                changeA((MultiA) pm.getObjectById(aoid, i == 0));\n+                changeB((MultiB) pm.getObjectById(boid, i == 0));\n+                changeC((MultiC) pm.getObjectById(coid, i == 0));\n+                changeD((MultiD) pm.getObjectById(doid, i == 0));\n+                t.commit();\n+            }\n+        } finally {\n+            if (t.isActive()) {\n+                t.rollback();\n+            }\n+            pm.close();\n+        }\n+         */\n+    }\n+    \n+    public void XXXtestInserts() {\n+        //TEST DISABLED ... not converted\n+        /*\n+        PersistenceManager pm = getPM();\n+        assertEquals(2,\n+                ((Collection) pm.newQuery\n+                (pm.getExtent(MultiA.class, false)).execute()).size());\n+         \n+        assertEquals(4,\n+                ((Collection) pm.newQuery\n+                (pm.getExtent(MultiB.class, true)).execute()).size());\n+         \n+        assertEquals(1,\n+                ((Collection) pm.newQuery\n+                (pm.getExtent(MultiB.class, false)).execute()).size());\n+         \n+        assertEquals(1,\n+                ((Collection) pm.newQuery\n+                (pm.getExtent(MultiC.class, false)).execute()).size());\n+         \n+        assertEquals(2,\n+                ((Collection) pm.newQuery\n+                (pm.getExtent(MultiD.class, false)).execute()).size());\n+         \n+        assertEquals(6,\n+                ((Collection) pm.newQuery\n+                (pm.getExtent(MultiA.class, true)).execute()).size());\n+         \n+        pm.close();\n+         */\n+    }\n+    \n+    public void XXXtestOneToOne() {\n+        //TEST DISABLED ... not converted\n+        /*\n+        PersistenceManager pm = getPM();\n+        MultiD d = (MultiD) pm.getObjectById(doid, true);\n+        assertNotNull(d.getA());\n+        pm.close();\n+         */\n+    }\n+    \n+    public void XXXtestQueries() {\n+        //TEST DISABLED ... not converted\n+        /*\n+        PersistenceManager pm = getPM();\n+        Query q = pm.newQuery(pm.getExtent(MultiD.class, false),\n+                \"dString1 == \\\"d string 1\\\"\");\n+        //### this behaves like '\"\"': \"d string 1\");\n+        Collection c = (Collection) q.execute();\n+        assertEquals(1, c.size());\n+        pm.close();\n+         */\n+    }\n+    \n+    // ### more tests:\n+    // ### - horizontal with extent with subclass=false\n+    // ### - aggregates with horizontal, interface, this stuff,\n+    // ### - base A, vertical B extends A, virtual C extends B,\n+    // ###   vertical D extends C, vertical E extends C, flat F extends C\n+    \n+    public void testVerticalQueryModeQueries() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",MultiA.class);\n+        ((JDBCFetchPlan) q.getFetchPlan()).\n+                setSubclassFetchMode(JDBCFetchPlan.EAGER_PARALLEL);\n+        // we need ordering; otherwise kodo is smart enough to only run first\n+        // select until its results are exhausted\n+        \n+        //FIXME jthomas\n+        //q.setOrdering(\"string0 ascending\");\n+        sql.clear();\n+        assertEquals(sql.toString(), 0, sql.size());\n+        \n+        Collection c = (Collection) q.getCandidateCollection();\n+        \n+        // account for the select distinct\n+        if (((String) sql.get(0)).startsWith(\"SELECT DISTINCT\"))\n+            assertEquals(sql.toString(), 5, sql.size());\n+        else\n+            assertEquals(sql.toString(), 4, sql.size());\n+        sql.clear();\n+        \n+        assertEquals(6, c.size());\n+        \n+        // only check for counts sql if any was executed (some databases\n+        // might eagerly instantiate all the rows, such as pointbase)\n+        if (sql.size() != 0)\n+            assertEquals(sql.toString(), 4, sql.size()); // select counts\n+        sql.clear();\n+        \n+        // walk through the results. This will cause individual\n+        // objects to be loaded, and therefore the dfgs to be loaded,\n+        // and therefore any additional SQL to be executed.\n+        for (Iterator iter = c.iterator(); iter.hasNext();)\n+            iter.next();\n+        \n+        assertEquals(sql.toString(), 0, sql.size());\n+        \n+        pm.close();\n+    }\n+    \n+    private void changeA(MultiA a) {\n+        a.setString0(a.getString0() + \" changed\");\n+        a.setInt0(a.getInt0() + 1);\n+    }\n+    \n+    private void changeB(MultiB b) {\n+        changeA(b);\n+        b.setBString(b.getBString() + \" changed\");\n+    }\n+    \n+    private void changeC(MultiC c) {\n+        changeB(c);\n+        c.setCString0(c.getCString0() + \" changed\");\n+    }\n+    \n+    private void changeD(MultiD d) {\n+        changeB(d);\n+        d.setDString0(d.getDString0() + \" changed\");\n+    }\n+    \n+    \n+}"},{"sha":"5750afd1b0e55850b9544af9377690f57bc67b0d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","status":"modified","additions":209,"deletions":209,"changes":418,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,209 +1,209 @@\n-/*\r\n- * TestMultiTableSelfCollection.java\r\n- *\r\n- * Created on October 4, 2006, 2:35 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestMultiTableSelfCollection extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{    \r\n-    private Object a1oid;\r\n-    private Object a2oid;\r\n-    private Object a3oid;\r\n-    private Object a4oid;\r\n-    \r\n-    private Object c1oid;\r\n-    private Object c2oid;\r\n-    private Object c3oid;\r\n-    private Object c4oid;\r\n-    \r\n-    public TestMultiTableSelfCollection(String name) {\r\n-        super(name);\r\n-    }\r\n-    \r\n-    /** Creates a new instance of TestMultiTableSelfCollection */\r\n-    public TestMultiTableSelfCollection() {\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-       deleteAll(MultiA.class);\r\n-        \r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getTransaction().begin();\r\n-        \r\n-        Collection os = new ArrayList();\r\n-        MultiA a1 = new MultiA();\r\n-        MultiA a2 = new MultiA();\r\n-        MultiA a3 = new MultiA();\r\n-        MultiA a4 = new MultiA();\r\n-        MultiC c1 = new MultiC();\r\n-        MultiC c2 = new MultiC();\r\n-        MultiC c3 = new MultiC();\r\n-        MultiC c4 = new MultiC();\r\n-        os.add(a1);\r\n-        os.add(a2);\r\n-        os.add(a3);\r\n-        os.add(a4);\r\n-        os.add(c1);\r\n-        os.add(c2);\r\n-        os.add(c3);\r\n-        os.add(c4);\r\n-        \r\n-        c1.getMultiAs().add(a1);\r\n-        c1.getMultiAs().add(a2);\r\n-        a1.getMultiCs().add(c1);\r\n-        a2.getMultiCs().add(c1);\r\n-        \r\n-        c2.getMultiAs().add(a1);\r\n-        c2.getMultiAs().add(a2);\r\n-        a1.getMultiCs().add(c2);\r\n-        a2.getMultiCs().add(c2);\r\n-        \r\n-        c3.getMultiAs().add(a3);\r\n-        c3.getMultiAs().add(a4);\r\n-        a3.getMultiCs().add(c3);\r\n-        a4.getMultiCs().add(c3);\r\n-        \r\n-        c4.getMultiAs().add(a3);\r\n-        c4.getMultiAs().add(a4);\r\n-        a3.getMultiCs().add(c4);\r\n-        a4.getMultiCs().add(c4);\r\n-        \r\n-        pm.persistAll(os);\r\n-        pm.getTransaction().commit();\r\n-        \r\n-        a1oid = pm.getObjectId(a1);\r\n-        a2oid = pm.getObjectId(a2);\r\n-        a3oid = pm.getObjectId(a3);\r\n-        a4oid = pm.getObjectId(a4);\r\n-        \r\n-        c1oid = pm.getObjectId(c1);\r\n-        c2oid = pm.getObjectId(c2);\r\n-        c3oid = pm.getObjectId(c3);\r\n-        c4oid = pm.getObjectId(c4);\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testSelfCollections() {\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        // check that all the sets are the right size, and equal where\r\n-        // they should be.\r\n-        \r\n-        MultiA a1 = (MultiA) pm.getObjectId(a1oid);\r\n-        assertEquals(2, a1.getMultiCs().size());\r\n-        \r\n-        MultiA a2 = (MultiA) pm.getObjectId(a2oid);\r\n-        assertEquals(2, a2.getMultiCs().size());\r\n-        \r\n-        assertEquals(a1.getMultiCs(), a2.getMultiCs());\r\n-        \r\n-        MultiA a3 = (MultiA) pm.getObjectId(a3oid);\r\n-        assertEquals(2, a3.getMultiCs().size());\r\n-        \r\n-        MultiA a4 = (MultiA) pm.getObjectId(a4oid);\r\n-        assertEquals(2, a4.getMultiCs().size());\r\n-        \r\n-        assertEquals(a3.getMultiCs(), a4.getMultiCs());\r\n-        \r\n-        MultiC c1 = (MultiC) pm.getObjectId(c1oid);\r\n-        assertEquals(2, c1.getMultiAs().size());\r\n-        \r\n-        MultiC c2 = (MultiC) pm.getObjectId(c2oid);\r\n-        assertEquals(2, c2.getMultiAs().size());\r\n-        \r\n-        assertEquals(c1.getMultiAs(), c2.getMultiAs());\r\n-        \r\n-        MultiC c3 = (MultiC) pm.getObjectId(c3oid);\r\n-        assertEquals(2, c3.getMultiAs().size());\r\n-        \r\n-        MultiC c4 = (MultiC) pm.getObjectId(c4oid);\r\n-        assertEquals(2, c4.getMultiAs().size());\r\n-        \r\n-        assertEquals(c3.getMultiAs(), c4.getMultiAs());\r\n-        \r\n-        // check that all the sets contain the correct values, and\r\n-        // don't contain the wrong values. Probably don't need to do\r\n-        // the above check as well.\r\n-        \r\n-        assertTrue(a1.getMultiCs().contains(c1));\r\n-        assertTrue(a1.getMultiCs().contains(c2));\r\n-        assertTrue(!a1.getMultiCs().contains(c3));\r\n-        assertTrue(!a1.getMultiCs().contains(c4));\r\n-        \r\n-        assertTrue(a2.getMultiCs().contains(c1));\r\n-        assertTrue(a2.getMultiCs().contains(c2));\r\n-        assertTrue(!a2.getMultiCs().contains(c3));\r\n-        assertTrue(!a2.getMultiCs().contains(c4));\r\n-        \r\n-        assertTrue(!a3.getMultiCs().contains(c1));\r\n-        assertTrue(!a3.getMultiCs().contains(c2));\r\n-        assertTrue(a3.getMultiCs().contains(c3));\r\n-        assertTrue(a3.getMultiCs().contains(c4));\r\n-        \r\n-        assertTrue(!a4.getMultiCs().contains(c1));\r\n-        assertTrue(!a4.getMultiCs().contains(c2));\r\n-        assertTrue(a4.getMultiCs().contains(c3));\r\n-        assertTrue(a4.getMultiCs().contains(c4));\r\n-        \r\n-        assertTrue(c1.getMultiAs().contains(a1));\r\n-        assertTrue(c1.getMultiAs().contains(a2));\r\n-        assertTrue(!c1.getMultiAs().contains(a3));\r\n-        assertTrue(!c1.getMultiAs().contains(a4));\r\n-        \r\n-        assertTrue(c2.getMultiAs().contains(a1));\r\n-        assertTrue(c2.getMultiAs().contains(a2));\r\n-        assertTrue(!c2.getMultiAs().contains(a3));\r\n-        assertTrue(!c2.getMultiAs().contains(a4));\r\n-        \r\n-        assertTrue(!c3.getMultiAs().contains(a1));\r\n-        assertTrue(!c3.getMultiAs().contains(a2));\r\n-        assertTrue(c3.getMultiAs().contains(a3));\r\n-        assertTrue(c3.getMultiAs().contains(a4));\r\n-        \r\n-        assertTrue(!c4.getMultiAs().contains(a1));\r\n-        assertTrue(!c4.getMultiAs().contains(a2));\r\n-        assertTrue(c4.getMultiAs().contains(a3));\r\n-        assertTrue(c4.getMultiAs().contains(a4));\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestMultiTableSelfCollection.java\n+ *\n+ * Created on October 4, 2006, 2:35 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestMultiTableSelfCollection extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{    \n+    private Object a1oid;\n+    private Object a2oid;\n+    private Object a3oid;\n+    private Object a4oid;\n+    \n+    private Object c1oid;\n+    private Object c2oid;\n+    private Object c3oid;\n+    private Object c4oid;\n+    \n+    public TestMultiTableSelfCollection(String name) {\n+        super(name);\n+    }\n+    \n+    /** Creates a new instance of TestMultiTableSelfCollection */\n+    public TestMultiTableSelfCollection() {\n+    }\n+    \n+    public void setUp() {\n+       deleteAll(MultiA.class);\n+        \n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        pm.getTransaction().begin();\n+        \n+        Collection os = new ArrayList();\n+        MultiA a1 = new MultiA();\n+        MultiA a2 = new MultiA();\n+        MultiA a3 = new MultiA();\n+        MultiA a4 = new MultiA();\n+        MultiC c1 = new MultiC();\n+        MultiC c2 = new MultiC();\n+        MultiC c3 = new MultiC();\n+        MultiC c4 = new MultiC();\n+        os.add(a1);\n+        os.add(a2);\n+        os.add(a3);\n+        os.add(a4);\n+        os.add(c1);\n+        os.add(c2);\n+        os.add(c3);\n+        os.add(c4);\n+        \n+        c1.getMultiAs().add(a1);\n+        c1.getMultiAs().add(a2);\n+        a1.getMultiCs().add(c1);\n+        a2.getMultiCs().add(c1);\n+        \n+        c2.getMultiAs().add(a1);\n+        c2.getMultiAs().add(a2);\n+        a1.getMultiCs().add(c2);\n+        a2.getMultiCs().add(c2);\n+        \n+        c3.getMultiAs().add(a3);\n+        c3.getMultiAs().add(a4);\n+        a3.getMultiCs().add(c3);\n+        a4.getMultiCs().add(c3);\n+        \n+        c4.getMultiAs().add(a3);\n+        c4.getMultiAs().add(a4);\n+        a3.getMultiCs().add(c4);\n+        a4.getMultiCs().add(c4);\n+        \n+        pm.persistAll(os);\n+        pm.getTransaction().commit();\n+        \n+        a1oid = pm.getObjectId(a1);\n+        a2oid = pm.getObjectId(a2);\n+        a3oid = pm.getObjectId(a3);\n+        a4oid = pm.getObjectId(a4);\n+        \n+        c1oid = pm.getObjectId(c1);\n+        c2oid = pm.getObjectId(c2);\n+        c3oid = pm.getObjectId(c3);\n+        c4oid = pm.getObjectId(c4);\n+        \n+        pm.close();\n+    }\n+    \n+    public void testSelfCollections() {\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\n+        \n+        // check that all the sets are the right size, and equal where\n+        // they should be.\n+        \n+        MultiA a1 = (MultiA) pm.getObjectId(a1oid);\n+        assertEquals(2, a1.getMultiCs().size());\n+        \n+        MultiA a2 = (MultiA) pm.getObjectId(a2oid);\n+        assertEquals(2, a2.getMultiCs().size());\n+        \n+        assertEquals(a1.getMultiCs(), a2.getMultiCs());\n+        \n+        MultiA a3 = (MultiA) pm.getObjectId(a3oid);\n+        assertEquals(2, a3.getMultiCs().size());\n+        \n+        MultiA a4 = (MultiA) pm.getObjectId(a4oid);\n+        assertEquals(2, a4.getMultiCs().size());\n+        \n+        assertEquals(a3.getMultiCs(), a4.getMultiCs());\n+        \n+        MultiC c1 = (MultiC) pm.getObjectId(c1oid);\n+        assertEquals(2, c1.getMultiAs().size());\n+        \n+        MultiC c2 = (MultiC) pm.getObjectId(c2oid);\n+        assertEquals(2, c2.getMultiAs().size());\n+        \n+        assertEquals(c1.getMultiAs(), c2.getMultiAs());\n+        \n+        MultiC c3 = (MultiC) pm.getObjectId(c3oid);\n+        assertEquals(2, c3.getMultiAs().size());\n+        \n+        MultiC c4 = (MultiC) pm.getObjectId(c4oid);\n+        assertEquals(2, c4.getMultiAs().size());\n+        \n+        assertEquals(c3.getMultiAs(), c4.getMultiAs());\n+        \n+        // check that all the sets contain the correct values, and\n+        // don't contain the wrong values. Probably don't need to do\n+        // the above check as well.\n+        \n+        assertTrue(a1.getMultiCs().contains(c1));\n+        assertTrue(a1.getMultiCs().contains(c2));\n+        assertTrue(!a1.getMultiCs().contains(c3));\n+        assertTrue(!a1.getMultiCs().contains(c4));\n+        \n+        assertTrue(a2.getMultiCs().contains(c1));\n+        assertTrue(a2.getMultiCs().contains(c2));\n+        assertTrue(!a2.getMultiCs().contains(c3));\n+        assertTrue(!a2.getMultiCs().contains(c4));\n+        \n+        assertTrue(!a3.getMultiCs().contains(c1));\n+        assertTrue(!a3.getMultiCs().contains(c2));\n+        assertTrue(a3.getMultiCs().contains(c3));\n+        assertTrue(a3.getMultiCs().contains(c4));\n+        \n+        assertTrue(!a4.getMultiCs().contains(c1));\n+        assertTrue(!a4.getMultiCs().contains(c2));\n+        assertTrue(a4.getMultiCs().contains(c3));\n+        assertTrue(a4.getMultiCs().contains(c4));\n+        \n+        assertTrue(c1.getMultiAs().contains(a1));\n+        assertTrue(c1.getMultiAs().contains(a2));\n+        assertTrue(!c1.getMultiAs().contains(a3));\n+        assertTrue(!c1.getMultiAs().contains(a4));\n+        \n+        assertTrue(c2.getMultiAs().contains(a1));\n+        assertTrue(c2.getMultiAs().contains(a2));\n+        assertTrue(!c2.getMultiAs().contains(a3));\n+        assertTrue(!c2.getMultiAs().contains(a4));\n+        \n+        assertTrue(!c3.getMultiAs().contains(a1));\n+        assertTrue(!c3.getMultiAs().contains(a2));\n+        assertTrue(c3.getMultiAs().contains(a3));\n+        assertTrue(c3.getMultiAs().contains(a4));\n+        \n+        assertTrue(!c4.getMultiAs().contains(a1));\n+        assertTrue(!c4.getMultiAs().contains(a2));\n+        assertTrue(c4.getMultiAs().contains(a3));\n+        assertTrue(c4.getMultiAs().contains(a4));\n+        \n+        pm.close();\n+    }\n+    \n+    \n+}"},{"sha":"d4032338abff9b46d961b6734010ca611a3847bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","status":"modified","additions":68,"deletions":68,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,68 +1,68 @@\n-/*\r\n- * TestNoClassColumn.java\r\n- *\r\n- * Created on October 4, 2006, 2:44 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestNoClassColumn extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-        \r\n-    /** Creates a new instance of TestNoClassColumn */\r\n-    public TestNoClassColumn() {\r\n-    }\r\n-\r\n-    public TestNoClassColumn(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void testQuery() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",NoClassColumn.class);\r\n-        //FIXME jthomas\r\n-        //q.declareParameters(\"java.lang.String input\");\r\n-        //q.setFilter(\"test==input\");\r\n-        Map params = new HashMap();\r\n-        params.put(\"input\", \"blah\");\r\n-        //FIXME jthomas\r\n-        //Collection c = (Collection) q.executeWithMap(params);\r\n-        pm.close();\r\n-    }    \r\n-    \r\n-}\r\n+/*\n+ * TestNoClassColumn.java\n+ *\n+ * Created on October 4, 2006, 2:44 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestNoClassColumn extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+        \n+    /** Creates a new instance of TestNoClassColumn */\n+    public TestNoClassColumn() {\n+    }\n+\n+    public TestNoClassColumn(String test) {\n+        super(test);\n+    }\n+\n+    public void testQuery() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",NoClassColumn.class);\n+        //FIXME jthomas\n+        //q.declareParameters(\"java.lang.String input\");\n+        //q.setFilter(\"test==input\");\n+        Map params = new HashMap();\n+        params.put(\"input\", \"blah\");\n+        //FIXME jthomas\n+        //Collection c = (Collection) q.executeWithMap(params);\n+        pm.close();\n+    }    \n+    \n+}"},{"sha":"45e8316de6568a4a40c4a121504e1b41f562a301","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * TestRawField.java\r\n- *\r\n- * Created on October 4, 2006, 2:57 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestRawField extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n-    \r\n-    /** Creates a new instance of TestRawField */\r\n-    public TestRawField(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public void setUp() {\r\n-       deleteAll(RawField.class);\r\n-    }\r\n-\r\n-    public void testRaw() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getTransaction().begin();\r\n-        RawField pc = new RawField();\r\n-        pc.setString(\"BAR\");\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-\r\n-        // batching?\r\n-        pc = new RawField();\r\n-        pc.setString(\"GOO\");\r\n-        pm.persist(pc);\r\n-        pm.getTransaction().commit();\r\n-        pm.close();\r\n-\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (RawField) pm.getObjectId(oid);\r\n-        assertEquals(pc.getString(), \"BARFOO\", pc.getString());\r\n-        pm.close();\r\n-    }    \r\n-}\r\n+/*\n+ * TestRawField.java\n+ *\n+ * Created on October 4, 2006, 2:57 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestRawField extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\n+    \n+    /** Creates a new instance of TestRawField */\n+    public TestRawField(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public void setUp() {\n+       deleteAll(RawField.class);\n+    }\n+\n+    public void testRaw() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getTransaction().begin();\n+        RawField pc = new RawField();\n+        pc.setString(\"BAR\");\n+        pm.persist(pc);\n+        Object oid = pm.getObjectId(pc);\n+\n+        // batching?\n+        pc = new RawField();\n+        pc.setString(\"GOO\");\n+        pm.persist(pc);\n+        pm.getTransaction().commit();\n+        pm.close();\n+\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pc = (RawField) pm.getObjectId(oid);\n+        assertEquals(pc.getString(), \"BARFOO\", pc.getString());\n+        pm.close();\n+    }    \n+}"},{"sha":"c00a0c9764adbfb686bbe33c13e5e831700b2253","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","status":"modified","additions":241,"deletions":241,"changes":482,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,241 +1,241 @@\n-/*\r\n- * TestStateImage.java\r\n- *\r\n- * Created on October 4, 2006, 3:09 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestStateImage extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n-    private Object _oid = null;\r\n-    \r\n-    /** Creates a new instance of TestStateImage */\r\n-    public TestStateImage() {\r\n-    }\r\n-    public TestStateImage(String test) {\r\n-        super(test);\r\n-    }\r\n-    \r\n-    \r\n-    public void setUpTestCase() {\r\n-       deleteAll(StateImagePC2.class);\r\n-       deleteAll(StateImagePC3.class);\r\n-        \r\n-        StateImagePC2 pc = new StateImagePC2();\r\n-        pc.setStringField(\"string1\");\r\n-        pc.setIntField(1);\r\n-        StateImagePC2 pc2 = new StateImagePC2();\r\n-        pc2.setStringField(\"string2\");\r\n-        pc2.setIntField(2);\r\n-        pc.setStateImage(pc2);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getTransaction().begin();\r\n-        pm.persist(pc);\r\n-        _oid = pm.getObjectId(pc);\r\n-        pm.getTransaction().commit();\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testOptLock() {\r\n-        OpenJPAEntityManager pm1 = getEm(true, true);\r\n-        OpenJPAEntityManager pm2 = getEm(true, true);\r\n-        \r\n-        pm1.getTransaction().begin();\r\n-        pm2.getTransaction().begin();\r\n-        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\r\n-        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\r\n-        \r\n-        pc1.setIntField(3);\r\n-        pc1.setStateImage(null);\r\n-        \r\n-        pc2.setIntField(4);\r\n-        \r\n-        pm1.getTransaction().commit();\r\n-        try {\r\n-            pm2.getTransaction().commit();\r\n-            fail(\"Should have caused OL exception.\");\r\n-        } catch (Exception jfe) {\r\n-            pm2.getTransaction().begin();\r\n-            pm2.refresh(pc2);\r\n-            pc2.setIntField(4);\r\n-            pm2.getTransaction().commit();\r\n-        }\r\n-        \r\n-        // make sure the next transaction works too\r\n-        pm2.getTransaction().begin();\r\n-        pc2.setIntField(5);\r\n-        pm2.getTransaction().commit();\r\n-        \r\n-        pm1.getTransaction().begin();\r\n-        pm1.refresh(pc1);\r\n-        pc1.setIntField(6);\r\n-        \r\n-        pm2.getTransaction().begin();\r\n-        pc2.setIntField(7);\r\n-        \r\n-        pm1.getTransaction().commit();\r\n-        try {\r\n-            pm2.getTransaction().commit();\r\n-            fail(\"Should have caused OL exception.\");\r\n-        } catch (Exception jfe) {\r\n-            pm2.getTransaction().begin();\r\n-            pm2.refresh(pc2);\r\n-            pc2.setIntField(7);\r\n-            pm2.getTransaction().commit();\r\n-        }\r\n-        pm1.close();\r\n-        pm2.close();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\r\n-        assertNull(pc.getStateImage());\r\n-        assertEquals(7, pc.getIntField());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    /**\r\n-     * This currently isn't working: state-image locking will not\r\n-     * detect when someone else updated the row before deleting.\r\n-     */\r\n-    public void NOTWORKINGtestOptLockWithDelete() {\r\n-        OpenJPAEntityManager pm1 = getEm(true, true);\r\n-        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\r\n-        \r\n-        OpenJPAEntityManager pm2 = getEm(true, true);\r\n-        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\r\n-        \r\n-        pm1.getTransaction().begin();\r\n-        pc1.setIntField(3);\r\n-        \r\n-        pm2.getTransaction().begin();\r\n-        pm2.remove(pc2);\r\n-        \r\n-        pm1.getTransaction().commit();\r\n-        try {\r\n-            pm2.getTransaction().commit();\r\n-            fail(\"Should have caused OL exception.\");\r\n-        } catch (Exception jfe) {\r\n-            pm2.getTransaction().begin();\r\n-            pm2.refresh(pc2);\r\n-            pm2.remove(pc2);\r\n-            pm2.getTransaction().commit();\r\n-        }\r\n-    }\r\n-    \r\n-    public void testOptLockOnVerticalClass() {\r\n-        OpenJPAEntityManager pm1 = getEm(true, true);\r\n-        OpenJPAEntityManager pm2 = getEm(true, true);\r\n-        \r\n-        // have to load via query or extent where we're selecting the vertical\r\n-        // field in the initial SELECT\r\n-        OpenJPAQuery q1 = pm1.createNativeQuery(\"\",StateImagePC2.class);\r\n-        //FIXME  jthomas\r\n-        //q1.setOrdering(\"intField ascending\");\r\n-        StateImagePC2 pc1 = (StateImagePC2) ((Collection) q1.getCandidateCollection()).\r\n-                iterator().next();\r\n-        q1.closeAll();\r\n-        \r\n-        OpenJPAQuery q2 = pm2.createNativeQuery(\"\",StateImagePC2.class);\r\n-        //FIXME jthomas\r\n-        //q2.setOrdering(\"intField ascending\");\r\n-        StateImagePC2 pc2 = (StateImagePC2) ((Collection) q2.getCandidateCollection()).\r\n-                iterator().next();\r\n-        q2.closeAll();\r\n-        \r\n-        pm1.getTransaction().begin();\r\n-        pc1.setStringField(\"changed1\");\r\n-        pc1.setStateImage(null);\r\n-        \r\n-        pm2.getTransaction().begin();\r\n-        pc2.setStringField(\"changed2\");\r\n-        \r\n-        pm1.getTransaction().commit();\r\n-        \r\n-        try {\r\n-            pm2.getTransaction().commit();\r\n-            fail(\"Should have caused OL exception.\");\r\n-        } catch (Exception jfe) {\r\n-            pm2.getTransaction().begin();\r\n-            pm2.refresh(pc2);\r\n-            pc2.setStringField(\"changed2\");\r\n-            pm2.getTransaction().commit();\r\n-        }\r\n-        pm1.close();\r\n-        pm2.close();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\r\n-        assertNull(pc.getStateImage());\r\n-        assertEquals(\"changed2\", pc.getStringField());\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testLockGroup()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getEm(true, true);\r\n-        pm.getTransaction().begin();\r\n-        StateImagePC3 pc = new StateImagePC3();\r\n-        pc.setLockField(4);\r\n-        pc.setNoLockField(6);\r\n-        pm.persist(pc);\r\n-        pm.getTransaction().commit();\r\n-        \r\n-        pm.getTransaction().begin();\r\n-        pc.setLockField(6);\r\n-        sql.clear();\r\n-        pm.getTransaction().commit();\r\n-        assertNotSQL(\"* WHERE * NOLOCK*\");\r\n-        \r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public static void main(String[] args) {\r\n-        \r\n-        //FIXME\r\n-        //main(TestStateImage.class);\r\n-    }\r\n-    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues){\r\n-        OpenJPAEntityManager em = currentEntityManager();\r\n-        em.setNontransactionalRead(true);\r\n-        em.setRetainState(retainValues);\r\n-        em.setOptimistic(optimistic);\r\n-        return em;\r\n-    }\r\n-}\r\n+/*\n+ * TestStateImage.java\n+ *\n+ * Created on October 4, 2006, 3:09 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta;\n+\n+import java.util.*;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestStateImage extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\n+    private Object _oid = null;\n+    \n+    /** Creates a new instance of TestStateImage */\n+    public TestStateImage() {\n+    }\n+    public TestStateImage(String test) {\n+        super(test);\n+    }\n+    \n+    \n+    public void setUpTestCase() {\n+       deleteAll(StateImagePC2.class);\n+       deleteAll(StateImagePC3.class);\n+        \n+        StateImagePC2 pc = new StateImagePC2();\n+        pc.setStringField(\"string1\");\n+        pc.setIntField(1);\n+        StateImagePC2 pc2 = new StateImagePC2();\n+        pc2.setStringField(\"string2\");\n+        pc2.setIntField(2);\n+        pc.setStateImage(pc2);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getTransaction().begin();\n+        pm.persist(pc);\n+        _oid = pm.getObjectId(pc);\n+        pm.getTransaction().commit();\n+        pm.close();\n+    }\n+    \n+    public void testOptLock() {\n+        OpenJPAEntityManager pm1 = getEm(true, true);\n+        OpenJPAEntityManager pm2 = getEm(true, true);\n+        \n+        pm1.getTransaction().begin();\n+        pm2.getTransaction().begin();\n+        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\n+        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\n+        \n+        pc1.setIntField(3);\n+        pc1.setStateImage(null);\n+        \n+        pc2.setIntField(4);\n+        \n+        pm1.getTransaction().commit();\n+        try {\n+            pm2.getTransaction().commit();\n+            fail(\"Should have caused OL exception.\");\n+        } catch (Exception jfe) {\n+            pm2.getTransaction().begin();\n+            pm2.refresh(pc2);\n+            pc2.setIntField(4);\n+            pm2.getTransaction().commit();\n+        }\n+        \n+        // make sure the next transaction works too\n+        pm2.getTransaction().begin();\n+        pc2.setIntField(5);\n+        pm2.getTransaction().commit();\n+        \n+        pm1.getTransaction().begin();\n+        pm1.refresh(pc1);\n+        pc1.setIntField(6);\n+        \n+        pm2.getTransaction().begin();\n+        pc2.setIntField(7);\n+        \n+        pm1.getTransaction().commit();\n+        try {\n+            pm2.getTransaction().commit();\n+            fail(\"Should have caused OL exception.\");\n+        } catch (Exception jfe) {\n+            pm2.getTransaction().begin();\n+            pm2.refresh(pc2);\n+            pc2.setIntField(7);\n+            pm2.getTransaction().commit();\n+        }\n+        pm1.close();\n+        pm2.close();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\n+        assertNull(pc.getStateImage());\n+        assertEquals(7, pc.getIntField());\n+        pm.close();\n+    }\n+    \n+    /**\n+     * This currently isn't working: state-image locking will not\n+     * detect when someone else updated the row before deleting.\n+     */\n+    public void NOTWORKINGtestOptLockWithDelete() {\n+        OpenJPAEntityManager pm1 = getEm(true, true);\n+        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\n+        \n+        OpenJPAEntityManager pm2 = getEm(true, true);\n+        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\n+        \n+        pm1.getTransaction().begin();\n+        pc1.setIntField(3);\n+        \n+        pm2.getTransaction().begin();\n+        pm2.remove(pc2);\n+        \n+        pm1.getTransaction().commit();\n+        try {\n+            pm2.getTransaction().commit();\n+            fail(\"Should have caused OL exception.\");\n+        } catch (Exception jfe) {\n+            pm2.getTransaction().begin();\n+            pm2.refresh(pc2);\n+            pm2.remove(pc2);\n+            pm2.getTransaction().commit();\n+        }\n+    }\n+    \n+    public void testOptLockOnVerticalClass() {\n+        OpenJPAEntityManager pm1 = getEm(true, true);\n+        OpenJPAEntityManager pm2 = getEm(true, true);\n+        \n+        // have to load via query or extent where we're selecting the vertical\n+        // field in the initial SELECT\n+        OpenJPAQuery q1 = pm1.createNativeQuery(\"\",StateImagePC2.class);\n+        //FIXME  jthomas\n+        //q1.setOrdering(\"intField ascending\");\n+        StateImagePC2 pc1 = (StateImagePC2) ((Collection) q1.getCandidateCollection()).\n+                iterator().next();\n+        q1.closeAll();\n+        \n+        OpenJPAQuery q2 = pm2.createNativeQuery(\"\",StateImagePC2.class);\n+        //FIXME jthomas\n+        //q2.setOrdering(\"intField ascending\");\n+        StateImagePC2 pc2 = (StateImagePC2) ((Collection) q2.getCandidateCollection()).\n+                iterator().next();\n+        q2.closeAll();\n+        \n+        pm1.getTransaction().begin();\n+        pc1.setStringField(\"changed1\");\n+        pc1.setStateImage(null);\n+        \n+        pm2.getTransaction().begin();\n+        pc2.setStringField(\"changed2\");\n+        \n+        pm1.getTransaction().commit();\n+        \n+        try {\n+            pm2.getTransaction().commit();\n+            fail(\"Should have caused OL exception.\");\n+        } catch (Exception jfe) {\n+            pm2.getTransaction().begin();\n+            pm2.refresh(pc2);\n+            pc2.setStringField(\"changed2\");\n+            pm2.getTransaction().commit();\n+        }\n+        pm1.close();\n+        pm2.close();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\n+        assertNull(pc.getStateImage());\n+        assertEquals(\"changed2\", pc.getStringField());\n+        pm.close();\n+    }\n+    \n+    public void testLockGroup()\n+    throws Exception {\n+        OpenJPAEntityManager pm = getEm(true, true);\n+        pm.getTransaction().begin();\n+        StateImagePC3 pc = new StateImagePC3();\n+        pc.setLockField(4);\n+        pc.setNoLockField(6);\n+        pm.persist(pc);\n+        pm.getTransaction().commit();\n+        \n+        pm.getTransaction().begin();\n+        pc.setLockField(6);\n+        sql.clear();\n+        pm.getTransaction().commit();\n+        assertNotSQL(\"* WHERE * NOLOCK*\");\n+        \n+        pm.close();\n+    }\n+    \n+    public static void main(String[] args) {\n+        \n+        //FIXME\n+        //main(TestStateImage.class);\n+    }\n+    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues){\n+        OpenJPAEntityManager em = currentEntityManager();\n+        em.setNontransactionalRead(true);\n+        em.setRetainState(retainValues);\n+        em.setOptimistic(optimistic);\n+        return em;\n+    }\n+}"},{"sha":"86ce1e0462c0cdae68a4d62a4c051a0913038bc2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,85 +1,85 @@\n-/*\r\n- * TestLockGroupsWithHorizontalBaseType.java\r\n- *\r\n- * Created on October 4, 2006, 5:03 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta.horizontal;\r\n-\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestLockGroupsWithHorizontalBaseType extends AbstractTestCase\r\n-{   \r\n-    /** Creates a new instance of TestLockGroupsWithHorizontalBaseType */\r\n-    public TestLockGroupsWithHorizontalBaseType(String name) \r\n-    {\r\n-    \tsuper(name, \"jdbccactusapp\");\r\n-    }\r\n-\r\n-\r\n-    public void setUp() {\r\n-       deleteAll(LockGroupSubclass.class);\r\n-    }\r\n-\r\n-    public void testHorizontalLockGroup() {\r\n-        LockGroupSubclass pc = new LockGroupSubclass();\r\n-        pc.setDefaultLockGroupField(\"foo\");\r\n-        pc.setNonDefaultLockGroupField(\"bar\");\r\n-        OpenJPAEntityManager pm = getEm(true, true);\r\n-        pm.getTransaction().begin();\r\n-        pm.persist(pc);\r\n-        pm.getTransaction().commit();\r\n-        pm.getTransaction().begin();\r\n-\r\n-        Object oid = pm.getObjectId(pc);\r\n-\r\n-        OpenJPAEntityManager  pm2 = getEm(true, true);\r\n-        LockGroupSubclass pc2 = (LockGroupSubclass) pm2.getObjectId(oid);\r\n-        pm2.getTransaction().begin();\r\n-        pc2.setNonDefaultLockGroupField(\"baz\");\r\n-        pm2.getTransaction().commit();\r\n-\r\n-        pc.setDefaultLockGroupField(\"wookie\");\r\n-        pm.getTransaction().commit();\r\n-    }    \r\n-    \r\n-   private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\r\n-        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n-        em.setNontransactionalRead(true);\r\n-        em.setRetainState(retainValues);\r\n-        em.setOptimistic(optimistic);\r\n-        return em;\r\n-    }    \r\n-    \r\n-}\r\n+/*\n+ * TestLockGroupsWithHorizontalBaseType.java\n+ *\n+ * Created on October 4, 2006, 5:03 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta.horizontal;\n+\n+\n+import java.util.*;\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.*;\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestLockGroupsWithHorizontalBaseType extends AbstractTestCase\n+{   \n+    /** Creates a new instance of TestLockGroupsWithHorizontalBaseType */\n+    public TestLockGroupsWithHorizontalBaseType(String name) \n+    {\n+    \tsuper(name, \"jdbccactusapp\");\n+    }\n+\n+\n+    public void setUp() {\n+       deleteAll(LockGroupSubclass.class);\n+    }\n+\n+    public void testHorizontalLockGroup() {\n+        LockGroupSubclass pc = new LockGroupSubclass();\n+        pc.setDefaultLockGroupField(\"foo\");\n+        pc.setNonDefaultLockGroupField(\"bar\");\n+        OpenJPAEntityManager pm = getEm(true, true);\n+        pm.getTransaction().begin();\n+        pm.persist(pc);\n+        pm.getTransaction().commit();\n+        pm.getTransaction().begin();\n+\n+        Object oid = pm.getObjectId(pc);\n+\n+        OpenJPAEntityManager  pm2 = getEm(true, true);\n+        LockGroupSubclass pc2 = (LockGroupSubclass) pm2.getObjectId(oid);\n+        pm2.getTransaction().begin();\n+        pc2.setNonDefaultLockGroupField(\"baz\");\n+        pm2.getTransaction().commit();\n+\n+        pc.setDefaultLockGroupField(\"wookie\");\n+        pm.getTransaction().commit();\n+    }    \n+    \n+   private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\n+        em.setNontransactionalRead(true);\n+        em.setRetainState(retainValues);\n+        em.setOptimistic(optimistic);\n+        return em;\n+    }    \n+    \n+}"},{"sha":"f8be2ea390a29750c164f53b4b800901243476c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,91 +1,91 @@\n-/*\r\n- * TestQueryAgainstEntireMappedHierarchy.java\r\n- *\r\n- * Created on October 5, 2006, 10:46 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta.horizontal;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestQueryAgainstEntireMappedHierarchy extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase\r\n-{\r\n-\t\r\n-    /** Creates a new instance of TestQueryAgainstEntireMappedHierarchy */\r\n-    public TestQueryAgainstEntireMappedHierarchy(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public void setUpTestCase() \r\n-    {        \r\n-        // this test depends on this fact\r\n-        assertTrue(HorizJ.class.getSuperclass() == HorizD.class);\r\n-        assertTrue(HorizK.class.getSuperclass() == HorizJ.class);\r\n-\r\n-       deleteAll(HorizD.class);\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getTransaction().begin();\r\n-\r\n-        HorizD d = new HorizD();\r\n-        d.setStringA(\"stringa-d\");\r\n-        d.setStringC(\"stringc-d\");\r\n-        pm.persist(d);\r\n-\r\n-        HorizJ j = new HorizJ();\r\n-        j.setStringA(\"stringa-j\");\r\n-        j.setStringC(\"stringc-j\");\r\n-        pm.persist(j);\r\n-\r\n-        HorizK k = new HorizK();\r\n-        k.setStringA(\"stringa-k\");\r\n-        k.setStringC(\"stringc-k\");\r\n-        pm.persist(k);\r\n-\r\n-        pm.getTransaction().commit();\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testQueryAgainstEntireMappedHierarchy() {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        sql.clear();\r\n-        //FIXME jthomas\r\n-        //pm.newQuery(HorizD.class).execute();\r\n-        String lastStatement = (String) sql.get(sql.size() - 1);\r\n-        assertTrue(lastStatement.toLowerCase().indexOf(\"in (\") == -1);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestQueryAgainstEntireMappedHierarchy.java\n+ *\n+ * Created on October 5, 2006, 10:46 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta.horizontal;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestQueryAgainstEntireMappedHierarchy extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase\n+{\n+\t\n+    /** Creates a new instance of TestQueryAgainstEntireMappedHierarchy */\n+    public TestQueryAgainstEntireMappedHierarchy(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public void setUpTestCase() \n+    {        \n+        // this test depends on this fact\n+        assertTrue(HorizJ.class.getSuperclass() == HorizD.class);\n+        assertTrue(HorizK.class.getSuperclass() == HorizJ.class);\n+\n+       deleteAll(HorizD.class);\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getTransaction().begin();\n+\n+        HorizD d = new HorizD();\n+        d.setStringA(\"stringa-d\");\n+        d.setStringC(\"stringc-d\");\n+        pm.persist(d);\n+\n+        HorizJ j = new HorizJ();\n+        j.setStringA(\"stringa-j\");\n+        j.setStringC(\"stringc-j\");\n+        pm.persist(j);\n+\n+        HorizK k = new HorizK();\n+        k.setStringA(\"stringa-k\");\n+        k.setStringC(\"stringc-k\");\n+        pm.persist(k);\n+\n+        pm.getTransaction().commit();\n+        pm.close();\n+    }\n+\n+    public void testQueryAgainstEntireMappedHierarchy() {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        sql.clear();\n+        //FIXME jthomas\n+        //pm.newQuery(HorizD.class).execute();\n+        String lastStatement = (String) sql.get(sql.size() - 1);\n+        assertTrue(lastStatement.toLowerCase().indexOf(\"in (\") == -1);\n+        pm.close();\n+    }\n+    \n+}"},{"sha":"cdcbc473d3442ab865ee689e9e50023cf14c2489","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,123 +1,123 @@\n-/*\r\n- * TestUnionPlaceholderTypes.java\r\n- *\r\n- * Created on October 5, 2006, 2:04 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta.tableperclass;\r\n-\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.SQLFactory;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestUnionPlaceholderTypes extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n-    \r\n-    \r\n-    /** Creates a new instance of TestUnionPlaceholderTypes */\r\n-    public TestUnionPlaceholderTypes(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-\r\n-    private boolean _union = false;\r\n-\r\n-    public void setUpTestCase() {\r\n-        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n-        //FIXME jthomas\r\n-        //_union = ((SQLFactory) conf.getSQLFactoryInstance()).getAdvancedSQL().getSupportsUnion();\r\n-    }\r\n-\r\n-    public void testUnion()\r\n-        throws Exception {\r\n-       deleteAll(PlaceholderTypesA.class);\r\n-\r\n-        PlaceholderTypesA pta = new PlaceholderTypesA();\r\n-        pta.setIntA(1);\r\n-        PlaceholderTypesB ptb = new PlaceholderTypesB();\r\n-        ptb.setIntA(2);\r\n-        ptb.setIntB(3);\r\n-        ptb.setBooleanB(true);\r\n-        ptb.setByteB((byte) 64);\r\n-        ptb.setCharB('a');\r\n-        ptb.setFloatB(99.9F);\r\n-        ptb.setStringB(\"stringB\");\r\n-        ptb.setClobB(\"clobB\");\r\n-        ptb.setBlobB(\"blobB\");\r\n-\r\n-        Broker broker = getBrokerFactory().newBroker();\r\n-        broker.begin();\r\n-        broker.persist(pta, null);\r\n-        broker.persist(ptb, null);\r\n-        broker.commit();\r\n-        Object oida = broker.getObjectId(pta);\r\n-        long idb = ((Id) broker.getObjectId(ptb)).getId();\r\n-        broker.close();\r\n-\r\n-        broker = getBrokerFactory().newBroker();\r\n-        broker.begin();\r\n-        sql.clear();\r\n-        pta = (PlaceholderTypesA) broker.find(oida, true, null);\r\n-        assertEquals(1, pta.getIntA());\r\n-        if (_union)\r\n-            assertEquals(1, sql.size());\r\n-        else\r\n-            assertNotSQL(\"UNION\");\r\n-        broker.close();\r\n-\r\n-        broker = getBrokerFactory().newBroker();\r\n-        broker.begin();\r\n-        sql.clear();\r\n-        ptb = (PlaceholderTypesB) broker.find(broker.newObjectId\r\n-            (PlaceholderTypesB.class, new Long(idb)), true, null);\r\n-        assertEquals(2, ptb.getIntA());\r\n-        assertEquals(3, ptb.getIntB());\r\n-        assertTrue(ptb.getBooleanB());\r\n-        assertEquals(64, ptb.getByteB());\r\n-        assertEquals('a', ptb.getCharB());\r\n-        assertEquals(99.9F, ptb.getFloatB(), .001);\r\n-        assertEquals(\"stringB\", ptb.getStringB());\r\n-        assertEquals(\"clobB\", ptb.getClobB());\r\n-        assertEquals(\"blobB\", ptb.getBlobB());\r\n-        if (_union)\r\n-            assertEquals(1, sql.size());\r\n-        else\r\n-            assertNotSQL(\"UNION\");\r\n-        broker.close();\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestUnionPlaceholderTypes.java\n+ *\n+ * Created on October 5, 2006, 2:04 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta.tableperclass;\n+\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.SQLFactory;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.util.Id;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestUnionPlaceholderTypes extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\n+    \n+    \n+    /** Creates a new instance of TestUnionPlaceholderTypes */\n+    public TestUnionPlaceholderTypes(String name) \n+    {\n+    \tsuper(name);\n+    }\n+\n+    private boolean _union = false;\n+\n+    public void setUpTestCase() {\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\n+        //FIXME jthomas\n+        //_union = ((SQLFactory) conf.getSQLFactoryInstance()).getAdvancedSQL().getSupportsUnion();\n+    }\n+\n+    public void testUnion()\n+        throws Exception {\n+       deleteAll(PlaceholderTypesA.class);\n+\n+        PlaceholderTypesA pta = new PlaceholderTypesA();\n+        pta.setIntA(1);\n+        PlaceholderTypesB ptb = new PlaceholderTypesB();\n+        ptb.setIntA(2);\n+        ptb.setIntB(3);\n+        ptb.setBooleanB(true);\n+        ptb.setByteB((byte) 64);\n+        ptb.setCharB('a');\n+        ptb.setFloatB(99.9F);\n+        ptb.setStringB(\"stringB\");\n+        ptb.setClobB(\"clobB\");\n+        ptb.setBlobB(\"blobB\");\n+\n+        Broker broker = getBrokerFactory().newBroker();\n+        broker.begin();\n+        broker.persist(pta, null);\n+        broker.persist(ptb, null);\n+        broker.commit();\n+        Object oida = broker.getObjectId(pta);\n+        long idb = ((Id) broker.getObjectId(ptb)).getId();\n+        broker.close();\n+\n+        broker = getBrokerFactory().newBroker();\n+        broker.begin();\n+        sql.clear();\n+        pta = (PlaceholderTypesA) broker.find(oida, true, null);\n+        assertEquals(1, pta.getIntA());\n+        if (_union)\n+            assertEquals(1, sql.size());\n+        else\n+            assertNotSQL(\"UNION\");\n+        broker.close();\n+\n+        broker = getBrokerFactory().newBroker();\n+        broker.begin();\n+        sql.clear();\n+        ptb = (PlaceholderTypesB) broker.find(broker.newObjectId\n+            (PlaceholderTypesB.class, new Long(idb)), true, null);\n+        assertEquals(2, ptb.getIntA());\n+        assertEquals(3, ptb.getIntB());\n+        assertTrue(ptb.getBooleanB());\n+        assertEquals(64, ptb.getByteB());\n+        assertEquals('a', ptb.getCharB());\n+        assertEquals(99.9F, ptb.getFloatB(), .001);\n+        assertEquals(\"stringB\", ptb.getStringB());\n+        assertEquals(\"clobB\", ptb.getClobB());\n+        assertEquals(\"blobB\", ptb.getBlobB());\n+        if (_union)\n+            assertEquals(1, sql.size());\n+        else\n+            assertNotSQL(\"UNION\");\n+        broker.close();\n+    }\n+    \n+}"},{"sha":"9ff8163ce83bd681c363cd01b1f13b9ba71b4a51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","status":"modified","additions":221,"deletions":221,"changes":442,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,221 +1,221 @@\n-/*\r\n- * TestJoinSubclasses.java\r\n- *\r\n- * Created on October 5, 2006, 2:17 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n-\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.Join;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestJoinSubclasses\r\n-        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n-     \r\n-    /** Creates a new instance of TestJoinSubclasses */\r\n-    public TestJoinSubclasses(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    \r\n-    private String _outer = \"OUTER\";\r\n-    private Object _base = null;\r\n-    private Object _baseSubFlat = null;\r\n-    \r\n-    public boolean skipTest() {\r\n-        //FIXME\r\n-        /*\r\n-        return super.skipTest()\r\n-            || ((JDBCConfiguration) getConfiguration()).\r\n-            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n-         */\r\n-        return false;\r\n-    }\r\n-    \r\n-    public void setUpTestCase() {\r\n-        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n-                joinSyntax == Join.SYNTAX_DATABASE)\r\n-            _outer = \"(+)\";\r\n-        \r\n-       deleteAll(JoinSubclassBase.class);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        JoinSubclassBase base = new JoinSubclassBase();\r\n-        base.setBaseField(1);\r\n-        pm.persist(base);\r\n-        \r\n-        JoinSubclassBaseSubVert sub1 = new JoinSubclassBaseSubVert();\r\n-        sub1.setBaseField(2);\r\n-        sub1.setBaseSubVertField(3);\r\n-        pm.persist(sub1);\r\n-        \r\n-        JoinSubclassBaseSubFlat sub2 = new JoinSubclassBaseSubFlat();\r\n-        sub2.setBaseField(3);\r\n-        sub2.setBaseSubVertField(4);\r\n-        sub2.setBaseSubFlatField(5);\r\n-        pm.persist(sub2);\r\n-        \r\n-        endTx(pm);;\r\n-        _base = pm.getObjectId(base);\r\n-        _baseSubFlat = pm.getObjectId(sub2);\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testBaseExtentNoSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(JoinSubclassBase.class, false);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        JoinSubclassBase pc = (JoinSubclassBase) itr.next();\r\n-        assertEquals(1, pc.getBaseField());\r\n-        assertEquals(JoinSubclassBase.class, pc.getClass());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testBaseExtentWithSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(JoinSubclassBase.class, true);\r\n-        Collection pcs = new TreeSet(((Extent) extent).list());\r\n-        assertEquals(3, pcs.size());\r\n-        Iterator itr = pcs.iterator();\r\n-        for (int i = 0; i < 2; i++) {\r\n-            JoinSubclassBase pc = (JoinSubclassBase) itr.next();\r\n-            assertEquals(i + 1, pc.getBaseField());\r\n-            switch (i) {\r\n-                case 0:\r\n-                    assertEquals(JoinSubclassBase.class, pc.getClass());\r\n-                    break;\r\n-                case 1:\r\n-                    assertEquals(JoinSubclassBaseSubVert.class, pc.getClass());\r\n-                    assertEquals(i + 2, ((JoinSubclassBaseSubVert) pc).\r\n-                            getBaseSubVertField());\r\n-                    break;\r\n-                case 2:\r\n-                    assertEquals(JoinSubclassBaseSubFlat.class, pc.getClass());\r\n-                    assertEquals(i + 2, ((JoinSubclassBaseSubFlat) pc).\r\n-                            getBaseSubVertField());\r\n-                    assertEquals(i + 3, ((JoinSubclassBaseSubFlat) pc).\r\n-                            getBaseSubFlatField());\r\n-                    break;\r\n-            }\r\n-        }\r\n-        pm.close();\r\n-        \r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testLeafExtent()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(JoinSubclassBaseSubFlat.class, false);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat) itr.next();\r\n-        assertEquals(3, pc.getBaseField());\r\n-        assertEquals(4, pc.getBaseSubVertField());\r\n-        assertEquals(5, pc.getBaseSubFlatField());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testBaseGetById()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        JoinSubclassBase pc = (JoinSubclassBase) pm.getObjectId(_base);\r\n-        assertEquals(1, pc.getBaseField());\r\n-        assertEquals(JoinSubclassBase.class, pc.getClass());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-        \r\n-        // should outer join with non-exact id\r\n-        Id oid = new Id(JoinSubclassBase.class, ((Id) _base).getId());\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (JoinSubclassBase) pm.getObjectId(oid);\r\n-        assertEquals(1, pc.getBaseField());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testLeafGetById()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat)\r\n-        pm.getObjectId(_baseSubFlat);\r\n-        assertEquals(3, pc.getBaseField());\r\n-        assertEquals(4, pc.getBaseSubVertField());\r\n-        assertEquals(5, pc.getBaseSubFlatField());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-        \r\n-        // should outer join with non-exact id\r\n-        Id oid = new Id(JoinSubclassBase.class, ((Id) _baseSubFlat).getId());\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (JoinSubclassBaseSubFlat) pm.getObjectId(oid);\r\n-        assertEquals(3, pc.getBaseField());\r\n-        assertEquals(4, pc.getBaseSubVertField());\r\n-        assertEquals(5, pc.getBaseSubFlatField());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestJoinSubclasses.java\n+ *\n+ * Created on October 5, 2006, 2:17 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\n+\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.Join;\n+import org.apache.openjpa.persistence.Extent;\n+import org.apache.openjpa.util.Id;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestJoinSubclasses\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\n+     \n+    /** Creates a new instance of TestJoinSubclasses */\n+    public TestJoinSubclasses(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    \n+    private String _outer = \"OUTER\";\n+    private Object _base = null;\n+    private Object _baseSubFlat = null;\n+    \n+    public boolean skipTest() {\n+        //FIXME\n+        /*\n+        return super.skipTest()\n+            || ((JDBCConfiguration) getConfiguration()).\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\n+         */\n+        return false;\n+    }\n+    \n+    public void setUpTestCase() {\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\n+                joinSyntax == Join.SYNTAX_DATABASE)\n+            _outer = \"(+)\";\n+        \n+       deleteAll(JoinSubclassBase.class);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        JoinSubclassBase base = new JoinSubclassBase();\n+        base.setBaseField(1);\n+        pm.persist(base);\n+        \n+        JoinSubclassBaseSubVert sub1 = new JoinSubclassBaseSubVert();\n+        sub1.setBaseField(2);\n+        sub1.setBaseSubVertField(3);\n+        pm.persist(sub1);\n+        \n+        JoinSubclassBaseSubFlat sub2 = new JoinSubclassBaseSubFlat();\n+        sub2.setBaseField(3);\n+        sub2.setBaseSubVertField(4);\n+        sub2.setBaseSubFlatField(5);\n+        pm.persist(sub2);\n+        \n+        endTx(pm);;\n+        _base = pm.getObjectId(base);\n+        _baseSubFlat = pm.getObjectId(sub2);\n+        pm.close();\n+    }\n+    \n+    public void testBaseExtentNoSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(JoinSubclassBase.class, false);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        JoinSubclassBase pc = (JoinSubclassBase) itr.next();\n+        assertEquals(1, pc.getBaseField());\n+        assertEquals(JoinSubclassBase.class, pc.getClass());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testBaseExtentWithSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(JoinSubclassBase.class, true);\n+        Collection pcs = new TreeSet(((Extent) extent).list());\n+        assertEquals(3, pcs.size());\n+        Iterator itr = pcs.iterator();\n+        for (int i = 0; i < 2; i++) {\n+            JoinSubclassBase pc = (JoinSubclassBase) itr.next();\n+            assertEquals(i + 1, pc.getBaseField());\n+            switch (i) {\n+                case 0:\n+                    assertEquals(JoinSubclassBase.class, pc.getClass());\n+                    break;\n+                case 1:\n+                    assertEquals(JoinSubclassBaseSubVert.class, pc.getClass());\n+                    assertEquals(i + 2, ((JoinSubclassBaseSubVert) pc).\n+                            getBaseSubVertField());\n+                    break;\n+                case 2:\n+                    assertEquals(JoinSubclassBaseSubFlat.class, pc.getClass());\n+                    assertEquals(i + 2, ((JoinSubclassBaseSubFlat) pc).\n+                            getBaseSubVertField());\n+                    assertEquals(i + 3, ((JoinSubclassBaseSubFlat) pc).\n+                            getBaseSubFlatField());\n+                    break;\n+            }\n+        }\n+        pm.close();\n+        \n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testLeafExtent()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(JoinSubclassBaseSubFlat.class, false);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat) itr.next();\n+        assertEquals(3, pc.getBaseField());\n+        assertEquals(4, pc.getBaseSubVertField());\n+        assertEquals(5, pc.getBaseSubFlatField());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testBaseGetById()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        JoinSubclassBase pc = (JoinSubclassBase) pm.getObjectId(_base);\n+        assertEquals(1, pc.getBaseField());\n+        assertEquals(JoinSubclassBase.class, pc.getClass());\n+        pm.close();\n+        \n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+        \n+        // should outer join with non-exact id\n+        Id oid = new Id(JoinSubclassBase.class, ((Id) _base).getId());\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pc = (JoinSubclassBase) pm.getObjectId(oid);\n+        assertEquals(1, pc.getBaseField());\n+        pm.close();\n+        \n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testLeafGetById()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat)\n+        pm.getObjectId(_baseSubFlat);\n+        assertEquals(3, pc.getBaseField());\n+        assertEquals(4, pc.getBaseSubVertField());\n+        assertEquals(5, pc.getBaseSubFlatField());\n+        pm.close();\n+        \n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+        \n+        // should outer join with non-exact id\n+        Id oid = new Id(JoinSubclassBase.class, ((Id) _baseSubFlat).getId());\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pc = (JoinSubclassBaseSubFlat) pm.getObjectId(oid);\n+        assertEquals(3, pc.getBaseField());\n+        assertEquals(4, pc.getBaseSubVertField());\n+        assertEquals(5, pc.getBaseSubFlatField());\n+        pm.close();\n+        \n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+}"},{"sha":"a1a133e4403e5c5afcc57b9495a56bf2d7c4086b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","status":"modified","additions":287,"deletions":287,"changes":574,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,287 +1,287 @@\n-/*\r\n- * TestSubclassJoinExtent.java\r\n- *\r\n- * Created on October 5, 2006, 3:41 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.Join;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestSubclassJoinExtent\r\n-        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n-   \r\n-    private String _outer = \"OUTER\";\r\n-    \r\n-    /** Creates a new instance of TestSubclassJoinExtent */\r\n-    public TestSubclassJoinExtent(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public boolean skipTest() {\r\n-        //FIXME\r\n-        /*\r\n-        return super.skipTest()\r\n-            || ((JDBCConfiguration) getConfiguration()).\r\n-            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n-         */\r\n-        return false;\r\n-    }\r\n-    \r\n-    public void setUpTestCase() {\r\n-        // make sure all classes are registered\r\n-        Class[] reg = new Class[]{\r\n-            Base.class, BaseSub1.class, BaseSub2.class,\r\n-            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n-        };\r\n-        \r\n-        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n-                joinSyntax == Join.SYNTAX_DATABASE)\r\n-            _outer = \"(+)\";\r\n-        \r\n-       deleteAll(Base.class);\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        Base base = new Base();\r\n-        base.setBaseField(1);\r\n-        pm.persist(base);\r\n-        \r\n-        BaseSub1 sub1 = new BaseSub1();\r\n-        sub1.setBaseField(2);\r\n-        sub1.setBaseSub1Field(3);\r\n-        pm.persist(sub1);\r\n-        \r\n-        BaseSub2 sub2 = new BaseSub2();\r\n-        sub2.setBaseField(3);\r\n-        sub2.setBaseSub2Field(4);\r\n-        pm.persist(sub2);\r\n-        \r\n-        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\r\n-        sub1sub2.setBaseField(4);\r\n-        sub1sub2.setBaseSub1Field(5);\r\n-        sub1sub2.setBaseSub1Sub2Field(6);\r\n-        pm.persist(sub1sub2);\r\n-        \r\n-        endTx(pm);;\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testBaseNoSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(Base.class, false);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        Base pc = (Base) itr.next();\r\n-        assertEquals(1, pc.getBaseField());\r\n-        assertEquals(Base.class, pc.getClass());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testBaseWithSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(Base.class, true);\r\n-        Collection pcs = new TreeSet(((Extent) extent).list());\r\n-        assertEquals(4, pcs.size());\r\n-        Iterator itr = pcs.iterator();\r\n-        for (int i = 0; i < 4; i++) {\r\n-            Base pc = (Base) itr.next();\r\n-            assertEquals(i + 1, pc.getBaseField());\r\n-            switch (i) {\r\n-                case 0:\r\n-                    assertEquals(Base.class, pc.getClass());\r\n-                    break;\r\n-                case 1:\r\n-                    assertEquals(BaseSub1.class, pc.getClass());\r\n-                    break;\r\n-                case 2:\r\n-                    assertEquals(BaseSub2.class, pc.getClass());\r\n-                    break;\r\n-                case 3:\r\n-                    assertEquals(BaseSub1Sub2.class, pc.getClass());\r\n-                    break;\r\n-            }\r\n-        }\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testEmptyNoSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub1Sub1.class, false);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testEmptyWithSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub1Sub1.class, true);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testLeafNoSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub1Sub2.class, false);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\r\n-        assertEquals(4, pc.getBaseField());\r\n-        assertEquals(5, pc.getBaseSub1Field());\r\n-        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testLeafWithSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub1Sub2.class, true);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\r\n-        assertEquals(4, pc.getBaseField());\r\n-        assertEquals(5, pc.getBaseSub1Field());\r\n-        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testLeafNoSubs2()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub2.class, false);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        BaseSub2 pc = (BaseSub2) itr.next();\r\n-        assertEquals(3, pc.getBaseField());\r\n-        assertEquals(4, pc.getBaseSub2Field());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testLeafWithSubs2()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub2.class, true);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        BaseSub2 pc = (BaseSub2) itr.next();\r\n-        assertEquals(3, pc.getBaseField());\r\n-        assertEquals(4, pc.getBaseSub2Field());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testMidNoSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub1.class, false);\r\n-        Iterator itr = extent.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        BaseSub1 pc = (BaseSub1) itr.next();\r\n-        assertEquals(2, pc.getBaseField());\r\n-        assertEquals(3, pc.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, pc.getClass());\r\n-        assertTrue(!itr.hasNext());\r\n-        extent.closeAll();\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testMidWithSubs()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Extent extent = pm.createExtent(BaseSub1.class, true);\r\n-        Collection pcs = new TreeSet(((Extent) extent).list());\r\n-        assertEquals(2, pcs.size());\r\n-        Iterator itr = pcs.iterator();\r\n-        BaseSub1 pc = (BaseSub1) itr.next();\r\n-        assertEquals(2, pc.getBaseField());\r\n-        assertEquals(3, pc.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, pc.getClass());\r\n-        pc = (BaseSub1) itr.next();\r\n-        assertEquals(4, pc.getBaseField());\r\n-        assertEquals(5, pc.getBaseSub1Field());\r\n-        assertEquals(BaseSub1Sub2.class, pc.getClass());\r\n-        assertEquals(6, ((BaseSub1Sub2) pc).getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * TestSubclassJoinExtent.java\n+ *\n+ * Created on October 5, 2006, 3:41 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\n+\n+import java.util.*;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.Join;\n+import org.apache.openjpa.persistence.Extent;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestSubclassJoinExtent\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\n+   \n+    private String _outer = \"OUTER\";\n+    \n+    /** Creates a new instance of TestSubclassJoinExtent */\n+    public TestSubclassJoinExtent(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public boolean skipTest() {\n+        //FIXME\n+        /*\n+        return super.skipTest()\n+            || ((JDBCConfiguration) getConfiguration()).\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\n+         */\n+        return false;\n+    }\n+    \n+    public void setUpTestCase() {\n+        // make sure all classes are registered\n+        Class[] reg = new Class[]{\n+            Base.class, BaseSub1.class, BaseSub2.class,\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\n+        };\n+        \n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\n+                joinSyntax == Join.SYNTAX_DATABASE)\n+            _outer = \"(+)\";\n+        \n+       deleteAll(Base.class);\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        Base base = new Base();\n+        base.setBaseField(1);\n+        pm.persist(base);\n+        \n+        BaseSub1 sub1 = new BaseSub1();\n+        sub1.setBaseField(2);\n+        sub1.setBaseSub1Field(3);\n+        pm.persist(sub1);\n+        \n+        BaseSub2 sub2 = new BaseSub2();\n+        sub2.setBaseField(3);\n+        sub2.setBaseSub2Field(4);\n+        pm.persist(sub2);\n+        \n+        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\n+        sub1sub2.setBaseField(4);\n+        sub1sub2.setBaseSub1Field(5);\n+        sub1sub2.setBaseSub1Sub2Field(6);\n+        pm.persist(sub1sub2);\n+        \n+        endTx(pm);;\n+        pm.close();\n+    }\n+    \n+    public void testBaseNoSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(Base.class, false);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        Base pc = (Base) itr.next();\n+        assertEquals(1, pc.getBaseField());\n+        assertEquals(Base.class, pc.getClass());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testBaseWithSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(Base.class, true);\n+        Collection pcs = new TreeSet(((Extent) extent).list());\n+        assertEquals(4, pcs.size());\n+        Iterator itr = pcs.iterator();\n+        for (int i = 0; i < 4; i++) {\n+            Base pc = (Base) itr.next();\n+            assertEquals(i + 1, pc.getBaseField());\n+            switch (i) {\n+                case 0:\n+                    assertEquals(Base.class, pc.getClass());\n+                    break;\n+                case 1:\n+                    assertEquals(BaseSub1.class, pc.getClass());\n+                    break;\n+                case 2:\n+                    assertEquals(BaseSub2.class, pc.getClass());\n+                    break;\n+                case 3:\n+                    assertEquals(BaseSub1Sub2.class, pc.getClass());\n+                    break;\n+            }\n+        }\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testEmptyNoSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub1Sub1.class, false);\n+        Iterator itr = extent.iterator();\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testEmptyWithSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub1Sub1.class, true);\n+        Iterator itr = extent.iterator();\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testLeafNoSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub1Sub2.class, false);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\n+        assertEquals(4, pc.getBaseField());\n+        assertEquals(5, pc.getBaseSub1Field());\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testLeafWithSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub1Sub2.class, true);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\n+        assertEquals(4, pc.getBaseField());\n+        assertEquals(5, pc.getBaseSub1Field());\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testLeafNoSubs2()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub2.class, false);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        BaseSub2 pc = (BaseSub2) itr.next();\n+        assertEquals(3, pc.getBaseField());\n+        assertEquals(4, pc.getBaseSub2Field());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testLeafWithSubs2()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub2.class, true);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        BaseSub2 pc = (BaseSub2) itr.next();\n+        assertEquals(3, pc.getBaseField());\n+        assertEquals(4, pc.getBaseSub2Field());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+    \n+    public void testMidNoSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub1.class, false);\n+        Iterator itr = extent.iterator();\n+        assertTrue(itr.hasNext());\n+        BaseSub1 pc = (BaseSub1) itr.next();\n+        assertEquals(2, pc.getBaseField());\n+        assertEquals(3, pc.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, pc.getClass());\n+        assertTrue(!itr.hasNext());\n+        extent.closeAll();\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testMidWithSubs()\n+    throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Extent extent = pm.createExtent(BaseSub1.class, true);\n+        Collection pcs = new TreeSet(((Extent) extent).list());\n+        assertEquals(2, pcs.size());\n+        Iterator itr = pcs.iterator();\n+        BaseSub1 pc = (BaseSub1) itr.next();\n+        assertEquals(2, pc.getBaseField());\n+        assertEquals(3, pc.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, pc.getClass());\n+        pc = (BaseSub1) itr.next();\n+        assertEquals(4, pc.getBaseField());\n+        assertEquals(5, pc.getBaseSub1Field());\n+        assertEquals(BaseSub1Sub2.class, pc.getClass());\n+        assertEquals(6, ((BaseSub1Sub2) pc).getBaseSub1Sub2Field());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+}"},{"sha":"c22d1f9b09298c46301bd4e35d267fe0da02c598","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","status":"modified","additions":229,"deletions":229,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,229 +1,229 @@\n-/*\r\n- * TestSubclassJoinGetObjectById.java\r\n- *\r\n- * Created on October 5, 2006, 3:55 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.Join;\r\n-import org.apache.openjpa.util.Id;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestSubclassJoinGetObjectById\r\n-        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n-    \r\n-\r\n-    private String _outer = \"OUTER\";\r\n-    \r\n-    /** Creates a new instance of TestSubclassJoinGetObjectById */\r\n-    public TestSubclassJoinGetObjectById(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    \r\n-    public boolean skipTest() {\r\n-        //FIXME\r\n-        /*\r\n-        return super.skipTest()\r\n-            || ((JDBCConfiguration) getConfiguration()).\r\n-            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n-         */\r\n-        return false;\r\n-    }\r\n-    \r\n-    public void setUpTestCase() {\r\n-        // make sure all classes are registered\r\n-        Class[] reg = new Class[]{\r\n-            Base.class, BaseSub1.class, BaseSub2.class,\r\n-            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n-        };\r\n-        \r\n-        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n-                joinSyntax == Join.SYNTAX_DATABASE)\r\n-            _outer = \"(+)\";\r\n-        \r\n-       deleteAll(Base.class);\r\n-    }\r\n-    \r\n-    public void testBase()\r\n-    throws Exception {\r\n-        Base pc = new Base();\r\n-        pc.setBaseField(1);\r\n-        Object oid = persist(pc);\r\n-        sql.clear();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        \r\n-        pc = (Base) pm.getObjectId(oid);\r\n-        assertEquals(1, pc.getBaseField());\r\n-        assertEquals(Base.class, pc.getClass());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-        \r\n-        // should outer join with non-exact oid\r\n-        oid = new Id(Base.class, ((Id) oid).getId());\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (Base) pm.getObjectId(oid);\r\n-        assertEquals(1, pc.getBaseField());\r\n-        assertEquals(Base.class, pc.getClass());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testBadId()\r\n-    throws Exception {\r\n-        Base pc = new Base();\r\n-        pc.setBaseField(1);\r\n-        Object oid = persist(pc);\r\n-        sql.clear();\r\n-        \r\n-        Id id = new Id(Base.class, -1);\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        try {\r\n-            pm.getObjectId(id);\r\n-            fail(\"No exception on bad id.\");\r\n-        } catch (Exception jonfe) {\r\n-        }\r\n-        pm.close();\r\n-    }\r\n-    \r\n-    public void testLeaf()\r\n-    throws Exception {\r\n-        BaseSub1Sub2 pc = new BaseSub1Sub2();\r\n-        pc.setBaseField(4);\r\n-        pc.setBaseSub1Field(5);\r\n-        pc.setBaseSub1Sub2Field(6);\r\n-        Object oid = persist(pc);\r\n-        sql.clear();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (BaseSub1Sub2) pm.getObjectId(oid);\r\n-        assertEquals(4, pc.getBaseField());\r\n-        assertEquals(5, pc.getBaseSub1Field());\r\n-        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-        \r\n-        // should outer join with inexact oid\r\n-        oid = new Id(Base.class, ((Id) oid).getId());\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (BaseSub1Sub2) pm.getObjectId(oid);\r\n-        assertEquals(4, pc.getBaseField());\r\n-        assertEquals(5, pc.getBaseSub1Field());\r\n-        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testLeaf2()\r\n-    throws Exception {\r\n-        BaseSub2 pc = new BaseSub2();\r\n-        pc.setBaseField(3);\r\n-        pc.setBaseSub2Field(4);\r\n-        Object oid = persist(pc);\r\n-        sql.clear();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (BaseSub2) pm.getObjectId(oid);\r\n-        assertEquals(3, pc.getBaseField());\r\n-        assertEquals(4, pc.getBaseSub2Field());\r\n-        assertEquals(BaseSub2.class, pc.getClass());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-        \r\n-        // should outer join with inexact oid\r\n-        oid = new Id(Base.class, ((Id) oid).getId());\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (BaseSub2) pm.getObjectId(oid);\r\n-        assertEquals(3, pc.getBaseField());\r\n-        assertEquals(4, pc.getBaseSub2Field());\r\n-        assertEquals(BaseSub2.class, pc.getClass());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    public void testMid()\r\n-    throws Exception {\r\n-        BaseSub1 pc = new BaseSub1();\r\n-        pc.setBaseField(2);\r\n-        pc.setBaseSub1Field(3);\r\n-        Object oid = persist(pc);\r\n-        sql.clear();\r\n-        \r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (BaseSub1) pm.getObjectId(oid);\r\n-        assertEquals(2, pc.getBaseField());\r\n-        assertEquals(3, pc.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, pc.getClass());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-        \r\n-        // should outer join with inexact oid\r\n-        oid = new Id(Base.class, ((Id) oid).getId());\r\n-        pm = (OpenJPAEntityManager)currentEntityManager();\r\n-        pc = (BaseSub1) pm.getObjectId(oid);\r\n-        assertEquals(2, pc.getBaseField());\r\n-        assertEquals(3, pc.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, pc.getClass());\r\n-        pm.close();\r\n-        \r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-    \r\n-    \r\n-    \r\n-}\r\n+/*\n+ * TestSubclassJoinGetObjectById.java\n+ *\n+ * Created on October 5, 2006, 3:55 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.Join;\n+import org.apache.openjpa.util.Id;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestSubclassJoinGetObjectById\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\n+    \n+\n+    private String _outer = \"OUTER\";\n+    \n+    /** Creates a new instance of TestSubclassJoinGetObjectById */\n+    public TestSubclassJoinGetObjectById(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    \n+    public boolean skipTest() {\n+        //FIXME\n+        /*\n+        return super.skipTest()\n+            || ((JDBCConfiguration) getConfiguration()).\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\n+         */\n+        return false;\n+    }\n+    \n+    public void setUpTestCase() {\n+        // make sure all classes are registered\n+        Class[] reg = new Class[]{\n+            Base.class, BaseSub1.class, BaseSub2.class,\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\n+        };\n+        \n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\n+                joinSyntax == Join.SYNTAX_DATABASE)\n+            _outer = \"(+)\";\n+        \n+       deleteAll(Base.class);\n+    }\n+    \n+    public void testBase()\n+    throws Exception {\n+        Base pc = new Base();\n+        pc.setBaseField(1);\n+        Object oid = persist(pc);\n+        sql.clear();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        \n+        pc = (Base) pm.getObjectId(oid);\n+        assertEquals(1, pc.getBaseField());\n+        assertEquals(Base.class, pc.getClass());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+        \n+        // should outer join with non-exact oid\n+        oid = new Id(Base.class, ((Id) oid).getId());\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pc = (Base) pm.getObjectId(oid);\n+        assertEquals(1, pc.getBaseField());\n+        assertEquals(Base.class, pc.getClass());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testBadId()\n+    throws Exception {\n+        Base pc = new Base();\n+        pc.setBaseField(1);\n+        Object oid = persist(pc);\n+        sql.clear();\n+        \n+        Id id = new Id(Base.class, -1);\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        try {\n+            pm.getObjectId(id);\n+            fail(\"No exception on bad id.\");\n+        } catch (Exception jonfe) {\n+        }\n+        pm.close();\n+    }\n+    \n+    public void testLeaf()\n+    throws Exception {\n+        BaseSub1Sub2 pc = new BaseSub1Sub2();\n+        pc.setBaseField(4);\n+        pc.setBaseSub1Field(5);\n+        pc.setBaseSub1Sub2Field(6);\n+        Object oid = persist(pc);\n+        sql.clear();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pc = (BaseSub1Sub2) pm.getObjectId(oid);\n+        assertEquals(4, pc.getBaseField());\n+        assertEquals(5, pc.getBaseSub1Field());\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+        \n+        // should outer join with inexact oid\n+        oid = new Id(Base.class, ((Id) oid).getId());\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pc = (BaseSub1Sub2) pm.getObjectId(oid);\n+        assertEquals(4, pc.getBaseField());\n+        assertEquals(5, pc.getBaseSub1Field());\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testLeaf2()\n+    throws Exception {\n+        BaseSub2 pc = new BaseSub2();\n+        pc.setBaseField(3);\n+        pc.setBaseSub2Field(4);\n+        Object oid = persist(pc);\n+        sql.clear();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pc = (BaseSub2) pm.getObjectId(oid);\n+        assertEquals(3, pc.getBaseField());\n+        assertEquals(4, pc.getBaseSub2Field());\n+        assertEquals(BaseSub2.class, pc.getClass());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+        \n+        // should outer join with inexact oid\n+        oid = new Id(Base.class, ((Id) oid).getId());\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pc = (BaseSub2) pm.getObjectId(oid);\n+        assertEquals(3, pc.getBaseField());\n+        assertEquals(4, pc.getBaseSub2Field());\n+        assertEquals(BaseSub2.class, pc.getClass());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    public void testMid()\n+    throws Exception {\n+        BaseSub1 pc = new BaseSub1();\n+        pc.setBaseField(2);\n+        pc.setBaseSub1Field(3);\n+        Object oid = persist(pc);\n+        sql.clear();\n+        \n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pc = (BaseSub1) pm.getObjectId(oid);\n+        assertEquals(2, pc.getBaseField());\n+        assertEquals(3, pc.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, pc.getClass());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+        \n+        // should outer join with inexact oid\n+        oid = new Id(Base.class, ((Id) oid).getId());\n+        pm = (OpenJPAEntityManager)currentEntityManager();\n+        pc = (BaseSub1) pm.getObjectId(oid);\n+        assertEquals(2, pc.getBaseField());\n+        assertEquals(3, pc.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, pc.getClass());\n+        pm.close();\n+        \n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+    \n+    \n+    \n+}"},{"sha":"b2cc5e9da661419c07925bc614028212028f2a1d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","status":"modified","additions":466,"deletions":466,"changes":932,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,466 +1,466 @@\n-/*\r\n- * TestSubclassJoinRelations.java\r\n- *\r\n- * Created on October 5, 2006, 4:28 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.sql.Join;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public class TestSubclassJoinRelations extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \r\n-{\r\n-    private String _outer = \"OUTER\";\r\n-    private Object _oid = null;\r\n-    \r\n-    /** Creates a new instance of TestSubclassJoinRelations */\r\n-    public TestSubclassJoinRelations(String name) \r\n-    {\r\n-    \tsuper(name);\r\n-    }\r\n-    \r\n-    public boolean skipTest() {\r\n-        //FIXME \r\n-        /*\r\n-        return super.skipTest()\r\n-            || ((JDBCConfiguration) getConfiguration()).\r\n-            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n-         */\r\n-        return false;\r\n-    }\r\n-\r\n-    public void setUpTestCase() {\r\n-        // make sure all classes are registered\r\n-        Class[] reg = new Class[]{\r\n-            Base.class, BaseSub1.class, BaseSub2.class,\r\n-            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n-        };\r\n-\r\n-        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n-            joinSyntax == Join.SYNTAX_DATABASE)\r\n-            _outer = \"(+)\";\r\n-\r\n-       deleteAll(Relations.class);\r\n-       deleteAll(Base.class);\r\n-\r\n-        Relations rel = new Relations();\r\n-        BaseSub2 sub2 = new BaseSub2();\r\n-        sub2.setBaseField(3);\r\n-        sub2.setBaseSub2Field(4);\r\n-        rel.setBase(sub2);\r\n-\r\n-        BaseSub1 sub1 = new BaseSub1();\r\n-        sub1.setBaseField(2);\r\n-        sub1.setBaseSub1Field(3);\r\n-        rel.setBaseSub1(sub1);\r\n-\r\n-        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\r\n-        sub1sub2.setBaseField(4);\r\n-        sub1sub2.setBaseSub1Field(5);\r\n-        sub1sub2.setBaseSub1Sub2Field(6);\r\n-        rel.setBaseSub1Sub2(sub1sub2);\r\n-\r\n-        Base base = new Base();\r\n-        base.setBaseField(1);\r\n-        rel.getBaseList().add(base);\r\n-        rel.getBaseList().add(sub2);\r\n-\r\n-        rel.getBaseSub1List().add(sub1);\r\n-        rel.getBaseSub1List().add(sub1sub2);\r\n-\r\n-        rel.getBaseSub1Sub2List().add(sub1sub2);\r\n-\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        startTx(pm);;\r\n-        pm.persist(rel);\r\n-        endTx(pm);;\r\n-        _oid = pm.getObjectId(rel);\r\n-        pm.close();\r\n-    }\r\n-\r\n-    public void testNullOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        assertNull(rel.getNullBase());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testEagerNullOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"nullBase\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        assertNull(rel.getNullBase());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testEmptyBaseList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        assertEquals(0, rel.getEmptyBaseList().size());\r\n-        pm.close();\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-\r\n-    public void testEagerEmptyBaseList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"emptyBaseList\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        assertEquals(0, rel.getEmptyBaseList().size());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testBaseOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        BaseSub2 sub2 = (BaseSub2) rel.getBase();\r\n-        assertEquals(3, sub2.getBaseField());\r\n-        assertEquals(4, sub2.getBaseSub2Field());\r\n-        assertEquals(BaseSub2.class, sub2.getClass());\r\n-        pm.close();\r\n-\r\n-        assertEquals(sql.toString(), 1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-\r\n-    public void testEagerBaseOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"base\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        BaseSub2 sub2 = (BaseSub2) rel.getBase();\r\n-        assertEquals(3, sub2.getBaseField());\r\n-        assertEquals(4, sub2.getBaseSub2Field());\r\n-        assertEquals(BaseSub2.class, sub2.getClass());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testLeafOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\r\n-        assertEquals(4, sub1sub2.getBaseField());\r\n-        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n-        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-\r\n-    public void testEagerLeafOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\r\n-        assertEquals(4, sub1sub2.getBaseField());\r\n-        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n-        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testMidOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\r\n-        assertEquals(2, sub1.getBaseField());\r\n-        assertEquals(3, sub1.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, sub1.getClass());\r\n-        pm.close();\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-\r\n-    public void testEagerMidOneOne()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"baseSub1\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\r\n-        assertEquals(2, sub1.getBaseField());\r\n-        assertEquals(3, sub1.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, sub1.getClass());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testBaseList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        List list = rel.getBaseList();\r\n-        assertEquals(2, list.size());\r\n-        Base base = (Base) list.get(0);\r\n-        assertEquals(1, base.getBaseField());\r\n-        assertEquals(Base.class, base.getClass());\r\n-        BaseSub2 sub2 = (BaseSub2) list.get(1);\r\n-        assertEquals(3, sub2.getBaseField());\r\n-        assertEquals(4, sub2.getBaseSub2Field());\r\n-        assertEquals(BaseSub2.class, sub2.getClass());\r\n-        pm.close();\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-\r\n-    public void testEagerBaseList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"baseList\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        List list = rel.getBaseList();\r\n-        assertEquals(2, list.size());\r\n-        Base base = (Base) list.get(0);\r\n-        assertEquals(1, base.getBaseField());\r\n-        assertEquals(Base.class, base.getClass());\r\n-        BaseSub2 sub2 = (BaseSub2) list.get(1);\r\n-        assertEquals(3, sub2.getBaseField());\r\n-        assertEquals(4, sub2.getBaseSub2Field());\r\n-        assertEquals(BaseSub2.class, sub2.getClass());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testLeafList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        List list = rel.getBaseSub1Sub2List();\r\n-        assertEquals(1, list.size());\r\n-        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\r\n-        assertEquals(4, sub1sub2.getBaseField());\r\n-        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n-        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-    }\r\n-\r\n-    public void testEagerLeafList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2List\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(2, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        List list = rel.getBaseSub1Sub2List();\r\n-        assertEquals(1, list.size());\r\n-        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\r\n-        assertEquals(4, sub1sub2.getBaseField());\r\n-        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n-        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testMidList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertNotSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        List list = rel.getBaseSub1List();\r\n-        assertEquals(2, list.size());\r\n-        BaseSub1 sub1 = (BaseSub1) list.get(0);\r\n-        assertEquals(2, sub1.getBaseField());\r\n-        assertEquals(3, sub1.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, sub1.getClass());\r\n-        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\r\n-        assertEquals(4, sub1sub2.getBaseField());\r\n-        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n-        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }\r\n-\r\n-    public void testEagerMidList()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        pm.getFetchPlan().addFetchGroup(\"baseSub1List\");\r\n-        Relations rel = (Relations) pm.getObjectId(_oid);\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-        sql.clear();\r\n-\r\n-        List list = rel.getBaseSub1List();\r\n-        assertEquals(2, list.size());\r\n-        BaseSub1 sub1 = (BaseSub1) list.get(0);\r\n-        assertEquals(2, sub1.getBaseField());\r\n-        assertEquals(3, sub1.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, sub1.getClass());\r\n-        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\r\n-        assertEquals(4, sub1sub2.getBaseField());\r\n-        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n-        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-\r\n-        assertEquals(0, sql.size());\r\n-    }\r\n-\r\n-    public void testProjections()\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n-        OpenJPAQuery q = pm.createNativeQuery(\"\",Relations.class);\r\n-        //FIXME jthomas\r\n-        /*\r\n-        q.setResult(\"base, baseSub1, baseSub1Sub2\");\r\n-        q.setUnique(true);\r\n-        Object[] res = (Object[]) q.execute();\r\n-         */\r\n-        Object[] res=null;\r\n-        assertNotNull(res);\r\n-        assertEquals(3, res.length);\r\n-\r\n-        BaseSub2 sub2 = (BaseSub2) res[0];\r\n-        assertEquals(3, sub2.getBaseField());\r\n-        assertEquals(4, sub2.getBaseSub2Field());\r\n-        assertEquals(BaseSub2.class, sub2.getClass());\r\n-\r\n-        BaseSub1 sub1 = (BaseSub1) res[1];\r\n-        assertEquals(2, sub1.getBaseField());\r\n-        assertEquals(3, sub1.getBaseSub1Field());\r\n-        assertEquals(BaseSub1.class, sub1.getClass());\r\n-\r\n-        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) res[2];\r\n-        assertEquals(4, sub1sub2.getBaseField());\r\n-        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n-        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n-        pm.close();\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        assertSQL(_outer);\r\n-    }    \r\n-}\r\n+/*\n+ * TestSubclassJoinRelations.java\n+ *\n+ * Created on October 5, 2006, 4:28 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\n+\n+import java.util.*;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.Join;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public class TestSubclassJoinRelations extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \n+{\n+    private String _outer = \"OUTER\";\n+    private Object _oid = null;\n+    \n+    /** Creates a new instance of TestSubclassJoinRelations */\n+    public TestSubclassJoinRelations(String name) \n+    {\n+    \tsuper(name);\n+    }\n+    \n+    public boolean skipTest() {\n+        //FIXME \n+        /*\n+        return super.skipTest()\n+            || ((JDBCConfiguration) getConfiguration()).\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\n+         */\n+        return false;\n+    }\n+\n+    public void setUpTestCase() {\n+        // make sure all classes are registered\n+        Class[] reg = new Class[]{\n+            Base.class, BaseSub1.class, BaseSub2.class,\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\n+        };\n+\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\n+            joinSyntax == Join.SYNTAX_DATABASE)\n+            _outer = \"(+)\";\n+\n+       deleteAll(Relations.class);\n+       deleteAll(Base.class);\n+\n+        Relations rel = new Relations();\n+        BaseSub2 sub2 = new BaseSub2();\n+        sub2.setBaseField(3);\n+        sub2.setBaseSub2Field(4);\n+        rel.setBase(sub2);\n+\n+        BaseSub1 sub1 = new BaseSub1();\n+        sub1.setBaseField(2);\n+        sub1.setBaseSub1Field(3);\n+        rel.setBaseSub1(sub1);\n+\n+        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\n+        sub1sub2.setBaseField(4);\n+        sub1sub2.setBaseSub1Field(5);\n+        sub1sub2.setBaseSub1Sub2Field(6);\n+        rel.setBaseSub1Sub2(sub1sub2);\n+\n+        Base base = new Base();\n+        base.setBaseField(1);\n+        rel.getBaseList().add(base);\n+        rel.getBaseList().add(sub2);\n+\n+        rel.getBaseSub1List().add(sub1);\n+        rel.getBaseSub1List().add(sub1sub2);\n+\n+        rel.getBaseSub1Sub2List().add(sub1sub2);\n+\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        startTx(pm);;\n+        pm.persist(rel);\n+        endTx(pm);;\n+        _oid = pm.getObjectId(rel);\n+        pm.close();\n+    }\n+\n+    public void testNullOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        assertNull(rel.getNullBase());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testEagerNullOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"nullBase\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+        sql.clear();\n+\n+        assertNull(rel.getNullBase());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testEmptyBaseList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        assertEquals(0, rel.getEmptyBaseList().size());\n+        pm.close();\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+\n+    public void testEagerEmptyBaseList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"emptyBaseList\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+        sql.clear();\n+\n+        assertEquals(0, rel.getEmptyBaseList().size());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testBaseOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        BaseSub2 sub2 = (BaseSub2) rel.getBase();\n+        assertEquals(3, sub2.getBaseField());\n+        assertEquals(4, sub2.getBaseSub2Field());\n+        assertEquals(BaseSub2.class, sub2.getClass());\n+        pm.close();\n+\n+        assertEquals(sql.toString(), 1, sql.size());\n+        assertSQL(_outer);\n+    }\n+\n+    public void testEagerBaseOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"base\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+        sql.clear();\n+\n+        BaseSub2 sub2 = (BaseSub2) rel.getBase();\n+        assertEquals(3, sub2.getBaseField());\n+        assertEquals(4, sub2.getBaseSub2Field());\n+        assertEquals(BaseSub2.class, sub2.getClass());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testLeafOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\n+        assertEquals(4, sub1sub2.getBaseField());\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\n+        pm.close();\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+\n+    public void testEagerLeafOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+        sql.clear();\n+\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\n+        assertEquals(4, sub1sub2.getBaseField());\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testMidOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\n+        assertEquals(2, sub1.getBaseField());\n+        assertEquals(3, sub1.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, sub1.getClass());\n+        pm.close();\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+\n+    public void testEagerMidOneOne()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+        sql.clear();\n+\n+        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\n+        assertEquals(2, sub1.getBaseField());\n+        assertEquals(3, sub1.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, sub1.getClass());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testBaseList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        List list = rel.getBaseList();\n+        assertEquals(2, list.size());\n+        Base base = (Base) list.get(0);\n+        assertEquals(1, base.getBaseField());\n+        assertEquals(Base.class, base.getClass());\n+        BaseSub2 sub2 = (BaseSub2) list.get(1);\n+        assertEquals(3, sub2.getBaseField());\n+        assertEquals(4, sub2.getBaseSub2Field());\n+        assertEquals(BaseSub2.class, sub2.getClass());\n+        pm.close();\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+\n+    public void testEagerBaseList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"baseList\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+        sql.clear();\n+\n+        List list = rel.getBaseList();\n+        assertEquals(2, list.size());\n+        Base base = (Base) list.get(0);\n+        assertEquals(1, base.getBaseField());\n+        assertEquals(Base.class, base.getClass());\n+        BaseSub2 sub2 = (BaseSub2) list.get(1);\n+        assertEquals(3, sub2.getBaseField());\n+        assertEquals(4, sub2.getBaseSub2Field());\n+        assertEquals(BaseSub2.class, sub2.getClass());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testLeafList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        List list = rel.getBaseSub1Sub2List();\n+        assertEquals(1, list.size());\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\n+        assertEquals(4, sub1sub2.getBaseField());\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\n+        pm.close();\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+    }\n+\n+    public void testEagerLeafList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2List\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(2, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        List list = rel.getBaseSub1Sub2List();\n+        assertEquals(1, list.size());\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\n+        assertEquals(4, sub1sub2.getBaseField());\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testMidList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertNotSQL(_outer);\n+        sql.clear();\n+\n+        List list = rel.getBaseSub1List();\n+        assertEquals(2, list.size());\n+        BaseSub1 sub1 = (BaseSub1) list.get(0);\n+        assertEquals(2, sub1.getBaseField());\n+        assertEquals(3, sub1.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, sub1.getClass());\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\n+        assertEquals(4, sub1sub2.getBaseField());\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\n+        pm.close();\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }\n+\n+    public void testEagerMidList()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1List\");\n+        Relations rel = (Relations) pm.getObjectId(_oid);\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+        sql.clear();\n+\n+        List list = rel.getBaseSub1List();\n+        assertEquals(2, list.size());\n+        BaseSub1 sub1 = (BaseSub1) list.get(0);\n+        assertEquals(2, sub1.getBaseField());\n+        assertEquals(3, sub1.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, sub1.getClass());\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\n+        assertEquals(4, sub1sub2.getBaseField());\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\n+        pm.close();\n+\n+        assertEquals(0, sql.size());\n+    }\n+\n+    public void testProjections()\n+        throws Exception {\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",Relations.class);\n+        //FIXME jthomas\n+        /*\n+        q.setResult(\"base, baseSub1, baseSub1Sub2\");\n+        q.setUnique(true);\n+        Object[] res = (Object[]) q.execute();\n+         */\n+        Object[] res=null;\n+        assertNotNull(res);\n+        assertEquals(3, res.length);\n+\n+        BaseSub2 sub2 = (BaseSub2) res[0];\n+        assertEquals(3, sub2.getBaseField());\n+        assertEquals(4, sub2.getBaseSub2Field());\n+        assertEquals(BaseSub2.class, sub2.getClass());\n+\n+        BaseSub1 sub1 = (BaseSub1) res[1];\n+        assertEquals(2, sub1.getBaseField());\n+        assertEquals(3, sub1.getBaseSub1Field());\n+        assertEquals(BaseSub1.class, sub1.getClass());\n+\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) res[2];\n+        assertEquals(4, sub1sub2.getBaseField());\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\n+        pm.close();\n+\n+        assertEquals(1, sql.size());\n+        assertSQL(_outer);\n+    }    \n+}"},{"sha":"1a402c8468db2db9bea09a8dfa4f18d298fd20ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.oracle;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-\r\n-/**\r\n- * A persistent entity to verify IDENTITY strategy for primary key value\r\n- * generation with Oracle Database.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class PObject {\r\n-\t@Id\r\n-\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String name;\r\n-\t\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\tpublic void setName(String s) {\r\n-\t\tthis.name = s;\r\n-\t}\r\n-\t\r\n-\t\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.oracle;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+/**\n+ * A persistent entity to verify IDENTITY strategy for primary key value\n+ * generation with Oracle Database.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class PObject {\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic void setName(String s) {\n+\t\tthis.name = s;\n+\t}\n+\t\n+\t\n+}"},{"sha":"16473a7df58c0b359062eb7eeb072d05bf4d790a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObjectNative.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObjectNative.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObjectNative.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/PObjectNative.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.oracle;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-\r\n-/**\r\n- * A persistent entity to verify IDENTITY strategy for primary key value\r\n- * generation with Oracle Database.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class PObjectNative {\r\n-\t@Id\r\n-\t@GeneratedValue(strategy=GenerationType.IDENTITY)\r\n-\tprivate long id;\r\n-\t\r\n-\tprivate String name;\r\n-\t\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\t\r\n-\tpublic void setName(String s) {\r\n-\t\tthis.name = s;\r\n-\t}\r\n-\t\r\n-\t\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.oracle;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+/**\n+ * A persistent entity to verify IDENTITY strategy for primary key value\n+ * generation with Oracle Database.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class PObjectNative {\n+\t@Id\n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tprivate long id;\n+\t\n+\tprivate String name;\n+\t\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\t\n+\tpublic void setName(String s) {\n+\t\tthis.name = s;\n+\t}\n+\t\n+\t\n+}"},{"sha":"ec4c89a7e031401b22cbf473fec340a1c0966f3f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/oracle/TestAutoIncrement.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,88 +1,88 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.oracle;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.DatabasePlatform;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Tests identity value assignment with IDENTITY strategy specifically for\r\n- * Oracle database. IDENTITY strategy for most database platform is supported\r\n- * with auto-increment capabilities. As Oracle does not natively support\r\n- * auto-increment, the same effect is achieved by a combination of a database\r\n- * sequence and a pre-insert database trigger [1].\r\n- * \r\n- * This test verifies that a persistence entity using IDENTITY generation type\r\n- * is allocated identities in monotonic sequence on Oracle platform.\r\n- * \r\n- * [1] http://jen.fluxcapacitor.net/geek/autoincr.html\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-\r\n-@DatabasePlatform(\"oracle.jdbc.driver.OracleDriver\")\r\n-public class TestAutoIncrement extends SingleEMFTestCase {\r\n-\tprivate static String PLATFORM = \"oracle\";\r\n-\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tif (\"testAutoIncrementIdentityWithNamedSequence\".equals(getName())) {\r\n-\t\t\tsuper.setUp(CLEAR_TABLES, PObject.class,\r\n-\t\t\t    \"openjpa.jdbc.DBDictionary\",\r\n-\t\t\t    \"oracle(UseTriggersForAutoAssign=true,\" + \r\n-\t\t\t    \"autoAssignSequenceName=autoIncrementSequence)\");\r\n-\t\t} else {\r\n-\t\t\tsuper.setUp(CLEAR_TABLES, PObjectNative.class,\r\n-\t\t\t\t\t\"openjpa.jdbc.DBDictionary\",\r\n-\t\t\t\t\t\"oracle(UseTriggersForAutoAssign=true)\");\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic void testAutoIncrementIdentityWithNamedSequence() {\r\n-\t\tif (!isTargetPlatform(PLATFORM))\r\n-\t\t\treturn;\r\n-\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObject pc1 = new PObject();\r\n-\t\tPObject pc2 = new PObject();\r\n-\t\tem.persist(pc1);\r\n-\t\tem.persist(pc2);\r\n-\t\tem.getTransaction().commit();\r\n-\r\n-\t\tassertEquals(1, Math.abs(pc1.getId() - pc2.getId()));\r\n-\t}\r\n-\r\n-\tpublic void testAutoIncrementIdentityWithNativeSequence() {\r\n-\t\tif (!isTargetPlatform(PLATFORM))\r\n-\t\t\treturn;\r\n-\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tPObjectNative pc1 = new PObjectNative();\r\n-\t\tPObjectNative pc2 = new PObjectNative();\r\n-\t\tem.persist(pc1);\r\n-\t\tem.persist(pc2);\r\n-\t\tem.getTransaction().commit();\r\n-\r\n-\t\tassertEquals(1, Math.abs(pc1.getId() - pc2.getId()));\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.oracle;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.DatabasePlatform;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests identity value assignment with IDENTITY strategy specifically for\n+ * Oracle database. IDENTITY strategy for most database platform is supported\n+ * with auto-increment capabilities. As Oracle does not natively support\n+ * auto-increment, the same effect is achieved by a combination of a database\n+ * sequence and a pre-insert database trigger [1].\n+ * \n+ * This test verifies that a persistence entity using IDENTITY generation type\n+ * is allocated identities in monotonic sequence on Oracle platform.\n+ * \n+ * [1] http://jen.fluxcapacitor.net/geek/autoincr.html\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+\n+@DatabasePlatform(\"oracle.jdbc.driver.OracleDriver\")\n+public class TestAutoIncrement extends SingleEMFTestCase {\n+\tprivate static String PLATFORM = \"oracle\";\n+\n+\tpublic void setUp() throws Exception {\n+\t\tif (\"testAutoIncrementIdentityWithNamedSequence\".equals(getName())) {\n+\t\t\tsuper.setUp(CLEAR_TABLES, PObject.class,\n+\t\t\t    \"openjpa.jdbc.DBDictionary\",\n+\t\t\t    \"oracle(UseTriggersForAutoAssign=true,\" + \n+\t\t\t    \"autoAssignSequenceName=autoIncrementSequence)\");\n+\t\t} else {\n+\t\t\tsuper.setUp(CLEAR_TABLES, PObjectNative.class,\n+\t\t\t\t\t\"openjpa.jdbc.DBDictionary\",\n+\t\t\t\t\t\"oracle(UseTriggersForAutoAssign=true)\");\n+\t\t}\n+\t}\n+\n+\tpublic void testAutoIncrementIdentityWithNamedSequence() {\n+\t\tif (!isTargetPlatform(PLATFORM))\n+\t\t\treturn;\n+\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tPObject pc1 = new PObject();\n+\t\tPObject pc2 = new PObject();\n+\t\tem.persist(pc1);\n+\t\tem.persist(pc2);\n+\t\tem.getTransaction().commit();\n+\n+\t\tassertEquals(1, Math.abs(pc1.getId() - pc2.getId()));\n+\t}\n+\n+\tpublic void testAutoIncrementIdentityWithNativeSequence() {\n+\t\tif (!isTargetPlatform(PLATFORM))\n+\t\t\treturn;\n+\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tPObjectNative pc1 = new PObjectNative();\n+\t\tPObjectNative pc2 = new PObjectNative();\n+\t\tem.persist(pc1);\n+\t\tem.persist(pc2);\n+\t\tem.getTransaction().commit();\n+\n+\t\tassertEquals(1, Math.abs(pc1.getId() - pc2.getId()));\n+\t}\n+}"},{"sha":"dab4bab802e139b2cfdbd4ae6c99ce25c0e4c0fc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,78 +1,78 @@\n-/*\r\n- * JDBCTestCase.java\r\n- *\r\n- * Created on October 6, 2006, 10:34 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.query;\r\n-\r\n-import java.util.*;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public abstract class JDBCTestCase extends AbstractTestCase {\r\n-    \r\n-    /** Creates a new instance of JDBCTestCase */\r\n-    public JDBCTestCase() {\r\n-    }\r\n-    \r\n-    \r\n-    public JDBCTestCase(String name) {\r\n-        super(name);\r\n-    }\r\n-    \r\n-    public Class getDefaultInheritanceStrategy() {\r\n-        return getClassMapping(RuntimeTest2.class).getStrategy().getClass();\r\n-    }\r\n-    \r\n-    public ClassMapping getClassMapping(Class c) {\r\n-        OpenJPAConfiguration jdoConf = getConfiguration();\r\n-        return ((JDBCConfiguration) jdoConf).getMappingRepositoryInstance().\r\n-                getMapping(c, getClass().getClassLoader(), true);\r\n-    }\r\n-    \r\n-    public FieldMapping getFieldMapping(Class c, String field) {\r\n-        return getClassMapping(c).getFieldMapping(field);\r\n-    }\r\n-    \r\n-    public boolean isInheritanceStrategyVertical() {\r\n-        return VerticalClassStrategy.class.\r\n-                isAssignableFrom(getDefaultInheritanceStrategy());\r\n-    }\r\n-    \r\n-}\r\n+/*\n+ * JDBCTestCase.java\n+ *\n+ * Created on October 6, 2006, 10:34 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.*;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public abstract class JDBCTestCase extends AbstractTestCase {\n+    \n+    /** Creates a new instance of JDBCTestCase */\n+    public JDBCTestCase() {\n+    }\n+    \n+    \n+    public JDBCTestCase(String name) {\n+        super(name);\n+    }\n+    \n+    public Class getDefaultInheritanceStrategy() {\n+        return getClassMapping(RuntimeTest2.class).getStrategy().getClass();\n+    }\n+    \n+    public ClassMapping getClassMapping(Class c) {\n+        OpenJPAConfiguration jdoConf = getConfiguration();\n+        return ((JDBCConfiguration) jdoConf).getMappingRepositoryInstance().\n+                getMapping(c, getClass().getClassLoader(), true);\n+    }\n+    \n+    public FieldMapping getFieldMapping(Class c, String field) {\n+        return getClassMapping(c).getFieldMapping(field);\n+    }\n+    \n+    public boolean isInheritanceStrategyVertical() {\n+        return VerticalClassStrategy.class.\n+                isAssignableFrom(getDefaultInheritanceStrategy());\n+    }\n+    \n+}"},{"sha":"6769f171b9632e08dae150b637d5f653fd233f30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import junit.framework.*;\r\n-\r\n-public class TestEJBQLSelectNPlusOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n-{\r\n-\tpublic TestEJBQLSelectNPlusOne(String name)\r\n-\t{\r\n-\t\tsuper(name);\r\n-\t}\r\n-\r\n-\tpublic void setUp()\r\n-\t{\r\n-\t\tdeleteAll (RuntimeTest1.class);\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\tpm.getTransaction ().begin ();\r\n-\t\tpm.persist(new RuntimeTest1(\"foo\", 3));\r\n-\t\tendTx(pm);\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-\tpublic void testSimpleEJBQLQuery() throws Exception\r\n-\t{\r\n-\t\tEntityManager pm = currentEntityManager();\r\n-\t\t// run a JDOQL query first to take care of any class-loading issues\r\n-\t\tList l = pm.createQuery(\"select object(o) from \" + RuntimeTest1.class.getSimpleName()+\" o\").getResultList();\r\n-\r\n-\t\t// now run the actual test.\r\n-\t\tassertEquals(1, l.size());\r\n-\t\tendEm(pm);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.*;\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import junit.framework.*;\n+\n+public class TestEJBQLSelectNPlusOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\n+{\n+\tpublic TestEJBQLSelectNPlusOne(String name)\n+\t{\n+\t\tsuper(name);\n+\t}\n+\n+\tpublic void setUp()\n+\t{\n+\t\tdeleteAll (RuntimeTest1.class);\n+\t\tEntityManager pm = currentEntityManager();\n+\t\tpm.getTransaction ().begin ();\n+\t\tpm.persist(new RuntimeTest1(\"foo\", 3));\n+\t\tendTx(pm);\n+\t\tendEm(pm);\n+\t}\n+\n+\tpublic void testSimpleEJBQLQuery() throws Exception\n+\t{\n+\t\tEntityManager pm = currentEntityManager();\n+\t\t// run a JDOQL query first to take care of any class-loading issues\n+\t\tList l = pm.createQuery(\"select object(o) from \" + RuntimeTest1.class.getSimpleName()+\" o\").getResultList();\n+\n+\t\t// now run the actual test.\n+\t\tassertEquals(1, l.size());\n+\t\tendEm(pm);\n+\t}\n+\n+}"},{"sha":"2423728fbed880423994048250a65cc088c97a42","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.query.domain.IndoorGame;\r\n-import org.apache.openjpa.persistence.jdbc.query.domain.Scrabble;\r\n-import org.apache.openjpa.persistence.jdbc.query.domain.Chess;\r\n-import org.apache.openjpa.persistence.jdbc.query.domain.Game;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Tests GROUP BY in sub query does not get parsed by owning query.\r\n- * \r\n- * Further details can be found in <A\r\n- * HREF=\"https://issues.apache.org/jira/browse/OPENJPA-28\">OPENJPA-28</A>\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-public class TestGroupByQuery extends SingleEMFTestCase {\r\n-\tpublic void setUp() {\r\n-\t\tsuper.setUp(DROP_TABLES, Game.class, IndoorGame.class, Scrabble.class,\r\n-\t\t\t\tChess.class);\r\n-\t\ttry {\r\n-\t\t\tcreateData();\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tvoid createData() throws Exception {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tClass[] classes = { Game.class, IndoorGame.class, Scrabble.class,\r\n-\t\t\t\tChess.class };\r\n-\t\tfor (Class cls : classes) {\r\n-\t\t\tfor (int i = 1; i <= 4; i++) {\r\n-\t\t\t\tGame p = (Game) cls.newInstance();\r\n-\t\t\t\tp.setName(cls.getSimpleName() + \"-\" + i);\r\n-\t\t\t\tem.persist(p);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tem.getTransaction().commit();\r\n-\t}\r\n-\r\n-\tpublic void testGroupBy() {\r\n-\t\tString jpql = \"SELECT g.name, g.nTile FROM Scrabble g WHERE \"\r\n-\t\t\t\t+ \"(g.name = ANY(SELECT g1.name FROM Scrabble g1 \"\r\n-\t\t\t\t+ \"GROUP BY g1.name )) ORDER BY g.name\";\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\r\n-\t\tList<IndoorGame> employees = em.createQuery(jpql).getResultList();\r\n-\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.jdbc.query.domain.IndoorGame;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Scrabble;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Chess;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Game;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests GROUP BY in sub query does not get parsed by owning query.\n+ * \n+ * Further details can be found in <A\n+ * HREF=\"https://issues.apache.org/jira/browse/OPENJPA-28\">OPENJPA-28</A>\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class TestGroupByQuery extends SingleEMFTestCase {\n+\tpublic void setUp() {\n+\t\tsuper.setUp(DROP_TABLES, Game.class, IndoorGame.class, Scrabble.class,\n+\t\t\t\tChess.class);\n+\t\ttry {\n+\t\t\tcreateData();\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tvoid createData() throws Exception {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tClass[] classes = { Game.class, IndoorGame.class, Scrabble.class,\n+\t\t\t\tChess.class };\n+\t\tfor (Class cls : classes) {\n+\t\t\tfor (int i = 1; i <= 4; i++) {\n+\t\t\t\tGame p = (Game) cls.newInstance();\n+\t\t\t\tp.setName(cls.getSimpleName() + \"-\" + i);\n+\t\t\t\tem.persist(p);\n+\t\t\t}\n+\t\t}\n+\t\tem.getTransaction().commit();\n+\t}\n+\n+\tpublic void testGroupBy() {\n+\t\tString jpql = \"SELECT g.name, g.nTile FROM Scrabble g WHERE \"\n+\t\t\t\t+ \"(g.name = ANY(SELECT g1.name FROM Scrabble g1 \"\n+\t\t\t\t+ \"GROUP BY g1.name )) ORDER BY g.name\";\n+\t\tEntityManager em = emf.createEntityManager();\n+\n+\t\tList<IndoorGame> employees = em.createQuery(jpql).getResultList();\n+\n+\t}\n+}"},{"sha":"76943bd50da7867ef9be3f4dcbb23a2dc1cb4d28","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,30 +1,30 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.jdbc.query;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.query.GroupingTestCase;\r\n-\r\n-public class TestJDBCGrouping extends GroupingTestCase {\r\n-\r\n-    protected void prepareQuery(Query q) {\r\n-        // nothing to do for JDBC case\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.query.GroupingTestCase;\n+\n+public class TestJDBCGrouping extends GroupingTestCase {\n+\n+    protected void prepareQuery(Query q) {\n+        // nothing to do for JDBC case\n+    }\n }\n\\ No newline at end of file"},{"sha":"b212b10ea6e32989db73376c68730596c6d20e79","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestMultipleEntityProjection.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"67ad1da4e173f522d89d637b665f8bd7d39eb69a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"213fbea6b80dc683676b70cc60457d92af3e6eba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f175aab93566d5ec269c78b25e5526b496187e98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java","status":"modified","additions":147,"deletions":147,"changes":294,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestOrderByQuery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"398b659b241eeb4a56dc7c7f36b402b9dc724d08","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","status":"modified","additions":293,"deletions":293,"changes":586,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestQueryParameterBinding.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"25aa14dde8c28c49ce3119c6728910617a2f7492","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","status":"modified","additions":464,"deletions":464,"changes":928,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bea38ad11fb18bd5e12f7c9b3960eb453a61e845","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c374e285acf81ed73659b206ee5d185a7958be7f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","status":"modified","additions":199,"deletions":199,"changes":398,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestTemporalTypeQueryParameterBinding.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d6bbd08352adc1e71ab35f44a0e19233762f2331","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"32917de42ffc8c17d4f389bc13f1688414952133","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"05eba56e4dda2d67c921e7f9fad2c1eb6a8dc881","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"28491f9bc49c97c532f5ae9ed1d04e1fd70f7268","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c6046e6a79c641813ec55856ae7eab8d2917e1e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"56cde58e964bf1734b6e43e0cdfc176ec3f119b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c5e16ff59967f8136e4b04967521c875021f745b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1cbaa79a159b4d01b7cc1ca9f94e08d79c9888a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b87a9b67f14fdedb4529898a077b06ba52d71675","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ba156701a70b498eedeccda60a2b3661b124b448","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"71441f30933d32c62bf17246171c7f1126340f34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"modified","additions":180,"deletions":180,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"54d266f0582b068389bc3f49e834b444faf11cd6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f6e631303c9eeba27e29c2226593d8cd6ab9920b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bd33951b04491b83649d16e45fb90848ec7b6ae0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Binder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"853d1c85a046428fbc10b37c06a2d013b8a68b95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1c82685bfa2385cdd4077d97bc269c16dc64cf07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Customer.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Customer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"85d3a959d76e18eb5bd3f093ed13c16a3bbd2b1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6bfbe3050500c66c2832deba331162d57754f4c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7db44266caee2d413311470cc83d7498e799c592","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Magazine.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Magazine.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Magazine.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Magazine.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c8355d970c525a8adc048c03210787d1ae8cc1fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Order.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Order.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Order.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d27f199e9c2237277d21afaee754821393060f14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Publisher.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Publisher.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3aeaf52cf7dd89fdd4d9a94f4b45d7a2f4a4c0d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7af235bd807eb79d57a66277c4846000541cc7dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeKeeper.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeKeeper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeKeeper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/TimeKeeper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c2761173ccab7f46becde63cc1650a16ef107619","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","status":"modified","additions":237,"deletions":237,"changes":474,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"38ab5a8324b551946b5e85af7eb7a9b0e682dbe3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","status":"modified","additions":208,"deletions":208,"changes":416,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"71de87a491f758ed93e45e6a5e6e204e28daa11c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9080d60989590f34e9d2064b1b16323035a5e252","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0888dd432463889b2c661674d11c52e7b3a92dbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fbc3220e5cb4f142434cede7ab78b1c4dac1bec9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"028b753273ee21bfd4e7096e1bc46cf76fc43ed9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ca68ecbffbd2d814e0839f37f7023a28af918ad3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","status":"modified","additions":331,"deletions":331,"changes":662,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1e869d7171736035d0ff003e1c30303b83561563","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"52e6269439dad3e11f5efe550b794f6740fa41b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","status":"modified","additions":131,"deletions":131,"changes":262,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1881eb99a7cde1260470013ba089482c293f3a34","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"629407da7ed2faf1cc30cd46e00f255ea136b242","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","status":"modified","additions":239,"deletions":239,"changes":478,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"04d12485e8000d19c5c44219a9642f02f6b59857","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d93cde32522ab51e72e2409524f0df44b7948854","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Address.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Address.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Address.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c6f3faaea470a37586d8c115eb8b6cc5597e30a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Author.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Author.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Author.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Author.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"50f33e9b10eca965fe757e4e9edf60c7facfe6d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Book.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ac883aadee2cdd10743515ad8671dcd307c48f39","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CD.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/CD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"07792bbae56557e32e7a9ca60e6e7af3f69817e5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Company.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Company.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Company.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4c5fcaa767fbbf0c4d7b67a46b4fa2334177629a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Department.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Department.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Department.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8fee561433c89ca57a1efaed60ba8f37e502a33c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Employee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f3e03a830fe4927cec042e4f080d2a697363e185","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Merchandise.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Merchandise.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Merchandise.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Merchandise.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"953b5b08a0ad3da343a911f45d2b835562a73d90","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Person.java","status":"modified","additions":132,"deletions":132,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Person.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Person.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"40e7294b908437964b642a281b56f1befb79f275","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Singer.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Singer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Singer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/Singer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"027634e11d6f827ff8c8c7a7e65b9bd17912de5c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestEagerQueries.java","status":"modified","additions":133,"deletions":133,"changes":266,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestEagerQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestEagerQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestEagerQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f21cde97e0f2cd5a5d10dde3029b52fe39ccdac3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestFinderCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"320f98fdb2145bd5a6829a32e72383df090c06d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestParameterProcessing.java","status":"modified","additions":130,"deletions":130,"changes":260,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestParameterProcessing.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestParameterProcessing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestParameterProcessing.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"13f24366aacc12658177414bf15b925997a78d9b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":552,"deletions":552,"changes":1104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1003b8560a6dcb2650d198bf7801f4e7ca35f230","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCacheExclusion.java","status":"modified","additions":124,"deletions":124,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCacheExclusion.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCacheExclusion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCacheExclusion.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"008ce606ba9e4880d470912985a49512dbc3d02a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","status":"modified","additions":79,"deletions":79,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2f246365f9c4009bd90fb61288ff4d4b28106c09","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ddb9e391c083b7f80e87865490727e884f0afb30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ded35a1d21e4a8eb006f6ee931d2d73d5742186a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"56408fb1c96de4dc5bc80b20fd01c7028a0c0ddc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Child.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Child.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Child.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Child.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e853b21cb5cb775f71af06303b5acd8da93d46e8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Parent.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Parent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Parent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/Parent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"069dbe75f7021add34ba267bed9efcad40bd96fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestParentChild.java","status":"modified","additions":231,"deletions":231,"changes":462,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestParentChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestParentChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/update/TestParentChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"541b81da3b40b777ac97bab4afe30e1186bd8ef5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ac9cd9084f03b0c54aa79e8efea4963644d7db02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"modified","additions":213,"deletions":213,"changes":426,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"87096d5db2e8cb0c459d52984cf3a4810a4a5e8e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","status":"modified","additions":163,"deletions":163,"changes":326,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a64df993849162f4447f568cdeb9b41a74626919","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"34cb00ce402cb3f9001bfeba2cbf762f211e99f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","status":"modified","additions":152,"deletions":152,"changes":304,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ddd504a65408d4981db7f41ae3b000e2b44cb634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":323,"deletions":323,"changes":646,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"079e05a5c123d3cd59b2e1738f5ad64cd6070ad4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"modified","additions":410,"deletions":410,"changes":820,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"46799e968fa8c8d049e9eb4236ec1d2083fc88c6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","status":"modified","additions":150,"deletions":150,"changes":300,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestSetParameter.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"360c81d20ecf71119495088c242aee2a5613bb30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","status":"modified","additions":180,"deletions":180,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c3817cf30314537f5bb3c107356cbc9e37b4682f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","status":"modified","additions":207,"deletions":207,"changes":414,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e7bf9842875cf20b2c8871c3dd6eaf769e03701a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ae112788785c9d2fbb3ffa4c8207c6c93476666e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8d6383d0f5e00125997a316bfb8c72bbaba08aac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","status":"modified","additions":466,"deletions":466,"changes":932,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6a4415e5507c53e98955f58248607a5096df39f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"78b0e703945dc6fe5003e71466361673bd3bbdb7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b0920bb58d16f5f5d4806c5daeaa0f72e204bd94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","status":"modified","additions":242,"deletions":242,"changes":484,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"47206acf5c8e00ab17306746fd352917672a61cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","status":"modified","additions":404,"deletions":404,"changes":808,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0c8d683afcff7725d24dc181fadcd7cd8192baa2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e0eba0117cb732be8fc40440880925a7deca9a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"77d253f961bced02dc609e4b1f286ce57b897bbb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"modified","additions":134,"deletions":134,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a598c93fe4c74261ab065ad48de439d897e33aa9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","status":"modified","additions":566,"deletions":566,"changes":1132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"230afe3e5c200fd21e5785a34208444654a033d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","status":"modified","additions":542,"deletions":542,"changes":1084,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d334a00e752fff2269b63e3eb6f8467fc2e0b8b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDynamicFetchPlan.java","status":"modified","additions":166,"deletions":166,"changes":332,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDynamicFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDynamicFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDynamicFetchPlan.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"30b10a6ee7f8f08c2e8126babc4ddfdd7da2b84b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","status":"modified","additions":245,"deletions":245,"changes":490,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e497d6a93e5fc381c674a77241998f47ac045ee2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a807c6ce1fb8ca537997ff051b9a94b6b7978bac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5db5402435c2f7fd4216cdd253bbd8396c3d44da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"70893c4780bd4b7e8da11c4fc1ad71c1c42036d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","status":"modified","additions":120,"deletions":120,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cd9c95f8c37ce13a26960cd9c0de3489111ecd52","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","status":"modified","additions":176,"deletions":176,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"478c0414a75dc94f798e64365e86db0db728edd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"290072392e130ad34cccc3ed8eae33cff960a974","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","status":"modified","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"afca6c93dd3ece07419ce31efd5abaf8a66248c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9e1c75e19cd268af76b1291ff8136e1695ea708f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"87edfd15509340de55e8456baf79196723c065b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"82294f86a86f6b035331fddf7376efaa604feee5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"747d17baae083c3afbd7465a2e7a5162144ba634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"459e50f985a4ddd8a8dda13e3b2dc344e9873ec6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"07afd5f785124e8ef46acef53ba8e3631ef15997","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"60b63c37fb8af246db0f596136ac3b116efe173f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"98d2cef3b5b5730549bde5617f7b93f9bc05a4be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","status":"modified","additions":199,"deletions":199,"changes":398,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8df8554cda685d6ea21aecf4a43d3f5ecc95a6ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","status":"modified","additions":402,"deletions":402,"changes":804,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9823033d58260337036b72bcde19db4435d2a318","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8c07d5aa75f122e513d25a674be4b00e47763c53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"207f7971c14d438dd27d49b15be16a1065f1bc51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","status":"modified","additions":526,"deletions":526,"changes":1052,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6f684b6f5b9af814ef66775e1b051a160e43e534","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","status":"modified","additions":383,"deletions":383,"changes":766,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9103fbf55eb47f406caa29ca10f5bf4fb069cb60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","status":"modified","additions":232,"deletions":232,"changes":464,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"095be9638e7ee57a575f67824333a7e26d04913f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b6c78636018569a55a5af5e49a98ec41618ced6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"84816f3555a250b6a986a4e11bd90fa79059dbfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","status":"modified","additions":448,"deletions":448,"changes":896,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"538645825a2c796cd8e64280d07cfd5dd2ad6ba6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"485d0771c9da5b4cb96fbc380af9936336ec0879","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","status":"modified","additions":148,"deletions":148,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b3d876c36377d239bd73e210a41062d4e37d3af9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","status":"modified","additions":184,"deletions":184,"changes":368,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"888d1569fcff36a987af4f691cedda0e187bc8eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","status":"modified","additions":291,"deletions":291,"changes":582,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9e57ee81eb678f1435517d4e8639b9f4b7cab3ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","status":"modified","additions":148,"deletions":148,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e107596eee021af8aea17c1ba3e0b6e2171a6558","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"189b2ddaf985836d7180628ce375555542750685","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"36a656ab84add2c163beb166e4f1987b3f25f054","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cf4cf1102ce6b897b7125e47b9b2837452b65df7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","status":"modified","additions":358,"deletions":358,"changes":716,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"84ec4b4ff4c7669a0393670d986ebc5f642f2590","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","status":"modified","additions":156,"deletions":156,"changes":312,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f820cc0129c8d9b9d75af127534987b9b308d0e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","status":"modified","additions":296,"deletions":296,"changes":592,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0dde414c9219454cf52756db24cc705364d851c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","status":"modified","additions":431,"deletions":431,"changes":862,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e7b12ac015f009aa94f9dc49771bba2de523a8ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","status":"modified","additions":229,"deletions":229,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c2148309ba7118d43a6f2bf0c1bc0d27836d1bad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","status":"modified","additions":352,"deletions":352,"changes":704,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5c24b494e0ec8b53a8ec1561813a0a4610d9eb57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","status":"modified","additions":274,"deletions":274,"changes":548,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"34d9d5e3cf1c95880f6d7056de2ce99f02e8cd28","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1ba226700d2a6cdca1ebd94b642e5adf060b6061","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","status":"modified","additions":526,"deletions":526,"changes":1052,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1aa5be740078705c29b3cf3c4e8a5cbd33b8552c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","status":"modified","additions":224,"deletions":224,"changes":448,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"913bcf9688e713594fbfe8cf1353f16ec63830af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","status":"modified","additions":142,"deletions":142,"changes":284,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d8aac1d8f5c8cd237448229e4bfab062c37e40bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","status":"modified","additions":183,"deletions":183,"changes":366,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ee3bf894fd6494f5ef32e71acc44e56bcd0b7c68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","status":"modified","additions":300,"deletions":300,"changes":600,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bcd51d56e272e16510533da9bcbfd6eb03dfa966","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f0d0ab391dcfb5dd289076d06f7a973876dd0b8d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2d0758e7d50e0d81167a19f87ba539d4e78ea375","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","status":"modified","additions":509,"deletions":509,"changes":1018,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"425e9cf0e5391542f646f0595a5698c451dab7b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","status":"modified","additions":780,"deletions":780,"changes":1560,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"094fd710e60c847afee2af4547ac31e483474aae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","status":"modified","additions":286,"deletions":286,"changes":572,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"682b17aae45af9aa1e94ce6ba349a0a894b81ad1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"60743ede8a430edd4b3b6170a868aada7eaf0440","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","status":"modified","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c1b574756f25d8012a41aff5545d1521a1038975","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","status":"modified","additions":136,"deletions":136,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"022d526221bc89fb67b8e38b6c7059bed6617adb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","status":"modified","additions":315,"deletions":315,"changes":630,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"af2f8e50ebdf21cbfa1b0b6a89d1fe40ec043cee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","status":"modified","additions":285,"deletions":285,"changes":570,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"68cc3650803047d81893407759ceff27fddadc3c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","status":"modified","additions":193,"deletions":193,"changes":386,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"dd09b918af09b5ab5c3d355bc606a7f15a08fd37","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5657ee31dcb1c90bc65a81ad2cfbbf2c46b02298","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"201b48f883c60beb5d693207b83392eb6521bbc3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","status":"modified","additions":994,"deletions":994,"changes":1988,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d10ad43fb46e3bcb7329986a110a66ab4980a14a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5de5f8c9666165964fbc574145dcaf5268cf4886","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"34da30eb38ec53366a3cf9985ed4093ea88d8c51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"696627043eb6f23f1ddc887ed886c52e84f2018f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","status":"modified","additions":303,"deletions":303,"changes":606,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"486c6d6ffd1b832b3ccb05f651ca23b1d4160be8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","status":"modified","additions":269,"deletions":269,"changes":538,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a71f86b12fe3a1e7c7dfd9eebc75f444b8e967ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"98e51cb6c7a32ff690b9016ed7be8fc07982acb7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","status":"modified","additions":179,"deletions":179,"changes":358,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1f2cf0cf967927e6d983b0121e3606c86e31d00f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3b027a166061c9d7229b6f261c73b24f27bc27eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c297bc786a44c8d4ce133d8c0194fd46fb3afdbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","status":"modified","additions":113,"deletions":113,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1b53fc82d0bf555aaa8ba403f291d1aba2c6ead4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e7b77f48d1383cc148c4a213c16b6a3ba31aa6fe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4200a7e0ce7f912c282b0fd6dddb989be7686096","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"322d1b30b83c4bc629bbe82475fa0a61e85644ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"073bb36e5df34886460a286303280c833e5d839e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","status":"modified","additions":277,"deletions":277,"changes":554,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1898552ebfd2ca900ace76788ce2acbf12f6eebb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9a5c2fca9b29ae2528efe21cf22047b7fb54e6b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","status":"modified","additions":100,"deletions":100,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c643ac5978c6c24c4301427126b950a617b1d30f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2923164e21eb34cfeba928d4b7a790ea782ab7b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","status":"modified","additions":174,"deletions":174,"changes":348,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1684a70af004c360a038b5f278e4955c56d259f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","status":"modified","additions":127,"deletions":127,"changes":254,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9da171e9adad87d8e9227c9e1ecb0352df759f9f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","status":"modified","additions":166,"deletions":166,"changes":332,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2d27496afcd46434567af9ae7cbb723ae2aa1bec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eaf1cec8927cb99047e3697e690325ccd4e1724a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"659892230f52e2f7985210f91b0f175a1f071db6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e2716409e016d476d6f7581b147f62559e1ea933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4837432b4567b7bbf55c89f2b2fad4b891de831b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4ba008e3828ac6498ccc6d1eb6940ab67c644d0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6253465010fdd1baa1bca3e5f41e89d7eb81a502","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"52532637288a9223861e6970ad0895bb7bed3a8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1257ff0df8b006ce4cec869693683b78ab0f2523","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6196315a5b1989abdc822b68558fee5c32d33a67","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"505c54f6412f96dc39fe9164963d84d9a57784da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","status":"modified","additions":155,"deletions":155,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cf68771d855c19fc0641de807d7187b7a03ae90d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e2f30141084ea6588042f46510871c2c9ef244ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9a2404d9c34cc7b1c4d85f2b2bfe086b42c83f0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8d7cf8f7ea76ff1d0c1ad4cf375771a0c9450ef9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8c199b6ab3e9fc3022fe3d8dec18f96c1791736d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"424da9d069a58ccadebd10a3a0130fe704fdbf54","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","status":"modified","additions":129,"deletions":129,"changes":258,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ab09af6b83429a871f3c430dc5de120601d0c177","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchA.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7f349729b401913c67af2fec906aa8301ac5543f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchB.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ede6d382ddd3fd8c499495bcbcbde86d18e4c5a1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchBase.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchBase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchBase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"66461e53cc6b41b0669a6a33501dab8947a688b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","status":"modified","additions":157,"deletions":157,"changes":314,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1eb3e9329b53ed8b1c284656a8478b9e30101997","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"779fbfaa0065c66929622fb4b11394ff9a2cb459","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2f057b33d0d889530cb73ce87edeabbc295a9859","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","status":"modified","additions":186,"deletions":186,"changes":372,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b6301523c160aec17aa29fa47f3c5d325cfc40ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3507abfd370d8544d2aa5845cc29a109967ff47a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"880842924eb9c348229bb88fca59f278593a4957","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"20eadee808f7b40868ffb001c4034c75303afda6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a587064b07db315932d528549c43eb76016ad8cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"14da1b7b899f4eab2330088b03c2e216e116757c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0801d457d78b02d480bb199fad9fd0f2d8973227","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3a92ab8652f0e2c3419d8b0215e1db51abe25af7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ad9884e507e7a2bcb21db5861dc970d20aa959f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"647be156f388cbdfadb7bb82007d7d11b0c4ab15","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"dd0db4db6a1c46df695f9a5bc0f3c8896f48dabe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a293740284bd41d551ea9282a30d4deb497cd1d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f193df343cbc82182dc68bee783287279da1c2d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7b700b5624b5c7bd0138d0c1c06b61260c8cce87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"dfc58064717299331cad90abbd5af964ba9a35eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3061c8b050717d7d30ba60770b31b0de7c502e32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d31da3157bda47c8434732e6cffd9af25bf2066b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3c1c3955da11d47ab22df1f6e0b34c21afafbf64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2f53e6325ef1909004511d659eb33e10fac86acd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8081aeb3ba08302a69e70da4e3ffa09044146806","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ff32fd616c119f11983daa4bc57d2aa6b748fd96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fb26d26f88a3e2de52d35fd2061e829adecd834b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"32d9eb54fad96bcbc44ddfa6447f4b1396b0867b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b4eb8dcf419c82445d234c97eb67113a93a6d1be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4ad85ad788fa5a3b80b3dde66accfe5f02253b1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cc728c579e797fd2e386ac9fa582565166e7dcfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","status":"modified","additions":186,"deletions":186,"changes":372,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"edbf318ba5008eff2b8d4dec0d5f7ab6ef061819","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"85840185e14bd740700822e9f87897710b3f90a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ccc608c9e01b8213b435e7b66819e57c04b0361f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"df366940f692faa50a449374f93869729982e340","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"29074c687d0ed2d1d569aa3a5dced0704f7700f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d15a2edd9f3bf5b2489cadeef2c66ead04c59e62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cecb8081bce6edf6fe2ed9ab3e05f6e5a73bec9b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e407d2417b893f70b0742153cff4bcd381437e5c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0f29767dbe0fe219073e33bc2b9e0a6b5f74c7b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","status":"modified","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"03a2e8b4cbe48910e494ca8e471471b0263643cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ed9f91f574cbcb04afe2ecd10b8830ba8d9a6831","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9ea46adadca1135b0ef859918d4e1a095f2ffde8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3087418fd723f8a5f2be4d4eed9702ae880989df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","status":"modified","additions":178,"deletions":178,"changes":356,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"}]}

