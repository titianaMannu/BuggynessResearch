{"sha":"90b84c5d73db4d0d7fa3e5520358912961b59c43","node_id":"MDY6Q29tbWl0MjA2MzY0OjkwYjg0YzVkNzNkYjRkMGQ3ZmEzZTU1MjAzNTg5MTI5NjFiNTljNDM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-22T23:37:24Z"},"message":"OPENJPA-896. Setting eol-style:native and removing windows eol characters from source files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@757278 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"acb22a46ce954612c3f359175e18ce97ad6ecf85","url":"https://api.github.com/repos/apache/openjpa/git/trees/acb22a46ce954612c3f359175e18ce97ad6ecf85"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43","html_url":"https://github.com/apache/openjpa/commit/90b84c5d73db4d0d7fa3e5520358912961b59c43","comments_url":"https://api.github.com/repos/apache/openjpa/commits/90b84c5d73db4d0d7fa3e5520358912961b59c43/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"c3175eea3c3885286898170fae6b487b070f60b5","url":"https://api.github.com/repos/apache/openjpa/commits/c3175eea3c3885286898170fae6b487b070f60b5","html_url":"https://github.com/apache/openjpa/commit/c3175eea3c3885286898170fae6b487b070f60b5"}],"stats":{"total":382166,"additions":191083,"deletions":191083},"files":[{"sha":"e03fc9f79b2a8cfc959246cff75812dcc12cbf65","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-import org.apache.openjpa.persistence.FetchAttribute;\r\n-import org.apache.openjpa.persistence.FetchGroup;\r\n-\r\n-/**\r\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n- */\r\n-@Entity\r\n-@FetchGroup(name = \"employee.department\",\r\n-    attributes = @FetchAttribute(name = \"department\"))\r\n-public class PCEmployee extends PCPerson {\r\n-\r\n-    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r\n-    private PCDepartment department;\r\n-\r\n-    protected PCEmployee() {\r\n-        super();\r\n-    }\r\n-\r\n-    public PCEmployee(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public PCDepartment getDepartment() {\r\n-        return department;\r\n-    }\r\n-\r\n-    public void setDepartment(PCDepartment department) {\r\n-        this.department = department;\r\n-    }\r\n-\r\n-    public static Object reflect(PCEmployee instance, String name) {\r\n-        if (instance == null)\r\n-            return null;\r\n-        try {\r\n-            return PCEmployee.class.getDeclaredField(name).get(instance);\r\n-        } catch (Exception e) {\r\n-            throw new RuntimeException(e);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+\n+import org.apache.openjpa.persistence.FetchAttribute;\n+import org.apache.openjpa.persistence.FetchGroup;\n+\n+/**\n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\n+ */\n+@Entity\n+@FetchGroup(name = \"employee.department\",\n+    attributes = @FetchAttribute(name = \"department\"))\n+public class PCEmployee extends PCPerson {\n+\n+    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\n+    private PCDepartment department;\n+\n+    protected PCEmployee() {\n+        super();\n+    }\n+\n+    public PCEmployee(String name) {\n+        super(name);\n+    }\n+\n+    public PCDepartment getDepartment() {\n+        return department;\n+    }\n+\n+    public void setDepartment(PCDepartment department) {\n+        this.department = department;\n+    }\n+\n+    public static Object reflect(PCEmployee instance, String name) {\n+        if (instance == null)\n+            return null;\n+        try {\n+            return PCEmployee.class.getDeclaredField(name).get(instance);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}"},{"sha":"781981f3e8c66f608d754d32ea2ec3464bcc1be7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,65 +1,65 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-/**\r\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n- */\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Column;\r\n-\r\n-@Entity\r\n-public class PCFile {\r\n-\r\n-    @Column(name=\"name_col\")\r\n-    private String _name;\r\n-\r\n-    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r\n-    private PCDirectory _dir;\r\n-\r\n-    /**\r\n-     *\r\n-     */\r\n-    protected PCFile() {\r\n-        super();\r\n-    }\r\n-\r\n-    PCFile(PCDirectory dir, String name) {\r\n-        super();\r\n-        if (dir == null)\r\n-            throw new NullPointerException(\"null directory\");\r\n-        if (name == null || name.trim().length() == 0)\r\n-            throw new NullPointerException(\"null name\");\r\n-\r\n-        _dir = dir;\r\n-        _name = name;\r\n-    }\r\n-\r\n-    public PCDirectory getDir() {\r\n-        return _dir;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return _name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+/**\n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\n+ */\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Column;\n+\n+@Entity\n+public class PCFile {\n+\n+    @Column(name=\"name_col\")\n+    private String _name;\n+\n+    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\n+    private PCDirectory _dir;\n+\n+    /**\n+     *\n+     */\n+    protected PCFile() {\n+        super();\n+    }\n+\n+    PCFile(PCDirectory dir, String name) {\n+        super();\n+        if (dir == null)\n+            throw new NullPointerException(\"null directory\");\n+        if (name == null || name.trim().length() == 0)\n+            throw new NullPointerException(\"null name\");\n+\n+        _dir = dir;\n+        _name = name;\n+    }\n+\n+    public PCDirectory getDir() {\n+        return _dir;\n+    }\n+\n+    public String getName() {\n+        return _name;\n+    }\n+}"},{"sha":"ecdbb4ab5162808faa276a378a93dd70f58810a0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,114 +1,114 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import java.util.HashSet;\r\n-import java.util.Set;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.ManyToMany;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-import org.apache.openjpa.persistence.FetchAttribute;\r\n-import org.apache.openjpa.persistence.FetchGroup;\r\n-import org.apache.openjpa.persistence.FetchGroups;\r\n-\r\n-/**\r\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n- */\r\n-@Entity\r\n-@FetchGroups({\r\n-@FetchGroup(name = \"detail+children-names\", fetchGroups = \"detail\"),\r\n-@FetchGroup(name = \"detail\", fetchGroups = \"default\",\r\n-    attributes = @FetchAttribute(name = \"address\")),\r\n-@FetchGroup(name = \"detail+children-list\", fetchGroups = \"detail\",\r\n-    attributes = @FetchAttribute(name = \"children\")),\r\n-@FetchGroup(name = \"person.address\",\r\n-    attributes = @FetchAttribute(name = \"address\"))\r\n-    })\r\n-public class PCPerson {\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r\n-    private PCAddress address;\r\n-\r\n-    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r\n-    private PCPerson parent;\r\n-\r\n-    @ManyToMany(cascade = CascadeType.PERSIST)\r\n-    private Set<PCPerson> children;\r\n-\r\n-    protected PCPerson() {\r\n-        super();\r\n-    }\r\n-\r\n-    public PCPerson(String name) {\r\n-        setName(name);\r\n-    }\r\n-\r\n-    public PCAddress getAddress() {\r\n-        return address;\r\n-    }\r\n-\r\n-    public void setAddress(PCAddress address) {\r\n-        this.address = address;\r\n-    }\r\n-\r\n-    public Set getChildren() {\r\n-        return children;\r\n-    }\r\n-\r\n-    public void setChildren(Set children) {\r\n-        this.children = children;\r\n-    }\r\n-\r\n-    public void addChildren(PCPerson child) {\r\n-        if (children == null)\r\n-            children = new HashSet();\r\n-        children.add(child);\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public PCPerson getParent() {\r\n-        return parent;\r\n-    }\r\n-\r\n-    public void setParent(PCPerson parent) {\r\n-        this.parent = parent;\r\n-    }\r\n-\r\n-    public static Object reflect(PCPerson instance, String name) {\r\n-        if (instance == null)\r\n-            return null;\r\n-        try {\r\n-            return PCPerson.class.getDeclaredField(name).get(instance);\r\n-        } catch (Exception e) {\r\n-            throw new RuntimeException(e);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+\n+import org.apache.openjpa.persistence.FetchAttribute;\n+import org.apache.openjpa.persistence.FetchGroup;\n+import org.apache.openjpa.persistence.FetchGroups;\n+\n+/**\n+ * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\n+ */\n+@Entity\n+@FetchGroups({\n+@FetchGroup(name = \"detail+children-names\", fetchGroups = \"detail\"),\n+@FetchGroup(name = \"detail\", fetchGroups = \"default\",\n+    attributes = @FetchAttribute(name = \"address\")),\n+@FetchGroup(name = \"detail+children-list\", fetchGroups = \"detail\",\n+    attributes = @FetchAttribute(name = \"children\")),\n+@FetchGroup(name = \"person.address\",\n+    attributes = @FetchAttribute(name = \"address\"))\n+    })\n+public class PCPerson {\n+\n+    private String name;\n+\n+    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\n+    private PCAddress address;\n+\n+    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\n+    private PCPerson parent;\n+\n+    @ManyToMany(cascade = CascadeType.PERSIST)\n+    private Set<PCPerson> children;\n+\n+    protected PCPerson() {\n+        super();\n+    }\n+\n+    public PCPerson(String name) {\n+        setName(name);\n+    }\n+\n+    public PCAddress getAddress() {\n+        return address;\n+    }\n+\n+    public void setAddress(PCAddress address) {\n+        this.address = address;\n+    }\n+\n+    public Set getChildren() {\n+        return children;\n+    }\n+\n+    public void setChildren(Set children) {\n+        this.children = children;\n+    }\n+\n+    public void addChildren(PCPerson child) {\n+        if (children == null)\n+            children = new HashSet();\n+        children.add(child);\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public PCPerson getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(PCPerson parent) {\n+        this.parent = parent;\n+    }\n+\n+    public static Object reflect(PCPerson instance, String name) {\n+        if (instance == null)\n+            return null;\n+        try {\n+            return PCPerson.class.getDeclaredField(name).get(instance);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}"},{"sha":"05ef8e6a3d31e4332bebaad8d24bb51b42fdf433","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>A persistence-aware type that should be enhanced.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-public class PersistenceAware {\r\n-\r\n-    public static String getTransString(RuntimeTest1 rt) {\r\n-        return rt.transString;\r\n-    }\r\n-\r\n-    public static void setTransString(RuntimeTest1 rt, String value) {\r\n-        rt.transString = value;\r\n-    }\r\n-\r\n-    public static String getModTransString(ModRuntimeTest1 rt) {\r\n-        return rt.transString;\r\n-    }\r\n-\r\n-    public static void setModTransString(ModRuntimeTest1 rt, String value) {\r\n-        rt.transString = value;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>A persistence-aware type that should be enhanced.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+public class PersistenceAware {\n+\n+    public static String getTransString(RuntimeTest1 rt) {\n+        return rt.transString;\n+    }\n+\n+    public static void setTransString(RuntimeTest1 rt, String value) {\n+        rt.transString = value;\n+    }\n+\n+    public static String getModTransString(ModRuntimeTest1 rt) {\n+        return rt.transString;\n+    }\n+\n+    public static void setModTransString(ModRuntimeTest1 rt, String value) {\n+        rt.transString = value;\n+    }\n+}"},{"sha":"b63b80cefbff1c24cd386462ffba3320227fe598","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,118 +1,118 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.KeyColumn;\r\n-import org.apache.openjpa.persistence.PersistentMap;\r\n-\r\n-@Entity\r\n-public class PersistentMapHolder {\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCKeyStringValue\")\r\n-    private Map<MapElementPC, String> testPCKeyStringValue =\r\n-        new HashMap<MapElementPC, String>();\r\n-\r\n-    @PersistentMap(elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testStringKeyPCValue\")\r\n-    private Map<String, MapElementPC> testStringKeyPCValue =\r\n-        new HashMap<String, MapElementPC>();\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST,\r\n-        elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCKeyPCValue\")\r\n-    private Map<MapElementPC, MapElementPC> testPCKeyPCValue =\r\n-        new HashMap<MapElementPC, MapElementPC>();\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCSubKeyStringValue\")\r\n-    private Map<MapElementPCChild, String> testPCSubKeyStringValue =\r\n-        new HashMap<MapElementPCChild, String>();\r\n-\r\n-    @PersistentMap(elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testStringKeyPCSubValue\")\r\n-    private Map<String, MapElementPCChild> testStringKeyPCSubValue =\r\n-        new HashMap<String, MapElementPCChild>();\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST,\r\n-        elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCSubKeyPCValue\")\r\n-    private Map<MapElementPCChild, MapElementPC> testPCSubKeyPCValue =\r\n-        new HashMap<MapElementPCChild, MapElementPC>();\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST,\r\n-        elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCSubKeyPCSubValue\")\r\n-    private Map<MapElementPCChild, MapElementPCChild> testPCSubKeyPCSubValue =\r\n-        new HashMap<MapElementPCChild, MapElementPCChild>();\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST,\r\n-        elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCKeyPCSubValue\")\r\n-    private Map<MapElementPC, MapElementPCChild> testPCKeyPCSubValue =\r\n-        new HashMap<MapElementPC, MapElementPCChild>();\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCIntfKeyStringValue\")\r\n-    private Map<MapElementIntf, String> testPCIntfKeyStringValue =\r\n-        new HashMap<MapElementIntf, String>();\r\n-\r\n-    @PersistentMap(elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testStringKeyPCIntfValue\")\r\n-    private Map<String, MapElementIntf> testStringKeyPCIntfValue =\r\n-        new HashMap<String, MapElementIntf>();\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST,\r\n-        elementCascade = CascadeType.PERSIST)\r\n-    @KeyColumn(name = \"testPCIntfKeyPCValue\")\r\n-    private Map<MapElementIntf, MapElementPC> testPCIntfKeyPCValue =\r\n-        new HashMap<MapElementIntf, MapElementPC>();\r\n-\r\n-    public Map getNamedMap(String name) {\r\n-        if (name.equals(\"testPCKeyStringValue\"))\r\n-            return testPCKeyStringValue;\r\n-        if (name.equals(\"testStringKeyPCValue\"))\r\n-            return testStringKeyPCValue;\r\n-        if (name.equals(\"testPCKeyPCValue\"))\r\n-            return testPCKeyPCValue;\r\n-        if (name.equals(\"testPCSubKeyStringValue\"))\r\n-            return testPCSubKeyStringValue;\r\n-        if (name.equals(\"testStringKeyPCSubValue\"))\r\n-            return testStringKeyPCSubValue;\r\n-        if (name.equals(\"testPCSubKeyPCValue\"))\r\n-            return testPCSubKeyPCValue;\r\n-        if (name.equals(\"testPCSubKeyPCSubValue\"))\r\n-            return testPCSubKeyPCSubValue;\r\n-        if (name.equals(\"testPCKeyPCSubValue\"))\r\n-            return testPCKeyPCSubValue;\r\n-        if (name.equals(\"testPCIntfKeyStringValue\"))\r\n-            return testPCIntfKeyStringValue;\r\n-        if (name.equals(\"testStringKeyPCIntfValue\"))\r\n-            return testStringKeyPCIntfValue;\r\n-        if (name.equals(\"testPCIntfKeyPCValue\"))\r\n-            return testPCIntfKeyPCValue;\r\n-\r\n-        return null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.jdbc.KeyColumn;\n+import org.apache.openjpa.persistence.PersistentMap;\n+\n+@Entity\n+public class PersistentMapHolder {\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCKeyStringValue\")\n+    private Map<MapElementPC, String> testPCKeyStringValue =\n+        new HashMap<MapElementPC, String>();\n+\n+    @PersistentMap(elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testStringKeyPCValue\")\n+    private Map<String, MapElementPC> testStringKeyPCValue =\n+        new HashMap<String, MapElementPC>();\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST,\n+        elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCKeyPCValue\")\n+    private Map<MapElementPC, MapElementPC> testPCKeyPCValue =\n+        new HashMap<MapElementPC, MapElementPC>();\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCSubKeyStringValue\")\n+    private Map<MapElementPCChild, String> testPCSubKeyStringValue =\n+        new HashMap<MapElementPCChild, String>();\n+\n+    @PersistentMap(elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testStringKeyPCSubValue\")\n+    private Map<String, MapElementPCChild> testStringKeyPCSubValue =\n+        new HashMap<String, MapElementPCChild>();\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST,\n+        elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCSubKeyPCValue\")\n+    private Map<MapElementPCChild, MapElementPC> testPCSubKeyPCValue =\n+        new HashMap<MapElementPCChild, MapElementPC>();\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST,\n+        elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCSubKeyPCSubValue\")\n+    private Map<MapElementPCChild, MapElementPCChild> testPCSubKeyPCSubValue =\n+        new HashMap<MapElementPCChild, MapElementPCChild>();\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST,\n+        elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCKeyPCSubValue\")\n+    private Map<MapElementPC, MapElementPCChild> testPCKeyPCSubValue =\n+        new HashMap<MapElementPC, MapElementPCChild>();\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCIntfKeyStringValue\")\n+    private Map<MapElementIntf, String> testPCIntfKeyStringValue =\n+        new HashMap<MapElementIntf, String>();\n+\n+    @PersistentMap(elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testStringKeyPCIntfValue\")\n+    private Map<String, MapElementIntf> testStringKeyPCIntfValue =\n+        new HashMap<String, MapElementIntf>();\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST,\n+        elementCascade = CascadeType.PERSIST)\n+    @KeyColumn(name = \"testPCIntfKeyPCValue\")\n+    private Map<MapElementIntf, MapElementPC> testPCIntfKeyPCValue =\n+        new HashMap<MapElementIntf, MapElementPC>();\n+\n+    public Map getNamedMap(String name) {\n+        if (name.equals(\"testPCKeyStringValue\"))\n+            return testPCKeyStringValue;\n+        if (name.equals(\"testStringKeyPCValue\"))\n+            return testStringKeyPCValue;\n+        if (name.equals(\"testPCKeyPCValue\"))\n+            return testPCKeyPCValue;\n+        if (name.equals(\"testPCSubKeyStringValue\"))\n+            return testPCSubKeyStringValue;\n+        if (name.equals(\"testStringKeyPCSubValue\"))\n+            return testStringKeyPCSubValue;\n+        if (name.equals(\"testPCSubKeyPCValue\"))\n+            return testPCSubKeyPCValue;\n+        if (name.equals(\"testPCSubKeyPCSubValue\"))\n+            return testPCSubKeyPCSubValue;\n+        if (name.equals(\"testPCKeyPCSubValue\"))\n+            return testPCKeyPCSubValue;\n+        if (name.equals(\"testPCIntfKeyStringValue\"))\n+            return testPCIntfKeyStringValue;\n+        if (name.equals(\"testStringKeyPCIntfValue\"))\n+            return testStringKeyPCIntfValue;\n+        if (name.equals(\"testPCIntfKeyPCValue\"))\n+            return testPCIntfKeyPCValue;\n+\n+        return null;\n+    }\n+}"},{"sha":"2820f23fe7751794cd28e3765444d9ddf1ae57b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","status":"modified","additions":181,"deletions":181,"changes":362,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,181 +1,181 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-import java.util.TreeMap;\r\n-import java.util.TreeSet;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OrderBy;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Temporal;\r\n-import javax.persistence.TemporalType;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.KeyColumn;\r\n-import org.apache.commons.collections.comparators.ComparableComparator;\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-import org.apache.openjpa.persistence.PersistentMap;\r\n-\r\n-/**\r\n- * <p>Persistent type used in the {@link TestProxies} tests.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-@Table(name = \"PROX_PC\")\r\n-public class ProxiesPC implements Comparable {\r\n-\r\n-    @Id\r\n-    @GeneratedValue(strategy = GenerationType.AUTO)\r\n-    public int id;\r\n-\r\n-    private String name = null;\r\n-\r\n-    @PersistentCollection\r\n-    private Set<String> stringSet = new HashSet();\r\n-\r\n-    @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private TreeSet<ProxiesPC> proxySet = new TreeSet();\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"strngkey\")\r\n-    private Map<String, String> stringMap = new HashMap();\r\n-\r\n-    //    @PersistentMap\r\n-    @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    @KeyColumn(name = \"prxykey\")\r\n-    private TreeMap<String, ProxiesPC> proxyMap = new TreeMap();\r\n-\r\n-    @PersistentCollection\r\n-    @OrderBy\r\n-    private List<String> list = new ArrayList();\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<String> comp = new TreeSet(new ComparableComparator());\r\n-\r\n-    @Temporal(TemporalType.DATE)\r\n-    private Date date = null;\r\n-\r\n-    // sql types\r\n-    private java.sql.Date sqlDate = null;\r\n-    private java.sql.Timestamp timestamp = null;\r\n-\r\n-    public ProxiesPC() {\r\n-    }\r\n-\r\n-    public ProxiesPC(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public int getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public Set getStringSet() {\r\n-        return stringSet;\r\n-    }\r\n-\r\n-    public void setStringSet(Set stringSet) {\r\n-        this.stringSet = stringSet;\r\n-    }\r\n-\r\n-    public TreeSet getProxySet() {\r\n-        return proxySet;\r\n-    }\r\n-\r\n-    public void setProxySet(TreeSet proxySet) {\r\n-        this.proxySet = proxySet;\r\n-    }\r\n-\r\n-    public Map getStringMap() {\r\n-        return stringMap;\r\n-    }\r\n-\r\n-    public void setStringMap(Map stringMap) {\r\n-        this.stringMap = stringMap;\r\n-    }\r\n-\r\n-    public TreeMap getProxyMap() {\r\n-        return proxyMap;\r\n-    }\r\n-\r\n-    public void setProxyMap(TreeMap proxyMap) {\r\n-        this.proxyMap = proxyMap;\r\n-    }\r\n-\r\n-    public int compareTo(Object other) {\r\n-        return name.compareTo(((ProxiesPC) other).getName());\r\n-    }\r\n-\r\n-    public List getList() {\r\n-        return this.list;\r\n-    }\r\n-\r\n-    public void setList(List list) {\r\n-        this.list = list;\r\n-    }\r\n-\r\n-    public Collection getComp() {\r\n-        return this.comp;\r\n-    }\r\n-\r\n-    public void setComp(Collection comp) {\r\n-        this.comp = comp;\r\n-    }\r\n-\r\n-    public java.sql.Date getSQLDate() {\r\n-        return this.sqlDate;\r\n-    }\r\n-\r\n-    public void setSQLDate(java.sql.Date sqlDate) {\r\n-        this.sqlDate = sqlDate;\r\n-    }\r\n-\r\n-    public java.sql.Timestamp getTimestamp() {\r\n-        return this.timestamp;\r\n-    }\r\n-\r\n-    public void setTimestamp(java.sql.Timestamp timestamp) {\r\n-        this.timestamp = timestamp;\r\n-    }\r\n-\r\n-    public Date getDate() {\r\n-        return this.date;\r\n-    }\r\n-\r\n-    public void setDate(Date date) {\r\n-        this.date = date;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+import org.apache.openjpa.persistence.jdbc.KeyColumn;\n+import org.apache.commons.collections.comparators.ComparableComparator;\n+import org.apache.openjpa.persistence.PersistentCollection;\n+import org.apache.openjpa.persistence.PersistentMap;\n+\n+/**\n+ * <p>Persistent type used in the {@link TestProxies} tests.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+@Table(name = \"PROX_PC\")\n+public class ProxiesPC implements Comparable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public int id;\n+\n+    private String name = null;\n+\n+    @PersistentCollection\n+    private Set<String> stringSet = new HashSet();\n+\n+    @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private TreeSet<ProxiesPC> proxySet = new TreeSet();\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"strngkey\")\n+    private Map<String, String> stringMap = new HashMap();\n+\n+    //    @PersistentMap\n+    @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    @KeyColumn(name = \"prxykey\")\n+    private TreeMap<String, ProxiesPC> proxyMap = new TreeMap();\n+\n+    @PersistentCollection\n+    @OrderBy\n+    private List<String> list = new ArrayList();\n+\n+    @PersistentCollection\n+    private Collection<String> comp = new TreeSet(new ComparableComparator());\n+\n+    @Temporal(TemporalType.DATE)\n+    private Date date = null;\n+\n+    // sql types\n+    private java.sql.Date sqlDate = null;\n+    private java.sql.Timestamp timestamp = null;\n+\n+    public ProxiesPC() {\n+    }\n+\n+    public ProxiesPC(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Set getStringSet() {\n+        return stringSet;\n+    }\n+\n+    public void setStringSet(Set stringSet) {\n+        this.stringSet = stringSet;\n+    }\n+\n+    public TreeSet getProxySet() {\n+        return proxySet;\n+    }\n+\n+    public void setProxySet(TreeSet proxySet) {\n+        this.proxySet = proxySet;\n+    }\n+\n+    public Map getStringMap() {\n+        return stringMap;\n+    }\n+\n+    public void setStringMap(Map stringMap) {\n+        this.stringMap = stringMap;\n+    }\n+\n+    public TreeMap getProxyMap() {\n+        return proxyMap;\n+    }\n+\n+    public void setProxyMap(TreeMap proxyMap) {\n+        this.proxyMap = proxyMap;\n+    }\n+\n+    public int compareTo(Object other) {\n+        return name.compareTo(((ProxiesPC) other).getName());\n+    }\n+\n+    public List getList() {\n+        return this.list;\n+    }\n+\n+    public void setList(List list) {\n+        this.list = list;\n+    }\n+\n+    public Collection getComp() {\n+        return this.comp;\n+    }\n+\n+    public void setComp(Collection comp) {\n+        this.comp = comp;\n+    }\n+\n+    public java.sql.Date getSQLDate() {\n+        return this.sqlDate;\n+    }\n+\n+    public void setSQLDate(java.sql.Date sqlDate) {\n+        this.sqlDate = sqlDate;\n+    }\n+\n+    public java.sql.Timestamp getTimestamp() {\n+        return this.timestamp;\n+    }\n+\n+    public void setTimestamp(java.sql.Timestamp timestamp) {\n+        this.timestamp = timestamp;\n+    }\n+\n+    public Date getDate() {\n+        return this.date;\n+    }\n+\n+    public void setDate(Date date) {\n+        this.date = date;\n+    }\n+}"},{"sha":"5411d4770661fc6797b2fe99c162f9807280b02f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-/**\r\n- * <p>Embedded type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-public class RecursivelyEmbeddedPC {\r\n-\r\n-    @OneToOne\r\n-    private EmbeddedPC embedded;\r\n-\r\n-    public EmbeddedPC getEmbedded() {\r\n-        return this.embedded;\r\n-    }\r\n-\r\n-    public void setEmbedded(EmbeddedPC embedded) {\r\n-        this.embedded = embedded;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+\n+/**\n+ * <p>Embedded type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+public class RecursivelyEmbeddedPC {\n+\n+    @OneToOne\n+    private EmbeddedPC embedded;\n+\n+    public EmbeddedPC getEmbedded() {\n+        return this.embedded;\n+    }\n+\n+    public void setEmbedded(EmbeddedPC embedded) {\n+        this.embedded = embedded;\n+    }\n+}"},{"sha":"c1a50d5f0a2a0efd666e993f478a5dd9d897c96d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","status":"modified","additions":158,"deletions":158,"changes":316,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,158 +1,158 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.Date;\r\n-import java.util.HashSet;\r\n-import java.util.Locale;\r\n-import java.util.Set;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Temporal;\r\n-import javax.persistence.TemporalType;\r\n-import javax.persistence.Transient;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * <p>Persitent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-@Table(name = \"rtest1\")\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-public class RuntimeTest1 implements Serializable {\r\n-\r\n-    private static final long serialVersionUID = 1L;\r\n-\r\n-    @Temporal(TemporalType.DATE)\r\n-    private Date dateField;\r\n-\r\n-    @Transient\r\n-    public static final String someStaticField = \"someField\";\r\n-\r\n-    private Locale localeField;\r\n-\r\n-    @Id\r\n-    private int intField;\r\n-\r\n-    private int intField1;\r\n-\r\n-    @Column(length = 35)\r\n-    private String stringField;\r\n-\r\n-    // transactional only\r\n-    @Column(length = 35)\r\n-    public String transString;\r\n-\r\n-    // relations\r\n-    //@Transient\r\n-    @OneToOne(fetch = FetchType.LAZY,\r\n-        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private RuntimeTest1 selfOneOne;\r\n-\r\n-    @OneToMany(mappedBy = \"selfOneOne\",\r\n-        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private Set<RuntimeTest1> selfOneMany = new HashSet<RuntimeTest1>();\r\n-\r\n-    @Version\r\n-    private int version;\r\n-\r\n-    public RuntimeTest1() {\r\n-    }\r\n-\r\n-    public RuntimeTest1(int key) {\r\n-        this.intField = key;\r\n-    }\r\n-\r\n-    public RuntimeTest1(String str, int i) {\r\n-        stringField = str;\r\n-        intField = i;\r\n-        intField1 = i;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public int getIntField1() {\r\n-        return this.intField1;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public void setIntField1(int intField1) {\r\n-        this.intField1 = intField1;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public RuntimeTest1 getSelfOneOne() {\r\n-        return this.selfOneOne;\r\n-    }\r\n-\r\n-    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n-        this.selfOneOne = selfOneOne;\r\n-    }\r\n-\r\n-    public Set getSelfOneMany() {\r\n-        return this.selfOneMany;\r\n-    }\r\n-\r\n-    public void setSelfOneMany(Set selfOneMany) {\r\n-        this.selfOneMany = selfOneMany;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return \"IntField: \" + intField + \", StringField: \" + stringField + \" .\";\r\n-    }\r\n-\r\n-    public Locale getLocaleField() {\r\n-        return localeField;\r\n-    }\r\n-\r\n-    public void setLocaleField(Locale localeField) {\r\n-        this.localeField = localeField;\r\n-    }\r\n-\r\n-    public Date getDateField() {\r\n-        return this.dateField;\r\n-    }\r\n-\r\n-    public void setDateField(Date d) {\r\n-        this.dateField = d;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import javax.persistence.Transient;\n+import javax.persistence.Version;\n+\n+/**\n+ * <p>Persitent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+@Table(name = \"rtest1\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+public class RuntimeTest1 implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Temporal(TemporalType.DATE)\n+    private Date dateField;\n+\n+    @Transient\n+    public static final String someStaticField = \"someField\";\n+\n+    private Locale localeField;\n+\n+    @Id\n+    private int intField;\n+\n+    private int intField1;\n+\n+    @Column(length = 35)\n+    private String stringField;\n+\n+    // transactional only\n+    @Column(length = 35)\n+    public String transString;\n+\n+    // relations\n+    //@Transient\n+    @OneToOne(fetch = FetchType.LAZY,\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private RuntimeTest1 selfOneOne;\n+\n+    @OneToMany(mappedBy = \"selfOneOne\",\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private Set<RuntimeTest1> selfOneMany = new HashSet<RuntimeTest1>();\n+\n+    @Version\n+    private int version;\n+\n+    public RuntimeTest1() {\n+    }\n+\n+    public RuntimeTest1(int key) {\n+        this.intField = key;\n+    }\n+\n+    public RuntimeTest1(String str, int i) {\n+        stringField = str;\n+        intField = i;\n+        intField1 = i;\n+    }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public int getIntField1() {\n+        return this.intField1;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public void setIntField1(int intField1) {\n+        this.intField1 = intField1;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public RuntimeTest1 getSelfOneOne() {\n+        return this.selfOneOne;\n+    }\n+\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\n+        this.selfOneOne = selfOneOne;\n+    }\n+\n+    public Set getSelfOneMany() {\n+        return this.selfOneMany;\n+    }\n+\n+    public void setSelfOneMany(Set selfOneMany) {\n+        this.selfOneMany = selfOneMany;\n+    }\n+\n+    public String toString() {\n+        return \"IntField: \" + intField + \", StringField: \" + stringField + \" .\";\n+    }\n+\n+    public Locale getLocaleField() {\n+        return localeField;\n+    }\n+\n+    public void setLocaleField(Locale localeField) {\n+        this.localeField = localeField;\n+    }\n+\n+    public Date getDateField() {\n+        return this.dateField;\n+    }\n+\n+    public void setDateField(Date d) {\n+        this.dateField = d;\n+    }\n+}"},{"sha":"a16bf36a4b4838b7c378e86ef846ec244571e1c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persitent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-@DiscriminatorValue(\"RT2\")\r\n-public class RuntimeTest2 extends RuntimeTest1 {\r\n-\r\n-    private static final long serialVersionUID = 1L;\r\n-    //@Id\r\n-    private int intField2;\r\n-\r\n-    public RuntimeTest2() {\r\n-    }\r\n-\r\n-    public RuntimeTest2(int key) {\r\n-        super(key);\r\n-    }\r\n-\r\n-    public RuntimeTest2(String str, int i) {\r\n-        super(str, i);\r\n-    }\r\n-\r\n-    public int getIntField2() {\r\n-        return this.intField2;\r\n-    }\r\n-\r\n-    public void setIntField2(int intField2) {\r\n-        this.intField2 = intField2;\r\n-    }\r\n-\r\n-    public String toString() {\r\n-        return \"IntField: \" + intField2 + \", StringField: \" +\r\n-            super.getStringField() + \" .\";\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persitent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+@DiscriminatorValue(\"RT2\")\n+public class RuntimeTest2 extends RuntimeTest1 {\n+\n+    private static final long serialVersionUID = 1L;\n+    //@Id\n+    private int intField2;\n+\n+    public RuntimeTest2() {\n+    }\n+\n+    public RuntimeTest2(int key) {\n+        super(key);\n+    }\n+\n+    public RuntimeTest2(String str, int i) {\n+        super(str, i);\n+    }\n+\n+    public int getIntField2() {\n+        return this.intField2;\n+    }\n+\n+    public void setIntField2(int intField2) {\n+        this.intField2 = intField2;\n+    }\n+\n+    public String toString() {\n+        return \"IntField: \" + intField2 + \", StringField: \" +\n+            super.getStringField() + \" .\";\n+    }\n+}"},{"sha":"666530c7ae42e574b4c6f5f9d7a7a6be3f27ac04","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persitent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-@Entity\r\n-@DiscriminatorValue(\"RT3\")\r\n-public class RuntimeTest3\r\n-    extends RuntimeTest2 {\r\n-\r\n-    //@Id\r\n-    private int intField3;\r\n-\r\n-    public RuntimeTest3() {\r\n-    }\r\n-\r\n-    public RuntimeTest3(String str, int i) {\r\n-        super(str, i);\r\n-    }\r\n-\r\n-    public int getIntField3() {\r\n-        return this.intField3;\r\n-    }\r\n-\r\n-    public void setIntField3(int intField3) {\r\n-        this.intField3 = intField3;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persitent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+@Entity\n+@DiscriminatorValue(\"RT3\")\n+public class RuntimeTest3\n+    extends RuntimeTest2 {\n+\n+    //@Id\n+    private int intField3;\n+\n+    public RuntimeTest3() {\n+    }\n+\n+    public RuntimeTest3(String str, int i) {\n+        super(str, i);\n+    }\n+\n+    public int getIntField3() {\n+        return this.intField3;\n+    }\n+\n+    public void setIntField3(int intField3) {\n+        this.intField3 = intField3;\n+    }\n+}"},{"sha":"9417b0861fd7e9e04fe609613fd25ede9eb974f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.OneToMany;\r\n-\r\n-@Entity\r\n-public class RuntimeTest4 {\r\n-\r\n-    private String name;\r\n-\r\n-    @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private Collection<RuntimeTest5> runtimeTest5s = new ArrayList();\r\n-\r\n-    protected RuntimeTest4() {\r\n-        this(\"?\");\r\n-    }\r\n-    \r\n-    public RuntimeTest4(String str) {\r\n-        name = str;\r\n-    }\r\n-\r\n-    public void setName(String val) {\r\n-        name = val;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public Collection getRuntimeTest5s() {\r\n-        return runtimeTest5s;\r\n-    }\r\n-\r\n-    public void setRuntimeTest5s(Collection c) {\r\n-        runtimeTest5s = c;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+public class RuntimeTest4 {\n+\n+    private String name;\n+\n+    @OneToMany(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private Collection<RuntimeTest5> runtimeTest5s = new ArrayList();\n+\n+    protected RuntimeTest4() {\n+        this(\"?\");\n+    }\n+    \n+    public RuntimeTest4(String str) {\n+        name = str;\n+    }\n+\n+    public void setName(String val) {\n+        name = val;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Collection getRuntimeTest5s() {\n+        return runtimeTest5s;\n+    }\n+\n+    public void setRuntimeTest5s(Collection c) {\n+        runtimeTest5s = c;\n+    }\n }\n\\ No newline at end of file"},{"sha":"4d6f9efa1d8b0dae7789dedc030a03c43c529f32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class RuntimeTest5 {\r\n-\r\n-    private String name;\r\n-    private RuntimeTest4 runtimeTest4;\r\n-\r\n-    protected RuntimeTest5() {\r\n-        this(\"?\");\r\n-    }\r\n-    \r\n-    public RuntimeTest5(String str) {\r\n-        name = str;\r\n-    }\r\n-\r\n-    public void setName(String val) {\r\n-        name = val;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setRuntimeTest4(RuntimeTest4 val) {\r\n-        runtimeTest4 = val;\r\n-    }\r\n-\r\n-    public RuntimeTest4 getRuntimeTest4() {\r\n-        return runtimeTest4;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class RuntimeTest5 {\n+\n+    private String name;\n+    private RuntimeTest4 runtimeTest4;\n+\n+    protected RuntimeTest5() {\n+        this(\"?\");\n+    }\n+    \n+    public RuntimeTest5(String str) {\n+        name = str;\n+    }\n+\n+    public void setName(String val) {\n+        name = val;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setRuntimeTest4(RuntimeTest4 val) {\n+        runtimeTest4 = val;\n+    }\n+\n+    public RuntimeTest4 getRuntimeTest4() {\n+        return runtimeTest4;\n+    }\n }\n\\ No newline at end of file"},{"sha":"c01c8dd30083c936efe0bc3ddd40de111db88739","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","status":"modified","additions":291,"deletions":291,"changes":582,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,291 +1,291 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.Map;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.KeyColumn;\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-import org.apache.openjpa.persistence.PersistentMap;\r\n-\r\n-/**\r\n- * Used in testing; should be enhanced.\r\n- */\r\n-@Entity\r\n-public class SCOTest {\r\n-\r\n-    @Id\r\n-    @GeneratedValue(strategy = GenerationType.AUTO)\r\n-    private int id;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"strintkey\")\r\n-    private Map<String, Integer> strIntMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"intlngkey\")\r\n-    private Map<Integer, Long> intLongMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"lngfltkey\")\r\n-    private Map<Long, Float> longFloatMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"fltbtekey\")\r\n-    private Map<Float, Byte> floatByteMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"btedbkey\")\r\n-    private Map<Byte, Double> byteDoubleMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"dbchkey\")\r\n-    private Map<Double, Character> doubleCharMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"chblkey\")\r\n-    private Map<Character, Boolean> charBooleanMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"dtstrkey\")\r\n-    private Map<Date, String> dateStrMap;\r\n-\r\n-    @PersistentMap\r\n-    @KeyColumn(name = \"bgdckey\")\r\n-    private Map<BigDecimal, BigInteger> bigDecimalBigIntegerMap;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<String> cString;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Integer> cInteger;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Long> cLong;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Float> cFloat;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Byte> cByte;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Double> cDouble;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Boolean> cBoolean;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Short> cShort;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Date> cDate;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<Character> cCharacter;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<BigInteger> cBigInteger;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<BigDecimal> cBigDecimal;\r\n-\r\n-    public SCOTest() {\r\n-    }\r\n-\r\n-    public int getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setBigDecimalBigIntegerMap(Map bigDecimalBigIntegerMap) {\r\n-        this.bigDecimalBigIntegerMap = bigDecimalBigIntegerMap;\r\n-    }\r\n-\r\n-    public Map getBigDecimalBigIntegerMap() {\r\n-        return bigDecimalBigIntegerMap;\r\n-    }\r\n-\r\n-    public void setStrIntMap(Map strIntMap) {\r\n-        this.strIntMap = strIntMap;\r\n-    }\r\n-\r\n-    public Map getStrIntMap() {\r\n-        return strIntMap;\r\n-    }\r\n-\r\n-    public void setIntLongMap(Map intLongMap) {\r\n-        this.intLongMap = intLongMap;\r\n-    }\r\n-\r\n-    public Map getIntLongMap() {\r\n-        return intLongMap;\r\n-    }\r\n-\r\n-    public void setLongFloatMap(Map longFloatMap) {\r\n-        this.longFloatMap = longFloatMap;\r\n-    }\r\n-\r\n-    public Map getLongFloatMap() {\r\n-        return longFloatMap;\r\n-    }\r\n-\r\n-    public void setFloatByteMap(Map floatByteMap) {\r\n-        this.floatByteMap = floatByteMap;\r\n-    }\r\n-\r\n-    public Map getFloatByteMap() {\r\n-        return floatByteMap;\r\n-    }\r\n-\r\n-    public void setByteDoubleMap(Map byteDoubleMap) {\r\n-        this.byteDoubleMap = byteDoubleMap;\r\n-    }\r\n-\r\n-    public Map getByteDoubleMap() {\r\n-        return byteDoubleMap;\r\n-    }\r\n-\r\n-    public void setDoubleCharMap(Map doubleCharMap) {\r\n-        this.doubleCharMap = doubleCharMap;\r\n-    }\r\n-\r\n-    public Map getDoubleCharMap() {\r\n-        return doubleCharMap;\r\n-    }\r\n-\r\n-    public void setCharBooleanMap(Map charBooleanMap) {\r\n-        this.charBooleanMap = charBooleanMap;\r\n-    }\r\n-\r\n-    public Map getCharBooleanMap() {\r\n-        return charBooleanMap;\r\n-    }\r\n-\r\n-    public void setDateStrMap(Map dateStrMap) {\r\n-        this.dateStrMap = dateStrMap;\r\n-    }\r\n-\r\n-    public Map getDateStrMap() {\r\n-        return dateStrMap;\r\n-    }\r\n-\r\n-    public void setCString(Collection cString) {\r\n-        this.cString = cString;\r\n-    }\r\n-\r\n-    public Collection getCString() {\r\n-        return cString;\r\n-    }\r\n-\r\n-    public void setCInteger(Collection cInteger) {\r\n-        this.cInteger = cInteger;\r\n-    }\r\n-\r\n-    public Collection getCInteger() {\r\n-        return cInteger;\r\n-    }\r\n-\r\n-    public void setCLong(Collection cLong) {\r\n-        this.cLong = cLong;\r\n-    }\r\n-\r\n-    public Collection getCLong() {\r\n-        return cLong;\r\n-    }\r\n-\r\n-    public void setCCharacter(Collection cCharacter) {\r\n-        this.cCharacter = cCharacter;\r\n-    }\r\n-\r\n-    public Collection getCCharacter() {\r\n-        return cCharacter;\r\n-    }\r\n-\r\n-    public void setCFloat(Collection cFloat) {\r\n-        this.cFloat = cFloat;\r\n-    }\r\n-\r\n-    public Collection getCFloat() {\r\n-        return cFloat;\r\n-    }\r\n-\r\n-    public void setCByte(Collection cByte) {\r\n-        this.cByte = cByte;\r\n-    }\r\n-\r\n-    public Collection getCByte() {\r\n-        return cByte;\r\n-    }\r\n-\r\n-    public void setCDouble(Collection cDouble) {\r\n-        this.cDouble = cDouble;\r\n-    }\r\n-\r\n-    public Collection getCDouble() {\r\n-        return cDouble;\r\n-    }\r\n-\r\n-    public void setCBoolean(Collection cBoolean) {\r\n-        this.cBoolean = cBoolean;\r\n-    }\r\n-\r\n-    public Collection getCBoolean() {\r\n-        return cBoolean;\r\n-    }\r\n-\r\n-    public void setCShort(Collection cShort) {\r\n-        this.cShort = cShort;\r\n-    }\r\n-\r\n-    public Collection getCShort() {\r\n-        return cShort;\r\n-    }\r\n-\r\n-    public void setCDate(Collection cDate) {\r\n-        this.cDate = cDate;\r\n-    }\r\n-\r\n-    public Collection getCDate() {\r\n-        return cDate;\r\n-    }\r\n-\r\n-    public void setCBigInteger(Collection cBigInteger) {\r\n-        this.cBigInteger = cBigInteger;\r\n-    }\r\n-\r\n-    public Collection getCBigInteger() {\r\n-        return cBigInteger;\r\n-    }\r\n-\r\n-    public void setCBigDecimal(Collection cBigDecimal) {\r\n-        this.cBigDecimal = cBigDecimal;\r\n-    }\r\n-\r\n-    public Collection getCBigDecimal() {\r\n-        return cBigDecimal;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.Map;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.jdbc.KeyColumn;\n+import org.apache.openjpa.persistence.PersistentCollection;\n+import org.apache.openjpa.persistence.PersistentMap;\n+\n+/**\n+ * Used in testing; should be enhanced.\n+ */\n+@Entity\n+public class SCOTest {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    private int id;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"strintkey\")\n+    private Map<String, Integer> strIntMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"intlngkey\")\n+    private Map<Integer, Long> intLongMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"lngfltkey\")\n+    private Map<Long, Float> longFloatMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"fltbtekey\")\n+    private Map<Float, Byte> floatByteMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"btedbkey\")\n+    private Map<Byte, Double> byteDoubleMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"dbchkey\")\n+    private Map<Double, Character> doubleCharMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"chblkey\")\n+    private Map<Character, Boolean> charBooleanMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"dtstrkey\")\n+    private Map<Date, String> dateStrMap;\n+\n+    @PersistentMap\n+    @KeyColumn(name = \"bgdckey\")\n+    private Map<BigDecimal, BigInteger> bigDecimalBigIntegerMap;\n+\n+    @PersistentCollection\n+    private Collection<String> cString;\n+\n+    @PersistentCollection\n+    private Collection<Integer> cInteger;\n+\n+    @PersistentCollection\n+    private Collection<Long> cLong;\n+\n+    @PersistentCollection\n+    private Collection<Float> cFloat;\n+\n+    @PersistentCollection\n+    private Collection<Byte> cByte;\n+\n+    @PersistentCollection\n+    private Collection<Double> cDouble;\n+\n+    @PersistentCollection\n+    private Collection<Boolean> cBoolean;\n+\n+    @PersistentCollection\n+    private Collection<Short> cShort;\n+\n+    @PersistentCollection\n+    private Collection<Date> cDate;\n+\n+    @PersistentCollection\n+    private Collection<Character> cCharacter;\n+\n+    @PersistentCollection\n+    private Collection<BigInteger> cBigInteger;\n+\n+    @PersistentCollection\n+    private Collection<BigDecimal> cBigDecimal;\n+\n+    public SCOTest() {\n+    }\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setBigDecimalBigIntegerMap(Map bigDecimalBigIntegerMap) {\n+        this.bigDecimalBigIntegerMap = bigDecimalBigIntegerMap;\n+    }\n+\n+    public Map getBigDecimalBigIntegerMap() {\n+        return bigDecimalBigIntegerMap;\n+    }\n+\n+    public void setStrIntMap(Map strIntMap) {\n+        this.strIntMap = strIntMap;\n+    }\n+\n+    public Map getStrIntMap() {\n+        return strIntMap;\n+    }\n+\n+    public void setIntLongMap(Map intLongMap) {\n+        this.intLongMap = intLongMap;\n+    }\n+\n+    public Map getIntLongMap() {\n+        return intLongMap;\n+    }\n+\n+    public void setLongFloatMap(Map longFloatMap) {\n+        this.longFloatMap = longFloatMap;\n+    }\n+\n+    public Map getLongFloatMap() {\n+        return longFloatMap;\n+    }\n+\n+    public void setFloatByteMap(Map floatByteMap) {\n+        this.floatByteMap = floatByteMap;\n+    }\n+\n+    public Map getFloatByteMap() {\n+        return floatByteMap;\n+    }\n+\n+    public void setByteDoubleMap(Map byteDoubleMap) {\n+        this.byteDoubleMap = byteDoubleMap;\n+    }\n+\n+    public Map getByteDoubleMap() {\n+        return byteDoubleMap;\n+    }\n+\n+    public void setDoubleCharMap(Map doubleCharMap) {\n+        this.doubleCharMap = doubleCharMap;\n+    }\n+\n+    public Map getDoubleCharMap() {\n+        return doubleCharMap;\n+    }\n+\n+    public void setCharBooleanMap(Map charBooleanMap) {\n+        this.charBooleanMap = charBooleanMap;\n+    }\n+\n+    public Map getCharBooleanMap() {\n+        return charBooleanMap;\n+    }\n+\n+    public void setDateStrMap(Map dateStrMap) {\n+        this.dateStrMap = dateStrMap;\n+    }\n+\n+    public Map getDateStrMap() {\n+        return dateStrMap;\n+    }\n+\n+    public void setCString(Collection cString) {\n+        this.cString = cString;\n+    }\n+\n+    public Collection getCString() {\n+        return cString;\n+    }\n+\n+    public void setCInteger(Collection cInteger) {\n+        this.cInteger = cInteger;\n+    }\n+\n+    public Collection getCInteger() {\n+        return cInteger;\n+    }\n+\n+    public void setCLong(Collection cLong) {\n+        this.cLong = cLong;\n+    }\n+\n+    public Collection getCLong() {\n+        return cLong;\n+    }\n+\n+    public void setCCharacter(Collection cCharacter) {\n+        this.cCharacter = cCharacter;\n+    }\n+\n+    public Collection getCCharacter() {\n+        return cCharacter;\n+    }\n+\n+    public void setCFloat(Collection cFloat) {\n+        this.cFloat = cFloat;\n+    }\n+\n+    public Collection getCFloat() {\n+        return cFloat;\n+    }\n+\n+    public void setCByte(Collection cByte) {\n+        this.cByte = cByte;\n+    }\n+\n+    public Collection getCByte() {\n+        return cByte;\n+    }\n+\n+    public void setCDouble(Collection cDouble) {\n+        this.cDouble = cDouble;\n+    }\n+\n+    public Collection getCDouble() {\n+        return cDouble;\n+    }\n+\n+    public void setCBoolean(Collection cBoolean) {\n+        this.cBoolean = cBoolean;\n+    }\n+\n+    public Collection getCBoolean() {\n+        return cBoolean;\n+    }\n+\n+    public void setCShort(Collection cShort) {\n+        this.cShort = cShort;\n+    }\n+\n+    public Collection getCShort() {\n+        return cShort;\n+    }\n+\n+    public void setCDate(Collection cDate) {\n+        this.cDate = cDate;\n+    }\n+\n+    public Collection getCDate() {\n+        return cDate;\n+    }\n+\n+    public void setCBigInteger(Collection cBigInteger) {\n+        this.cBigInteger = cBigInteger;\n+    }\n+\n+    public Collection getCBigInteger() {\n+        return cBigInteger;\n+    }\n+\n+    public void setCBigDecimal(Collection cBigDecimal) {\n+        this.cBigDecimal = cBigDecimal;\n+    }\n+\n+    public Collection getCBigDecimal() {\n+        return cBigDecimal;\n+    }\n+}"},{"sha":"75e6c2d8f1b6c12709a7a359889d13aca9b1e0bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.SecondaryTable;\r\n-import javax.persistence.SecondaryTables;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name = \"sectables\")\r\n-@SecondaryTables({\r\n-@SecondaryTable(name = \"SEC1_TAB\"),\r\n-@SecondaryTable(name = \"SEC2_TAB\")\r\n-    })\r\n-public class SecondaryTab {\r\n-\r\n-    @Id\r\n-    public int id;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"strngfld\", length = 50)\r\n-    public String stringField;\r\n-\r\n-    public SecondaryTab() {\r\n-    }\r\n-\r\n-    public SecondaryTab(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public int getid() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setid(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.SecondaryTable;\n+import javax.persistence.SecondaryTables;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"sectables\")\n+@SecondaryTables({\n+@SecondaryTable(name = \"SEC1_TAB\"),\n+@SecondaryTable(name = \"SEC2_TAB\")\n+    })\n+public class SecondaryTab {\n+\n+    @Id\n+    public int id;\n+\n+    @Basic\n+    @Column(name = \"strngfld\", length = 50)\n+    public String stringField;\n+\n+    public SecondaryTab() {\n+    }\n+\n+    public SecondaryTab(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getid() {\n+        return id;\n+    }\n+\n+    public void setid(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getStringField() {\n+        return stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+}"},{"sha":"8a11e701655691772f1d669695c0d12b3b5f39ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,91 +1,91 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.IdClass;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name = \"seqAssigned\")\r\n-@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n-@IdClass(SequenceAssigned.SeqId.class)\r\n-public class SequenceAssigned {\r\n-\r\n-    @Id\r\n-    private long pk;\r\n-\r\n-    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-    private SequenceAssigned other;\r\n-\r\n-    public SequenceAssigned() {\r\n-    }\r\n-\r\n-    public SequenceAssigned(long pk) {\r\n-        this.pk = pk;\r\n-    }\r\n-\r\n-    public void setPK(long l) {\r\n-        pk = l;\r\n-    }\r\n-\r\n-    public long getPK() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setOther(SequenceAssigned other) {\r\n-        this.other = other;\r\n-    }\r\n-\r\n-    public SequenceAssigned getOther() {\r\n-        return other;\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"serial\")\r\n-    public static class SeqId implements java.io.Serializable {\r\n-\r\n-        public long pk;\r\n-\r\n-        public SeqId() {\r\n-        }\r\n-\r\n-        public SeqId(String str) {\r\n-            pk = Long.parseLong(str);\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return (int) (pk % (long) Integer.MAX_VALUE);\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk + \"\";\r\n-        }\r\n-\r\n-        public boolean equals(Object o) {\r\n-            if (o == null || !(o instanceof SeqId))\r\n-                return false;\r\n-            return pk == ((SeqId) o).pk;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"seqAssigned\")\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n+@IdClass(SequenceAssigned.SeqId.class)\n+public class SequenceAssigned {\n+\n+    @Id\n+    private long pk;\n+\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+    private SequenceAssigned other;\n+\n+    public SequenceAssigned() {\n+    }\n+\n+    public SequenceAssigned(long pk) {\n+        this.pk = pk;\n+    }\n+\n+    public void setPK(long l) {\n+        pk = l;\n+    }\n+\n+    public long getPK() {\n+        return pk;\n+    }\n+\n+    public void setOther(SequenceAssigned other) {\n+        this.other = other;\n+    }\n+\n+    public SequenceAssigned getOther() {\n+        return other;\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    public static class SeqId implements java.io.Serializable {\n+\n+        public long pk;\n+\n+        public SeqId() {\n+        }\n+\n+        public SeqId(String str) {\n+            pk = Long.parseLong(str);\n+        }\n+\n+        public int hashCode() {\n+            return (int) (pk % (long) Integer.MAX_VALUE);\n+        }\n+\n+        public String toString() {\n+            return pk + \"\";\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == null || !(o instanceof SeqId))\n+                return false;\n+            return pk == ((SeqId) o).pk;\n+        }\n+    }\n+}"},{"sha":"eddba4476a7571d7db13a1b76f2238eb713b99ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,45 +1,45 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"seqAss2\")\r\n-public class SequenceAssigned2 extends SequenceAssigned {\r\n-\r\n-    private int foo;\r\n-\r\n-    public SequenceAssigned2() {\r\n-        this(1);\r\n-    }\r\n-    \r\n-    public SequenceAssigned2(long pk) {\r\n-        super(pk);\r\n-    }\r\n-\r\n-    public int getFoo() {\r\n-        return foo;\r\n-    }\r\n-\r\n-    public void setFoo(int foo) {\r\n-        this.foo = foo;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+@Entity\n+@DiscriminatorValue(\"seqAss2\")\n+public class SequenceAssigned2 extends SequenceAssigned {\n+\n+    private int foo;\n+\n+    public SequenceAssigned2() {\n+        this(1);\n+    }\n+    \n+    public SequenceAssigned2(long pk) {\n+        super(pk);\n+    }\n+\n+    public int getFoo() {\n+        return foo;\n+    }\n+\n+    public void setFoo(int foo) {\n+        this.foo = foo;\n+    }\n+}"},{"sha":"c42357e89eabc623d25ff3cf7a48bbd79f36828c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,76 +1,76 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.IdClass;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name = \"seqAss3\")\r\n-@IdClass(SequenceAssigned3.seq3Id.class)\r\n-public class SequenceAssigned3 {\r\n-\r\n-    @Id\r\n-    private Long pk;\r\n-\r\n-    public SequenceAssigned3() {\r\n-    }\r\n-\r\n-    public SequenceAssigned3(Long pk) {\r\n-        this.pk = pk;\r\n-    }\r\n-\r\n-    public void setPK(Long l) {\r\n-        pk = l;\r\n-    }\r\n-\r\n-    public Long getPK() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"serial\")\r\n-    public static class seq3Id implements java.io.Serializable {\r\n-\r\n-        public Long pk;\r\n-\r\n-        public seq3Id() {\r\n-        }\r\n-\r\n-        public seq3Id(String str) {\r\n-            pk = Long.valueOf(str);\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return (int) (pk == null ? 0 : pk.longValue()\r\n-                % (long) Integer.MAX_VALUE);\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk + \"\";\r\n-        }\r\n-\r\n-        public boolean equals(Object o) {\r\n-            if (o == null || !(o instanceof seq3Id))\r\n-                return false;\r\n-            return pk == ((seq3Id) o).pk;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"seqAss3\")\n+@IdClass(SequenceAssigned3.seq3Id.class)\n+public class SequenceAssigned3 {\n+\n+    @Id\n+    private Long pk;\n+\n+    public SequenceAssigned3() {\n+    }\n+\n+    public SequenceAssigned3(Long pk) {\n+        this.pk = pk;\n+    }\n+\n+    public void setPK(Long l) {\n+        pk = l;\n+    }\n+\n+    public Long getPK() {\n+        return pk;\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    public static class seq3Id implements java.io.Serializable {\n+\n+        public Long pk;\n+\n+        public seq3Id() {\n+        }\n+\n+        public seq3Id(String str) {\n+            pk = Long.valueOf(str);\n+        }\n+\n+        public int hashCode() {\n+            return (int) (pk == null ? 0 : pk.longValue()\n+                % (long) Integer.MAX_VALUE);\n+        }\n+\n+        public String toString() {\n+            return pk + \"\";\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == null || !(o instanceof seq3Id))\n+                return false;\n+            return pk == ((seq3Id) o).pk;\n+        }\n+    }\n+}"},{"sha":"ba30ad1f2094c3a8912da6b3f9f819c50850c3b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,30 +1,30 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-public interface SingleId {\r\n-\r\n-    public String getPkString();\r\n-\r\n-    public void setString(String s);\r\n-\r\n-    public String getString();\r\n-\r\n-    public boolean correctIdClass(Class oid);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+public interface SingleId {\n+\n+    public String getPkString();\n+\n+    public void setString(String s);\n+\n+    public String getString();\n+\n+    public boolean correctIdClass(Class oid);\n+}"},{"sha":"f88fe0e3604132ada24c13bd92ede8bb687c8620","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.util.ByteId;\r\n-\r\n-@Entity\r\n-public class SingleIdByte implements SingleId {\r\n-\r\n-    private byte pk;\r\n-    private String str;\r\n-\r\n-    public boolean correctIdClass(Class c) {\r\n-        return ByteId.class.equals(c);\r\n-    }\r\n-\r\n-    public byte getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setPk(byte i) {\r\n-        pk = i;\r\n-    }\r\n-\r\n-    public String getPkString() {\r\n-        return pk + \"\";\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.util.ByteId;\n+\n+@Entity\n+public class SingleIdByte implements SingleId {\n+\n+    private byte pk;\n+    private String str;\n+\n+    public boolean correctIdClass(Class c) {\n+        return ByteId.class.equals(c);\n+    }\n+\n+    public byte getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(byte i) {\n+        pk = i;\n+    }\n+\n+    public String getPkString() {\n+        return pk + \"\";\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+}"},{"sha":"21ddee61f2dc060e3ae6d09c1308ac690dcec232","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.util.CharId;\r\n-\r\n-@Entity\r\n-public class SingleIdChar implements SingleId {\r\n-\r\n-    private char pk;\r\n-    private String str;\r\n-\r\n-    public boolean correctIdClass(Class c) {\r\n-        return CharId.class.equals(c);\r\n-    }\r\n-\r\n-    public char getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public String getPkString() {\r\n-        return pk + \"\";\r\n-    }\r\n-\r\n-    public void setPk(char i) {\r\n-        pk = i;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.util.CharId;\n+\n+@Entity\n+public class SingleIdChar implements SingleId {\n+\n+    private char pk;\n+    private String str;\n+\n+    public boolean correctIdClass(Class c) {\n+        return CharId.class.equals(c);\n+    }\n+\n+    public char getPk() {\n+        return pk;\n+    }\n+\n+    public String getPkString() {\n+        return pk + \"\";\n+    }\n+\n+    public void setPk(char i) {\n+        pk = i;\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+}"},{"sha":"0d3da3e86c9e641339c662a7b6893bbc56123786","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.util.IntId;\r\n-\r\n-@Entity\r\n-public class SingleIdInt implements SingleId {\r\n-\r\n-    private int pk;\r\n-    private String str;\r\n-\r\n-    public boolean correctIdClass(Class c) {\r\n-        return IntId.class.equals(c);\r\n-    }\r\n-\r\n-    public String getPkString() {\r\n-        return pk + \"\";\r\n-    }\r\n-\r\n-    public int getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setPk(int i) {\r\n-        pk = i;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.util.IntId;\n+\n+@Entity\n+public class SingleIdInt implements SingleId {\n+\n+    private int pk;\n+    private String str;\n+\n+    public boolean correctIdClass(Class c) {\n+        return IntId.class.equals(c);\n+    }\n+\n+    public String getPkString() {\n+        return pk + \"\";\n+    }\n+\n+    public int getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(int i) {\n+        pk = i;\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+}"},{"sha":"751462a8e26538bc96625cc453486b9fd3d95b9d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.util.LongId;\r\n-\r\n-@Entity\r\n-public class SingleIdLong implements SingleId {\r\n-\r\n-    private long pk;\r\n-    private String str;\r\n-\r\n-    public boolean correctIdClass(Class c) {\r\n-        return LongId.class.equals(c);\r\n-    }\r\n-\r\n-    public String getPkString() {\r\n-        return pk + \"\";\r\n-    }\r\n-\r\n-    public long getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setPk(long i) {\r\n-        pk = i;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.util.LongId;\n+\n+@Entity\n+public class SingleIdLong implements SingleId {\n+\n+    private long pk;\n+    private String str;\n+\n+    public boolean correctIdClass(Class c) {\n+        return LongId.class.equals(c);\n+    }\n+\n+    public String getPkString() {\n+        return pk + \"\";\n+    }\n+\n+    public long getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(long i) {\n+        pk = i;\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+}"},{"sha":"608f907303bb879048dbec355adabcc814d83cc5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.util.ShortId;\r\n-\r\n-@Entity\r\n-public class SingleIdShort implements SingleId {\r\n-\r\n-    private short pk;\r\n-    private String str;\r\n-\r\n-    public boolean correctIdClass(Class c) {\r\n-        return ShortId.class.equals(c);\r\n-    }\r\n-\r\n-    public String getPkString() {\r\n-        return pk + \"\";\r\n-    }\r\n-\r\n-    public short getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setPk(short i) {\r\n-        pk = i;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.util.ShortId;\n+\n+@Entity\n+public class SingleIdShort implements SingleId {\n+\n+    private short pk;\n+    private String str;\n+\n+    public boolean correctIdClass(Class c) {\n+        return ShortId.class.equals(c);\n+    }\n+\n+    public String getPkString() {\n+        return pk + \"\";\n+    }\n+\n+    public short getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(short i) {\n+        pk = i;\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+}"},{"sha":"3c3d7cbfc765b56320dad73cad2ac73596667908","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.util.StringId;\r\n-\r\n-@Entity\r\n-public class SingleIdString implements SingleId {\r\n-\r\n-    private String pk;\r\n-    private String str;\r\n-\r\n-    public boolean correctIdClass(Class c) {\r\n-        return StringId.class.equals(c);\r\n-    }\r\n-\r\n-    public String getPk() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public String getPkString() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setPk(String i) {\r\n-        pk = i;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.util.StringId;\n+\n+@Entity\n+public class SingleIdString implements SingleId {\n+\n+    private String pk;\n+    private String str;\n+\n+    public boolean correctIdClass(Class c) {\n+        return StringId.class.equals(c);\n+    }\n+\n+    public String getPk() {\n+        return pk;\n+    }\n+\n+    public String getPkString() {\n+        return pk;\n+    }\n+\n+    public void setPk(String i) {\n+        pk = i;\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+}"},{"sha":"494eddc7ea11113a244c1197e84f30d2308bd6b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.util.IntId;\r\n-\r\n-@Entity\r\n-public class SingleIdWrapper implements SingleId {\r\n-\r\n-    private Integer pk;\r\n-    private String str;\r\n-\r\n-    public boolean correctIdClass(Class c) {\r\n-        return IntId.class.equals(c);\r\n-    }\r\n-\r\n-    public String getPkString() {\r\n-        return pk == null ? \"null\" : pk.toString();\r\n-    }\r\n-\r\n-    public int getPk() {\r\n-        return pk.intValue();\r\n-    }\r\n-\r\n-    public void setPk(int i) {\r\n-        pk = new Integer(i);\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return str;\r\n-    }\r\n-\r\n-    public void setString(String s) {\r\n-        str = s;\r\n-    }\r\n-\r\n-    public static void main(String[] args) {\r\n-        SingleIdWrapper wrap = new SingleIdWrapper();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.util.IntId;\n+\n+@Entity\n+public class SingleIdWrapper implements SingleId {\n+\n+    private Integer pk;\n+    private String str;\n+\n+    public boolean correctIdClass(Class c) {\n+        return IntId.class.equals(c);\n+    }\n+\n+    public String getPkString() {\n+        return pk == null ? \"null\" : pk.toString();\n+    }\n+\n+    public int getPk() {\n+        return pk.intValue();\n+    }\n+\n+    public void setPk(int i) {\n+        pk = new Integer(i);\n+    }\n+\n+    public String getString() {\n+        return str;\n+    }\n+\n+    public void setString(String s) {\n+        str = s;\n+    }\n+\n+    public static void main(String[] args) {\n+        SingleIdWrapper wrap = new SingleIdWrapper();\n+    }\n+}"},{"sha":"a5edf616020c1a8d3cb22c4cb1ce8267fa97d606","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,37 +1,37 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-/**\r\n- * <p>Transactional type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TransactionalClassPC {\r\n-\r\n-    private int intField;\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+/**\n+ * <p>Transactional type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TransactionalClassPC {\n+\n+    private int intField;\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+}"},{"sha":"b18820c8cfdae336cce55622af97accc5fb2d0c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-/**\r\n- * <p>Pojo type used in testing.</p>\r\n- *\r\n- * @author Afam Okeke\r\n- */\r\n-public class UnAnnotPojo {\r\n-\r\n-    private String name;\r\n-    private int num;\r\n-\r\n-    public UnAnnotPojo() {\r\n-    }\r\n-\r\n-    public UnAnnotPojo(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public int getNum() {\r\n-        return num;\r\n-    }\r\n-\r\n-    public void setNum(int num) {\r\n-        this.num = num;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+/**\n+ * <p>Pojo type used in testing.</p>\n+ *\n+ * @author Afam Okeke\n+ */\n+public class UnAnnotPojo {\n+\n+    private String name;\n+    private int num;\n+\n+    public UnAnnotPojo() {\n+    }\n+\n+    public UnAnnotPojo(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getNum() {\n+        return num;\n+    }\n+\n+    public void setNum(int num) {\n+        this.num = num;\n+    }\n+}"},{"sha":"57e4077ae6f585bc2332430ebedbcd6c6ebd7388","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","status":"modified","additions":132,"deletions":132,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,132 +1,132 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel.common.apps;\r\n-\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Table;\r\n-\r\n-@Entity\r\n-@Table(name = \"valstratpc\")\r\n-public class ValueStrategyPC {\r\n-\r\n-    @Id\r\n-    private int id;\r\n-\r\n-    @Column(length = 35)\r\n-    private String uuid;\r\n-    @Column(length = 35)\r\n-    private String uuidHex;\r\n-    @Column(length = 35)\r\n-    private String name;\r\n-    @Column(name = \"ignupdate\")\r\n-    private int ignoreUpdate;\r\n-    @Column(name = \"resupdate\")\r\n-    private int restrictUpdate;\r\n-    private int version;\r\n-    private int sequence;\r\n-\r\n-    public ValueStrategyPC() {\r\n-    }\r\n-\r\n-    public ValueStrategyPC(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return this.name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public int getIgnoreUpdate() {\r\n-        return this.ignoreUpdate;\r\n-    }\r\n-\r\n-    public void setIgnoreUpdate(int ignoreUpdate) {\r\n-        this.ignoreUpdate = ignoreUpdate;\r\n-    }\r\n-\r\n-    public int getRestrictUpdate() {\r\n-        return this.restrictUpdate;\r\n-    }\r\n-\r\n-    public void setRestrictUpdate(int restrictUpdate) {\r\n-        this.restrictUpdate = restrictUpdate;\r\n-    }\r\n-\r\n-    public String getUUID() {\r\n-        return this.uuid;\r\n-    }\r\n-\r\n-    public void setUUID(String uuid) {\r\n-        this.uuid = uuid;\r\n-    }\r\n-\r\n-    public String getUUIDHex() {\r\n-        return this.uuidHex;\r\n-    }\r\n-\r\n-    public void setUUIDHex(String uuidHex) {\r\n-        this.uuidHex = uuidHex;\r\n-    }\r\n-\r\n-    public int getVersion() {\r\n-        return this.version;\r\n-    }\r\n-\r\n-    public void setVersion(int version) {\r\n-        this.version = version;\r\n-    }\r\n-\r\n-    public int getSequence() {\r\n-        return this.sequence;\r\n-    }\r\n-\r\n-    public void setSequence(int sequence) {\r\n-        this.sequence = sequence;\r\n-    }\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getUuid() {\r\n-        return uuid;\r\n-    }\r\n-\r\n-    public void setUuid(String uuid) {\r\n-        this.uuid = uuid;\r\n-    }\r\n-\r\n-    public String getUuidHex() {\r\n-        return uuidHex;\r\n-    }\r\n-\r\n-    public void setUuidHex(String uuidHex) {\r\n-        this.uuidHex = uuidHex;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel.common.apps;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"valstratpc\")\n+public class ValueStrategyPC {\n+\n+    @Id\n+    private int id;\n+\n+    @Column(length = 35)\n+    private String uuid;\n+    @Column(length = 35)\n+    private String uuidHex;\n+    @Column(length = 35)\n+    private String name;\n+    @Column(name = \"ignupdate\")\n+    private int ignoreUpdate;\n+    @Column(name = \"resupdate\")\n+    private int restrictUpdate;\n+    private int version;\n+    private int sequence;\n+\n+    public ValueStrategyPC() {\n+    }\n+\n+    public ValueStrategyPC(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getIgnoreUpdate() {\n+        return this.ignoreUpdate;\n+    }\n+\n+    public void setIgnoreUpdate(int ignoreUpdate) {\n+        this.ignoreUpdate = ignoreUpdate;\n+    }\n+\n+    public int getRestrictUpdate() {\n+        return this.restrictUpdate;\n+    }\n+\n+    public void setRestrictUpdate(int restrictUpdate) {\n+        this.restrictUpdate = restrictUpdate;\n+    }\n+\n+    public String getUUID() {\n+        return this.uuid;\n+    }\n+\n+    public void setUUID(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public String getUUIDHex() {\n+        return this.uuidHex;\n+    }\n+\n+    public void setUUIDHex(String uuidHex) {\n+        this.uuidHex = uuidHex;\n+    }\n+\n+    public int getVersion() {\n+        return this.version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getSequence() {\n+        return this.sequence;\n+    }\n+\n+    public void setSequence(int sequence) {\n+        this.sequence = sequence;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public String getUuidHex() {\n+        return uuidHex;\n+    }\n+\n+    public void setUuidHex(String uuidHex) {\n+        this.uuidHex = uuidHex;\n+    }\n+}"},{"sha":"7d95204d0c9f6ab91ceab338ea9a49bca7f3ca6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.lifecycle;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.relations.BidiChild;\r\n-import org.apache.openjpa.persistence.relations.BidiParent;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestMergeAndPersistWithManagedRelation\r\n-    extends SingleEMTestCase {\r\n-\r\n-    private long childId;\r\n-\r\n-    public void setUp() {\r\n-        setUp(BidiParent.class, BidiChild.class, CLEAR_TABLES);\r\n-\r\n-        BidiChild child = new BidiChild();\r\n-        child.setName(\"child\");\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(child);\r\n-        em.getTransaction().commit();\r\n-        childId = child.getId();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPersistWithManagedRelation() {\r\n-        BidiParent parent = new BidiParent();\r\n-        BidiChild child = em.find(BidiChild.class, childId);\r\n-        parent.setOneToOneChild(child);\r\n-        em.getTransaction().begin();\r\n-        em.persist(parent);\r\n-        em.getTransaction().commit();\r\n-        long id = parent.getId();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        parent = em.find(BidiParent.class, id);\r\n-        assertNotNull(parent);\r\n-    }\r\n-\r\n-    public void testMergeWithManagedRelation() {\r\n-        BidiParent parent = new BidiParent();\r\n-        BidiChild child = em.find(BidiChild.class, childId);\r\n-        parent.setOneToOneChild(child);\r\n-        em.getTransaction().begin();\r\n-        parent = em.merge(parent);\r\n-        em.getTransaction().commit();\r\n-        long id = parent.getId();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        parent = em.find(BidiParent.class, id);\r\n-        assertNotNull(parent);\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lifecycle;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.relations.BidiChild;\n+import org.apache.openjpa.persistence.relations.BidiParent;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestMergeAndPersistWithManagedRelation\n+    extends SingleEMTestCase {\n+\n+    private long childId;\n+\n+    public void setUp() {\n+        setUp(BidiParent.class, BidiChild.class, CLEAR_TABLES);\n+\n+        BidiChild child = new BidiChild();\n+        child.setName(\"child\");\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(child);\n+        em.getTransaction().commit();\n+        childId = child.getId();\n+        em.close();\n+    }\n+\n+    public void testPersistWithManagedRelation() {\n+        BidiParent parent = new BidiParent();\n+        BidiChild child = em.find(BidiChild.class, childId);\n+        parent.setOneToOneChild(child);\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(BidiParent.class, id);\n+        assertNotNull(parent);\n+    }\n+\n+    public void testMergeWithManagedRelation() {\n+        BidiParent parent = new BidiParent();\n+        BidiChild child = em.find(BidiChild.class, childId);\n+        parent.setOneToOneChild(child);\n+        em.getTransaction().begin();\n+        parent = em.merge(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(BidiParent.class, id);\n+        assertNotNull(parent);\n+    }\n }\n\\ No newline at end of file"},{"sha":"6b7ec8d7f2e001dcd7a14435a799906d125339d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.lifecycle;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.enhance.UnenhancedPropertyAccess;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.PCState;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestPessimisticPNonTransToPDirty\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(UnenhancedPropertyAccess.class, CLEAR_TABLES);\r\n-\r\n-        UnenhancedPropertyAccess o = new UnenhancedPropertyAccess();\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testPNonTransToPDirty() {\r\n-        em.setOptimistic(false);\r\n-        UnenhancedPropertyAccess o = (UnenhancedPropertyAccess)\r\n-            em.createQuery(\"select o from UnenhancedPropertyAccess o\")\r\n-                .getSingleResult();\r\n-        em.getTransaction().begin();\r\n-        try {\r\n-            Broker b = JPAFacadeHelper.toBroker(em);\r\n-            OpenJPAStateManager sm = b.getStateManager(o);\r\n-            assertEquals(PCState.PNONTRANS, sm.getPCState());\r\n-            o.setLazyField(\"foo\");\r\n-            assertEquals(PCState.PDIRTY, sm.getPCState());\r\n-        } finally {\r\n-                em.getTransaction().rollback();\r\n-        }\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.lifecycle;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.enhance.UnenhancedPropertyAccess;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestPessimisticPNonTransToPDirty\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(UnenhancedPropertyAccess.class, CLEAR_TABLES);\n+\n+        UnenhancedPropertyAccess o = new UnenhancedPropertyAccess();\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testPNonTransToPDirty() {\n+        em.setOptimistic(false);\n+        UnenhancedPropertyAccess o = (UnenhancedPropertyAccess)\n+            em.createQuery(\"select o from UnenhancedPropertyAccess o\")\n+                .getSingleResult();\n+        em.getTransaction().begin();\n+        try {\n+            Broker b = JPAFacadeHelper.toBroker(em);\n+            OpenJPAStateManager sm = b.getStateManager(o);\n+            assertEquals(PCState.PNONTRANS, sm.getPCState());\n+            o.setLazyField(\"foo\");\n+            assertEquals(PCState.PDIRTY, sm.getPCState());\n+        } finally {\n+                em.getTransaction().rollback();\n+        }\n+    }\n }\n\\ No newline at end of file"},{"sha":"08ca30dc9072d917afa2068aa525539ccc06cabc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Embedded;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.CascadeType;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-import org.apache.openjpa.persistence.ManagedInterface;\r\n-import org.apache.openjpa.persistence.query.SimpleEntity;\r\n-\r\n-@ManagedInterface\r\n-@Entity\r\n-public interface ManagedIface extends ManagedInterfaceSup {\r\n-    public int getIntField();\r\n-    public void setIntField(int i);\r\n-\r\n-    @Embedded\r\n-    public ManagedInterfaceEmbed getEmbed();\r\n-    public void setEmbed(ManagedInterfaceEmbed embed);\r\n-\r\n-    @OneToOne(cascade=CascadeType.PERSIST)\r\n-    public ManagedIface getSelf();\r\n-    public void setSelf(ManagedIface iface);\r\n-\r\n-    @PersistentCollection\r\n-    public Set<Integer> getSetInteger();\r\n-    public void setSetInteger(Set<Integer> collection);\r\n-\r\n-    @OneToMany(cascade=CascadeType.PERSIST)\r\n-    public Set<SimpleEntity> getSetPC();\r\n-    public void setSetPC(Set<SimpleEntity> collection);\r\n-\r\n-    @OneToMany(cascade=CascadeType.PERSIST)\r\n-    public Set<ManagedIface> getSetI();\r\n-    public void setSetI(Set<ManagedIface> collection);\r\n-\r\n-    @OneToOne(cascade=CascadeType.PERSIST)\r\n-    public SimpleEntity getPC();\r\n-    public void setPC(SimpleEntity pc);\r\n-\r\n-    public void unimplemented();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import java.util.*;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Embedded;\n+import javax.persistence.OneToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.CascadeType;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+import org.apache.openjpa.persistence.ManagedInterface;\n+import org.apache.openjpa.persistence.query.SimpleEntity;\n+\n+@ManagedInterface\n+@Entity\n+public interface ManagedIface extends ManagedInterfaceSup {\n+    public int getIntField();\n+    public void setIntField(int i);\n+\n+    @Embedded\n+    public ManagedInterfaceEmbed getEmbed();\n+    public void setEmbed(ManagedInterfaceEmbed embed);\n+\n+    @OneToOne(cascade=CascadeType.PERSIST)\n+    public ManagedIface getSelf();\n+    public void setSelf(ManagedIface iface);\n+\n+    @PersistentCollection\n+    public Set<Integer> getSetInteger();\n+    public void setSetInteger(Set<Integer> collection);\n+\n+    @OneToMany(cascade=CascadeType.PERSIST)\n+    public Set<SimpleEntity> getSetPC();\n+    public void setSetPC(Set<SimpleEntity> collection);\n+\n+    @OneToMany(cascade=CascadeType.PERSIST)\n+    public Set<ManagedIface> getSetI();\n+    public void setSetI(Set<ManagedIface> collection);\n+\n+    @OneToOne(cascade=CascadeType.PERSIST)\n+    public SimpleEntity getPC();\n+    public void setPC(SimpleEntity pc);\n+\n+    public void unimplemented();\n+}"},{"sha":"9687be61d97a4dcaf389cef91cd6bfacfa65ac2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,31 +1,31 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.Basic;\r\n-\r\n-import org.apache.openjpa.persistence.ManagedInterface;\r\n-\r\n-@ManagedInterface\r\n-@Embeddable\r\n-public interface ManagedInterfaceEmbed {\r\n-    public int getEmbedIntField();\r\n-    public void setEmbedIntField(int i);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.Basic;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Embeddable\n+public interface ManagedInterfaceEmbed {\n+    public int getEmbedIntField();\n+    public void setEmbedIntField(int i);\n+}"},{"sha":"1bd4efbbc3bda231ed38c76476278dd1634bac44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Embedded;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.CascadeType;\r\n-\r\n-@Entity\r\n-public class ManagedInterfaceOwner {\r\n-\r\n-    @Id\r\n-    private int id;\r\n-\r\n-    private int intField;\r\n-\r\n-    @OneToOne(cascade=CascadeType.PERSIST)\r\n-    private ManagedInterfaceSup iface;\r\n-\r\n-    @Embedded\r\n-    private ManagedInterfaceEmbed embed;\r\n-\r\n-    public int getIntField() {\r\n-        return intField;\r\n-    }\r\n-\r\n-    public void setIntField(int i) {\r\n-        intField = i;\r\n-    }\r\n-\r\n-    public ManagedInterfaceSup getIFace() {\r\n-        return iface;\r\n-    }\r\n-\r\n-    public void setIFace(ManagedInterfaceSup iface) {\r\n-        this.iface = iface;\r\n-    }\r\n-\r\n-    public ManagedInterfaceEmbed getEmbed() {\r\n-        return embed;\r\n-    }\r\n-\r\n-    public void setEmbed(ManagedInterfaceEmbed embed) {\r\n-        this.embed = embed;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.OneToOne;\n+import javax.persistence.Id;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.CascadeType;\n+\n+@Entity\n+public class ManagedInterfaceOwner {\n+\n+    @Id\n+    private int id;\n+\n+    private int intField;\n+\n+    @OneToOne(cascade=CascadeType.PERSIST)\n+    private ManagedInterfaceSup iface;\n+\n+    @Embedded\n+    private ManagedInterfaceEmbed embed;\n+\n+    public int getIntField() {\n+        return intField;\n+    }\n+\n+    public void setIntField(int i) {\n+        intField = i;\n+    }\n+\n+    public ManagedInterfaceSup getIFace() {\n+        return iface;\n+    }\n+\n+    public void setIFace(ManagedInterfaceSup iface) {\n+        this.iface = iface;\n+    }\n+\n+    public ManagedInterfaceEmbed getEmbed() {\n+        return embed;\n+    }\n+\n+    public void setEmbed(ManagedInterfaceEmbed embed) {\n+        this.embed = embed;\n+    }\n+}"},{"sha":"d9e553bf995940f37757f351bd0b7ef348e5e312","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.GeneratedValue;\r\n-\r\n-import org.apache.openjpa.persistence.ManagedInterface;\r\n-\r\n-@ManagedInterface\r\n-@Entity\r\n-public interface ManagedInterfaceSup {\r\n-    @Id @GeneratedValue\r\n-    public int getId();\r\n-    public void setId(int id);\r\n-\r\n-    public int getIntFieldSup();\r\n-    public void setIntFieldSup(int i);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Entity\n+public interface ManagedInterfaceSup {\n+    @Id @GeneratedValue\n+    public int getId();\n+    public void setId(int id);\n+\n+    public int getIntFieldSup();\n+    public void setIntFieldSup(int i);\n+}"},{"sha":"92b2f9ff5d35c985426a905578cfcf32c7ed0983","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,38 +1,38 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.ManagedInterface;\r\n-\r\n-@ManagedInterface\r\n-@Entity\r\n-public interface MixedInterface {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    public int getId();\r\n-    public void setId(int id);\r\n-\r\n-    public int getIntField();\r\n-    public void setIntField(int i);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Entity\n+public interface MixedInterface {\n+\n+    @Id\n+    @GeneratedValue\n+    public int getId();\n+    public void setId(int id);\n+\n+    public int getIntField();\n+    public void setIntField(int i);\n+}"},{"sha":"3c907cff2f96597f276c9f560ed3a7a3db934611","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.GeneratedValue;\r\n-\r\n-@Entity\r\n-public class MixedInterfaceImpl implements MixedInterface {\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private int id;\r\n-\r\n-    private int intField;\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return intField;\r\n-    }\r\n-\r\n-    public void setIntField(int i) {\r\n-        intField = i;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+\n+@Entity\n+public class MixedInterfaceImpl implements MixedInterface {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    private int intField;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getIntField() {\n+        return intField;\n+    }\n+\n+    public void setIntField(int i) {\n+        intField = i;\n+    }\n+}"},{"sha":"7d11ab70d78d5d27da7bc65abb77082b18f767ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,25 +1,25 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-public interface NonMappedInterface {\r\n-    public int getIntField();\r\n-\r\n-    public void setIntField(int i);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+public interface NonMappedInterface {\n+    public int getIntField();\n+\n+    public void setIntField(int i);\n+}"},{"sha":"cfd83aa07ea469e049d351bc5fd87951c4775b83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,35 +1,35 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class NonMappedInterfaceImpl\r\n-    implements NonMappedInterface {\r\n-    private int mismatch;\r\n-\r\n-    public int getIntField() {\r\n-        return mismatch;\r\n-    }\r\n-\r\n-    public void setIntField(int i) {\r\n-        mismatch = i;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class NonMappedInterfaceImpl\n+    implements NonMappedInterface {\n+    private int mismatch;\n+\n+    public int getIntField() {\n+        return mismatch;\n+    }\n+\n+    public void setIntField(int i) {\n+        mismatch = i;\n+    }\n+}"},{"sha":"db606a463a78a03d498bc2fb049ab38bc1787dfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.ManagedInterface;\r\n-\r\n-@ManagedInterface\r\n-@Entity\r\n-public interface SimpleManagedInterface {\r\n-\r\n-    @Id\r\n-    public int getId();\r\n-    public void setId(int id);\r\n-\r\n-    public String getString();\r\n-    public void setString(String s);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.Id;\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.ManagedInterface;\n+\n+@ManagedInterface\n+@Entity\n+public interface SimpleManagedInterface {\n+\n+    @Id\n+    public int getId();\n+    public void setId(int id);\n+\n+    public String getString();\n+    public void setString(String s);\n+}"},{"sha":"e378fe1c926fabfc459c768ac9ab0652d41069ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","status":"modified","additions":463,"deletions":463,"changes":926,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,463 +1,463 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import java.util.Set;\r\n-import java.util.HashSet;\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.Iterator;\r\n-import javax.persistence.Query;\r\n-import javax.persistence.EntityNotFoundException;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-import org.apache.openjpa.persistence.query.SimpleEntity;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.persistence.PersistenceException;\r\n-\r\n-public class TestManagedInterfaces extends SingleEMFTestCase {\r\n-\r\n-    @Override\r\n-    public void setUp() {\r\n-        super.setUp(SimpleEntity.class, ManagedInterfaceEmbed.class,\r\n-            ManagedInterfaceSup.class, ManagedIface.class,\r\n-            ManagedInterfaceOwner.class, MixedInterface.class,\r\n-            MixedInterfaceImpl.class, NonMappedInterfaceImpl.class,\r\n-            CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testEmbeddedMetaData() {\r\n-        emf.createEntityManager().close();\r\n-        ClassMetaData ownerMeta = JPAFacadeHelper.getMetaData(emf,\r\n-            ManagedIface.class);\r\n-        ClassMetaData embeddedMeta = ownerMeta.getField(\"embed\")\r\n-            .getDefiningMetaData();\r\n-        assertTrue(embeddedMeta.isManagedInterface());\r\n-        assertTrue(embeddedMeta.isIntercepting());\r\n-\r\n-        ClassMetaData embeddableMeta = JPAFacadeHelper.getMetaData(emf,\r\n-            ManagedInterfaceEmbed.class);\r\n-        assertTrue(embeddableMeta.isManagedInterface());\r\n-        assertTrue(embeddableMeta.isIntercepting());\r\n-    }\r\n-\r\n-    public void testManagedInterface() throws Exception {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n-        pc.setIntFieldSup(3);\r\n-        pc.setIntField(4);\r\n-        pc.setEmbed(em.createInstance(ManagedInterfaceEmbed.class));\r\n-\r\n-        pc.getEmbed().setEmbedIntField(5);\r\n-        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        assertEquals(3, pc.getIntFieldSup());\r\n-        assertEquals(4, pc.getIntField());\r\n-        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n-        em.getTransaction().begin();\r\n-        pc.setIntField(14);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager ();\r\n-        em.getTransaction().begin();\r\n-        Query query = em.createQuery(\"select o from ManagedIface o \" +\r\n-            \"where o.intField = 14\");\r\n-        pc = (ManagedIface) query.getSingleResult();\r\n-        assertEquals(14, pc.getIntField());\r\n-        em.remove(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        try {\r\n-            assertNull(em.find(ManagedIface.class, oid));\r\n-        } catch (EntityNotFoundException onfe) {}\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testInterfaceOwner() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        ManagedInterfaceOwner pc = new ManagedInterfaceOwner();\r\n-        pc.setIFace(em.createInstance(ManagedInterfaceSup.class));\r\n-        pc.setEmbed(em.createInstance(ManagedInterfaceEmbed.class));\r\n-        pc.getIFace().setIntFieldSup(3);\r\n-        pc.getEmbed().setEmbedIntField(5);\r\n-\r\n-        em.getTransaction().begin();\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        em.getTransaction().commit();\r\n-        pc = em.find(ManagedInterfaceOwner.class, oid);\r\n-        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedInterfaceOwner.class, oid);\r\n-        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        Query q = em.createQuery(\"select o from ManagedInterfaceOwner o \" +\r\n-            \"where o.iface.intFieldSup = 3 and o.embed.embedIntField = 5\");\r\n-        pc = (ManagedInterfaceOwner) q.getSingleResult();\r\n-        assertEquals(3, pc.getIFace().getIntFieldSup());\r\n-        assertEquals(5, pc.getEmbed().getEmbedIntField());\r\n-\r\n-        pc.getIFace().setIntFieldSup(13);\r\n-        pc.getEmbed().setEmbedIntField(15);\r\n-        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n-        assertEquals(15, pc.getEmbed().getEmbedIntField());\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedInterfaceOwner.class, oid);\r\n-        assertEquals(13, pc.getIFace().getIntFieldSup());\r\n-        assertEquals(15, pc.getEmbed().getEmbedIntField());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testCollection() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n-        Set set = new HashSet();\r\n-        set.add(new Integer(3));\r\n-        set.add(new Integer(4));\r\n-        set.add(new Integer(5));\r\n-        pc.setSetInteger(set);\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetInteger();\r\n-        assertEquals(3, set.size());\r\n-        assertTrue(set.contains(new Integer(3)));\r\n-        assertTrue(set.contains(new Integer(4)));\r\n-        assertTrue(set.contains(new Integer(5)));\r\n-        em.getTransaction().begin();\r\n-        set.remove(new Integer(4));\r\n-        set.add(new Integer(14));\r\n-        set.add(new Integer(15));\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetInteger();\r\n-        assertEquals(4, set.size());\r\n-        assertTrue(set.contains(new Integer(3)));\r\n-        assertTrue(set.contains(new Integer(5)));\r\n-        assertTrue(set.contains(new Integer(14)));\r\n-        assertTrue(set.contains(new Integer(15)));\r\n-        em.getTransaction().begin();\r\n-        pc.setSetInteger(null);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetInteger();\r\n-        assertTrue (set == null || set.size() == 0);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testCollectionPC() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n-        Set set = new HashSet();\r\n-        set.add(new SimpleEntity(\"a\", \"3\"));\r\n-        set.add(new SimpleEntity(\"b\", \"4\"));\r\n-        set.add(new SimpleEntity(\"c\", \"5\"));\r\n-        pc.setSetPC(set);\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertEquals(3, set.size());\r\n-        Collection seen = new ArrayList();\r\n-        SimpleEntity rel;\r\n-        SimpleEntity toRem = null;\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (SimpleEntity) it.next();\r\n-            seen.add(rel.getName());\r\n-            if (rel.getValue().equals(\"4\"))\r\n-                toRem = rel;\r\n-        }\r\n-        assertEquals(3, seen.size());\r\n-        assertTrue(seen.contains(\"a\"));\r\n-        assertTrue(seen.contains(\"b\"));\r\n-        assertTrue(seen.contains(\"c\"));\r\n-        em.getTransaction().begin();\r\n-        assertNotNull(toRem);\r\n-        set.remove(toRem);\r\n-        set.add(new SimpleEntity(\"x\", \"14\"));\r\n-        set.add(new SimpleEntity(\"y\", \"15\"));\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertEquals(4, set.size());\r\n-        seen.clear();\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (SimpleEntity) it.next();\r\n-            seen.add(rel.getName());\r\n-        }\r\n-        assertEquals(4, seen.size());\r\n-        assertTrue(seen.contains(\"a\"));\r\n-        assertTrue(seen.contains(\"c\"));\r\n-        assertTrue(seen.contains(\"x\"));\r\n-        assertTrue(seen.contains(\"y\"));\r\n-        em.getTransaction().begin();\r\n-        pc.setSetPC(null);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertTrue (set == null || set.size() == 0);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testCollectionInterfaces() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n-        Set set = new HashSet();\r\n-        set.add(createInstance(em, 3));\r\n-        set.add(createInstance(em, 4));\r\n-        set.add(createInstance(em, 5));\r\n-        pc.setSetI(set);\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetI();\r\n-        assertEquals(3, set.size());\r\n-        Collection seen = new ArrayList();\r\n-        ManagedIface rel = null;\r\n-        ManagedIface toRem = null;\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (ManagedIface) it.next();\r\n-            seen.add(new Integer(rel.getIntField()));\r\n-            if (rel.getIntField() == 4)\r\n-                toRem = rel;\r\n-        }\r\n-        assertEquals(3, seen.size());\r\n-        assertTrue(seen.contains(new Integer(3)));\r\n-        assertTrue(seen.contains(new Integer(4)));\r\n-        assertTrue(seen.contains(new Integer(5)));\r\n-        em.getTransaction().begin();\r\n-        assertNotNull(toRem);\r\n-        set.remove(toRem);\r\n-        set.add(createInstance(em, 14));\r\n-        set.add(createInstance(em, 15));\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetI();\r\n-        assertEquals(4, set.size());\r\n-        seen.clear();\r\n-        for (Iterator it = set.iterator(); it.hasNext();) {\r\n-            rel = (ManagedIface) it.next();\r\n-            seen.add(new Integer(rel.getIntField()));\r\n-        }\r\n-        assertEquals(4, seen.size());\r\n-        assertTrue(seen.contains(new Integer(3)));\r\n-        assertTrue(seen.contains(new Integer(5)));\r\n-        assertTrue(seen.contains(new Integer(14)));\r\n-        assertTrue(seen.contains(new Integer(15)));\r\n-        em.getTransaction().begin();\r\n-        pc.setSetPC(null);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        set = pc.getSetPC();\r\n-        assertTrue (set == null || set.size() == 0);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testMixedQuery() {\r\n-        createMixed();\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        Query q = em.createQuery(\"select o from MixedInterface o \" +\r\n-            \"where o.intField = 4\");\r\n-        Collection c = q.getResultList();\r\n-        Set seen = new HashSet();\r\n-        assertEquals(2, c.size());\r\n-        MixedInterface pc;\r\n-        for (Iterator it = c.iterator(); it.hasNext();) {\r\n-            pc = (MixedInterface) it.next();\r\n-            assertEquals(4, pc.getIntField());\r\n-            seen.add(pc.getClass());\r\n-        }\r\n-        assertEquals(2, seen.size());\r\n-        \r\n-        // Changes of OPENJPA-485 had the positive (but unintended) consequence\r\n-        // of making this case pass, which was failing before as reported in\r\n-        // OPENJPA-481\r\n-    }\r\n-\r\n-    public void testQueryForMixedInterfaceImpls() {\r\n-        createMixed();\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        Query q = em.createQuery(\"select o from MixedInterfaceImpl o \" +\r\n-            \"where o.intField = 4\");\r\n-        MixedInterface pc = (MixedInterface) q.getSingleResult();\r\n-        assertEquals(4, pc.getIntField());\r\n-        assertTrue(pc instanceof MixedInterfaceImpl);\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testMixedExtent() {\r\n-        createMixed();\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        Extent e = em.createExtent(MixedInterface.class, true);\r\n-        Set seen = new HashSet();\r\n-        int size = 0;\r\n-        for (Iterator it = e.iterator(); it.hasNext();) {\r\n-            seen.add(it.next().getClass());\r\n-            size++;\r\n-        }\r\n-        assertEquals(3, size);\r\n-        assertEquals(2, seen.size());\r\n-\r\n-        e = em.createExtent(MixedInterface.class, false);\r\n-        seen = new HashSet();\r\n-        size = 0;\r\n-        for (Iterator it = e.iterator(); it.hasNext();) {\r\n-            seen.add(it.next().getClass());\r\n-            size++;\r\n-        }\r\n-        assertEquals(1, size);\r\n-        assertNotEquals(MixedInterfaceImpl.class, seen.iterator().next());\r\n-        em.close();\r\n-    }\r\n-\r\n-    private void createMixed() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        MixedInterface pc = em.createInstance(MixedInterface.class);\r\n-        pc.setIntField(4);\r\n-        em.persist(pc);\r\n-        pc = new MixedInterfaceImpl();\r\n-        pc.setIntField(4);\r\n-        em.persist(pc);\r\n-        pc = new MixedInterfaceImpl();\r\n-        pc.setIntField(8);\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testUnimplementedThrowsException() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        ManagedIface pc = createInstance(em, 1);\r\n-        try {\r\n-            pc.unimplemented();\r\n-            fail(\"Exception expected.\");\r\n-        } catch (UnsupportedOperationException uoe) {} // good\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testNonMappedCreateInstanceException() {\r\n-        // OpenJPA's support of non-mapped interfaces differs from JDO support;\r\n-        // there is no special query or relation support for non-mapped\r\n-        // interfaces in OpenJPA at this time.\r\n-        OpenJPAEntityManager em = null;\r\n-        try {\r\n-            em = emf.createEntityManager();\r\n-            em.createInstance(NonMappedInterface.class);\r\n-            fail(\"IllegalArgumentException expected\");\r\n-        } catch (IllegalArgumentException e) {} // good\r\n-        if (em != null)\r\n-            em.close();\r\n-    }\r\n-\r\n-    public void testDetach() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        ManagedIface pc = createInstance(em, 4);\r\n-        em.persist(pc);\r\n-        Object oid = em.getObjectId(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        ManagedIface pcx = em.find(ManagedIface.class, oid);\r\n-        pc = em.detach(pcx);\r\n-        em.close();\r\n-\r\n-        assertTrue(em.isDetached(pc));\r\n-        pc.setIntField(7);\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.merge(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(ManagedIface.class, oid);\r\n-        assertEquals(7, pc.getIntField());\r\n-        em.close();\r\n-    }\r\n-\r\n-    private ManagedIface createInstance(OpenJPAEntityManager em, int i) {\r\n-        ManagedIface pc = em.createInstance(ManagedIface.class);\r\n-        pc.setIntField(i);\r\n-        return pc;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import javax.persistence.Query;\n+import javax.persistence.EntityNotFoundException;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.Extent;\n+import org.apache.openjpa.persistence.query.SimpleEntity;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.PersistenceException;\n+\n+public class TestManagedInterfaces extends SingleEMFTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp(SimpleEntity.class, ManagedInterfaceEmbed.class,\n+            ManagedInterfaceSup.class, ManagedIface.class,\n+            ManagedInterfaceOwner.class, MixedInterface.class,\n+            MixedInterfaceImpl.class, NonMappedInterfaceImpl.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testEmbeddedMetaData() {\n+        emf.createEntityManager().close();\n+        ClassMetaData ownerMeta = JPAFacadeHelper.getMetaData(emf,\n+            ManagedIface.class);\n+        ClassMetaData embeddedMeta = ownerMeta.getField(\"embed\")\n+            .getDefiningMetaData();\n+        assertTrue(embeddedMeta.isManagedInterface());\n+        assertTrue(embeddedMeta.isIntercepting());\n+\n+        ClassMetaData embeddableMeta = JPAFacadeHelper.getMetaData(emf,\n+            ManagedInterfaceEmbed.class);\n+        assertTrue(embeddableMeta.isManagedInterface());\n+        assertTrue(embeddableMeta.isIntercepting());\n+    }\n+\n+    public void testManagedInterface() throws Exception {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\n+        pc.setIntFieldSup(3);\n+        pc.setIntField(4);\n+        pc.setEmbed(em.createInstance(ManagedInterfaceEmbed.class));\n+\n+        pc.getEmbed().setEmbedIntField(5);\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        assertEquals(3, pc.getIntFieldSup());\n+        assertEquals(4, pc.getIntField());\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\n+        em.getTransaction().begin();\n+        pc.setIntField(14);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager ();\n+        em.getTransaction().begin();\n+        Query query = em.createQuery(\"select o from ManagedIface o \" +\n+            \"where o.intField = 14\");\n+        pc = (ManagedIface) query.getSingleResult();\n+        assertEquals(14, pc.getIntField());\n+        em.remove(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        try {\n+            assertNull(em.find(ManagedIface.class, oid));\n+        } catch (EntityNotFoundException onfe) {}\n+\n+        em.close();\n+    }\n+\n+    public void testInterfaceOwner() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        ManagedInterfaceOwner pc = new ManagedInterfaceOwner();\n+        pc.setIFace(em.createInstance(ManagedInterfaceSup.class));\n+        pc.setEmbed(em.createInstance(ManagedInterfaceEmbed.class));\n+        pc.getIFace().setIntFieldSup(3);\n+        pc.getEmbed().setEmbedIntField(5);\n+\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        em.getTransaction().commit();\n+        pc = em.find(ManagedInterfaceOwner.class, oid);\n+        assertEquals(3, pc.getIFace().getIntFieldSup());\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedInterfaceOwner.class, oid);\n+        assertEquals(3, pc.getIFace().getIntFieldSup());\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Query q = em.createQuery(\"select o from ManagedInterfaceOwner o \" +\n+            \"where o.iface.intFieldSup = 3 and o.embed.embedIntField = 5\");\n+        pc = (ManagedInterfaceOwner) q.getSingleResult();\n+        assertEquals(3, pc.getIFace().getIntFieldSup());\n+        assertEquals(5, pc.getEmbed().getEmbedIntField());\n+\n+        pc.getIFace().setIntFieldSup(13);\n+        pc.getEmbed().setEmbedIntField(15);\n+        assertEquals(13, pc.getIFace().getIntFieldSup());\n+        assertEquals(15, pc.getEmbed().getEmbedIntField());\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedInterfaceOwner.class, oid);\n+        assertEquals(13, pc.getIFace().getIntFieldSup());\n+        assertEquals(15, pc.getEmbed().getEmbedIntField());\n+        em.close();\n+    }\n+\n+    public void testCollection() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\n+        Set set = new HashSet();\n+        set.add(new Integer(3));\n+        set.add(new Integer(4));\n+        set.add(new Integer(5));\n+        pc.setSetInteger(set);\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetInteger();\n+        assertEquals(3, set.size());\n+        assertTrue(set.contains(new Integer(3)));\n+        assertTrue(set.contains(new Integer(4)));\n+        assertTrue(set.contains(new Integer(5)));\n+        em.getTransaction().begin();\n+        set.remove(new Integer(4));\n+        set.add(new Integer(14));\n+        set.add(new Integer(15));\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetInteger();\n+        assertEquals(4, set.size());\n+        assertTrue(set.contains(new Integer(3)));\n+        assertTrue(set.contains(new Integer(5)));\n+        assertTrue(set.contains(new Integer(14)));\n+        assertTrue(set.contains(new Integer(15)));\n+        em.getTransaction().begin();\n+        pc.setSetInteger(null);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetInteger();\n+        assertTrue (set == null || set.size() == 0);\n+        em.close();\n+    }\n+\n+    public void testCollectionPC() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\n+        Set set = new HashSet();\n+        set.add(new SimpleEntity(\"a\", \"3\"));\n+        set.add(new SimpleEntity(\"b\", \"4\"));\n+        set.add(new SimpleEntity(\"c\", \"5\"));\n+        pc.setSetPC(set);\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetPC();\n+        assertEquals(3, set.size());\n+        Collection seen = new ArrayList();\n+        SimpleEntity rel;\n+        SimpleEntity toRem = null;\n+        for (Iterator it = set.iterator(); it.hasNext();) {\n+            rel = (SimpleEntity) it.next();\n+            seen.add(rel.getName());\n+            if (rel.getValue().equals(\"4\"))\n+                toRem = rel;\n+        }\n+        assertEquals(3, seen.size());\n+        assertTrue(seen.contains(\"a\"));\n+        assertTrue(seen.contains(\"b\"));\n+        assertTrue(seen.contains(\"c\"));\n+        em.getTransaction().begin();\n+        assertNotNull(toRem);\n+        set.remove(toRem);\n+        set.add(new SimpleEntity(\"x\", \"14\"));\n+        set.add(new SimpleEntity(\"y\", \"15\"));\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetPC();\n+        assertEquals(4, set.size());\n+        seen.clear();\n+        for (Iterator it = set.iterator(); it.hasNext();) {\n+            rel = (SimpleEntity) it.next();\n+            seen.add(rel.getName());\n+        }\n+        assertEquals(4, seen.size());\n+        assertTrue(seen.contains(\"a\"));\n+        assertTrue(seen.contains(\"c\"));\n+        assertTrue(seen.contains(\"x\"));\n+        assertTrue(seen.contains(\"y\"));\n+        em.getTransaction().begin();\n+        pc.setSetPC(null);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetPC();\n+        assertTrue (set == null || set.size() == 0);\n+        em.close();\n+    }\n+\n+    public void testCollectionInterfaces() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\n+        Set set = new HashSet();\n+        set.add(createInstance(em, 3));\n+        set.add(createInstance(em, 4));\n+        set.add(createInstance(em, 5));\n+        pc.setSetI(set);\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetI();\n+        assertEquals(3, set.size());\n+        Collection seen = new ArrayList();\n+        ManagedIface rel = null;\n+        ManagedIface toRem = null;\n+        for (Iterator it = set.iterator(); it.hasNext();) {\n+            rel = (ManagedIface) it.next();\n+            seen.add(new Integer(rel.getIntField()));\n+            if (rel.getIntField() == 4)\n+                toRem = rel;\n+        }\n+        assertEquals(3, seen.size());\n+        assertTrue(seen.contains(new Integer(3)));\n+        assertTrue(seen.contains(new Integer(4)));\n+        assertTrue(seen.contains(new Integer(5)));\n+        em.getTransaction().begin();\n+        assertNotNull(toRem);\n+        set.remove(toRem);\n+        set.add(createInstance(em, 14));\n+        set.add(createInstance(em, 15));\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetI();\n+        assertEquals(4, set.size());\n+        seen.clear();\n+        for (Iterator it = set.iterator(); it.hasNext();) {\n+            rel = (ManagedIface) it.next();\n+            seen.add(new Integer(rel.getIntField()));\n+        }\n+        assertEquals(4, seen.size());\n+        assertTrue(seen.contains(new Integer(3)));\n+        assertTrue(seen.contains(new Integer(5)));\n+        assertTrue(seen.contains(new Integer(14)));\n+        assertTrue(seen.contains(new Integer(15)));\n+        em.getTransaction().begin();\n+        pc.setSetPC(null);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        set = pc.getSetPC();\n+        assertTrue (set == null || set.size() == 0);\n+        em.close();\n+    }\n+\n+    public void testMixedQuery() {\n+        createMixed();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select o from MixedInterface o \" +\n+            \"where o.intField = 4\");\n+        Collection c = q.getResultList();\n+        Set seen = new HashSet();\n+        assertEquals(2, c.size());\n+        MixedInterface pc;\n+        for (Iterator it = c.iterator(); it.hasNext();) {\n+            pc = (MixedInterface) it.next();\n+            assertEquals(4, pc.getIntField());\n+            seen.add(pc.getClass());\n+        }\n+        assertEquals(2, seen.size());\n+        \n+        // Changes of OPENJPA-485 had the positive (but unintended) consequence\n+        // of making this case pass, which was failing before as reported in\n+        // OPENJPA-481\n+    }\n+\n+    public void testQueryForMixedInterfaceImpls() {\n+        createMixed();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select o from MixedInterfaceImpl o \" +\n+            \"where o.intField = 4\");\n+        MixedInterface pc = (MixedInterface) q.getSingleResult();\n+        assertEquals(4, pc.getIntField());\n+        assertTrue(pc instanceof MixedInterfaceImpl);\n+        em.close();\n+    }\n+\n+    public void testMixedExtent() {\n+        createMixed();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        Extent e = em.createExtent(MixedInterface.class, true);\n+        Set seen = new HashSet();\n+        int size = 0;\n+        for (Iterator it = e.iterator(); it.hasNext();) {\n+            seen.add(it.next().getClass());\n+            size++;\n+        }\n+        assertEquals(3, size);\n+        assertEquals(2, seen.size());\n+\n+        e = em.createExtent(MixedInterface.class, false);\n+        seen = new HashSet();\n+        size = 0;\n+        for (Iterator it = e.iterator(); it.hasNext();) {\n+            seen.add(it.next().getClass());\n+            size++;\n+        }\n+        assertEquals(1, size);\n+        assertNotEquals(MixedInterfaceImpl.class, seen.iterator().next());\n+        em.close();\n+    }\n+\n+    private void createMixed() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        MixedInterface pc = em.createInstance(MixedInterface.class);\n+        pc.setIntField(4);\n+        em.persist(pc);\n+        pc = new MixedInterfaceImpl();\n+        pc.setIntField(4);\n+        em.persist(pc);\n+        pc = new MixedInterfaceImpl();\n+        pc.setIntField(8);\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testUnimplementedThrowsException() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        ManagedIface pc = createInstance(em, 1);\n+        try {\n+            pc.unimplemented();\n+            fail(\"Exception expected.\");\n+        } catch (UnsupportedOperationException uoe) {} // good\n+        em.close();\n+    }\n+\n+    public void testNonMappedCreateInstanceException() {\n+        // OpenJPA's support of non-mapped interfaces differs from JDO support;\n+        // there is no special query or relation support for non-mapped\n+        // interfaces in OpenJPA at this time.\n+        OpenJPAEntityManager em = null;\n+        try {\n+            em = emf.createEntityManager();\n+            em.createInstance(NonMappedInterface.class);\n+            fail(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException e) {} // good\n+        if (em != null)\n+            em.close();\n+    }\n+\n+    public void testDetach() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        ManagedIface pc = createInstance(em, 4);\n+        em.persist(pc);\n+        Object oid = em.getObjectId(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        ManagedIface pcx = em.find(ManagedIface.class, oid);\n+        pc = em.detach(pcx);\n+        em.close();\n+\n+        assertTrue(em.isDetached(pc));\n+        pc.setIntField(7);\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.merge(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(ManagedIface.class, oid);\n+        assertEquals(7, pc.getIntField());\n+        em.close();\n+    }\n+\n+    private ManagedIface createInstance(OpenJPAEntityManager em, int i) {\n+        ManagedIface pc = em.createInstance(ManagedIface.class);\n+        pc.setIntField(i);\n+        return pc;\n+    }\n+}"},{"sha":"12648156ee44e05fad7708cde53595f8b433ceaf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.managedinterface;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.query.SimpleEntity;\r\n-import org.apache.openjpa.kernel.AbstractBrokerFactory;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.MetaDataRepository;\r\n-\r\n-public class TestSimpleManagedInterface\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(SimpleManagedInterface.class, SimpleEntity.class, CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testMetaDataRepository() {\r\n-        AbstractBrokerFactory bf =\r\n-            (AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf);\r\n-        bf.makeReadOnly();\r\n-        MetaDataRepository repos = bf.getConfiguration()\r\n-            .getMetaDataRepositoryInstance();\r\n-        ClassMetaData meta = repos.getMetaData(SimpleManagedInterface.class,\r\n-            null, false);\r\n-        assertNotNull(meta);\r\n-        assertTrue(meta.isManagedInterface());\r\n-        assertEquals(SimpleManagedInterface.class, meta.getDescribedType());\r\n-    }\r\n-\r\n-    public void testInterfaceImplGeneration() {\r\n-        ((AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf))\r\n-            .makeReadOnly();\r\n-        // load metadata to trigger instance creation\r\n-        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf,\r\n-            SimpleManagedInterface.class);\r\n-        assertEquals(SimpleManagedInterface.class, meta.getDescribedType());\r\n-    }\r\n-\r\n-    public void testBasicOperations() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        SimpleManagedInterface pc =\r\n-            em.createInstance(SimpleManagedInterface.class);\r\n-        pc.setId(17);\r\n-        pc.setString(\"hello!\");\r\n-        em.getTransaction().begin();\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        pc = em.find(SimpleManagedInterface.class, 17);\r\n-        assertNotNull(pc);\r\n-        em.getTransaction().begin();\r\n-        pc.setString(\"updated\");\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.remove(em.getReference(SimpleManagedInterface.class, 17));\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testJPQL() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        assertEquals(0, em.createQuery(\"select o from SimpleManagedInterface o\")\r\n-            .getResultList().size());\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.managedinterface;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.query.SimpleEntity;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+\n+public class TestSimpleManagedInterface\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleManagedInterface.class, SimpleEntity.class, CLEAR_TABLES);\n+    }\n+\n+    public void testMetaDataRepository() {\n+        AbstractBrokerFactory bf =\n+            (AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf);\n+        bf.makeReadOnly();\n+        MetaDataRepository repos = bf.getConfiguration()\n+            .getMetaDataRepositoryInstance();\n+        ClassMetaData meta = repos.getMetaData(SimpleManagedInterface.class,\n+            null, false);\n+        assertNotNull(meta);\n+        assertTrue(meta.isManagedInterface());\n+        assertEquals(SimpleManagedInterface.class, meta.getDescribedType());\n+    }\n+\n+    public void testInterfaceImplGeneration() {\n+        ((AbstractBrokerFactory) JPAFacadeHelper.toBrokerFactory(emf))\n+            .makeReadOnly();\n+        // load metadata to trigger instance creation\n+        ClassMetaData meta = JPAFacadeHelper.getMetaData(emf,\n+            SimpleManagedInterface.class);\n+        assertEquals(SimpleManagedInterface.class, meta.getDescribedType());\n+    }\n+\n+    public void testBasicOperations() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        SimpleManagedInterface pc =\n+            em.createInstance(SimpleManagedInterface.class);\n+        pc.setId(17);\n+        pc.setString(\"hello!\");\n+        em.getTransaction().begin();\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        pc = em.find(SimpleManagedInterface.class, 17);\n+        assertNotNull(pc);\n+        em.getTransaction().begin();\n+        pc.setString(\"updated\");\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.remove(em.getReference(SimpleManagedInterface.class, 17));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testJPQL() {\n+        EntityManager em = emf.createEntityManager();\n+        assertEquals(0, em.createQuery(\"select o from SimpleManagedInterface o\")\n+            .getResultList().size());\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"b90de89a8252e8868476290f2815f05b1e607567","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","status":"modified","additions":309,"deletions":309,"changes":618,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,309 +1,309 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest1;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest2;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest3;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest5;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest6;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.enhance.PersistenceCapable;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.meta.JavaTypes;\r\n-import org.apache.openjpa.meta.MetaDataRepository;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-/**\r\n- * <p>Tests the {@link ClassMetaData} type, and in so doing tests parts of\r\n- * the {@link MetaDataRepository} and {@link FieldMetaData} types.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestClassMetaData\r\n-    extends AbstractTestCase {\r\n-\r\n-    private MetaDataRepository _repos = null;\r\n-\r\n-    private ClassMetaData _metaTest1 = null;\r\n-    private ClassMetaData _metaTest2 = null;\r\n-    private ClassMetaData _metaTest3 = null;\r\n-    private ClassMetaData _metaTest5 = null;\r\n-    private ClassMetaData _metaTest6 = null;\r\n-\r\n-    public TestClassMetaData(String test) {\r\n-        super(test, \"metacactusapp\");\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        _repos = getRepository();\r\n-        _metaTest5 = _repos.getMetaData(MetaTest5.class, null, true);\r\n-        _metaTest3 = _repos.getMetaData(MetaTest3.class, null, true);\r\n-        _metaTest2 = _repos.getMetaData(MetaTest2.class, null, true);\r\n-        _metaTest1 = _repos.getMetaData(MetaTest1.class, null, true);\r\n-        _metaTest6 = _repos.getMetaData(MetaTest6.class, null, true);\r\n-    }\r\n-\r\n-    protected MetaDataRepository getRepository()\r\n-        throws Exception {\r\n-        //return new OpenJPAConfigurationImpl().newMetaDataRepositoryInstance();\r\n-        //return getConfiguration().newMetaDataRepositoryInstance();\r\n-        EntityManager em = currentEntityManager();\r\n-        Broker broker = JPAFacadeHelper.toBroker(em);\r\n-        return broker.getConfiguration().newMetaDataRepositoryInstance();\r\n-    }\r\n-\r\n-    /**\r\n-     * Test the class-level defaults.\r\n-     */\r\n-    public void testClassDefaults() {\r\n-        assertEquals(MetaTest1.class.getName(),\r\n-            _metaTest1.getDescribedType().getName());\r\n-        assertNull(_metaTest1.getPCSuperclass());\r\n-        assertEquals(ClassMetaData.ID_DATASTORE,\r\n-            _metaTest1.getIdentityType());\r\n-        assertTrue(_metaTest1.getRequiresExtent());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test non-persistent fields.\r\n-     */\r\n-    public void testDefaultNonPersistentFields() {\r\n-        assertNull(_metaTest1.getField(\"staticField\"));\r\n-        assertNull(_metaTest1.getField(\"finalfield\"));\r\n-        assertNull(_metaTest1.getField(\"transientfield\"));\r\n-        assertNull(_metaTest1.getField(\"metaTest4Field\"));\r\n-        assertNull(_metaTest1.getField(\"metaTest4ArrayField\"));\r\n-        assertNull(_metaTest1.getField(\"objectField\"));\r\n-        assertNull(_metaTest1.getField(\"longWrapperField\"));\r\n-\r\n-        FieldMetaData fmd = _metaTest1.getField(\"doubleField\");\r\n-        assertEquals(FieldMetaData.MANAGE_TRANSACTIONAL, fmd.getManagement());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test basics on persistent fields.\r\n-     */\r\n-    public void testBasicFields() {\r\n-        FieldMetaData fmd;\r\n-        fmd = _metaTest1.getField(\"stringField\");\r\n-        assertEquals(JavaTypes.STRING, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.STRING, fmd.getDeclaredTypeCode());\r\n-        assertNull(fmd.getTypeMetaData());\r\n-        assertNull(fmd.getDeclaredTypeMetaData());\r\n-        fmd = _metaTest1.getField(\"intWrapperField\");\r\n-        assertEquals(JavaTypes.INT_OBJ, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.INT_OBJ, fmd.getDeclaredTypeCode());\r\n-        fmd = _metaTest1.getField(\"intField\");\r\n-        assertEquals(JavaTypes.INT, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.INT, fmd.getDeclaredTypeCode());\r\n-        fmd = _metaTest1.getField(\"metaTest2Field\");\r\n-        assertEquals(JavaTypes.PC, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.PC, fmd.getDeclaredTypeCode());\r\n-        assertEquals(_metaTest2, fmd.getTypeMetaData());\r\n-        assertEquals(_metaTest2, fmd.getDeclaredTypeMetaData());\r\n-        fmd = _metaTest1.getField(\"metaTest2ArrayField\");\r\n-        assertEquals(JavaTypes.ARRAY, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\r\n-        assertEquals(JavaTypes.ARRAY, fmd.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.PC,\r\n-            fmd.getElement().getDeclaredTypeCode());\r\n-        fmd = _metaTest1.getField(\"intArrayField\");\r\n-        assertEquals(JavaTypes.ARRAY, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.INT, fmd.getElement().getTypeCode());\r\n-        assertEquals(JavaTypes.ARRAY, fmd.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.INT,\r\n-            fmd.getElement().getDeclaredTypeCode());\r\n-        fmd = _metaTest1.getField(\"intField\");\r\n-        assertEquals(FieldMetaData.NULL_EXCEPTION, fmd.getNullValue());\r\n-        assertTrue(!fmd.isInDefaultFetchGroup());\r\n-        assertTrue(!fmd.isEmbedded());\r\n-        fmd = _metaTest1.getField(\"stringField\");\r\n-        assertEquals(FieldMetaData.NULL_UNSET, fmd.getNullValue());\r\n-        assertTrue(fmd.isInDefaultFetchGroup());\r\n-        assertTrue(fmd.isEmbedded());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test collection and map fields.\r\n-     */\r\n-    public void testCollectionFields() {\r\n-        FieldMetaData fmd;\r\n-        fmd = _metaTest2.getField(\"collectionField1\");\r\n-        assertEquals(JavaTypes.COLLECTION, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT, fmd.getElement().getTypeCode());\r\n-        assertEquals(Object.class, fmd.getElement().getType());\r\n-        assertNull(fmd.getElement().getTypeMetaData());\r\n-        assertEquals(JavaTypes.COLLECTION,\r\n-            fmd.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT,\r\n-            fmd.getElement().getDeclaredTypeCode());\r\n-        assertEquals(Object.class, fmd.getElement().getDeclaredType());\r\n-        assertNull(fmd.getElement().getTypeMetaData());\r\n-        assertTrue(fmd.getElement().isEmbedded());\r\n-        fmd = _metaTest2.getField(\"collectionField2\");\r\n-        assertEquals(JavaTypes.COLLECTION, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\r\n-        assertEquals(MetaTest3.class, fmd.getElement().getType());\r\n-        assertEquals(_metaTest3, fmd.getElement().getTypeMetaData());\r\n-        assertEquals(JavaTypes.COLLECTION,\r\n-            fmd.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.PC,\r\n-            fmd.getElement().getDeclaredTypeCode());\r\n-        assertEquals(MetaTest3.class, fmd.getElement().getDeclaredType());\r\n-        assertEquals(_metaTest3, fmd.getElement().getDeclaredTypeMetaData());\r\n-        assertTrue(!fmd.getElement().isEmbedded());\r\n-\r\n-        fmd = _metaTest2.getField(\"mapField1\");\r\n-        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT, fmd.getKey().getTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT, fmd.getElement().getTypeCode());\r\n-        assertEquals(Object.class, fmd.getKey().getType());\r\n-        assertNull(fmd.getKey().getTypeMetaData());\r\n-        assertEquals(Object.class, fmd.getElement().getType());\r\n-        assertEquals(JavaTypes.MAP, fmd.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT, fmd.getKey().getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT,\r\n-            fmd.getElement().getDeclaredTypeCode());\r\n-        assertEquals(Object.class, fmd.getKey().getDeclaredType());\r\n-        assertNull(fmd.getKey().getDeclaredTypeMetaData());\r\n-        assertEquals(Object.class, fmd.getElement().getDeclaredType());\r\n-        assertTrue(fmd.getKey().isEmbedded());\r\n-        assertTrue(fmd.getElement().isEmbedded());\r\n-        fmd = _metaTest2.getField(\"mapField2\");\r\n-        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.STRING, fmd.getKey().getTypeCode());\r\n-        assertEquals(JavaTypes.INT_OBJ, fmd.getElement().getTypeCode());\r\n-        assertEquals(String.class, fmd.getKey().getType());\r\n-        assertEquals(Integer.class, fmd.getElement().getType());\r\n-        assertEquals(JavaTypes.MAP, fmd.getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.STRING, fmd.getKey().getDeclaredTypeCode());\r\n-        assertEquals(JavaTypes.INT_OBJ,\r\n-            fmd.getElement().getDeclaredTypeCode());\r\n-        assertEquals(String.class, fmd.getKey().getDeclaredType());\r\n-        assertEquals(Integer.class, fmd.getElement().getDeclaredType());\r\n-        assertTrue(fmd.getKey().isEmbedded());\r\n-        assertTrue(!fmd.getElement().isEmbedded());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test the basic class-level meta data.\r\n-     */\r\n-    public void testBasicClass() {\r\n-        assertEquals(_metaTest1, _metaTest2.getPCSuperclassMetaData());\r\n-        assertTrue(!_metaTest2.getRequiresExtent());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test application identity.\r\n-     */\r\n-    public void testApplicationIdentity() {\r\n-        assertEquals(ClassMetaData.ID_APPLICATION,\r\n-            _metaTest5.getIdentityType());\r\n-        assertEquals(MetaTest5.MetaTest5Id.class.getName(),\r\n-            _metaTest5.getObjectIdType().getName());\r\n-        assertEquals(ClassMetaData.ID_APPLICATION,\r\n-            _metaTest6.getIdentityType());\r\n-        assertEquals(MetaTest5.MetaTest5Id.class.getName(),\r\n-            _metaTest6.getObjectIdType().getName());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test absolute field numbering.\r\n-     */\r\n-    public void testAbsoluteFieldNumbering() {\r\n-        assertEquals(0, _metaTest1.getField(\"doubleField\").getIndex());\r\n-        assertEquals(1, _metaTest1.getField(\"intArrayField\").getIndex());\r\n-        assertEquals(2, _metaTest1.getField(\"intField\").getIndex());\r\n-        assertEquals(3, _metaTest1.getField(\"intWrapperField\").getIndex());\r\n-        assertEquals(4, _metaTest1.getField(\"metaTest2ArrayField\").\r\n-            getIndex());\r\n-        assertEquals(5, _metaTest1.getField(\"metaTest2Field\").getIndex());\r\n-        assertEquals(6, _metaTest1.getField(\"stringField\").getIndex());\r\n-        assertEquals(7, _metaTest2.getField(\"collectionField1\").getIndex());\r\n-        assertEquals(8, _metaTest2.getField(\"collectionField2\").getIndex());\r\n-        assertEquals(9, _metaTest2.getField(\"mapField1\").getIndex());\r\n-        assertEquals(10, _metaTest2.getField(\"mapField2\").getIndex());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test the methods to get fields.\r\n-     */\r\n-    public void testGetFields() {\r\n-        FieldMetaData[] fmds = _metaTest2.getFields();\r\n-        assertEquals(\"doubleField\", fmds[0].getName());\r\n-        assertEquals(\"intField\", fmds[2].getName());\r\n-        assertEquals(\"collectionField2\", fmds[8].getName());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test that metadata on inner classes is available.\r\n-     */\r\n-    public void testStaticInnerClasses() {\r\n-        assertNotNull(_repos.getMetaData(MetaTest1.Inner.class, null, true));\r\n-    }\r\n-\r\n-    /**\r\n-     * Test extensions for external values and declared vs external types.\r\n-     */\r\n-    public void testExternalTypes() {\r\n-        // note that below, declared type code is promoted\r\n-        FieldMetaData fmd = _metaTest3.getField(\"pcField\");\r\n-        assertEquals(JavaTypes.PC_UNTYPED, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.PC_UNTYPED, fmd.getDeclaredTypeCode());\r\n-        assertEquals(PersistenceCapable.class, fmd.getType());\r\n-        assertEquals(Object.class, fmd.getDeclaredType());\r\n-        assertNull(fmd.getDeclaredTypeMetaData());\r\n-        assertNull(fmd.getTypeMetaData());\r\n-\r\n-        // note that below, declared type code is promoted\r\n-        fmd = _metaTest3.getField(\"metaField\");\r\n-        assertEquals(JavaTypes.PC, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.PC, fmd.getDeclaredTypeCode());\r\n-        assertEquals(MetaTest2.class, fmd.getType());\r\n-        assertEquals(Object.class, fmd.getDeclaredType());\r\n-        assertEquals(_metaTest2, fmd.getDeclaredTypeMetaData());\r\n-        assertEquals(_metaTest2, fmd.getTypeMetaData());\r\n-\r\n-        fmd = _metaTest3.getField(\"externalField\");\r\n-        assertTrue(fmd.isExternalized());\r\n-        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT, fmd.getDeclaredTypeCode());\r\n-        assertEquals(Map.class, fmd.getType());\r\n-        assertEquals(Object.class, fmd.getDeclaredType());\r\n-        assertEquals(JavaTypes.STRING, fmd.getKey().getTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT, fmd.getKey().getDeclaredTypeCode());\r\n-        assertEquals(String.class, fmd.getKey().getType());\r\n-        assertEquals(Object.class, fmd.getKey().getDeclaredType());\r\n-        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\r\n-        assertEquals(JavaTypes.OBJECT,\r\n-            fmd.getElement().getDeclaredTypeCode());\r\n-        assertEquals(MetaTest2.class, fmd.getElement().getType());\r\n-        assertEquals(Object.class, fmd.getElement().getDeclaredType());\r\n-        assertEquals(_metaTest2, fmd.getElement().getTypeMetaData());\r\n-        assertNull(fmd.getElement().getDeclaredTypeMetaData());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest1;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest2;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest3;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest5;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest6;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+/**\n+ * <p>Tests the {@link ClassMetaData} type, and in so doing tests parts of\n+ * the {@link MetaDataRepository} and {@link FieldMetaData} types.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestClassMetaData\n+    extends AbstractTestCase {\n+\n+    private MetaDataRepository _repos = null;\n+\n+    private ClassMetaData _metaTest1 = null;\n+    private ClassMetaData _metaTest2 = null;\n+    private ClassMetaData _metaTest3 = null;\n+    private ClassMetaData _metaTest5 = null;\n+    private ClassMetaData _metaTest6 = null;\n+\n+    public TestClassMetaData(String test) {\n+        super(test, \"metacactusapp\");\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        _repos = getRepository();\n+        _metaTest5 = _repos.getMetaData(MetaTest5.class, null, true);\n+        _metaTest3 = _repos.getMetaData(MetaTest3.class, null, true);\n+        _metaTest2 = _repos.getMetaData(MetaTest2.class, null, true);\n+        _metaTest1 = _repos.getMetaData(MetaTest1.class, null, true);\n+        _metaTest6 = _repos.getMetaData(MetaTest6.class, null, true);\n+    }\n+\n+    protected MetaDataRepository getRepository()\n+        throws Exception {\n+        //return new OpenJPAConfigurationImpl().newMetaDataRepositoryInstance();\n+        //return getConfiguration().newMetaDataRepositoryInstance();\n+        EntityManager em = currentEntityManager();\n+        Broker broker = JPAFacadeHelper.toBroker(em);\n+        return broker.getConfiguration().newMetaDataRepositoryInstance();\n+    }\n+\n+    /**\n+     * Test the class-level defaults.\n+     */\n+    public void testClassDefaults() {\n+        assertEquals(MetaTest1.class.getName(),\n+            _metaTest1.getDescribedType().getName());\n+        assertNull(_metaTest1.getPCSuperclass());\n+        assertEquals(ClassMetaData.ID_DATASTORE,\n+            _metaTest1.getIdentityType());\n+        assertTrue(_metaTest1.getRequiresExtent());\n+    }\n+\n+    /**\n+     * Test non-persistent fields.\n+     */\n+    public void testDefaultNonPersistentFields() {\n+        assertNull(_metaTest1.getField(\"staticField\"));\n+        assertNull(_metaTest1.getField(\"finalfield\"));\n+        assertNull(_metaTest1.getField(\"transientfield\"));\n+        assertNull(_metaTest1.getField(\"metaTest4Field\"));\n+        assertNull(_metaTest1.getField(\"metaTest4ArrayField\"));\n+        assertNull(_metaTest1.getField(\"objectField\"));\n+        assertNull(_metaTest1.getField(\"longWrapperField\"));\n+\n+        FieldMetaData fmd = _metaTest1.getField(\"doubleField\");\n+        assertEquals(FieldMetaData.MANAGE_TRANSACTIONAL, fmd.getManagement());\n+    }\n+\n+    /**\n+     * Test basics on persistent fields.\n+     */\n+    public void testBasicFields() {\n+        FieldMetaData fmd;\n+        fmd = _metaTest1.getField(\"stringField\");\n+        assertEquals(JavaTypes.STRING, fmd.getTypeCode());\n+        assertEquals(JavaTypes.STRING, fmd.getDeclaredTypeCode());\n+        assertNull(fmd.getTypeMetaData());\n+        assertNull(fmd.getDeclaredTypeMetaData());\n+        fmd = _metaTest1.getField(\"intWrapperField\");\n+        assertEquals(JavaTypes.INT_OBJ, fmd.getTypeCode());\n+        assertEquals(JavaTypes.INT_OBJ, fmd.getDeclaredTypeCode());\n+        fmd = _metaTest1.getField(\"intField\");\n+        assertEquals(JavaTypes.INT, fmd.getTypeCode());\n+        assertEquals(JavaTypes.INT, fmd.getDeclaredTypeCode());\n+        fmd = _metaTest1.getField(\"metaTest2Field\");\n+        assertEquals(JavaTypes.PC, fmd.getTypeCode());\n+        assertEquals(JavaTypes.PC, fmd.getDeclaredTypeCode());\n+        assertEquals(_metaTest2, fmd.getTypeMetaData());\n+        assertEquals(_metaTest2, fmd.getDeclaredTypeMetaData());\n+        fmd = _metaTest1.getField(\"metaTest2ArrayField\");\n+        assertEquals(JavaTypes.ARRAY, fmd.getTypeCode());\n+        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\n+        assertEquals(JavaTypes.ARRAY, fmd.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.PC,\n+            fmd.getElement().getDeclaredTypeCode());\n+        fmd = _metaTest1.getField(\"intArrayField\");\n+        assertEquals(JavaTypes.ARRAY, fmd.getTypeCode());\n+        assertEquals(JavaTypes.INT, fmd.getElement().getTypeCode());\n+        assertEquals(JavaTypes.ARRAY, fmd.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.INT,\n+            fmd.getElement().getDeclaredTypeCode());\n+        fmd = _metaTest1.getField(\"intField\");\n+        assertEquals(FieldMetaData.NULL_EXCEPTION, fmd.getNullValue());\n+        assertTrue(!fmd.isInDefaultFetchGroup());\n+        assertTrue(!fmd.isEmbedded());\n+        fmd = _metaTest1.getField(\"stringField\");\n+        assertEquals(FieldMetaData.NULL_UNSET, fmd.getNullValue());\n+        assertTrue(fmd.isInDefaultFetchGroup());\n+        assertTrue(fmd.isEmbedded());\n+    }\n+\n+    /**\n+     * Test collection and map fields.\n+     */\n+    public void testCollectionFields() {\n+        FieldMetaData fmd;\n+        fmd = _metaTest2.getField(\"collectionField1\");\n+        assertEquals(JavaTypes.COLLECTION, fmd.getTypeCode());\n+        assertEquals(JavaTypes.OBJECT, fmd.getElement().getTypeCode());\n+        assertEquals(Object.class, fmd.getElement().getType());\n+        assertNull(fmd.getElement().getTypeMetaData());\n+        assertEquals(JavaTypes.COLLECTION,\n+            fmd.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.OBJECT,\n+            fmd.getElement().getDeclaredTypeCode());\n+        assertEquals(Object.class, fmd.getElement().getDeclaredType());\n+        assertNull(fmd.getElement().getTypeMetaData());\n+        assertTrue(fmd.getElement().isEmbedded());\n+        fmd = _metaTest2.getField(\"collectionField2\");\n+        assertEquals(JavaTypes.COLLECTION, fmd.getTypeCode());\n+        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\n+        assertEquals(MetaTest3.class, fmd.getElement().getType());\n+        assertEquals(_metaTest3, fmd.getElement().getTypeMetaData());\n+        assertEquals(JavaTypes.COLLECTION,\n+            fmd.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.PC,\n+            fmd.getElement().getDeclaredTypeCode());\n+        assertEquals(MetaTest3.class, fmd.getElement().getDeclaredType());\n+        assertEquals(_metaTest3, fmd.getElement().getDeclaredTypeMetaData());\n+        assertTrue(!fmd.getElement().isEmbedded());\n+\n+        fmd = _metaTest2.getField(\"mapField1\");\n+        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\n+        assertEquals(JavaTypes.OBJECT, fmd.getKey().getTypeCode());\n+        assertEquals(JavaTypes.OBJECT, fmd.getElement().getTypeCode());\n+        assertEquals(Object.class, fmd.getKey().getType());\n+        assertNull(fmd.getKey().getTypeMetaData());\n+        assertEquals(Object.class, fmd.getElement().getType());\n+        assertEquals(JavaTypes.MAP, fmd.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.OBJECT, fmd.getKey().getDeclaredTypeCode());\n+        assertEquals(JavaTypes.OBJECT,\n+            fmd.getElement().getDeclaredTypeCode());\n+        assertEquals(Object.class, fmd.getKey().getDeclaredType());\n+        assertNull(fmd.getKey().getDeclaredTypeMetaData());\n+        assertEquals(Object.class, fmd.getElement().getDeclaredType());\n+        assertTrue(fmd.getKey().isEmbedded());\n+        assertTrue(fmd.getElement().isEmbedded());\n+        fmd = _metaTest2.getField(\"mapField2\");\n+        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\n+        assertEquals(JavaTypes.STRING, fmd.getKey().getTypeCode());\n+        assertEquals(JavaTypes.INT_OBJ, fmd.getElement().getTypeCode());\n+        assertEquals(String.class, fmd.getKey().getType());\n+        assertEquals(Integer.class, fmd.getElement().getType());\n+        assertEquals(JavaTypes.MAP, fmd.getDeclaredTypeCode());\n+        assertEquals(JavaTypes.STRING, fmd.getKey().getDeclaredTypeCode());\n+        assertEquals(JavaTypes.INT_OBJ,\n+            fmd.getElement().getDeclaredTypeCode());\n+        assertEquals(String.class, fmd.getKey().getDeclaredType());\n+        assertEquals(Integer.class, fmd.getElement().getDeclaredType());\n+        assertTrue(fmd.getKey().isEmbedded());\n+        assertTrue(!fmd.getElement().isEmbedded());\n+    }\n+\n+    /**\n+     * Test the basic class-level meta data.\n+     */\n+    public void testBasicClass() {\n+        assertEquals(_metaTest1, _metaTest2.getPCSuperclassMetaData());\n+        assertTrue(!_metaTest2.getRequiresExtent());\n+    }\n+\n+    /**\n+     * Test application identity.\n+     */\n+    public void testApplicationIdentity() {\n+        assertEquals(ClassMetaData.ID_APPLICATION,\n+            _metaTest5.getIdentityType());\n+        assertEquals(MetaTest5.MetaTest5Id.class.getName(),\n+            _metaTest5.getObjectIdType().getName());\n+        assertEquals(ClassMetaData.ID_APPLICATION,\n+            _metaTest6.getIdentityType());\n+        assertEquals(MetaTest5.MetaTest5Id.class.getName(),\n+            _metaTest6.getObjectIdType().getName());\n+    }\n+\n+    /**\n+     * Test absolute field numbering.\n+     */\n+    public void testAbsoluteFieldNumbering() {\n+        assertEquals(0, _metaTest1.getField(\"doubleField\").getIndex());\n+        assertEquals(1, _metaTest1.getField(\"intArrayField\").getIndex());\n+        assertEquals(2, _metaTest1.getField(\"intField\").getIndex());\n+        assertEquals(3, _metaTest1.getField(\"intWrapperField\").getIndex());\n+        assertEquals(4, _metaTest1.getField(\"metaTest2ArrayField\").\n+            getIndex());\n+        assertEquals(5, _metaTest1.getField(\"metaTest2Field\").getIndex());\n+        assertEquals(6, _metaTest1.getField(\"stringField\").getIndex());\n+        assertEquals(7, _metaTest2.getField(\"collectionField1\").getIndex());\n+        assertEquals(8, _metaTest2.getField(\"collectionField2\").getIndex());\n+        assertEquals(9, _metaTest2.getField(\"mapField1\").getIndex());\n+        assertEquals(10, _metaTest2.getField(\"mapField2\").getIndex());\n+    }\n+\n+    /**\n+     * Test the methods to get fields.\n+     */\n+    public void testGetFields() {\n+        FieldMetaData[] fmds = _metaTest2.getFields();\n+        assertEquals(\"doubleField\", fmds[0].getName());\n+        assertEquals(\"intField\", fmds[2].getName());\n+        assertEquals(\"collectionField2\", fmds[8].getName());\n+    }\n+\n+    /**\n+     * Test that metadata on inner classes is available.\n+     */\n+    public void testStaticInnerClasses() {\n+        assertNotNull(_repos.getMetaData(MetaTest1.Inner.class, null, true));\n+    }\n+\n+    /**\n+     * Test extensions for external values and declared vs external types.\n+     */\n+    public void testExternalTypes() {\n+        // note that below, declared type code is promoted\n+        FieldMetaData fmd = _metaTest3.getField(\"pcField\");\n+        assertEquals(JavaTypes.PC_UNTYPED, fmd.getTypeCode());\n+        assertEquals(JavaTypes.PC_UNTYPED, fmd.getDeclaredTypeCode());\n+        assertEquals(PersistenceCapable.class, fmd.getType());\n+        assertEquals(Object.class, fmd.getDeclaredType());\n+        assertNull(fmd.getDeclaredTypeMetaData());\n+        assertNull(fmd.getTypeMetaData());\n+\n+        // note that below, declared type code is promoted\n+        fmd = _metaTest3.getField(\"metaField\");\n+        assertEquals(JavaTypes.PC, fmd.getTypeCode());\n+        assertEquals(JavaTypes.PC, fmd.getDeclaredTypeCode());\n+        assertEquals(MetaTest2.class, fmd.getType());\n+        assertEquals(Object.class, fmd.getDeclaredType());\n+        assertEquals(_metaTest2, fmd.getDeclaredTypeMetaData());\n+        assertEquals(_metaTest2, fmd.getTypeMetaData());\n+\n+        fmd = _metaTest3.getField(\"externalField\");\n+        assertTrue(fmd.isExternalized());\n+        assertEquals(JavaTypes.MAP, fmd.getTypeCode());\n+        assertEquals(JavaTypes.OBJECT, fmd.getDeclaredTypeCode());\n+        assertEquals(Map.class, fmd.getType());\n+        assertEquals(Object.class, fmd.getDeclaredType());\n+        assertEquals(JavaTypes.STRING, fmd.getKey().getTypeCode());\n+        assertEquals(JavaTypes.OBJECT, fmd.getKey().getDeclaredTypeCode());\n+        assertEquals(String.class, fmd.getKey().getType());\n+        assertEquals(Object.class, fmd.getKey().getDeclaredType());\n+        assertEquals(JavaTypes.PC, fmd.getElement().getTypeCode());\n+        assertEquals(JavaTypes.OBJECT,\n+            fmd.getElement().getDeclaredTypeCode());\n+        assertEquals(MetaTest2.class, fmd.getElement().getType());\n+        assertEquals(Object.class, fmd.getElement().getDeclaredType());\n+        assertEquals(_metaTest2, fmd.getElement().getTypeMetaData());\n+        assertNull(fmd.getElement().getDeclaredTypeMetaData());\n+    }\n+}"},{"sha":"2b14f0935623b8531ffb5e5499db3ebc1eeb18e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","status":"modified","additions":195,"deletions":195,"changes":390,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,195 +1,195 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-\r\n-import java.util.List;\r\n-import java.util.UUID;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.ExternalValues;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.ArgumentException;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-/**\r\n- * <p>Tests the {@link ExternalValuesFieldMapping}.</p>\r\n- *\r\n- * @author Abe White\r\n- * @author Pinaki Poddar (added binding query parameter tests) \r\n- */\r\n-public class TestExternalValues\r\n-    extends AbstractTestCase {\r\n-    \r\n-    public TestExternalValues(String test) {\r\n-        super(test, \"metacactusapp\");\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        deleteAll(ExternalValues.class);\r\n-    }\r\n-\r\n-    public void testInsert() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        ExternalValues pc = new ExternalValues();\r\n-        pc.setBooleanToShort(true);\r\n-        pc.setByteToDouble((byte) 4);\r\n-        pc.setIntToFloat(4);\r\n-        pc.setLongToChar(4);\r\n-        pc.setShortToString((short) 4);\r\n-        pc.setFloatToBoolean(4.5f);\r\n-        pc.setDoubleToByte(4.5);\r\n-        pc.setCharToInt('f');\r\n-        pc.setStringToLong(\"foo\");\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\r\n-\r\n-        assertTrue(pc.getBooleanToShort());\r\n-        assertEquals((byte) 4, pc.getByteToDouble());\r\n-        assertEquals(4, pc.getIntToFloat());\r\n-        assertEquals(4, pc.getLongToChar());\r\n-        assertEquals((short) 4, pc.getShortToString());\r\n-        assertTrue(4.5f == pc.getFloatToBoolean());\r\n-        assertTrue(4.5 == pc.getDoubleToByte());\r\n-        assertEquals('f', pc.getCharToInt());\r\n-        assertEquals(\"foo\", pc.getStringToLong());\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testComplexStrings() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        ExternalValues pc = new ExternalValues();\r\n-        pc.setShortToString((short) 3);\r\n-        pc.setStringToLong(\"long string\");\r\n-\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\r\n-        assertEquals(3, pc.getShortToString());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testAllNull() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        ExternalValues pc = new ExternalValues();\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\r\n-        endEm(pm);\r\n-    }\r\n-    \r\n-    public void testPositionalBindingQueryParameterEqualsDeclaredType() {\r\n-        UUID uuid = new UUID(1,4);\r\n-        createInstance(uuid);\r\n-        \r\n-        EntityManager em = currentEntityManager();\r\n-        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=?1\";\r\n-        List<ExternalValues> result = em.createQuery(jpql)\r\n-                                        .setParameter(1, uuid)\r\n-                                        .getResultList();\r\n-        assertFalse(result.isEmpty());\r\n-        for (ExternalValues x:result) {\r\n-            assertEquals(uuid, x.getUuid());\r\n-        }\r\n-    }\r\n-    \r\n-    public void testNamedBindingQueryParameterEqualsDeclaredType() {\r\n-        UUID uuid = new UUID(2,4);\r\n-        createInstance(uuid);\r\n-        \r\n-        EntityManager em = currentEntityManager();\r\n-        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=:uuid\";\r\n-        List<ExternalValues> result = em.createQuery(jpql)\r\n-                                        .setParameter(\"uuid\", uuid)\r\n-                                        .getResultList();\r\n-        assertFalse(result.isEmpty());\r\n-        for (ExternalValues pc:result) {\r\n-            assertEquals(uuid, pc.getUuid());\r\n-        }\r\n-    }\r\n-    \r\n-    public void testPositionalBindingQueryParameterNotEqualsExternalizedType() {\r\n-        UUID uuid = new UUID(1,4);\r\n-        createInstance(uuid);\r\n-        \r\n-        EntityManager em = currentEntityManager();\r\n-        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=?1\";\r\n-        Query query = em.createQuery(jpql)\r\n-                        .setParameter(1, uuid.toString());\r\n-                                        \r\n-        try {\r\n-            query.getResultList();\r\n-            fail(\"Expected ArgumentException\");\r\n-       } catch (ArgumentException ex) {\r\n-           // expected\r\n-       }\r\n-    }\r\n-\r\n-    public void testNamedBindingQueryParameterNotEqualsExternalizedType() {\r\n-        UUID uuid = new UUID(2,4);\r\n-        createInstance(uuid);\r\n-        \r\n-        EntityManager em = currentEntityManager();\r\n-        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=:uuid\";\r\n-        Query query = em.createQuery(jpql)\r\n-                        .setParameter(\"uuid\", uuid.toString());\r\n-        try {\r\n-             query.getResultList();\r\n-             fail(\"Expected ArgumentException\");\r\n-        } catch (ArgumentException ex) {\r\n-            // expected\r\n-        }\r\n-    }\r\n-    \r\n-    private void createInstance(UUID uuid) {\r\n-        EntityManager em = currentEntityManager();\r\n-        em.getTransaction().begin();\r\n-        ExternalValues pc = new ExternalValues();\r\n-        pc.setUuid(uuid);\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        em.clear();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.meta.common.apps.ExternalValues;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * <p>Tests the {@link ExternalValuesFieldMapping}.</p>\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar (added binding query parameter tests) \n+ */\n+public class TestExternalValues\n+    extends AbstractTestCase {\n+    \n+    public TestExternalValues(String test) {\n+        super(test, \"metacactusapp\");\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        deleteAll(ExternalValues.class);\n+    }\n+\n+    public void testInsert() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+\n+        ExternalValues pc = new ExternalValues();\n+        pc.setBooleanToShort(true);\n+        pc.setByteToDouble((byte) 4);\n+        pc.setIntToFloat(4);\n+        pc.setLongToChar(4);\n+        pc.setShortToString((short) 4);\n+        pc.setFloatToBoolean(4.5f);\n+        pc.setDoubleToByte(4.5);\n+        pc.setCharToInt('f');\n+        pc.setStringToLong(\"foo\");\n+        pm.persist(pc);\n+        Object oid = pm.getObjectId(pc);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\n+\n+        assertTrue(pc.getBooleanToShort());\n+        assertEquals((byte) 4, pc.getByteToDouble());\n+        assertEquals(4, pc.getIntToFloat());\n+        assertEquals(4, pc.getLongToChar());\n+        assertEquals((short) 4, pc.getShortToString());\n+        assertTrue(4.5f == pc.getFloatToBoolean());\n+        assertTrue(4.5 == pc.getDoubleToByte());\n+        assertEquals('f', pc.getCharToInt());\n+        assertEquals(\"foo\", pc.getStringToLong());\n+\n+        endEm(pm);\n+    }\n+\n+    public void testComplexStrings() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+\n+        ExternalValues pc = new ExternalValues();\n+        pc.setShortToString((short) 3);\n+        pc.setStringToLong(\"long string\");\n+\n+        pm.persist(pc);\n+        Object oid = pm.getObjectId(pc);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\n+        assertEquals(3, pc.getShortToString());\n+        endEm(pm);\n+    }\n+\n+    public void testAllNull() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+\n+        ExternalValues pc = new ExternalValues();\n+        pm.persist(pc);\n+        Object oid = pm.getObjectId(pc);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ExternalValues) pm.find(ExternalValues.class, oid);\n+        endEm(pm);\n+    }\n+    \n+    public void testPositionalBindingQueryParameterEqualsDeclaredType() {\n+        UUID uuid = new UUID(1,4);\n+        createInstance(uuid);\n+        \n+        EntityManager em = currentEntityManager();\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=?1\";\n+        List<ExternalValues> result = em.createQuery(jpql)\n+                                        .setParameter(1, uuid)\n+                                        .getResultList();\n+        assertFalse(result.isEmpty());\n+        for (ExternalValues x:result) {\n+            assertEquals(uuid, x.getUuid());\n+        }\n+    }\n+    \n+    public void testNamedBindingQueryParameterEqualsDeclaredType() {\n+        UUID uuid = new UUID(2,4);\n+        createInstance(uuid);\n+        \n+        EntityManager em = currentEntityManager();\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=:uuid\";\n+        List<ExternalValues> result = em.createQuery(jpql)\n+                                        .setParameter(\"uuid\", uuid)\n+                                        .getResultList();\n+        assertFalse(result.isEmpty());\n+        for (ExternalValues pc:result) {\n+            assertEquals(uuid, pc.getUuid());\n+        }\n+    }\n+    \n+    public void testPositionalBindingQueryParameterNotEqualsExternalizedType() {\n+        UUID uuid = new UUID(1,4);\n+        createInstance(uuid);\n+        \n+        EntityManager em = currentEntityManager();\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=?1\";\n+        Query query = em.createQuery(jpql)\n+                        .setParameter(1, uuid.toString());\n+                                        \n+        try {\n+            query.getResultList();\n+            fail(\"Expected ArgumentException\");\n+       } catch (ArgumentException ex) {\n+           // expected\n+       }\n+    }\n+\n+    public void testNamedBindingQueryParameterNotEqualsExternalizedType() {\n+        UUID uuid = new UUID(2,4);\n+        createInstance(uuid);\n+        \n+        EntityManager em = currentEntityManager();\n+        String jpql = \"SELECT p FROM ExternalValues p WHERE p.uuid=:uuid\";\n+        Query query = em.createQuery(jpql)\n+                        .setParameter(\"uuid\", uuid.toString());\n+        try {\n+             query.getResultList();\n+             fail(\"Expected ArgumentException\");\n+        } catch (ArgumentException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    private void createInstance(UUID uuid) {\n+        EntityManager em = currentEntityManager();\n+        em.getTransaction().begin();\n+        ExternalValues pc = new ExternalValues();\n+        pc.setUuid(uuid);\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        em.clear();\n+    }\n+}"},{"sha":"640eb30a72d1ede3db09a473f62089954314b53e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,70 +1,70 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC;\r\n-import org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-\r\n-public class TestFieldDeclarationOrder\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestFieldDeclarationOrder(String test) {\r\n-        super(test, \"metacactusapp\");\r\n-    }\r\n-\r\n-    public void testSubclass() {\r\n-        ClassMetaData meta = JPAFacadeHelper\r\n-            .getMetaData(getEmf(),\r\n-                FieldOrderPCSubclass.class);\r\n-        FieldMetaData[] fmds = meta.getFieldsInListingOrder();\r\n-\r\n-        assertEquals(11, fmds.length);\r\n-        assertEquals(\"firstField\", fmds[0].getName());\r\n-        assertEquals(\"secondField\", fmds[1].getName());\r\n-        assertEquals(\"thirdField\", fmds[2].getName());\r\n-        assertEquals(\"unmanagedField\", fmds[3].getName());\r\n-        assertEquals(\"intField\", fmds[4].getName());\r\n-        assertEquals(\"oneToOneField\", fmds[5].getName());\r\n-        assertEquals(\"sub1\", fmds[6].getName());\r\n-        assertEquals(\"sub2\", fmds[7].getName());\r\n-        assertEquals(\"sub3\", fmds[8].getName());\r\n-        assertEquals(\"unmanagedSubField\", fmds[9].getName());\r\n-        assertEquals(\"undeclaredSubField\", fmds[10].getName());\r\n-    }\r\n-\r\n-    public void testSuperclass() {\r\n-        ClassMetaData meta = JPAFacadeHelper\r\n-            .getMetaData(getEmf(),\r\n-                FieldOrderPC.class);\r\n-        FieldMetaData[] fmds = meta.getFieldsInListingOrder();\r\n-\r\n-        assertEquals(6, fmds.length);\r\n-        assertEquals(\"firstField\", fmds[0].getName());\r\n-        assertEquals(\"secondField\", fmds[1].getName());\r\n-        assertEquals(\"thirdField\", fmds[2].getName());\r\n-        assertEquals(\"unmanagedField\", fmds[3].getName());\r\n-        assertEquals(\"intField\", fmds[4].getName());\r\n-        assertEquals(\"oneToOneField\", fmds[5].getName());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+\n+import org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC;\n+import org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+\n+public class TestFieldDeclarationOrder\n+    extends AbstractTestCase {\n+\n+    public TestFieldDeclarationOrder(String test) {\n+        super(test, \"metacactusapp\");\n+    }\n+\n+    public void testSubclass() {\n+        ClassMetaData meta = JPAFacadeHelper\n+            .getMetaData(getEmf(),\n+                FieldOrderPCSubclass.class);\n+        FieldMetaData[] fmds = meta.getFieldsInListingOrder();\n+\n+        assertEquals(11, fmds.length);\n+        assertEquals(\"firstField\", fmds[0].getName());\n+        assertEquals(\"secondField\", fmds[1].getName());\n+        assertEquals(\"thirdField\", fmds[2].getName());\n+        assertEquals(\"unmanagedField\", fmds[3].getName());\n+        assertEquals(\"intField\", fmds[4].getName());\n+        assertEquals(\"oneToOneField\", fmds[5].getName());\n+        assertEquals(\"sub1\", fmds[6].getName());\n+        assertEquals(\"sub2\", fmds[7].getName());\n+        assertEquals(\"sub3\", fmds[8].getName());\n+        assertEquals(\"unmanagedSubField\", fmds[9].getName());\n+        assertEquals(\"undeclaredSubField\", fmds[10].getName());\n+    }\n+\n+    public void testSuperclass() {\n+        ClassMetaData meta = JPAFacadeHelper\n+            .getMetaData(getEmf(),\n+                FieldOrderPC.class);\n+        FieldMetaData[] fmds = meta.getFieldsInListingOrder();\n+\n+        assertEquals(6, fmds.length);\n+        assertEquals(\"firstField\", fmds[0].getName());\n+        assertEquals(\"secondField\", fmds[1].getName());\n+        assertEquals(\"thirdField\", fmds[2].getName());\n+        assertEquals(\"unmanagedField\", fmds[3].getName());\n+        assertEquals(\"intField\", fmds[4].getName());\n+        assertEquals(\"oneToOneField\", fmds[5].getName());\n+    }\n+}"},{"sha":"8d8f134c47a17f75aafa741bb1a7bcfcc9e546d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.meta.MetaDataRepository;\r\n-\r\n-/**\r\n- * <p>Tests that fields that should not be persistent actually aren't.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestNonPersistentFields\r\n-    extends AbstractTestCase {\r\n-\r\n-    private ClassMetaData _meta = null;\r\n-\r\n-    public TestNonPersistentFields(String test) {\r\n-        super(test, \"metacactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        MetaDataRepository repos = new OpenJPAConfigurationImpl().\r\n-            newMetaDataRepositoryInstance();\r\n-        _meta = repos.getMetaData(NonPersistentFieldsPC.class, null, true);\r\n-    }\r\n-\r\n-    public void testNonPersistentFields() {\r\n-        FieldMetaData[] fmds = _meta.getFields();\r\n-        assertEquals(5, fmds.length);\r\n-        assertEquals(\"persistentField\", fmds[0].getName());\r\n-        assertEquals(\"persistentInterfaceField\", fmds[1].getName());\r\n-        assertEquals(\"persistentObjectField\", fmds[2].getName());\r\n-        assertEquals(\"persistentUserInterfaceField\", fmds[3].getName());\r\n-        assertEquals(\"persistentUserObjectField\", fmds[4].getName());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+\n+import org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+\n+/**\n+ * <p>Tests that fields that should not be persistent actually aren't.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestNonPersistentFields\n+    extends AbstractTestCase {\n+\n+    private ClassMetaData _meta = null;\n+\n+    public TestNonPersistentFields(String test) {\n+        super(test, \"metacactusapp\");\n+    }\n+\n+    public void setUp() {\n+        MetaDataRepository repos = new OpenJPAConfigurationImpl().\n+            newMetaDataRepositoryInstance();\n+        _meta = repos.getMetaData(NonPersistentFieldsPC.class, null, true);\n+    }\n+\n+    public void testNonPersistentFields() {\n+        FieldMetaData[] fmds = _meta.getFields();\n+        assertEquals(5, fmds.length);\n+        assertEquals(\"persistentField\", fmds[0].getName());\n+        assertEquals(\"persistentInterfaceField\", fmds[1].getName());\n+        assertEquals(\"persistentObjectField\", fmds[2].getName());\n+        assertEquals(\"persistentUserInterfaceField\", fmds[3].getName());\n+        assertEquals(\"persistentUserObjectField\", fmds[4].getName());\n+    }\n+}"},{"sha":"66bb501349d1418779d97fd5a77c8e2444d278ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","status":"modified","additions":283,"deletions":283,"changes":566,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,283 +1,283 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.OrderByPC;\r\n-import org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel;\r\n-import org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.FetchPlan;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-/**\r\n- * <p>Test the <code>order-by</code> field extension.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestOrderBy\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestOrderBy(String test) {\r\n-        super(test, \"metacactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(OrderByPCRel.class);\r\n-        deleteAll(OrderByPC.class);\r\n-    }\r\n-\r\n-    public void testStringList() {\r\n-        stringListTest(false, false);\r\n-    }\r\n-\r\n-    public void testEagerParallelStringList() {\r\n-        stringListTest(true, true);\r\n-    }\r\n-\r\n-    public void testEagerJoinStringList() {\r\n-        stringListTest(true, false);\r\n-    }\r\n-\r\n-    private void stringListTest(boolean eager, boolean parallel) {\r\n-        String[] strs = new String[]{\r\n-            \"9\", \"0\", \"5\", \"1\", \"3\", \"7\", \"8\", \"2\", \"6\", \"4\",\r\n-        };\r\n-        OrderByPC pc = new OrderByPC();\r\n-        pc.setId(1L);\r\n-        pc.getStringListAsc().addAll(Arrays.asList(strs));\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        if (eager)\r\n-            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\r\n-                \"stringListAsc\");\r\n-        if (parallel) {\r\n-\r\n-            OpenJPAQuery q = pm.createQuery(\r\n-                \"select a FROM \" + OrderByPC.class.getSimpleName());\r\n-            List res = (List) q.getResultList();\r\n-            assertEquals(1, res.size());\r\n-            pc = (OrderByPC) res.get(0);\r\n-        } else\r\n-            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n-        List stringList = pc.getStringListAsc();\r\n-        for (int i = 0; i < 10; i++)\r\n-            assertEquals(String.valueOf(i), stringList.get(i));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testIntArray() {\r\n-        int[] ints = new int[]{ 9, 0, 5, 1, 3, 7, 8, 2, 6, 4, };\r\n-        OrderByPC pc = new OrderByPC();\r\n-        pc.setId(1L);\r\n-        pc.setIntArrayDesc(ints);\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n-        int[] intArray = pc.getIntArrayDesc();\r\n-        for (int i = 0; i < 10; i++)\r\n-            assertEquals(9 - i, intArray[i]);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testOrderByPK() {\r\n-        orderByPKTest(false, false, false);\r\n-    }\r\n-\r\n-    public void testEagerJoinOrderByPK() {\r\n-        orderByPKTest(true, false, false);\r\n-    }\r\n-\r\n-    public void testEagerParallelOrderByPK() {\r\n-        orderByPKTest(true, true, false);\r\n-    }\r\n-\r\n-    public void testOneToManyOrderByPK() {\r\n-        orderByPKTest(false, false, true);\r\n-    }\r\n-\r\n-    public void testEagerJoinOneToManyOrderByPK() {\r\n-        orderByPKTest(true, false, true);\r\n-    }\r\n-\r\n-    public void testEagerParallelOneToManyOrderByPK() {\r\n-        orderByPKTest(true, true, true);\r\n-    }\r\n-\r\n-    private void orderByPKTest(boolean eager, boolean parallel,\r\n-        boolean oneToMany) {\r\n-        long[] ids = new long[]{ 9, 0, 5, 1, 3, 7, 8, 2, 6, 4, };\r\n-        OrderByPC pc = new OrderByPC();\r\n-        pc.setId(1L);\r\n-        OrderByPC pc2 = new OrderByPC();\r\n-        pc2.setId(2L);\r\n-        for (int i = 0; i < ids.length; i++) {\r\n-            OrderByPCRel rel = (i % 2 == 0) ? new OrderByPCRel()\r\n-                : new OrderByPCRelSub();\r\n-            rel.setId(ids[i]);\r\n-            if (oneToMany) {\r\n-                pc.getOneToManyAsc().add(rel);\r\n-                rel.setToOne(pc);\r\n-            } else\r\n-                pc.getOrderByPKAsc().add(rel);\r\n-\r\n-            if (parallel)\r\n-                pc2.getOrderByPKAsc().add(rel);\r\n-        }\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        if (eager)\r\n-            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\r\n-                \"orderByPKAsc\");\r\n-        if (parallel) {\r\n-\r\n-            OpenJPAQuery q = pm.createQuery(\"select a FROM \" +\r\n-                OrderByPC.class.getSimpleName() + \" select order by id asc\");\r\n-            pc = (OrderByPC) ((List) q.getResultList()).get(0);\r\n-            q.closeAll();\r\n-        } else\r\n-            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n-\r\n-        List orderByPK = (oneToMany) ? pc.getOneToManyAsc()\r\n-            : pc.getOrderByPKAsc();\r\n-        for (int i = 0; i < 10; i++)\r\n-            assertEquals(i, ((OrderByPCRel) orderByPK.get(i)).getId());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testOrderByRelatedField() {\r\n-        String[] strs = new String[]{\r\n-            \"9\", \"0\", \"5\", \"1\", \"3\", \"7\", \"8\", \"2\", \"6\", \"4\",\r\n-        };\r\n-        OrderByPC pc = new OrderByPC();\r\n-        pc.setId(1L);\r\n-        for (int i = 0; i < strs.length; i++) {\r\n-            OrderByPCRel rel = (i % 2 == 0) ? new OrderByPCRel()\r\n-                : new OrderByPCRelSub();\r\n-            rel.setId(i);\r\n-            rel.setString(strs[i]);\r\n-            pc.getOrderByStringDesc().add(rel);\r\n-        }\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n-        List orderByRelField = pc.getOrderByStringDesc();\r\n-        for (int i = 0; i < 10; i++)\r\n-            assertEquals(String.valueOf(9 - i), ((OrderByPCRel)\r\n-                orderByRelField.get(i)).getString());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testOrderByPKAndRelatedField() {\r\n-        orderByPKAndRelatedFieldTest(false, false);\r\n-    }\r\n-\r\n-    public void testEagerJoinOrderByPKAndRelatedField() {\r\n-        orderByPKAndRelatedFieldTest(true, false);\r\n-    }\r\n-\r\n-    public void testEagerParallelOrderByPKAndRelatedField() {\r\n-        orderByPKAndRelatedFieldTest(true, true);\r\n-    }\r\n-\r\n-    private void orderByPKAndRelatedFieldTest(boolean eager, boolean parallel) {\r\n-        OrderByPC pc = new OrderByPC();\r\n-        pc.setId(1L);\r\n-        OrderByPC pc2 = new OrderByPC();\r\n-        pc.setId(2L);\r\n-\r\n-        OrderByPCRel rel1 = new OrderByPCRel();\r\n-        rel1.setId(1L);\r\n-        rel1.setString(\"1\");\r\n-        OrderByPCRel rel2 = new OrderByPCRelSub();\r\n-        rel2.setId(2L);\r\n-        rel2.setString(\"1\");\r\n-        OrderByPCRel rel3 = new OrderByPCRel();\r\n-        rel3.setId(3L);\r\n-        rel3.setString(\"2\");\r\n-        OrderByPCRel rel4 = new OrderByPCRelSub();\r\n-        rel4.setId(4L);\r\n-        rel4.setString(\"2\");\r\n-        pc.getOrderByStringAndPKDesc().addAll(Arrays.asList\r\n-            (new Object[]{ rel1, rel2, rel4, rel3, }));\r\n-        if (parallel)\r\n-            pc2.getOrderByStringAndPKDesc().addAll(Arrays.asList\r\n-                (new Object[]{ rel1, rel2, rel4, rel3, }));\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        if (eager)\r\n-            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\r\n-                \"orderByStringAndPKDesc\");\r\n-        if (parallel) {\r\n-            OpenJPAQuery q = pm.createQuery(\"select a FROM \" +\r\n-                OrderByPC.class.getSimpleName() + \" select order by id asc\");\r\n-            pc = (OrderByPC) ((List) q.getResultList()).get(0);\r\n-            q.closeAll();\r\n-        } else\r\n-            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\r\n-        List multiOrder = pc.getOrderByStringAndPKDesc();\r\n-        for (int i = 0; i < 4; i++)\r\n-            assertEquals(4 - i, ((OrderByPCRel) multiOrder.get(i)).getId());\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+import org.apache.openjpa.persistence.meta.common.apps.OrderByPC;\n+import org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel;\n+import org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+/**\n+ * <p>Test the <code>order-by</code> field extension.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestOrderBy\n+    extends AbstractTestCase {\n+\n+    public TestOrderBy(String test) {\n+        super(test, \"metacactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(OrderByPCRel.class);\n+        deleteAll(OrderByPC.class);\n+    }\n+\n+    public void testStringList() {\n+        stringListTest(false, false);\n+    }\n+\n+    public void testEagerParallelStringList() {\n+        stringListTest(true, true);\n+    }\n+\n+    public void testEagerJoinStringList() {\n+        stringListTest(true, false);\n+    }\n+\n+    private void stringListTest(boolean eager, boolean parallel) {\n+        String[] strs = new String[]{\n+            \"9\", \"0\", \"5\", \"1\", \"3\", \"7\", \"8\", \"2\", \"6\", \"4\",\n+        };\n+        OrderByPC pc = new OrderByPC();\n+        pc.setId(1L);\n+        pc.getStringListAsc().addAll(Arrays.asList(strs));\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        if (eager)\n+            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\n+                \"stringListAsc\");\n+        if (parallel) {\n+\n+            OpenJPAQuery q = pm.createQuery(\n+                \"select a FROM \" + OrderByPC.class.getSimpleName());\n+            List res = (List) q.getResultList();\n+            assertEquals(1, res.size());\n+            pc = (OrderByPC) res.get(0);\n+        } else\n+            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\n+        List stringList = pc.getStringListAsc();\n+        for (int i = 0; i < 10; i++)\n+            assertEquals(String.valueOf(i), stringList.get(i));\n+        endEm(pm);\n+    }\n+\n+    public void testIntArray() {\n+        int[] ints = new int[]{ 9, 0, 5, 1, 3, 7, 8, 2, 6, 4, };\n+        OrderByPC pc = new OrderByPC();\n+        pc.setId(1L);\n+        pc.setIntArrayDesc(ints);\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (OrderByPC) pm.find(OrderByPC.class, oid);\n+        int[] intArray = pc.getIntArrayDesc();\n+        for (int i = 0; i < 10; i++)\n+            assertEquals(9 - i, intArray[i]);\n+        endEm(pm);\n+    }\n+\n+    public void testOrderByPK() {\n+        orderByPKTest(false, false, false);\n+    }\n+\n+    public void testEagerJoinOrderByPK() {\n+        orderByPKTest(true, false, false);\n+    }\n+\n+    public void testEagerParallelOrderByPK() {\n+        orderByPKTest(true, true, false);\n+    }\n+\n+    public void testOneToManyOrderByPK() {\n+        orderByPKTest(false, false, true);\n+    }\n+\n+    public void testEagerJoinOneToManyOrderByPK() {\n+        orderByPKTest(true, false, true);\n+    }\n+\n+    public void testEagerParallelOneToManyOrderByPK() {\n+        orderByPKTest(true, true, true);\n+    }\n+\n+    private void orderByPKTest(boolean eager, boolean parallel,\n+        boolean oneToMany) {\n+        long[] ids = new long[]{ 9, 0, 5, 1, 3, 7, 8, 2, 6, 4, };\n+        OrderByPC pc = new OrderByPC();\n+        pc.setId(1L);\n+        OrderByPC pc2 = new OrderByPC();\n+        pc2.setId(2L);\n+        for (int i = 0; i < ids.length; i++) {\n+            OrderByPCRel rel = (i % 2 == 0) ? new OrderByPCRel()\n+                : new OrderByPCRelSub();\n+            rel.setId(ids[i]);\n+            if (oneToMany) {\n+                pc.getOneToManyAsc().add(rel);\n+                rel.setToOne(pc);\n+            } else\n+                pc.getOrderByPKAsc().add(rel);\n+\n+            if (parallel)\n+                pc2.getOrderByPKAsc().add(rel);\n+        }\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        if (eager)\n+            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\n+                \"orderByPKAsc\");\n+        if (parallel) {\n+\n+            OpenJPAQuery q = pm.createQuery(\"select a FROM \" +\n+                OrderByPC.class.getSimpleName() + \" select order by id asc\");\n+            pc = (OrderByPC) ((List) q.getResultList()).get(0);\n+            q.closeAll();\n+        } else\n+            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\n+\n+        List orderByPK = (oneToMany) ? pc.getOneToManyAsc()\n+            : pc.getOrderByPKAsc();\n+        for (int i = 0; i < 10; i++)\n+            assertEquals(i, ((OrderByPCRel) orderByPK.get(i)).getId());\n+        endEm(pm);\n+    }\n+\n+    public void testOrderByRelatedField() {\n+        String[] strs = new String[]{\n+            \"9\", \"0\", \"5\", \"1\", \"3\", \"7\", \"8\", \"2\", \"6\", \"4\",\n+        };\n+        OrderByPC pc = new OrderByPC();\n+        pc.setId(1L);\n+        for (int i = 0; i < strs.length; i++) {\n+            OrderByPCRel rel = (i % 2 == 0) ? new OrderByPCRel()\n+                : new OrderByPCRelSub();\n+            rel.setId(i);\n+            rel.setString(strs[i]);\n+            pc.getOrderByStringDesc().add(rel);\n+        }\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (OrderByPC) pm.find(OrderByPC.class, oid);\n+        List orderByRelField = pc.getOrderByStringDesc();\n+        for (int i = 0; i < 10; i++)\n+            assertEquals(String.valueOf(9 - i), ((OrderByPCRel)\n+                orderByRelField.get(i)).getString());\n+        endEm(pm);\n+    }\n+\n+    public void testOrderByPKAndRelatedField() {\n+        orderByPKAndRelatedFieldTest(false, false);\n+    }\n+\n+    public void testEagerJoinOrderByPKAndRelatedField() {\n+        orderByPKAndRelatedFieldTest(true, false);\n+    }\n+\n+    public void testEagerParallelOrderByPKAndRelatedField() {\n+        orderByPKAndRelatedFieldTest(true, true);\n+    }\n+\n+    private void orderByPKAndRelatedFieldTest(boolean eager, boolean parallel) {\n+        OrderByPC pc = new OrderByPC();\n+        pc.setId(1L);\n+        OrderByPC pc2 = new OrderByPC();\n+        pc.setId(2L);\n+\n+        OrderByPCRel rel1 = new OrderByPCRel();\n+        rel1.setId(1L);\n+        rel1.setString(\"1\");\n+        OrderByPCRel rel2 = new OrderByPCRelSub();\n+        rel2.setId(2L);\n+        rel2.setString(\"1\");\n+        OrderByPCRel rel3 = new OrderByPCRel();\n+        rel3.setId(3L);\n+        rel3.setString(\"2\");\n+        OrderByPCRel rel4 = new OrderByPCRelSub();\n+        rel4.setId(4L);\n+        rel4.setString(\"2\");\n+        pc.getOrderByStringAndPKDesc().addAll(Arrays.asList\n+            (new Object[]{ rel1, rel2, rel4, rel3, }));\n+        if (parallel)\n+            pc2.getOrderByStringAndPKDesc().addAll(Arrays.asList\n+                (new Object[]{ rel1, rel2, rel4, rel3, }));\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        if (eager)\n+            ((FetchPlan) pm.getFetchPlan()).addField(OrderByPC.class,\n+                \"orderByStringAndPKDesc\");\n+        if (parallel) {\n+            OpenJPAQuery q = pm.createQuery(\"select a FROM \" +\n+                OrderByPC.class.getSimpleName() + \" select order by id asc\");\n+            pc = (OrderByPC) ((List) q.getResultList()).get(0);\n+            q.closeAll();\n+        } else\n+            pc = (OrderByPC) pm.find(OrderByPC.class, oid);\n+        List multiOrder = pc.getOrderByStringAndPKDesc();\n+        for (int i = 0; i < 4; i++)\n+            assertEquals(4 - i, ((OrderByPCRel) multiOrder.get(i)).getId());\n+        endEm(pm);\n+    }\n+}"},{"sha":"9d83833e23621716f06b6f139b275efd648bf291","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,111 +1,111 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3;\r\n-import org.apache.openjpa.persistence.common.utils.*;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n-\r\n-public class TestPersistentClasses\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestPersistentClasses(String test) {\r\n-        super(test, \"metacactusapp\");\r\n-    }\r\n-\r\n-    private void assertClass(Class cls, OpenJPAConfiguration conf,\r\n-        boolean shouldExist) {\r\n-        assertClass(cls.getName(), conf, shouldExist);\r\n-    }\r\n-\r\n-    private void assertClass(String clsName, OpenJPAConfiguration conf,\r\n-        boolean shouldExist) {\r\n-\r\n-        Collection names = conf.getMetaDataRepositoryInstance().\r\n-            getPersistentTypeNames(false, null);\r\n-\r\n-        if (shouldExist)\r\n-            assertTrue(\"expected element \" + clsName + \" was not found in \"\r\n-                + names, names.contains(clsName));\r\n-        else\r\n-            assertTrue(\"unexpected element \" + clsName + \" was found in \"\r\n-                + names, !names.contains(clsName));\r\n-    }\r\n-\r\n-    public void testNoneConfigured() {\r\n-\r\n-        Map map = new HashMap();\r\n-        map.put(\"openjpa.MetaDataFactory\", \"jpa\");\r\n-        OpenJPAEntityManagerFactory pmf = getEmf(map);\r\n-\r\n-        assertNull(((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration()\r\n-            .getMetaDataRepositoryInstance().\r\n-\r\n-            getPersistentTypeNames(false, null));\r\n-\r\n-        pmf.close();\r\n-    }\r\n-\r\n-    public void testJPAClasspathScanner() {\r\n-        Map map = new HashMap();\r\n-        map.put(\"openjpa.MetaDataFactory\", \"jpa(ClasspathScan=src;jdk1.5-test)\");\r\n-        OpenJPAEntityManagerFactory pmf = getEmf(map);\r\n-\r\n-        assertClass(RuntimeTest1.class,\r\n-            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\r\n-\r\n-        assertClass(RuntimeTest2.class,\r\n-            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\r\n-\r\n-        assertClass(\"openjpa.meta.GenericFields\",\r\n-            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\r\n-\r\n-        pmf.close();\r\n-    }\r\n-\r\n-    public void testTypes() {\r\n-\r\n-        Map map = new HashMap();\r\n-\r\n-        map.put(\"openjpa.MetaDataFactory\",\r\n-            \"jpa(Types=org.apache.openjpa.persistence.kernel.RuntimeTest1;\" +\r\n-                \"org.apache.openjpa.persistence.kernel.RuntimeTest2)\");\r\n-\r\n-        OpenJPAEntityManagerFactory pmf = getEmf(map);\r\n-        assertClass(RuntimeTest1.class,\r\n-            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\r\n-\r\n-        assertClass(RuntimeTest2.class,\r\n-            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\r\n-\r\n-        assertClass(RuntimeTest3.class,\r\n-            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\r\n-\r\n-        pmf.close();\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3;\n+import org.apache.openjpa.persistence.common.utils.*;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestPersistentClasses\n+    extends AbstractTestCase {\n+\n+    public TestPersistentClasses(String test) {\n+        super(test, \"metacactusapp\");\n+    }\n+\n+    private void assertClass(Class cls, OpenJPAConfiguration conf,\n+        boolean shouldExist) {\n+        assertClass(cls.getName(), conf, shouldExist);\n+    }\n+\n+    private void assertClass(String clsName, OpenJPAConfiguration conf,\n+        boolean shouldExist) {\n+\n+        Collection names = conf.getMetaDataRepositoryInstance().\n+            getPersistentTypeNames(false, null);\n+\n+        if (shouldExist)\n+            assertTrue(\"expected element \" + clsName + \" was not found in \"\n+                + names, names.contains(clsName));\n+        else\n+            assertTrue(\"unexpected element \" + clsName + \" was found in \"\n+                + names, !names.contains(clsName));\n+    }\n+\n+    public void testNoneConfigured() {\n+\n+        Map map = new HashMap();\n+        map.put(\"openjpa.MetaDataFactory\", \"jpa\");\n+        OpenJPAEntityManagerFactory pmf = getEmf(map);\n+\n+        assertNull(((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration()\n+            .getMetaDataRepositoryInstance().\n+\n+            getPersistentTypeNames(false, null));\n+\n+        pmf.close();\n+    }\n+\n+    public void testJPAClasspathScanner() {\n+        Map map = new HashMap();\n+        map.put(\"openjpa.MetaDataFactory\", \"jpa(ClasspathScan=src;jdk1.5-test)\");\n+        OpenJPAEntityManagerFactory pmf = getEmf(map);\n+\n+        assertClass(RuntimeTest1.class,\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\n+\n+        assertClass(RuntimeTest2.class,\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\n+\n+        assertClass(\"openjpa.meta.GenericFields\",\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\n+\n+        pmf.close();\n+    }\n+\n+    public void testTypes() {\n+\n+        Map map = new HashMap();\n+\n+        map.put(\"openjpa.MetaDataFactory\",\n+            \"jpa(Types=org.apache.openjpa.persistence.kernel.RuntimeTest1;\" +\n+                \"org.apache.openjpa.persistence.kernel.RuntimeTest2)\");\n+\n+        OpenJPAEntityManagerFactory pmf = getEmf(map);\n+        assertClass(RuntimeTest1.class,\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\n+\n+        assertClass(RuntimeTest2.class,\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), true);\n+\n+        assertClass(RuntimeTest3.class,\n+            ((OpenJPAEntityManagerFactorySPI) pmf).getConfiguration(), false);\n+\n+        pmf.close();\n+    }\n+}\n+"},{"sha":"ed81e63208d0610696bf6abb9d92a0a0bfe8fa80","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","status":"modified","additions":172,"deletions":172,"changes":344,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,172 +1,172 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned;\r\n-import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2;\r\n-import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestSequenceAssigned\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestSequenceAssigned(String testName) {\r\n-        super(testName, \"metacactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(SequenceAssigned.class);\r\n-        deleteAll(SequenceAssigned3.class);\r\n-    }\r\n-\r\n-    public void testGetObjectId() {\r\n-        SequenceAssigned pc = new SequenceAssigned();\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        SequenceAssigned.Id id = (SequenceAssigned.Id)\r\n-            pm.getObjectId(pc);\r\n-        assertTrue(0 != id.pk);\r\n-        assertTrue(0 != pc.getPK());\r\n-        assertEquals(pc.getPK(), id.pk);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testGetValue() {\r\n-        SequenceAssigned pc = new SequenceAssigned();\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        assertEquals(0, pc.getPK());\r\n-        pm.persist(pc);\r\n-        assertTrue(0 != pc.getPK());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testPrimitive() {\r\n-        SequenceAssigned pc = new SequenceAssigned();\r\n-        SequenceAssigned pc2 = new SequenceAssigned();\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        pm.flush();\r\n-        assertTrue(0 != pc.getPK());\r\n-        assertTrue(0 != pc2.getPK());\r\n-        assertTrue(pc.getPK() != pc2.getPK());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testManualAssign() {\r\n-        SequenceAssigned pc = new SequenceAssigned();\r\n-        SequenceAssigned3 pc2 = new SequenceAssigned3();\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pc.setPK(-100);\r\n-        pc2.setPK(new Long(-100));\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        pm.flush();\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        Object oid2 = pm.getObjectId(pc2);\r\n-        endEm(pm);\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (SequenceAssigned) pm.find(SequenceAssigned.class, oid);\r\n-        pc2 = (SequenceAssigned3) pm.find(SequenceAssigned3.class, oid2);\r\n-        assertEquals(-100, pc.getPK());\r\n-        assertEquals(new Long(-100), pc2.getPK());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testInheritance() {\r\n-        SequenceAssigned2 pc = new SequenceAssigned2();\r\n-        SequenceAssigned2 pc2 = new SequenceAssigned2();\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        pm.flush();\r\n-        assertTrue(0 != pc.getPK());\r\n-        assertTrue(0 != pc2.getPK());\r\n-        assertTrue(pc.getPK() != pc2.getPK());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testWrapper() {\r\n-        SequenceAssigned3 pc = new SequenceAssigned3();\r\n-        SequenceAssigned3 pc2 = new SequenceAssigned3();\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        pm.flush();\r\n-        assertNotNull(pc.getPK());\r\n-        assertNotNull(pc2.getPK());\r\n-        assertTrue(0 != pc.getPK().longValue());\r\n-        assertTrue(0 != pc2.getPK().longValue());\r\n-        assertNotEquals(pc.getPK(), pc2.getPK());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testGetObjectById() {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        SequenceAssigned pc = new SequenceAssigned();\r\n-        pm.persist(pc);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        assertTrue(0 != ((SequenceAssigned.Id) oid).pk);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pm.find(SequenceAssigned.class, oid);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testReachability() {\r\n-        SequenceAssigned pc = new SequenceAssigned();\r\n-        SequenceAssigned pc2 = new SequenceAssigned();\r\n-        pc.setOther(pc2);\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        SequenceAssigned.Id id = (SequenceAssigned.Id)\r\n-            pm.getObjectId(pc2);\r\n-        assertTrue(0 != id.pk);\r\n-        assertTrue(0 != pc2.getPK());\r\n-        assertEquals(pc2.getPK(), id.pk);\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+\n+import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned;\n+import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2;\n+import org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestSequenceAssigned\n+    extends AbstractTestCase {\n+\n+    public TestSequenceAssigned(String testName) {\n+        super(testName, \"metacactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(SequenceAssigned.class);\n+        deleteAll(SequenceAssigned3.class);\n+    }\n+\n+    public void testGetObjectId() {\n+        SequenceAssigned pc = new SequenceAssigned();\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        SequenceAssigned.Id id = (SequenceAssigned.Id)\n+            pm.getObjectId(pc);\n+        assertTrue(0 != id.pk);\n+        assertTrue(0 != pc.getPK());\n+        assertEquals(pc.getPK(), id.pk);\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testGetValue() {\n+        SequenceAssigned pc = new SequenceAssigned();\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        assertEquals(0, pc.getPK());\n+        pm.persist(pc);\n+        assertTrue(0 != pc.getPK());\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testPrimitive() {\n+        SequenceAssigned pc = new SequenceAssigned();\n+        SequenceAssigned pc2 = new SequenceAssigned();\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        pm.flush();\n+        assertTrue(0 != pc.getPK());\n+        assertTrue(0 != pc2.getPK());\n+        assertTrue(pc.getPK() != pc2.getPK());\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testManualAssign() {\n+        SequenceAssigned pc = new SequenceAssigned();\n+        SequenceAssigned3 pc2 = new SequenceAssigned3();\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pc.setPK(-100);\n+        pc2.setPK(new Long(-100));\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        pm.flush();\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        Object oid2 = pm.getObjectId(pc2);\n+        endEm(pm);\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (SequenceAssigned) pm.find(SequenceAssigned.class, oid);\n+        pc2 = (SequenceAssigned3) pm.find(SequenceAssigned3.class, oid2);\n+        assertEquals(-100, pc.getPK());\n+        assertEquals(new Long(-100), pc2.getPK());\n+        endEm(pm);\n+    }\n+\n+    public void testInheritance() {\n+        SequenceAssigned2 pc = new SequenceAssigned2();\n+        SequenceAssigned2 pc2 = new SequenceAssigned2();\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        pm.flush();\n+        assertTrue(0 != pc.getPK());\n+        assertTrue(0 != pc2.getPK());\n+        assertTrue(pc.getPK() != pc2.getPK());\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testWrapper() {\n+        SequenceAssigned3 pc = new SequenceAssigned3();\n+        SequenceAssigned3 pc2 = new SequenceAssigned3();\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        pm.flush();\n+        assertNotNull(pc.getPK());\n+        assertNotNull(pc2.getPK());\n+        assertTrue(0 != pc.getPK().longValue());\n+        assertTrue(0 != pc2.getPK().longValue());\n+        assertNotEquals(pc.getPK(), pc2.getPK());\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testGetObjectById() {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        SequenceAssigned pc = new SequenceAssigned();\n+        pm.persist(pc);\n+        Object oid = pm.getObjectId(pc);\n+        assertTrue(0 != ((SequenceAssigned.Id) oid).pk);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pm.find(SequenceAssigned.class, oid);\n+        endEm(pm);\n+    }\n+\n+    public void testReachability() {\n+        SequenceAssigned pc = new SequenceAssigned();\n+        SequenceAssigned pc2 = new SequenceAssigned();\n+        pc.setOther(pc2);\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        endTx(pm);\n+        SequenceAssigned.Id id = (SequenceAssigned.Id)\n+            pm.getObjectId(pc2);\n+        assertTrue(0 != id.pk);\n+        assertTrue(0 != pc2.getPK());\n+        assertEquals(pc2.getPK(), id.pk);\n+        endEm(pm);\n+    }\n+}"},{"sha":"dce945df09a057f0648a6f95a94262bf8983f1f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","status":"modified","additions":404,"deletions":404,"changes":808,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,404 +1,404 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.util.OpenJPAException;\r\n-\r\n-/**\r\n- * <p>Test value and update strategies.  Also tests version fields, which\r\n- * are represented in JDO as a value strategy.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestValueStrategies\r\n-    extends AbstractTestCase {\r\n-\r\n-    public TestValueStrategies(String test) {\r\n-        super(test, \"metacactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(ValueStrategyPC.class);\r\n-    }\r\n-\r\n-    public void testIgnoreUpdate() {\r\n-        ValueStrategyPC pc = new ValueStrategyPC();\r\n-        pc.setName(\"pc\");\r\n-        pc.setIgnoreUpdate(10);\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        assertEquals(10, pc.getIgnoreUpdate());\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        //pm = getPM(false, false);\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        assertNotNull(pc);\r\n-        assertEquals(10, pc.getIgnoreUpdate());\r\n-        startTx(pm);\r\n-        pc.setIgnoreUpdate(100);\r\n-        assertFalse(pm.isDirty(pc));\r\n-        pm.transactional(pc, false);\r\n-        endTx(pm);\r\n-        assertEquals(10, pc.getIgnoreUpdate());\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        assertNotNull(pc);\r\n-        assertEquals(10, pc.getIgnoreUpdate());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testRestrictUpdate() {\r\n-        ValueStrategyPC pc = new ValueStrategyPC();\r\n-        pc.setName(\"pc\");\r\n-        pc.setRestrictUpdate(10);\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        assertEquals(10, pc.getRestrictUpdate());\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        //pm = getPM(false, false);\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        assertNotNull(pc);\r\n-        assertEquals(10, pc.getRestrictUpdate());\r\n-        startTx(pm);\r\n-        try {\r\n-            pc.setRestrictUpdate(100);\r\n-            fail(\"Allowed update of restricted field.\");\r\n-        } catch (RuntimeException re) {\r\n-        }\r\n-        endTx(pm);\r\n-        assertEquals(10, pc.getRestrictUpdate());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testUUID() {\r\n-        ValueStrategyPC pc = new ValueStrategyPC();\r\n-        ValueStrategyPC pc2 = new ValueStrategyPC();\r\n-        pc.setName(\"pc\");\r\n-        pc2.setName(\"pc2\");\r\n-        assertNull(pc.getUUID());\r\n-        assertNull(pc2.getUUID());\r\n-        assertNull(pc.getUUIDHex());\r\n-        assertNull(pc2.getUUIDHex());\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        pm.setOptimistic(true);\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        String str = pc.getUUID();\r\n-        String hex = pc.getUUIDHex();\r\n-        assertTrue(!pm.isStoreActive());    // no flush needed\r\n-        endTx(pm);\r\n-        String str2 = pc2.getUUID();\r\n-        String hex2 = pc2.getUUIDHex();\r\n-        Object oid = pm.getObjectId(pc);\r\n-        Object oid2 = pm.getObjectId(pc2);\r\n-        endEm(pm);\r\n-\r\n-        assertNotNull(str);\r\n-        assertNotNull(str2);\r\n-        assertTrue(!str.equals(str2));\r\n-        assertNotNull(hex);\r\n-        assertNotNull(hex2);\r\n-        assertTrue(!hex.equals(hex2));\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n-        assertEquals(str, pc.getUUID());\r\n-        assertEquals(str2, pc2.getUUID());\r\n-        assertEquals(hex, pc.getUUIDHex());\r\n-        assertEquals(hex2, pc2.getUUIDHex());\r\n-        startTx(pm);\r\n-        pc.setUUIDHex(\"foo\");\r\n-        pc2.setUUIDHex(\"bar\");\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n-        assertEquals(\"foo\", pc.getUUIDHex());\r\n-        assertEquals(\"bar\", pc2.getUUIDHex());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testSequence() {\r\n-        ValueStrategyPC pc = new ValueStrategyPC();\r\n-        ValueStrategyPC pc2 = new ValueStrategyPC();\r\n-        pc.setName(\"pc\");\r\n-        pc2.setName(\"pc2\");\r\n-        assertEquals(0, pc.getSequence());\r\n-        assertEquals(0, pc2.getSequence());\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        pm.setOptimistic(true);\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        int seq = pc.getSequence();\r\n-        assertTrue(!pm.isStoreActive());    // no flush needed\r\n-        endTx(pm);\r\n-        int seq2 = pc2.getSequence();\r\n-        Object oid = pm.getObjectId(pc);\r\n-        Object oid2 = pm.getObjectId(pc2);\r\n-        endEm(pm);\r\n-\r\n-        assertTrue(seq > 0);\r\n-        assertTrue(seq2 > 0);\r\n-        assertTrue(seq != seq2);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n-        assertEquals(seq, pc.getSequence());\r\n-        assertEquals(seq2, pc2.getSequence());\r\n-        startTx(pm);\r\n-        pc.setSequence(99);\r\n-        pc2.setSequence(100);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\r\n-        assertEquals(99, pc.getSequence());\r\n-        assertEquals(100, pc2.getSequence());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testVersion() {\r\n-        versionTest(getEmf());\r\n-    }\r\n-\r\n-    public void testVersionDataCache() {\r\n-\r\n-        Map map = new HashMap();\r\n-        map.put(\"openjpa.DataCache\", \"true\");\r\n-        map.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\r\n-        versionTest(getEmf(map));\r\n-    }\r\n-\r\n-    private void versionTest(EntityManagerFactory pmf) {\r\n-        ValueStrategyPC pc = new ValueStrategyPC();\r\n-        pc.setName(\"pc\");\r\n-\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)\r\n-            pmf.createEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        ClassMetaData meta = getConfiguration()\r\n-            .getMetaDataRepositoryInstance().\r\n-            getMetaData(pc.getClass(), null, false);\r\n-        assertNotNull(meta.getVersionField());\r\n-        assertEquals(\"version\", meta.getVersionField().getName());\r\n-        assertEquals(0, pc.getVersion());\r\n-        endTx(pm);\r\n-        assertEquals(1, pc.getVersion());\r\n-        Object oid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        // do no-op commit\r\n-        pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        assertNotNull(pc);\r\n-        assertEquals(1, pc.getVersion());\r\n-        startTx(pm);\r\n-        try {\r\n-            pc.setVersion(10);\r\n-            fail(\"Allowed change to version field.\");\r\n-        } catch (RuntimeException re) {\r\n-        }\r\n-        endTx(pm);\r\n-        assertEquals(1, pc.getVersion());\r\n-        endEm(pm);\r\n-\r\n-        // do real commit\r\n-        pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        assertNotNull(pc);\r\n-        assertEquals(1, pc.getVersion());\r\n-        startTx(pm);\r\n-        pc.setName(\"changed\");\r\n-        pm.flush();\r\n-        assertEquals(1, pc.getVersion());\r\n-        endTx(pm);\r\n-        assertEquals(\"changed\", pc.getName());\r\n-        assertEquals(2, pc.getVersion());\r\n-        endEm(pm);\r\n-\r\n-        // rollback\r\n-        pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n-        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\r\n-        assertNotNull(pc);\r\n-        assertEquals(2, pc.getVersion());\r\n-        startTx(pm);\r\n-        pc.setName(\"changed2\");\r\n-        pm.flush();\r\n-        assertEquals(2, pc.getVersion());\r\n-        rollbackTx(pm);\r\n-        assertEquals(2, pc.getVersion());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testVersionDetach() {\r\n-        ValueStrategyPC pc = new ValueStrategyPC();\r\n-        ValueStrategyPC pc2 = new ValueStrategyPC();\r\n-        pc.setName(\"pc\");\r\n-        pc2.setName(\"pc2\");\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        pm.persist(pc2);\r\n-        endTx(pm);\r\n-        startTx(pm);\r\n-        pc.setName(\"changed\");\r\n-        pc2.setName(\"changed2\");\r\n-        endTx(pm);\r\n-        assertEquals(2, pc.getVersion());\r\n-        assertEquals(2, pc2.getVersion());\r\n-        ValueStrategyPC detached = (ValueStrategyPC) pm.detach(pc);\r\n-        ValueStrategyPC detached2 = (ValueStrategyPC) pm.detach(pc2);\r\n-        endEm(pm);\r\n-\r\n-        // clean attach\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pc = (ValueStrategyPC) pm.merge(detached);\r\n-        assertEquals(2, pc.getVersion());\r\n-        endTx(pm);\r\n-        assertEquals(2, pc.getVersion());\r\n-        endEm(pm);\r\n-\r\n-        // dirty attach\r\n-        detached.setName(\"changed-detached\");\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pc = (ValueStrategyPC) pm.merge(detached);\r\n-        assertEquals(2, pc.getVersion());\r\n-        endTx(pm);\r\n-        assertEquals(3, pc.getVersion());\r\n-        endEm(pm);\r\n-\r\n-        // stale attach\r\n-        detached.setName(\"stale\");\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        try {\r\n-            pm.merge(detached);\r\n-            endTx(pm);\r\n-            fail(\"Committed stale version.\");\r\n-        } catch (OpenJPAException je) {\r\n-        }\r\n-        if (isActiveTx(pm))\r\n-            rollbackTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        // modify version field in detached; allow either exception or\r\n-        // allow the update to be ignored\r\n-        detached2.setName(\"changed2-detached\");\r\n-        detached2.setVersion(99);\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        try {\r\n-            pc2 = (ValueStrategyPC) pm.merge(detached2);\r\n-            assertEquals(2, pc2.getVersion());\r\n-            endTx(pm);\r\n-            assertEquals(3, pc2.getVersion());\r\n-        } catch (OpenJPAException je) {\r\n-        }\r\n-        if (isActiveTx(pm))\r\n-            rollbackTx(pm);\r\n-        ;\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testVersionRefresh() {\r\n-        ValueStrategyPC pc = new ValueStrategyPC();\r\n-        pc.setName(\"pc\");\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        startTx(pm);\r\n-        pc.setName(\"changed\");\r\n-        endTx(pm);\r\n-        assertEquals(2, pc.getVersion());\r\n-\r\n-        // clean refresh\r\n-        startTx(pm);\r\n-        pm.refresh(pc);\r\n-        assertEquals(2, pc.getVersion());\r\n-\r\n-        // concurrent mod\r\n-        OpenJPAEntityManager pm2 =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm2);\r\n-        ValueStrategyPC pc2 = (ValueStrategyPC) pm2.find\r\n-            (ValueStrategyPC.class, pm2.getObjectId(pc));\r\n-        pc2.setName(\"changed2\");\r\n-        endTx(pm2);\r\n-        assertEquals(3, pc2.getVersion());\r\n-        endEm(pm2);\r\n-\r\n-        // stale refresh\r\n-        pm.refresh(pc);\r\n-        assertEquals(3, pc.getVersion());\r\n-\r\n-        // dirty refresh\r\n-        pc.setName(\"changed-1\");\r\n-        pm.refresh(pc);\r\n-        assertEquals(3, pc.getVersion());\r\n-\r\n-        pc.setName(\"changed-2\");\r\n-        endTx(pm);\r\n-        assertEquals(4, pc.getVersion());\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManagerFactory;\n+\n+\n+import org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.util.OpenJPAException;\n+\n+/**\n+ * <p>Test value and update strategies.  Also tests version fields, which\n+ * are represented in JDO as a value strategy.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestValueStrategies\n+    extends AbstractTestCase {\n+\n+    public TestValueStrategies(String test) {\n+        super(test, \"metacactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(ValueStrategyPC.class);\n+    }\n+\n+    public void testIgnoreUpdate() {\n+        ValueStrategyPC pc = new ValueStrategyPC();\n+        pc.setName(\"pc\");\n+        pc.setIgnoreUpdate(10);\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        assertEquals(10, pc.getIgnoreUpdate());\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        //pm = getPM(false, false);\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        assertNotNull(pc);\n+        assertEquals(10, pc.getIgnoreUpdate());\n+        startTx(pm);\n+        pc.setIgnoreUpdate(100);\n+        assertFalse(pm.isDirty(pc));\n+        pm.transactional(pc, false);\n+        endTx(pm);\n+        assertEquals(10, pc.getIgnoreUpdate());\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        assertNotNull(pc);\n+        assertEquals(10, pc.getIgnoreUpdate());\n+        endEm(pm);\n+    }\n+\n+    public void testRestrictUpdate() {\n+        ValueStrategyPC pc = new ValueStrategyPC();\n+        pc.setName(\"pc\");\n+        pc.setRestrictUpdate(10);\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        assertEquals(10, pc.getRestrictUpdate());\n+        endTx(pm);\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        //pm = getPM(false, false);\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        assertNotNull(pc);\n+        assertEquals(10, pc.getRestrictUpdate());\n+        startTx(pm);\n+        try {\n+            pc.setRestrictUpdate(100);\n+            fail(\"Allowed update of restricted field.\");\n+        } catch (RuntimeException re) {\n+        }\n+        endTx(pm);\n+        assertEquals(10, pc.getRestrictUpdate());\n+        endEm(pm);\n+    }\n+\n+    public void testUUID() {\n+        ValueStrategyPC pc = new ValueStrategyPC();\n+        ValueStrategyPC pc2 = new ValueStrategyPC();\n+        pc.setName(\"pc\");\n+        pc2.setName(\"pc2\");\n+        assertNull(pc.getUUID());\n+        assertNull(pc2.getUUID());\n+        assertNull(pc.getUUIDHex());\n+        assertNull(pc2.getUUIDHex());\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        pm.setOptimistic(true);\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        String str = pc.getUUID();\n+        String hex = pc.getUUIDHex();\n+        assertTrue(!pm.isStoreActive());    // no flush needed\n+        endTx(pm);\n+        String str2 = pc2.getUUID();\n+        String hex2 = pc2.getUUIDHex();\n+        Object oid = pm.getObjectId(pc);\n+        Object oid2 = pm.getObjectId(pc2);\n+        endEm(pm);\n+\n+        assertNotNull(str);\n+        assertNotNull(str2);\n+        assertTrue(!str.equals(str2));\n+        assertNotNull(hex);\n+        assertNotNull(hex2);\n+        assertTrue(!hex.equals(hex2));\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\n+        assertEquals(str, pc.getUUID());\n+        assertEquals(str2, pc2.getUUID());\n+        assertEquals(hex, pc.getUUIDHex());\n+        assertEquals(hex2, pc2.getUUIDHex());\n+        startTx(pm);\n+        pc.setUUIDHex(\"foo\");\n+        pc2.setUUIDHex(\"bar\");\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\n+        assertEquals(\"foo\", pc.getUUIDHex());\n+        assertEquals(\"bar\", pc2.getUUIDHex());\n+        endEm(pm);\n+    }\n+\n+    public void testSequence() {\n+        ValueStrategyPC pc = new ValueStrategyPC();\n+        ValueStrategyPC pc2 = new ValueStrategyPC();\n+        pc.setName(\"pc\");\n+        pc2.setName(\"pc2\");\n+        assertEquals(0, pc.getSequence());\n+        assertEquals(0, pc2.getSequence());\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        pm.setOptimistic(true);\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        int seq = pc.getSequence();\n+        assertTrue(!pm.isStoreActive());    // no flush needed\n+        endTx(pm);\n+        int seq2 = pc2.getSequence();\n+        Object oid = pm.getObjectId(pc);\n+        Object oid2 = pm.getObjectId(pc2);\n+        endEm(pm);\n+\n+        assertTrue(seq > 0);\n+        assertTrue(seq2 > 0);\n+        assertTrue(seq != seq2);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\n+        assertEquals(seq, pc.getSequence());\n+        assertEquals(seq2, pc2.getSequence());\n+        startTx(pm);\n+        pc.setSequence(99);\n+        pc2.setSequence(100);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        pc2 = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid2);\n+        assertEquals(99, pc.getSequence());\n+        assertEquals(100, pc2.getSequence());\n+        endEm(pm);\n+    }\n+\n+    public void testVersion() {\n+        versionTest(getEmf());\n+    }\n+\n+    public void testVersionDataCache() {\n+\n+        Map map = new HashMap();\n+        map.put(\"openjpa.DataCache\", \"true\");\n+        map.put(\"openjpa.RemoteCommitProvider\", \"sjvm\");\n+        versionTest(getEmf(map));\n+    }\n+\n+    private void versionTest(EntityManagerFactory pmf) {\n+        ValueStrategyPC pc = new ValueStrategyPC();\n+        pc.setName(\"pc\");\n+\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)\n+            pmf.createEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        ClassMetaData meta = getConfiguration()\n+            .getMetaDataRepositoryInstance().\n+            getMetaData(pc.getClass(), null, false);\n+        assertNotNull(meta.getVersionField());\n+        assertEquals(\"version\", meta.getVersionField().getName());\n+        assertEquals(0, pc.getVersion());\n+        endTx(pm);\n+        assertEquals(1, pc.getVersion());\n+        Object oid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        // do no-op commit\n+        pm = (OpenJPAEntityManager) pmf.createEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        assertNotNull(pc);\n+        assertEquals(1, pc.getVersion());\n+        startTx(pm);\n+        try {\n+            pc.setVersion(10);\n+            fail(\"Allowed change to version field.\");\n+        } catch (RuntimeException re) {\n+        }\n+        endTx(pm);\n+        assertEquals(1, pc.getVersion());\n+        endEm(pm);\n+\n+        // do real commit\n+        pm = (OpenJPAEntityManager) pmf.createEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        assertNotNull(pc);\n+        assertEquals(1, pc.getVersion());\n+        startTx(pm);\n+        pc.setName(\"changed\");\n+        pm.flush();\n+        assertEquals(1, pc.getVersion());\n+        endTx(pm);\n+        assertEquals(\"changed\", pc.getName());\n+        assertEquals(2, pc.getVersion());\n+        endEm(pm);\n+\n+        // rollback\n+        pm = (OpenJPAEntityManager) pmf.createEntityManager();\n+        pc = (ValueStrategyPC) pm.find(ValueStrategyPC.class, oid);\n+        assertNotNull(pc);\n+        assertEquals(2, pc.getVersion());\n+        startTx(pm);\n+        pc.setName(\"changed2\");\n+        pm.flush();\n+        assertEquals(2, pc.getVersion());\n+        rollbackTx(pm);\n+        assertEquals(2, pc.getVersion());\n+        endEm(pm);\n+    }\n+\n+    public void testVersionDetach() {\n+        ValueStrategyPC pc = new ValueStrategyPC();\n+        ValueStrategyPC pc2 = new ValueStrategyPC();\n+        pc.setName(\"pc\");\n+        pc2.setName(\"pc2\");\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        pm.persist(pc2);\n+        endTx(pm);\n+        startTx(pm);\n+        pc.setName(\"changed\");\n+        pc2.setName(\"changed2\");\n+        endTx(pm);\n+        assertEquals(2, pc.getVersion());\n+        assertEquals(2, pc2.getVersion());\n+        ValueStrategyPC detached = (ValueStrategyPC) pm.detach(pc);\n+        ValueStrategyPC detached2 = (ValueStrategyPC) pm.detach(pc2);\n+        endEm(pm);\n+\n+        // clean attach\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pc = (ValueStrategyPC) pm.merge(detached);\n+        assertEquals(2, pc.getVersion());\n+        endTx(pm);\n+        assertEquals(2, pc.getVersion());\n+        endEm(pm);\n+\n+        // dirty attach\n+        detached.setName(\"changed-detached\");\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pc = (ValueStrategyPC) pm.merge(detached);\n+        assertEquals(2, pc.getVersion());\n+        endTx(pm);\n+        assertEquals(3, pc.getVersion());\n+        endEm(pm);\n+\n+        // stale attach\n+        detached.setName(\"stale\");\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        try {\n+            pm.merge(detached);\n+            endTx(pm);\n+            fail(\"Committed stale version.\");\n+        } catch (OpenJPAException je) {\n+        }\n+        if (isActiveTx(pm))\n+            rollbackTx(pm);\n+        endEm(pm);\n+\n+        // modify version field in detached; allow either exception or\n+        // allow the update to be ignored\n+        detached2.setName(\"changed2-detached\");\n+        detached2.setVersion(99);\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        try {\n+            pc2 = (ValueStrategyPC) pm.merge(detached2);\n+            assertEquals(2, pc2.getVersion());\n+            endTx(pm);\n+            assertEquals(3, pc2.getVersion());\n+        } catch (OpenJPAException je) {\n+        }\n+        if (isActiveTx(pm))\n+            rollbackTx(pm);\n+        ;\n+        endEm(pm);\n+    }\n+\n+    public void testVersionRefresh() {\n+        ValueStrategyPC pc = new ValueStrategyPC();\n+        pc.setName(\"pc\");\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(pc);\n+        endTx(pm);\n+        startTx(pm);\n+        pc.setName(\"changed\");\n+        endTx(pm);\n+        assertEquals(2, pc.getVersion());\n+\n+        // clean refresh\n+        startTx(pm);\n+        pm.refresh(pc);\n+        assertEquals(2, pc.getVersion());\n+\n+        // concurrent mod\n+        OpenJPAEntityManager pm2 =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm2);\n+        ValueStrategyPC pc2 = (ValueStrategyPC) pm2.find\n+            (ValueStrategyPC.class, pm2.getObjectId(pc));\n+        pc2.setName(\"changed2\");\n+        endTx(pm2);\n+        assertEquals(3, pc2.getVersion());\n+        endEm(pm2);\n+\n+        // stale refresh\n+        pm.refresh(pc);\n+        assertEquals(3, pc.getVersion());\n+\n+        // dirty refresh\n+        pc.setName(\"changed-1\");\n+        pm.refresh(pc);\n+        assertEquals(3, pc.getVersion());\n+\n+        pc.setName(\"changed-2\");\n+        endTx(pm);\n+        assertEquals(4, pc.getVersion());\n+        endEm(pm);\n+    }\n+}"},{"sha":"c0669d5de9a090da319257813ad16efb151c38e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta;\r\n-\r\n-import java.io.ByteArrayInputStream;\r\n-import java.io.ByteArrayOutputStream;\r\n-import java.io.InputStreamReader;\r\n-import java.io.OutputStreamWriter;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest1;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest2;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest3;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest5;\r\n-import org.apache.openjpa.persistence.meta.common.apps.MetaTest6;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n-import org.apache.openjpa.meta.MetaDataRepository;\r\n-import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\r\n-import org.apache.openjpa.persistence.XMLPersistenceMetaDataSerializer;\r\n-\r\n-/**\r\n- * <p>Tests the {@link MetaDataSerializer} by parsing all the metadata\r\n- * files, serializing them to a buffer, then deserializing them from the\r\n- * buffer and invoking the tests defined by {@link TestClassMetaData}.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public class TestXMLPersistenceMetaDataSerializer\r\n-    extends TestClassMetaData {\r\n-\r\n-    public TestXMLPersistenceMetaDataSerializer(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    protected MetaDataRepository getRepository()\r\n-        throws Exception {\r\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\r\n-        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\r\n-        repos.getMetaData(MetaTest5.class, null, true);\r\n-        repos.getMetaData(MetaTest3.class, null, true);\r\n-        repos.getMetaData(MetaTest2.class, null, true);\r\n-        repos.getMetaData(MetaTest1.class, null, true);\r\n-        repos.getMetaData(MetaTest6.class, null, true);\r\n-\r\n-        XMLPersistenceMetaDataSerializer ser =\r\n-            new XMLPersistenceMetaDataSerializer(conf);\r\n-        ser.addAll(repos);\r\n-        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n-        ser.serialize(new OutputStreamWriter(out), ser.PRETTY);\r\n-        byte[] bytes = out.toByteArray();\r\n-\r\n-        XMLPersistenceMetaDataParser parser =\r\n-            new XMLPersistenceMetaDataParser(conf);\r\n-        parser.parse(new InputStreamReader\r\n-            (new ByteArrayInputStream(bytes)), \"bytes\");\r\n-        return parser.getRepository();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+\n+\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest1;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest2;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest3;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest5;\n+import org.apache.openjpa.persistence.meta.common.apps.MetaTest6;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.persistence.XMLPersistenceMetaDataParser;\n+import org.apache.openjpa.persistence.XMLPersistenceMetaDataSerializer;\n+\n+/**\n+ * <p>Tests the {@link MetaDataSerializer} by parsing all the metadata\n+ * files, serializing them to a buffer, then deserializing them from the\n+ * buffer and invoking the tests defined by {@link TestClassMetaData}.</p>\n+ *\n+ * @author Abe White\n+ */\n+public class TestXMLPersistenceMetaDataSerializer\n+    extends TestClassMetaData {\n+\n+    public TestXMLPersistenceMetaDataSerializer(String test) {\n+        super(test);\n+    }\n+\n+    protected MetaDataRepository getRepository()\n+        throws Exception {\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+        MetaDataRepository repos = conf.newMetaDataRepositoryInstance();\n+        repos.getMetaData(MetaTest5.class, null, true);\n+        repos.getMetaData(MetaTest3.class, null, true);\n+        repos.getMetaData(MetaTest2.class, null, true);\n+        repos.getMetaData(MetaTest1.class, null, true);\n+        repos.getMetaData(MetaTest6.class, null, true);\n+\n+        XMLPersistenceMetaDataSerializer ser =\n+            new XMLPersistenceMetaDataSerializer(conf);\n+        ser.addAll(repos);\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        ser.serialize(new OutputStreamWriter(out), ser.PRETTY);\n+        byte[] bytes = out.toByteArray();\n+\n+        XMLPersistenceMetaDataParser parser =\n+            new XMLPersistenceMetaDataParser(conf);\n+        parser.parse(new InputStreamReader\n+            (new ByteArrayInputStream(bytes)), \"bytes\");\n+        return parser.getRepository();\n+    }\n+}"},{"sha":"2e1a9997dceeb0faa5b3541d442e55bd2e369f91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","status":"modified","additions":126,"deletions":126,"changes":252,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,126 +1,126 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-\r\n-import java.util.UUID;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.Externalizer;\r\n-import org.apache.openjpa.persistence.Factory;\r\n-import org.apache.openjpa.persistence.Persistent;\r\n-\r\n-@Entity\r\n-public class ExternalValues {\r\n-\r\n-    private boolean booleanToShort;\r\n-    private byte byteToDouble;\r\n-    private int intToFloat;\r\n-    private long longToChar;\r\n-    private short shortToString;\r\n-    private float floatToBoolean;\r\n-    private double doubleToByte;\r\n-    private char charToInt;\r\n-    private String stringToLong;\r\n-    @Persistent\r\n-    @Externalizer(\"toString\")        \r\n-    @Factory(\"UUID.fromString\")\r\n-    private UUID    uuid;\r\n-\r\n-    public boolean getBooleanToShort() {\r\n-        return booleanToShort;\r\n-    }\r\n-\r\n-    public void setBooleanToShort(boolean b) {\r\n-        booleanToShort = b;\r\n-    }\r\n-\r\n-    public byte getByteToDouble() {\r\n-        return byteToDouble;\r\n-    }\r\n-\r\n-    public void setByteToDouble(byte b) {\r\n-        byteToDouble = b;\r\n-    }\r\n-\r\n-    public int getIntToFloat() {\r\n-        return intToFloat;\r\n-    }\r\n-\r\n-    public void setIntToFloat(int i) {\r\n-        intToFloat = i;\r\n-    }\r\n-\r\n-    public long getLongToChar() {\r\n-        return longToChar;\r\n-    }\r\n-\r\n-    public void setLongToChar(long l) {\r\n-        longToChar = l;\r\n-    }\r\n-\r\n-    public short getShortToString() {\r\n-        return shortToString;\r\n-    }\r\n-\r\n-    public void setShortToString(short s) {\r\n-        shortToString = s;\r\n-    }\r\n-\r\n-    public double getDoubleToByte() {\r\n-        return doubleToByte;\r\n-    }\r\n-\r\n-    public void setDoubleToByte(double d) {\r\n-        doubleToByte = d;\r\n-    }\r\n-\r\n-    public float getFloatToBoolean() {\r\n-        return floatToBoolean;\r\n-    }\r\n-\r\n-    public void setFloatToBoolean(float f) {\r\n-        floatToBoolean = f;\r\n-    }\r\n-\r\n-    public char getCharToInt() {\r\n-        return charToInt;\r\n-    }\r\n-\r\n-    public void setCharToInt(char c) {\r\n-        charToInt = c;\r\n-    }\r\n-\r\n-    public String getStringToLong() {\r\n-        return stringToLong;\r\n-    }\r\n-\r\n-    public void setStringToLong(String s) {\r\n-        stringToLong = s;\r\n-    }\r\n-\r\n-    public UUID getUuid() {\r\n-        return uuid;\r\n-    }\r\n-\r\n-    public void setUuid(UUID uuid) {\r\n-        this.uuid = uuid;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+\n+import java.util.UUID;\n+\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.Externalizer;\n+import org.apache.openjpa.persistence.Factory;\n+import org.apache.openjpa.persistence.Persistent;\n+\n+@Entity\n+public class ExternalValues {\n+\n+    private boolean booleanToShort;\n+    private byte byteToDouble;\n+    private int intToFloat;\n+    private long longToChar;\n+    private short shortToString;\n+    private float floatToBoolean;\n+    private double doubleToByte;\n+    private char charToInt;\n+    private String stringToLong;\n+    @Persistent\n+    @Externalizer(\"toString\")        \n+    @Factory(\"UUID.fromString\")\n+    private UUID    uuid;\n+\n+    public boolean getBooleanToShort() {\n+        return booleanToShort;\n+    }\n+\n+    public void setBooleanToShort(boolean b) {\n+        booleanToShort = b;\n+    }\n+\n+    public byte getByteToDouble() {\n+        return byteToDouble;\n+    }\n+\n+    public void setByteToDouble(byte b) {\n+        byteToDouble = b;\n+    }\n+\n+    public int getIntToFloat() {\n+        return intToFloat;\n+    }\n+\n+    public void setIntToFloat(int i) {\n+        intToFloat = i;\n+    }\n+\n+    public long getLongToChar() {\n+        return longToChar;\n+    }\n+\n+    public void setLongToChar(long l) {\n+        longToChar = l;\n+    }\n+\n+    public short getShortToString() {\n+        return shortToString;\n+    }\n+\n+    public void setShortToString(short s) {\n+        shortToString = s;\n+    }\n+\n+    public double getDoubleToByte() {\n+        return doubleToByte;\n+    }\n+\n+    public void setDoubleToByte(double d) {\n+        doubleToByte = d;\n+    }\n+\n+    public float getFloatToBoolean() {\n+        return floatToBoolean;\n+    }\n+\n+    public void setFloatToBoolean(float f) {\n+        floatToBoolean = f;\n+    }\n+\n+    public char getCharToInt() {\n+        return charToInt;\n+    }\n+\n+    public void setCharToInt(char c) {\n+        charToInt = c;\n+    }\n+\n+    public String getStringToLong() {\n+        return stringToLong;\n+    }\n+\n+    public void setStringToLong(String s) {\n+        stringToLong = s;\n+    }\n+\n+    public UUID getUuid() {\n+        return uuid;\n+    }\n+\n+    public void setUuid(UUID uuid) {\n+        this.uuid = uuid;\n+    }\n+}"},{"sha":"055796e5d379be079888d35623f02a7433a2130a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,34 +1,34 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class FieldOrderPC {\r\n-\r\n-    private transient String firstField;\r\n-    private static char staticField;\r\n-    private int intField;\r\n-    private int thirdField;\r\n-    private int unmanagedField;\r\n-    private final Long finalField = null;\r\n-    private Double secondField;\r\n-    private FieldOrderPC oneToOneField;\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class FieldOrderPC {\n+\n+    private transient String firstField;\n+    private static char staticField;\n+    private int intField;\n+    private int thirdField;\n+    private int unmanagedField;\n+    private final Long finalField = null;\n+    private Double secondField;\n+    private FieldOrderPC oneToOneField;\n }\n\\ No newline at end of file"},{"sha":"af785368be37a3a83e56e179057712de7d2065a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,32 +1,32 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class FieldOrderPCSubclass\r\n-    extends FieldOrderPC {\r\n-\r\n-    private transient String sub1;\r\n-    private int sub2;\r\n-    private Double sub3;\r\n-    private int unmanagedSubField;\r\n-    private int undeclaredSubField;\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class FieldOrderPCSubclass\n+    extends FieldOrderPC {\n+\n+    private transient String sub1;\n+    private int sub2;\n+    private Double sub3;\n+    private int unmanagedSubField;\n+    private int undeclaredSubField;\n }\n\\ No newline at end of file"},{"sha":"13a513f6ae6d88e294cfae07befa510abcbeb515","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-\r\n-@Entity\r\n-public class MetaTest1 {\r\n-\r\n-    // these should not be persistent\r\n-    private static int staticField;\r\n-    private final String finalField = null;\r\n-    private transient char transientField;\r\n-    private MetaTest4 metaTest4Field;\r\n-    //@OneToMany(mappedBy=\"MetaTest4\", fetch=FetchType.LAZY)\r\n-    @PersistentCollection\r\n-    private java.util.Set<MetaTest4> metaTest4ArrayField;\r\n-    //private MetaTest4[] metaTest4ArrayField;\r\n-    private Object objectField;\r\n-    private Long longWrapperField;\r\n-    private double doubleField;\r\n-\r\n-    // persistent fields -- see metadata\r\n-    private String stringField;\r\n-    private Integer intWrapperField;\r\n-    private int intField;\r\n-    private MetaTest2 metaTest2Field;\r\n-    //@OneToMany(mappedBy=\"MetaTest2\", fetch=FetchType.LAZY)\r\n-    @PersistentCollection\r\n-    private java.util.Set<MetaTest2> metaTest2ArrayField;\r\n-    //private MetaTest2[] metaTest2ArrayField;\r\n-    @PersistentCollection\r\n-    private int[] intArrayField;\r\n-\r\n-    @Entity\r\n-    @Table(name=\"MetaTest1_Inner\")\r\n-    public static class Inner {\r\n-\r\n-        private long longField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+public class MetaTest1 {\n+\n+    // these should not be persistent\n+    private static int staticField;\n+    private final String finalField = null;\n+    private transient char transientField;\n+    private MetaTest4 metaTest4Field;\n+    //@OneToMany(mappedBy=\"MetaTest4\", fetch=FetchType.LAZY)\n+    @PersistentCollection\n+    private java.util.Set<MetaTest4> metaTest4ArrayField;\n+    //private MetaTest4[] metaTest4ArrayField;\n+    private Object objectField;\n+    private Long longWrapperField;\n+    private double doubleField;\n+\n+    // persistent fields -- see metadata\n+    private String stringField;\n+    private Integer intWrapperField;\n+    private int intField;\n+    private MetaTest2 metaTest2Field;\n+    //@OneToMany(mappedBy=\"MetaTest2\", fetch=FetchType.LAZY)\n+    @PersistentCollection\n+    private java.util.Set<MetaTest2> metaTest2ArrayField;\n+    //private MetaTest2[] metaTest2ArrayField;\n+    @PersistentCollection\n+    private int[] intArrayField;\n+\n+    @Entity\n+    @Table(name=\"MetaTest1_Inner\")\n+    public static class Inner {\n+\n+        private long longField;\n+    }\n+}"},{"sha":"10d9405a55de8f5e097fdda1b7ebb22f9ccd0f7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,37 +1,37 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Map;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-@Entity\r\n-public class MetaTest2\r\n-    extends MetaTest1 {\r\n-\r\n-    private Collection collectionField1;\r\n-    private Collection collectionField2;\r\n-    private Map mapField1;\r\n-    private Map mapField2;\r\n-    @ManyToOne(fetch = FetchType.LAZY)\r\n-    private MetaTest2 metaTest2Field;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class MetaTest2\n+    extends MetaTest1 {\n+\n+    private Collection collectionField1;\n+    private Collection collectionField2;\n+    private Map mapField1;\n+    private Map mapField2;\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    private MetaTest2 metaTest2Field;\n+}"},{"sha":"1917ae9fe8235d5149cb51d494d9e1c7957b793d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import java.util.Map;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class MetaTest3\r\n-    extends MetaTest2 {\r\n-\r\n-    private Object pcField;\r\n-    private Object externalField;\r\n-    private Object metaField;\r\n-\r\n-    public static Map toMap(Object fieldValue) {\r\n-        // dummy method\r\n-        return null;\r\n-    }\r\n-\r\n-    public static Object fromMap(Map externalValue) {\r\n-        // dummy method\r\n-        return null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import java.util.Map;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class MetaTest3\n+    extends MetaTest2 {\n+\n+    private Object pcField;\n+    private Object externalField;\n+    private Object metaField;\n+\n+    public static Map toMap(Object fieldValue) {\n+        // dummy method\n+        return null;\n+    }\n+\n+    public static Object fromMap(Map externalValue) {\n+        // dummy method\n+        return null;\n+    }\n+}"},{"sha":"9780cb3c75f26faaf3cae013d0a1a458ae738f07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,26 +1,26 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class MetaTest4 {\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class MetaTest4 {\n+\n+}"},{"sha":"b6515b658af90bb34631910711594bc4e95d683c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,57 +1,57 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-/**\r\n- * <p>Persistent type used in the testing of the JDO metadata.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public abstract class MetaTest5 {\r\n-\r\n-    private long id;\r\n-\r\n-    public static class MetaTest5Id {\r\n-\r\n-        public long id;\r\n-\r\n-        public MetaTest5Id() {\r\n-        }\r\n-\r\n-        public MetaTest5Id(String str) {\r\n-            id = Long.parseLong(str);\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return String.valueOf(id);\r\n-        }\r\n-\r\n-        public boolean equals(Object other) {\r\n-            return other instanceof MetaTest5Id\r\n-                && ((MetaTest5Id) other).id == id;\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return (int) (id % Integer.MAX_VALUE);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+/**\n+ * <p>Persistent type used in the testing of the JDO metadata.</p>\n+ *\n+ * @author Abe White\n+ */\n+public abstract class MetaTest5 {\n+\n+    private long id;\n+\n+    public static class MetaTest5Id {\n+\n+        public long id;\n+\n+        public MetaTest5Id() {\n+        }\n+\n+        public MetaTest5Id(String str) {\n+            id = Long.parseLong(str);\n+        }\n+\n+        public String toString() {\n+            return String.valueOf(id);\n+        }\n+\n+        public boolean equals(Object other) {\n+            return other instanceof MetaTest5Id\n+                && ((MetaTest5Id) other).id == id;\n+        }\n+\n+        public int hashCode() {\n+            return (int) (id % Integer.MAX_VALUE);\n+        }\n+    }\n+}"},{"sha":"451cb4f8b842b837ae4f8f01ad3af189a83b873e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,28 +1,28 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class MetaTest6\r\n-    extends MetaTest5 {\r\n-\r\n-    private String name;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class MetaTest6\n+    extends MetaTest5 {\n+\n+    private String name;\n+}"},{"sha":"2204e121fcee31e3fde5091544930603d1e46073","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-\r\n-@Entity\r\n-public class NonPersistentFieldsPC {\r\n-\r\n-    private String persistentField;\r\n-    private String nonPersistentField;\r\n-    private Object objectField;\r\n-    private Serializable interfaceField;\r\n-    private ClassMetaData userObjectField;\r\n-    private ClassMetaData userInterfaceField;\r\n-    private Object explicitObjectField;\r\n-    private Serializable explicitInterfaceField;\r\n-    private ClassMetaData explicitUserObjectField;\r\n-    private ClassMetaData explicitUserInterfaceField;\r\n-    private Object persistentObjectField;\r\n-    private Serializable persistentInterfaceField;\r\n-    private ClassMetaData persistentUserObjectField;\r\n-    private ClassMetaData persistentUserInterfaceField;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import java.io.Serializable;\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+@Entity\n+public class NonPersistentFieldsPC {\n+\n+    private String persistentField;\n+    private String nonPersistentField;\n+    private Object objectField;\n+    private Serializable interfaceField;\n+    private ClassMetaData userObjectField;\n+    private ClassMetaData userInterfaceField;\n+    private Object explicitObjectField;\n+    private Serializable explicitInterfaceField;\n+    private ClassMetaData explicitUserObjectField;\n+    private ClassMetaData explicitUserInterfaceField;\n+    private Object persistentObjectField;\n+    private Serializable persistentInterfaceField;\n+    private ClassMetaData persistentUserObjectField;\n+    private ClassMetaData persistentUserInterfaceField;\n+}"},{"sha":"7e747930f293e8efd219b4b9c69f5c2430f88f13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,76 +1,76 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.persistence.Entity;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-\r\n-@Entity\r\n-public class OrderByPC {\r\n-\r\n-    private long id;\r\n-\r\n-    private List stringListAsc = new ArrayList();\r\n-    @PersistentCollection\r\n-    private int[] intArrayDesc;\r\n-    private List orderByPKAsc = new ArrayList();\r\n-    private List orderByStringDesc = new ArrayList();\r\n-    private List orderByStringAndPKDesc = new ArrayList();\r\n-\r\n-    private List oneToManyAsc = new ArrayList();\r\n-\r\n-    public long getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public List getStringListAsc() {\r\n-        return this.stringListAsc;\r\n-    }\r\n-\r\n-    public int[] getIntArrayDesc() {\r\n-        return this.intArrayDesc;\r\n-    }\r\n-\r\n-    public void setIntArrayDesc(int[] intArrayDesc) {\r\n-        this.intArrayDesc = intArrayDesc;\r\n-    }\r\n-\r\n-    public List getOrderByPKAsc() {\r\n-        return this.orderByPKAsc;\r\n-    }\r\n-\r\n-    public List getOrderByStringDesc() {\r\n-        return this.orderByStringDesc;\r\n-    }\r\n-\r\n-    public List getOrderByStringAndPKDesc() {\r\n-        return this.orderByStringAndPKDesc;\r\n-    }\r\n-\r\n-    public List getOneToManyAsc() {\r\n-        return this.oneToManyAsc;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Entity;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+public class OrderByPC {\n+\n+    private long id;\n+\n+    private List stringListAsc = new ArrayList();\n+    @PersistentCollection\n+    private int[] intArrayDesc;\n+    private List orderByPKAsc = new ArrayList();\n+    private List orderByStringDesc = new ArrayList();\n+    private List orderByStringAndPKDesc = new ArrayList();\n+\n+    private List oneToManyAsc = new ArrayList();\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public List getStringListAsc() {\n+        return this.stringListAsc;\n+    }\n+\n+    public int[] getIntArrayDesc() {\n+        return this.intArrayDesc;\n+    }\n+\n+    public void setIntArrayDesc(int[] intArrayDesc) {\n+        this.intArrayDesc = intArrayDesc;\n+    }\n+\n+    public List getOrderByPKAsc() {\n+        return this.orderByPKAsc;\n+    }\n+\n+    public List getOrderByStringDesc() {\n+        return this.orderByStringDesc;\n+    }\n+\n+    public List getOrderByStringAndPKDesc() {\n+        return this.orderByStringAndPKDesc;\n+    }\n+\n+    public List getOneToManyAsc() {\n+        return this.oneToManyAsc;\n+    }\n+}"},{"sha":"99f6b870daa2df9127fe0041aa28493f81bd91e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class OrderByPCRel {\r\n-\r\n-    private long id;\r\n-    private String string;\r\n-    private OrderByPC toOne;\r\n-\r\n-    public long getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getString() {\r\n-        return this.string;\r\n-    }\r\n-\r\n-    public void setString(String string) {\r\n-        this.string = string;\r\n-    }\r\n-\r\n-    public OrderByPC getToOne() {\r\n-        return this.toOne;\r\n-    }\r\n-\r\n-    public void setToOne(OrderByPC toOne) {\r\n-        this.toOne = toOne;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class OrderByPCRel {\n+\n+    private long id;\n+    private String string;\n+    private OrderByPC toOne;\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getString() {\n+        return this.string;\n+    }\n+\n+    public void setString(String string) {\n+        this.string = string;\n+    }\n+\n+    public OrderByPC getToOne() {\n+        return this.toOne;\n+    }\n+\n+    public void setToOne(OrderByPC toOne) {\n+        this.toOne = toOne;\n+    }\n+}"},{"sha":"4cac71a7d993a6fdbbac4f3d0568560213b9f8cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class OrderByPCRelSub\r\n-    extends OrderByPCRel {\r\n-\r\n-    private int sub;\r\n-\r\n-    public int getSub() {\r\n-        return this.sub;\r\n-    }\r\n-\r\n-    public void setSub(int sub) {\r\n-        this.sub = sub;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class OrderByPCRelSub\n+    extends OrderByPCRel {\n+\n+    private int sub;\n+\n+    public int getSub() {\n+        return this.sub;\n+    }\n+\n+    public void setSub(int sub) {\n+        this.sub = sub;\n+    }\n+}"},{"sha":"be932397659be8b7bd74b4310a6425df5209f2e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,268 +1,268 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import java.io.Serializable;\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.Date;\r\n-import java.util.HashSet;\r\n-import java.util.Locale;\r\n-import java.util.Set;\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class RuntimeTest1\r\n-    implements Serializable {\r\n-\r\n-    public static final String someStaticField = \"someField\";\r\n-\r\n-    private byte byteField;\r\n-    private boolean booleanField;\r\n-    private char charField;\r\n-    private double doubleField;\r\n-    private float floatField;\r\n-    private int intField;\r\n-    private long longField;\r\n-    private short shortField;\r\n-    private String stringField;\r\n-    private BigInteger bigIntegerField;\r\n-    private BigDecimal bigDecimalField;\r\n-    private Date dateField;\r\n-    private Locale localeField;\r\n-    private Byte byteObjfield;\r\n-    private Boolean booleanObjField;\r\n-    private Character charObjField;\r\n-    private Double doubleObjField;\r\n-    private Float floatObjField;\r\n-    private Integer intObjField;\r\n-    private Long longObjField;\r\n-    private Short shortObjField;\r\n-\r\n-    // transactional only\r\n-    private TransactionalClassPC transField;\r\n-    public String transString;\r\n-\r\n-    // relations\r\n-    private RuntimeTest1 selfOneOne;\r\n-    private Set selfOneMany = new HashSet();\r\n-\r\n-    public RuntimeTest1() {\r\n-    }\r\n-\r\n-    public RuntimeTest1(String str, int i) {\r\n-        stringField = str;\r\n-        intField = i;\r\n-        //FIXME Seetha Oct 25,2006\r\n-        //mySQL 0.0 float issue\r\n-        floatField = 1.0f;\r\n-    }\r\n-\r\n-    public byte getByteField() {\r\n-        return this.byteField;\r\n-    }\r\n-\r\n-    public void setByteField(byte byteField) {\r\n-        this.byteField = byteField;\r\n-    }\r\n-\r\n-    public boolean getBooleanField() {\r\n-        return this.booleanField;\r\n-    }\r\n-\r\n-    public void setBooleanField(boolean booleanField) {\r\n-        this.booleanField = booleanField;\r\n-    }\r\n-\r\n-    public char getCharField() {\r\n-        return this.charField;\r\n-    }\r\n-\r\n-    public void setCharField(char charField) {\r\n-        this.charField = charField;\r\n-    }\r\n-\r\n-    public double getDoubleField() {\r\n-        return this.doubleField;\r\n-    }\r\n-\r\n-    public void setDoubleField(double doubleField) {\r\n-        this.doubleField = doubleField;\r\n-    }\r\n-\r\n-    public float getFloatField() {\r\n-        return this.floatField;\r\n-    }\r\n-\r\n-    public void setFloatField(float floatField) {\r\n-        this.floatField = floatField;\r\n-    }\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-\r\n-    public long getLongField() {\r\n-        return this.longField;\r\n-    }\r\n-\r\n-    public void setLongField(long longField) {\r\n-        this.longField = longField;\r\n-    }\r\n-\r\n-    public short getShortField() {\r\n-        return this.shortField;\r\n-    }\r\n-\r\n-    public void setShortField(short shortField) {\r\n-        this.shortField = shortField;\r\n-    }\r\n-\r\n-    public String getStringField() {\r\n-        return this.stringField;\r\n-    }\r\n-\r\n-    public void setStringField(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public BigInteger getBigIntegerField() {\r\n-        return this.bigIntegerField;\r\n-    }\r\n-\r\n-    public void setBigIntegerField(BigInteger bigIntegerField) {\r\n-        this.bigIntegerField = bigIntegerField;\r\n-    }\r\n-\r\n-    public BigDecimal getBigDecimalField() {\r\n-        return this.bigDecimalField;\r\n-    }\r\n-\r\n-    public void setBigDecimalField(BigDecimal bigDecimalField) {\r\n-        this.bigDecimalField = bigDecimalField;\r\n-    }\r\n-\r\n-    public Date getDateField() {\r\n-        return this.dateField;\r\n-    }\r\n-\r\n-    public void setDateField(Date dateField) {\r\n-        this.dateField = dateField;\r\n-    }\r\n-\r\n-    public Locale getLocaleField() {\r\n-        return this.localeField;\r\n-    }\r\n-\r\n-    public void setLocaleField(Locale localeField) {\r\n-        this.localeField = localeField;\r\n-    }\r\n-\r\n-    public Byte getByteObjfield() {\r\n-        return this.byteObjfield;\r\n-    }\r\n-\r\n-    public void setByteObjfield(Byte byteObjfield) {\r\n-        this.byteObjfield = byteObjfield;\r\n-    }\r\n-\r\n-    public Boolean getBooleanObjField() {\r\n-        return this.booleanObjField;\r\n-    }\r\n-\r\n-    public void setBooleanObjField(Boolean booleanObjField) {\r\n-        this.booleanObjField = booleanObjField;\r\n-    }\r\n-\r\n-    public Character getCharObjField() {\r\n-        return this.charObjField;\r\n-    }\r\n-\r\n-    public void setCharObjField(Character charObjField) {\r\n-        this.charObjField = charObjField;\r\n-    }\r\n-\r\n-    public Double getDoubleObjField() {\r\n-        return this.doubleObjField;\r\n-    }\r\n-\r\n-    public void setDoubleObjField(Double doubleObjField) {\r\n-        this.doubleObjField = doubleObjField;\r\n-    }\r\n-\r\n-    public Float getFloatObjField() {\r\n-        return this.floatObjField;\r\n-    }\r\n-\r\n-    public void setFloatObjField(Float floatObjField) {\r\n-        this.floatObjField = floatObjField;\r\n-    }\r\n-\r\n-    public Integer getIntObjField() {\r\n-        return this.intObjField;\r\n-    }\r\n-\r\n-    public void setIntObjField(Integer intObjField) {\r\n-        this.intObjField = intObjField;\r\n-    }\r\n-\r\n-    public Long getLongObjField() {\r\n-        return this.longObjField;\r\n-    }\r\n-\r\n-    public void setLongObjField(Long longObjField) {\r\n-        this.longObjField = longObjField;\r\n-    }\r\n-\r\n-    public Short getShortObjField() {\r\n-        return this.shortObjField;\r\n-    }\r\n-\r\n-    public void setShortObjField(Short shortObjField) {\r\n-        this.shortObjField = shortObjField;\r\n-    }\r\n-\r\n-    public TransactionalClassPC getTransField() {\r\n-        return this.transField;\r\n-    }\r\n-\r\n-    public void setTransField(TransactionalClassPC transField) {\r\n-        this.transField = transField;\r\n-    }\r\n-\r\n-    public RuntimeTest1 getSelfOneOne() {\r\n-        return this.selfOneOne;\r\n-    }\r\n-\r\n-    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n-        this.selfOneOne = selfOneOne;\r\n-    }\r\n-\r\n-    public Set getSelfOneMany() {\r\n-        return this.selfOneMany;\r\n-    }\r\n-\r\n-    public void setSelfOneMany(Set selfOneMany) {\r\n-        this.selfOneMany = selfOneMany;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class RuntimeTest1\n+    implements Serializable {\n+\n+    public static final String someStaticField = \"someField\";\n+\n+    private byte byteField;\n+    private boolean booleanField;\n+    private char charField;\n+    private double doubleField;\n+    private float floatField;\n+    private int intField;\n+    private long longField;\n+    private short shortField;\n+    private String stringField;\n+    private BigInteger bigIntegerField;\n+    private BigDecimal bigDecimalField;\n+    private Date dateField;\n+    private Locale localeField;\n+    private Byte byteObjfield;\n+    private Boolean booleanObjField;\n+    private Character charObjField;\n+    private Double doubleObjField;\n+    private Float floatObjField;\n+    private Integer intObjField;\n+    private Long longObjField;\n+    private Short shortObjField;\n+\n+    // transactional only\n+    private TransactionalClassPC transField;\n+    public String transString;\n+\n+    // relations\n+    private RuntimeTest1 selfOneOne;\n+    private Set selfOneMany = new HashSet();\n+\n+    public RuntimeTest1() {\n+    }\n+\n+    public RuntimeTest1(String str, int i) {\n+        stringField = str;\n+        intField = i;\n+        //FIXME Seetha Oct 25,2006\n+        //mySQL 0.0 float issue\n+        floatField = 1.0f;\n+    }\n+\n+    public byte getByteField() {\n+        return this.byteField;\n+    }\n+\n+    public void setByteField(byte byteField) {\n+        this.byteField = byteField;\n+    }\n+\n+    public boolean getBooleanField() {\n+        return this.booleanField;\n+    }\n+\n+    public void setBooleanField(boolean booleanField) {\n+        this.booleanField = booleanField;\n+    }\n+\n+    public char getCharField() {\n+        return this.charField;\n+    }\n+\n+    public void setCharField(char charField) {\n+        this.charField = charField;\n+    }\n+\n+    public double getDoubleField() {\n+        return this.doubleField;\n+    }\n+\n+    public void setDoubleField(double doubleField) {\n+        this.doubleField = doubleField;\n+    }\n+\n+    public float getFloatField() {\n+        return this.floatField;\n+    }\n+\n+    public void setFloatField(float floatField) {\n+        this.floatField = floatField;\n+    }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public long getLongField() {\n+        return this.longField;\n+    }\n+\n+    public void setLongField(long longField) {\n+        this.longField = longField;\n+    }\n+\n+    public short getShortField() {\n+        return this.shortField;\n+    }\n+\n+    public void setShortField(short shortField) {\n+        this.shortField = shortField;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public BigInteger getBigIntegerField() {\n+        return this.bigIntegerField;\n+    }\n+\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\n+        this.bigIntegerField = bigIntegerField;\n+    }\n+\n+    public BigDecimal getBigDecimalField() {\n+        return this.bigDecimalField;\n+    }\n+\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\n+        this.bigDecimalField = bigDecimalField;\n+    }\n+\n+    public Date getDateField() {\n+        return this.dateField;\n+    }\n+\n+    public void setDateField(Date dateField) {\n+        this.dateField = dateField;\n+    }\n+\n+    public Locale getLocaleField() {\n+        return this.localeField;\n+    }\n+\n+    public void setLocaleField(Locale localeField) {\n+        this.localeField = localeField;\n+    }\n+\n+    public Byte getByteObjfield() {\n+        return this.byteObjfield;\n+    }\n+\n+    public void setByteObjfield(Byte byteObjfield) {\n+        this.byteObjfield = byteObjfield;\n+    }\n+\n+    public Boolean getBooleanObjField() {\n+        return this.booleanObjField;\n+    }\n+\n+    public void setBooleanObjField(Boolean booleanObjField) {\n+        this.booleanObjField = booleanObjField;\n+    }\n+\n+    public Character getCharObjField() {\n+        return this.charObjField;\n+    }\n+\n+    public void setCharObjField(Character charObjField) {\n+        this.charObjField = charObjField;\n+    }\n+\n+    public Double getDoubleObjField() {\n+        return this.doubleObjField;\n+    }\n+\n+    public void setDoubleObjField(Double doubleObjField) {\n+        this.doubleObjField = doubleObjField;\n+    }\n+\n+    public Float getFloatObjField() {\n+        return this.floatObjField;\n+    }\n+\n+    public void setFloatObjField(Float floatObjField) {\n+        this.floatObjField = floatObjField;\n+    }\n+\n+    public Integer getIntObjField() {\n+        return this.intObjField;\n+    }\n+\n+    public void setIntObjField(Integer intObjField) {\n+        this.intObjField = intObjField;\n+    }\n+\n+    public Long getLongObjField() {\n+        return this.longObjField;\n+    }\n+\n+    public void setLongObjField(Long longObjField) {\n+        this.longObjField = longObjField;\n+    }\n+\n+    public Short getShortObjField() {\n+        return this.shortObjField;\n+    }\n+\n+    public void setShortObjField(Short shortObjField) {\n+        this.shortObjField = shortObjField;\n+    }\n+\n+    public TransactionalClassPC getTransField() {\n+        return this.transField;\n+    }\n+\n+    public void setTransField(TransactionalClassPC transField) {\n+        this.transField = transField;\n+    }\n+\n+    public RuntimeTest1 getSelfOneOne() {\n+        return this.selfOneOne;\n+    }\n+\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\n+        this.selfOneOne = selfOneOne;\n+    }\n+\n+    public Set getSelfOneMany() {\n+        return this.selfOneMany;\n+    }\n+\n+    public void setSelfOneMany(Set selfOneMany) {\n+        this.selfOneMany = selfOneMany;\n+    }\n+}"},{"sha":"4f3d441d7aeb78ff12a3809ee877c363cc4be18a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class RuntimeTest2\r\n-    extends RuntimeTest1 {\r\n-\r\n-    private int intField2;\r\n-\r\n-    public RuntimeTest2() {\r\n-    }\r\n-\r\n-    public RuntimeTest2(String str, int i) {\r\n-        super(str, i);\r\n-    }\r\n-\r\n-    public int getIntField2() {\r\n-        return this.intField2;\r\n-    }\r\n-\r\n-    public void setIntField2(int intField2) {\r\n-        this.intField2 = intField2;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class RuntimeTest2\n+    extends RuntimeTest1 {\n+\n+    private int intField2;\n+\n+    public RuntimeTest2() {\n+    }\n+\n+    public RuntimeTest2(String str, int i) {\n+        super(str, i);\n+    }\n+\n+    public int getIntField2() {\n+        return this.intField2;\n+    }\n+\n+    public void setIntField2(int intField2) {\n+        this.intField2 = intField2;\n+    }\n+}"},{"sha":"e4b2af8926c7ba2129259a64c36e1831a877a1c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class RuntimeTest3\r\n-    extends RuntimeTest2 {\r\n-\r\n-    private int intField3;\r\n-\r\n-    public RuntimeTest3() {\r\n-    }\r\n-\r\n-    public RuntimeTest3(String str, int i) {\r\n-        super(str, i);\r\n-    }\r\n-\r\n-    public int getIntField3() {\r\n-        return this.intField3;\r\n-    }\r\n-\r\n-    public void setIntField3(int intField3) {\r\n-        this.intField3 = intField3;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class RuntimeTest3\n+    extends RuntimeTest2 {\n+\n+    private int intField3;\n+\n+    public RuntimeTest3() {\n+    }\n+\n+    public RuntimeTest3(String str, int i) {\n+        super(str, i);\n+    }\n+\n+    public int getIntField3() {\n+        return this.intField3;\n+    }\n+\n+    public void setIntField3(int intField3) {\n+        this.intField3 = intField3;\n+    }\n+}"},{"sha":"9329791130ceab04ce74bd8d411a8ddfa2a606ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,70 +1,70 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class SequenceAssigned {\r\n-\r\n-    private long pk;\r\n-    private SequenceAssigned other;\r\n-\r\n-    public void setPK(long l) {\r\n-        pk = l;\r\n-    }\r\n-\r\n-    public long getPK() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public void setOther(SequenceAssigned other) {\r\n-        this.other = other;\r\n-    }\r\n-\r\n-    public SequenceAssigned getOther() {\r\n-        return other;\r\n-    }\r\n-\r\n-    public static class Id implements java.io.Serializable {\r\n-\r\n-        public long pk;\r\n-\r\n-        public Id() {\r\n-        }\r\n-\r\n-        public Id(String str) {\r\n-            pk = Long.parseLong(str);\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return (int) (pk % (long) Integer.MAX_VALUE);\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk + \"\";\r\n-        }\r\n-\r\n-        public boolean equals(Object o) {\r\n-            if (o == null || !(o instanceof Id))\r\n-                return false;\r\n-            return pk == ((Id) o).pk;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SequenceAssigned {\n+\n+    private long pk;\n+    private SequenceAssigned other;\n+\n+    public void setPK(long l) {\n+        pk = l;\n+    }\n+\n+    public long getPK() {\n+        return pk;\n+    }\n+\n+    public void setOther(SequenceAssigned other) {\n+        this.other = other;\n+    }\n+\n+    public SequenceAssigned getOther() {\n+        return other;\n+    }\n+\n+    public static class Id implements java.io.Serializable {\n+\n+        public long pk;\n+\n+        public Id() {\n+        }\n+\n+        public Id(String str) {\n+            pk = Long.parseLong(str);\n+        }\n+\n+        public int hashCode() {\n+            return (int) (pk % (long) Integer.MAX_VALUE);\n+        }\n+\n+        public String toString() {\n+            return pk + \"\";\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == null || !(o instanceof Id))\n+                return false;\n+            return pk == ((Id) o).pk;\n+        }\n+    }\n+}"},{"sha":"be621bacc7f9a5d965585ecd9d4829bedd600e29","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,27 +1,27 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class SequenceAssigned2 extends SequenceAssigned {\r\n-\r\n-    private int foo;\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SequenceAssigned2 extends SequenceAssigned {\n+\n+    private int foo;\n+}"},{"sha":"a4d48cbd6733de21f91e4ff0e40fd5703d4701c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,62 +1,62 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class SequenceAssigned3 {\r\n-\r\n-    private Long pk;\r\n-\r\n-    public void setPK(Long l) {\r\n-        pk = l;\r\n-    }\r\n-\r\n-    public Long getPK() {\r\n-        return pk;\r\n-    }\r\n-\r\n-    public static class Id implements java.io.Serializable {\r\n-\r\n-        public Long pk;\r\n-\r\n-        public Id() {\r\n-        }\r\n-\r\n-        public Id(String str) {\r\n-            pk = Long.valueOf(str);\r\n-        }\r\n-\r\n-        public int hashCode() {\r\n-            return (int) (pk == null ? 0 : pk.longValue()\r\n-                % (long) Integer.MAX_VALUE);\r\n-        }\r\n-\r\n-        public String toString() {\r\n-            return pk + \"\";\r\n-        }\r\n-\r\n-        public boolean equals(Object o) {\r\n-            if (o == null || !(o instanceof Id))\r\n-                return false;\r\n-            return pk == ((Id) o).pk;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class SequenceAssigned3 {\n+\n+    private Long pk;\n+\n+    public void setPK(Long l) {\n+        pk = l;\n+    }\n+\n+    public Long getPK() {\n+        return pk;\n+    }\n+\n+    public static class Id implements java.io.Serializable {\n+\n+        public Long pk;\n+\n+        public Id() {\n+        }\n+\n+        public Id(String str) {\n+            pk = Long.valueOf(str);\n+        }\n+\n+        public int hashCode() {\n+            return (int) (pk == null ? 0 : pk.longValue()\n+                % (long) Integer.MAX_VALUE);\n+        }\n+\n+        public String toString() {\n+            return pk + \"\";\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == null || !(o instanceof Id))\n+                return false;\n+            return pk == ((Id) o).pk;\n+        }\n+    }\n+}"},{"sha":"47e2576b99e71c1d4fc8199c1eda003c93e5094f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-/**\r\n- * <p>Persitent type used in testing.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-\r\n-@Entity\r\n-public class TransactionalClassPC {\r\n-\r\n-    private int intField;\r\n-\r\n-    public int getIntField() {\r\n-        return this.intField;\r\n-    }\r\n-\r\n-    public void setIntField(int intField) {\r\n-        this.intField = intField;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * <p>Persitent type used in testing.</p>\n+ *\n+ * @author Abe White\n+ */\n+\n+@Entity\n+public class TransactionalClassPC {\n+\n+    private int intField;\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+}"},{"sha":"9193f882d92c37a39b521407acf9849abd820ab5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,89 +1,89 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.meta.common.apps;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class ValueStrategyPC {\r\n-\r\n-    private String uuid;\r\n-    private String uuidHex;\r\n-    private String name;\r\n-    private int ignoreUpdate;\r\n-    private int restrictUpdate;\r\n-    private int version;\r\n-    private int sequence;\r\n-\r\n-    public String getName() {\r\n-        return this.name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public int getIgnoreUpdate() {\r\n-        return this.ignoreUpdate;\r\n-    }\r\n-\r\n-    public void setIgnoreUpdate(int ignoreUpdate) {\r\n-        this.ignoreUpdate = ignoreUpdate;\r\n-    }\r\n-\r\n-    public int getRestrictUpdate() {\r\n-        return this.restrictUpdate;\r\n-    }\r\n-\r\n-    public void setRestrictUpdate(int restrictUpdate) {\r\n-        this.restrictUpdate = restrictUpdate;\r\n-    }\r\n-\r\n-    public String getUUID() {\r\n-        return this.uuid;\r\n-    }\r\n-\r\n-    public void setUUID(String uuid) {\r\n-        this.uuid = uuid;\r\n-    }\r\n-\r\n-    public String getUUIDHex() {\r\n-        return this.uuidHex;\r\n-    }\r\n-\r\n-    public void setUUIDHex(String uuidHex) {\r\n-        this.uuidHex = uuidHex;\r\n-    }\r\n-\r\n-    public int getVersion() {\r\n-        return this.version;\r\n-    }\r\n-\r\n-    public void setVersion(int version) {\r\n-        this.version = version;\r\n-    }\r\n-\r\n-    public int getSequence() {\r\n-        return this.sequence;\r\n-    }\r\n-\r\n-    public void setSequence(int sequence) {\r\n-        this.sequence = sequence;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.meta.common.apps;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ValueStrategyPC {\n+\n+    private String uuid;\n+    private String uuidHex;\n+    private String name;\n+    private int ignoreUpdate;\n+    private int restrictUpdate;\n+    private int version;\n+    private int sequence;\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getIgnoreUpdate() {\n+        return this.ignoreUpdate;\n+    }\n+\n+    public void setIgnoreUpdate(int ignoreUpdate) {\n+        this.ignoreUpdate = ignoreUpdate;\n+    }\n+\n+    public int getRestrictUpdate() {\n+        return this.restrictUpdate;\n+    }\n+\n+    public void setRestrictUpdate(int restrictUpdate) {\n+        this.restrictUpdate = restrictUpdate;\n+    }\n+\n+    public String getUUID() {\n+        return this.uuid;\n+    }\n+\n+    public void setUUID(String uuid) {\n+        this.uuid = uuid;\n+    }\n+\n+    public String getUUIDHex() {\n+        return this.uuidHex;\n+    }\n+\n+    public void setUUIDHex(String uuidHex) {\n+        this.uuidHex = uuidHex;\n+    }\n+\n+    public int getVersion() {\n+        return this.version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public int getSequence() {\n+        return this.sequence;\n+    }\n+\n+    public void setSequence(int sequence) {\n+        this.sequence = sequence;\n+    }\n+}"},{"sha":"fc214834fbcb237c5c67dd4290dc58da1fba782e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,58 +1,58 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.nullity;\r\n-\r\n-import java.io.Serializable;\r\n-\r\n-/**\r\n- * Simple serializable entity for testing null constraint on field values.\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class BlobValue implements Serializable {\r\n-    private static final long serialVersionUID = 833553627832894685L;\r\n-    private String  strVal;\r\n-    private int     intVal;\r\n-    private byte[]  bytes;\r\n-    \r\n-    public String getStrVal() {\r\n-        return strVal;\r\n-    }\r\n-    \r\n-    public void setStrVal(String strVal) {\r\n-        this.strVal = strVal;\r\n-    }\r\n-    \r\n-    public int getIntVal() {\r\n-        return intVal;\r\n-    }\r\n-    \r\n-    public void setIntVal(int intVal) {\r\n-        this.intVal = intVal;\r\n-    }\r\n-    \r\n-    public byte[] getBytes() {\r\n-        return bytes;\r\n-    }\r\n-    \r\n-    public void setBytes(byte[] bytes) {\r\n-        this.bytes = bytes;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Simple serializable entity for testing null constraint on field values.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class BlobValue implements Serializable {\n+    private static final long serialVersionUID = 833553627832894685L;\n+    private String  strVal;\n+    private int     intVal;\n+    private byte[]  bytes;\n+    \n+    public String getStrVal() {\n+        return strVal;\n+    }\n+    \n+    public void setStrVal(String strVal) {\n+        this.strVal = strVal;\n+    }\n+    \n+    public int getIntVal() {\n+        return intVal;\n+    }\n+    \n+    public void setIntVal(int intVal) {\n+        this.intVal = intVal;\n+    }\n+    \n+    public byte[] getBytes() {\n+        return bytes;\n+    }\n+    \n+    public void setBytes(byte[] bytes) {\n+        this.bytes = bytes;\n+    }\n+}"},{"sha":"a64bc7664d35ed188dd170378526e18eff101c8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":154,"deletions":154,"changes":308,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,154 +1,154 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.nullity;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-\r\n-/**\r\n- * Persistent entity used to test behavior of null constraint on basic fields.\r\n- *  \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-@Entity\r\n-public class NullValues {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\t\r\n-\t@Column(nullable=true)\r\n-\tprivate Integer nullable;\r\n-\t\r\n-\t@Column(nullable=false)\r\n-\tprivate Integer notNullable;\r\n-\t\r\n-\t@Basic(optional=true)\r\n-\tprivate Integer optional;\r\n-\t\r\n-\t@Basic(optional=false)\r\n-\tprivate Integer notOptional;\r\n-\t\r\n-\t@Column(nullable=true)\r\n-\tprivate BlobValue nullableBlob;\r\n-\t\r\n-\t@Column(nullable=false)\r\n-\tprivate BlobValue notNullableBlob;\r\n-\t\r\n-\t@Basic(optional=true)\r\n-\tprivate BlobValue optionalBlob;\r\n-\t\r\n-\t@Basic(optional=false)\r\n-\tprivate BlobValue notOptionalBlob;\r\n-\t\r\n-\t@Version\r\n-\tprivate int version;\r\n-\t\r\n-\t\r\n-\t/**\r\n-\t * Construct with all fields set to non-null values.\r\n-\t */\r\n-\tpublic NullValues() {\r\n-\t\tsetOptional(42);\r\n-\t\tsetNotOptional(42);\r\n-\t\tsetNotNullable(42);\r\n-\t\tsetNullable(42);\r\n-\t\t\r\n-\t\tsetNullableBlob(new BlobValue());\r\n-\t\tsetNotNullableBlob(new BlobValue());\r\n-\t\tsetOptionalBlob(new BlobValue());\r\n-\t\tsetNotOptionalBlob(new BlobValue());\r\n-\t}\r\n-\t\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-\tpublic Integer getNullable() {\r\n-\t\treturn nullable;\r\n-\t}\r\n-\t\r\n-\tpublic void setNullable(Integer nullable) {\r\n-\t\tthis.nullable = nullable;\r\n-\t}\r\n-\t\r\n-\tpublic Integer getNotNullable() {\r\n-\t\treturn notNullable;\r\n-\t}\r\n-\t\r\n-\tpublic void setNotNullable(Integer notNullable) {\r\n-\t\tthis.notNullable = notNullable;\r\n-\t}\r\n-\t\r\n-\tpublic Integer getOptional() {\r\n-\t\treturn optional;\r\n-\t}\r\n-\t\r\n-\tpublic void setOptional(Integer optional) {\r\n-\t\tthis.optional = optional;\r\n-\t}\r\n-\t\r\n-\tpublic Integer getNotOptional() {\r\n-\t\treturn notOptional;\r\n-\t}\r\n-\t\r\n-\tpublic void setNotOptional(Integer notOptional) {\r\n-\t\tthis.notOptional = notOptional;\r\n-\t}\r\n-\r\n-\tpublic BlobValue getNullableBlob() {\r\n-\t\treturn nullableBlob;\r\n-\t}\r\n-\r\n-\tpublic void setNullableBlob(BlobValue nullableBlob) {\r\n-\t\tthis.nullableBlob = nullableBlob;\r\n-\t}\r\n-\r\n-\tpublic BlobValue getNotNullableBlob() {\r\n-\t\treturn notNullableBlob;\r\n-\t}\r\n-\r\n-\tpublic void setNotNullableBlob(BlobValue notNullableBlob) {\r\n-\t\tthis.notNullableBlob = notNullableBlob;\r\n-\t}\r\n-\r\n-\tpublic BlobValue getOptionalBlob() {\r\n-\t\treturn optionalBlob;\r\n-\t}\r\n-\r\n-\tpublic void setOptionalBlob(BlobValue optionalBlob) {\r\n-\t\tthis.optionalBlob = optionalBlob;\r\n-\t}\r\n-\r\n-\tpublic BlobValue getNotOptionalBlob() {\r\n-\t\treturn notOptionalBlob;\r\n-\t}\r\n-\r\n-\tpublic void setNotOptionalBlob(BlobValue notOptionalBlob) {\r\n-\t\tthis.notOptionalBlob = notOptionalBlob;\r\n-\t}\r\n-\t\r\n-\tpublic int getVersion() { \r\n-\t    return version;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * Persistent entity used to test behavior of null constraint on basic fields.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+@Entity\n+public class NullValues {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\t\n+\t@Column(nullable=true)\n+\tprivate Integer nullable;\n+\t\n+\t@Column(nullable=false)\n+\tprivate Integer notNullable;\n+\t\n+\t@Basic(optional=true)\n+\tprivate Integer optional;\n+\t\n+\t@Basic(optional=false)\n+\tprivate Integer notOptional;\n+\t\n+\t@Column(nullable=true)\n+\tprivate BlobValue nullableBlob;\n+\t\n+\t@Column(nullable=false)\n+\tprivate BlobValue notNullableBlob;\n+\t\n+\t@Basic(optional=true)\n+\tprivate BlobValue optionalBlob;\n+\t\n+\t@Basic(optional=false)\n+\tprivate BlobValue notOptionalBlob;\n+\t\n+\t@Version\n+\tprivate int version;\n+\t\n+\t\n+\t/**\n+\t * Construct with all fields set to non-null values.\n+\t */\n+\tpublic NullValues() {\n+\t\tsetOptional(42);\n+\t\tsetNotOptional(42);\n+\t\tsetNotNullable(42);\n+\t\tsetNullable(42);\n+\t\t\n+\t\tsetNullableBlob(new BlobValue());\n+\t\tsetNotNullableBlob(new BlobValue());\n+\t\tsetOptionalBlob(new BlobValue());\n+\t\tsetNotOptionalBlob(new BlobValue());\n+\t}\n+\t\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\t\n+\tpublic Integer getNullable() {\n+\t\treturn nullable;\n+\t}\n+\t\n+\tpublic void setNullable(Integer nullable) {\n+\t\tthis.nullable = nullable;\n+\t}\n+\t\n+\tpublic Integer getNotNullable() {\n+\t\treturn notNullable;\n+\t}\n+\t\n+\tpublic void setNotNullable(Integer notNullable) {\n+\t\tthis.notNullable = notNullable;\n+\t}\n+\t\n+\tpublic Integer getOptional() {\n+\t\treturn optional;\n+\t}\n+\t\n+\tpublic void setOptional(Integer optional) {\n+\t\tthis.optional = optional;\n+\t}\n+\t\n+\tpublic Integer getNotOptional() {\n+\t\treturn notOptional;\n+\t}\n+\t\n+\tpublic void setNotOptional(Integer notOptional) {\n+\t\tthis.notOptional = notOptional;\n+\t}\n+\n+\tpublic BlobValue getNullableBlob() {\n+\t\treturn nullableBlob;\n+\t}\n+\n+\tpublic void setNullableBlob(BlobValue nullableBlob) {\n+\t\tthis.nullableBlob = nullableBlob;\n+\t}\n+\n+\tpublic BlobValue getNotNullableBlob() {\n+\t\treturn notNullableBlob;\n+\t}\n+\n+\tpublic void setNotNullableBlob(BlobValue notNullableBlob) {\n+\t\tthis.notNullableBlob = notNullableBlob;\n+\t}\n+\n+\tpublic BlobValue getOptionalBlob() {\n+\t\treturn optionalBlob;\n+\t}\n+\n+\tpublic void setOptionalBlob(BlobValue optionalBlob) {\n+\t\tthis.optionalBlob = optionalBlob;\n+\t}\n+\n+\tpublic BlobValue getNotOptionalBlob() {\n+\t\treturn notOptionalBlob;\n+\t}\n+\n+\tpublic void setNotOptionalBlob(BlobValue notOptionalBlob) {\n+\t\tthis.notOptionalBlob = notOptionalBlob;\n+\t}\n+\t\n+\tpublic int getVersion() { \n+\t    return version;\n+\t}\n+}"},{"sha":"0dfbfaa484f683df16bbb6b444162b43ffb0e976","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,117 +1,117 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.nullity;\r\n-\r\n-import javax.persistence.RollbackException;\r\n-\r\n-import org.apache.openjpa.persistence.InvalidStateException;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-\r\n-/**\r\n- * Test @Basic(optional=true|false) and @Column(nullable=true|false) \r\n- * specification is honored. \r\n- * Note: null constraint violation manifests as different exception types\r\n- * for option and nullable condition.\r\n- *\r\n- * @author Pinaki Poddar\r\n- */\r\n-public class TestBasicFieldNullity extends AbstractNullityTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(CLEAR_TABLES, NullValues.class);\r\n-    }\r\n-\r\n-    public void testNullOnOptionalFieldIsAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setOptional(null); \r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNullOnNonOptionalFieldIsDisallowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setNotOptional(null);\r\n-    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n-    }\r\n-    \r\n-    public void testNotNullOnOptionalFieldIsAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNotNullOnNonOptionalFieldIsAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNullOnNullableColumnAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setNullable(null);\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNullOnNonNullableColumnIsDisallowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setNotNullable(null);\r\n-    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n-    }\r\n-    \r\n-    public void testNotNullOnNullableColumnIsAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNotNullOnNonNullableColumnIsAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNullOnOptionalBlobFieldIsAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setOptionalBlob(null);\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNullOnNonOptionalBlobFieldIsDisallowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setNotOptionalBlob(null);\r\n-    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n-    }\r\n-    \r\n-    public void testNullOnNullableBlobColumnAllowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setNullableBlob(null);\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    }\r\n-    \r\n-    public void testNullOnNonNullableBlobColumnIsDisallowed() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tpc.setNotNullableBlob(null);\r\n-    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n-    }\r\n-    \r\n-    public void testX() {\r\n-    \tNullValues pc = new NullValues();\r\n-    \tassertCommitSucceeds(pc, NEW);\r\n-    \tOpenJPAPersistence.getEntityManager(pc).close();\r\n-    \t\r\n-    \tpc.setNotNullableBlob(null);\r\n-    \tassertCommitFails(pc, !NEW, RollbackException.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.RollbackException;\n+\n+import org.apache.openjpa.persistence.InvalidStateException;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+/**\n+ * Test @Basic(optional=true|false) and @Column(nullable=true|false) \n+ * specification is honored. \n+ * Note: null constraint violation manifests as different exception types\n+ * for option and nullable condition.\n+ *\n+ * @author Pinaki Poddar\n+ */\n+public class TestBasicFieldNullity extends AbstractNullityTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, NullValues.class);\n+    }\n+\n+    public void testNullOnOptionalFieldIsAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setOptional(null); \n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNullOnNonOptionalFieldIsDisallowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setNotOptional(null);\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\n+    }\n+    \n+    public void testNotNullOnOptionalFieldIsAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNotNullOnNonOptionalFieldIsAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNullOnNullableColumnAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setNullable(null);\n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNullOnNonNullableColumnIsDisallowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setNotNullable(null);\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\n+    }\n+    \n+    public void testNotNullOnNullableColumnIsAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNotNullOnNonNullableColumnIsAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNullOnOptionalBlobFieldIsAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setOptionalBlob(null);\n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNullOnNonOptionalBlobFieldIsDisallowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setNotOptionalBlob(null);\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\n+    }\n+    \n+    public void testNullOnNullableBlobColumnAllowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setNullableBlob(null);\n+    \tassertCommitSucceeds(pc, NEW);\n+    }\n+    \n+    public void testNullOnNonNullableBlobColumnIsDisallowed() {\n+    \tNullValues pc = new NullValues();\n+    \tpc.setNotNullableBlob(null);\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\n+    }\n+    \n+    public void testX() {\n+    \tNullValues pc = new NullValues();\n+    \tassertCommitSucceeds(pc, NEW);\n+    \tOpenJPAPersistence.getEntityManager(pc).close();\n+    \t\n+    \tpc.setNotNullableBlob(null);\n+    \tassertCommitFails(pc, !NEW, RollbackException.class);\n+    }\n+}\n+"},{"sha":"b58bfcd225a306c9d16e4640a60a01d8e883ae82","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","status":"modified","additions":183,"deletions":183,"changes":366,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TestProxyCollection.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,183 +1,183 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.proxy;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.util.ChangeTracker;\r\n-import org.apache.openjpa.util.ProxyCollection;\r\n-\r\n-/**\r\n- * Tests proxying and change tracking of collection fields for modification in\r\n- * detached state.\r\n- * \r\n- * Originally reported in\r\n- * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-628\">OPENJPA-628</A>\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestProxyCollection extends SingleEMFTestCase {\r\n-\tpublic void setUp() {\r\n-\t\tsuper.setUp(CLEAR_TABLES, TreeNode.class);\r\n-\t}\r\n-\t/**\r\n-\t * Tests that a uniform tree is created with expected fan outs at each \r\n-\t * level. This is not a persistent operation, just in-memory. \r\n-\t */\r\n-\tpublic void testCreateTree() {\r\n-\t\tTreeNode root = new TreeNode();\r\n-\t\troot.setName(\"0\");\r\n-\t\tint[] fanOuts = {1,2,3};\r\n-\t\troot.createTree(fanOuts);\r\n-\t\tassertArrayEquals(fanOuts, root.getFanOuts());\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Tests that a uniform tree can be modified with different fan outs at each \r\n-\t * level. This is not a persistent operation, just in-memory. \r\n-\t */\r\n-\tpublic void testModifyTree() {\r\n-\t\tint[] fanOuts = {1,2,2,4};\r\n-\t\tint[] newFanOuts = {1,3,1,2};\r\n-\t\tTreeNode root = new TreeNode();\r\n-\t\troot.createTree(fanOuts);\r\n-\t\tassertArrayEquals(fanOuts, root.getFanOuts());\r\n-\t\t\r\n-\t\troot.modify(newFanOuts);\r\n-\t\tassertArrayEquals(newFanOuts, root.getFanOuts());\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Tests that a uniform tree is persisted and later fetched back with same\r\n-\t * number of children at every level.\r\n-\t */\r\n-\tpublic void testPersistTree() {\r\n-\t\tint[] fanOuts = {2,3,4};\r\n-\t\tverify(create(fanOuts), fanOuts);\r\n-\t}\r\n-\t\r\n-\tpublic void testAddNodeAtLeaf() {\r\n-\t\tint[] original = {1,2,3};\r\n-\t\tint[] modifier = {1,2,4}; // add new child at Level 2\r\n-\t\tcreateModifyAndMerge(original, modifier);\r\n-\t}\r\n-\t\r\n-\tpublic void testAddNewLevel() {\r\n-\t\tint[] original = {1,2,3};\r\n-\t\tint[] modifier = {1,2,3,2}; // add 2 new children at new Level \r\n-\t\tcreateModifyAndMerge(original, modifier);\r\n-\t}\r\n-\t\r\n-\tpublic void testAddAndRemove() {\r\n-\t\tint[] original = {2,3,4};\r\n-\t\tint[] modifier = {4,3,2}; // add 1 at Level 1 + remove 1 at Level 3\r\n-\t\tcreateModifyAndMerge(original, modifier);\r\n-\t}\r\n-\t\r\n-\tpublic void testAddAtAllLevel() {\r\n-\t\tint[] original = {2,3,4};\r\n-\t\tint[] modifier = {3,4,5}; // add 1 at each Level \r\n-\t\tcreateModifyAndMerge(original, modifier);\r\n-\t}\r\n-\t\r\n-\tpublic void testRemoveAtAllLevel() {\r\n-\t\tint[] original = {2,3,4};\r\n-\t\tint[] modifier = {1,2,3}; // remove 1 from each Level \r\n-\t\tcreateModifyAndMerge(original, modifier);\r\n-\t}\r\n-\t/**\r\n-\t * Create a uniform tree with original fanout.\r\n-\t * Persist.\r\n-\t * Verify in a separate persistence context that the tree is stored.\r\n-\t * Modify the tree by adding or deleting nodes according to the given \r\n-\t * modified fanouts outside a transaction.\r\n-\t * Merge the changes.\r\n-\t * Verify that the changes are merged by fetching the modified version.\r\n-\t * \r\n-\t * @param original\r\n-\t * @param modified\r\n-\t */\r\n-\tvoid createModifyAndMerge(int[] original, int[] modifier) {\r\n-\t\tTreeNode root = create(original);\r\n-\t\t\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tTreeNode modified = em.find(TreeNode.class, root.getId());\r\n-\t\tmodified.modify(modifier);\r\n-\t\tem.merge(modified);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t\t\r\n-\t\tassertProxyCollection(root.getNodes(), false);\r\n-\t\t\r\n-\t\tverify(root, modifier);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * Create a uniform tree with given fan out.\r\n-\t * Persist.\r\n-\t * Verify that the tree is stored by fetching it in a separate persistence\r\n-\t * context.\r\n-\t */\r\n-\tTreeNode create(int[] original) {\r\n-\t\tTreeNode root = new TreeNode();\r\n-\t\troot.createTree(original);\r\n-\t\t\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tem.persist(root);\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t\t\r\n-\t\treturn root;\r\n-\t}\r\n-\t\r\n-\tvoid verify(TreeNode node, int[] fanOuts) {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tTreeNode test = em.find(TreeNode.class, node.getId());\r\n-\t\tassertNotNull(test);\r\n-\t\tassertArrayEquals(fanOuts, test.getFanOuts());\r\n-\t}\r\n-\r\n-\t/** Asserts the given arrays have exactly same elements at the same index.\r\n-\t*/\r\n-\tvoid assertArrayEquals(int[] a, int[] b) {\r\n-\t\tassertEquals(a.length, b.length);\r\n-\t\tfor (int i = 0; i<a.length; i++)\r\n-\t\t\tassertEquals(a[i], b[i]);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Asserts that the given object is a proxy collection and whether it is \r\n-\t * tracking changes.\r\n-\t */\r\n-\tvoid assertProxyCollection(Object o, boolean tracking) {\r\n-\t\tassertTrue(o instanceof ProxyCollection);\r\n-\t\tChangeTracker tracker = ((ProxyCollection)o).getChangeTracker();\r\n-\t\tif (tracking) {\r\n-\t\t\tassertNotNull(tracker);\r\n-\t\t\tassertTrue(tracker.isTracking());\r\n-\t\t} else {\r\n-\t\t\tassertFalse(tracker.isTracking());\r\n-\t\t}\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.util.ChangeTracker;\n+import org.apache.openjpa.util.ProxyCollection;\n+\n+/**\n+ * Tests proxying and change tracking of collection fields for modification in\n+ * detached state.\n+ * \n+ * Originally reported in\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-628\">OPENJPA-628</A>\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestProxyCollection extends SingleEMFTestCase {\n+\tpublic void setUp() {\n+\t\tsuper.setUp(CLEAR_TABLES, TreeNode.class);\n+\t}\n+\t/**\n+\t * Tests that a uniform tree is created with expected fan outs at each \n+\t * level. This is not a persistent operation, just in-memory. \n+\t */\n+\tpublic void testCreateTree() {\n+\t\tTreeNode root = new TreeNode();\n+\t\troot.setName(\"0\");\n+\t\tint[] fanOuts = {1,2,3};\n+\t\troot.createTree(fanOuts);\n+\t\tassertArrayEquals(fanOuts, root.getFanOuts());\n+\t}\n+\t\n+\t/**\n+\t * Tests that a uniform tree can be modified with different fan outs at each \n+\t * level. This is not a persistent operation, just in-memory. \n+\t */\n+\tpublic void testModifyTree() {\n+\t\tint[] fanOuts = {1,2,2,4};\n+\t\tint[] newFanOuts = {1,3,1,2};\n+\t\tTreeNode root = new TreeNode();\n+\t\troot.createTree(fanOuts);\n+\t\tassertArrayEquals(fanOuts, root.getFanOuts());\n+\t\t\n+\t\troot.modify(newFanOuts);\n+\t\tassertArrayEquals(newFanOuts, root.getFanOuts());\n+\t}\n+\t\n+\t/**\n+\t * Tests that a uniform tree is persisted and later fetched back with same\n+\t * number of children at every level.\n+\t */\n+\tpublic void testPersistTree() {\n+\t\tint[] fanOuts = {2,3,4};\n+\t\tverify(create(fanOuts), fanOuts);\n+\t}\n+\t\n+\tpublic void testAddNodeAtLeaf() {\n+\t\tint[] original = {1,2,3};\n+\t\tint[] modifier = {1,2,4}; // add new child at Level 2\n+\t\tcreateModifyAndMerge(original, modifier);\n+\t}\n+\t\n+\tpublic void testAddNewLevel() {\n+\t\tint[] original = {1,2,3};\n+\t\tint[] modifier = {1,2,3,2}; // add 2 new children at new Level \n+\t\tcreateModifyAndMerge(original, modifier);\n+\t}\n+\t\n+\tpublic void testAddAndRemove() {\n+\t\tint[] original = {2,3,4};\n+\t\tint[] modifier = {4,3,2}; // add 1 at Level 1 + remove 1 at Level 3\n+\t\tcreateModifyAndMerge(original, modifier);\n+\t}\n+\t\n+\tpublic void testAddAtAllLevel() {\n+\t\tint[] original = {2,3,4};\n+\t\tint[] modifier = {3,4,5}; // add 1 at each Level \n+\t\tcreateModifyAndMerge(original, modifier);\n+\t}\n+\t\n+\tpublic void testRemoveAtAllLevel() {\n+\t\tint[] original = {2,3,4};\n+\t\tint[] modifier = {1,2,3}; // remove 1 from each Level \n+\t\tcreateModifyAndMerge(original, modifier);\n+\t}\n+\t/**\n+\t * Create a uniform tree with original fanout.\n+\t * Persist.\n+\t * Verify in a separate persistence context that the tree is stored.\n+\t * Modify the tree by adding or deleting nodes according to the given \n+\t * modified fanouts outside a transaction.\n+\t * Merge the changes.\n+\t * Verify that the changes are merged by fetching the modified version.\n+\t * \n+\t * @param original\n+\t * @param modified\n+\t */\n+\tvoid createModifyAndMerge(int[] original, int[] modifier) {\n+\t\tTreeNode root = create(original);\n+\t\t\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tTreeNode modified = em.find(TreeNode.class, root.getId());\n+\t\tmodified.modify(modifier);\n+\t\tem.merge(modified);\n+\t\tem.getTransaction().commit();\n+\t\tem.clear();\n+\t\t\n+\t\tassertProxyCollection(root.getNodes(), false);\n+\t\t\n+\t\tverify(root, modifier);\n+\t}\n+\t\n+\t/**\n+\t * Create a uniform tree with given fan out.\n+\t * Persist.\n+\t * Verify that the tree is stored by fetching it in a separate persistence\n+\t * context.\n+\t */\n+\tTreeNode create(int[] original) {\n+\t\tTreeNode root = new TreeNode();\n+\t\troot.createTree(original);\n+\t\t\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tem.persist(root);\n+\t\tem.getTransaction().commit();\n+\t\tem.clear();\n+\t\t\n+\t\treturn root;\n+\t}\n+\t\n+\tvoid verify(TreeNode node, int[] fanOuts) {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tTreeNode test = em.find(TreeNode.class, node.getId());\n+\t\tassertNotNull(test);\n+\t\tassertArrayEquals(fanOuts, test.getFanOuts());\n+\t}\n+\n+\t/** Asserts the given arrays have exactly same elements at the same index.\n+\t*/\n+\tvoid assertArrayEquals(int[] a, int[] b) {\n+\t\tassertEquals(a.length, b.length);\n+\t\tfor (int i = 0; i<a.length; i++)\n+\t\t\tassertEquals(a[i], b[i]);\n+\t}\n+\n+\t/**\n+\t * Asserts that the given object is a proxy collection and whether it is \n+\t * tracking changes.\n+\t */\n+\tvoid assertProxyCollection(Object o, boolean tracking) {\n+\t\tassertTrue(o instanceof ProxyCollection);\n+\t\tChangeTracker tracker = ((ProxyCollection)o).getChangeTracker();\n+\t\tif (tracking) {\n+\t\t\tassertNotNull(tracker);\n+\t\t\tassertTrue(tracker.isTracking());\n+\t\t} else {\n+\t\t\tassertFalse(tracker.isTracking());\n+\t\t}\n+\t}\n+}"},{"sha":"303e95a557e1d3437af39f02ea11ac8b154f3c4b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TreeNode.java","status":"modified","additions":231,"deletions":231,"changes":462,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TreeNode.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TreeNode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/proxy/TreeNode.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,231 +1,231 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.proxy;\r\n-\r\n-import java.io.PrintStream;\r\n-import java.io.Serializable;\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToMany;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-import org.apache.openjpa.persistence.DetachedState;\r\n-import org.apache.openjpa.persistence.ElementDependent;\r\n-import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\r\n-import org.apache.openjpa.persistence.jdbc.OrderColumn;\r\n-\r\n-/**\r\n- * Persistent entity for testing adding/removing elements of collection valued\r\n- * field while in detached state.\r\n- * \r\n- * Node refers to a list of Nodes as children.\r\n- * \r\n- * Contains recursive methods to create or modify uniform subtree. Uniform\r\n- * subtree implies that each child at a level L has equal number of\r\n- * grand children at level L+1.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-@Entity\r\n-@DetachedState\r\n-public class TreeNode implements Serializable {\r\n-\t@Id\r\n-\t@GeneratedValue\r\n-\tprivate long id;\r\n-\r\n-\tprivate String name;\r\n-\r\n-\t@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\r\n-\t@ElementJoinColumn(name = \"ParentID\")\r\n-\t@OrderColumn(name = \"Sequence\")\r\n-\t@ElementDependent\r\n-\tprivate List<TreeNode> childern = new ArrayList<TreeNode>();\r\n-\r\n-\t@Version\r\n-\tprivate int version;\r\n-\r\n-\tpublic long getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\r\n-\tpublic String getName() {\r\n-\t\treturn name;\r\n-\t}\r\n-\r\n-\tpublic void setName(String name) {\r\n-\t\tthis.name = name;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Add a child node at the end of the current list of children.\r\n-\t */\r\n-\tpublic void addNode(TreeNode node) {\r\n-\t\taddNode(node, childern.size());\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Insert a child node at the specified position in the list of children.\r\n-\t */\r\n-\tpublic void addNode(TreeNode node, int position) {\r\n-\t\tcheckSequenceRange(position);\r\n-\t\tchildern.add(position, node);\r\n-\t}\r\n-\r\n-\tpublic boolean removeNode(TreeNode node) {\r\n-\t\treturn childern.remove(node);\r\n-\t}\r\n-\r\n-\tpublic TreeNode removeNode(int sequence) {\r\n-\t\tcheckSequenceRange(sequence);\r\n-\t\treturn childern.remove(sequence);\r\n-\t}\r\n-\r\n-\tpublic TreeNode getNode(int sequence) {\r\n-\t\tcheckSequenceRange(sequence);\r\n-\t\treturn childern.get(sequence);\r\n-\t}\r\n-\r\n-\tpublic List<TreeNode> getNodes() {\r\n-\t\treturn childern;\r\n-\t}\r\n-\r\n-\tpublic void clearNodes() {\r\n-\t\tchildern.clear();\r\n-\t}\r\n-\r\n-\tpublic boolean isLeaf() {\r\n-\t\treturn childern.isEmpty();\r\n-\t}\r\n-\r\n-\tprotected void checkSequenceRange(int sequence)\r\n-\t\t\tthrows IllegalArgumentException {\r\n-\t\tint size = childern.size();\r\n-\t\tif (sequence < 0 || sequence > size)\r\n-\t\t\tthrow new IllegalArgumentException(\"Sequence number is beyond \"\r\n-\t\t\t\t\t+ \"range of 0 to \" + size + \".\");\r\n-\t}\r\n-\r\n-\tpublic int getVersion() {\r\n-\t\treturn version;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Create a uniform subtree below the receiver. Uniform subtree implies that\r\n-\t * each child at a level L has equal number of grand children at level L+1.\r\n-\t * \r\n-\t * @param fanOuts\r\n-\t *            array of fan outs for children at every level.\r\n-\t */\r\n-\tpublic void createTree(int[] fanOuts) {\r\n-\t\tif (fanOuts.length == 0)\r\n-\t\t\treturn;\r\n-\t\tint[] nextFanOuts = new int[fanOuts.length];\r\n-\t\tSystem.arraycopy(fanOuts, 1, nextFanOuts, 0, fanOuts.length - 1);\r\n-\t\tfor (int j = 0; j < fanOuts[0]; j++) {\r\n-\t\t\tTreeNode child = new TreeNode();\r\n-\t\t\tchild.setName(getName() + \".\" + j);\r\n-\t\t\taddNode(child);\r\n-\t\t\tchild.createTree(nextFanOuts);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Add or remove subtree of the receiver to match the given fanOut.\r\n-\t */\r\n-\tpublic void modify(int[] fanOuts) {\r\n-\t\tif (fanOuts == null || fanOuts.length == 0)\r\n-\t\t\treturn;\r\n-\t\tint n = fanOuts[0];\r\n-\t\tint[] nextFanOuts = new int[fanOuts.length];\r\n-\t\tSystem.arraycopy(fanOuts, 1, nextFanOuts, 0, fanOuts.length - 1);\r\n-\t\tList<TreeNode> children = getNodes();\r\n-\t\tint diff = children.size() - n;\r\n-\t\tif (diff < 0) {\r\n-\t\t\tfor (int i = 0; i < -diff; i++) {\r\n-\t\t\t\tTreeNode newChild = new TreeNode();\r\n-\t\t\t\tint position = getNodes().size();\r\n-\t\t\t\tnewChild.setName(getName() + \".\" + position);\r\n-\t\t\t\taddNode(newChild);\r\n-\t\t\t}\r\n-\t\t} else if (diff > 0) {\r\n-\t\t\tfor (int i = 0; i < diff; i++) {\r\n-\t\t\t\tint position = getNodes().size() - 1;\r\n-\t\t\t\tremoveNode(position);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tchildren = getNodes();\r\n-\t\tfor (TreeNode child : children) {\r\n-\t\t\tchild.modify(nextFanOuts);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Get the fan outs of the given receiver. Assumes that the subtree is\r\n-\t * uniform. Otherwise throws exception.\r\n-\t */\r\n-\tpublic int[] getFanOuts() {\r\n-\t\treturn getFanOuts(new int[] {});\r\n-\t}\r\n-\r\n-\tprivate int[] getFanOuts(int[] list) {\r\n-\t\tList<TreeNode> children = getNodes();\r\n-\t\tif (children.isEmpty())\r\n-\t\t\treturn list;\r\n-\t\tint[] fanOuts = new int[children.size()];\r\n-\t\tint i = 0;\r\n-\t\tfor (TreeNode child : children) {\r\n-\t\t\tfanOuts[i++] = child.getNodes().size();\r\n-\t\t}\r\n-\t\tfor (int j = 0; j < fanOuts.length - 1; j++)\r\n-\t\t\tif (fanOuts[j] != fanOuts[j + 1])\r\n-\t\t\t\tthrow new RuntimeException(\"non-uniform fanouts for children \"\r\n-\t\t\t\t\t\t+ \" of \" + getName());\r\n-\r\n-\t\tint[] newList = new int[list.length + 1];\r\n-\t\tSystem.arraycopy(list, 0, newList, 0, list.length);\r\n-\t\tnewList[list.length] = children.size();\r\n-\t\treturn children.get(0).getFanOuts(newList);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Prints this receiver and its subtree.\r\n-\t */\r\n-\tpublic void print(PrintStream out) {\r\n-\t\tprint(2, out);\r\n-\t}\r\n-\r\n-\tprivate void print(int tab, PrintStream out) {\r\n-\t\tfor (int i = 0; i < tab; i++)\r\n-\t\t\tout.print(\" \");\r\n-\t\tout.println(getName());\r\n-\t\tfor (TreeNode child : getNodes()) {\r\n-\t\t\tchild.print(tab + 2, out);\r\n-\t\t}\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.proxy;\n+\n+import java.io.PrintStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.DetachedState;\n+import org.apache.openjpa.persistence.ElementDependent;\n+import org.apache.openjpa.persistence.jdbc.ElementJoinColumn;\n+import org.apache.openjpa.persistence.jdbc.OrderColumn;\n+\n+/**\n+ * Persistent entity for testing adding/removing elements of collection valued\n+ * field while in detached state.\n+ * \n+ * Node refers to a list of Nodes as children.\n+ * \n+ * Contains recursive methods to create or modify uniform subtree. Uniform\n+ * subtree implies that each child at a level L has equal number of\n+ * grand children at level L+1.\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+@Entity\n+@DetachedState\n+public class TreeNode implements Serializable {\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long id;\n+\n+\tprivate String name;\n+\n+\t@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n+\t@ElementJoinColumn(name = \"ParentID\")\n+\t@OrderColumn(name = \"Sequence\")\n+\t@ElementDependent\n+\tprivate List<TreeNode> childern = new ArrayList<TreeNode>();\n+\n+\t@Version\n+\tprivate int version;\n+\n+\tpublic long getId() {\n+\t\treturn id;\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\t/**\n+\t * Add a child node at the end of the current list of children.\n+\t */\n+\tpublic void addNode(TreeNode node) {\n+\t\taddNode(node, childern.size());\n+\t}\n+\n+\t/**\n+\t * Insert a child node at the specified position in the list of children.\n+\t */\n+\tpublic void addNode(TreeNode node, int position) {\n+\t\tcheckSequenceRange(position);\n+\t\tchildern.add(position, node);\n+\t}\n+\n+\tpublic boolean removeNode(TreeNode node) {\n+\t\treturn childern.remove(node);\n+\t}\n+\n+\tpublic TreeNode removeNode(int sequence) {\n+\t\tcheckSequenceRange(sequence);\n+\t\treturn childern.remove(sequence);\n+\t}\n+\n+\tpublic TreeNode getNode(int sequence) {\n+\t\tcheckSequenceRange(sequence);\n+\t\treturn childern.get(sequence);\n+\t}\n+\n+\tpublic List<TreeNode> getNodes() {\n+\t\treturn childern;\n+\t}\n+\n+\tpublic void clearNodes() {\n+\t\tchildern.clear();\n+\t}\n+\n+\tpublic boolean isLeaf() {\n+\t\treturn childern.isEmpty();\n+\t}\n+\n+\tprotected void checkSequenceRange(int sequence)\n+\t\t\tthrows IllegalArgumentException {\n+\t\tint size = childern.size();\n+\t\tif (sequence < 0 || sequence > size)\n+\t\t\tthrow new IllegalArgumentException(\"Sequence number is beyond \"\n+\t\t\t\t\t+ \"range of 0 to \" + size + \".\");\n+\t}\n+\n+\tpublic int getVersion() {\n+\t\treturn version;\n+\t}\n+\n+\t/**\n+\t * Create a uniform subtree below the receiver. Uniform subtree implies that\n+\t * each child at a level L has equal number of grand children at level L+1.\n+\t * \n+\t * @param fanOuts\n+\t *            array of fan outs for children at every level.\n+\t */\n+\tpublic void createTree(int[] fanOuts) {\n+\t\tif (fanOuts.length == 0)\n+\t\t\treturn;\n+\t\tint[] nextFanOuts = new int[fanOuts.length];\n+\t\tSystem.arraycopy(fanOuts, 1, nextFanOuts, 0, fanOuts.length - 1);\n+\t\tfor (int j = 0; j < fanOuts[0]; j++) {\n+\t\t\tTreeNode child = new TreeNode();\n+\t\t\tchild.setName(getName() + \".\" + j);\n+\t\t\taddNode(child);\n+\t\t\tchild.createTree(nextFanOuts);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Add or remove subtree of the receiver to match the given fanOut.\n+\t */\n+\tpublic void modify(int[] fanOuts) {\n+\t\tif (fanOuts == null || fanOuts.length == 0)\n+\t\t\treturn;\n+\t\tint n = fanOuts[0];\n+\t\tint[] nextFanOuts = new int[fanOuts.length];\n+\t\tSystem.arraycopy(fanOuts, 1, nextFanOuts, 0, fanOuts.length - 1);\n+\t\tList<TreeNode> children = getNodes();\n+\t\tint diff = children.size() - n;\n+\t\tif (diff < 0) {\n+\t\t\tfor (int i = 0; i < -diff; i++) {\n+\t\t\t\tTreeNode newChild = new TreeNode();\n+\t\t\t\tint position = getNodes().size();\n+\t\t\t\tnewChild.setName(getName() + \".\" + position);\n+\t\t\t\taddNode(newChild);\n+\t\t\t}\n+\t\t} else if (diff > 0) {\n+\t\t\tfor (int i = 0; i < diff; i++) {\n+\t\t\t\tint position = getNodes().size() - 1;\n+\t\t\t\tremoveNode(position);\n+\t\t\t}\n+\t\t}\n+\t\tchildren = getNodes();\n+\t\tfor (TreeNode child : children) {\n+\t\t\tchild.modify(nextFanOuts);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get the fan outs of the given receiver. Assumes that the subtree is\n+\t * uniform. Otherwise throws exception.\n+\t */\n+\tpublic int[] getFanOuts() {\n+\t\treturn getFanOuts(new int[] {});\n+\t}\n+\n+\tprivate int[] getFanOuts(int[] list) {\n+\t\tList<TreeNode> children = getNodes();\n+\t\tif (children.isEmpty())\n+\t\t\treturn list;\n+\t\tint[] fanOuts = new int[children.size()];\n+\t\tint i = 0;\n+\t\tfor (TreeNode child : children) {\n+\t\t\tfanOuts[i++] = child.getNodes().size();\n+\t\t}\n+\t\tfor (int j = 0; j < fanOuts.length - 1; j++)\n+\t\t\tif (fanOuts[j] != fanOuts[j + 1])\n+\t\t\t\tthrow new RuntimeException(\"non-uniform fanouts for children \"\n+\t\t\t\t\t\t+ \" of \" + getName());\n+\n+\t\tint[] newList = new int[list.length + 1];\n+\t\tSystem.arraycopy(list, 0, newList, 0, list.length);\n+\t\tnewList[list.length] = children.size();\n+\t\treturn children.get(0).getFanOuts(newList);\n+\t}\n+\n+\t/**\n+\t * Prints this receiver and its subtree.\n+\t */\n+\tpublic void print(PrintStream out) {\n+\t\tprint(2, out);\n+\t}\n+\n+\tprivate void print(int tab, PrintStream out) {\n+\t\tfor (int i = 0; i < tab; i++)\n+\t\t\tout.print(\" \");\n+\t\tout.println(getName());\n+\t\tfor (TreeNode child : getNodes()) {\n+\t\t\tchild.print(tab + 2, out);\n+\t\t}\n+\t}\n+\n+}"},{"sha":"e4fc151d753dcf1e3dca8d24684790cd03e2f845","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","status":"modified","additions":146,"deletions":146,"changes":292,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,146 +1,146 @@\n-/*\r\n- * BaseKernelTest.java\r\n- *\r\n- * Created on October 9, 2006, 12:56 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Properties;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public abstract class BaseQueryTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase {\r\n-\r\n-    private static Map _sysprops = new HashMap();\r\n-\r\n-    /**\r\n-     * Creates a new instance of BaseQueryTest\r\n-     */\r\n-    public BaseQueryTest(String name) {\r\n-        super(name, \"querycactusapp\");\r\n-    }\r\n-\r\n-    protected OpenJPAEntityManager getEM() {\r\n-        return (OpenJPAEntityManager) currentEntityManager();\r\n-    }\r\n-\r\n-    protected OpenJPAEntityManager getEM(boolean optimistic,\r\n-        boolean retainValues) {\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        em.setNontransactionalRead(true);\r\n-        em.setRetainState(retainValues);\r\n-        em.setOptimistic(optimistic);\r\n-        return em;\r\n-    }\r\n-\r\n-    /**\r\n-     * Delete all instances of the given class.\r\n-     */\r\n-    protected int deleteAll(Broker broker, Class clazz,\r\n-        boolean subclasses) {\r\n-        final boolean useDeleteByQuery = false;\r\n-\r\n-        if (useDeleteByQuery) {\r\n-            org.apache.openjpa.kernel.Query query = broker.newQuery(\r\n-                JPQLParser.LANG_JPQL, clazz, \"\");\r\n-            query.setCandidateType(clazz, subclasses);\r\n-            return (int) query.deleteAll();\r\n-        } else {\r\n-            org.apache.openjpa.kernel.Extent extent =\r\n-                broker.newExtent(clazz, subclasses);\r\n-            List list = extent.list();\r\n-            int size = list.size();\r\n-            broker.deleteAll(list, null);\r\n-            return size;\r\n-        }\r\n-    }\r\n-\r\n-    protected Object persist(Object ob) {\r\n-        Broker broker = getBrokerFactory().newBroker();\r\n-        broker.begin();\r\n-        broker.persist(ob, null);\r\n-        Object id = broker.getObjectId(ob);\r\n-        broker.commit();\r\n-        broker.close();\r\n-        return id;\r\n-    }\r\n-\r\n-    protected Properties getProperties() {\r\n-        return getProperties(null);\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the runtime properties, optionally overriding or setting\r\n-     * some via the given array, which should be in the form\r\n-     * { key, val, key, val, ... }.\r\n-     */\r\n-    protected synchronized Properties getProperties(String[] props) {\r\n-        Properties p = new Properties(System.getProperties());\r\n-        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n-        if (str != null && str.length() > 0) {\r\n-            // cache system properties to reduce load on file system\r\n-            Properties loaded = (Properties) _sysprops.get(str);\r\n-            if (loaded == null) {\r\n-                loaded = new Properties();\r\n-                ConfigurationProvider cp =\r\n-                    (ConfigurationProvider) Configurations\r\n-                        .getProperty(str, null);\r\n-                if (cp != null)\r\n-                    loaded.putAll(cp.getProperties());\r\n-                _sysprops.put(str, loaded);\r\n-            }\r\n-            p.putAll(loaded);\r\n-        }\r\n-\r\n-        for (int i = 0; props != null && i < props.length; i += 2) {\r\n-            if (props[i + 1] != null) {\r\n-                // remove any duplicate kodo/openjpa property so we don't clash\r\n-                if (props[i].startsWith(\"openjpa.\"))\r\n-                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n-                else if (props[i].startsWith(\"openjpa.\"))\r\n-                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n-\r\n-                p.setProperty(props[i], props[i + 1]);\r\n-            } else {\r\n-                p.remove(props[i]);\r\n-            }\r\n-        }\r\n-        return p;\r\n-    }\r\n-}\r\n+/*\n+ * BaseKernelTest.java\n+ *\n+ * Created on October 9, 2006, 12:56 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.persistence.EntityManager;\n+\n+\n+\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public abstract class BaseQueryTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase {\n+\n+    private static Map _sysprops = new HashMap();\n+\n+    /**\n+     * Creates a new instance of BaseQueryTest\n+     */\n+    public BaseQueryTest(String name) {\n+        super(name, \"querycactusapp\");\n+    }\n+\n+    protected OpenJPAEntityManager getEM() {\n+        return (OpenJPAEntityManager) currentEntityManager();\n+    }\n+\n+    protected OpenJPAEntityManager getEM(boolean optimistic,\n+        boolean retainValues) {\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        em.setNontransactionalRead(true);\n+        em.setRetainState(retainValues);\n+        em.setOptimistic(optimistic);\n+        return em;\n+    }\n+\n+    /**\n+     * Delete all instances of the given class.\n+     */\n+    protected int deleteAll(Broker broker, Class clazz,\n+        boolean subclasses) {\n+        final boolean useDeleteByQuery = false;\n+\n+        if (useDeleteByQuery) {\n+            org.apache.openjpa.kernel.Query query = broker.newQuery(\n+                JPQLParser.LANG_JPQL, clazz, \"\");\n+            query.setCandidateType(clazz, subclasses);\n+            return (int) query.deleteAll();\n+        } else {\n+            org.apache.openjpa.kernel.Extent extent =\n+                broker.newExtent(clazz, subclasses);\n+            List list = extent.list();\n+            int size = list.size();\n+            broker.deleteAll(list, null);\n+            return size;\n+        }\n+    }\n+\n+    protected Object persist(Object ob) {\n+        Broker broker = getBrokerFactory().newBroker();\n+        broker.begin();\n+        broker.persist(ob, null);\n+        Object id = broker.getObjectId(ob);\n+        broker.commit();\n+        broker.close();\n+        return id;\n+    }\n+\n+    protected Properties getProperties() {\n+        return getProperties(null);\n+    }\n+\n+    /**\n+     * Return the runtime properties, optionally overriding or setting\n+     * some via the given array, which should be in the form\n+     * { key, val, key, val, ... }.\n+     */\n+    protected synchronized Properties getProperties(String[] props) {\n+        Properties p = new Properties(System.getProperties());\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\n+        if (str != null && str.length() > 0) {\n+            // cache system properties to reduce load on file system\n+            Properties loaded = (Properties) _sysprops.get(str);\n+            if (loaded == null) {\n+                loaded = new Properties();\n+                ConfigurationProvider cp =\n+                    (ConfigurationProvider) Configurations\n+                        .getProperty(str, null);\n+                if (cp != null)\n+                    loaded.putAll(cp.getProperties());\n+                _sysprops.put(str, loaded);\n+            }\n+            p.putAll(loaded);\n+        }\n+\n+        for (int i = 0; props != null && i < props.length; i += 2) {\n+            if (props[i + 1] != null) {\n+                // remove any duplicate kodo/openjpa property so we don't clash\n+                if (props[i].startsWith(\"openjpa.\"))\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\n+                else if (props[i].startsWith(\"openjpa.\"))\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\n+\n+                p.setProperty(props[i], props[i + 1]);\n+            } else {\n+                p.remove(props[i]);\n+            }\n+        }\n+        return p;\n+    }\n+}"},{"sha":"30fdeb649e2ddce2c83252c5856fff8cc5265dfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","status":"modified","additions":296,"deletions":296,"changes":592,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,296 +1,296 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.*;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.ArgumentException;\r\n-\r\n-/**\r\n- * <p>Tests grouping and having capabilities.</p>\r\n- *\r\n- * @author Abe White\r\n- */\r\n-public abstract class GroupingTestCase\r\n-    extends SingleEMTestCase {\r\n-\r\n-    protected abstract void prepareQuery(Query q);\r\n-\r\n-    public void setUp() {\r\n-        super.setUp(AllFieldTypes.class, CLEAR_TABLES,\r\n-            \"openjpa.Compatibility\", \"JPQL=warn\");\r\n-\r\n-        AllFieldTypes pc1 = new AllFieldTypes();\r\n-        AllFieldTypes pc2 = new AllFieldTypes();\r\n-        AllFieldTypes pc3 = new AllFieldTypes();\r\n-        AllFieldTypes pc4 = new AllFieldTypes();\r\n-\r\n-        // pc1 and pc2, pc3 and pc4 grouped on intField, shortField\r\n-        pc1.setIntField(1);\r\n-        pc1.setShortField((short) -1);\r\n-        pc2.setIntField(1);\r\n-        pc2.setShortField((short) -1);\r\n-        pc3.setIntField(2);\r\n-        pc3.setShortField((short) -2);\r\n-        pc4.setIntField(2);\r\n-        pc4.setShortField((short) -2);\r\n-\r\n-        // pc1 and pc2 grouped on stringField\r\n-        pc1.setStringField(\"abc\");\r\n-        pc2.setStringField(\"acd\");\r\n-        pc3.setStringField(\"def\");\r\n-        pc4.setStringField(\"efg\");\r\n-\r\n-        // pc2 and pc3 grouped on byteField\r\n-        pc2.setByteField((byte) 1);\r\n-        pc3.setByteField((byte) 1);\r\n-        pc1.setByteField((byte) 0);\r\n-        pc4.setByteField((byte) 2);\r\n-\r\n-        // longField is unique id\r\n-        pc1.setLongField(1L);\r\n-        pc2.setLongField(2L);\r\n-        pc3.setLongField(3L);\r\n-        pc4.setLongField(4L);\r\n-\r\n-        // set up some relations\r\n-        pc1.setSelfOneOne(pc4);\r\n-        pc2.setSelfOneOne(pc3);\r\n-        pc3.setSelfOneOne(pc2);\r\n-        pc4.setSelfOneOne(pc1);\r\n-\r\n-        // if variable testing, set up some 1-Ms instead of the 1-1s above\r\n-        if (getName().startsWith(\"testVariable\")) {\r\n-            pc1.setSelfOneOne(pc1);\r\n-            pc2.setSelfOneOne(pc1);\r\n-            pc1.getSelfOneMany().add(pc1);\r\n-            pc1.getSelfOneMany().add(pc2);\r\n-\r\n-            pc3.setSelfOneOne(pc3);\r\n-            pc4.setSelfOneOne(pc3);\r\n-            pc3.getSelfOneMany().add(pc3);\r\n-            pc3.getSelfOneMany().add(pc4);\r\n-        }\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(pc1);\r\n-        em.persist(pc2);\r\n-        em.persist(pc3);\r\n-        em.persist(pc4);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testSimpleGroup() {\r\n-        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n-            \"group by o.intField order by o.intField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Integer(1), itr.next());\r\n-        assertEquals(new Integer(2), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testOrderByAggregate() {\r\n-        // this is an extension of JPQL\r\n-        Query q = em.createQuery(\"select sum(o.shortField) \" +\r\n-            \"from AllFieldTypes o\"\r\n-            + \" group by o.intField order by sum(o.shortField) asc\");\r\n-        prepareQuery(q);\r\n-        // this might fail in MySQL\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Long(-4), itr.next());\r\n-        assertEquals(new Long(-2), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testCompoundGroupSame() {\r\n-        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n-            \"group by o.intField, o.shortField order by o.shortField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Integer(2), itr.next());\r\n-        assertEquals(new Integer(1), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testCompoundGroupDifferent() {\r\n-        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n-            \"group by o.intField, o.byteField order by o.intField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(4, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Integer(1), itr.next());\r\n-        assertEquals(new Integer(1), itr.next());\r\n-        assertEquals(new Integer(2), itr.next());\r\n-        assertEquals(new Integer(2), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testDifferentGroupLengths() {\r\n-        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o\"\r\n-            + \" group by o.byteField order by o.byteField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(3, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals((byte) 0, itr.next());\r\n-        assertEquals((byte) 1, itr.next());\r\n-        assertEquals((byte) 2, itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testGroupRelationField() {\r\n-        Query q = em.createQuery(\"select o.selfOneOne.intField \" +\r\n-            \"from AllFieldTypes o group by o.selfOneOne.intField \" +\r\n-            \"order by o.selfOneOne.intField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Integer(1), itr.next());\r\n-        assertEquals(new Integer(2), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testSubstringInGroupBy() {\r\n-        // this is an extension of JPQL\r\n-        Query q = em.createQuery(\"select substring(o.stringField, 1, 1), \" +\r\n-            \"count(o) from AllFieldTypes o \" +\r\n-            \"group by substring(o.stringField, 1, 1)\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(3, res.size());\r\n-\r\n-        q = em.createQuery(\"select substring(o.stringField, 1, 2), count(o) \" +\r\n-            \"from AllFieldTypes o group by substring(o.stringField, 1, 2)\");\r\n-        prepareQuery(q);\r\n-        res = q.getResultList();\r\n-        assertEquals(4, res.size());\r\n-    }\r\n-\r\n-    public void testGroupedAggregate() {\r\n-        Query q = em.createQuery(\"select count(o) from AllFieldTypes o \" +\r\n-            \"group by o.byteField order by o.byteField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(3, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Long(1), itr.next());\r\n-        assertEquals(new Long(2), itr.next());\r\n-        assertEquals(new Long(1), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testGroupedRelationAggregate() {\r\n-        Query q = em.createQuery(\"select count(o), max(o.selfOneOne.longField)\"\r\n-            + \" from AllFieldTypes o group by o.intField\"\r\n-            + \" order by o.intField asc\");\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        Object[] o = (Object[]) itr.next();\r\n-        assertEquals(new Long(2), o[0]);\r\n-        assertEquals(new Long(4), o[1]);\r\n-        o = (Object[]) itr.next();\r\n-        assertEquals(new Long(2), o[0]);\r\n-        assertEquals(new Long(2), o[1]);\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testGroupedMixedProjection() {\r\n-        Query q = em.createQuery(\"select count(o), o.shortField \" +\r\n-            \"from AllFieldTypes o group by o.intField, o.shortField \" +\r\n-            \"order by o.intField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        Object[] o = (Object[]) itr.next();\r\n-        assertEquals(new Long(2), o[0]);\r\n-        assertEquals(new Short((short) -1), o[1]);\r\n-        o = (Object[]) itr.next();\r\n-        assertEquals(new Long(2), o[0]);\r\n-        assertEquals(new Short((short) -2), o[1]);\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testSimpleHaving() {\r\n-        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n-            \"group by o.intField having o.intField < 2\");\r\n-        prepareQuery(q);\r\n-        assertEquals(new Integer(1), q.getSingleResult());\r\n-    }\r\n-\r\n-    public void testAggregateHaving() {\r\n-        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\r\n-            \"group by o.byteField having count(o) > 1\");\r\n-        prepareQuery(q);\r\n-        assertEquals(new Byte((byte) 1), q.getSingleResult());\r\n-    }\r\n-\r\n-    public void testMixedHaving() {\r\n-        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\r\n-            \"group by o.byteField having count(o) > 1 or o.byteField = 0 \" +\r\n-            \"order by o.byteField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Byte((byte) 0), itr.next());\r\n-        assertEquals(new Byte((byte) 1), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testVariableGroup() {\r\n-        Query q = em.createQuery(\"select max(other.longField) \" +\r\n-            \"from AllFieldTypes o, AllFieldTypes other \" +\r\n-            \"where other member of o.selfOneMany \" +\r\n-            \"group by other.intField order by other.intField asc\");\r\n-        prepareQuery(q);\r\n-        List res = q.getResultList();\r\n-        assertEquals(2, res.size());\r\n-        Iterator itr = res.iterator();\r\n-        assertEquals(new Long(2), itr.next());\r\n-        assertEquals(new Long(4), itr.next());\r\n-        assertTrue(!itr.hasNext());\r\n-    }\r\n-\r\n-    public void testVariableHaving() {\r\n-        Query q = em.createQuery(\"select max(o.longField), other.byteField \" +\r\n-            \"from AllFieldTypes o, AllFieldTypes other \" +\r\n-            \"where other member of o.selfOneMany \" +\r\n-            \"group by other.byteField having sum(other.intField) = 2\");\r\n-        prepareQuery(q);\r\n-        assertEquals(new Long(3), ((Object[])q.getSingleResult())[0]);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.*;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.ArgumentException;\n+\n+/**\n+ * <p>Tests grouping and having capabilities.</p>\n+ *\n+ * @author Abe White\n+ */\n+public abstract class GroupingTestCase\n+    extends SingleEMTestCase {\n+\n+    protected abstract void prepareQuery(Query q);\n+\n+    public void setUp() {\n+        super.setUp(AllFieldTypes.class, CLEAR_TABLES,\n+            \"openjpa.Compatibility\", \"JPQL=warn\");\n+\n+        AllFieldTypes pc1 = new AllFieldTypes();\n+        AllFieldTypes pc2 = new AllFieldTypes();\n+        AllFieldTypes pc3 = new AllFieldTypes();\n+        AllFieldTypes pc4 = new AllFieldTypes();\n+\n+        // pc1 and pc2, pc3 and pc4 grouped on intField, shortField\n+        pc1.setIntField(1);\n+        pc1.setShortField((short) -1);\n+        pc2.setIntField(1);\n+        pc2.setShortField((short) -1);\n+        pc3.setIntField(2);\n+        pc3.setShortField((short) -2);\n+        pc4.setIntField(2);\n+        pc4.setShortField((short) -2);\n+\n+        // pc1 and pc2 grouped on stringField\n+        pc1.setStringField(\"abc\");\n+        pc2.setStringField(\"acd\");\n+        pc3.setStringField(\"def\");\n+        pc4.setStringField(\"efg\");\n+\n+        // pc2 and pc3 grouped on byteField\n+        pc2.setByteField((byte) 1);\n+        pc3.setByteField((byte) 1);\n+        pc1.setByteField((byte) 0);\n+        pc4.setByteField((byte) 2);\n+\n+        // longField is unique id\n+        pc1.setLongField(1L);\n+        pc2.setLongField(2L);\n+        pc3.setLongField(3L);\n+        pc4.setLongField(4L);\n+\n+        // set up some relations\n+        pc1.setSelfOneOne(pc4);\n+        pc2.setSelfOneOne(pc3);\n+        pc3.setSelfOneOne(pc2);\n+        pc4.setSelfOneOne(pc1);\n+\n+        // if variable testing, set up some 1-Ms instead of the 1-1s above\n+        if (getName().startsWith(\"testVariable\")) {\n+            pc1.setSelfOneOne(pc1);\n+            pc2.setSelfOneOne(pc1);\n+            pc1.getSelfOneMany().add(pc1);\n+            pc1.getSelfOneMany().add(pc2);\n+\n+            pc3.setSelfOneOne(pc3);\n+            pc4.setSelfOneOne(pc3);\n+            pc3.getSelfOneMany().add(pc3);\n+            pc3.getSelfOneMany().add(pc4);\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(pc1);\n+        em.persist(pc2);\n+        em.persist(pc3);\n+        em.persist(pc4);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testSimpleGroup() {\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\n+            \"group by o.intField order by o.intField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Integer(1), itr.next());\n+        assertEquals(new Integer(2), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testOrderByAggregate() {\n+        // this is an extension of JPQL\n+        Query q = em.createQuery(\"select sum(o.shortField) \" +\n+            \"from AllFieldTypes o\"\n+            + \" group by o.intField order by sum(o.shortField) asc\");\n+        prepareQuery(q);\n+        // this might fail in MySQL\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Long(-4), itr.next());\n+        assertEquals(new Long(-2), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testCompoundGroupSame() {\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\n+            \"group by o.intField, o.shortField order by o.shortField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Integer(2), itr.next());\n+        assertEquals(new Integer(1), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testCompoundGroupDifferent() {\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\n+            \"group by o.intField, o.byteField order by o.intField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(4, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Integer(1), itr.next());\n+        assertEquals(new Integer(1), itr.next());\n+        assertEquals(new Integer(2), itr.next());\n+        assertEquals(new Integer(2), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testDifferentGroupLengths() {\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o\"\n+            + \" group by o.byteField order by o.byteField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(3, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals((byte) 0, itr.next());\n+        assertEquals((byte) 1, itr.next());\n+        assertEquals((byte) 2, itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testGroupRelationField() {\n+        Query q = em.createQuery(\"select o.selfOneOne.intField \" +\n+            \"from AllFieldTypes o group by o.selfOneOne.intField \" +\n+            \"order by o.selfOneOne.intField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Integer(1), itr.next());\n+        assertEquals(new Integer(2), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testSubstringInGroupBy() {\n+        // this is an extension of JPQL\n+        Query q = em.createQuery(\"select substring(o.stringField, 1, 1), \" +\n+            \"count(o) from AllFieldTypes o \" +\n+            \"group by substring(o.stringField, 1, 1)\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(3, res.size());\n+\n+        q = em.createQuery(\"select substring(o.stringField, 1, 2), count(o) \" +\n+            \"from AllFieldTypes o group by substring(o.stringField, 1, 2)\");\n+        prepareQuery(q);\n+        res = q.getResultList();\n+        assertEquals(4, res.size());\n+    }\n+\n+    public void testGroupedAggregate() {\n+        Query q = em.createQuery(\"select count(o) from AllFieldTypes o \" +\n+            \"group by o.byteField order by o.byteField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(3, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Long(1), itr.next());\n+        assertEquals(new Long(2), itr.next());\n+        assertEquals(new Long(1), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testGroupedRelationAggregate() {\n+        Query q = em.createQuery(\"select count(o), max(o.selfOneOne.longField)\"\n+            + \" from AllFieldTypes o group by o.intField\"\n+            + \" order by o.intField asc\");\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        Object[] o = (Object[]) itr.next();\n+        assertEquals(new Long(2), o[0]);\n+        assertEquals(new Long(4), o[1]);\n+        o = (Object[]) itr.next();\n+        assertEquals(new Long(2), o[0]);\n+        assertEquals(new Long(2), o[1]);\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testGroupedMixedProjection() {\n+        Query q = em.createQuery(\"select count(o), o.shortField \" +\n+            \"from AllFieldTypes o group by o.intField, o.shortField \" +\n+            \"order by o.intField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        Object[] o = (Object[]) itr.next();\n+        assertEquals(new Long(2), o[0]);\n+        assertEquals(new Short((short) -1), o[1]);\n+        o = (Object[]) itr.next();\n+        assertEquals(new Long(2), o[0]);\n+        assertEquals(new Short((short) -2), o[1]);\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testSimpleHaving() {\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\n+            \"group by o.intField having o.intField < 2\");\n+        prepareQuery(q);\n+        assertEquals(new Integer(1), q.getSingleResult());\n+    }\n+\n+    public void testAggregateHaving() {\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\n+            \"group by o.byteField having count(o) > 1\");\n+        prepareQuery(q);\n+        assertEquals(new Byte((byte) 1), q.getSingleResult());\n+    }\n+\n+    public void testMixedHaving() {\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\n+            \"group by o.byteField having count(o) > 1 or o.byteField = 0 \" +\n+            \"order by o.byteField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Byte((byte) 0), itr.next());\n+        assertEquals(new Byte((byte) 1), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testVariableGroup() {\n+        Query q = em.createQuery(\"select max(other.longField) \" +\n+            \"from AllFieldTypes o, AllFieldTypes other \" +\n+            \"where other member of o.selfOneMany \" +\n+            \"group by other.intField order by other.intField asc\");\n+        prepareQuery(q);\n+        List res = q.getResultList();\n+        assertEquals(2, res.size());\n+        Iterator itr = res.iterator();\n+        assertEquals(new Long(2), itr.next());\n+        assertEquals(new Long(4), itr.next());\n+        assertTrue(!itr.hasNext());\n+    }\n+\n+    public void testVariableHaving() {\n+        Query q = em.createQuery(\"select max(o.longField), other.byteField \" +\n+            \"from AllFieldTypes o, AllFieldTypes other \" +\n+            \"where other member of o.selfOneMany \" +\n+            \"group by other.byteField having sum(other.intField) = 2\");\n+        prepareQuery(q);\n+        assertEquals(new Long(3), ((Object[])q.getSingleResult())[0]);\n+    }\n+}"},{"sha":"b580beb7e594e6887d1dd9183824826531236a83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-public class ManyOneEntity implements Serializable {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(cascade=CascadeType.ALL)\r\n-    private ManyOneEntity rel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public ManyOneEntity getRel() {\r\n-        return rel; \r\n-    }\r\n-\r\n-    public void setRel(ManyOneEntity rel) {\r\n-        this.rel = rel;\r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public class ManyOneEntity implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(cascade=CascadeType.ALL)\n+    private ManyOneEntity rel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public ManyOneEntity getRel() {\n+        return rel; \n+    }\n+\n+    public void setRel(ManyOneEntity rel) {\n+        this.rel = rel;\n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"b13cfcb10758e676a294c733e4d0bd6f2dc4e9f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,36 +1,36 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Entity;\r\n-\r\n-@Entity\r\n-public class ManyOneEntitySub \r\n-    extends ManyOneEntity {\r\n-\r\n-    private int subInt;\r\n-\r\n-    public int getSubInt() { \r\n-        return subInt; \r\n-    }\r\n-\r\n-    public void setSubInt(int subInt) { \r\n-        this.subInt = subInt; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class ManyOneEntitySub \n+    extends ManyOneEntity {\n+\n+    private int subInt;\n+\n+    public int getSubInt() { \n+        return subInt; \n+    }\n+\n+    public void setSubInt(int subInt) { \n+        this.subInt = subInt; \n+    }\n+}"},{"sha":"43773aa251ba0c8a5341aedb321cbfe0f4a68f1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,42 +1,42 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.NamedQuery;\r\n-\r\n-@Entity\r\n-@NamedQuery(name=\"NamedQueryEntity.namedQuery\",\r\n-    query=\"select o from NamedQueryEntity o where o.stringField = 'foo'\")\r\n-public class NamedQueryEntity {\r\n-    @Id @GeneratedValue\r\n-    private Integer id;\r\n-\r\n-    private String stringField;\r\n-\r\n-    public NamedQueryEntity(String stringField) {\r\n-        this.stringField = stringField;\r\n-    }\r\n-\r\n-    public NamedQueryEntity() {\r\n-        // for JPA\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQuery;\n+\n+@Entity\n+@NamedQuery(name=\"NamedQueryEntity.namedQuery\",\n+    query=\"select o from NamedQueryEntity o where o.stringField = 'foo'\")\n+public class NamedQueryEntity {\n+    @Id @GeneratedValue\n+    private Integer id;\n+\n+    private String stringField;\n+\n+    public NamedQueryEntity(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public NamedQueryEntity() {\n+        // for JPA\n+    }\n+}"},{"sha":"c3459fe9407b76e80ff322c9fd0e804f5219cc9c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,104 +1,104 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityResult;\r\n-import javax.persistence.FieldResult;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.NamedNativeQueries;\r\n-import javax.persistence.NamedNativeQuery;\r\n-import javax.persistence.NamedQueries;\r\n-import javax.persistence.NamedQuery;\r\n-import javax.persistence.SqlResultSetMapping;\r\n-import javax.persistence.Table;\r\n-\r\n-@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = ?1\")\r\n-\r\n-@NamedQueries( {\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = ?1\"),\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = ?1\"),\r\n-    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\r\n-})\r\n-\r\n-@NamedNativeQueries( { \r\n-    @NamedNativeQuery(name = \"findSimpleEntitites\",\r\n-        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \r\n-        resultSetMapping = \"simpleEntitiesResult\") })\r\n-\r\n-@SqlResultSetMapping(name = \"simpleEntitiesResult\",\r\n-    entities = @EntityResult(\r\n-    entityClass = org.apache.openjpa.persistence.query.SimpleEntity.class, \r\n-    fields = {@FieldResult(name = \"id\", column = \"ID\"),\r\n-        @FieldResult(name = \"name\", column = \"NAME\"),\r\n-        @FieldResult(name = \"value\", column = \"VALUE\") }))\r\n-@Entity(name = \"simple\")\r\n-@Table(name = \"SIMPLE_ENTITY\")\r\n-public class SimpleEntity implements Serializable {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    @Column(name = \"ID\")\r\n-    private long id;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"NAME\")\r\n-    private String name;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"VALUE\")\r\n-    private String value;\r\n-\r\n-    public SimpleEntity() {\r\n-    }\r\n-\r\n-    public SimpleEntity(String name, String value) {\r\n-        this();\r\n-        this.name = name;\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(String value) {\r\n-        this.value = value;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityResult;\n+import javax.persistence.FieldResult;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.Table;\n+\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = ?1\")\n+\n+@NamedQueries( {\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = ?1\"),\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = ?1\"),\n+    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\n+})\n+\n+@NamedNativeQueries( { \n+    @NamedNativeQuery(name = \"findSimpleEntitites\",\n+        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \n+        resultSetMapping = \"simpleEntitiesResult\") })\n+\n+@SqlResultSetMapping(name = \"simpleEntitiesResult\",\n+    entities = @EntityResult(\n+    entityClass = org.apache.openjpa.persistence.query.SimpleEntity.class, \n+    fields = {@FieldResult(name = \"id\", column = \"ID\"),\n+        @FieldResult(name = \"name\", column = \"NAME\"),\n+        @FieldResult(name = \"value\", column = \"VALUE\") }))\n+@Entity(name = \"simple\")\n+@Table(name = \"SIMPLE_ENTITY\")\n+public class SimpleEntity implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long id;\n+\n+    @Basic\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Basic\n+    @Column(name = \"VALUE\")\n+    private String value;\n+\n+    public SimpleEntity() {\n+    }\n+\n+    public SimpleEntity(String name, String value) {\n+        this();\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"280fc2ab1fba1bdc2e1c694cd676a9f73b7c80e4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Basic;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.NamedQueries;\r\n-import javax.persistence.NamedQuery;\r\n-import javax.persistence.Table;\r\n-\r\n-@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = ?1\")\r\n-\r\n-@NamedQueries( {\r\n-    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = ?1\"),\r\n-    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = ?1\"),\r\n-    @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\r\n-})\r\n-\r\n-@Entity(name = \"simple2\")\r\n-@Table(name = \"SIMPLE_ENTITY2\")\r\n-public class SimpleEntity2 {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    @Column(name = \"ID\")\r\n-    private long id;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"NAME\")\r\n-    private String name;\r\n-\r\n-    @Basic\r\n-    @Column(name = \"VALUE\")\r\n-    private String value;\r\n-\r\n-    public SimpleEntity2() {\r\n-    }\r\n-\r\n-    public SimpleEntity2(String name, String value) {\r\n-        this();\r\n-        this.name = name;\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public long getId() {\r\n-        return this.id;\r\n-    }\r\n-\r\n-    public void setId(long id) {\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    public void setValue(String value) {\r\n-        this.value = value;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.Table;\n+\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = ?1\")\n+\n+@NamedQueries( {\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = ?1\"),\n+    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = ?1\"),\n+    @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\n+})\n+\n+@Entity(name = \"simple2\")\n+@Table(name = \"SIMPLE_ENTITY2\")\n+public class SimpleEntity2 {\n+\n+    @Id\n+    @GeneratedValue\n+    @Column(name = \"ID\")\n+    private long id;\n+\n+    @Basic\n+    @Column(name = \"NAME\")\n+    private String name;\n+\n+    @Basic\n+    @Column(name = \"VALUE\")\n+    private String value;\n+\n+    public SimpleEntity2() {\n+    }\n+\n+    public SimpleEntity2(String name, String value) {\n+        this();\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"a0a2f5b3eae0fd35a8c58c7da0bbd520c4f15772","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,90 +1,90 @@\n-/*\r\n- * TestAccessPathsOfSubqueries.java\r\n- *\r\n- * Created on October 17, 2006, 2:51 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.Collection;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest4;\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest5;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-\r\n-public class TestAccessPathsOfSubqueries extends BaseQueryTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestAccessPathsOfSubqueries\r\n-     */\r\n-\r\n-    public TestAccessPathsOfSubqueries(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void testSimpleSubqueryAccessPath() {\r\n-        Broker broker = getBrokerFactory().newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\r\n-        ClassMetaData[] metas = q.getAccessPathMetaDatas();\r\n-        Collection c = Arrays.asList(metas);\r\n-        ClassMetaData rt1 = broker.getConfiguration().\r\n-            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\r\n-            broker.getClassLoader(), true);\r\n-        ClassMetaData rt5 = broker.getConfiguration().\r\n-            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\r\n-            broker.getClassLoader(), true);\r\n-        assertTrue(c.contains(rt1));\r\n-        assertTrue(c.contains(rt5));\r\n-        assertEquals(2, c.size());\r\n-    }\r\n-\r\n-    public void testRelationTraversalSubqueryAccessPath() {\r\n-        Broker broker = getBrokerFactory().newBroker();\r\n-        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n-            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.runtimeTest4.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\r\n-\r\n-        ClassMetaData[] metas = q.getAccessPathMetaDatas();\r\n-        Collection c = Arrays.asList(metas);\r\n-        ClassMetaData rt1 = broker.getConfiguration().\r\n-            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\r\n-            broker.getClassLoader(), true);\r\n-        ClassMetaData rt4 = broker.getConfiguration().\r\n-            getMetaDataRepositoryInstance().getMetaData(RuntimeTest4.class,\r\n-            broker.getClassLoader(), true);\r\n-        ClassMetaData rt5 = broker.getConfiguration().\r\n-            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\r\n-            broker.getClassLoader(), true);\r\n-        assertTrue(c.contains(rt1));\r\n-        assertTrue(c.contains(rt4));\r\n-        assertTrue(c.contains(rt5));\r\n-        assertEquals(3, c.size());\r\n-    }\r\n-}\r\n+/*\n+ * TestAccessPathsOfSubqueries.java\n+ *\n+ * Created on October 17, 2006, 2:51 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest4;\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest5;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+public class TestAccessPathsOfSubqueries extends BaseQueryTest {\n+\n+    /**\n+     * Creates a new instance of TestAccessPathsOfSubqueries\n+     */\n+\n+    public TestAccessPathsOfSubqueries(String name) {\n+        super(name);\n+    }\n+\n+    public void testSimpleSubqueryAccessPath() {\n+        Broker broker = getBrokerFactory().newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\n+        ClassMetaData[] metas = q.getAccessPathMetaDatas();\n+        Collection c = Arrays.asList(metas);\n+        ClassMetaData rt1 = broker.getConfiguration().\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\n+            broker.getClassLoader(), true);\n+        ClassMetaData rt5 = broker.getConfiguration().\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\n+            broker.getClassLoader(), true);\n+        assertTrue(c.contains(rt1));\n+        assertTrue(c.contains(rt5));\n+        assertEquals(2, c.size());\n+    }\n+\n+    public void testRelationTraversalSubqueryAccessPath() {\n+        Broker broker = getBrokerFactory().newBroker();\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\n+            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.runtimeTest4.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\n+\n+        ClassMetaData[] metas = q.getAccessPathMetaDatas();\n+        Collection c = Arrays.asList(metas);\n+        ClassMetaData rt1 = broker.getConfiguration().\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\n+            broker.getClassLoader(), true);\n+        ClassMetaData rt4 = broker.getConfiguration().\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest4.class,\n+            broker.getClassLoader(), true);\n+        ClassMetaData rt5 = broker.getConfiguration().\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\n+            broker.getClassLoader(), true);\n+        assertTrue(c.contains(rt1));\n+        assertTrue(c.contains(rt4));\n+        assertTrue(c.contains(rt5));\n+        assertEquals(3, c.size());\n+    }\n+}"},{"sha":"c5024e20c8ff78b21b16f231142ff5d16e5a388b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","status":"modified","additions":292,"deletions":292,"changes":584,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,292 +1,292 @@\n-/*\r\n- * TestComplexQueries.java\r\n- *\r\n- * Created on October 17, 2006, 2:59 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.ComplexA;\r\n-import org.apache.openjpa.persistence.query.common.apps.ComplexB;\r\n-import org.apache.openjpa.persistence.query.common.apps.ComplexC;\r\n-import org.apache.openjpa.persistence.query.common.apps.ComplexD;\r\n-import org.apache.openjpa.persistence.query.common.apps.ComplexE;\r\n-import org.apache.openjpa.persistence.query.common.apps.ComplexF;\r\n-import org.apache.openjpa.persistence.query.common.apps.ComplexG;\r\n-import junit.framework.AssertionFailedError;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestComplexQueries extends BaseQueryTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestComplexQueries\r\n-     */\r\n-\r\n-    public TestComplexQueries(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        clear();\r\n-    }\r\n-\r\n-    public void clear() {\r\n-        deleteAll(ComplexA.class);\r\n-        deleteAll(ComplexB.class);\r\n-        deleteAll(ComplexC.class);\r\n-        deleteAll(ComplexD.class);\r\n-        deleteAll(ComplexE.class);\r\n-        deleteAll(ComplexF.class);\r\n-        deleteAll(ComplexG.class);\r\n-    }\r\n-\r\n-    public void complexQuery(int size, Object ob, String filter, Class c) {\r\n-\r\n-//        PersistenceManager pm = getPM();\r\n-        Broker broker = getBrokerFactory().newBroker();\r\n-        broker.setIgnoreChanges(false);\r\n-        broker.begin();\r\n-\r\n-        broker.persist(ob, null);\r\n-        // test in-memory\r\n-        // assertSize (size, pm.newQuery (c, filter));\r\n-        broker.commit();\r\n-\r\n-        broker.begin();\r\n-        // test against database\r\n-//        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM \"+c.getSimpleName()+\"o WHERE o.\"+filter);\r\n-        String qstrng =\r\n-            \"SELECT o FROM \" + c.getSimpleName() + \" o WHERE o.\" + filter;\r\n-        assertSize(size,\r\n-            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\r\n-\r\n-        broker.commit();\r\n-        broker.close();\r\n-\r\n-        broker = getBrokerFactory().newBroker();\r\n-        broker.begin();\r\n-        // test again against a new PM, for good measure\r\n-        assertSize(size,\r\n-            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\r\n-        broker.rollback();\r\n-\r\n-        broker.close();\r\n-    }\r\n-\r\n-    public void testComplex1() {\r\n-        complexQuery(1,\r\n-            new ComplexA(\"test\", 0, null, null),\r\n-            \"stringA = \\'test\\'\",\r\n-            ComplexA.class);\r\n-    }\r\n-\r\n-    public void testComplex2() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"stringG = \\'testg\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex3() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.e.d.c.b.a.stringA = \\'testa\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex4() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n-                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex5() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n-                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n-                + \" AND o.f.e.d.c.stringC = \\'testc\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex6() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n-                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n-                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n-                + \" AND o.f.e.d.stringD = \\'testd\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex7() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n-                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n-                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n-                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n-                + \" AND o.f.e.stringE = \\'teste\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex8() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n-                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n-                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n-                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n-                + \" AND o.f.e.stringE = \\'teste\\'\"\r\n-                + \" AND o.f.stringF = \\'testf\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex9() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n-                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n-                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n-                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n-                + \" AND o.f.e.stringE = \\'teste\\'\"\r\n-                + \" AND o.f.stringF = \\'testf\\'\"\r\n-                + \" AND o.f.e.d.intD < 1\"\r\n-                + \" AND o.f.e.d.intD > -1\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex10() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.stringF = \\'testf\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex11() {\r\n-        complexQuery(1,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.stringF = \\'testf\\' AND o.stringG = \\'testg\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-\r\n-    public void testComplex12() {\r\n-        try {\r\n-            complexQuery(1,\r\n-                new ComplexG(\"testg\", 0, null,\r\n-                    new ComplexF(\"testf\", 0, null, null,\r\n-                        new ComplexE(\"teste\", 0, null, null,\r\n-                            new ComplexD(\"testd\", 0, null, null,\r\n-                                new ComplexC(\"testc\", 0, null, null,\r\n-                                    new ComplexB(\"testb\", 0, null, null,\r\n-                                        new ComplexA(\"testa\", 0, null,\r\n-                                            null))))))),\r\n-                \"f.stringF = \\'testf\\'OR o.stringG = \\'testg\\'\",\r\n-                ComplexG.class);\r\n-        } catch (junit.framework.AssertionFailedError afe) {\r\n-            bug(449, afe, \"ORs and relational queries\");\r\n-        }\r\n-    }\r\n-\r\n-    public void testComplex13() {\r\n-        complexQuery(0,\r\n-            new ComplexG(\"testg\", 0, null,\r\n-                new ComplexF(\"testf\", 0, null, null,\r\n-                    new ComplexE(\"teste\", 0, null, null,\r\n-                        new ComplexD(\"testd\", 0, null, null,\r\n-                            new ComplexC(\"testc\", 0, null, null,\r\n-                                new ComplexB(\"testb\", 0, null, null,\r\n-                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n-            \"f.stringF = \\'testfXXX\\'\",\r\n-            ComplexG.class);\r\n-    }\r\n-}\r\n+/*\n+ * TestComplexQueries.java\n+ *\n+ * Created on October 17, 2006, 2:59 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+\n+import java.util.List;\n+\n+import org.apache.openjpa.persistence.query.common.apps.ComplexA;\n+import org.apache.openjpa.persistence.query.common.apps.ComplexB;\n+import org.apache.openjpa.persistence.query.common.apps.ComplexC;\n+import org.apache.openjpa.persistence.query.common.apps.ComplexD;\n+import org.apache.openjpa.persistence.query.common.apps.ComplexE;\n+import org.apache.openjpa.persistence.query.common.apps.ComplexF;\n+import org.apache.openjpa.persistence.query.common.apps.ComplexG;\n+import junit.framework.AssertionFailedError;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestComplexQueries extends BaseQueryTest {\n+\n+    /**\n+     * Creates a new instance of TestComplexQueries\n+     */\n+\n+    public TestComplexQueries(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        clear();\n+    }\n+\n+    public void clear() {\n+        deleteAll(ComplexA.class);\n+        deleteAll(ComplexB.class);\n+        deleteAll(ComplexC.class);\n+        deleteAll(ComplexD.class);\n+        deleteAll(ComplexE.class);\n+        deleteAll(ComplexF.class);\n+        deleteAll(ComplexG.class);\n+    }\n+\n+    public void complexQuery(int size, Object ob, String filter, Class c) {\n+\n+//        PersistenceManager pm = getPM();\n+        Broker broker = getBrokerFactory().newBroker();\n+        broker.setIgnoreChanges(false);\n+        broker.begin();\n+\n+        broker.persist(ob, null);\n+        // test in-memory\n+        // assertSize (size, pm.newQuery (c, filter));\n+        broker.commit();\n+\n+        broker.begin();\n+        // test against database\n+//        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM \"+c.getSimpleName()+\"o WHERE o.\"+filter);\n+        String qstrng =\n+            \"SELECT o FROM \" + c.getSimpleName() + \" o WHERE o.\" + filter;\n+        assertSize(size,\n+            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\n+\n+        broker.commit();\n+        broker.close();\n+\n+        broker = getBrokerFactory().newBroker();\n+        broker.begin();\n+        // test again against a new PM, for good measure\n+        assertSize(size,\n+            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\n+        broker.rollback();\n+\n+        broker.close();\n+    }\n+\n+    public void testComplex1() {\n+        complexQuery(1,\n+            new ComplexA(\"test\", 0, null, null),\n+            \"stringA = \\'test\\'\",\n+            ComplexA.class);\n+    }\n+\n+    public void testComplex2() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"stringG = \\'testg\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex3() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex4() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex5() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex6() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex7() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\n+                + \" AND o.f.e.stringE = \\'teste\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex8() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\n+                + \" AND o.f.e.stringE = \\'teste\\'\"\n+                + \" AND o.f.stringF = \\'testf\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex9() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\n+                + \" AND o.f.e.stringE = \\'teste\\'\"\n+                + \" AND o.f.stringF = \\'testf\\'\"\n+                + \" AND o.f.e.d.intD < 1\"\n+                + \" AND o.f.e.d.intD > -1\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex10() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.stringF = \\'testf\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex11() {\n+        complexQuery(1,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.stringF = \\'testf\\' AND o.stringG = \\'testg\\'\",\n+            ComplexG.class);\n+    }\n+\n+    public void testComplex12() {\n+        try {\n+            complexQuery(1,\n+                new ComplexG(\"testg\", 0, null,\n+                    new ComplexF(\"testf\", 0, null, null,\n+                        new ComplexE(\"teste\", 0, null, null,\n+                            new ComplexD(\"testd\", 0, null, null,\n+                                new ComplexC(\"testc\", 0, null, null,\n+                                    new ComplexB(\"testb\", 0, null, null,\n+                                        new ComplexA(\"testa\", 0, null,\n+                                            null))))))),\n+                \"f.stringF = \\'testf\\'OR o.stringG = \\'testg\\'\",\n+                ComplexG.class);\n+        } catch (junit.framework.AssertionFailedError afe) {\n+            bug(449, afe, \"ORs and relational queries\");\n+        }\n+    }\n+\n+    public void testComplex13() {\n+        complexQuery(0,\n+            new ComplexG(\"testg\", 0, null,\n+                new ComplexF(\"testf\", 0, null, null,\n+                    new ComplexE(\"teste\", 0, null, null,\n+                        new ComplexD(\"testd\", 0, null, null,\n+                            new ComplexC(\"testc\", 0, null, null,\n+                                new ComplexB(\"testb\", 0, null, null,\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\n+            \"f.stringF = \\'testfXXX\\'\",\n+            ComplexG.class);\n+    }\n+}"},{"sha":"43b22bf899d400fd83832e9d62c119191ef2b02d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-\r\n-public class TestDataStoreActions\r\n-    extends SingleEMTestCase {\r\n-\r\n-    @Override\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n-    }\r\n-\r\n-    public void testDataStoreActions() {\r\n-        OpenJPAQuery q = em.createQuery(\"select o from AllFieldTypes o\");\r\n-        String[] sql = q.getDataStoreActions(null);\r\n-        assertEquals(1, sql.length);\r\n-        assertTrue(sql[0].startsWith(\"SELECT\"));\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+\n+public class TestDataStoreActions\n+    extends SingleEMTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testDataStoreActions() {\n+        OpenJPAQuery q = em.createQuery(\"select o from AllFieldTypes o\");\n+        String[] sql = q.getDataStoreActions(null);\n+        assertEquals(1, sql.length);\n+        assertTrue(sql[0].startsWith(\"SELECT\"));\n+    }\n+}"},{"sha":"8fb0a383c7ff79e5b79c60781d4956e37d36f38e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.ProductOrder;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.LineItem;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Product;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Customer;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Address;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Company;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Employee;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.PartTimeEmployee;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.FullTimeEmployee;\r\n-import org.apache.openjpa.persistence.models.company.fetchlazy.Person;\r\n-\r\n-public class TestDistinctQueries extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(Address.class, Company.class, Customer.class, Employee.class,\r\n-            FullTimeEmployee.class, LineItem.class, PartTimeEmployee.class,\r\n-            Person.class, Product.class, ProductOrder.class, CLEAR_TABLES);\r\n-\r\n-        ProductOrder order = new ProductOrder();\r\n-        LineItem item0 = new LineItem();\r\n-        LineItem item1 = new LineItem();\r\n-        LineItem item2 = new LineItem();\r\n-        order.getItems().add(item0);\r\n-        order.getItems().add(item1);\r\n-        order.getItems().add(item2);\r\n-\r\n-        em.getTransaction().begin();\r\n-        em.persist(order);\r\n-        em.persist(item0);\r\n-        em.persist(item1);\r\n-        em.persist(item2);\r\n-        em.getTransaction().commit();\r\n-    }\r\n-\r\n-    public void testDuplicateResultsInNonDistinctJoinFetchQuery() {\r\n-        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n-            \"left join fetch o.items\").getResultList();\r\n-        assertEquals(3, l.size());\r\n-    }\r\n-\r\n-    public void testDuplicateResultsInNonDistinctJoinQuery() {\r\n-        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(3, l.size());\r\n-    }\r\n-\r\n-    public void testNoDuplicateResultsInDistinctQuery() {\r\n-        List l = em.createQuery(\"select distinct o from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(1, l.size());\r\n-    }\r\n-\r\n-    public void testDuplicateResultsInNonDistinctConstructorJoinQuery() {\r\n-        List l = em.createQuery(\"select new \" +\r\n-            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n-            \"o.id) from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(3, l.size());\r\n-    }\r\n-\r\n-    public void testNoDuplicateResultsInDistinctConstructorQuery()\r\n-        throws NoSuchMethodException {\r\n-        List l = em.createQuery(\"select distinct new \" +\r\n-            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n-            \"o.id) from LAZ_ProductOrder o \" +\r\n-            \"left join o.items item\").getResultList();\r\n-        assertEquals(1, l.size());\r\n-    }\r\n-\r\n-    public static class Holder {\r\n-        public Holder(long id) {\r\n-            // we don't actually do anything with the returned data\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.ProductOrder;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.LineItem;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Product;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Customer;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Address;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Company;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Employee;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.PartTimeEmployee;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.FullTimeEmployee;\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Person;\n+\n+public class TestDistinctQueries extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(Address.class, Company.class, Customer.class, Employee.class,\n+            FullTimeEmployee.class, LineItem.class, PartTimeEmployee.class,\n+            Person.class, Product.class, ProductOrder.class, CLEAR_TABLES);\n+\n+        ProductOrder order = new ProductOrder();\n+        LineItem item0 = new LineItem();\n+        LineItem item1 = new LineItem();\n+        LineItem item2 = new LineItem();\n+        order.getItems().add(item0);\n+        order.getItems().add(item1);\n+        order.getItems().add(item2);\n+\n+        em.getTransaction().begin();\n+        em.persist(order);\n+        em.persist(item0);\n+        em.persist(item1);\n+        em.persist(item2);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void testDuplicateResultsInNonDistinctJoinFetchQuery() {\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\n+            \"left join fetch o.items\").getResultList();\n+        assertEquals(3, l.size());\n+    }\n+\n+    public void testDuplicateResultsInNonDistinctJoinQuery() {\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(3, l.size());\n+    }\n+\n+    public void testNoDuplicateResultsInDistinctQuery() {\n+        List l = em.createQuery(\"select distinct o from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(1, l.size());\n+    }\n+\n+    public void testDuplicateResultsInNonDistinctConstructorJoinQuery() {\n+        List l = em.createQuery(\"select new \" +\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\n+            \"o.id) from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(3, l.size());\n+    }\n+\n+    public void testNoDuplicateResultsInDistinctConstructorQuery()\n+        throws NoSuchMethodException {\n+        List l = em.createQuery(\"select distinct new \" +\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\n+            \"o.id) from LAZ_ProductOrder o \" +\n+            \"left join o.items item\").getResultList();\n+        assertEquals(1, l.size());\n+    }\n+\n+    public static class Holder {\n+        public Holder(long id) {\n+            // we don't actually do anything with the returned data\n+        }\n+    }\n+}"},{"sha":"8bef284f39df47a43a9cab57217cb46a81454013","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","status":"modified","additions":197,"deletions":197,"changes":394,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,197 +1,197 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestEJBDeleteUpdateImpl extends BaseQueryTest {\r\n-\r\n-    RuntimeTest1 runt1;\r\n-    RuntimeTest2 runt2;\r\n-    Entity1 ent;\r\n-\r\n-    public TestEJBDeleteUpdateImpl(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-        deleteAll(Entity1.class);\r\n-\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        runt1 = new RuntimeTest1(1);\r\n-        runt1.setStringField(\"runt1\");\r\n-        runt1.setSelfOneOne(new RuntimeTest1(2));\r\n-        runt2 = new RuntimeTest2(3);\r\n-        runt2.setStringField(\"runt2\");\r\n-\r\n-        ent = new Entity1(23, \"UPDATEST\", 100);\r\n-\r\n-        em.persist(runt1);\r\n-        em.persist(runt2);\r\n-        em.persist(ent);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testUpdate1() {\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 ret = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(\"runt1\", ret.getStringField());\r\n-        assertNotNull(ret.getSelfOneOne());\r\n-\r\n-        String ejbqlUpdate =\r\n-            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\r\n-        int updatedEntities = em.createQuery(ejbqlUpdate)\r\n-            .setParameter(\"strngfld\", \"runner13\")\r\n-            .setParameter(\"stdfield\", \"runt1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(1, updatedEntities);\r\n-\r\n-        endTx(em);\r\n-\r\n-        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n-        em.refresh(ret2);\r\n-\r\n-        assertNotNull(ret2);\r\n-        assertEquals(\"runner13\", ret2.getStringField());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testUpdate2() {\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n-        assertNotNull(run);\r\n-        assertEquals(\"runt1\", run.getStringField());\r\n-        assertNotNull(run.getSelfOneOne());\r\n-\r\n-        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\r\n-            \"SET x.stringField = :strngfld \" +\r\n-            \"WHERE x.stringField = :field\";\r\n-        int upEntities = em.createQuery(ejbqlUpdate)\r\n-            .setParameter(\"strngfld\", \"upd\")\r\n-            .setParameter(\"field\", \"runt1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(1, upEntities);\r\n-\r\n-        endTx(em);\r\n-\r\n-        em = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 inst = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n-        em.refresh(inst);\r\n-\r\n-        assertNotNull(inst);\r\n-        assertEquals(\"upd\", inst.getStringField());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testDelete1() {\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n-        assertNotNull(run);\r\n-        assertEquals(\"runt1\", run.getStringField());\r\n-        assertNotNull(run.getSelfOneOne());\r\n-\r\n-        String ejbdelUpdate = \"DELETE  FROM RuntimeTest1 s \" +\r\n-            \"WHERE s.stringField = :strngfld\";\r\n-        int delEntity = em.createQuery(ejbdelUpdate)\r\n-            .setParameter(\"strngfld\", \"runt1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(1, delEntity);\r\n-\r\n-        RuntimeTest1 del = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n-        assertNull(del);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testDelete2() {\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n-        assertNotNull(run);\r\n-        assertEquals(\"runt1\", run.getStringField());\r\n-        assertNotNull(run.getSelfOneOne());\r\n-\r\n-        String ejbdelUpdate =\r\n-            \"DELETE  FROM RuntimeTest1 r WHERE r.stringField = ?1\";\r\n-        Query query = em.createQuery(ejbdelUpdate);\r\n-\r\n-        query.setParameter(1, \"runt1\");\r\n-        int ok = query.executeUpdate();\r\n-\r\n-        assertEquals(1, ok);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testUpdate3() {\r\n-        OpenJPAEntityManager em =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        Entity1 ent = em.find(Entity1.class, 23);\r\n-\r\n-        assertNotNull(ent);\r\n-        assertEquals(\"UPDATEST\", ent.getStringField());\r\n-\r\n-        int upd = em.createQuery(\r\n-            \"UPDATE Entity1 e SET e.stringField = \\'UPDATEFAILED\\' WHERE \" +\r\n-                \"e.pk = 23\").executeUpdate();\r\n-\r\n-        assertEquals(1, upd);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Query;\n+\n+\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestEJBDeleteUpdateImpl extends BaseQueryTest {\n+\n+    RuntimeTest1 runt1;\n+    RuntimeTest2 runt2;\n+    Entity1 ent;\n+\n+    public TestEJBDeleteUpdateImpl(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+        deleteAll(Entity1.class);\n+\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+\n+        runt1 = new RuntimeTest1(1);\n+        runt1.setStringField(\"runt1\");\n+        runt1.setSelfOneOne(new RuntimeTest1(2));\n+        runt2 = new RuntimeTest2(3);\n+        runt2.setStringField(\"runt2\");\n+\n+        ent = new Entity1(23, \"UPDATEST\", 100);\n+\n+        em.persist(runt1);\n+        em.persist(runt2);\n+        em.persist(ent);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testUpdate1() {\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 ret = em.find(RuntimeTest1.class, em.getObjectId(runt1));\n+\n+        assertNotNull(ret);\n+        assertEquals(\"runt1\", ret.getStringField());\n+        assertNotNull(ret.getSelfOneOne());\n+\n+        String ejbqlUpdate =\n+            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\n+        int updatedEntities = em.createQuery(ejbqlUpdate)\n+            .setParameter(\"strngfld\", \"runner13\")\n+            .setParameter(\"stdfield\", \"runt1\")\n+            .executeUpdate();\n+\n+        assertEquals(1, updatedEntities);\n+\n+        endTx(em);\n+\n+        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, em.getObjectId(runt1));\n+        em.refresh(ret2);\n+\n+        assertNotNull(ret2);\n+        assertEquals(\"runner13\", ret2.getStringField());\n+\n+        endEm(em);\n+    }\n+\n+    public void testUpdate2() {\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\n+        assertNotNull(run);\n+        assertEquals(\"runt1\", run.getStringField());\n+        assertNotNull(run.getSelfOneOne());\n+\n+        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\n+            \"SET x.stringField = :strngfld \" +\n+            \"WHERE x.stringField = :field\";\n+        int upEntities = em.createQuery(ejbqlUpdate)\n+            .setParameter(\"strngfld\", \"upd\")\n+            .setParameter(\"field\", \"runt1\")\n+            .executeUpdate();\n+\n+        assertEquals(1, upEntities);\n+\n+        endTx(em);\n+\n+        em = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 inst = em.find(RuntimeTest1.class, em.getObjectId(runt1));\n+        em.refresh(inst);\n+\n+        assertNotNull(inst);\n+        assertEquals(\"upd\", inst.getStringField());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testDelete1() {\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\n+        assertNotNull(run);\n+        assertEquals(\"runt1\", run.getStringField());\n+        assertNotNull(run.getSelfOneOne());\n+\n+        String ejbdelUpdate = \"DELETE  FROM RuntimeTest1 s \" +\n+            \"WHERE s.stringField = :strngfld\";\n+        int delEntity = em.createQuery(ejbdelUpdate)\n+            .setParameter(\"strngfld\", \"runt1\")\n+            .executeUpdate();\n+\n+        assertEquals(1, delEntity);\n+\n+        RuntimeTest1 del = em.find(RuntimeTest1.class, em.getObjectId(runt1));\n+        assertNull(del);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testDelete2() {\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\n+        assertNotNull(run);\n+        assertEquals(\"runt1\", run.getStringField());\n+        assertNotNull(run.getSelfOneOne());\n+\n+        String ejbdelUpdate =\n+            \"DELETE  FROM RuntimeTest1 r WHERE r.stringField = ?1\";\n+        Query query = em.createQuery(ejbdelUpdate);\n+\n+        query.setParameter(1, \"runt1\");\n+        int ok = query.executeUpdate();\n+\n+        assertEquals(1, ok);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testUpdate3() {\n+        OpenJPAEntityManager em =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(em);\n+\n+        Entity1 ent = em.find(Entity1.class, 23);\n+\n+        assertNotNull(ent);\n+        assertEquals(\"UPDATEST\", ent.getStringField());\n+\n+        int upd = em.createQuery(\n+            \"UPDATE Entity1 e SET e.stringField = \\'UPDATEFAILED\\' WHERE \" +\n+                \"e.pk = 23\").executeUpdate();\n+\n+        assertEquals(1, upd);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+}"},{"sha":"343ad59985bb66bd1b29d306a38fb1c825fbdf4e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,88 +1,88 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n-\r\n-public class TestEJBPolymorphicQuery extends BaseQueryTest {\r\n-\r\n-    public TestEJBPolymorphicQuery(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        int run1 = 10;\r\n-        int run2 = 15;\r\n-\r\n-        for (int i = 0; i < run1; i++) {\r\n-            RuntimeTest1 rt = new RuntimeTest1(i);\r\n-            rt.setStringField(\"foo \" + i);\r\n-            em.persist(rt);\r\n-        }\r\n-\r\n-        for (int i = 10; i < run2; i++) {\r\n-            em.persist(new RuntimeTest2(i));\r\n-        }\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    /**\r\n-     * Ensures that when a select query is ran against an entity at the top of the hierarchy\r\n-     * that the result is its instances and that of all its subclass.\r\n-     */\r\n-    public void testPolymorphicSelect() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(l);\r\n-        assertEquals(15, l.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testPolymorphicDelete() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        int l = em.createQuery(\"Delete from RuntimeTest1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertNotNull(l);\r\n-        assertEquals(15, l);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+\n+\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\n+\n+public class TestEJBPolymorphicQuery extends BaseQueryTest {\n+\n+    public TestEJBPolymorphicQuery(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        int run1 = 10;\n+        int run2 = 15;\n+\n+        for (int i = 0; i < run1; i++) {\n+            RuntimeTest1 rt = new RuntimeTest1(i);\n+            rt.setStringField(\"foo \" + i);\n+            em.persist(rt);\n+        }\n+\n+        for (int i = 10; i < run2; i++) {\n+            em.persist(new RuntimeTest2(i));\n+        }\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    /**\n+     * Ensures that when a select query is ran against an entity at the top of the hierarchy\n+     * that the result is its instances and that of all its subclass.\n+     */\n+    public void testPolymorphicSelect() {\n+        EntityManager em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\n+            .getResultList();\n+\n+        assertNotNull(l);\n+        assertEquals(15, l.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testPolymorphicDelete() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        int l = em.createQuery(\"Delete from RuntimeTest1\")\n+            .executeUpdate();\n+\n+        assertNotNull(l);\n+        assertEquals(15, l);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+}"},{"sha":"72abb7626daa2fefb8d837b573121f04bacc71df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","status":"modified","additions":151,"deletions":151,"changes":302,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,151 +1,151 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n-import org.apache.openjpa.persistence.query.common.apps.Entity2;\r\n-\r\n-public class TestEJBQueryInterface extends BaseQueryTest {\r\n-\r\n-    public TestEJBQueryInterface(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(Entity1.class);\r\n-\r\n-        int instNum = 10;\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        //create and persist multiple entity1 instances\r\n-        for (int i = 0; i < instNum; i++) {\r\n-            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n-            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n-            ent.setEntity2Field(ent2);\r\n-            em.persist(ent);\r\n-        }\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testResultList() {\r\n-        EntityManager em = currentEntityManager();\r\n-        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .getResultList();\r\n-\r\n-        assertEquals(10, list.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testGetSingleList() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        Entity1 ret =\r\n-            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\r\n-                .getSingleResult();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(\"string2\", ret.getStringField());\r\n-        assertEquals(4, ret.getIntField());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testExecuteUpdate() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        int ret = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 2\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(ret, 1);\r\n-\r\n-        int ret2 = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 22\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(ret2, 0);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testSetMaxResults() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .setMaxResults(5)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(l);\r\n-        assertEquals(5, l.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testSetFirstResults() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from Entity1 o order by o.pk\")\r\n-            .setFirstResult(3)\r\n-            .getResultList();\r\n-\r\n-        Entity1 ent = (Entity1) l.get(0);\r\n-\r\n-        assertNotNull(ent);\r\n-        assertEquals(\"string3\", ent.getStringField());\r\n-        assertEquals(5, ent.getIntField());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    // Tests Binding an argument to a named parameter.\r\n-    // pk, the named parameter --Not working yet--\r\n-    public void testSetParameter1() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        List ret =\r\n-            em.createQuery(\"SELECT o FROM Entity1 o WHERE o.stringField = :fld\")\r\n-                .setParameter(\"fld\", \"string1\")\r\n-                .getResultList();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(1, ret.size());\r\n-\r\n-        ret = em.createNamedQuery(\"setParam1\")\r\n-            .setParameter(\"fld\", \"string1\")\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(1, ret.size());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    //rest of the interface is tested by the CTS\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+\n+\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\n+import org.apache.openjpa.persistence.query.common.apps.Entity2;\n+\n+public class TestEJBQueryInterface extends BaseQueryTest {\n+\n+    public TestEJBQueryInterface(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(Entity1.class);\n+\n+        int instNum = 10;\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        //create and persist multiple entity1 instances\n+        for (int i = 0; i < instNum; i++) {\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\n+            ent.setEntity2Field(ent2);\n+            em.persist(ent);\n+        }\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testResultList() {\n+        EntityManager em = currentEntityManager();\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .getResultList();\n+\n+        assertEquals(10, list.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testGetSingleList() {\n+        EntityManager em = currentEntityManager();\n+\n+        Entity1 ret =\n+            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\n+                .getSingleResult();\n+\n+        assertNotNull(ret);\n+        assertEquals(\"string2\", ret.getStringField());\n+        assertEquals(4, ret.getIntField());\n+\n+        endEm(em);\n+    }\n+\n+    public void testExecuteUpdate() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        int ret = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 2\")\n+            .executeUpdate();\n+\n+        assertEquals(ret, 1);\n+\n+        int ret2 = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 22\")\n+            .executeUpdate();\n+\n+        assertEquals(ret2, 0);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testSetMaxResults() {\n+        EntityManager em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .setMaxResults(5)\n+            .getResultList();\n+\n+        assertNotNull(l);\n+        assertEquals(5, l.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testSetFirstResults() {\n+        EntityManager em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from Entity1 o order by o.pk\")\n+            .setFirstResult(3)\n+            .getResultList();\n+\n+        Entity1 ent = (Entity1) l.get(0);\n+\n+        assertNotNull(ent);\n+        assertEquals(\"string3\", ent.getStringField());\n+        assertEquals(5, ent.getIntField());\n+\n+        endEm(em);\n+    }\n+\n+    // Tests Binding an argument to a named parameter.\n+    // pk, the named parameter --Not working yet--\n+    public void testSetParameter1() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        List ret =\n+            em.createQuery(\"SELECT o FROM Entity1 o WHERE o.stringField = :fld\")\n+                .setParameter(\"fld\", \"string1\")\n+                .getResultList();\n+\n+        assertNotNull(ret);\n+        assertEquals(1, ret.size());\n+\n+        ret = em.createNamedQuery(\"setParam1\")\n+            .setParameter(\"fld\", \"string1\")\n+            .getResultList();\n+\n+        assertNotNull(ret);\n+        assertEquals(1, ret.size());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    //rest of the interface is tested by the CTS\n+}"},{"sha":"46a7bbad0cc84700059dde18760576f43ef6844e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,55 +1,55 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Collection;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestEscapedSingleQuotesInJPQL\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class, CLEAR_TABLES);\r\n-\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foo'bar\");\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        em.persist(aft);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testEscapedSingleQuotesInJPQL() {\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        OpenJPAQuery q = em.createQuery(\"select count(o) \" +\r\n-            \"from AllFieldTypes o where o.stringField = 'foo''bar'\");\r\n-        assertEquals(1, ((Number) q.getSingleResult()).longValue());\r\n-\r\n-        Collection all = em.createQuery(\"select o from AllFieldTypes o\")\r\n-            .getResultList();\r\n-        q.setCandidateCollection(all);\r\n-        assertEquals(1, ((Number) q.getSingleResult()).longValue());\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Collection;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestEscapedSingleQuotesInJPQL\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class, CLEAR_TABLES);\n+\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setStringField(\"foo'bar\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(aft);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testEscapedSingleQuotesInJPQL() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"select count(o) \" +\n+            \"from AllFieldTypes o where o.stringField = 'foo''bar'\");\n+        assertEquals(1, ((Number) q.getSingleResult()).longValue());\n+\n+        Collection all = em.createQuery(\"select o from AllFieldTypes o\")\n+            .getResultList();\n+        q.setCandidateCollection(all);\n+        assertEquals(1, ((Number) q.getSingleResult()).longValue());\n+    }\n+}"},{"sha":"702292d4995e5669c6dcd65f838bf7107cf8af19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,69 +1,69 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.FlushModeType;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-public class TestInMemoryQueryMatchEscapes\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class);\r\n-    }\r\n-    \r\n-    public void testDatabaseEscape() {\r\n-        OpenJPAQuery q = escapeHelper(false);\r\n-        q.setFlushMode(FlushModeType.AUTO);\r\n-        q.getEntityManager().flush();\r\n-        AllFieldTypes aft = (AllFieldTypes) q.getSingleResult();\r\n-        assertEquals(\"foo_bar\", aft.getStringField());\r\n-        q.getEntityManager().getTransaction().rollback();\r\n-    }\r\n-    \r\n-    public void testInMemoryEscape() {\r\n-        OpenJPAQuery q = escapeHelper(true);\r\n-        q.setFlushMode(FlushModeType.COMMIT);\r\n-        try {\r\n-            q.getSingleResult();\r\n-            fail(\"OpenJPA doesn't support escape syntax for in-mem queries\");\r\n-        } catch (Exception e) {\r\n-            // expected\r\n-        }\r\n-    }\r\n-    \r\n-    private OpenJPAQuery escapeHelper(boolean inMem) {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foo_bar\");\r\n-        em.persist(aft);\r\n-        aft = new AllFieldTypes();\r\n-        aft.setStringField(\"foozbar\");\r\n-        em.persist(aft);\r\n-\r\n-        return (OpenJPAQuery) em.createQuery(\r\n-            \"select e from AllFieldTypes e where e.stringField \" +\r\n-            \"like 'foox_bar' escape 'x'\");\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.FlushModeType;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestInMemoryQueryMatchEscapes\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+    \n+    public void testDatabaseEscape() {\n+        OpenJPAQuery q = escapeHelper(false);\n+        q.setFlushMode(FlushModeType.AUTO);\n+        q.getEntityManager().flush();\n+        AllFieldTypes aft = (AllFieldTypes) q.getSingleResult();\n+        assertEquals(\"foo_bar\", aft.getStringField());\n+        q.getEntityManager().getTransaction().rollback();\n+    }\n+    \n+    public void testInMemoryEscape() {\n+        OpenJPAQuery q = escapeHelper(true);\n+        q.setFlushMode(FlushModeType.COMMIT);\n+        try {\n+            q.getSingleResult();\n+            fail(\"OpenJPA doesn't support escape syntax for in-mem queries\");\n+        } catch (Exception e) {\n+            // expected\n+        }\n+    }\n+    \n+    private OpenJPAQuery escapeHelper(boolean inMem) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setStringField(\"foo_bar\");\n+        em.persist(aft);\n+        aft = new AllFieldTypes();\n+        aft.setStringField(\"foozbar\");\n+        em.persist(aft);\n+\n+        return (OpenJPAQuery) em.createQuery(\n+            \"select e from AllFieldTypes e where e.stringField \" +\n+            \"like 'foox_bar' escape 'x'\");\n+    }\n+}"},{"sha":"c2c3660c98e0cf5c47e01a12a35767a04a236ac9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,91 +1,91 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.query.common.apps.RuntimeTest3;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestJPAQuerySubclassFunc extends BaseQueryTest {\r\n-\r\n-    public TestJPAQuerySubclassFunc(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        OpenJPAEntityManager pm = getEM();\r\n-        startTx(pm);\r\n-\r\n-        pm.persist(new RuntimeTest1(\"TestQueryResults1\", 10));\r\n-        pm.persist(new RuntimeTest1(\"TestQueryResults3\", 10));\r\n-        pm.persist(new RuntimeTest1(\"TestQueryResults5\", 10));\r\n-\r\n-        pm.persist(new RuntimeTest3(\"TestQueryResults2\", 10));\r\n-        pm.persist(new RuntimeTest3(\"TestQueryResults4\", 10));\r\n-        pm.persist(new RuntimeTest3(\"TestQueryResults6\", 10));\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testSubClassIsTrueFunction() {\r\n-        OpenJPAEntityManager pm = getEM();\r\n-        startTx(pm);\r\n-\r\n-        OpenJPAQuery query =\r\n-            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\r\n-        query.setSubclasses(true);\r\n-\r\n-        List list = query.getResultList();\r\n-\r\n-        assertEquals(\"I expect size to be 6 since subclasses are included\", 6,\r\n-            list.size());\r\n-        assertTrue(list.contains(\"TestQueryResults1\"));\r\n-        assertTrue(list.contains(\"TestQueryResults2\"));\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testSubClassIsFalseFunction() {\r\n-        OpenJPAEntityManager pm = getEM();\r\n-        startTx(pm);\r\n-\r\n-        OpenJPAQuery query =\r\n-            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\r\n-        query.setSubclasses(false);\r\n-\r\n-        List list = query.getResultList();\r\n-\r\n-        assertEquals(\"I expect size to be 3 since subclasses are not included\",\r\n-            3, list.size());\r\n-        assertTrue(list.contains(\"TestQueryResults1\"));\r\n-        assertTrue(list.contains(\"TestQueryResults3\"));\r\n-        assertTrue(list.contains(\"TestQueryResults5\"));\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest3;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestJPAQuerySubclassFunc extends BaseQueryTest {\n+\n+    public TestJPAQuerySubclassFunc(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        OpenJPAEntityManager pm = getEM();\n+        startTx(pm);\n+\n+        pm.persist(new RuntimeTest1(\"TestQueryResults1\", 10));\n+        pm.persist(new RuntimeTest1(\"TestQueryResults3\", 10));\n+        pm.persist(new RuntimeTest1(\"TestQueryResults5\", 10));\n+\n+        pm.persist(new RuntimeTest3(\"TestQueryResults2\", 10));\n+        pm.persist(new RuntimeTest3(\"TestQueryResults4\", 10));\n+        pm.persist(new RuntimeTest3(\"TestQueryResults6\", 10));\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testSubClassIsTrueFunction() {\n+        OpenJPAEntityManager pm = getEM();\n+        startTx(pm);\n+\n+        OpenJPAQuery query =\n+            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\n+        query.setSubclasses(true);\n+\n+        List list = query.getResultList();\n+\n+        assertEquals(\"I expect size to be 6 since subclasses are included\", 6,\n+            list.size());\n+        assertTrue(list.contains(\"TestQueryResults1\"));\n+        assertTrue(list.contains(\"TestQueryResults2\"));\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testSubClassIsFalseFunction() {\n+        OpenJPAEntityManager pm = getEM();\n+        startTx(pm);\n+\n+        OpenJPAQuery query =\n+            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\n+        query.setSubclasses(false);\n+\n+        List list = query.getResultList();\n+\n+        assertEquals(\"I expect size to be 3 since subclasses are not included\",\n+            3, list.size());\n+        assertTrue(list.contains(\"TestQueryResults1\"));\n+        assertTrue(list.contains(\"TestQueryResults3\"));\n+        assertTrue(list.contains(\"TestQueryResults5\"));\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n }\n\\ No newline at end of file"},{"sha":"99de6d7a40093ad6b42e1563a534b0764fdd86b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,40 +1,40 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestJPQLWithoutIdentificationVariable extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(ManyOneEntity.class, ManyOneEntitySub.class);\r\n-    }\r\n-\r\n-    public void testJPQLWithoutIdentificationVariable() {\r\n-        try {\r\n-            em.createQuery(\"select o from ManyOneEntity o \" +\r\n-                \"where rel.name = :name\").compile();\r\n-        } catch (RuntimeException e) {\r\n-            assertTrue(e.getMessage().contains(\r\n-                \"Perhaps you forgot to prefix the path\"));\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestJPQLWithoutIdentificationVariable extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(ManyOneEntity.class, ManyOneEntitySub.class);\n+    }\n+\n+    public void testJPQLWithoutIdentificationVariable() {\n+        try {\n+            em.createQuery(\"select o from ManyOneEntity o \" +\n+                \"where rel.name = :name\").compile();\n+        } catch (RuntimeException e) {\n+            assertTrue(e.getMessage().contains(\n+                \"Perhaps you forgot to prefix the path\"));\n+        }\n+    }\n+}"},{"sha":"9681e4e6e8160f1d2059274c09404465743774d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,86 +1,86 @@\n-/*\r\n- * TestMathQueries.java\r\n- *\r\n- * Created on October 18, 2006, 1:06 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestMathQueries extends BaseQueryTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestMathQueries\r\n-     */\r\n-\r\n-    public TestMathQueries(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(QueryTest1.class);\r\n-        OpenJPAEntityManager pm = getEM();\r\n-        startTx(pm);\r\n-\r\n-        for (int i = 0; i <= 100; i++) {\r\n-            QueryTest1 ob = new QueryTest1();\r\n-            ob.setNum(i);\r\n-            pm.persist(ob);\r\n-        }\r\n-        endTx(pm);\r\n-\r\n-        for (long i = 0; i < 100; i++) {\r\n-            OpenJPAQuery q =\r\n-                pm.createQuery(\"SELECT q FROM QueryTest1 q WHERE q.numb = :ind\")\r\n-                    .setParameter(\"ind\", i);\r\n-            List l = q.getResultList();\r\n-            assertSize(1, l);\r\n-        }\r\n-    }\r\n-\r\n-    public void testMultipleQuery() {\r\n-        try {\r\n-\r\n-            OpenJPAQuery q1, q2;\r\n-            q1 = getEM().createQuery(\r\n-                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb = 25\");\r\n-            q2 = getEM().createQuery(\r\n-                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb > 25\");\r\n-\r\n-            assertSize(95, q2.getResultList());\r\n-            assertSize(1, q1.getResultList());\r\n-        }\r\n-        catch (Exception e) {\r\n-            bug(AbstractTestCase.Platform.EMPRESS, 890, e,\r\n-                \"Empress cannot handle certain \"\r\n-                    + \"aggregate functions\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * TestMathQueries.java\n+ *\n+ * Created on October 18, 2006, 1:06 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestMathQueries extends BaseQueryTest {\n+\n+    /**\n+     * Creates a new instance of TestMathQueries\n+     */\n+\n+    public TestMathQueries(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(QueryTest1.class);\n+        OpenJPAEntityManager pm = getEM();\n+        startTx(pm);\n+\n+        for (int i = 0; i <= 100; i++) {\n+            QueryTest1 ob = new QueryTest1();\n+            ob.setNum(i);\n+            pm.persist(ob);\n+        }\n+        endTx(pm);\n+\n+        for (long i = 0; i < 100; i++) {\n+            OpenJPAQuery q =\n+                pm.createQuery(\"SELECT q FROM QueryTest1 q WHERE q.numb = :ind\")\n+                    .setParameter(\"ind\", i);\n+            List l = q.getResultList();\n+            assertSize(1, l);\n+        }\n+    }\n+\n+    public void testMultipleQuery() {\n+        try {\n+\n+            OpenJPAQuery q1, q2;\n+            q1 = getEM().createQuery(\n+                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb = 25\");\n+            q2 = getEM().createQuery(\n+                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb > 25\");\n+\n+            assertSize(95, q2.getResultList());\n+            assertSize(1, q1.getResultList());\n+        }\n+        catch (Exception e) {\n+            bug(AbstractTestCase.Platform.EMPRESS, 890, e,\n+                \"Empress cannot handle certain \"\n+                    + \"aggregate functions\");\n+        }\n+    }\n+}"},{"sha":"ef49448b37c06666c4ee20912fe3399d056f3b8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","status":"modified","additions":113,"deletions":113,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,113 +1,113 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.kernel.FetchConfiguration;\r\n-import org.apache.openjpa.kernel.Query;\r\n-import org.apache.openjpa.kernel.QueryLanguages;\r\n-import org.apache.openjpa.kernel.StoreContext;\r\n-import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n-import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.persistence.ArgumentException;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.QueryImpl;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-/**\r\n- * Tests MethodQL.\r\n- * \r\n- * The 'user method' is simply echos the parameters set on the query.\r\n- *  \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestMethodQLQuery\r\n-    extends SingleEMTestCase {\r\n-\r\n-    @Override\r\n-    public void setUp() {\r\n-        setUp(SimpleEntity.class);\r\n-    }\r\n-\r\n-    OpenJPAQuery createMethodQuery(String method) {\r\n-        String methodName = getClass().getName()+ \".\" + method;\r\n-        return em.createQuery(QueryLanguages.LANG_METHODQL, methodName);\r\n-    }\r\n-    \r\n-    public void testMethodQLWithParameters() {\r\n-        OpenJPAQuery q = createMethodQuery(\"echo\");\r\n-        Query kernelQ = q.unwrap(Query.class);\r\n-        kernelQ.declareParameters(\"String firstName, String lastName\");\r\n-        q.setParameter(\"firstName\", \"Fred\").setParameter(\"lastName\", \"Lucas\");\r\n-        Object result = q.getResultList().get(0);\r\n-        assertTrue(result instanceof Map);\r\n-        Map params = (Map)result;\r\n-        assertEquals(\"Fred\", params.get(\"firstName\"));\r\n-        assertEquals(\"Lucas\", params.get(\"lastName\"));\r\n-    }\r\n-\r\n-    public void testMethodQLWithoutParametersDeclared() {\r\n-        OpenJPAQuery q = createMethodQuery(\"echo\");\r\n-        Object result = q.getResultList().get(0);\r\n-        assertTrue(result instanceof Map);\r\n-        assertTrue(((Map)result).isEmpty());\r\n-    }\r\n-\r\n-    public void testInvalidMethodReturnType() {\r\n-        OpenJPAQuery q = createMethodQuery(\"invalidReturnMeth\");\r\n-        try {\r\n-            q.getResultList().get(0);\r\n-            fail(\"should have gotten an exception since method is invalid\");\r\n-        } catch (ArgumentException ae) {\r\n-            // expected\r\n-        }\r\n-    }\r\n-\r\n-    public void testVoidMethodReturnType() {\r\n-        OpenJPAQuery q = createMethodQuery(\"voidMeth\");\r\n-        try {\r\n-            q.getResultList().get(0);\r\n-            fail(\"should have gotten an exception since method is invalid\");\r\n-        } catch (ArgumentException ae) {\r\n-            // expected\r\n-        }\r\n-    }\r\n-    \r\n-    /**\r\n-     * Returns the list whose element is the Map of input parameters.\r\n-     * @return\r\n-     */\r\n-    public static ResultObjectProvider echo(StoreContext ctx,\r\n-        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n-        return new ListResultObjectProvider(Collections.singletonList(params));\r\n-    }\r\n-\r\n-    public static void voidMeth(StoreContext ctx,\r\n-        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n-    }\r\n-\r\n-    public static Object invalidReturnMeth(StoreContext ctx,\r\n-        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n-        return null;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.Query;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.persistence.ArgumentException;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.QueryImpl;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * Tests MethodQL.\n+ * \n+ * The 'user method' is simply echos the parameters set on the query.\n+ *  \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestMethodQLQuery\n+    extends SingleEMTestCase {\n+\n+    @Override\n+    public void setUp() {\n+        setUp(SimpleEntity.class);\n+    }\n+\n+    OpenJPAQuery createMethodQuery(String method) {\n+        String methodName = getClass().getName()+ \".\" + method;\n+        return em.createQuery(QueryLanguages.LANG_METHODQL, methodName);\n+    }\n+    \n+    public void testMethodQLWithParameters() {\n+        OpenJPAQuery q = createMethodQuery(\"echo\");\n+        Query kernelQ = q.unwrap(Query.class);\n+        kernelQ.declareParameters(\"String firstName, String lastName\");\n+        q.setParameter(\"firstName\", \"Fred\").setParameter(\"lastName\", \"Lucas\");\n+        Object result = q.getResultList().get(0);\n+        assertTrue(result instanceof Map);\n+        Map params = (Map)result;\n+        assertEquals(\"Fred\", params.get(\"firstName\"));\n+        assertEquals(\"Lucas\", params.get(\"lastName\"));\n+    }\n+\n+    public void testMethodQLWithoutParametersDeclared() {\n+        OpenJPAQuery q = createMethodQuery(\"echo\");\n+        Object result = q.getResultList().get(0);\n+        assertTrue(result instanceof Map);\n+        assertTrue(((Map)result).isEmpty());\n+    }\n+\n+    public void testInvalidMethodReturnType() {\n+        OpenJPAQuery q = createMethodQuery(\"invalidReturnMeth\");\n+        try {\n+            q.getResultList().get(0);\n+            fail(\"should have gotten an exception since method is invalid\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+    }\n+\n+    public void testVoidMethodReturnType() {\n+        OpenJPAQuery q = createMethodQuery(\"voidMeth\");\n+        try {\n+            q.getResultList().get(0);\n+            fail(\"should have gotten an exception since method is invalid\");\n+        } catch (ArgumentException ae) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Returns the list whose element is the Map of input parameters.\n+     * @return\n+     */\n+    public static ResultObjectProvider echo(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+        return new ListResultObjectProvider(Collections.singletonList(params));\n+    }\n+\n+    public static void voidMeth(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+    }\n+\n+    public static Object invalidReturnMeth(StoreContext ctx,\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\n+        return null;\n+    }\n+}"},{"sha":"127e6f6a7918a1ed163f7305ecf67a45c4dff939","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,114 +1,114 @@\n-/*\r\n- * TestNamedQueries.java\r\n- *\r\n- * Created on October 18, 2006, 1:17 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Collection;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n-\r\n-import org.apache.openjpa.meta.QueryMetaData;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestNamedQueries extends BaseQueryTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestNamedQueries\r\n-     */\r\n-\r\n-    public TestNamedQueries(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(QueryTest1.class);\r\n-\r\n-        OpenJPAEntityManager pm = getEM();\r\n-        startTx(pm);\r\n-        QueryTest1 pc = null;\r\n-        for (int i = 0; i < 10; i++) {\r\n-            pc = new QueryTest1();\r\n-            if (i < 5)\r\n-                pc.setNum(4);\r\n-            else\r\n-                pc.setNum(i + 10);\r\n-            pm.persist(pc);\r\n-        }\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNamedClassQuery() {\r\n-        OpenJPAEntityManager pm = getEM();\r\n-\r\n-        OpenJPAQuery query = pm.createQuery(\"SELECT o FROM QueryTest1 o\");\r\n-        query.setResultClass(QueryTest1.class);\r\n-\r\n-        assertEquals(QueryTest1.class, query.getResultClass());\r\n-        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n-        assertEquals(QueryTest1.class, query.getResultClass());\r\n-        //FIXME jthomas\r\n-        /*\r\n-        assertEquals(\"import java.util.*\", query.getImports());\r\n-        assertEquals(\"int pnum\", query.getParameters());\r\n-        assertEquals(\"QueryTest4 v4\", query.getVariables());\r\n-        assertEquals(\"sum(num)\", query.getResult());\r\n-        assertEquals(\"num\", query.getGrouping());\r\n-        */\r\n-        QueryMetaData meta = ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n-            getMetaDataRepositoryInstance().getQueryMetaData(null,\r\n-            \"named\", pm.getClassLoader(), true);\r\n-        assertNotNull(meta);\r\n-        assertEquals(\"SELECT o FROM QueryTest1 o\", meta.getQueryString());\r\n-        assertEquals(null, meta.getResultType());\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNamespace() {\r\n-        OpenJPAEntityManager pm = getEM();\r\n-        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\r\n-        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n-        query.closeAll();\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testSystemJDOQL() {\r\n-        // make sure local query metadata is parsed\r\n-        OpenJPAEntityManager pm = getEM();\r\n-\r\n-        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\r\n-        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n-        assertEquals(QueryTest1.class, query.getResultClass());\r\n-        assertEquals(10, ((Collection) query.getResultList()).size());\r\n-        query.closeAll();\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * TestNamedQueries.java\n+ *\n+ * Created on October 18, 2006, 1:17 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Collection;\n+\n+\n+\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\n+\n+import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestNamedQueries extends BaseQueryTest {\n+\n+    /**\n+     * Creates a new instance of TestNamedQueries\n+     */\n+\n+    public TestNamedQueries(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(QueryTest1.class);\n+\n+        OpenJPAEntityManager pm = getEM();\n+        startTx(pm);\n+        QueryTest1 pc = null;\n+        for (int i = 0; i < 10; i++) {\n+            pc = new QueryTest1();\n+            if (i < 5)\n+                pc.setNum(4);\n+            else\n+                pc.setNum(i + 10);\n+            pm.persist(pc);\n+        }\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testNamedClassQuery() {\n+        OpenJPAEntityManager pm = getEM();\n+\n+        OpenJPAQuery query = pm.createQuery(\"SELECT o FROM QueryTest1 o\");\n+        query.setResultClass(QueryTest1.class);\n+\n+        assertEquals(QueryTest1.class, query.getResultClass());\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\n+        assertEquals(QueryTest1.class, query.getResultClass());\n+        //FIXME jthomas\n+        /*\n+        assertEquals(\"import java.util.*\", query.getImports());\n+        assertEquals(\"int pnum\", query.getParameters());\n+        assertEquals(\"QueryTest4 v4\", query.getVariables());\n+        assertEquals(\"sum(num)\", query.getResult());\n+        assertEquals(\"num\", query.getGrouping());\n+        */\n+        QueryMetaData meta = ((OpenJPAEntityManagerSPI) pm).getConfiguration().\n+            getMetaDataRepositoryInstance().getQueryMetaData(null,\n+            \"named\", pm.getClassLoader(), true);\n+        assertNotNull(meta);\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", meta.getQueryString());\n+        assertEquals(null, meta.getResultType());\n+\n+        endEm(pm);\n+    }\n+\n+    public void testNamespace() {\n+        OpenJPAEntityManager pm = getEM();\n+        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\n+        query.closeAll();\n+        endEm(pm);\n+    }\n+\n+    public void testSystemJDOQL() {\n+        // make sure local query metadata is parsed\n+        OpenJPAEntityManager pm = getEM();\n+\n+        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\n+        assertEquals(QueryTest1.class, query.getResultClass());\n+        assertEquals(10, ((Collection) query.getResultList()).size());\n+        query.closeAll();\n+        endEm(pm);\n+    }\n+}"},{"sha":"39977cda3c9fc14457b0d01dc8d40217ad698602","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","status":"modified","additions":133,"deletions":133,"changes":266,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,133 +1,133 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.query.common.apps.Osoba;\r\n-import org.apache.openjpa.persistence.query.common.apps.Projekt;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Tests that managed, unmanaged or even transient Entity can be used as a \r\n- * query parameter.\r\n- * \r\n- * Originally raised as a JIRA Issue\r\n- * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-187\">OPENJPA-187</A>\r\n- * \r\n- * @author Pinaki Poddar\r\n- *\r\n- */\r\n-public class TestNewEntityAsQueryParameter extends SingleEMFTestCase {\r\n-\t\r\n-\tpublic static final String ID_PROJEKT1 = \"OpenJPA\";\r\n-\tpublic static final String ID_PROJEKT2 = \"Tomcat\";\r\n-\t\r\n-\tpublic static final int MEMBER_COUNT_PROJEKT1 = 6;\r\n-\tpublic static final int MEMBER_COUNT_PROJEKT2 = 4;\r\n-\tpublic static final int MEMBER_COUNT_TOTAL    = 8;\r\n-\t\r\n-\tpublic void setUp() throws Exception {\r\n-\t\tsuper.setUp(CLEAR_TABLES, Osoba.class, Projekt.class);\r\n-\t\tcreateData();\r\n-\t}\r\n-\t\r\n-\tprivate void createData() {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\t\r\n-\t\tOsoba[] osoby = new Osoba[MEMBER_COUNT_TOTAL];\r\n-\t\tfor (int i=0; i<MEMBER_COUNT_TOTAL; i++) {\r\n-\t\t\tosoby[i] = new Osoba(\"Osoba-\"+(i+1), 20+i);\r\n-\t\t\tem.persist(osoby[i]);\r\n-\t\t}\r\n-\t\t\r\n-\t\t\r\n-\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\r\n-\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\r\n-\t\tem.persist(projekt1);\r\n-\t\tem.persist(projekt2);\r\n-\t\t\r\n-\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT1; i++)\r\n-\t\t\tlink(osoby[i], projekt1);\r\n-\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT2; i++)\r\n-\t\t\tlink(osoby[osoby.length-i-1], projekt2);\r\n-\t\t\t\t\r\n-\t\tem.getTransaction().commit();\r\n-\t\tem.clear();\r\n-\t}\r\n-\r\n-\tpublic void tearDown() throws Exception {\r\n-\t\tsuper.tearDown();\r\n-\t}\r\n-\t\r\n-\tpublic void testQueryWithTransientInstanceAsParameter() {\r\n-\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\r\n-\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\r\n-\t\t\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tqueryWithParameter(em, projekt1, projekt2);\r\n-\t}\r\n-\t\r\n-\tpublic void testQueryWithUnmanagedPersistentInstanceAsParameter() {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\r\n-\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\r\n-\t\tem.clear();\r\n-\t\tassertFalse(em.contains(projekt1));\r\n-\t\tassertFalse(em.contains(projekt2));\r\n-\t\t\r\n-\t\tqueryWithParameter(em, projekt1, projekt2);\r\n-\t}\r\n-\r\n-\tpublic void testQueryWithManagedPersistentInstanceAsParameter() {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\r\n-\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\r\n-\t\tassertTrue(em.contains(projekt1));\r\n-\t\tassertTrue(em.contains(projekt2));\r\n-\t\t\r\n-\t\tqueryWithParameter(em, projekt1, projekt2);\r\n-\t}\r\n-\t\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-    void queryWithParameter(EntityManager em, Projekt projekt1, Projekt projekt2) {\r\n-\t\tString jpql = \"SELECT DISTINCT o FROM Osoba o WHERE :projekt MEMBER OF o.projekty\";\r\n-\t\tem.getTransaction().begin();\r\n-\t\tQuery query = em.createQuery(jpql);\r\n-\t\t\r\n-\t\tquery.setParameter(\"projekt\", projekt1);\r\n-\t\tList<Osoba> osoby = query.getResultList();\r\n-\t\tassertEquals(MEMBER_COUNT_PROJEKT1, osoby.size()); \r\n-\t\t\r\n-\t\tquery.setParameter(\"projekt\", projekt2);\r\n-\t\tosoby = query.getResultList();\r\n-\t\tassertEquals(MEMBER_COUNT_PROJEKT2, osoby.size());\r\n-\t\tem.getTransaction().rollback();\r\n-\t}\r\n-\t\r\n-\tvoid link(Osoba o, Projekt p) {\r\n-\t\to.addProjekty(p);\r\n-\t\tp.addOsoba(o);\r\n-\t}\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.query.common.apps.Osoba;\n+import org.apache.openjpa.persistence.query.common.apps.Projekt;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that managed, unmanaged or even transient Entity can be used as a \n+ * query parameter.\n+ * \n+ * Originally raised as a JIRA Issue\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-187\">OPENJPA-187</A>\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestNewEntityAsQueryParameter extends SingleEMFTestCase {\n+\t\n+\tpublic static final String ID_PROJEKT1 = \"OpenJPA\";\n+\tpublic static final String ID_PROJEKT2 = \"Tomcat\";\n+\t\n+\tpublic static final int MEMBER_COUNT_PROJEKT1 = 6;\n+\tpublic static final int MEMBER_COUNT_PROJEKT2 = 4;\n+\tpublic static final int MEMBER_COUNT_TOTAL    = 8;\n+\t\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp(CLEAR_TABLES, Osoba.class, Projekt.class);\n+\t\tcreateData();\n+\t}\n+\t\n+\tprivate void createData() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\t\n+\t\tOsoba[] osoby = new Osoba[MEMBER_COUNT_TOTAL];\n+\t\tfor (int i=0; i<MEMBER_COUNT_TOTAL; i++) {\n+\t\t\tosoby[i] = new Osoba(\"Osoba-\"+(i+1), 20+i);\n+\t\t\tem.persist(osoby[i]);\n+\t\t}\n+\t\t\n+\t\t\n+\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\n+\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\n+\t\tem.persist(projekt1);\n+\t\tem.persist(projekt2);\n+\t\t\n+\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT1; i++)\n+\t\t\tlink(osoby[i], projekt1);\n+\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT2; i++)\n+\t\t\tlink(osoby[osoby.length-i-1], projekt2);\n+\t\t\t\t\n+\t\tem.getTransaction().commit();\n+\t\tem.clear();\n+\t}\n+\n+\tpublic void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t}\n+\t\n+\tpublic void testQueryWithTransientInstanceAsParameter() {\n+\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\n+\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\n+\t\t\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tqueryWithParameter(em, projekt1, projekt2);\n+\t}\n+\t\n+\tpublic void testQueryWithUnmanagedPersistentInstanceAsParameter() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\n+\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\n+\t\tem.clear();\n+\t\tassertFalse(em.contains(projekt1));\n+\t\tassertFalse(em.contains(projekt2));\n+\t\t\n+\t\tqueryWithParameter(em, projekt1, projekt2);\n+\t}\n+\n+\tpublic void testQueryWithManagedPersistentInstanceAsParameter() {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\n+\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\n+\t\tassertTrue(em.contains(projekt1));\n+\t\tassertTrue(em.contains(projekt2));\n+\t\t\n+\t\tqueryWithParameter(em, projekt1, projekt2);\n+\t}\n+\t\n+\t@SuppressWarnings(\"unchecked\")\n+    void queryWithParameter(EntityManager em, Projekt projekt1, Projekt projekt2) {\n+\t\tString jpql = \"SELECT DISTINCT o FROM Osoba o WHERE :projekt MEMBER OF o.projekty\";\n+\t\tem.getTransaction().begin();\n+\t\tQuery query = em.createQuery(jpql);\n+\t\t\n+\t\tquery.setParameter(\"projekt\", projekt1);\n+\t\tList<Osoba> osoby = query.getResultList();\n+\t\tassertEquals(MEMBER_COUNT_PROJEKT1, osoby.size()); \n+\t\t\n+\t\tquery.setParameter(\"projekt\", projekt2);\n+\t\tosoby = query.getResultList();\n+\t\tassertEquals(MEMBER_COUNT_PROJEKT2, osoby.size());\n+\t\tem.getTransaction().rollback();\n+\t}\n+\t\n+\tvoid link(Osoba o, Projekt p) {\n+\t\to.addProjekty(p);\n+\t\tp.addOsoba(o);\n+\t}\n+\n+}"},{"sha":"16ba10b3a1f8579d658cae4686146d166a2e73dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","status":"modified","additions":109,"deletions":109,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,109 +1,109 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwned;\r\n-import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwner;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-\r\n-/**\r\n- * The query uses projection and result contains the same instance once as\r\n- * a direct projection and again as a fetch group of the other projection.\r\n- * Does the query return two separate instances or one identical instance?\r\n- * \r\n- * Originally reported as two different failures:\r\n- * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-209\">OPENJPA-209</A>\r\n- * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-210\">OPENJPA-210</A> \r\n- * \r\n- * @author Pinaki Poddar\r\n- */\r\n-public class TestProjectionQueryWithIdenticalResult extends SingleEMFTestCase {\r\n-\tprivate static boolean USE_TXN = true; \r\n-    public void setUp() {\r\n-        setUp(CLEAR_TABLES,\r\n-        \t  UnidirectionalOneToOneOwned.class, \r\n-        \t  UnidirectionalOneToOneOwner.class);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        UnidirectionalOneToOneOwner owner = new UnidirectionalOneToOneOwner();\r\n-        owner.setMarker(\"Owner\");\r\n-        UnidirectionalOneToOneOwned owned = new UnidirectionalOneToOneOwned();\r\n-        owned.setMarker(\"Owned\");\r\n-        owner.setOwned(owned);\r\n-        em.persist(owner);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-    \r\n-\tpublic void testDuplicateResultInProjection1() {\r\n-\t\tString jpql = \"SELECT p.owned, p FROM UnidirectionalOneToOneOwner p\";\r\n-\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n-\t\tfor (Object[] row : result) {\r\n-\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\r\n-\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\r\n-\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\tpublic void testDuplicateResultInProjection2() {\r\n-\t\tString jpql = \"SELECT p, p.owned FROM UnidirectionalOneToOneOwner p\";\r\n-\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n-\t\tfor (Object[] row : result) {\r\n-\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\r\n-\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\r\n-\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\tpublic void testDuplicateResultInProjection3() {\r\n-\t\tString jpql = \"SELECT p, q FROM UnidirectionalOneToOneOwner p, \" +\r\n-\t\t\t\t\t\t\"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\r\n-\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n-\t\tfor (Object[] row : result) {\r\n-\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\r\n-\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\r\n-\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\tpublic void testDuplicateResultInProjection4() {\r\n-\t\tString jpql = \"SELECT q, p FROM UnidirectionalOneToOneOwner p, \" +\r\n-\t\t\t\t\t    \"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\r\n-\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n-\t\tfor (Object[] row : result) {\r\n-\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\r\n-\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\r\n-\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\r\n-\t\t}\r\n-\t}\r\n-\t\r\n-\tprivate List executeQuery(String jpql, boolean useTxn) {\r\n-\t\tEntityManager em = emf.createEntityManager();\r\n-\t\tem.getTransaction().begin();\r\n-\t\tList result = em.createQuery(jpql).getResultList();\r\n-\t\tem.getTransaction().rollback();\r\n-\t\treturn result;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwned;\n+import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+/**\n+ * The query uses projection and result contains the same instance once as\n+ * a direct projection and again as a fetch group of the other projection.\n+ * Does the query return two separate instances or one identical instance?\n+ * \n+ * Originally reported as two different failures:\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-209\">OPENJPA-209</A>\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-210\">OPENJPA-210</A> \n+ * \n+ * @author Pinaki Poddar\n+ */\n+public class TestProjectionQueryWithIdenticalResult extends SingleEMFTestCase {\n+\tprivate static boolean USE_TXN = true; \n+    public void setUp() {\n+        setUp(CLEAR_TABLES,\n+        \t  UnidirectionalOneToOneOwned.class, \n+        \t  UnidirectionalOneToOneOwner.class);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        UnidirectionalOneToOneOwner owner = new UnidirectionalOneToOneOwner();\n+        owner.setMarker(\"Owner\");\n+        UnidirectionalOneToOneOwned owned = new UnidirectionalOneToOneOwned();\n+        owned.setMarker(\"Owned\");\n+        owner.setOwned(owned);\n+        em.persist(owner);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+    \n+\tpublic void testDuplicateResultInProjection1() {\n+\t\tString jpql = \"SELECT p.owned, p FROM UnidirectionalOneToOneOwner p\";\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\n+\t\tfor (Object[] row : result) {\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDuplicateResultInProjection2() {\n+\t\tString jpql = \"SELECT p, p.owned FROM UnidirectionalOneToOneOwner p\";\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\n+\t\tfor (Object[] row : result) {\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDuplicateResultInProjection3() {\n+\t\tString jpql = \"SELECT p, q FROM UnidirectionalOneToOneOwner p, \" +\n+\t\t\t\t\t\t\"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\n+\t\tfor (Object[] row : result) {\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\n+\t\t}\n+\t}\n+\t\n+\tpublic void testDuplicateResultInProjection4() {\n+\t\tString jpql = \"SELECT q, p FROM UnidirectionalOneToOneOwner p, \" +\n+\t\t\t\t\t    \"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\n+\t\tfor (Object[] row : result) {\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\n+\t\t}\n+\t}\n+\t\n+\tprivate List executeQuery(String jpql, boolean useTxn) {\n+\t\tEntityManager em = emf.createEntityManager();\n+\t\tem.getTransaction().begin();\n+\t\tList result = em.createQuery(jpql).getResultList();\n+\t\tem.getTransaction().rollback();\n+\t\treturn result;\n+\t}\n+}"},{"sha":"f17c9f202ad30f213f98832e3067ab4fe24847b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43","patch":"@@ -1,80 +1,80 @@\n-/*\r\n- * TestQueryExpressionSplit.java\r\n- *\r\n- * Created on October 18, 2006, 1:57 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.query;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.kernel.Filters;\r\n-\r\n-public class TestQueryExpressionSplit extends BaseQueryTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestQueryExpressionSplit\r\n-     */\r\n-\r\n-    public TestQueryExpressionSplit(String test) {\r\n-        super(test);\r\n-    }\r\n-\r\n-    public void testSimple() {\r\n-        assertEquals(new String[]{ \"foo() bar(boo)\" },\r\n-            Filters.splitExpressions(\"foo() bar(boo)\", ',', 3));\r\n-        assertEquals(new String[]{ \"foo() bar(boo)\", \"biz()\", \"baz(boo)\" },\r\n-            Filters.splitExpressions(\"foo() bar(boo), biz(), baz(boo)\",\r\n-                ',', 3));\r\n-    }\r\n-\r\n-    public void testCommaInString() {\r\n-        assertEquals(new String[]{ \"foo \\\"bar(),biz)\\\"\" },\r\n-            Filters.splitExpressions(\"foo \\\"bar(),biz)\\\"\", ',', 3));\r\n-        assertEquals(new String[]{ \"foo 'bar(),\\\"biz)'\", \"boo\" },\r\n-            Filters.splitExpressions(\"foo 'bar(),\\\"biz)', boo\", ',', 3));\r\n-    }\r\n-\r\n-    public void testCommaInFunction() {\r\n-        assertEquals(new String[]{ \"(foo(bar, biz))\",\r\n-            \"boo(biz, baz('xxx,yyy'))\" },\r\n-            Filters.splitExpressions(\"(foo(bar, biz)), \"\r\n-                + \"boo(biz, baz('xxx,yyy'))\", ',', 3));\r\n-    }\r\n-\r\n-    public void testEscapedString() {\r\n-        assertEquals(new String[]{ \"foo \\\"bar\\\\\\\", biz(\\\"\",\r\n-            \"\\\"baz\\\\\\\", boo\\\"\" },\r\n-            Filters.splitExpressions(\"foo \\\"bar\\\\\\\", biz(\\\", \"\r\n-                + \"\\\"baz\\\\\\\", boo\\\"\", ',', 3));\r\n-    }\r\n-\r\n-    private void assertEquals(String[] ans, List test) {\r\n-        List l = Arrays.asList(ans);\r\n-        assertEquals(l + \" != \" + test, l, test);\r\n-    }\r\n-}\r\n+/*\n+ * TestQueryExpressionSplit.java\n+ *\n+ * Created on October 18, 2006, 1:57 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+\n+\n+import org.apache.openjpa.kernel.Filters;\n+\n+public class TestQueryExpressionSplit extends BaseQueryTest {\n+\n+    /**\n+     * Creates a new instance of TestQueryExpressionSplit\n+     */\n+\n+    public TestQueryExpressionSplit(String test) {\n+        super(test);\n+    }\n+\n+    public void testSimple() {\n+        assertEquals(new String[]{ \"foo() bar(boo)\" },\n+            Filters.splitExpressions(\"foo() bar(boo)\", ',', 3));\n+        assertEquals(new String[]{ \"foo() bar(boo)\", \"biz()\", \"baz(boo)\" },\n+            Filters.splitExpressions(\"foo() bar(boo), biz(), baz(boo)\",\n+                ',', 3));\n+    }\n+\n+    public void testCommaInString() {\n+        assertEquals(new String[]{ \"foo \\\"bar(),biz)\\\"\" },\n+            Filters.splitExpressions(\"foo \\\"bar(),biz)\\\"\", ',', 3));\n+        assertEquals(new String[]{ \"foo 'bar(),\\\"biz)'\", \"boo\" },\n+            Filters.splitExpressions(\"foo 'bar(),\\\"biz)', boo\", ',', 3));\n+    }\n+\n+    public void testCommaInFunction() {\n+        assertEquals(new String[]{ \"(foo(bar, biz))\",\n+            \"boo(biz, baz('xxx,yyy'))\" },\n+            Filters.splitExpressions(\"(foo(bar, biz)), \"\n+                + \"boo(biz, baz('xxx,yyy'))\", ',', 3));\n+    }\n+\n+    public void testEscapedString() {\n+        assertEquals(new String[]{ \"foo \\\"bar\\\\\\\", biz(\\\"\",\n+            \"\\\"baz\\\\\\\", boo\\\"\" },\n+            Filters.splitExpressions(\"foo \\\"bar\\\\\\\", biz(\\\", \"\n+                + \"\\\"baz\\\\\\\", boo\\\"\", ',', 3));\n+    }\n+\n+    private void assertEquals(String[] ans, List test) {\n+        List l = Arrays.asList(ans);\n+        assertEquals(l + \" != \" + test, l, test);\n+    }\n+}"},{"sha":"047fad42f9107a233567c28d9db23effa64963f0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9955ee86e5d2193d7882632dca3aac267a57f325","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","status":"modified","additions":198,"deletions":198,"changes":396,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bae923d63353a73816b28848c876507f191cbca5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fda12191f75c974f47f46f5609c7d736752704f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b439aea80b17c9fff532fb8eddddd3859ab91e14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d7bd261dc1b853db4fc136dafecd9e1a08f24464","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"713af3ffa9f18ddc3388dc10446238be3d20b2f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1c00962e4ddb46a6ddf861c47f4262e59b9eb050","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"dfc0ab9db2d771dc54fcb33dbc29d042dc8c7f58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f779867492a0f0a3f1856b4de787f47be0f1a672","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"388aa1f8830feedb953959f15b8b7fe25dd3ce99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"39217b2f60d7b267f4657efdb1823570d4edd2a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c1283f5d50b1fd5dd836015ad71e72fc99f9cf5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b8a0755afe888de7625bc74773cd2343ff47588d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"33df25f5bd6d556e09d5bb6b4d82e158134bc978","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fe0dc96d2aaf3c156995471eb7bfa4e0e6f4665c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"df562ce5ea4749b737986a246462aa98ffa8b896","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","status":"modified","additions":124,"deletions":124,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1631d1264d691264f02325c8748d5bb01baafc3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fdbd2e292b8ef44261292ade7d76a646e170c4e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5cea02fadddc01a0d1cd9ac951347cec8abf9b91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6d13ac1b045d3623aba652b49d10bb5a2f444940","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","status":"modified","additions":149,"deletions":149,"changes":298,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8cee8087a27a5207ead839bb4e5b6af2bc1fd296","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2963bed64e91036e7f11ca010adb18a9075d26ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"df456a3f1900007c07abe894965ec4e1480d4e43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"95c5f1909927feac75075eba253e926bb0a6339c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","status":"modified","additions":283,"deletions":283,"changes":566,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"60d6bdb6bb9092591299f456abdfe290aed6629d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a36dd9ae7f62c5c408a5785e289dcd825a02c077","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7cd6d0f208dbb55a9682d0e45fcd30146ca5e613","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ddeb21785c5b3132e49ef505b5561523f64d41ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e5053e88ba4c98a33d76dce37da7bf7832db879f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"70ce9692ca89db65380333bbaad3802d6f594e9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"13aa958a7f9b883f22ec9e7b33cced57ce827b96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4a50af786785888d07e254cf7ade30e9d73c18ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f61fce26ae83a3a13099dd57833111089347b60d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"da9dd4f0933ef02e4c78ad594076b17a9b8cf8fb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"88b94bd0101dcbe1a7ca48d008d4d8eb0d87063a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bf5128c667b7be92e0d696ab98bb26d0c64d3884","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8906e9f48be51827186af0991034e859a277a097","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6e09d1138fc1c8da9fbc5d40619ab6fbe67ba9cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b3591f5a6ff208388b584669ab8458a212d9ad66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"24b37cf88678f7e55942cdfeed24a004b5b4e395","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"42c36f6f34caa71e5a812274022cdbf6efeb1051","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"25efaee5675cc90b076f20aa05a59c8383bb96d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7bc2337a22eab3c03bd85e1ca467f7848ab85f05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eada11c85428ae596d62fbe58209ae9f1e2ade64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6b20211332ba57b35e383ce5ad87f9b9e8cadb62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"61630e900199706d5ef7c1198bc5f7dee4f4c2cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0bbf14cc56cd9e744f7e888b5156392787f542df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ef4b09e5a8beb90a101ad8078c1a9cdbea472502","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6ab328b509cf4e292cf71e0fd3e6e2baedb7be01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ec9e484577f9e2dca7aefab62d5abee786648f16","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"672691ac18eb748ca8907dd29bca089be7418571","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","status":"modified","additions":83,"deletions":83,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"62ff6addaf907cb99e310c7406c7671d8f4fd343","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c88f0fef1207c0334d8ece9b41f7f67ad89ba45a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"311b62a9b685eb28ea1725578ba9e0bb314a412e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5757a9daddb46ef5a797a56fd3a1e4d92ddcd7b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4c70ba91bd7a8b70705edc924a8c0d4e94bb804e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"aba949dcc761fabc7b6de1d1f1c414cc6bc33ae4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d8f1d504f63e951b7c9e7293a9a71d4c2fe74975","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ae0891dbe3db032c29c7b476f9b67cb8dc259933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cc8b2bac8b03b473648c92a2bc6eeb4e199ae201","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0f255b49ba48efd7476d6e447851f74973bc6df4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"93c82ca4aa4dacfe44ae54fab86520545a24e435","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"936d8a2732dada6100f91b47cdc036d41ee16f32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1ba28059679924ca92697e1493f02b8a74d4125a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"modified","additions":323,"deletions":323,"changes":646,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5b0acadedd793074ac73b26a88e563d5d4b8fc1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"057ce0ba8e080e2541f5ccf3b80179d507386ace","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","status":"modified","additions":263,"deletions":263,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"80543501f23d76e7a475416c2757d0950aca4247","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a3fdee303d98b4c9d4da5e97a4f8049eced7e5ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eab1f9c4f66547492bc71b81235e3de6c1597258","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4bec8e3f3622af54ebb42d552f03d1d33afaa4a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"425d4fa19d3df7d677652579e32dcf9336b12886","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3c44eb6be10df5e254df5973dc824630640bca43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"47ae8de872b02e53be7b030465c7f950c537b23a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"83ce7899bc320d82b42eab00c159cfc9ddc93169","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestRefresh.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d9e60656a44437e6e64def857a75d9f871804e4a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AllowFailure.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AllowFailure.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AllowFailure.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AllowFailure.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b11b36700686914370d92a5886f0324a24b6a544","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ClassSelector.java","status":"modified","additions":244,"deletions":244,"changes":488,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ClassSelector.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ClassSelector.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/ClassSelector.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"04fd6b333c92f487508f4d085eeadebf8f8d1f50","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinationGenerator.java","status":"modified","additions":109,"deletions":109,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinationGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinationGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinationGenerator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"235872f505986210b55a2583897d204536709340","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialPersistenceTestCase.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialPersistenceTestCase.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"41ab91530674f0cf08135bbe7d479915d086de3a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialTestHelper.java","status":"modified","additions":200,"deletions":200,"changes":400,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialTestHelper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialTestHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/CombinatorialTestHelper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"06b02d60aa3a6a8ed0d1c07c4f8ef3231eab6090","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/DatabasePlatform.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/DatabasePlatform.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/DatabasePlatform.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/DatabasePlatform.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6b666c80148f1241187449b43b7f188fdef8eeb6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"afa5c609c142cc578c85014a1ff51ebd5161e9dd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","status":"modified","additions":152,"deletions":152,"changes":304,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e402a73631126dcf751d15120422e2cff4a7b26b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"88aa1adcf1d24afc34fc761c134f6833cb64513a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"02fe56f5f92a672db799f2222dd188cfbd1d18dd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5a77e82585e9f5d56c297ae3357bba6a25487f86","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"db6a0fd0d243bd3e1f5ba93eec92af0d70b5e2e9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b40f785e0f64c5a91e8286f4ae6cc0ffadf1c4b5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":1671,"deletions":1671,"changes":3342,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8240d592d83230755883f29c6c5bfcfcef481d45","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/HintHandler.java","status":"modified","additions":382,"deletions":382,"changes":764,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/HintHandler.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/HintHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/HintHandler.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7351e34b53ec73078c3b5b8dea3b0e922c8955f2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"modified","additions":319,"deletions":319,"changes":638,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a5b7058f17db59e2a392c32c2e6d9bba0a66c9db","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"17852ce0d05d3bb270cffd29316042b1194da62b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","status":"modified","additions":126,"deletions":126,"changes":252,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7b7cf8597f629ec6de030e6fe28b0134bcc6576b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bde8162b0cadca75840c5c38b8600653cf1eb54a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a683f8d12b72876d0ce91f76135f511eeae890ec","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ea2ed8705e55866352f15127e30b4b6aa83af66e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Replicated.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f65439b9c4969ae1c68dc6e6aade5cf20979ffe8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ee92fdb484ff83d6d6323947c03b96c1d52b3987","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbsExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbsExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"10e2d743fb3a70fc349fc8d87ceec0f99c00ac3c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractDomainObject.java","status":"modified","additions":324,"deletions":324,"changes":648,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractDomainObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractDomainObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractDomainObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"13ff47056cf70688c6979726a5e3ef8640d36c4f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractPath.java","status":"modified","additions":132,"deletions":132,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractPath.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractPath.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0049ee1bae5f0527c9a54616e2e4b329ef727ff0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractVisitable.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractVisitable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractVisitable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AbstractVisitable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cf96c74c2cc70e2a7908fb19bb3386d8c13d60e0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Aggregate.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Aggregate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a607ced6f1f0f289c069080a4137dece10da3ddb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AliasContext.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AliasContext.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AliasContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AliasContext.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4210bb1f7f67a40bf5ccad38d7f492c32b40d9e6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AllExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AllExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AllExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AllExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6c2b9746b296104bff6d180221243079bae703d5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AndPredicate.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AndPredicate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AndPredicate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AndPredicate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5fb1ecaf5a1823888a211b056f54634e7093a894","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AnyExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AnyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AnyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AnyExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"73b33aa70d7629e470cb1e35a3b21b848830c2b5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ArrayExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fa2af170e473a39d07b01639c3cf7eabc45f0bb7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AverageExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AverageExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AverageExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/AverageExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bf27a74cf8d4ad1c716c76f906dc229aa4a56d4d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BetweenExpression.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BetweenExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BetweenExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BetweenExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"963f69026927ff9a97e4c1ad7ef786d13db04434","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryConditionalOperator.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryConditionalOperator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryConditionalOperator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryConditionalOperator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"665a8dc162813d24302027a1e30bbd1c652396e6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryExpressionPredicate.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryExpressionPredicate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryExpressionPredicate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryExpressionPredicate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cc5a27e7d7a0f7a0c28433e92765de785d79e78a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryFunctionalOperator.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryFunctionalOperator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryFunctionalOperator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryFunctionalOperator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6a86bbbc97f9635bfdfc84339d8555361cfee958","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryOperatorExpression.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryOperatorExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryOperatorExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/BinaryOperatorExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b0589a4ea82ef04a3fdb75ab08be99a0a5eee4b3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpression.java","status":"modified","additions":299,"deletions":299,"changes":598,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0cb58d32fcfbb0a799bd0d4501b0e59205c8d554","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpressionImpl.java","status":"modified","additions":206,"deletions":206,"changes":412,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CaseExpressionImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"09f53aa5206252832545ef9347e9699ecd41fa99","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConcatExpression.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConcatExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConcatExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConcatExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a16ba62babf7420a7ca7d1ebc3611d7bb39c6b71","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConditionalOperator.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConditionalOperator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConditionalOperator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConditionalOperator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6ab7ae17a5ab840fa09a333c8178401a2b7192ba","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConstantExpression.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConstantExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConstantExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ConstantExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e02ca4d7c4abf4d59d66e6986e1a6e5e318b12a4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CountExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CountExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CountExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CountExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a1e4a6f3bb3d2558966465a1433d3fa9d12f132a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CurrentTimeExpression.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CurrentTimeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CurrentTimeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/CurrentTimeExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a11aaa9c9fb65be5b7f37f3d57af6f16d0909d53","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DistinctExpression.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DistinctExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DistinctExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DistinctExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c4a8ef57a9ac07a5edc393a2a693cfed4f832ebb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DividedByExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DividedByExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DividedByExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DividedByExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fce746ef6b4cd1fb2c6f3f1a32940d5c7eb6f6b1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DomainObject.java","status":"modified","additions":123,"deletions":123,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DomainObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DomainObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/DomainObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"67316268f7af94653f2a2e3e39ad1d4f7525e0bb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ElseExpression.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ElseExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ElseExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ElseExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d434d1e8ce41b625d637b2b27c6d1c136fc7964c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EntryExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EntryExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EntryExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EntryExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a53530f9502c5043e1d5ed3da83545f1dc86ee6c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EqualExpression.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/EqualExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"29d3df731aa54a6a246ad3cb88676f7a7293cbd8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExistsExpression.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExistsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExistsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExistsExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6db5c1c8da5b4d28da423a06f8d0462224a9b5ff","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Expression.java","status":"modified","additions":523,"deletions":523,"changes":1046,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Expression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Expression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Expression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c3efa2ee45b75bffbdf46787caaf7853a9bfaa63","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExpressionImpl.java","status":"modified","additions":463,"deletions":463,"changes":926,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExpressionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExpressionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ExpressionImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f8b408a6391d1254779e6ec94843d8dba2d9fdcf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchJoinObject.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchJoinObject.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchJoinObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchJoinObject.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"50b37fbbf0ab8ea5e593e75b6631a1e5f82120cb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchPath.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchPath.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/FetchPath.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f1525971689a7c532d7b1544db0acba8a605646b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterEqualExpression.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterEqualExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2bd05955f3b9e981784b81668d9fe058de1cf42e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterThanExpression.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterThanExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterThanExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/GreaterThanExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"06796666631f8f79c34378014f5f62abc6558c26","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/InExpression.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/InExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f9a5506a084ebd705719b9837bc02ef2a557a395","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IndexExpression.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IndexExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IndexExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IndexExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"142d7457ed06c74cbcb97e28fc509574688ca8ad","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsEmptyExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsEmptyExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"8855a53d82a368978ad654d50ed328910c7e1815","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsNullExpression.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsNullExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsNullExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/IsNullExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d115c5ce1e9e1cdd2dcdcf3d5d0bd666e01b7e6e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JPQLHelper.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JPQLHelper.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JPQLHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JPQLHelper.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"b5610a7c7dcd5565a9809cfd5658a3a49e67770a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/JoinPath.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"cf6a8f4ddac13afbb7f7d951ea9cef154b09d70c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/KeyExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/KeyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/KeyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/KeyExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f1a39ffb1919f127c42ed3f170133ac1592461a6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LengthExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LengthExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LengthExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LengthExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"20a906d12169f8620ba7d47acacb49549535a8d6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessEqualExpression.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessEqualExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"008700b67a2ce4f16720ce428db2f7dae756aab4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessThanExpression.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessThanExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessThanExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LessThanExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"36328901011cdec5c1f71f3072a09bf03f6342fa","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LikeExpression.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LikeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LikeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LikeExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"588d0de676a3320e6350b0a355d73b670936c8ba","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LiteralExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LiteralExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LiteralExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LiteralExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"41c3baf2b45bbd7277eaff4da837106c2182bbf2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LocateExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f19bdc9c58ba3e595c0e3e7fdcd6996ed318eef0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LogicalPredicate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1053facff62ca2b9d45abcd11e02210e96ef70b9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LowerExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LowerExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LowerExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/LowerExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"2171508c26dd4f8871ec291e0090fbb8aed3e8cc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MaxExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MaxExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MaxExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MaxExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3e81e1f3ef2460cc81c7d2619ff52da76e3246d3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MemberOfExpression.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MemberOfExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MemberOfExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MemberOfExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"83362632c46a77649d72fffd428c408d550362cf","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"fbb07423d5a17157d651f7c5b2ef6ab5f9bb0afd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinusExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinusExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinusExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/MinusExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"707bbc0a9d868cffd8dadcffbc6ee289da8f0f85","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ModExpression.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ModExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ModExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ModExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"015446ec88e4ed6996febdcbe95adf24036f8981","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NavigationPath.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NavigationPath.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NavigationPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NavigationPath.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a5e4774edee541d07d05eb0c71fedef55792583b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NewInstance.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"3a72586e50ac15aed61b90bb82170e2f1928f464","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NotEqualExpression.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NotEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NotEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/NotEqualExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e1f9ddf12099bf9dd0e12a01640d91a30ea7674c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OpenJPAQueryBuilder.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OpenJPAQueryBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OpenJPAQueryBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OpenJPAQueryBuilder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a20ad9d6e48be1bd7d44f70c22acb8968f0f9588","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OperatorPath.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OperatorPath.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OperatorPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OperatorPath.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"12a7bf7c0b55c48db3eac8f5b4abaa50f79470a8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrPredicate.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrPredicate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrPredicate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrPredicate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e4e451d9dd71e4f71a995ac0b27a470a3fef0461","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderBy.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderBy.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderBy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderBy.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"757dd7636205c7bfdfaacb17beaf07c68d6ca8ae","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderByItem.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderByItem.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderByItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderByItem.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"41b3b8e34a581440d012b197aa67edfbf3b450e3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderableItem.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderableItem.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderableItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/OrderableItem.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a5443f34c9c1df3ac0bb2fe94ab8dbca962e7f91","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ParameterExpression.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ParameterExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ParameterExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ParameterExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"38fc73667616eccef95ff8027059c1c7cbd65a9c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathExpression.java","status":"modified","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eb1e29490c778fa6888230f441576f1f0e4d491c","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathOperator.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathOperator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathOperator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PathOperator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"166e3cdbd2a929a2de4a3b8b87a07450d7f7b7f1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PlusExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PlusExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PlusExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PlusExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6517892e6efe255546377817c6c6ab30b6544866","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Predicate.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Predicate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Predicate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Predicate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"02f70b8c127b765045c46d73b9abe66c630d8944","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PredicateOperand.java","status":"modified","additions":588,"deletions":588,"changes":1176,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PredicateOperand.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PredicateOperand.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/PredicateOperand.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"4f0452c8e41025d993aa01677c2390e362be1a64","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilder.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilder.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"457e2d41144efc9d8a5f9f8fb2be071525309ea8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilderImpl.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryBuilderImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9bbc4841d668443f17cdc8570cbbed19433594bd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinition.java","status":"modified","additions":555,"deletions":555,"changes":1110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinition.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinition.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinition.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"eedc111908e6ad3d2f311037149dd111ae9d1adb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java","status":"modified","additions":433,"deletions":433,"changes":866,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryDefinitionImpl.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a0b2c97f1624057b6ec90d97917a46bdaa43bd87","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryExpression.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/QueryExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"02b4b8f091904dbc20face98c74caa8ea237e5f3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RangeExpression.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RangeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RangeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RangeExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5bf0e6f84845aa209d3f29b5046d8735c03428ce","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RootPath.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RootPath.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RootPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/RootPath.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e056bdcd86fa01762eb79d07c71d59e61f9cd488","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SelectItem.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SelectItem.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SelectItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SelectItem.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f749fc56d2770c134e0e236a70fc15b85d10b9c5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SizeExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SizeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SizeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SizeExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e25131cdde530ca65d3ade73e25cb90a9a7a2a8f","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SomeExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SomeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SomeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SomeExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"f0dc124bd5df9bb77c75fa5faaa1e3b342c77cd8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SquareRootExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SquareRootExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SquareRootExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SquareRootExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e5c87d7c5bb21733ec1b1f6a03f89bffea6f2729","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SubStringExpression.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SubStringExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SubStringExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SubStringExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d5274478e2819a072ba365ae0d60cf75834182c7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Subquery.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Subquery.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Subquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Subquery.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"09f49221558bc6a1608b3edd67ddab572ec7b1ae","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SumExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SumExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SumExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/SumExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"c6f791867efa7c4c3099540cc818d06711fd6ca7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TimesExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TimesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TimesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TimesExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"78e3d41d9b0a90e54e93905d3736f61d9691c167","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimExpression.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"e70cca59f2433c8290a33a2899ea5bb9246348a9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimSpec.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimSpec.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimSpec.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TrimSpec.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"5e4cf126ea544d8c0a4f4fe87d68eaf79c9f3d54","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TypeExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TypeExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TypeExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/TypeExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1f3376759e9814fc8051bc5ee8d7c9b085c54c44","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryConditionalOperator.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryConditionalOperator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryConditionalOperator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryConditionalOperator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a1d819f293f6182e649f85c6763d3a5efb2b2dc2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryExpressionPredicate.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryExpressionPredicate.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryExpressionPredicate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryExpressionPredicate.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"dbb04912e4fe4af5a849c4ca971d3a4498884345","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryFunctionalOperator.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryFunctionalOperator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryFunctionalOperator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryFunctionalOperator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"7471ae1e8af8279d196b88e61dd48353c7100636","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryMinusExpression.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryMinusExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryMinusExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryMinusExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"1c3b014f00ff1a7f924acf842cd04d44d4ec713a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperator.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperator.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperator.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"0ebdaedf536549cc8c64498da7a8595b65a7adc9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperatorExpression.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperatorExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperatorExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UnaryOperatorExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"ff5460676a24803db41643f4a1f272720fba5c41","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UpperExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UpperExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UpperExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/UpperExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"354030e0310c78957e9e58d2f839c70a348aa51d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ValueExpression.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ValueExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ValueExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/ValueExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"9ca696f8d631dc33b6b69dc5b72b94be4938e18e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/VarArgsExpression.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"6537ced3949a54eb3cf019bc1915984b245df949","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Visitable.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Visitable.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Visitable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/Visitable.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"bde65b841fa201ffbbf33fe02d248033ca9997c3","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/query/WhenClause.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"a98a9661bdf63e66e19a873b4ba321aa43d2e5ab","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","status":"modified","additions":270,"deletions":270,"changes":540,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"},{"sha":"d8a15ac28e5b2e47e5a77fa4a45c9e5c343773fe","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java","raw_url":"https://github.com/apache/openjpa/raw/90b84c5d73db4d0d7fa3e5520358912961b59c43/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBroker.java?ref=90b84c5d73db4d0d7fa3e5520358912961b59c43"}]}

