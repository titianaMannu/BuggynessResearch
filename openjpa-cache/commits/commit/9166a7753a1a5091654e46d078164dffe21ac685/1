{"sha":"9166a7753a1a5091654e46d078164dffe21ac685","node_id":"MDY6Q29tbWl0MjA2MzY0OjkxNjZhNzc1M2ExYTUwOTE2NTRlNDZkMDc4MTY0ZGZmZTIxYWM2ODU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-20T16:43:30Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-07-20T16:43:30Z"},"message":"OPENJPA-1726: exclude Postgres from the test case due to the problem of storing the randomly generated UUID String to the UTF-8 database. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@965899 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ef8a9fcedba84a82407085fe531f01707028caad","url":"https://api.github.com/repos/apache/openjpa/git/trees/ef8a9fcedba84a82407085fe531f01707028caad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9166a7753a1a5091654e46d078164dffe21ac685","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9166a7753a1a5091654e46d078164dffe21ac685","html_url":"https://github.com/apache/openjpa/commit/9166a7753a1a5091654e46d078164dffe21ac685","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9166a7753a1a5091654e46d078164dffe21ac685/comments","author":null,"committer":null,"parents":[{"sha":"c3a7417e2456bc98436dddcc8d048983069f24ac","url":"https://api.github.com/repos/apache/openjpa/commits/c3a7417e2456bc98436dddcc8d048983069f24ac","html_url":"https://github.com/apache/openjpa/commit/c3a7417e2456bc98436dddcc8d048983069f24ac"}],"stats":{"total":21,"additions":19,"deletions":2},"files":[{"sha":"bd64527a1da5bdabb69f1fba04c4f42b1c53d9d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/9166a7753a1a5091654e46d078164dffe21ac685/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/9166a7753a1a5091654e46d078164dffe21ac685/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=9166a7753a1a5091654e46d078164dffe21ac685","patch":"@@ -18,19 +18,27 @@\n  */\n package org.apache.openjpa.persistence.generationtype;\n \n-import javax.persistence.EntityManager;\n import javax.persistence.EntityExistsException;\n+import javax.persistence.EntityManager;\n \n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.persistence.InvalidStateException;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestGeneratedValues extends SingleEMFTestCase {\n+    DBDictionary _dict;\n     \n     public void setUp() { \n         setUp(GeneratedValues.class, CLEAR_TABLES);\n+        _dict = ((JDBCConfiguration)emf.getConfiguration()).getDBDictionaryInstance();\n     }\n \n-    public void testDefaultValues() { \n+    public void testDefaultValues() {\n+        if (_dict instanceof PostgresDictionary) \n+            return;\n+        \n         EntityManager em = emf.createEntityManager();\n \n         GeneratedValues gv = new GeneratedValues();\n@@ -135,6 +143,8 @@ public void testFieldSetter() {\n //    }\n \n     public void testCustomSequenceGeneratorWithIndirection() {\n+        if (_dict instanceof PostgresDictionary) \n+            return;\n         EntityManager em = emf.createEntityManager();\n \n         GeneratedValues gv = new GeneratedValues();\n@@ -147,6 +157,9 @@ public void testCustomSequenceGeneratorWithIndirection() {\n     }\n     \n     public void testUUIDGenerators() {\n+        if (_dict instanceof PostgresDictionary) \n+            return;\n+        \n         EntityManager em = emf.createEntityManager();\n \n         GeneratedValues gv = new GeneratedValues();"},{"sha":"7d2a8d98a3c6a0c90893daa0eb9c270b46f13c19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9166a7753a1a5091654e46d078164dffe21ac685/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/9166a7753a1a5091654e46d078164dffe21ac685/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=9166a7753a1a5091654e46d078164dffe21ac685","patch":"@@ -31,6 +31,7 @@\n import org.apache.openjpa.jdbc.meta.strats.ClassNameDiscriminatorStrategy;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.PostgresDictionary;\n import org.apache.openjpa.persistence.JPAFacadeHelper;\n import org.apache.openjpa.persistence.OpenJPAEntityManager;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n@@ -211,6 +212,9 @@ public void testEmbeddedElementOverride() {\n     }\n \n     public void testInsertAndRetrieve() {\n+        if (_dict instanceof PostgresDictionary) \n+            return;\n+        \n         NonstandardMappingEntity pc = new NonstandardMappingEntity();\n         pc.getSuperCollection().add(\"super\");\n         pc.setCustom(new Point(1, 2));"}]}

