{"sha":"923eb32d31d08edc9526a6f6ce9c4ca30357e738","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyM2ViMzJkMzFkMDhlZGM5NTI2YTZmNmNlOWM0Y2EzMDM1N2U3Mzg=","commit":{"author":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-30T05:29:10Z"},"committer":{"name":"Stephen Kim","email":"skim@apache.org","date":"2006-09-30T05:29:10Z"},"message":"fixed duplicate preFlush and bug wrt persist vs nonprovisional in \nsinglefieldmanager\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@451543 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a0043c182f85c13dabfc8a7afa4700f226253a94","url":"https://api.github.com/repos/apache/openjpa/git/trees/a0043c182f85c13dabfc8a7afa4700f226253a94"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/923eb32d31d08edc9526a6f6ce9c4ca30357e738","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/923eb32d31d08edc9526a6f6ce9c4ca30357e738","html_url":"https://github.com/apache/openjpa/commit/923eb32d31d08edc9526a6f6ce9c4ca30357e738","comments_url":"https://api.github.com/repos/apache/openjpa/commits/923eb32d31d08edc9526a6f6ce9c4ca30357e738/comments","author":null,"committer":null,"parents":[{"sha":"f74ac8b6b9f8d6f5c4fdae6798018458687741fc","url":"https://api.github.com/repos/apache/openjpa/commits/f74ac8b6b9f8d6f5c4fdae6798018458687741fc","html_url":"https://github.com/apache/openjpa/commit/f74ac8b6b9f8d6f5c4fdae6798018458687741fc"}],"stats":{"total":76,"additions":57,"deletions":19},"files":[{"sha":"599c97facf4daa5b78c04ecaceca273f03ccf53f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","raw_url":"https://github.com/apache/openjpa/raw/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCState.java?ref=923eb32d31d08edc9526a6f6ce9c4ca30357e738","patch":"@@ -235,10 +235,10 @@ PCState delete(StateManagerImpl context) {\n \n     /**\n      * Return the state to transition to after making no longer provisional. \n-     * The context is not given because no actions should be taken.\n+     * Returns the <code>this</code> pointer by default.\n      */\n-    PCState nonprovisional(StateManagerImpl context, boolean flush, \n-        boolean logical, OpCallbacks call) {\n+    PCState nonprovisional(StateManagerImpl context, boolean logical, \n+        OpCallbacks call) {\n         return this;\n     }\n "},{"sha":"2198c3bb1b07d1adaf9e18d08e76aa04589e4e39","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","status":"modified","additions":39,"deletions":6,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","raw_url":"https://github.com/apache/openjpa/raw/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PNewProvisionalState.java?ref=923eb32d31d08edc9526a6f6ce9c4ca30357e738","patch":"@@ -24,17 +24,21 @@\n  * @author: Abe White\n  */\n class PNewProvisionalState\n-    extends PNewState {\n+    extends PCState {\n+\n+    void initialize(StateManagerImpl context) {\n+        context.setLoaded(true);\n+        context.setDirty(true);\n+        context.saveFields(false);\n+    }\n \n     PCState persist(StateManagerImpl context) {\n         return PNEW;\n     }\n \n-    PCState nonprovisional(StateManagerImpl context, boolean flush, \n-        boolean logical, OpCallbacks call) {\n-        if (flush)\n-            beforeFlush(context, logical, call);\n-\n+    PCState nonprovisional(StateManagerImpl context, boolean logical, \n+        OpCallbacks call) {\n+        context.preFlush(logical, call);\n         return PNEW;\n     }\n \n@@ -46,6 +50,35 @@ PCState commitRetain(StateManagerImpl context) {\n         return TRANSIENT;\n     }\n \n+    PCState rollback(StateManagerImpl context) {\n+        return TRANSIENT;\n+    }\n+\n+    PCState rollbackRestore(StateManagerImpl context) {\n+        context.restoreFields();\n+        return TRANSIENT;\n+    }\n+\n+    PCState release(StateManagerImpl context) {\n+        return TRANSIENT;\n+    }\n+\n+    boolean isTransactional() {\n+        return true;\n+    }\n+\n+    boolean isPersistent() {\n+        return true;\n+    }\n+\n+    boolean isNew() {\n+        return true;\n+    }\n+\n+    boolean isDirty() {\n+        return true;\n+    }\n+\n     boolean isProvisional() {\n         return true;\n     }"},{"sha":"1d88acae2dbc3684a026517785ff69d373032c93","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","raw_url":"https://github.com/apache/openjpa/raw/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/SingleFieldManager.java?ref=923eb32d31d08edc9526a6f6ce9c4ca30357e738","patch":"@@ -748,8 +748,13 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n                         Exceptions.toString(obj), vmd,\n                         Exceptions.toString(_sm.getManagedInstance()))).\n                     setFailedObject(obj);\n-        } else\n-            sm = _broker.persist(obj, null, true, call);\n+        } else {\n+            sm = _broker.getStateManager(obj);\n+            if (sm != null && sm.isProvisional())\n+                ((StateManagerImpl) sm).nonprovisional(logical, call);\n+            else\n+                sm = _broker.persist(obj, null, true, call);\n+        }\n \n         if (sm != null) {\n             // if deleted and not managed inverse, die\n@@ -759,7 +764,6 @@ private void preFlushPC(ValueMetaData vmd, Object obj, boolean logical,\n                     Exceptions.toString(obj), vmd,\n                     Exceptions.toString(_sm.getManagedInstance()))).\n                     setFailedObject(obj);\n-            ((StateManagerImpl) sm).nonprovisional(true, logical, call);\n             ((StateManagerImpl) sm).setDereferencedDependent(false, true);\n         }\n     }"},{"sha":"3550af0770a527c781362022c50b51ceac7437fc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/923eb32d31d08edc9526a6f6ce9c4ca30357e738/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=923eb32d31d08edc9526a6f6ce9c4ca30357e738","patch":"@@ -486,7 +486,8 @@ private boolean assignObjectId(boolean flush, boolean preFlushing) {\n      * @param recache whether to recache ourself on the new oid\n      */\n     private void assertObjectIdAssigned(boolean recache) {\n-        if (!isNew() || isDeleted() || (_flags & FLAG_OID_ASSIGNED) > 0)\n+        if (!isNew() || isDeleted() || isProvisional() || \n+            (_flags & FLAG_OID_ASSIGNED) > 0)\n             return;\n         if (_oid == null) {\n             if (_meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\n@@ -905,7 +906,7 @@ void commit() {\n         Object orig = _id;\n         assertObjectIdAssigned(false);\n \n-        boolean wasNew = isNew() && !isDeleted();\n+        boolean wasNew = isNew() && !isDeleted() && !isProvisional();\n         if (_broker.getRetainState())\n             setPCState(_state.commitRetain(this));\n         else\n@@ -997,10 +998,9 @@ void transactional() {\n      * Delegates to the current state.\n      *\n      * @see PCState#nonprovisional\n-     * @see Broker#nonprovisional\n      */\n-    void nonprovisional(boolean flush, boolean logical, OpCallbacks call) {\n-        setPCState(_state.nonprovisional(this, flush, logical, call));\n+    void nonprovisional(boolean logical, OpCallbacks call) {\n+        setPCState(_state.nonprovisional(this, logical, call));\n     }\n \n     /**\n@@ -2633,9 +2633,10 @@ void unproxyFields() {\n      * for all strategies that don't require flushing.\n      */\n     void preFlush(boolean logical, OpCallbacks call) {\n-        boolean second = (_flags & FLAG_PRE_FLUSHED) != 0;\n+        if ((_flags & FLAG_PRE_FLUSHED) != 0)\n+            return;\n \n-        if (isPersistent() && !second) {\n+        if (isPersistent()) {\n             fireLifecycleEvent(LifecycleEvent.BEFORE_STORE);\n             _flags |= FLAG_PRE_FLUSHED;\n         }"}]}

