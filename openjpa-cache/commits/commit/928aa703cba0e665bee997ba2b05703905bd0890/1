{"sha":"928aa703cba0e665bee997ba2b05703905bd0890","node_id":"MDY6Q29tbWl0MjA2MzY0OjkyOGFhNzAzY2JhMGU2NjViZWU5OTdiYTJiMDU3MDM5MDViZDA4OTA=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-07-06T18:17:36Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2011-07-06T18:17:36Z"},"message":"OPENJPA-2027: Use SingularAttribute for unannotated arrays. ListAttribute for @PersistentCollections\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1143519 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"baf4553ab48619717983e5550b2b500c0e664f53","url":"https://api.github.com/repos/apache/openjpa/git/trees/baf4553ab48619717983e5550b2b500c0e664f53"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/928aa703cba0e665bee997ba2b05703905bd0890","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/928aa703cba0e665bee997ba2b05703905bd0890","html_url":"https://github.com/apache/openjpa/commit/928aa703cba0e665bee997ba2b05703905bd0890","comments_url":"https://api.github.com/repos/apache/openjpa/commits/928aa703cba0e665bee997ba2b05703905bd0890/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"8a85ffb402d9c6b4bb46772d0418780202cbf0d5","url":"https://api.github.com/repos/apache/openjpa/commits/8a85ffb402d9c6b4bb46772d0418780202cbf0d5","html_url":"https://github.com/apache/openjpa/commit/8a85ffb402d9c6b4bb46772d0418780202cbf0d5"}],"stats":{"total":383,"additions":381,"deletions":2},"files":[{"sha":"b7eaa62029b6502b3fe41c4b6018c8c1ce6493a3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":33,"deletions":1,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -69,7 +69,9 @@\n     private boolean _checkDatabaseForCascadePersistToDetachedEntity = false;\n     private boolean _overrideContextClassloader = true;\n     private boolean _parseAnnotationsForQueryMode = true;\n-    private boolean _convertPositionalParametersToNamed = false;    \n+    private boolean _convertPositionalParametersToNamed = false;\n+    \n+    private boolean _useListAttributeForArrays = false; \n     \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -608,4 +610,34 @@ public boolean getParseAnnotationsForQueryMode() {\n     public void setParseAnnotationsForQueryMode(boolean parseAnnotationsForQueryMode) {\n         _parseAnnotationsForQueryMode = parseAnnotationsForQueryMode;\n     }\n+\n+    /**\n+     * This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the\n+     * \n+     * @PersistentCollection annotation. If the canonical metamodel classes were generated in an early version of\n+     *                       OpenJPA (e.g. 2.0.0, 2.0.1, or 2.1.0) it is recommended to set this property to true. If\n+     *                       you have generated your metamodel classes on later versions of OpenJPA (e.g. 2.2.0) you may\n+     *                       want to have this set to false.\n+     * @since 2.2.0\n+     * @return true if OpenJPA will use ListAttributes for <b>all</b> arrays, false if OpenJPA will use ListAttributes\n+     *         for <b>only</b> arrays which use the @PersistentCollection annotation.\n+     */\n+    public boolean getUseListAttributeForArrays() {\n+        return _useListAttributeForArrays;\n+    }\n+\n+    /**\n+     * This property can be used to allow OpenJPA to use ListAttributes for all types of Arrays, not just those with the\n+     * \n+     * @PersistentCollection annotation. If the canonical metamodel classes were generated in an early version of\n+     *                       OpenJPA (e.g. 2.0.0, 2.0.1, or 2.1.0) it is recommended to set this property to true. If\n+     *                       you have generated your metamodel classes on later versions of OpenJPA (e.g. 2.2.0) you may\n+     *                       want to have this set to false.\n+     * @since 2.2.0\n+     * @param useListAttribute\n+     *            whether OpenJPA will use ListAttributes for all arrays.\n+     */   \n+    public void setUseListAttributeForArrays(boolean useListAttribute ) { \n+        _useListAttributeForArrays = useListAttribute;\n+    }\n }"},{"sha":"9a667785d15ff447a9b1053301afc67fc4887a6a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -220,6 +220,8 @@\n     private boolean _isElementCollection = false;\n     private int _associationType;\n \n+    private boolean _persistentCollection = false; \n+\n     /**\n      * Constructor.\n      *\n@@ -2380,5 +2382,13 @@ public int getAssociationType() {\n     public void setAssociationType(int type) {\n         _associationType = type;\n     }\n+\n+    public boolean isPersistentCollection() {\n+        return _persistentCollection;\n+    }\n+\n+    public void setPersistentCollection(boolean persistentCollection) {\n+        _persistentCollection = persistentCollection;\n+    }\n     \n }"},{"sha":"665f7c0a383bfa4198ea03139e32ebcc799d141a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser.java","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser.java?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class BlogUser {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    private String username;\n+    private byte[] pic;\n+    private Character [] characters; \n+    private char [] chars; \n+\n+    public char[] getChars() {\n+        return chars;\n+    }\n+\n+    public void setChars(char[] littleChars) {\n+        this.chars = littleChars;\n+    }\n+\n+    public Character[] getCharacters() {\n+        return characters;\n+    }\n+\n+    public void setCharacters(Character[] chars) {\n+        this.characters = chars;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    public byte[] getPic() {\n+        return pic;\n+    }\n+\n+    public void setPic(byte[] pic) {\n+        this.pic = pic;\n+    }\n+}"},{"sha":"94bcaf2a37fe1fa8b4a66e458d5fc4f961f9b4a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/BlogUser_.java?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+/** \n+ *  Generated by OpenJPA MetaModel Generator Tool.\n+**/\n+\n+package org.apache.openjpa.persistence.criteria;\n+\n+import javax.persistence.metamodel.SingularAttribute;\n+\n+@javax.persistence.metamodel.StaticMetamodel\n+(value=org.apache.openjpa.persistence.criteria.BlogUser.class)\n+@javax.annotation.Generated\n+(value=\"org.apache.openjpa.persistence.meta.AnnotationProcessor6\",date=\"Wed Jul 06 09:09:40 CDT 2011\")\n+public class BlogUser_ {\n+    public static volatile SingularAttribute<BlogUser,Character[]> characters;\n+    public static volatile SingularAttribute<BlogUser,char[]> chars;\n+    public static volatile SingularAttribute<BlogUser,Integer> id;\n+    public static volatile SingularAttribute<BlogUser,byte[]> pic;\n+    public static volatile SingularAttribute<BlogUser,String> username;\n+    public static volatile SingularAttribute<BlogUser,Integer> version;\n+}"},{"sha":"40fbd9b7ba575cb5dece9140cb294052e28729b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java","status":"added","additions":175,"deletions":0,"changes":175,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestByteArray.java?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.criteria;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestByteArray extends SingleEMFTestCase {\n+    protected CriteriaBuilder cb;\n+    String pic = \"IamNotAPicture\";\n+    Character[] chars = new Character[] { new Character('a'), new Character('b') };\n+    public void setUp() {\n+        super.setUp(BlogUser.class\n+//            ,\"openjpa.Compatibility\", \"UseListAttributeForArrays=false\"\n+            );\n+        cb = emf.getCriteriaBuilder();\n+        populate();\n+    }\n+\n+    public void populate() {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+\n+        BlogUser bu = new BlogUser();\n+        bu.setUsername(\"jode1\");\n+        bu.setPic(pic.getBytes());\n+        bu.setCharacters(chars);\n+        bu.setChars(pic.toCharArray());\n+\n+        em.persist(bu);\n+        tran.commit();\n+\n+        em.close();\n+    }\n+\n+    public void assertBlogUser(BlogUser bu) {\n+        assertNotNull(bu);\n+        assertNotNull(bu.getPic());\n+        assertNotNull(bu.getCharacters());\n+        assertNotNull(bu.getChars());\n+    }\n+\n+    public void testSimpleQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        CriteriaQuery<BlogUser> cq = cb.createQuery(BlogUser.class);\n+        cq.select(cq.from(BlogUser.class));\n+\n+        List<BlogUser> users = em.createQuery(cq).getResultList();\n+\n+        assertNotNull(users);\n+        assertFalse(users.isEmpty());\n+\n+        assertBlogUser(users.get(0));\n+\n+        em.close();\n+    }\n+\n+    public void testSimpleQueryBytesNotNull() {\n+        EntityManager em = emf.createEntityManager();\n+        CriteriaQuery<BlogUser> cq = cb.createQuery(BlogUser.class);\n+        Root<BlogUser> bloguser = cq.from(BlogUser.class);\n+        cq.select(bloguser);\n+        cq.where(bloguser.get(BlogUser_.pic).isNotNull());\n+\n+        List<BlogUser> users = em.createQuery(cq).getResultList();\n+\n+        assertNotNull(users);\n+        assertFalse(users.isEmpty());\n+        assertBlogUser(users.get(0));\n+\n+        em.close();\n+    }     \n+    \n+    public void testSimpleQueryBytesNull() {\n+        EntityManager em = emf.createEntityManager();\n+        CriteriaQuery<BlogUser> cq = cb.createQuery(BlogUser.class);\n+        Root<BlogUser> bloguser = cq.from(BlogUser.class);\n+        cq.select(bloguser);\n+        cq.where(bloguser.get(BlogUser_.pic).isNull());\n+\n+        List<BlogUser> users = em.createQuery(cq).getResultList();\n+\n+        assertNotNull(users);\n+        assertTrue(users.isEmpty());\n+\n+        em.close();\n+    }\n+\n+    public void testSimpleQueryCharactersNotNull() {\n+        EntityManager em = emf.createEntityManager();\n+        CriteriaQuery<BlogUser> cq = cb.createQuery(BlogUser.class);\n+        Root<BlogUser> bloguser = cq.from(BlogUser.class);\n+        cq.select(bloguser);\n+        cq.where(bloguser.get(BlogUser_.characters).isNotNull());\n+\n+        List<BlogUser> users = em.createQuery(cq).getResultList();\n+\n+        assertNotNull(users);\n+        assertFalse(users.isEmpty());\n+        assertBlogUser(users.get(0));\n+\n+        em.close();\n+    }\n+    public void testSimpleQueryCharactersNull() {\n+        EntityManager em = emf.createEntityManager();\n+        CriteriaQuery<BlogUser> cq = cb.createQuery(BlogUser.class);\n+        Root<BlogUser> bloguser = cq.from(BlogUser.class);\n+        cq.select(bloguser);\n+        cq.where(bloguser.get(BlogUser_.characters).isNull());\n+\n+        List<BlogUser> users = em.createQuery(cq).getResultList();\n+\n+        assertNotNull(users);\n+        assertTrue(users.isEmpty());\n+\n+        em.close();\n+    }\n+\n+    public void testSimpleQueryCharsNotNull() {\n+        EntityManager em = emf.createEntityManager();\n+        CriteriaQuery<BlogUser> cq = cb.createQuery(BlogUser.class);\n+        Root<BlogUser> bloguser = cq.from(BlogUser.class);\n+        cq.select(bloguser);\n+        cq.where(bloguser.get(BlogUser_.chars).isNotNull());\n+\n+        List<BlogUser> users = em.createQuery(cq).getResultList();\n+\n+        assertNotNull(users);\n+        assertFalse(users.isEmpty());\n+        assertBlogUser(users.get(0));\n+\n+        em.close();\n+    }\n+    \n+    public void testSimpleQueryCharsNull() {\n+        EntityManager em = emf.createEntityManager();\n+        CriteriaQuery<BlogUser> cq = cb.createQuery(BlogUser.class);\n+        Root<BlogUser> bloguser = cq.from(BlogUser.class);\n+        cq.select(bloguser);\n+        cq.where(bloguser.get(BlogUser_.chars).isNull());\n+\n+        List<BlogUser> users = em.createQuery(cq).getResultList();\n+\n+        assertNotNull(users);\n+        assertTrue(users.isEmpty());\n+\n+        em.close();\n+    }\n+\n+}"},{"sha":"ef0f81bfe7656675b893f93167fa538daa679b87","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -1634,6 +1634,8 @@ private void parsePersistentCollection(FieldMetaData fmd,\n             throw new MetaDataException(_loc.get(\"bad-meta-anno\", fmd,\n                 \"PersistentCollection\"));\n \n+        fmd.setPersistentCollection(true); \n+        \n         if (!StringUtils.isEmpty(anno.mappedBy()))\n             fmd.setMappedBy(anno.mappedBy());\n         fmd.setInDefaultFetchGroup(anno.fetch() == FetchType.EAGER);"},{"sha":"c151d6670d7817605288ee91512c7024a49450ad","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/AbstractManagedType.java?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -39,6 +39,7 @@\n import javax.persistence.metamodel.SingularAttribute;\n import javax.persistence.metamodel.PluralAttribute.CollectionType;\n \n+import org.apache.openjpa.conf.Compatibility;\n import org.apache.openjpa.kernel.Filters;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -157,7 +158,13 @@ public AbstractManagedType(ClassMetaData meta, MetamodelImpl featureSelection) {\n                 attrs.add(new Members.SingularAttributeImpl(this, f));\n                 break;\n             case JavaTypes.ARRAY:\n-                attrs.add(new Members.ListAttributeImpl(this, f));\n+                Compatibility compat = meta.getRepository().getConfiguration().getCompatibilityInstance();\n+                if(compat.getUseListAttributeForArrays() || f.isPersistentCollection()) {\n+                    attrs.add(new Members.ListAttributeImpl(this, f));\n+                }\n+                else { \n+                    attrs.add(new Members.SingularAttributeImpl(this, f));\n+                }\n                 break;\n             case JavaTypes.COLLECTION:\n                 switch (MetamodelImpl.categorizeCollection(f.getDeclaredType())) {"},{"sha":"7f5db1f7b46d3799185d2dc311da4f64191b8b6c","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/928aa703cba0e665bee997ba2b05703905bd0890/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=928aa703cba0e665bee997ba2b05703905bd0890","patch":"@@ -406,6 +406,33 @@\n                     </itemizedlist>\n                 </para>\n             </section>\n+            <section id=\"jpa_2.2_metamodelArrays\">\n+                <title>\n+                    MetaModel attributes for Arrays  \n+                </title>\n+                <!-- See OPENJPA-2025 for details. -->\n+                <para>\n+                    In previous releases OpenJPA's MetaModel implementation generated a ListAttribute for every array. This behavior is correct if the array \n+                    is annotated as a PersistentCollection, but not correct for un-annotated arrays (e.g. byte[], char[]). In OpenJPA 2.2.0 this behavior was corrected \n+                    so that arrays which are not stored as PersistentCollections will use a SingularAttribute instead of a ListAttribute. \n+                </para>\n+                <para>\n+                    If youre application uses the MetaModel API and your entities contain arrays of any of the following types: byte[], Byte[], char[], Character[] and\n+                    do not use the @PersistentCollection annotation with those fields you will need to update your application to use OpenJPA 2.2.0.\n+                </para>\n+                <para> In order for the existing applications to work with OpenJPA you may: \n+                    <itemizedlist>\n+                        <listitem>\n+                            <para> Regenerate the canonical metamodel classes</para>\n+                        </listitem>\n+                        <listitem>\n+                            <para> Set the Compatibility property <literal>UseListAttributeForArrays</literal> to <literal>true</literal>in persistence.xml \n+                                <programlisting> &lt;property name=\"openjpa.Compatibility\" value=\"UseListAttributeForArrays=true\"/&gt;</programlisting>\n+                            </para>\n+                        </listitem>\n+                    </itemizedlist>    \n+                </para>\n+            </section>\n         </section>\n     </section>\n </appendix>"}]}

