{"sha":"9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzNDRkMDNiNTBiZmUyZDNmMTExYWM5YmQxYzU1MGU5YTNkNDFhNjE=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-11T23:14:14Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-02-11T23:14:14Z"},"message":"OPENJPA-1001:\nTestcases\nSubmitted By: Richard Rak\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@909171 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"251a97daf03b4ded33064564f31c0c3a4b678065","url":"https://api.github.com/repos/apache/openjpa/git/trees/251a97daf03b4ded33064564f31c0c3a4b678065"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","html_url":"https://github.com/apache/openjpa/commit/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"feff96b4c468cef75140700aa14c71f6dafaf7c8","url":"https://api.github.com/repos/apache/openjpa/commits/feff96b4c468cef75140700aa14c71f6dafaf7c8","html_url":"https://github.com/apache/openjpa/commit/feff96b4c468cef75140700aa14c71f6dafaf7c8"}],"stats":{"total":459,"additions":459,"deletions":0},"files":[{"sha":"a14299bf006b9069ea1002589bd0533151bd16e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java","raw_url":"https://github.com/apache/openjpa/raw/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIncompleteRelationship.java?ref=9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.persistence.relations.entity.IncompleteRelationshipChildEntity;\n+import org.apache.openjpa.persistence.relations.entity.IncompleteRelationshipParentEntity;\n+import org.apache.openjpa.persistence.relations.entity.IncompleteRelationshipSubclass;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+import javax.persistence.EntityManager;\n+\n+/**\n+ * A test case that tests for incomplete foreign-key relationships and ensures\n+ * that proper database mechanics are enforced.\n+ */\n+public class TestIncompleteRelationship extends SingleEMFTestCase {\n+    private static final String CLIENT_ID = \"00000-00000-00000-00000-00000-00000\";\n+\n+    private static final String DISCOUNTS[] = {\n+        \"Five-Finger Discount\",\n+        \"Staff Discount\"\n+    };\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+                    IncompleteRelationshipParentEntity.class,\n+                    IncompleteRelationshipParentEntity.IncompleteRelationshipParentEntityPk.class,\n+                    IncompleteRelationshipChildEntity.class,\n+                    IncompleteRelationshipChildEntity.IncompleteRelationshipChildEntityPk.class,\n+                    IncompleteRelationshipSubclass.class,\n+                    \"openjpa.jdbc.QuerySQLCache\", \"true\");\n+    }\n+\n+    public void testIncompleteRelationship() {\n+        final EntityManager em = emf.createEntityManager();\n+        IncompleteRelationshipSubclass parent = null;\n+        IncompleteRelationshipChildEntity child = null;\n+\n+        em.getTransaction().begin();\n+        for (String s : DISCOUNTS) {\n+            child = new IncompleteRelationshipChildEntity(s, CLIENT_ID);\n+            em.persist(child);\n+        }\n+        em.getTransaction().commit();\n+\n+        for (int i = 1; i < 100; i++) {\n+            em.getTransaction().begin();\n+\n+            parent = new IncompleteRelationshipSubclass(i, CLIENT_ID);\n+//            parent.setChild(child);\n+\n+            em.persist(parent);\n+            em.getTransaction().commit();\n+\n+            parent = (IncompleteRelationshipSubclass)\n+                    em.createQuery(\"SELECT i \"+\n+                                   \"FROM IncompleteRelationshipSubclass i \"+\n+                                   \"WHERE   i.pk.id = :id \"+\n+                                   \"AND     i.pk.clientId = :clientId \")\n+              .setParameter(\"id\", i)\n+              .setParameter(\"clientId\", CLIENT_ID)\n+              .getSingleResult();\n+\n+            assertEquals(parent.getPk().getId(), i);\n+            assertNull(parent.getChild());\n+        }\n+    }\n+}"},{"sha":"3c01a3c0460b7255cc8ef97be57406bd4b464193","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipChildEntity.java?ref=9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations.entity;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+\n+/**\n+ * This is the child entity for the IncompleteRelationship test case.\n+ */\n+@Entity\n+public class IncompleteRelationshipChildEntity implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+    \n+    @Embeddable\n+    public static class IncompleteRelationshipChildEntityPk implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+        \n+        @Column(name = \"DISCOUNT\", nullable = false, length = 120)\n+        protected String discount;\n+        @Column(name = \"CLIENT_ID\", nullable = false, length = 35)\n+        protected String clientId;\n+\n+        public IncompleteRelationshipChildEntityPk() {\n+        }\n+\n+        public IncompleteRelationshipChildEntityPk(String discount, String clientId) {\n+            this.discount = discount;\n+            this.clientId = clientId;\n+        }\n+\n+        public String getClientId() {\n+            return clientId;\n+        }\n+\n+        public void setClientId(String clientId) {\n+            this.clientId = clientId;\n+        }\n+\n+        public String getDiscount() {\n+            return discount;\n+        }\n+\n+        public void setDiscount(String discount) {\n+            this.discount = discount;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            final IncompleteRelationshipChildEntityPk other = (IncompleteRelationshipChildEntityPk) obj;\n+            if ((this.discount == null) ? (other.discount != null) : !this.discount.equals(other.discount)) {\n+                return false;\n+            }\n+            if ((this.clientId == null) ? (other.clientId != null) : !this.clientId.equals(other.clientId)) {\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            int hash = 5;\n+            hash = 53 * hash + (this.discount != null ? this.discount.hashCode() : 0);\n+            hash = 53 * hash + (this.clientId != null ? this.clientId.hashCode() : 0);\n+            return hash;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"IncompleteRelationshipChildEntityPk[discount=\"+discount+\",\"+\n+                    \"clientId=\"+clientId+\"]\";\n+        }\n+    }\n+\n+    @EmbeddedId\n+    protected IncompleteRelationshipChildEntityPk pk;\n+\n+    public IncompleteRelationshipChildEntity() {\n+    }\n+\n+    public IncompleteRelationshipChildEntity(IncompleteRelationshipChildEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    public IncompleteRelationshipChildEntity(String discount, String clientId) {\n+        this(new IncompleteRelationshipChildEntityPk(discount, clientId));\n+    }\n+\n+    public IncompleteRelationshipChildEntityPk getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(IncompleteRelationshipChildEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final IncompleteRelationshipChildEntity other = (IncompleteRelationshipChildEntity) obj;\n+        if (this.pk != other.pk && (this.pk == null || !this.pk.equals(other.pk))) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        if (this.pk != null) {\n+            return pk.hashCode();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (this.pk != null) {\n+            return pk.toString();\n+        } else {\n+            return \"IncompleteRelationshipChildEntity[pk=null]\";\n+        }\n+    }\n+}"},{"sha":"d6f36d911d8894b91ce70bbfeeaa9640ee5e1096","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/apache/openjpa/blob/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipParentEntity.java?ref=9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","patch":"@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations.entity;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+\n+/**\n+ * This is the parent entity for the IncompleteRelationship test case.\n+ */\n+@Entity\n+@Inheritance(strategy = InheritanceType.JOINED)\n+public class IncompleteRelationshipParentEntity implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    @Embeddable\n+    public static class IncompleteRelationshipParentEntityPk implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+\n+        @Column(name = \"ID\", nullable = false, precision = 9)\n+        protected int id;\n+        @Column(name = \"CLIENT_ID\", nullable = false, length = 35)\n+        protected String clientId;\n+\n+        public IncompleteRelationshipParentEntityPk() {\n+        }\n+\n+        public IncompleteRelationshipParentEntityPk(int id, String clientId) {\n+            this.id = id;\n+            this.clientId = clientId;\n+        }\n+\n+        public String getClientId() {\n+            return clientId;\n+        }\n+\n+        public void setClientId(String clientId) {\n+            this.clientId = clientId;\n+        }\n+\n+        public void setId(int id) {\n+            this.id = id;\n+        }\n+\n+        public int getId() {\n+            return id;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (obj == null) {\n+                return false;\n+            }\n+            if (getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            final IncompleteRelationshipParentEntityPk other = (IncompleteRelationshipParentEntityPk) obj;\n+            if (this.id != other.id) {\n+                return false;\n+            }\n+            if ((this.clientId == null) ? (other.clientId != null) : !this.clientId.equals(other.clientId)) {\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            int hash = 7;\n+            hash = 89 * hash + (this.id);\n+            hash = 89 * hash + (this.clientId != null ? this.clientId.hashCode() : 0);\n+            return hash;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"IncompleteRelationshipParentEntityPk[id=\"+id+\",\"+\n+                    \"clientId=\"+clientId+\"]\";\n+        }\n+    }\n+\n+    @EmbeddedId\n+    protected IncompleteRelationshipParentEntityPk pk;\n+    @JoinColumns({\n+        @JoinColumn(name = \"DEFAULT_DISCOUNT\", referencedColumnName = \"DISCOUNT\"),\n+        @JoinColumn(name = \"CLIENT_ID\", referencedColumnName = \"CLIENT_ID\")\n+    })\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    protected IncompleteRelationshipChildEntity child;\n+\n+    public IncompleteRelationshipParentEntity() {\n+    }\n+\n+    public IncompleteRelationshipParentEntity(IncompleteRelationshipParentEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    public IncompleteRelationshipParentEntity(int id, String clientId) {\n+        this(new IncompleteRelationshipParentEntityPk(id, clientId));\n+    }\n+\n+    public IncompleteRelationshipChildEntity getChild() {\n+        return child;\n+    }\n+\n+    public void setChild(IncompleteRelationshipChildEntity child) {\n+        this.child = child;\n+    }\n+\n+    public IncompleteRelationshipParentEntityPk getPk() {\n+        return pk;\n+    }\n+\n+    public void setPk(IncompleteRelationshipParentEntityPk pk) {\n+        this.pk = pk;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final IncompleteRelationshipParentEntity other = (IncompleteRelationshipParentEntity) obj;\n+        if (this.pk != other.pk && (this.pk == null || !this.pk.equals(other.pk))) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        if (this.pk != null) {\n+            return pk.hashCode();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        if (this.pk != null) {\n+            return pk.toString();\n+        } else {\n+            return \"IncompleteRelationshipParentEntity[pk=null]\";\n+        }\n+    }\n+}"},{"sha":"a91a5b59ca51bb480065d545129f61217abe0f18","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/entity/IncompleteRelationshipSubclass.java?ref=9344d03b50bfe2d3f111ac9bd1c550e9a3d41a61","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.persistence.relations.entity;\n+\n+import javax.persistence.Entity;\n+\n+/**\n+ * This class simply extends IncompleteRelationshipParentEntity.\n+ */\n+@Entity\n+public class IncompleteRelationshipSubclass\n+        extends IncompleteRelationshipParentEntity {\n+    private static final long serialVersionUID = 1L;\n+\n+    public IncompleteRelationshipSubclass(int id, String clientId) {\n+        super(id, clientId);\n+    }\n+\n+    public IncompleteRelationshipSubclass(IncompleteRelationshipParentEntityPk pk) {\n+        super(pk);\n+    }\n+\n+    public IncompleteRelationshipSubclass() {\n+    }\n+}"}]}

