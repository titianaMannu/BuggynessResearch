{"sha":"937aad666bcf696fdd5e47c281b09e527f721881","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzN2FhZDY2NmJjZjY5NmZkZDVlNDdjMjgxYjA5ZTUyN2Y3MjE4ODE=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2013-05-14T16:26:39Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2013-05-14T16:26:39Z"},"message":"OPENJPA-2377 - Fix criteria query methods to meet spec requirements.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1482427 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"17c6c4121255284d0caa9bf0a2e144a2164f8164","url":"https://api.github.com/repos/apache/openjpa/git/trees/17c6c4121255284d0caa9bf0a2e144a2164f8164"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/937aad666bcf696fdd5e47c281b09e527f721881","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/937aad666bcf696fdd5e47c281b09e527f721881","html_url":"https://github.com/apache/openjpa/commit/937aad666bcf696fdd5e47c281b09e527f721881","comments_url":"https://api.github.com/repos/apache/openjpa/commits/937aad666bcf696fdd5e47c281b09e527f721881/comments","author":null,"committer":null,"parents":[{"sha":"c6ee8caa41a31725a4ac80b01c7d7dfb5f1711fd","url":"https://api.github.com/repos/apache/openjpa/commits/c6ee8caa41a31725a4ac80b01c7d7dfb5f1711fd","html_url":"https://github.com/apache/openjpa/commit/c6ee8caa41a31725a4ac80b01c7d7dfb5f1711fd"}],"stats":{"total":97,"additions":83,"deletions":14},"files":[{"sha":"4fc1fc4853f3e61869e9388ed3895cabaa1d6f5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/937aad666bcf696fdd5e47c281b09e527f721881/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/937aad666bcf696fdd5e47c281b09e527f721881/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestMetaModelTypesafeCriteria.java?ref=937aad666bcf696fdd5e47c281b09e527f721881","patch":"@@ -18,9 +18,15 @@\n  */\n package org.apache.openjpa.persistence.criteria;\n \n+import static javax.persistence.metamodel.Type.PersistenceType.EMBEDDABLE;\n+import static javax.persistence.metamodel.Type.PersistenceType.ENTITY;\n+\n import java.math.BigDecimal;\n import java.util.List;\n+import java.util.Set;\n \n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n import javax.persistence.Parameter;\n import javax.persistence.Query;\n import javax.persistence.Tuple;\n@@ -36,6 +42,7 @@\n import javax.persistence.criteria.Subquery;\n import javax.persistence.metamodel.EmbeddableType;\n import javax.persistence.metamodel.EntityType;\n+import javax.persistence.metamodel.ManagedType;\n import javax.persistence.metamodel.Metamodel;\n import javax.persistence.metamodel.SetAttribute;\n \n@@ -95,6 +102,43 @@ public void setUp() throws Exception {\n         videoStore_ = mm.entity(VideoStore.class);\n     }\n \n+    public void testEntityEmbeddableTest() {\n+        Metamodel mm = em.getMetamodel();\n+\n+        assertEquals(mm.managedType(Account.class).getPersistenceType(), ENTITY);\n+        assertEquals(mm.managedType(Address.class).getPersistenceType(), EMBEDDABLE);\n+\n+        assertNotNull(mm.entity(Account.class));\n+        assertNotNull(mm.embeddable(Address.class));\n+\n+        try {\n+            mm.entity(Address.class);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException iaex) {\n+        }\n+        try {\n+            mm.embeddable(Account.class);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException iaex) {\n+        }\n+\n+        int numEntity = 0;\n+        int numEmbeddables = 0;\n+        for (Class<?> clz : getDomainClasses()) {\n+            if (clz.getAnnotation(Embeddable.class) != null) {\n+                ++numEmbeddables;\n+            } else if (clz.getAnnotation(Entity.class) != null) {\n+                ++numEntity;\n+            }\n+        }\n+        Set<EmbeddableType<?>> embs = mm.getEmbeddables();\n+        assertEquals(embs.size(), numEmbeddables);\n+        Set<EntityType<?>> ents = mm.getEntities();\n+        assertEquals(ents.size(), numEntity);\n+        Set<ManagedType<?>> metaTypes = mm.getManagedTypes();\n+        assertEquals(metaTypes.size(), numEntity + numEmbeddables);\n+    }\n+\n     public void testStringEqualExpression() {\n         String jpql = \"select c from Customer c \" \n                     + \"where c.name='Autowest Toyota'\";"},{"sha":"e1e9f904ac3a6912cca4ce8688c6f82c374d7e41","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/937aad666bcf696fdd5e47c281b09e527f721881/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/937aad666bcf696fdd5e47c281b09e527f721881/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/criteria/CriteriaQueryImpl.java?ref=937aad666bcf696fdd5e47c281b09e527f721881","patch":"@@ -343,7 +343,7 @@ void registerParameter(ParameterExpressionImpl<?> p) {\n \n     \n     public <X> Root<X> from(Class<X> cls) {\n-        EntityType<X> entity = _model.entity(cls);\n+        EntityType<X> entity = _model.entityImpl(cls);\n         if (entity == null)\n             throw new IllegalArgumentException(_loc.get(\"root-non-entity\", cls).getMessage());\n         return from(entity);"},{"sha":"817fa134f846e98596f8a1931aee97a2f063a480","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","status":"modified","additions":38,"deletions":13,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/937aad666bcf696fdd5e47c281b09e527f721881/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","raw_url":"https://github.com/apache/openjpa/raw/937aad666bcf696fdd5e47c281b09e527f721881/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/meta/MetamodelImpl.java?ref=937aad666bcf696fdd5e47c281b09e527f721881","patch":"@@ -68,6 +68,7 @@\n     private final MetaDataRepository repos;\n     private Map<Class<?>, Type<?>> _basics = new HashMap<Class<?>, Type<?>>();\n     private Map<Class<?>, EntityType<?>> _entities = new HashMap<Class<?>, EntityType<?>>();\n+    private Set<EntityType<?>> _entitiesOnlySet = null;\n     private Map<Class<?>, EmbeddableType<?>> _embeddables = new HashMap<Class<?>, EmbeddableType<?>>();\n     private Map<Class<?>, MappedSuperclassType<?>> _mappedsupers = new HashMap<Class<?>, MappedSuperclassType<?>>();\n     private Map<Class<?>, Types.PseudoEntity<?>> _pseudos = new HashMap<Class<?>, Types.PseudoEntity<?>>();\n@@ -86,15 +87,15 @@ public MetamodelImpl(MetaDataRepository repos) {\n             PersistenceType type = getPersistenceType(meta);\n             switch (type) {\n             case ENTITY:\n-                find(cls, _entities, ENTITY);\n+                find(cls, _entities, ENTITY, false);\n                 if (meta.isEmbeddable())\n-                    find(cls, _embeddables, EMBEDDABLE);\n+                    find(cls, _embeddables, EMBEDDABLE, false);\n                 break;\n             case EMBEDDABLE:\n-                find(cls, _embeddables, EMBEDDABLE);\n+                find(cls, _embeddables, EMBEDDABLE, false);\n                 break;\n             case MAPPED_SUPERCLASS:\n-                find(cls, _mappedsupers, MAPPED_SUPERCLASS);\n+                find(cls, _mappedsupers, MAPPED_SUPERCLASS, false);\n                 break;\n             default:\n             }\n@@ -113,7 +114,7 @@ public MetaDataRepository getRepository() {\n      *  @throws IllegalArgumentException if not an embeddable class\n      */\n     public <X> EmbeddableType<X> embeddable(Class<X> clazz) {\n-        return (EmbeddableType<X>)find(clazz, _embeddables, EMBEDDABLE);\n+        return (EmbeddableType<X>)find(clazz, _embeddables, EMBEDDABLE, false);\n     }\n \n     /**\n@@ -123,7 +124,27 @@ public MetaDataRepository getRepository() {\n      *  @throws IllegalArgumentException if not an entity\n      */\n     public <X> EntityType<X> entity(Class<X> clazz) {\n-        return (EntityType<X>) find(clazz, _entities, ENTITY);\n+        return (EntityType<X>) find(clazz, _entities, ENTITY, false);\n+    }\n+\n+    public <X> EntityType<X> entityImpl(Class<X> clazz) {\n+        return (EntityType<X>) find(clazz, _entities, ENTITY, true);\n+    }\n+\n+    /*\n+     * Return the most up-to-date entity only set in the current meta featureSelection.\n+     */\n+    private Collection<EntityType<?>> getEntityValuesOnly() {\n+        if (_entitiesOnlySet == null) {\n+            _entitiesOnlySet = new HashSet<EntityType<?>>();\n+            for (Class<?> cls : _entities.keySet()) {\n+                // if key indicates it is a embeddable, do not add to the _entitiesOnlySet.\n+                if (!_embeddables.containsKey(cls)) {\n+                    _entitiesOnlySet.add(_entities.get(cls));\n+                }\n+            }\n+        }\n+        return _entitiesOnlySet;\n     }\n \n     /**\n@@ -139,7 +160,7 @@ public MetaDataRepository getRepository() {\n      * @return the metamodel entity types\n      */\n     public Set<EntityType<?>> getEntities() {\n-        return unmodifiableSet(_entities.values());\n+        return unmodifiableSet(getEntityValuesOnly());\n     }\n \n     /**\n@@ -148,7 +169,7 @@ public MetaDataRepository getRepository() {\n      */\n     public Set<ManagedType<?>> getManagedTypes() {\n         Set<ManagedType<?>> result = new HashSet<ManagedType<?>>();\n-        result.addAll(_entities.values());\n+        result.addAll(getEntityValuesOnly());\n         result.addAll(_embeddables.values());\n         result.addAll(_mappedsupers.values());\n         return result;\n@@ -162,10 +183,10 @@ public MetaDataRepository getRepository() {\n      *  @throws IllegalArgumentException if not a managed class\n      */\n     public <X> ManagedType<X> managedType(Class<X> clazz) {\n-        if (_entities.containsKey(clazz))\n-            return (EntityType<X>) _entities.get(clazz);\n         if (_embeddables.containsKey(clazz))\n             return (EmbeddableType<X>) _embeddables.get(clazz);\n+        if (_entities.containsKey(clazz))\n+            return (EntityType<X>) _entities.get(clazz);\n         if (_mappedsupers.containsKey(clazz))\n             return (MappedSuperclassType<X>) _mappedsupers.get(clazz);\n         throw new IllegalArgumentException(_loc.get(\"type-not-managed\", clazz)\n@@ -216,9 +237,12 @@ public static PersistenceType getPersistenceType(ClassMetaData meta) {\n      * The managed type may become instantiated as a side-effect.\n      */\n     private <V extends ManagedType<?>> V find(Class<?> cls, Map<Class<?>,V> container,  \n-            PersistenceType expected) {\n-        if (container.containsKey(cls))\n-            return container.get(cls);\n+            PersistenceType expected, boolean implFind) {\n+        if (container.containsKey(cls)) {\n+            if (implFind || expected != ENTITY || !_embeddables.containsKey(cls)) {\n+                return container.get(cls);\n+            }\n+        }\n         ClassMetaData meta = repos.getMetaData(cls, null, false);\n         if (meta != null) {\n             instantiate(cls, meta, container, expected);\n@@ -252,6 +276,7 @@ public static PersistenceType getPersistenceType(ClassMetaData meta) {\n         case ENTITY:\n         \tTypes.Entity<X> entity = new Types.Entity<X>(meta, this);\n             _entities.put(cls, entity);\n+            _entitiesOnlySet = null;\n             populate(entity);\n             break;\n         case MAPPED_SUPERCLASS:"}]}

