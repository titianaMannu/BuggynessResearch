{"sha":"9382677eb148b417ae0328330e858cb6396c1a4c","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzODI2NzdlYjE0OGI0MTdhZTAzMjgzMzBlODU4Y2I2Mzk2YzFhNGM=","commit":{"author":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:34:06Z"},"committer":{"name":"Kevin W. Sutter","email":"kwsutter@apache.org","date":"2007-08-05T23:34:06Z"},"message":"OPENJPA-272.  Committing the changes to allow @GeneratedValue to detect and report if initial values and/or setters were called on fields marked with @GeneratedValue.  New testcases were also provided.\n\nAlso had to update an existing testcase (TestSharedMappedSuperclassIdValue) and associated Entities because it was breaking the contract put in place.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@562987 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b48e75efa9ac839c14927faca4567e6606c2354","url":"https://api.github.com/repos/apache/openjpa/git/trees/5b48e75efa9ac839c14927faca4567e6606c2354"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9382677eb148b417ae0328330e858cb6396c1a4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9382677eb148b417ae0328330e858cb6396c1a4c","html_url":"https://github.com/apache/openjpa/commit/9382677eb148b417ae0328330e858cb6396c1a4c","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9382677eb148b417ae0328330e858cb6396c1a4c/comments","author":null,"committer":null,"parents":[{"sha":"c34fb4e80ef3597fc11c72640cc80d222d1fe282","url":"https://api.github.com/repos/apache/openjpa/commits/c34fb4e80ef3597fc11c72640cc80d222d1fe282","html_url":"https://github.com/apache/openjpa/commit/c34fb4e80ef3597fc11c72640cc80d222d1fe282"}],"stats":{"total":378,"additions":359,"deletions":19},"files":[{"sha":"ad8b8de5d03c64c2ad683314cd12b73dc6df3278","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -574,19 +574,26 @@ private boolean assignField(int field, boolean preFlushing) {\n             return assign && assignObjectId(!preFlushing, preFlushing);\n         }\n \n-        // don't assign values to fields with non-default values already\n-        if (fmd.getValueStrategy() == ValueStrategies.NONE\n-            || !isDefaultValue(field))\n+        // Just return if there's no value generation strategy\n+        if (fmd.getValueStrategy() == ValueStrategies.NONE)\n             return false;\n+        \n+        // Throw exception if field already has a value assigned.\n+        // @GeneratedValue overrides POJO initial values and setter methods\n+        if (!isDefaultValue(field) && !fmd.is_generated())\n+            throw new InvalidStateException(_loc.get(\n+                    \"existing-value-override-excep\", fmd.getFullName(false)));\n \n         // for primary key fields, assign the object id and recache so that\n         // to the user, so it looks like the oid always matches the pk fields\n         if (fmd.isPrimaryKey() && !isEmbedded())\n             return assignObjectId(!preFlushing, preFlushing);\n \n         // for other fields just assign the field or flush if needed\n-        if (_broker.getStoreManager().assignField(this, field, preFlushing))\n+        if (_broker.getStoreManager().assignField(this, field, preFlushing)) {\n+            fmd.set_generated(true);\n             return true;\n+        }\n         if (!preFlushing)\n             _broker.flush();\n         return !preFlushing;"},{"sha":"ddafd6cd5066b1b28d7f69080dba24f0ae187510","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.kernel.ObjectIdStateManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n import org.apache.openjpa.kernel.StoreManager;\n import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n@@ -49,6 +50,8 @@\n \n     private static final Localizer _loc = Localizer.forPackage\n         (ApplicationIds.class);\n+    private static final Localizer _loc2 = Localizer.forPackage\n+        (StateManagerImpl.class);\n \n     /**\n      * Return the primary key values for the given object id. The values\n@@ -430,15 +433,25 @@ public static boolean assign(OpenJPAStateManager sm, StoreManager store,\n     }\n \n     /**\n-     * Assign generated values to given fields.\n+     * Assign generated values to given primary key fields.\n      */\n     private static boolean assign(OpenJPAStateManager sm, StoreManager store,\n         FieldMetaData[] pks, boolean preFlush) {\n         for (int i = 0; i < pks.length; i++)\n-            if (pks[i].getValueStrategy() != ValueStrategies.NONE\n-                && sm.isDefaultValue(pks[i].getIndex())\n-                && !store.assignField(sm, pks[i].getIndex(), preFlush))\n-                return false;\n+            // If we are generating values...\n+            if (pks[i].getValueStrategy() != ValueStrategies.NONE) {\n+                // If a value already exists on this field, throw exception.\n+                // This is considered an application coding error.\n+                if (!sm.isDefaultValue(pks[i].getIndex()))\n+                    throw new InvalidStateException(_loc2.get(\n+                            \"existing-value-override-excep\", pks[i]\n+                                    .getFullName(false)));\n+                // Assign the generated value\n+                if (store.assignField(sm, pks[i].getIndex(), preFlush))\n+                    pks[i].set_generated(true);\n+                else\n+                    return false;\n+            }\n         return true;\n     }\n "},{"sha":"7486fc33805b9ca684e5319c8a691e7a8c83dc63","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -368,3 +368,8 @@ null-fg: Attempt to add null/empty fetch group name to fetch configuration.\n null-field: Attempt to add null/empty field name to fetch configuration.\n container-projection: Query projections cannot include array, collection, or \\\n     map fields.  Invalid query: \"{0}\"\n+existing-value-override-excep: The generated value processing detected an \\\n+existing value assigned to this field: {0}.  This existing value was either \\\n+provided via an initializer or by calling the setter method.  You either need \\\n+to remove the @GeneratedValue annotation or modify the code to remove the \\\n+initializer processing."},{"sha":"3311808edd53ba9e4cbe16d3967d85633f87be5a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/GeneratedValues.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.generationtype;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n+public class GeneratedValues {\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private int id;\r\n+\r\n+    @GeneratedValue\r\n+    private long field;\r\n+\r\n+    public GeneratedValues() {\r\n+        super();\r\n+    }\r\n+    \r\n+    public GeneratedValues(int id, long field) {\r\n+        super();\r\n+        this.id = id;\r\n+        this.field = field;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public long getField() {\r\n+        return field;\r\n+    }\r\n+\r\n+    public void setField(long field) {\r\n+        this.field = field;\r\n+    }\r\n+\r\n+}\r"},{"sha":"a031705f5172300a9b544ec66422fe8f30b0c041","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestGeneratedValues.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -0,0 +1,105 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.generationtype;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.InvalidStateException;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestGeneratedValues extends SingleEMFTestCase {\r\n+    \r\n+    public void setUp() { \r\n+        setUp(GeneratedValues.class, CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testDefaultValues() { \r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        GeneratedValues gv = new GeneratedValues();\r\n+        GeneratedValues gv2 = new GeneratedValues();\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(gv);\r\n+        em.persist(gv2);\r\n+        em.getTransaction().commit();\r\n+\r\n+        em.refresh(gv);\r\n+        em.refresh(gv2);\r\n+\r\n+        assertFalse(gv.getId() == gv2.getId());\r\n+        assertFalse(gv.getField() == gv2.getField());\r\n+    }\r\n+    \r\n+    public void testInitialValues() { \r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        GeneratedValues gv = new GeneratedValues(7, 9);\r\n+\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            em.persist(gv);\r\n+            em.getTransaction().commit();\r\n+        } catch (InvalidStateException ise) {\r\n+            // expected result\r\n+            return;\r\n+        } \r\n+        \r\n+        // should not get here...\r\n+        fail();\r\n+    }\r\n+    \r\n+    public void testIdSetter() { \r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        GeneratedValues gv = new GeneratedValues();\r\n+        gv.setId(3);\r\n+\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            em.persist(gv);\r\n+            em.getTransaction().commit();\r\n+        } catch (InvalidStateException ise) {\r\n+            // expected result\r\n+            return;\r\n+        } \r\n+        \r\n+        // should not get here...\r\n+        fail();\r\n+    }\r\n+    \r\n+    public void testFieldSetter() { \r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        GeneratedValues gv = new GeneratedValues();\r\n+        gv.setField(5);\r\n+\r\n+        try {\r\n+            em.getTransaction().begin();\r\n+            em.persist(gv);\r\n+            em.getTransaction().commit();\r\n+        } catch (InvalidStateException ise) {\r\n+            // expected result\r\n+            return;\r\n+        }\r\n+        \r\n+        // should not get here...\r\n+        fail();\r\n+    }\r\n+}\r"},{"sha":"ff42f6466ee7d6ae69da6b68362ca7aab8eb3483","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Entity;\n+\n+@Entity \n+public class NoGenEntityL3 \n+    extends NoGenMappedSuperclassL2 {\n+\n+    private int l3data;\n+\n+    public int getL3Data() {\n+        return l3data;\n+    }\n+\n+    public void setL3Data(int data) {\n+        l3data = data;\n+    }\n+}\n+"},{"sha":"38450becaa2d9c9c316a13bb84354c205ae542c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenEntityL3Sibling.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity \r\n+public class NoGenEntityL3Sibling \r\n+    extends NoGenMappedSuperclassL2 {\r\n+\r\n+    private int siblingl3data;\r\n+\r\n+    public int getSiblingL3Data() {\r\n+        return siblingl3data;\r\n+    }\r\n+\r\n+    public void setSiblingL3Data(int data) {\r\n+        siblingl3data = data;\r\n+    }\r\n+}\r\n+\r"},{"sha":"eb29d6798278387d99d9a4e91b12428866e2c95e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassBase.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.Id;\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass\n+public class NoGenMappedSuperclassBase {\n+\n+    @Id\n+    private long id;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+}\n+"},{"sha":"820ae810630f1298a1c49e5960f559c460985c53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/NoGenMappedSuperclassL2.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.inheritance;\n+\n+import javax.persistence.MappedSuperclass;\n+\n+@MappedSuperclass \n+public class NoGenMappedSuperclassL2 \n+    extends NoGenMappedSuperclassBase {\n+\n+    private int l2data;\n+\n+    public int getL2Data() {\n+        return l2data;\n+    }\n+\n+    public void setL2Data(int data) {\n+        l2data = data;\n+    }\n+}\n+"},{"sha":"bd7c43ea695b2fd88aa79b7af9a0985d6181cda7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/9382677eb148b417ae0328330e858cb6396c1a4c/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestSharedMappedSuperclassIdValue.java?ref=9382677eb148b417ae0328330e858cb6396c1a4c","patch":"@@ -33,15 +33,16 @@\n     extends SingleEMFTestCase {\n \n     public void setUp() {\n-        setUp(MappedSuperclassBase.class, MappedSuperclassL2.class,\n-            EntityL3.class, EntityL3Sibling.class);\n+        setUp(CLEAR_TABLES, NoGenMappedSuperclassBase.class, \n+                NoGenMappedSuperclassL2.class, NoGenEntityL3.class, \n+                NoGenEntityL3Sibling.class);\n \n-        EntityL3 ent = new EntityL3();\n-        ent.setId(1);\n+        NoGenEntityL3 ent = new NoGenEntityL3();\n+        ent.setId(1L);\n         ent.setL2Data(99); \n         ent.setL3Data(100);\n-        EntityL3Sibling sib = new EntityL3Sibling();\n-        sib.setId(1);\n+        NoGenEntityL3Sibling sib = new NoGenEntityL3Sibling();\n+        sib.setId(1L);\n         sib.setL2Data(100); \n         sib.setSiblingL3Data(101);\n \n@@ -55,12 +56,12 @@ public void setUp() {\n \n     public void testFind() {\n         EntityManager em = emf.createEntityManager();\n-        EntityL3 ent = em.find(EntityL3.class, 1L);\n+        NoGenEntityL3 ent = em.find(NoGenEntityL3.class, 1L);\n         assertNotNull(ent);\n         assertEquals(99, ent.getL2Data());\n         assertEquals(100, ent.getL3Data());\n \n-        EntityL3Sibling sib = em.find(EntityL3Sibling.class, 1L);\n+        NoGenEntityL3Sibling sib = em.find(NoGenEntityL3Sibling.class, 1L);\n         assertNotNull(sib);\n         assertEquals(100, sib.getL2Data());\n         assertEquals(101, sib.getSiblingL3Data());\n@@ -70,10 +71,10 @@ public void testFind() {\n \n     public void testGetReference() {\n         EntityManager em = emf.createEntityManager();\n-        EntityL3 ent = em.getReference(EntityL3.class, 1L);\n+        NoGenEntityL3 ent = em.getReference(NoGenEntityL3.class, 1L);\n         assertNotNull(ent);\n \n-        EntityL3Sibling sib = em.getReference(EntityL3Sibling.class, 1L);\n+        NoGenEntityL3Sibling sib = em.getReference(NoGenEntityL3Sibling.class, 1L);\n         assertNotNull(sib);\n \n         assertEquals(99, ent.getL2Data());"}]}

