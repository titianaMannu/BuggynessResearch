{"sha":"939b122c09432e54083d751469c56ad48aff9fb6","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzOWIxMjJjMDk0MzJlNTQwODNkNzUxNDY5YzU2YWQ0OGFmZjlmYjY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-09-08T16:54:21Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-09-08T16:54:21Z"},"message":"OPENJPA-697: Join if version column is in secondary table\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@693162 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a72dd488bc4af3acc2dbc89c7019310b30f48f87","url":"https://api.github.com/repos/apache/openjpa/git/trees/a72dd488bc4af3acc2dbc89c7019310b30f48f87"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/939b122c09432e54083d751469c56ad48aff9fb6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/939b122c09432e54083d751469c56ad48aff9fb6","html_url":"https://github.com/apache/openjpa/commit/939b122c09432e54083d751469c56ad48aff9fb6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/939b122c09432e54083d751469c56ad48aff9fb6/comments","author":null,"committer":null,"parents":[{"sha":"0ea75e720ebfea378b0412d6a0f96c6ad6374795","url":"https://api.github.com/repos/apache/openjpa/commits/0ea75e720ebfea378b0412d6a0f96c6ad6374795","html_url":"https://github.com/apache/openjpa/commit/0ea75e720ebfea378b0412d6a0f96c6ad6374795"}],"stats":{"total":55,"additions":36,"deletions":19},"files":[{"sha":"01b52680123c13106e0a79270cac64518b861d25","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":36,"deletions":16,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/939b122c09432e54083d751469c56ad48aff9fb6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/939b122c09432e54083d751469c56ad48aff9fb6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=939b122c09432e54083d751469c56ad48aff9fb6","patch":"@@ -22,16 +22,14 @@\n import java.math.BigDecimal;\n import java.sql.SQLException;\n import java.util.Comparator;\n-import java.util.HashSet;\n-import java.util.Set;\n \n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.VersionMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\n import org.apache.openjpa.jdbc.schema.Index;\n-import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.Result;\n import org.apache.openjpa.jdbc.sql.Row;\n import org.apache.openjpa.jdbc.sql.RowManager;\n@@ -43,10 +41,8 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n \n-import serp.util.Numbers;\n-\n /**\n- * Uses a single column and corresponding version object.\n+ * Uses a one or more column(s) and corresponding version object.\n  *\n  * @author Marc Prud'hommeaux\n  * @author Pinaki Poddar\n@@ -111,12 +107,15 @@ protected int compare(Object v1, Object v2) {\n \n \t/**\n \t * Compare each element of the given arrays that must be of equal size. \n+\t * The given array values represent version values and the result designate\n+\t * whether first version is earlier, same or later than the second one.\n \t * \n \t * @return If any element of a1 is later than corresponding element of\n-\t * a2 then return 1 i.e. a1 as a whole is later than a2.\n-\t * If each element of a1 is to equal corresponding element of a2 then return\n-\t * 0 i.e. a1 is as a whole equals to a2.\n-\t * else return a negative number i.e. a1 is earlier than a2.\n+\t * a2 then returns 1 i.e. the first version is later than the second version.\n+\t * If each element of a1 is equal to corresponding element of a2 then return\n+\t * 0 i.e. the first version is same as the second version.\n+\t * else return a negative number i.e. the first version is earlier than \n+\t * the second version.\n \t */\n \tprotected int compare(Object[] a1, Object[] a2) {\n \t\tif (a1.length != a2.length)\n@@ -131,10 +130,6 @@ protected int compare(Object[] a1, Object[] a2) {\n \t\treturn total;\n \t}\n \t\n-\tint sign(int i) {\n-\t\treturn (i > 0) ? 1 : (i == 0) ? 0 : -1;\n-\t}\n-\n     public void map(boolean adapt) {\n         ClassMapping cls = vers.getClassMapping();\n         if (cls.getJoinablePCSuperclassMapping() != null\n@@ -208,8 +203,15 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         for (int i = 0; i < cols.length; i++) {\n             Row row = rm.getRow(cols[i].getTable(), Row.ACTION_UPDATE, sm, true);\n             row.setFailedObject(sm.getManagedInstance());\n-            if (curVersion != null && sm.isVersionCheckRequired())\n+            if (curVersion != null && sm.isVersionCheckRequired()) {\n                 row.whereObject(cols[i], getColumnValue(curVersion, i));\n+                if (isSecondaryColumn(cols[i], sm)) {\n+                \tForeignKey[] fks = cols[i].getTable().getForeignKeys();\n+                \tfor (ForeignKey fk : fks) {\n+                \t\trow.whereForeignKey(fk, sm);\n+                \t}\n+                }\n+            }\n             if (vers.getColumnIO().isUpdatable(i, nextVersion == null))\n                 row.setObject(cols[i], getColumnValue(nextVersion, i));\n         }\n@@ -230,8 +232,15 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             row.setFailedObject(sm.getManagedInstance());\n             cur = getColumnValue(curVersion, i);\n             // set where and update conditions on row\n-            if (cur != null)\n+            if (cur != null) {\n                 row.whereObject(cols[i], cur);\n+                if (isSecondaryColumn(cols[i], sm)) {\n+                \tForeignKey[] fks = cols[i].getTable().getForeignKeys();\n+                \tfor (ForeignKey fk : fks) {\n+                \t\trow.whereForeignKey(fk, sm);\n+                \t}\n+                }\n+            }\n         }\n     }\n \n@@ -321,4 +330,15 @@ Object getColumnValue(Object o, int idx) {\n     \t\treturn Array.get(o, idx);\n     \treturn o;\n     }\n+    \n+    boolean isSecondaryColumn(Column col, OpenJPAStateManager sm) {\n+    \tClassMapping mapping = (ClassMapping)sm.getMetaData();\n+    \twhile (mapping != null) {\n+    \t\tif (mapping.getTable() == col.getTable())\n+    \t\t\treturn false;\n+    \t\telse\n+    \t\t\tmapping = mapping.getPCSuperclassMapping();\n+    \t}\n+    \treturn true;\n+    }\n }"},{"sha":"f5e2b1d33e6bf0f7242850be6057a17de327678a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/939b122c09432e54083d751469c56ad48aff9fb6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/939b122c09432e54083d751469c56ad48aff9fb6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MultiColumnVersionStrategy.java?ref=939b122c09432e54083d751469c56ad48aff9fb6","patch":"@@ -18,9 +18,6 @@\n  */\r\n package org.apache.openjpa.jdbc.meta.strats;\r\n \r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-\r\n import org.apache.commons.lang.StringUtils;\r\n import org.apache.openjpa.jdbc.schema.Column;\r\n import org.apache.openjpa.jdbc.schema.Schemas;\r"}]}

