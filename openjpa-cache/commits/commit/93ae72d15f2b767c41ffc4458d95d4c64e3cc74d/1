{"sha":"93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzYWU3MmQxNWYyYjc2N2M0MWZmYzQ0NThkOTVkNGM2NGUzY2M3NGQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T15:58:24Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T15:58:24Z"},"message":"OPENJPA-1051: Simplify check for uniqueness of column names. Patch contributed by Ravi Palacherla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880821 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a95e047b5d512c2f6dd48ffee84dca3d7651cb55","url":"https://api.github.com/repos/apache/openjpa/git/trees/a95e047b5d512c2f6dd48ffee84dca3d7651cb55"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","html_url":"https://github.com/apache/openjpa/commit/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d/comments","author":null,"committer":null,"parents":[{"sha":"a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","url":"https://api.github.com/repos/apache/openjpa/commits/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6","html_url":"https://github.com/apache/openjpa/commit/a91e85e6db73b4c2c6b2e89eb75b2516d1bb99c6"}],"stats":{"total":41,"additions":5,"deletions":36},"files":[{"sha":"e3eb123491960bc1c6279f0f7c3df0d921ee0141","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","raw_url":"https://github.com/apache/openjpa/raw/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingDefaultsImpl.java?ref=93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","patch":"@@ -539,9 +539,7 @@ public void populateDataStoreIdColumns(ClassMapping cls, Table table,\n             else if (_dsIdName != null)\n                 cols[i].setName(_dsIdName + i);\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n     }\n \n     /**\n@@ -553,7 +551,9 @@ protected void correctName(Table table, Column col) {\n             String name = col.getName();\n             if (_removeHungarianNotation)\n                 name = removeHungarianNotation(name);\n-            col.setName(dict.getValidColumnName(name, table));\n+            String correctedName = dict.getValidColumnName(name, table);\n+            col.setName(correctedName);\n+            table.addCorrectedColumnName(correctedName, true);\n         }\n     }\n \n@@ -584,9 +584,7 @@ else if (_versName != null) {\n             } else if (_versName != null)\n                 cols[i].setName(_versName + i);\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n     }\n \n     public void populateColumns(Discriminator disc, Table table,\n@@ -597,9 +595,7 @@ public void populateColumns(Discriminator disc, Table table,\n             else if (_discName != null)\n                 cols[i].setName(_discName + i);\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n     }\n \n     public void populateJoinColumn(ClassMapping cm, Table local, Table foreign,\n@@ -624,11 +620,8 @@ else if (target instanceof Column)\n \n     public void populateColumns(ValueMapping vm, String name, Table table,\n         Column[] cols) {\n-        for (int i = 0; i < cols.length; i++) {\n+        for (int i = 0; i < cols.length; i++)\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n-        }\n-        table.resetSubColumns();\n     }\n \n     public boolean populateOrderColumns(FieldMapping fm, Table table,\n@@ -639,9 +632,7 @@ public boolean populateOrderColumns(FieldMapping fm, Table table,\n             else if (_orderName != null)\n                 cols[i].setName(_orderName + i);\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n         return _orderLists && (JavaTypes.ARRAY == fm.getTypeCode()\n             || List.class.isAssignableFrom(fm.getType()));\n     }\n@@ -654,9 +645,7 @@ public boolean populateNullIndicatorColumns(ValueMapping vm, String name,\n             else if (_nullIndName != null)\n                 cols[i].setName(_nullIndName + i);\n             correctName(table, cols[i]);\n-            table.addSubColumn(cols[i].getName());\n         }\n-        table.resetSubColumns();\n         return _addNullInd;\n     }\n "},{"sha":"a3cc7c2a64ab75710358c8267c57110185fcb840","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"modified","additions":1,"deletions":21,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/93ae72d15f2b767c41ffc4458d95d4c64e3cc74d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=93ae72d15f2b767c41ffc4458d95d4c64e3cc74d","patch":"@@ -39,17 +39,13 @@\n \n     private Set _names = null;\n \n-    // an additional names Set for checking name duplication\n-    private Set _subNames = null;\n-\n     /**\n      * Return true if the given name is in use already.\n      */\n     public boolean isNameTaken(String name) {\n         if (name == null)\n             return true;\n-        return (_names != null && _names.contains(name.toUpperCase())) ||\n-            (_subNames != null && _subNames.contains(name.toUpperCase()));\n+        return _names != null && _names.contains(name.toUpperCase());\n     }\n \n     /**\n@@ -81,20 +77,4 @@ protected void removeName(String name) {\n         if (name != null && _names != null)\n             _names.remove(name.toUpperCase());\n     }\n-\n-    /**\n-    * Attempt to add the given name to the set.\n-    *\n-    * @param name the name to add\n-    */\n-    protected void addSubName(String name) {\n-        if (_subNames == null) {\n-            _subNames = new HashSet();\n-        }\n-        _subNames.add(name.toUpperCase());\n-    }\n-\n-    protected void resetSubNames() {\n-        _subNames = null;\n-    }\n }"}]}

