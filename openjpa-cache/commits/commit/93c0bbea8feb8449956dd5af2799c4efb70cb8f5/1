{"sha":"93c0bbea8feb8449956dd5af2799c4efb70cb8f5","node_id":"MDY6Q29tbWl0MjA2MzY0OjkzYzBiYmVhOGZlYjg0NDk5NTZkZDVhZjI3OTljNGVmYjcwY2I4ZjU=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-08-21T15:46:34Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2010-08-21T15:46:34Z"},"message":"OPENJPA-1736: Mappings with foreign keys as identity fields sometimes not resolved correctly\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@987772 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c7840ca670020efd4a39415bd599f80096cc76c5","url":"https://api.github.com/repos/apache/openjpa/git/trees/c7840ca670020efd4a39415bd599f80096cc76c5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/93c0bbea8feb8449956dd5af2799c4efb70cb8f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/93c0bbea8feb8449956dd5af2799c4efb70cb8f5","html_url":"https://github.com/apache/openjpa/commit/93c0bbea8feb8449956dd5af2799c4efb70cb8f5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/comments","author":null,"committer":null,"parents":[{"sha":"c000f0bf624e41e7f9681831a2656e02106e96c1","url":"https://api.github.com/repos/apache/openjpa/commits/c000f0bf624e41e7f9681831a2656e02106e96c1","html_url":"https://github.com/apache/openjpa/commit/c000f0bf624e41e7f9681831a2656e02106e96c1"}],"stats":{"total":534,"additions":225,"deletions":309},"files":[{"sha":"2a68f8fe5c83d393d05f210fcfb2e9589afd2038","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -64,7 +64,6 @@\n     private boolean _superclassDiscriminatorStrategyByDefault = true;\n     private boolean _isAbstractMappingUniDirectional = false;\n     private boolean _isNonDefaultMappingAllowed = false;\n-    private boolean _reorderMetaDataResolution = true;\n     private boolean _reloadOnDetach = false;\n     private boolean _ignoreDetachedStateFieldForProxySerialization = false;\n     \n@@ -508,26 +507,6 @@ public void setNonDefaultMappingAllowed(boolean isNonDefaultMappingAllowed) {\n     public boolean isNonDefaultMappingAllowed() {\n         return _isNonDefaultMappingAllowed;\n     }\n-    \n-    /**\n-     * Whether OpenJPA should reorder entities in MetaDataRepository.processBuffer() to ensure that the metadata for \n-     * entities with foreign keys in their identity are processed after the entities it depends on.\n-     * \n-     * @return true if the reordering should be performed, false if not.\n-     */\n-    public boolean getReorderMetaDataResolution() {\n-        return _reorderMetaDataResolution;\n-    }\n-    \n-    /**\n-     * Whether OpenJPA should reorder entities in MetaDataRepository.processBuffer() to ensure that the metadata for \n-     * entities with foreign keys in their identity are processed after the entities it depends on.\n-     * \n-     * @param reorderProcessBuffer true if the reordering should be performed, false if not.\n-     */\n-    public void setReorderMetaDataResolution(boolean reorderProcessBuffer) {\n-        _reorderMetaDataResolution = reorderProcessBuffer;\n-    }\n \n     /**\n      * Whether OpenJPA should attempt to load fields when the DetachState"},{"sha":"51e618870e407aaa00a74d44070a5224a8461a96","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/c000f0bf624e41e7f9681831a2656e02106e96c1/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","raw_url":"https://github.com/apache/openjpa/raw/c000f0bf624e41e7f9681831a2656e02106e96c1/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceOrderedMetaDataList.java?ref=c000f0bf624e41e7f9681831a2656e02106e96c1","patch":"@@ -1,78 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.    \n- */\n-package org.apache.openjpa.meta;\n-\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.ListIterator;\n-import java.io.Serializable;\n-\n-public class InheritanceOrderedMetaDataList implements Serializable, Iterable<ClassMetaData> {\n-\n-    /**\n-     * \n-     */\n-    private static final long serialVersionUID = -4821243307083324894L;\n-    \n-    private MetaDataInheritanceComparator _comp\n-        = new MetaDataInheritanceComparator();\n-    private LinkedList<ClassMetaData> buffer = new LinkedList<ClassMetaData>();\n-\n-    public boolean add(ClassMetaData meta) {\n-        if (meta == null || buffer.contains(meta))\n-            return false;\n-        for (ListIterator<ClassMetaData> itr = buffer.listIterator();\n-            itr.hasNext();) {\n-            int ord = _comp.compare(meta, itr.next());\n-            if (ord > 0)\n-                continue;\n-            if (ord == 0)\n-                return false;\n-            itr.previous();\n-            itr.add(meta);\n-            return true;\n-        }\n-        buffer.add(meta);\n-        return true;\n-    }\n-\n-    public boolean remove(ClassMetaData meta) {\n-        return buffer.remove(meta);\n-    }\n-\n-    public ClassMetaData peek() {\n-        return buffer.peek();\n-    }\n-    \n-    public int size() {\n-        return buffer.size();\n-    }\n-    \n-    public Iterator<ClassMetaData> iterator() {\n-        return buffer.iterator();\n-    }\n-    \n-    public boolean isEmpty() {\n-        return buffer.isEmpty();\n-    }\n-    \n-    public void clear() {\n-        buffer.clear();\n-    }\n-}"},{"sha":"7d816c0e8216e1bd67dd9506575ce87422b63ffb","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":13,"deletions":205,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -141,8 +141,8 @@\n     private final Collection<Class<?>> _registered = new HashSet<Class<?>>();\n \n     // set of metadatas we're in the process of resolving\n-    private final InheritanceOrderedMetaDataList _resolving = new InheritanceOrderedMetaDataList();\n-    private final InheritanceOrderedMetaDataList _mapping = new InheritanceOrderedMetaDataList();\n+    private final List<ClassMetaData> _resolving = new ArrayList<ClassMetaData>();\n+    private final List<ClassMetaData> _mapping = new ArrayList<ClassMetaData>();\n     private final List<RuntimeException> _errs = new LinkedList<RuntimeException>();\n \n     // system listeners\n@@ -153,8 +153,6 @@\n     protected boolean _locking = true;\n     private static final String PRELOAD_STR = \"Preload\";\n     \n-    private boolean _reorderMetaDataResolution = false;\n-    \n     // A boolean used to decide whether or not we need to call to PCEnhancer to check whether we have any down level\n     // Entities.\n     private boolean _logEnhancementLevel = true;\n@@ -785,22 +783,28 @@ private boolean resolveMapping(ClassMetaData meta) {\n     /**\n      * Process the given metadata and the associated buffer.\n      */\n-    private List<ClassMetaData> processBuffer(ClassMetaData meta, InheritanceOrderedMetaDataList buffer, int mode) {\n+    private List<ClassMetaData> processBuffer(ClassMetaData meta, List<ClassMetaData> buffer, int mode) {\n+        // add the metadata to the buffer unless an instance for the same entity\n+        // is already there\n+        for (ClassMetaData cmd : buffer)\n+            if (cmd.getDescribedType().equals(meta.getDescribedType()))\n+                return null;\n+\n         // if we're already processing a metadata, just buffer this one; when\n         // the initial metadata finishes processing, we traverse the buffer\n         // and process all the others that were introduced during reentrant\n         // calls\n-        if (!buffer.add(meta) || buffer.size() != 1)\n+        buffer.add(meta);\n+        if (buffer.size() != 1)\n             return null;\n \n         // continually pop a metadata and process it until we run out; note\n         // that each processing call might place more metas in the buffer as\n-        // one class tries to access metadata for another; also note that the\n-        // buffer orders itself from least to most derived\n+        // one class tries to access metadata for another\n         ClassMetaData buffered;\n         List<ClassMetaData> processed = new ArrayList<ClassMetaData>(5);\n         while (!buffer.isEmpty()) {\n-            buffered = buffer.peek();\n+            buffered = buffer.get(0);\n             try {\n                 buffered.resolve(mode);\n                 processed.add(buffered);\n@@ -822,11 +826,6 @@ private boolean resolveMapping(ClassMetaData meta) {\n             }\n         }\n         \n-        // Check if process buffer reordering for PCTypes that have relationships to other PCTypes in their identity \n-        // should be performed.\n-        if (_reorderMetaDataResolution) {\n-            processed = resolveFKInPKDependenciesOrdering(processed);\n-        }\n         return processed;\n     }\n \n@@ -1863,7 +1862,6 @@ public void setMetaModel(ClassMetaData meta, Class<?> m2) {\n     public void setConfiguration(Configuration conf) {\n         _conf = (OpenJPAConfiguration) conf;\n         _log = _conf.getLog(OpenJPAConfiguration.LOG_METADATA);\n-        _reorderMetaDataResolution = _conf.getCompatibilityInstance().getReorderMetaDataResolution();\n     }\n \n     public void startConfiguration() {\n@@ -2434,196 +2432,6 @@ protected XMLClassMetaData newXMLClassMetaData(Class<?> type) {\n     public XMLFieldMetaData newXMLFieldMetaData(Class<?> type, String name) {\n         return new XMLFieldMetaData(type, name);\n     }\n-    \n-    /**\n-     * Analyzes the list of ClassMetaData in the supplied list for any which has foreign keys to other ClassMetaData \n-     * instances in its identity (in other words, PCTypes which have primary keys that are foreign keys to other\n-     * tables), and returns a list arranged so that a ClassMetaData that depends on another ClassMetaData appears\n-     * after it in the list.\n-     *\n-     * @param cmdList - List of ClassMetaData to examine\n-     * @return - List of ClassMetaData, with ClassMetaData dependees moved after the last identified dependent \n-     *           ClassMetaData, if any move is necessary.\n-     */\n-    private List<ClassMetaData> resolveFKInPKDependenciesOrdering(List<ClassMetaData> cmdList) {\n-        HashMap<ClassMetaData, CMDDependencyNode> nodeMap = new HashMap<ClassMetaData, CMDDependencyNode>();\n-        HashSet<CMDDependencyNode> nodesWithDependenciesSet = new HashSet<CMDDependencyNode>();\n-        ArrayList<CMDDependencyNode> nodeList = new ArrayList<CMDDependencyNode>(cmdList.size());\n-        \n-        // Initial analysis of ClassMetaData objects -- Populate the linked list with objects in the same order of \n-        // appearance in the original list. Identify CMDs whose identities have a FK to another CMD, and catalog that \n-        // dependency.\n-        for (ClassMetaData cmd : cmdList) {\n-            // Add this node to the list\n-            CMDDependencyNode node = nodeMap.get(cmd);\n-            if (node == null) {\n-                node = new CMDDependencyNode(cmd);\n-                nodeMap.put(cmd, node);\n-            }\n-            nodeList.add(node);\n-            \n-            // Examine its primary key fields, flag any references to another PCType that is defined in cmdList as a \n-            // dependency\n-            FieldMetaData[] fmdArr = cmd.getPrimaryKeyFields();\n-            for (FieldMetaData fmd : fmdArr) {\n-                ValueMetaData vmd = fmd.getValue();\n-                if (vmd.isTypePC()) {\n-                    ClassMetaData targetCMD = vmd.getDeclaredTypeMetaData();\n-\n-                    // Only process entries which are in the cmdList, as we don't want to be adding anything new.\n-                    if (!cmdList.contains(targetCMD)) {\n-                        continue;\n-                    }\n-\n-                    // Register the dependency\n-                    CMDDependencyNode targetNode = null;\n-                    if ((targetNode = nodeMap.get(targetCMD)) == null) {\n-                        targetNode = new CMDDependencyNode(targetCMD);\n-                        nodeMap.put(targetCMD, targetNode);\n-                    }\n-                    node.registerDependentNode(targetNode);\n-                    nodesWithDependenciesSet.add(node);\n-                }\n-            }\n-        }\n-        \n-        // Analysis is complete. For each CMD that has an identity foreign key dependency on another CMD, ensure that it\n-        // appears later in the list then the CMD it is dependent on. If it appears earlier, move it immediately after \n-        // the CMD. If there are multiple CMDs the identity is dependent on, move it after the last dependency in\n-        // the linked list.\n-        for (CMDDependencyNode node : nodesWithDependenciesSet) {\n-            // Check if there is a cycle (dependencies or subdependencies that create a cycle in the graph. If one is \n-            // detected, then this algorithm cannot be used to reorder the CMD list.  Emit a warning, and return the \n-            // original list.\n-            if (node.checkForCycle()) {\n-                if (_log.isWarnEnabled()) {\n-                    _log.warn(_loc.get(\"cmd-discover-cycle\", node.getCmd().getResourceName()));\n-                }\n-                return cmdList;\n-            }\n- \n-            int nodeIndex = nodeList.indexOf(node);\n-            Set<CMDDependencyNode> dependencies = node.getDependsOnSet();       \n-            \n-            // If the current node has a dependency that appears later in the list, then this node needs\n-            // to be moved to the point immediately after that dependency.\n-            CMDDependencyNode moveAfter = null;\n-            int moveAfterIndex = -1;\n-            for (CMDDependencyNode depNode : dependencies) {               \n-                int dependencyIndex = nodeList.indexOf(depNode);\n-                if ((nodeIndex < dependencyIndex) && (moveAfterIndex < dependencyIndex)) {\n-                    moveAfter = depNode;\n-                    moveAfterIndex = dependencyIndex;\n-                }\n-            }\n-            if (moveAfter != null) {\n-                nodeList.remove(nodeIndex);\n-                nodeList.add(nodeList.indexOf(moveAfter) + 1, node);\n-            }      \n-        }\n-        \n-        // Sorting is complete, build the return list.  Clear the dependsOnSet for the GC.\n-        ArrayList<ClassMetaData> returnList = new ArrayList<ClassMetaData>();\n-        for (CMDDependencyNode current : nodeList) {\n-            returnList.add(current.getCmd());\n-            current.getDependsOnSet().clear();\n-        }\n-        \n-        return returnList;\n-    }\n-\n-\n-    /**\n-     * Linked list node class for managing any foreign keys in the identity of a ClassMetaData instance.\n-     * \n-     */\n-    private class CMDDependencyNode {\n-        private ClassMetaData cmd;\n-\n-        // Marker for quick determination if this node has dependencies\n-        private boolean hasDependencies = false;\n-\n-        // List of ClassMetaData objects this ClassMetaData depends on\n-        private HashSet<CMDDependencyNode> dependsOnSet = new HashSet<CMDDependencyNode>();\n-\n-        /**\n-         * Inner class constructor\n-         */\n-        CMDDependencyNode(ClassMetaData cmd) {\n-            this.cmd = cmd;\n-        }\n-\n-        /**\n-         * Returns the ClassMetaData instance referenced by this node.\n-         */\n-        public ClassMetaData getCmd() {\n-            return cmd;\n-        }\n-\n-        /**\n-         * \n-         * @return true if this node's ClassMetaData has a FK in its identity that refers to another ClassMetaData; \n-         *         false if it does not.\n-         */\n-        public boolean getHasDependencies() {\n-            return hasDependencies;\n-        }\n-\n-        /**\n-         * Registers a ClassMetaData modelled by a CMDDependencyNode as a dependency of this ClassMetaData.\n-         * \n-         */\n-        public void registerDependentNode(CMDDependencyNode node) {\n-            getDependsOnSet().add(node);\n-            hasDependencies = true;\n-        }\n-\n-        /**\n-         * Returns a Set containing all of the CMDDependencyNode instances that this node has a FK in identity \n-         * dependency on.\n-         * \n-         */\n-        public Set<CMDDependencyNode> getDependsOnSet() {\n-            return dependsOnSet;\n-        }\n-\n-        /**\n-         * Checks all dependencies, and sub-dependencies, for any cycles in the dependency graph.\n-         * \n-         * @return true if a cycle was discovered, false if not.\n-         */\n-        public boolean checkForCycle() {\n-            java.util.Stack<CMDDependencyNode> visitStack = new java.util.Stack<CMDDependencyNode>();\n-            return internalCheckForCycle(visitStack);\n-        }\n-\n-        /**\n-         * Internal implementation of the cycle detection.\n-         * \n-         * @param visitStack\n-         * @return true if a cycle is detected, false if no cycle was detected.\n-         */\n-        private boolean internalCheckForCycle(java.util.Stack<CMDDependencyNode> visitStack) {\n-            if (visitStack.contains(this)) {\n-                return true;\n-            }\n-            visitStack.push(this);\n-\n-            try {\n-                for (CMDDependencyNode node : dependsOnSet) {\n-                    if (node.getHasDependencies()) {\n-                        if (node.internalCheckForCycle(visitStack) == true) {\n-                            return true;\n-                        }\n-                    }\n-                }\n-            } finally {\n-                visitStack.pop();\n-            }\n-            \n-            return false;\n-        }\n-    }\n \n     public static boolean needsPreload(Options o) {\n         if (o.getBooleanProperty(PRELOAD_STR) == true) {"},{"sha":"5fd073fb92a30bef25acbdbfd220747a9af0d85b","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -348,9 +348,6 @@ repos-preload-none: No persistent metadata found for loading during initializati\n repos-preloading: Following metadata are being loaded during initialization by \"{0}\": {1}. \n repos-preload-error: Unexpected error during early loading during initialization. \\\n \tSee nested stacktrace for details. \t  \n-cmd-discover-cycle: A cycle was detected while resolving the identity \\\n-    references for type \"{0}\".  The original process buffer ordering \\\n-    will be used.\n repos-initializeEager-none: No persistent metadata found for loading during initialization. \\\n     The persistent classes must be listed in persistence unit configuration to be loaded during initialization.\n repos-initializeEager-found: The following classes are being preloaded \"{0}\".\t   "},{"sha":"fe6fe5ae3e88837a7fa3ea89b196400e7f24dc98","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity/TestEntityAsIdentityFields.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity/TestEntityAsIdentityFields.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity/TestEntityAsIdentityFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity/TestEntityAsIdentityFields.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -29,8 +29,7 @@\n public class TestEntityAsIdentityFields extends SingleEMFTestCase {    \n     public void setUp() {\n         setUp(\n-                Account.class, AccountGroup.class, Person.class,\n-                \"openjpa.Compatibility\", \"reorderMetaDataResolution=true\");\n+                Account.class, AccountGroup.class, Person.class);\n     }\n     \n     /**"},{"sha":"e322cc5a5e0c04fecb30daceda5a5d8044a84821","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Attendance.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Attendance.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Attendance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Attendance.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity.entityasidentity2;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"EAI2Attendance\")\r\n+@IdClass(Attendance.AttendanceId.class)\r\n+public class Attendance {\r\n+\r\n+    public static class AttendanceId {\r\n+\r\n+        private int student;\r\n+        private int course;\r\n+\r\n+        public AttendanceId() {}\r\n+\r\n+        public AttendanceId(int studentId, int courseId) {\r\n+            this.student = studentId;\r\n+            this.course = courseId;\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return student + \":\" + course;\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (17 + student) * 37 + course;\r\n+        }\r\n+\r\n+        public boolean equals(Object other) {\r\n+            return this == other\r\n+                || other instanceof AttendanceId\r\n+                    && student == ((AttendanceId) other).student\r\n+                    && course == ((AttendanceId) other).course;\r\n+        }\r\n+    }\r\n+\r\n+    @Id @ManyToOne\r\n+    Student student;\r\n+\r\n+    @Id @ManyToOne\r\n+    Course course;\r\n+}\r"},{"sha":"3731c68b82df366dbf4fe3d027e17fe0708cf0e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Course.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Course.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Course.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Course.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -0,0 +1,37 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity.entityasidentity2;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"EAI2Course\")\r\n+public class Course {\r\n+\r\n+    @Id\r\n+    int id;\r\n+\r\n+    @OneToMany(mappedBy = \"course\")\r\n+    Collection<Attendance> attendances;\r\n+}\r"},{"sha":"9f9748abd6bc4a3f36f5469c15ef7ec31d89dfdb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Person.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Person.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Person.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -0,0 +1,31 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity.entityasidentity2;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"EAI2Person\")\r\n+public class Person {\r\n+\r\n+    @Id\r\n+    int id;\r\n+}\r"},{"sha":"3b19ef4774bf1b4740125606117b631394101af5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Student.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Student.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Student.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/Student.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity.entityasidentity2;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"EAI2Student\")\r\n+public class Student {\r\n+\r\n+    @Id @OneToOne\r\n+    Person person;\r\n+\r\n+    @OneToMany(mappedBy = \"student\")\r\n+    Collection<Attendance> attendances;\r\n+}\r"},{"sha":"7e3f0cfd2f8f36a403b29dafbbef985325f84669","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/TestEntityAsIdentityFields2.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/TestEntityAsIdentityFields2.java","raw_url":"https://github.com/apache/openjpa/raw/93c0bbea8feb8449956dd5af2799c4efb70cb8f5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/TestEntityAsIdentityFields2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/identity/entityasidentity2/TestEntityAsIdentityFields2.java?ref=93c0bbea8feb8449956dd5af2799c4efb70cb8f5","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.identity.entityasidentity2;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestEntityAsIdentityFields2 extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Attendance.class, Course.class, Person.class, Student.class);\r\n+    }\r\n+\r\n+    public void testEntityAsIdentityField001() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        Query query = em.createQuery(\"select p from Person p\");\r\n+        query.getResultList();\r\n+        \r\n+        em.close();\r\n+    }\r\n+}\r"}]}

