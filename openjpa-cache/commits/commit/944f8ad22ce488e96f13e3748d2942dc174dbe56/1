{"sha":"944f8ad22ce488e96f13e3748d2942dc174dbe56","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0NGY4YWQyMmNlNDg4ZTk2ZjEzZTM3NDhkMjk0MmRjMTc0ZGJlNTY=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-16T00:44:55Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-16T00:44:55Z"},"message":"Non-optimistic transactions will no longer perform a version check when committing dirty objects, unless the NonOptimisticVersionCheck compatibility property is set to true. This allows dirty instances enlisted in a non-optimistic transaction to be allowed to overwrite conflicting versions in the database.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@446799 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d884fadf92581fec38480daacc69a3a97d53d399","url":"https://api.github.com/repos/apache/openjpa/git/trees/d884fadf92581fec38480daacc69a3a97d53d399"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/944f8ad22ce488e96f13e3748d2942dc174dbe56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/944f8ad22ce488e96f13e3748d2942dc174dbe56","html_url":"https://github.com/apache/openjpa/commit/944f8ad22ce488e96f13e3748d2942dc174dbe56","comments_url":"https://api.github.com/repos/apache/openjpa/commits/944f8ad22ce488e96f13e3748d2942dc174dbe56/comments","author":null,"committer":null,"parents":[{"sha":"a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","url":"https://api.github.com/repos/apache/openjpa/commits/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9","html_url":"https://github.com/apache/openjpa/commit/a7cfbfc4c92e7e0a59d74c2c413467377660fbc9"}],"stats":{"total":127,"additions":93,"deletions":34},"files":[{"sha":"d0e796191507474b4d60613aae791edab3bf1134","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","raw_url":"https://github.com/apache/openjpa/raw/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/AbstractUpdateManager.java?ref=944f8ad22ce488e96f13e3748d2942dc174dbe56","patch":"@@ -35,6 +35,7 @@\n import org.apache.openjpa.kernel.PCState;\n import org.apache.openjpa.lib.conf.Configurable;\n import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.OptimisticException;\n \n@@ -139,25 +140,18 @@ private Collection populateRowManager(OpenJPAStateManager sm,\n         RowManager rowMgr, JDBCStore store, Collection exceps,\n         Collection customs) {\n         try {\n+            BitSet dirty;\n+\n             if (sm.getPCState() == PCState.PNEW && !sm.isFlushed()) {\n                 insert(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n                     customs);\n             } else if (sm.getPCState() == PCState.PNEWFLUSHEDDELETED\n                 || sm.getPCState() == PCState.PDELETED) {\n                 delete(sm, (ClassMapping) sm.getMetaData(), rowMgr, store,\n                     customs);\n-            } else if ((sm.getPCState() == PCState.PDIRTY && (!sm.isFlushed() || sm\n-                .isFlushedDirty()))\n-                || (sm.getPCState() == PCState.PNEW && sm.isFlushedDirty())) {\n-                BitSet dirty = sm.getDirty();\n-                if (sm.isFlushed()) {\n-                    dirty = (BitSet) dirty.clone();\n-                    dirty.andNot(sm.getFlushed());\n-                }\n-\n-                if (dirty.length() > 0)\n-                    update(sm, dirty, (ClassMapping) sm.getMetaData(), rowMgr,\n-                        store, customs);\n+            } else if ((dirty = ImplHelper.getUpdateFields(sm)) != null) {\n+                update(sm, dirty, (ClassMapping) sm.getMetaData(), rowMgr,\n+                    store, customs);\n             } else if (sm.isVersionUpdateRequired()) {\n                 updateIndicators(sm, (ClassMapping) sm.getMetaData(), rowMgr,\n                     store, customs, true);"},{"sha":"d3cb0022ca7c864c9ff9682321ae32d887116c89","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=944f8ad22ce488e96f13e3748d2942dc174dbe56","patch":"@@ -138,7 +138,7 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n \n         // set where and update conditions on row\n         for (int i = 0; i < cols.length; i++) {\n-            if (curVersion != null)\n+            if (curVersion != null && sm.isVersionCheckRequired())\n                 row.whereObject(cols[i], curVersion);\n             if (vers.getColumnIO().isUpdatable(i, nextVersion == null))\n                 row.setObject(cols[i], nextVersion);"},{"sha":"0e2b4a5986fc29b2bd5fba61a9fc2751d7830303","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StateComparisonVersionStrategy.java?ref=944f8ad22ce488e96f13e3748d2942dc174dbe56","patch":"@@ -101,28 +101,30 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         // db values match our previous image\n         FieldMapping[] fields = (FieldMapping[]) sm.getMetaData().getFields();\n         Row row;\n-        for (int i = 0, max = loaded.length(); i < max; i++) {\n-            if (!loaded.get(i))\n-                continue;\n-\n-            // update our next state image with the new field value\n-            if (sm.getDirty().get(i) && !sm.getFlushed().get(i))\n-                nextState[i] = sm.fetch(fields[i].getIndex());\n+        if (sm.isVersionCheckRequired()) {\n+            for (int i = 0, max = loaded.length(); i < max; i++) {\n+                if (!loaded.get(i))\n+                    continue;\n \n-            // fetch the row for this field; if no row exists, then we can't\n-            // add one because we have no updates to perform; that means we\n-            // won't detect OL exceptions when another transaction changes\n-            // fields that aren't in any of the same tables as fields that\n-            // this transaction changed\n-            row = rm.getRow(fields[i].getTable(), Row.ACTION_UPDATE,\n-                sm, false);\n-            if (row == null)\n-                continue;\n+                // update our next state image with the new field value\n+                if (sm.getDirty().get(i) && !sm.getFlushed().get(i))\n+                    nextState[i] = sm.fetch(fields[i].getIndex());\n+\n+                // fetch the row for this field; if no row exists, then we can't\n+                // add one because we have no updates to perform; that means we\n+                // won't detect OL exceptions when another transaction changes\n+                // fields that aren't in any of the same tables as fields that\n+                // this transaction changed\n+                row = rm.getRow(fields[i].getTable(), Row.ACTION_UPDATE,\n+                    sm, false);\n+                if (row == null)\n+                    continue;\n \n-            // set WHERE criteria matching the previous state image so the\n-            // update will fail if any changes have been made by another trans\n-            fields[i].where(sm, store, rm, state[i]);\n-            row.setFailedObject(sm.getManagedInstance());\n+                // set WHERE criteria matching the previous state image so the\n+                // update will fail for any changes made by another transaction\n+                fields[i].where(sm, store, rm, state[i]);\n+                row.setFailedObject(sm.getManagedInstance());\n+            }\n         }\n         sm.setNextVersion(nextState);\n     }"},{"sha":"8479b87dbedf8ce8c289be8ee576054c12dd7020","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=944f8ad22ce488e96f13e3748d2942dc174dbe56","patch":"@@ -26,6 +26,7 @@\n     private boolean _copyIds = false;\n     private boolean _closeOnCommit = true;\n     private boolean _quotedNumbers = false;\n+    private boolean _nonOptimisticVersionCheck = false;\n \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -136,4 +137,24 @@ public boolean getCloseOnManagedCommit() {\n     public void setCloseOnManagedCommit(boolean close) {\n         _closeOnCommit = close;\n \t}\t\n+\n+    /** \n+     * Whether or not to perform a version check on instances being updated\n+     * in a datastore transaction. Version of OpenJPA prior to 4.1 always\n+     * forced a version check.\n+     */\n+    public void setNonOptimisticVersionCheck\n+        (boolean nonOptimisticVersionCheck) {\n+        _nonOptimisticVersionCheck = nonOptimisticVersionCheck;\n+    }\n+\n+    /** \n+     * Whether or not to perform a version check on instances being updated\n+     * in a datastore transaction. Version of OpenJPA prior to 4.1 always\n+     * forced a version check.\n+     */\n+    public boolean getNonOptimisticVersionCheck() {\n+        return _nonOptimisticVersionCheck;\n+    }\n+\n }"},{"sha":"5d2b6211a61897e3d4dd7804b07a2e7621caca8d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=944f8ad22ce488e96f13e3748d2942dc174dbe56","patch":"@@ -38,6 +38,7 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.ApplicationIds;\n import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.ObjectNotFoundException;\n@@ -2926,7 +2927,23 @@ private boolean syncVersion(Object sdata) {\n      * Returns whether this instance needs a version check.\n      */\n     public boolean isVersionCheckRequired() {\n-        return (_flags & FLAG_VERSION_CHECK) > 0;\n+\n+        // explicit flag for version check\n+        if ((_flags & FLAG_VERSION_CHECK) > 0)\n+            return true;\n+\n+        // need to check version if we have any dirty fields, unless we\n+        // are in a datastore transaction\n+        if (ImplHelper.getUpdateFields(this) != null) {\n+            if (_broker.getOptimistic()) {\n+                return true;\n+            } else {\n+                return _broker.getConfiguration().\n+                    getCompatibilityInstance().getNonOptimisticVersionCheck();\n+            }\n+        }\n+\n+        return false;\n     }\n \n     /**"},{"sha":"caf6814c039d49442e48f44e1768392eb94b4f95","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/944f8ad22ce488e96f13e3748d2942dc174dbe56/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=944f8ad22ce488e96f13e3748d2942dc174dbe56","patch":"@@ -17,6 +17,7 @@\n \n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.BitSet;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n@@ -166,6 +167,30 @@ private static Object generateValue(StoreContext ctx,\n         }\n     }\n \n+    /** \n+     * Returns the fields of the state that require an update. \n+     *  \n+     * @param  sm  the state to check\n+     * @return the BitSet of fields that need update, or null if none\n+     */\n+    public static BitSet getUpdateFields(OpenJPAStateManager sm) {\n+\n+        if ((sm.getPCState() == PCState.PDIRTY\n+            && (!sm.isFlushed() || sm.isFlushedDirty()))\n+            || (sm.getPCState() == PCState.PNEW && sm.isFlushedDirty())) {\n+            BitSet dirty = sm.getDirty();\n+            if (sm.isFlushed()) {\n+                dirty = (BitSet) dirty.clone();\n+                dirty.andNot(sm.getFlushed());\n+            }\n+\n+            if (dirty.length() > 0)\n+                return dirty;\n+        }\n+\n+        return null;\n+    }\n+\n     /**\n      * Close the given resource. The resource can be an extent iterator,\n      * query result, large result set relation, or any closeable OpenJPA"}]}

