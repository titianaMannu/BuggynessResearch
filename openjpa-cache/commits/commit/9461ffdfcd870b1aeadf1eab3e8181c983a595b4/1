{"sha":"9461ffdfcd870b1aeadf1eab3e8181c983a595b4","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0NjFmZmRmY2Q4NzBiMWFlYWRmMWVhYjNlODE4MWM5ODNhNTk1YjQ=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2018-10-31T19:51:31Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2018-10-31T19:51:31Z"},"message":"OPENJPA-2775 OPENJPA-2555 fraction of seconds in MySQL\n\nThis is a first fix for supporting fractions of a second in MySQL.","tree":{"sha":"c84d1a3ac1c48da9932da77836b76432b0452f7b","url":"https://api.github.com/repos/apache/openjpa/git/trees/c84d1a3ac1c48da9932da77836b76432b0452f7b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9461ffdfcd870b1aeadf1eab3e8181c983a595b4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9461ffdfcd870b1aeadf1eab3e8181c983a595b4","html_url":"https://github.com/apache/openjpa/commit/9461ffdfcd870b1aeadf1eab3e8181c983a595b4","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"165279436c3a0c1322057a994e4d835136c0963b","url":"https://api.github.com/repos/apache/openjpa/commits/165279436c3a0c1322057a994e4d835136c0963b","html_url":"https://github.com/apache/openjpa/commit/165279436c3a0c1322057a994e4d835136c0963b"}],"stats":{"total":106,"additions":79,"deletions":27},"files":[{"sha":"a56118075b79e1fd3a3682c1f893b63b39fdd9a2","filename":"openjpa-examples/jest/src/main/resources/META-INF/persistence.xml","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-examples/jest/src/main/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-examples/jest/src/main/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-examples/jest/src/main/resources/META-INF/persistence.xml?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -21,8 +21,7 @@\n     version=\"1.0\">\n \n     <persistence-unit name=\"jestdemo\">\n-\n-    \t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n \n         <class>demo.Movie</class>\n         <class>demo.Actor</class>"},{"sha":"454e4a167d35de711d81809b098f90f38c3aead3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingInfo.java?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -582,17 +582,17 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n             getMappingDefaults().defaultMissingInfo();\n         if ((!given.isEmpty() || (!adapt && !fill))\n             && given.size() != tmplates.length) {\n-        \t// also consider when this info has columns from multiple tables\n-        \tgiven = getColumns(table.getIdentifier());\n-        \tif ((!adapt && !fill) && given.size() != tmplates.length) {\n-        \t\t// try default table\n-        \t\tgiven = getColumns(\"\");\n+            // also consider when this info has columns from multiple tables\n+            given = getColumns(table.getIdentifier());\n+            if ((!adapt && !fill) && given.size() != tmplates.length) {\n+                // try default table\n+                given = getColumns(\"\");\n                 if ((!adapt && !fill) && given.size() != tmplates.length) {\n                     throw new MetaDataException(_loc.get(prefix + \"-num-cols\",\n                             context, String.valueOf(tmplates.length),\n                             String.valueOf(given.size())));\n-            \t}\n-        \t}\n+                }\n+            }\n         }\n \n         Column[] cols = new Column[tmplates.length];\n@@ -607,12 +607,6 @@ public Table createTable(MetaDataContext context, TableDefaults def,\n         return cols;\n     }\n \n-    boolean canMerge(List<Column> given, Column[] templates, boolean adapt,\n-            boolean fill) {\n-    \treturn !((!given.isEmpty() || (!adapt && !fill))\n-    \t\t\t&& given.size() != templates.length);\n-    }\n-\n     /**\n      * Set the proper internal column I/O metadata for the given column's flags.\n      */"},{"sha":"233e184120103040b615f8d47f2cef60928b3830","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":49,"deletions":4,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -428,6 +428,24 @@\n     protected final Set<String> systemSchemaSet = new HashSet<>();\n     protected final Set<String> systemTableSet = new HashSet<>();\n     protected final Set<String> fixedSizeTypeNameSet = new HashSet<>();\n+\n+    /**\n+     * set of types that only accept a single precision...\n+     */\n+    protected final Set<String> fractionalTypeNameSet = new HashSet<>();\n+\n+    /**\n+     * Default amount of digits for fractional Types.\n+     * This is not supported/required by every database.\n+     *\n+     * This value is only being used if no explicit {@code @Column(scale=n)} is set.\n+     * Use {@code @Column(scale=-1)} to disable the scale\n+     * @see #fractionalTypeNameSet\n+     * @see #getFractionLength(Column, String)\n+     */\n+    protected int defaultFractionLength = 6;\n+\n+\n     protected final Set<String> typeModifierSet = new HashSet<>();\n \n     // NamingConfiguration properties\n@@ -1838,15 +1856,32 @@ public String getTypeName(int type) {\n      * subclasses.\n      */\n     protected String appendSize(Column col, String typeName) {\n-        if (fixedSizeTypeNameSet.contains(typeName.toUpperCase(Locale.ENGLISH)))\n+        String upperCaseTypeName = typeName.toUpperCase(Locale.ENGLISH);\n+        if (fixedSizeTypeNameSet.contains(upperCaseTypeName)) {\n             return typeName;\n-        if (typeName.indexOf('(') != -1)\n+        }\n+        if (typeName.indexOf('(') != -1) {\n             return typeName;\n+        }\n+\n \n         String size = null;\n-        if (col.getSize() > 0) {\n+        int colSize = col.getSize();\n+\n+        if (colSize<=0  && fractionalTypeNameSet.contains(upperCaseTypeName)){\n+            // special handling for types with fractions\n+            // Attention! We abuse @Column(scale=n)\n+            // One can disable all fractions with @Column(scale=-1)\n+            if (col.getDecimalDigits() != 0) { // the default\n+                colSize = col.getDecimalDigits() == -1 ? 0 : col.getDecimalDigits();\n+            }\n+            else {\n+                colSize = getFractionLength(col, typeName);\n+            }\n+            size = \"(\" + colSize + \")\";\n+        } else if (colSize > 0) {\n             StringBuilder buf = new StringBuilder(10);\n-            buf.append(\"(\").append(col.getSize());\n+            buf.append(\"(\").append(colSize);\n             if (col.getDecimalDigits() > 0)\n                 buf.append(\", \").append(col.getDecimalDigits());\n             buf.append(\")\");\n@@ -1856,6 +1891,16 @@ protected String appendSize(Column col, String typeName) {\n         return insertSize(typeName, size);\n     }\n \n+    /**\n+     * Only get's used if no explicit scale is used.\n+     * Attention! @{code @Column(scale=-1)} disables the scale of a column\n+     * @return the fraction length of types which have a fraction\n+     * @see #fractionalTypeNameSet\n+     */\n+    protected int getFractionLength(Column col, String typeName) {\n+        return defaultFractionLength;\n+    }\n+\n     /**\n      * Helper method that inserts a size clause for a given SQL type.\n      *"},{"sha":"580fa8be2191a4752e2f4c5468d2160f8dc6457d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -75,7 +75,7 @@\n      * combined <code>DELETE FROM foo, bar, baz</code> syntax.\n      * Defaults to false, since this may fail in the presence of InnoDB tables\n      * with foreign keys.\n-     * @see http://dev.mysql.com/doc/refman/5.0/en/delete.html\n+     * @link http://dev.mysql.com/doc/refman/5.0/en/delete.html\n      */\n     public boolean optimizeMultiTableDeletes = false;\n \n@@ -99,6 +99,8 @@ public MySQLDictionary() {\n         supportsSelectStartIndex = true;\n         supportsSelectEndIndex = true;\n \n+\n+\n         concatenateFunction = \"CONCAT({0},{1})\";\n \n         maxTableNameLength = 64;\n@@ -195,11 +197,19 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             allowsAliasInBulkClause = false;\n             supportsForeignKeysComposite = false;\n         }\n-        if (maj > 5 || (maj == 5 && min >= 1))\n+        if (maj > 5 || (maj == 5 && min >= 1)) {\n             supportsXMLColumn = true;\n+        }\n+        if (maj > 5 || (maj == 5 && min >= 7)) {\n+            // from this version on MySQL supports fractions of a second\n+            timestampTypeName = \"DATETIME{0}\";\n+            fixedSizeTypeNameSet.remove(timestampTypeName);\n+            fractionalTypeNameSet.add(timestampTypeName);\n+        }\n \n-        if (metaData.getDriverMajorVersion() < 5)\n+        if (metaData.getDriverMajorVersion() < 5) {\n             driverDeserializesBlobs = true;\n+        }\n     }\n \n     @Override"},{"sha":"5b8b6562984706132ee512a975f14367390d0eba","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/FieldSub3.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/FieldSub3.java","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/FieldSub3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/FieldSub3.java?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -22,6 +22,7 @@\n \n import javax.persistence.Access;\n import javax.persistence.AccessType;\n+import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.NamedQueries;\n import javax.persistence.NamedQuery;"},{"sha":"f7f87b761a2080f6774d499fc38d822ead068da2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/access/TestExplicitAccess.java?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -34,6 +34,8 @@\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n+// -ea -Dopenjpa.ConnectionDriverName=com.mysql.jdbc.Driver -Dopenjpa.ConnectionPassword=openjpatst\n+// -Dopenjpa.ConnectionURL=jdbc:mysql://localhost:3306/openjpatst -Dopenjpa.ConnectionUserName=openjpatst\n public class TestExplicitAccess extends SingleEMFTestCase {\n \n     @Override\n@@ -476,6 +478,7 @@ public void testEntityFieldDefaultInheritance() {\n         fs.setName(\"EntitySuperName\");\n         // Call base setter with property access\n         Date now = new Date();\n+\n         fs.setCreateDate(now);\n \n         SuperPropertyEntity spe = new SuperPropertyEntity();"},{"sha":"74f042b2ea7f0c56cdf2070d3395dac8b738110f","filename":"openjpa-slice/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -84,7 +84,7 @@\n                 <dependency>\n                     <groupId>mysql</groupId>\n                     <artifactId>mysql-connector-java</artifactId>\n-                    <version>${mysql.version}</version>\n+                    <version>${mysql.connector.version}</version>\n                     <scope>test</scope>\n                 </dependency>\n             </dependencies>"},{"sha":"c07884e579b40661e0c67b38b8d969635e08e4e1","filename":"pom.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9461ffdfcd870b1aeadf1eab3e8181c983a595b4/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=9461ffdfcd870b1aeadf1eab3e8181c983a595b4","patch":"@@ -75,7 +75,7 @@\n         <!-- common JDBC driver versions -->\n         <derby.version>10.14.2.0</derby.version>\n         <hsqldb.version>2.4.1</hsqldb.version>\n-        <mysql.version>8.0.12</mysql.version>\n+        <mysql.connector.version>8.0.13</mysql.connector.version>\n         <postgresql.version>42.2.5</postgresql.version>\n         <!-- other common versions -->\n         <slf4j.version>1.7.23</slf4j.version>\n@@ -532,7 +532,7 @@\n                 <dependency>\n                     <groupId>mysql</groupId>\n                     <artifactId>mysql-connector-java</artifactId>\n-                    <version>${mysql.version}</version>\n+                    <version>${mysql.connector.version}</version>\n                     <scope>test</scope>\n                 </dependency>\n             </dependencies>\n@@ -561,7 +561,7 @@\n                 <dependency>\n                     <groupId>mysql</groupId>\n                     <artifactId>mysql-connector-java</artifactId>\n-                    <version>${mysql.version}</version>\n+                    <version>${mysql.connector.version}</version>\n                     <scope>test</scope>\n                 </dependency>\n             </dependencies>\n@@ -1403,7 +1403,7 @@\n             <dependency>\n                 <groupId>mysql</groupId>\n                 <artifactId>mysql-connector-java</artifactId>\n-                <version>${mysql.version}</version>\n+                <version>${mysql.connector.version}</version>\n             </dependency>\n             <dependency>\n                 <groupId>org.apache.commons</groupId>"}]}

