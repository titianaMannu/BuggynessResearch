{"sha":"94969374f623a82a8d659b763b2c987d2b1c3d79","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk0OTY5Mzc0ZjYyM2E4MmE4ZDY1OWI3NjNiMmM5ODdkMmIxYzNkNzk=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-10-09T14:23:36Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2012-10-09T14:23:36Z"},"message":"OPENJPA-2234: Avoid NPE when the ManagedRuntime returns a null TransactionManager.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1396043 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9af4e221349354afd6a21d6fb1f52abc997b1754","url":"https://api.github.com/repos/apache/openjpa/git/trees/9af4e221349354afd6a21d6fb1f52abc997b1754"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/94969374f623a82a8d659b763b2c987d2b1c3d79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/94969374f623a82a8d659b763b2c987d2b1c3d79","html_url":"https://github.com/apache/openjpa/commit/94969374f623a82a8d659b763b2c987d2b1c3d79","comments_url":"https://api.github.com/repos/apache/openjpa/commits/94969374f623a82a8d659b763b2c987d2b1c3d79/comments","author":null,"committer":null,"parents":[{"sha":"4823f1748eeba31bbf81b7fde1c017470f0d3d92","url":"https://api.github.com/repos/apache/openjpa/commits/4823f1748eeba31bbf81b7fde1c017470f0d3d92","html_url":"https://github.com/apache/openjpa/commit/4823f1748eeba31bbf81b7fde1c017470f0d3d92"}],"stats":{"total":315,"additions":314,"deletions":1},"files":[{"sha":"f338b1ff2b7811e8e74cb970d017b244b3593242","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractBrokerFactory.java?ref=94969374f623a82a8d659b763b2c987d2b1c3d79","patch":"@@ -65,6 +65,7 @@\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n@@ -722,6 +723,9 @@ boolean syncWithManagedTransaction(BrokerImpl broker, boolean begin) {\n         try {\n             ManagedRuntime mr = broker.getManagedRuntime();\n             TransactionManager tm = mr.getTransactionManager();\n+            if (tm == null) {\n+                throw new InternalException(_loc.get(\"null-transactionmanager\", mr));\n+            }\n             trans = tm.getTransaction();\n             if (trans != null\n                 && (trans.getStatus() == Status.STATUS_NO_TRANSACTION"},{"sha":"3e5a1ed28f2bb75a62be33c4d79919c1047ae268","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=94969374f623a82a8d659b763b2c987d2b1c3d79","patch":"@@ -456,4 +456,4 @@ writebehind-cfg-err: Missing required WriteBehind configuration parameter \"{0}\"\n bad-lock-scope: This lock manager does not recognize lock scope \"{0}\".\n detach-none-exclusive: Configured AutoDetach option \"{0}\" is incorrect because \\\n     NONE option can not be specified with any other option other than CLOSE. \n-\n+null-transactionmanager: Received a null javax.transaction.TransactionManager from the openjpa.ManagedRuntime \"{0}\"."},{"sha":"378c4e96bcf1e759909c2030884d98a62a0dbeff","filename":"openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java","status":"added","additions":309,"deletions":0,"changes":309,"blob_url":"https://github.com/apache/openjpa/blob/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/94969374f623a82a8d659b763b2c987d2b1c3d79/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/test/java/org/apache/openjpa/ee/TestNullTransactionManagerFromRuntime.java?ref=94969374f623a82a8d659b763b2c987d2b1c3d79","patch":"@@ -0,0 +1,309 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.ee;\n+\n+import java.util.BitSet;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import javax.transaction.TransactionManager;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.kernel.BrokerImpl;\n+import org.apache.openjpa.kernel.DelegatingStoreManager;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.FetchConfigurationImpl;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.kernel.StoreQuery;\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+\n+public class TestNullTransactionManagerFromRuntime extends TestCase {\n+    public void test() {\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl();\n+        conf.setMetaDataFactory(\"org.apache.openjpa.meta.NoneMetaDataFactory\");\n+        conf.setManagedRuntime(new ManagedRuntimeNullTransactionManager());\n+        MangagedRuntimeTestBrokerFactory fact = new MangagedRuntimeTestBrokerFactory(conf);\n+        BrokerImpl b = new BrokerImpl();\n+        try {\n+            b.initialize(fact, new ManagedRuntimeNoopDelegatingStoreManager(null), true, 0, false);\n+            fail(\"Calling syncWithManagedTransaction should have thrown an exception.\");\n+        } catch (RuntimeException re) {\n+            // expected\n+        }\n+    }\n+\n+    class ManagedRuntimeNullTransactionManager extends AbstractManagedRuntime {\n+        @Override\n+        public Throwable getRollbackCause() throws Exception {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public TransactionManager getTransactionManager() throws Exception {\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public void setRollbackOnly(Throwable cause) throws Exception {\n+\n+        }\n+    }\n+\n+    class MangagedRuntimeTestBrokerFactory extends AbstractBrokerFactory {\n+        public MangagedRuntimeTestBrokerFactory(OpenJPAConfiguration conf) {\n+            super(conf);\n+        }\n+\n+        @Override\n+        protected StoreManager newStoreManager() {\n+\n+            return null;\n+        }\n+    }\n+\n+    class ManagedRuntimeNoopDelegatingStoreManager extends DelegatingStoreManager {\n+        public ManagedRuntimeNoopDelegatingStoreManager(StoreManager store) {\n+            super(store);\n+        }\n+\n+        @Override\n+        public StoreManager getDelegate() {\n+\n+            return super.getDelegate();\n+        }\n+\n+        @Override\n+        public StoreManager getInnermostDelegate() {\n+\n+            return super.getInnermostDelegate();\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+\n+            return super.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object other) {\n+\n+            return super.equals(other);\n+        }\n+\n+        @Override\n+        public void setContext(StoreContext ctx) {\n+        }\n+\n+        @Override\n+        public void beginOptimistic() {\n+\n+            super.beginOptimistic();\n+        }\n+\n+        @Override\n+        public void rollbackOptimistic() {\n+\n+            super.rollbackOptimistic();\n+        }\n+\n+        @Override\n+        public void begin() {\n+\n+            super.begin();\n+        }\n+\n+        @Override\n+        public void commit() {\n+\n+            super.commit();\n+        }\n+\n+        @Override\n+        public void rollback() {\n+\n+            super.rollback();\n+        }\n+\n+        @Override\n+        public boolean exists(OpenJPAStateManager sm, Object context) {\n+\n+            return super.exists(sm, context);\n+        }\n+\n+        @Override\n+        public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n+\n+            return super.syncVersion(sm, context);\n+        }\n+\n+        @Override\n+        public boolean initialize(OpenJPAStateManager sm, PCState state, FetchConfiguration fetch, Object context) {\n+\n+            return super.initialize(sm, state, fetch, context);\n+        }\n+\n+        @Override\n+        public boolean load(OpenJPAStateManager sm, BitSet fields, FetchConfiguration fetch, int lockLevel,\n+            Object context) {\n+\n+            return super.load(sm, fields, fetch, lockLevel, context);\n+        }\n+\n+        @Override\n+        public Collection<Object> loadAll(Collection<OpenJPAStateManager> sms, PCState state, int load,\n+            FetchConfiguration fetch, Object context) {\n+\n+            return super.loadAll(sms, state, load, fetch, context);\n+        }\n+\n+        @Override\n+        public void beforeStateChange(OpenJPAStateManager sm, PCState fromState, PCState toState) {\n+\n+            super.beforeStateChange(sm, fromState, toState);\n+        }\n+\n+        @Override\n+        public Collection<Exception> flush(Collection<OpenJPAStateManager> sms) {\n+\n+            return super.flush(sms);\n+        }\n+\n+        @Override\n+        public boolean assignObjectId(OpenJPAStateManager sm, boolean preFlush) {\n+\n+            return super.assignObjectId(sm, preFlush);\n+        }\n+\n+        @Override\n+        public boolean assignField(OpenJPAStateManager sm, int field, boolean preFlush) {\n+\n+            return super.assignField(sm, field, preFlush);\n+        }\n+\n+        @Override\n+        public Class<?> getManagedType(Object oid) {\n+\n+            return super.getManagedType(oid);\n+        }\n+\n+        @Override\n+        public Class<?> getDataStoreIdType(ClassMetaData meta) {\n+\n+            return super.getDataStoreIdType(meta);\n+        }\n+\n+        @Override\n+        public Object copyDataStoreId(Object oid, ClassMetaData meta) {\n+\n+            return super.copyDataStoreId(oid, meta);\n+        }\n+\n+        @Override\n+        public Object newDataStoreId(Object oidVal, ClassMetaData meta) {\n+\n+            return super.newDataStoreId(oidVal, meta);\n+        }\n+\n+        @Override\n+        public Object getClientConnection() {\n+\n+            return super.getClientConnection();\n+        }\n+\n+        @Override\n+        public void retainConnection() {\n+\n+            super.retainConnection();\n+        }\n+\n+        @Override\n+        public void releaseConnection() {\n+\n+            super.releaseConnection();\n+        }\n+\n+        @Override\n+        public ResultObjectProvider executeExtent(ClassMetaData meta, boolean subclasses, FetchConfiguration fetch) {\n+\n+            return super.executeExtent(meta, subclasses, fetch);\n+        }\n+\n+        @Override\n+        public StoreQuery newQuery(String language) {\n+\n+            return super.newQuery(language);\n+        }\n+\n+        @Override\n+        public FetchConfiguration newFetchConfiguration() {\n+\n+            return new FetchConfigurationImpl();\n+        }\n+\n+        @Override\n+        public void close() {\n+\n+            super.close();\n+        }\n+\n+        @Override\n+        public int compareVersion(OpenJPAStateManager state, Object v1, Object v2) {\n+\n+            return super.compareVersion(state, v1, v2);\n+        }\n+\n+        @Override\n+        public Seq getDataStoreIdSequence(ClassMetaData forClass) {\n+\n+            return super.getDataStoreIdSequence(forClass);\n+        }\n+\n+        @Override\n+        public Seq getValueSequence(FieldMetaData fmd) {\n+\n+            return super.getValueSequence(fmd);\n+        }\n+\n+        @Override\n+        public boolean cancelAll() {\n+\n+            return super.cancelAll();\n+        }\n+\n+        @Override\n+        public boolean isCached(List<Object> oids, BitSet edata) {\n+\n+            return super.isCached(oids, edata);\n+        }\n+\n+    }\n+\n+}"}]}

