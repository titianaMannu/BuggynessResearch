{"sha":"961e957be0797037c474bd60865bc443f5b5fc22","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2MWU5NTdiZTA3OTcwMzdjNDc0YmQ2MDg2NWJjNDQzZjViNWZjMjI=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-07-07T21:21:39Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-07-07T21:21:39Z"},"message":"OPENJPA-1692: Comment out failing case in TestClearableScheduler while this change is backed out.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@961510 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c07d7cfbf9c1257cf50309b0dd639a0706e4784","url":"https://api.github.com/repos/apache/openjpa/git/trees/7c07d7cfbf9c1257cf50309b0dd639a0706e4784"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/961e957be0797037c474bd60865bc443f5b5fc22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/961e957be0797037c474bd60865bc443f5b5fc22","html_url":"https://github.com/apache/openjpa/commit/961e957be0797037c474bd60865bc443f5b5fc22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/961e957be0797037c474bd60865bc443f5b5fc22/comments","author":null,"committer":null,"parents":[{"sha":"90a54ac7e77b3cf4a190ea3590d8e92a3f61672c","url":"https://api.github.com/repos/apache/openjpa/commits/90a54ac7e77b3cf4a190ea3590d8e92a3f61672c","html_url":"https://github.com/apache/openjpa/commit/90a54ac7e77b3cf4a190ea3590d8e92a3f61672c"}],"stats":{"total":52,"additions":27,"deletions":25},"files":[{"sha":"d9ddcf77afeb8dc4a1ce4bc2acaebfb38e4385d6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","status":"modified","additions":27,"deletions":25,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/961e957be0797037c474bd60865bc443f5b5fc22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","raw_url":"https://github.com/apache/openjpa/raw/961e957be0797037c474bd60865bc443f5b5fc22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/datacache/TestClearableScheduler.java?ref=961e957be0797037c474bd60865bc443f5b5fc22","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.datacache.DataCacheManager;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n import org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction;\n+import org.apache.openjpa.persistence.test.AllowFailure;\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n \n public class TestClearableScheduler extends SingleEMFTestCase {\n@@ -91,31 +92,32 @@ public void testBasic() throws Exception {\n         assertEquals(2,cache2.getClearCount());\n     }\n     \n-    public void testMultithreadedInitialization() throws Exception {\n-        final OpenJPAConfiguration conf =  emf.getConfiguration();\n-        final List<DataCacheManager> dcms = new Vector<DataCacheManager>();\n-        Runnable r = new Runnable(){\n-            public void run() {\n-                dcms.add(conf.getDataCacheManagerInstance());\n-            }\n-        };\n-        List<Thread> workers = new ArrayList<Thread>();\n-        for(int i = 0;i<20;i++){\n-            workers.add(new Thread(r));\n-        }\n-        for(Thread t : workers){\n-            t.start();\n-        }\n-        for(Thread t : workers){\n-            t.join();\n-        }\n-        DataCacheManager prev = dcms.get(0);\n-        for(DataCacheManager dcm : dcms){\n-            assertTrue(prev == dcm);\n-            prev = dcm;\n-        }\n-\n-    }\n+// Comment this test out while investigating OPENJPA-1692\n+//    public void testMultithreadedInitialization() throws Exception {\n+//        final OpenJPAConfiguration conf =  emf.getConfiguration();\n+//        final List<DataCacheManager> dcms = new Vector<DataCacheManager>();\n+//        Runnable r = new Runnable(){\n+//            public void run() {\n+//                dcms.add(conf.getDataCacheManagerInstance());\n+//            }\n+//        };\n+//        List<Thread> workers = new ArrayList<Thread>();\n+//        for(int i = 0;i<20;i++){\n+//            workers.add(new Thread(r));\n+//        }\n+//        for(Thread t : workers){\n+//            t.start();\n+//        }\n+//        for(Thread t : workers){\n+//            t.join();\n+//        }\n+//        DataCacheManager prev = dcms.get(0);\n+//        for(DataCacheManager dcm : dcms){\n+//            assertTrue(prev == dcm);\n+//            prev = dcm;\n+//        }\n+//\n+//    }\n \n     /**\n      * Pass in 4 out of 5 tokens."}]}

