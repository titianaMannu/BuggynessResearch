{"sha":"9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2MjNjNWM2ZjgxYjk2ZTFkM2YyNTg3ZmQ0Njk3YTkzYWVmYTNhNDU=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-03T23:15:08Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-11-03T23:15:08Z"},"message":"Support many-one and one-one relations as primary key fields.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@471045 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97ed712fddb7fd6db9a190e0cb670a7ef6600956","url":"https://api.github.com/repos/apache/openjpa/git/trees/97ed712fddb7fd6db9a190e0cb670a7ef6600956"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","html_url":"https://github.com/apache/openjpa/commit/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/comments","author":null,"committer":null,"parents":[{"sha":"b4077bd6a64f73fd28c210f265d5ef8b089199dd","url":"https://api.github.com/repos/apache/openjpa/commits/b4077bd6a64f73fd28c210f265d5ef8b089199dd","html_url":"https://github.com/apache/openjpa/commit/b4077bd6a64f73fd28c210f265d5ef8b089199dd"}],"stats":{"total":1778,"additions":1593,"deletions":185},"files":[{"sha":"da54afb19ca38521fe8851b977143ba27e8e95be","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -114,16 +114,16 @@ public Object toDataStoreValue(Select sel, ExpContext ctx, ExpState state,\n         while (!mapping.isPrimaryKeyObjectId(false))\n             mapping = mapping.getJoinablePCSuperclassMapping();\n \n-        // relies on single-column primary key field mappings\n         Column[] cols = mapping.getPrimaryKeyColumns();\n-        Object[] ordered = new Object[cols.length];\n+        Object[] vals = new Object[cols.length];\n         Joinable join;\n         for (int i = 0; i < cols.length; i++) {\n             join = mapping.assertJoinable(cols[i]);\n-            ordered[i] = pks[mapping.getField(join.getFieldIndex()).\n+            vals[i] = pks[mapping.getField(join.getFieldIndex()).\n                 getPrimaryKeyIndex()];\n+            vals[i] = join.getJoinValue(vals[i], cols[i], ctx.store);\n         }\n-        return ordered;\n+        return vals;\n     }\n \n     public void select(Select sel, ExpContext ctx, ExpState state, "},{"sha":"e32136fb88d974c594daa3f86b668361de338fb9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ClassMapping.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -180,7 +180,7 @@ private Object getObjectId(ClassMapping cls, JDBCStore store, Result res,\n             if (vals[pkIdx] == null) {\n                 res.startDataRequest(fm);\n                 vals[pkIdx] = join.getPrimaryKeyValue(res, join.getColumns(),\n-                    fk, joins);\n+                    fk, store, joins);\n                 res.endDataRequest();\n                 if (vals[pkIdx] == null)\n                     return null;"},{"sha":"660b58f66fa75a3dced03a7e7b5885604b544160","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/DelegatingJoinable.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -88,10 +88,10 @@ public int getFieldIndex() {\n         return _join.getFieldIndex();\n     }\n \n-    public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n-        Joins joins)\n+    public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk, \n+        JDBCStore store, Joins joins)\n         throws SQLException {\n-        return _join.getPrimaryKeyValue(res, cols, fk, joins);\n+        return _join.getPrimaryKeyValue(res, cols, fk, store, joins);\n     }\n \n     public Column[] getColumns() {"},{"sha":"ef2f8b39e5a403f98fe677debb0a03cb3f030de8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Joinable.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -52,7 +52,7 @@\n      * {@link ForeignKey#getColumn}.\n      */\n     public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n-        Joins joins)\n+        JDBCStore store, Joins joins)\n         throws SQLException;\n \n     /**"},{"sha":"296af4e89264c13c56c5facc585f620351c6cde7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingRepository.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -303,8 +303,8 @@ protected void prepareMapping(ClassMetaData meta) {\n         // define superclass fields after mapping class, so we can tell whether\n         // the class is mapped and needs to redefine abstract superclass fields\n         getStrategyInstaller().installStrategy(mapping);\n-        mapping.defineSuperclassFields(mapping.\n-            getJoinablePCSuperclassMapping() == null);\n+        mapping.defineSuperclassFields(mapping.getJoinablePCSuperclassMapping()\n+            == null);\n \n         // resolve everything that doesn't involve relations to allow relation\n         // mappings to use the others as joinables"},{"sha":"ef96a9961fcf691b3d4204449a4888d592211457","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -949,6 +949,10 @@ public byte replaceFlags() {\n             throw new InternalException();\n         }\n \n+        public Object getPCPrimaryKey(Object oid, int field) {\n+            throw new InternalException();\n+        }\n+\n         public StateManager replaceStateManager(StateManager sm) {\n             throw new InternalException();\n         }"},{"sha":"c58c873017714069584b90ac89e30bc1bb7fe8ff","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -287,7 +287,7 @@ public int getFieldIndex() {\n     }\n \n     public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n-        Joins joins)\n+        JDBCStore store, Joins joins)\n         throws SQLException {\n         Column col;\n         Object val = null;"},{"sha":"87379f0dd80267eaee4770a4faaf7aa7a210bbaf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/IdentityJoinable.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -50,7 +50,7 @@ public int getFieldIndex() {\n     }\n \n     public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n-        Joins joins)\n+        JDBCStore store, Joins joins)\n         throws SQLException {\n         Column col = cols[0];\n         if (fk != null)"},{"sha":"780e73611624dc46b64a2f63dd074003d536c936","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -287,12 +287,13 @@ public int getFieldIndex() {\n     }\n \n     public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n-        Joins joins)\n+        JDBCStore store, Joins joins)\n         throws SQLException {\n         Column col = cols[0];\n         if (fk != null)\n             col = fk.getColumn(col);\n-        return res.getObject(col, null, joins);\n+        return JavaTypes.convert(res.getObject(col, null, joins),\n+            field.getTypeCode());\n     }\n \n     public Column[] getColumns() {"},{"sha":"e80afea8a36eba93c3e2248d348c037ec0afd6b7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":109,"deletions":2,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -24,12 +24,14 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.Joinable;\n import org.apache.openjpa.jdbc.meta.MappingInfo;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n import org.apache.openjpa.jdbc.schema.ForeignKey;\n+import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -45,8 +47,12 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.util.ApplicationIds;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.UnsupportedException;\n+import serp.util.Numbers;\n \n /**\n  * Mapping for a single-valued relation to another entity.\n@@ -56,7 +62,7 @@\n  */\n public class RelationFieldStrategy\n     extends AbstractFieldStrategy\n-    implements Embeddable {\n+    implements Joinable, Embeddable {\n \n     private static final Localizer _loc = Localizer.forPackage\n         (RelationFieldStrategy.class);\n@@ -146,8 +152,19 @@ public void map(boolean adapt) {\n                 adapt);\n \n         field.setUseClassCriteria(criteria);\n-        field.mapConstraints(field.getName(), adapt);\n         field.mapPrimaryKey(adapt);\n+        PrimaryKey pk = field.getTable().getPrimaryKey();\n+        if (field.isPrimaryKey()) {\n+            Column[] cols = field.getColumns();\n+            if (pk != null && (adapt || pk.isLogical()))\n+                for (int i = 0; i < cols.length; i++)\n+                    pk.addColumn(cols[i]);\n+            for (int i = 0; i < cols.length; i++)\n+                field.getDefiningMapping().setJoinable(cols[i], this);\n+        }\n+\n+        // map constraints after pk so we don't re-index / re-unique pk col\n+        field.mapConstraints(field.getName(), adapt);\n     }\n \n     /**\n@@ -692,6 +709,96 @@ public Joins joinRelation(Joins joins, boolean forceOuter,\n             clss[0], field.getSelectSubclasses(), false, false);\n     }\n \n+    ///////////////////////////\n+    // Joinable implementation\n+    ///////////////////////////\n+\n+    public int getFieldIndex() {\n+        return field.getIndex();\n+    }\n+\n+    public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n+        JDBCStore store, Joins joins)\n+        throws SQLException {\n+        ClassMapping relmapping = field.getTypeMapping();\n+        if (relmapping.getIdentityType() == ClassMapping.ID_DATASTORE) {\n+            Column col = cols[0];\n+            if (fk != null)\n+                col = fk.getColumn(col);   \n+            long id = res.getLong(col, joins);\n+            if (field.getObjectIdFieldTypeCode() == JavaTypes.LONG)\n+                return Numbers.valueOf(id);\n+            return store.newDataStoreId(id, relmapping, field.getPolymorphic() \n+                != ValueMapping.POLY_FALSE);\n+        }\n+\n+        if (relmapping.isOpenJPAIdentity())\n+            return ((Joinable) relmapping.getPrimaryKeyFieldMappings()[0].\n+                getStrategy()).getPrimaryKeyValue(res, cols, fk, store, joins);\n+\n+        if (cols == getColumns() && fk == null)\n+            fk = field.getForeignKey();\n+        else\n+            fk = createTranslatingForeignKey(relmapping, cols, fk); \n+        return relmapping.getObjectId(store, res, fk,\n+            field.getPolymorphic() != ValueMapping.POLY_FALSE, joins);\n+    }\n+\n+    /**\n+     * Create a faux foreign key that translates between the columns to pull\n+     * the data from and our related type's primary key columns.\n+     */\n+    private ForeignKey createTranslatingForeignKey(ClassMapping relmapping,\n+        Column[] gcols, ForeignKey gfk) {\n+        ForeignKey fk = field.getForeignKey(); \n+        Column[] cols = fk.getColumns();\n+\n+        ForeignKey tfk = null;\n+        Column tcol;\n+        for (int i = 0; i < gcols.length; i++) {\n+            tcol = gcols[i];\n+            if (gfk != null)\n+                tcol = gfk.getColumn(tcol);\n+            if (tfk == null)\n+                tfk = new ForeignKey(null, tcol.getTable());\n+            tfk.join(tcol, fk.getPrimaryKeyColumn(cols[i]));\n+        }\n+        return tfk;\n+    }\n+\n+    public Object getJoinValue(Object fieldVal, Column col, JDBCStore store) {\n+        Object o = field.getForeignKey().getConstant(col);\n+        if (o != null)\n+            return o;\n+        col = field.getForeignKey().getPrimaryKeyColumn(col);\n+        if (col == null)\n+            throw new InternalException();\n+\n+        ClassMapping relmapping = field.getTypeMapping();\n+        Joinable j = field.getTypeMapping().assertJoinable(col);\n+        if (ImplHelper.isManageable(fieldVal))\n+            fieldVal = store.getContext().getObjectId(fieldVal);\n+        if (fieldVal instanceof OpenJPAId)\n+            fieldVal = ((OpenJPAId) fieldVal).getIdObject();\n+        else if (relmapping.getObjectIdType() != null\n+            && relmapping.getObjectIdType().isInstance(fieldVal)) {\n+            Object[] pks = ApplicationIds.toPKValues(fieldVal, relmapping);\n+            fieldVal = pks[relmapping.getField(j.getFieldIndex()).\n+                getPrimaryKeyIndex()];\n+        }\n+        return j.getJoinValue(fieldVal, col, store);\n+    }\n+\n+    public Object getJoinValue(OpenJPAStateManager sm, Column col,\n+        JDBCStore store) {\n+        return getJoinValue(sm.fetch(field.getIndex()), col, store);\n+    }\n+\n+    public void setAutoAssignedValue(OpenJPAStateManager sm, JDBCStore store,\n+        Column col, Object autoInc) {\n+        throw new UnsupportedException();\n+    }\n+\n     /////////////////////////////\n     // Embeddable implementation\n     /////////////////////////////"},{"sha":"1f6f337fc460e64eb83290ef77faf73bdc59f7d4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -201,7 +201,7 @@ public int getFieldIndex() {\n     }\n \n     public Object getPrimaryKeyValue(Result res, Column[] cols, ForeignKey fk,\n-        Joins joins)\n+        JDBCStore store, Joins joins)\n         throws SQLException {\n         Column col = cols[0];\n         if (fk != null)"},{"sha":"82dd2693311ef4c98da3a7a1ee92bc52a134bcc5","filename":"openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/schemas-doctype.rsrc","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/schemas-doctype.rsrc","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/schemas-doctype.rsrc","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/resources/org/apache/openjpa/jdbc/schema/schemas-doctype.rsrc?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -2,7 +2,7 @@\n \t<!ELEMENT schemas (schema)*>\n \t<!ELEMENT schema (table|sequence)*>\n \t<!ATTLIST schema name CDATA #IMPLIED>\n-\t<!ELEMENT table (column|index|pk|fk)+>\n+\t<!ELEMENT table (column|index|pk|fk|unique)+>\n \t<!ATTLIST table name CDATA #REQUIRED>\n \t<!ELEMENT column EMPTY>\n \t<!ATTLIST column name CDATA #REQUIRED> "},{"sha":"2d7495237b7687c762ffda484919e43ea51f97dc","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","status":"modified","additions":44,"deletions":29,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/ApplicationIdTool.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -312,7 +312,6 @@ public boolean run() {\n \n         // collect info on id type\n         String className = getClassName();\n-\n         String packageName = Strings.getPackageName(oidClass);\n         String packageDec = \"\";\n         if (packageName.length() > 0)\n@@ -502,13 +501,12 @@ public Set getImportPackages() {\n \n         pkgs.add(\"java.io\");\n         pkgs.add(\"java.util\");\n+        Class type;\n         for (int i = 0; i < _fields.length; i++) {\n-            if (_fields[i].getDeclaredType() != byte[].class\n-                && _fields[i].getDeclaredType() != char[].class\n-                && !_fields[i].getDeclaredType().getName().\n-                startsWith(\"java.sql.\")) {\n-                pkgs.add(Strings.getPackageName\n-                    (_fields[i].getDeclaredType()));\n+            type = _fields[i].getObjectIdFieldType();\n+            if (type != byte[].class && type != char[].class\n+                && !type.getName().startsWith(\"java.sql.\")) {\n+                pkgs.add(Strings.getPackageName(type));\n             }\n         }\n         return pkgs;\n@@ -532,13 +530,14 @@ private String getFieldDeclarations() {\n      * Return the type name to declare the given field as.\n      */\n     private String getTypeName(FieldMetaData fmd) {\n-        if (fmd.getDeclaredType() == byte[].class)\n+        Class type = fmd.getObjectIdFieldType();\n+        if (type == byte[].class)\n             return \"byte[]\";\n-        if (fmd.getDeclaredType() == char[].class)\n+        if (type == char[].class)\n             return \"char[]\";\n-        if (fmd.getDeclaredType().getName().startsWith(\"java.sql.\"))\n-            return fmd.getDeclaredType().getName();\n-        return Strings.getClassName(fmd.getDeclaredType());\n+        if (type.getName().startsWith(\"java.sql.\"))\n+            return type.getName();\n+        return Strings.getClassName(type);\n     }\n \n     /**\n@@ -626,6 +625,16 @@ private String getFromStringCode(boolean hasSuperclass) {\n         code.openParen(true).append(\"String str\").closeParen();\n         code.openBrace(2).endl();\n \n+        // if we have any Object-type fields, die immediately \n+        for (int i = 0; i < _fields.length; i++) {\n+            if (_fields[i].getObjectIdFieldType() != Object.class)\n+                continue;\n+            code.tab(2).append(\"throw new UnsupportedOperationException\").\n+                parens().append(\";\").endl();\n+            code.closeBrace(2); \n+            return code.toString();\n+        } \n+\n         if (toke != null) {\n             code.tab(2).append(toke).append(\" toke = \");\n             if (hasSuperclass) {\n@@ -677,7 +686,7 @@ private String getConversionCode(FieldMetaData field, String var) {\n             parse.append(\"this.\");\n         parse.append(field.getName()).append(\" = \");\n \n-        Class type = field.getDeclaredType();\n+        Class type = field.getObjectIdFieldType();\n         if (type == Date.class) {\n             parse.append(\"new Date\").openParen(true).\n                 append(\"Long.parseLong\").openParen(true).\n@@ -788,6 +797,7 @@ private String getEqualsCode(boolean hasSuperclass) {\n         }\n \n         String name;\n+        Class type;\n         for (int i = 0; i < _fields.length; i++) {\n             if (i == 0) {\n                 code.endl().tab(2).append(className).append(\" other = \").\n@@ -802,14 +812,15 @@ private String getEqualsCode(boolean hasSuperclass) {\n                 code.endl().tab(3).append(\"&& \");\n \n             name = _fields[i].getName();\n-            if (_fields[i].getDeclaredType().isPrimitive()) {\n+            type = _fields[i].getObjectIdFieldType();\n+            if (type.isPrimitive()) {\n                 code.openParen(false).append(name).append(\" == \").\n                     append(\"other.\").append(name).closeParen();\n-            } else if (_fields[i].getDeclaredType() == byte[].class) {\n+            } else if (type == byte[].class) {\n                 code.openParen(false).append(\"equals\").openParen(true).\n                     append(name).append(\", \").append(\"other.\").\n                     append(name).closeParen().closeParen();\n-            } else if (_fields[i].getDeclaredType() == char[].class) {\n+            } else if (type == char[].class) {\n                 // ((name == null && other.name == null)\n                 //\t|| (name != null && String.valueOf (name).\n                 //\tequals (String.valueOf (other.name))))\n@@ -908,18 +919,19 @@ private void appendHashCodeCode(FieldMetaData field, CodeFormat code) {\n         String name = field.getName();\n         if (\"rs\".equals(name))\n             name = \"this.\" + name;\n-        if (field.getDeclaredType().isPrimitive()) {\n-            if (field.getDeclaredType() == boolean.class) {\n+        Class type = field.getObjectIdFieldType();\n+        if (type.isPrimitive()) {\n+            if (type == boolean.class) {\n                 // ((name) ? 1 : 0)\n                 code.append(\"(\").openParen(false).append(name).closeParen().\n                     append(\" ? 1 : 0\").append(\")\");\n-            } else if (field.getDeclaredType() == long.class) {\n+            } else if (type == long.class) {\n                 // (int) (name ^ (name >>> 32))\n                 code.openParen(false).append(\"int\").closeParen().\n                     append(\" \").openParen(false).append(name).\n                     append(\" ^ \").openParen(false).append(name).\n                     append(\" >>> 32\").closeParen().closeParen();\n-            } else if (field.getDeclaredType() == double.class) {\n+            } else if (type == double.class) {\n                 // (int) (Double.doubleToLongBits (name)\n                 //     ^ (Double.doubleToLongBits (name) >>> 32))\n                 code.openParen(false).append(\"int\").closeParen().\n@@ -930,22 +942,22 @@ private void appendHashCodeCode(FieldMetaData field, CodeFormat code) {\n                     append(\"Double.doubleToLongBits\").openParen(true).\n                     append(name).closeParen().append(\" >>> 32\").\n                     closeParen().closeParen();\n-            } else if (field.getDeclaredType() == float.class) {\n+            } else if (type == float.class) {\n                 // Float.floatToIntBits (name)\n                 code.append(\"Float.floatToIntBits\").openParen(true).\n                     append(name).closeParen();\n-            } else if (field.getDeclaredType() == int.class)\n+            } else if (type == int.class)\n                 code.append(name);\n             else {\n                 // (int) name\n                 code.openParen(false).append(\"int\").closeParen().\n                     append(\" \").append(name);\n             }\n-        } else if (field.getDeclaredType() == byte[].class) {\n+        } else if (type == byte[].class) {\n             // hashCode (name);\n             code.append(\"hashCode\").openParen(true).append(name).\n                 closeParen();\n-        } else if (field.getDeclaredType() == char[].class) {\n+        } else if (type == char[].class) {\n             // ((name == null) ? 0 : String.valueOf (name).hashCode ())\n             code.append(\"(\").openParen(false).append(name).\n                 append(\" == null\").closeParen().append(\" ? 0 : \").\n@@ -974,6 +986,7 @@ private String getToStringCode(boolean hasSuperclass) {\n             openBrace(2).endl();\n \n         String name;\n+        Class type;\n         String appendDelimiter = \"+ \\\"\" + _token + \"\\\" + \";\n         for (int i = 0; i < _fields.length; i++) {\n             // if this is not the first field, add a +\n@@ -990,17 +1003,18 @@ private String getToStringCode(boolean hasSuperclass) {\n                 code.endl().tab(3).append(appendDelimiter);\n \n             name = _fields[i].getName();\n-            if (_fields[i].getDeclaredType() == String.class)\n+            type = _fields[i].getObjectIdFieldType();\n+            if (type == String.class)\n                 code.append(name);\n-            else if (_fields[i].getDeclaredType() == byte[].class)\n+            else if (type == byte[].class)\n                 code.append(\"toString\").openParen(true).\n                     append(name).closeParen();\n-            else if (_fields[i].getDeclaredType() == char[].class)\n+            else if (type == char[].class)\n                 code.openParen(true).openParen(true).append(name).\n                     append(\" == null\").closeParen().append(\" ? \\\"null\\\"\").\n                     append(\": String.valueOf\").openParen(true).\n                     append(name).closeParen().closeParen();\n-            else if (_fields[i].getDeclaredType() == Date.class)\n+            else if (type == Date.class)\n                 code.openParen(true).openParen(true).append(name).\n                     append(\" == null\").closeParen().append(\" ? \\\"null\\\"\").\n                     endl().tab(4).append(\": String.valueOf\").\n@@ -1448,7 +1462,8 @@ else if (fatal)\n     public static interface ObjectIdLoader\n \t{\n \t\t/**\n-\t\t * Turn on the loading of all identity classes, even if they don't exist.\n+\t\t * Turn on the loading of all identity classes, even if they don't \n+         * exist.\n \t \t */\n \t\tpublic void setLoadObjectIds ();\n \t}"},{"sha":"1a2b785364112d8a7f5771e858e3aacd9a44e65d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":249,"deletions":57,"changes":306,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -31,6 +31,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n@@ -59,7 +60,15 @@\n import org.apache.openjpa.meta.ValueStrategies;\n import org.apache.openjpa.util.GeneralException;\n import org.apache.openjpa.util.InternalException;\n+import org.apache.openjpa.util.ByteId;\n+import org.apache.openjpa.util.CharId;\n+import org.apache.openjpa.util.DateId;\n+import org.apache.openjpa.util.Id;\n+import org.apache.openjpa.util.IntId;\n+import org.apache.openjpa.util.LongId;\n import org.apache.openjpa.util.ObjectId;\n+import org.apache.openjpa.util.ShortId;\n+import org.apache.openjpa.util.StringId;\n import org.apache.openjpa.util.OpenJPAException;\n import org.apache.openjpa.util.UserException;\n import serp.bytecode.BCClass;\n@@ -131,7 +140,6 @@\n     private final ClassMetaData _meta;\n     private final Log _log;\n     private Collection _oids = null;\n-\n     private boolean _defCons = true;\n     private boolean _fail = false;\n     private File _dir = null;\n@@ -1285,14 +1293,14 @@ private void addGetVersionMethod()\n             code.constant().setNull(); // return null;\n         else {\n             // return <versionField>;\n-            Class wrapper = unwrapVersionField(versionField);\n-            if (wrapper != null) {\n+            Class wrapper = toPrimitiveWrapper(versionField);\n+            if (wrapper != versionField.getDeclaredType()) {\n                 code.anew().setType(wrapper);\n                 code.dup();\n             }\n             loadManagedInstance(code, false);\n             addGetManagedValueCode(code, versionField);\n-            if (wrapper != null)\n+            if (wrapper != versionField.getDeclaredType())\n                 code.invokespecial().setMethod(wrapper, \"<init>\", void.class,\n                     new Class[]{ versionField.getDeclaredType() });\n         }\n@@ -1313,20 +1321,26 @@ private void addGetVersionMethod()\n      * Return the version field type as a primitive wrapper, or null if\n      * the version field is not primitive.\n      */\n-    private Class unwrapVersionField(FieldMetaData fmd) {\n+    private Class toPrimitiveWrapper(FieldMetaData fmd) {\n         switch (fmd.getDeclaredTypeCode()) {\n+            case JavaTypes.BOOLEAN:\n+                return Boolean.class;\n             case JavaTypes.BYTE:\n                 return Byte.class;\n             case JavaTypes.CHAR:\n                 return Character.class;\n+            case JavaTypes.DOUBLE:\n+                return Double.class;\n+            case JavaTypes.FLOAT:\n+                return Float.class;\n             case JavaTypes.INT:\n                 return Integer.class;\n-            case JavaTypes.SHORT:\n-                return Short.class;\n             case JavaTypes.LONG:\n                 return Long.class;\n+            case JavaTypes.SHORT:\n+                return Short.class;\n         }\n-        return null;\n+        return fmd.getDeclaredType();\n     }\n \n     /**\n@@ -1495,7 +1509,7 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n         else\n             code.aload().setParam(0);\n \n-        if (!_meta.isOpenJPAIdentity() && _meta.isObjectIdTypeShared()) {\n+        if (_meta.isObjectIdTypeShared()) {\n             // oid = ((ObjectId) id).getId ();\n             code.checkcast().setType(ObjectId.class);\n             code.invokevirtual().setMethod(ObjectId.class, \"getId\",\n@@ -1509,9 +1523,12 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n         code.astore().setLocal(id);\n \n         // int inherited = pcInheritedFieldCount;\n-        code.getstatic().setField(INHERIT, int.class);\n-        int inherited = code.getNextLocalsIndex();\n-        code.istore().setLocal(inherited);\n+        int inherited = 0;\n+        if (fieldManager) {\n+            code.getstatic().setField(INHERIT, int.class);\n+            inherited = code.getNextLocalsIndex();\n+            code.istore().setLocal(inherited);\n+        }\n \n         // id.<field> = fs.fetch<type>Field (<index>); or...\n         // id.<field> = pc.<field>;\n@@ -1522,8 +1539,9 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n             if (!fmds[i].isPrimaryKey())\n                 continue;\n \n-            type = fmds[i].getDeclaredType();\n             name = fmds[i].getName();\n+            type = fmds[i].getObjectIdFieldType();\n+\n             code.aload().setLocal(id);\n             if (fieldManager) {\n                 code.aload().setParam(0);\n@@ -1542,11 +1560,14 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n             } else {\n                 loadManagedInstance(code, false);\n                 addGetManagedValueCode(code, fmds[i]);\n+\n+                // get id/pk from pc instance\n+                if (fmds[i].getDeclaredTypeCode() == JavaTypes.PC)\n+                    addExtractObjectIdFieldValueCode(code, fmds[i]);\n             }\n \n             if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n-                code.putfield().setField(findDeclaredField(oidType,\n-                    name));\n+                code.putfield().setField(findDeclaredField(oidType, name));\n             else\n                 code.invokevirtual().setMethod(findDeclaredMethod\n                     (oidType, \"set\" + StringUtils.capitalize(name),\n@@ -1558,6 +1579,168 @@ private void addCopyKeyFieldsToObjectIdMethod(boolean fieldManager)\n         code.calculateMaxLocals();\n     }\n \n+    /**\n+     * Add code to extract the id of the given primary key relation field for\n+     * setting into an objectid instance.\n+     */\n+    private void addExtractObjectIdFieldValueCode(Code code, FieldMetaData pk) {\n+        // if (val != null) \n+        //  val = ((PersistenceCapable) val).pcFetchObjectId();\n+        int pc = code.getNextLocalsIndex();\n+        code.astore().setLocal(pc);\n+        code.aload().setLocal(pc);\n+        JumpInstruction ifnull1 = code.ifnull();\n+        code.aload().setLocal(pc);\n+        code.checkcast().setType(PersistenceCapable.class); \n+        code.invokeinterface().setMethod(PersistenceCapable.class,\n+            PRE + \"FetchObjectId\", Object.class, null);\n+        int oid = code.getNextLocalsIndex();\n+        code.astore().setLocal(oid);\n+        code.aload().setLocal(oid);\n+        JumpInstruction ifnull2 = code.ifnull(); \n+\n+        // for datastore / single-field identity:\n+        // if (val != null)\n+        //   val = ((OpenJPAId) val).getId();\n+        ClassMetaData pkmeta = pk.getDeclaredTypeMetaData();\n+        int pkcode = pk.getObjectIdFieldTypeCode();\n+        Class pktype = pk.getObjectIdFieldType();\n+        if (pkmeta.getIdentityType() == ClassMetaData.ID_DATASTORE \n+            && pkcode == JavaTypes.LONG) {\n+            code.aload().setLocal(oid);\n+            code.checkcast().setType(Id.class);\n+            code.invokevirtual().setMethod(Id.class, \"getId\", \n+                long.class, null);\n+        } else if (pkmeta.getIdentityType() == ClassMetaData.ID_DATASTORE) {\n+            code.aload().setLocal(oid);\n+        } else if (pkmeta.isOpenJPAIdentity()) {\n+            switch (pkcode) {\n+                case JavaTypes.BYTE_OBJ:\n+                    code.anew().setType(Byte.class);\n+                    code.dup();\n+                    // no break\n+                case JavaTypes.BYTE:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(ByteId.class);\n+                    code.invokevirtual().setMethod(ByteId.class, \"getId\",\n+                        byte.class, null);\n+                    if (pkcode == JavaTypes.BYTE_OBJ)\n+                        code.invokespecial().setMethod(Byte.class, \"<init>\",\n+                            void.class, new Class[] {byte.class});\n+                    break;\n+                case JavaTypes.CHAR_OBJ:\n+                    code.anew().setType(Character.class);\n+                    code.dup();\n+                    // no break\n+                case JavaTypes.CHAR:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(CharId.class);\n+                    code.invokevirtual().setMethod(CharId.class, \"getId\",\n+                        char.class, null);\n+                    if (pkcode == JavaTypes.CHAR_OBJ)\n+                        code.invokespecial().setMethod(Character.class, \n+                            \"<init>\", void.class, new Class[] {char.class});\n+                    break;\n+                case JavaTypes.INT_OBJ:\n+                    code.anew().setType(Integer.class);\n+                    code.dup();\n+                    // no break\n+                case JavaTypes.INT:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(IntId.class);\n+                    code.invokevirtual().setMethod(IntId.class, \"getId\",\n+                        int.class, null);\n+                    if (pkcode == JavaTypes.INT_OBJ)\n+                        code.invokespecial().setMethod(Integer.class, \"<init>\",\n+                            void.class, new Class[] {int.class});\n+                    break;\n+                case JavaTypes.LONG_OBJ:\n+                    code.anew().setType(Long.class);\n+                    code.dup();\n+                    // no break\n+                case JavaTypes.LONG:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(LongId.class);\n+                    code.invokevirtual().setMethod(LongId.class, \"getId\",\n+                        long.class, null);\n+                    if (pkcode == JavaTypes.LONG_OBJ)\n+                        code.invokespecial().setMethod(Long.class, \"<init>\",\n+                            void.class, new Class[] {long.class});\n+                    break;\n+                case JavaTypes.SHORT_OBJ:\n+                    code.anew().setType(Short.class);\n+                    code.dup();\n+                    // no break\n+                case JavaTypes.SHORT:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(ShortId.class);\n+                    code.invokevirtual().setMethod(ShortId.class, \"getId\",\n+                        short.class, null);\n+                    if (pkcode == JavaTypes.SHORT_OBJ)\n+                        code.invokespecial().setMethod(Short.class, \"<init>\", \n+                            void.class, new Class[]{short.class});\n+                    break;\n+                case JavaTypes.DATE:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(DateId.class);\n+                    code.invokevirtual().setMethod(DateId.class, \"getId\",\n+                        Date.class, null);\n+                    break;\n+                case JavaTypes.STRING:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(StringId.class);\n+                    code.invokevirtual().setMethod(StringId.class, \"getId\",\n+                        String.class, null);\n+                    break;\n+                default:\n+                    code.aload().setLocal(oid);\n+                    code.checkcast().setType(ObjectId.class);\n+                    code.invokevirtual().setMethod(ObjectId.class, \"getId\",\n+                        Object.class, null);\n+            }\n+        } else if (pkmeta.getObjectIdType() != null) {\n+            code.aload().setLocal(oid);\n+            code.checkcast().setType(pktype);\n+        } else\n+            code.aload().setLocal(oid);\n+        JumpInstruction go2 = code.go2();\n+\n+        // if (val == null)\n+        //   val = <default>;\n+        Instruction def;\n+        switch (pkcode) {\n+            case JavaTypes.BOOLEAN:\n+                def = code.constant().setValue(false);\n+                break;\n+            case JavaTypes.BYTE:\n+                def = code.constant().setValue((byte) 0);\n+                break;\n+            case JavaTypes.CHAR:\n+                def = code.constant().setValue((char) 0);\n+                break;\n+            case JavaTypes.DOUBLE:\n+                def = code.constant().setValue(0D);\n+                break;\n+            case JavaTypes.FLOAT:\n+                def = code.constant().setValue(0F);\n+                break;\n+            case JavaTypes.INT:\n+                def = code.constant().setValue(0);\n+                break;\n+            case JavaTypes.LONG:\n+                def = code.constant().setValue(0L);\n+                break;\n+            case JavaTypes.SHORT:\n+                def = code.constant().setValue((short) 0);\n+                break;\n+            default:\n+                def = code.constant().setNull();\n+        }\n+        ifnull1.setTarget(def);\n+        ifnull2.setTarget(def);\n+        go2.setTarget(code.nop());\n+    }\n+\n     /**\n      * Adds the <code>pcCopyKeyFieldsFromObjectId</code> methods\n      * to classes using application identity.\n@@ -1566,8 +1749,8 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n         throws NoSuchMethodException {\n         // public void pcCopyKeyFieldsFromObjectId (ObjectIdFieldConsumer fc,\n         //\tObject oid)\n-        String[] args = (fieldManager) ?\n-            new String[]{ OIDFCTYPE.getName(), Object.class.getName() }\n+        String[] args = (fieldManager) \n+            ?  new String[]{ OIDFCTYPE.getName(), Object.class.getName() }\n             : new String[]{ Object.class.getName() };\n         BCMethod method = _pc.declareMethod(PRE + \"CopyKeyFieldsFromObjectId\",\n             void.class.getName(), args);\n@@ -1601,14 +1784,6 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n         code.checkcast().setType(oidType);\n         code.astore().setLocal(id);\n \n-        // int inherited = pcInheritedFieldCount;\n-        int inherited = 0;\n-        if (fieldManager) {\n-            code.getstatic().setField(INHERIT, int.class);\n-            inherited = code.getNextLocalsIndex();\n-            code.istore().setLocal(inherited);\n-        }\n-\n         // fs.store<type>Field (<index>, id.<field>); or...\n         // this.<field> = id.<field>\n         // or for single field identity: id.getId ()\n@@ -1621,41 +1796,56 @@ private void addCopyKeyFieldsFromObjectIdMethod(boolean fieldManager)\n                 continue;\n \n             name = fmds[i].getName();\n-            type = fmds[i].getDeclaredType();\n-            unwrapped = unwrapSingleFieldIdentity(fmds[i]);\n-\n-            if (fieldManager) {\n-                code.aload().setParam(0);\n+            type = fmds[i].getObjectIdFieldType();\n+            if (!fieldManager \n+                && fmds[i].getDeclaredTypeCode() == JavaTypes.PC) {\n+                // sm.getPCPrimaryKey(oid, i + pcInheritedFieldCount); \n+                loadManagedInstance(code, false);\n+                code.dup(); // leave orig on stack to set value into\n+                code.getfield().setField(SM, SMTYPE);\n+                code.aload().setLocal(id);\n                 code.constant().setValue(i);\n-                code.iload().setLocal(inherited);\n+                code.getstatic().setField(INHERIT, int.class);\n                 code.iadd();\n-            } else\n-                loadManagedInstance(code, false);\n+                code.invokeinterface().setMethod(StateManager.class, \n+                    \"getPCPrimaryKey\", Object.class, \n+                    new Class[] { Object.class, int.class });\n+                code.checkcast().setType(fmds[i].getDeclaredType());\n+            } else { \n+                unwrapped = (fmds[i].getDeclaredTypeCode() == JavaTypes.PC) \n+                    ? type : unwrapSingleFieldIdentity(fmds[i]);\n+                if (fieldManager) {\n+                    code.aload().setParam(0);\n+                    code.constant().setValue(i);\n+                    code.getstatic().setField(INHERIT, int.class);\n+                    code.iadd();\n+                } else\n+                    loadManagedInstance(code, false);\n \n-            if (unwrapped != type) {\n-                code.anew().setType(type);\n-                code.dup();\n-            }\n-            code.aload().setLocal(id);\n-            if (_meta.isOpenJPAIdentity()) {\n-                if (oidType == ObjectId.class) {\n-                    code.invokevirtual().setMethod(oidType, \"getId\",\n-                        Object.class, null);\n-                    if (!fieldManager && fmds[i].getDeclaredType()\n-                        != Object.class)\n-                        code.checkcast().setType(fmds[i].getDeclaredType());\n-                } else {\n-                    code.invokevirtual().setMethod(oidType, \"getId\",\n-                        unwrapped, null);\n-                    if (unwrapped != type)\n-                        code.invokespecial().setMethod(type, \"<init>\",\n-                            void.class, new Class[]{ unwrapped });\n+                if (unwrapped != type) {\n+                    code.anew().setType(type);\n+                    code.dup();\n                 }\n-            } else if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n-                code.getfield().setField(findDeclaredField(oidType, name));\n-            else // property\n-                code.invokevirtual().setMethod(findDeclaredGetterMethod\n-                    (oidType, StringUtils.capitalize(name)));\n+                code.aload().setLocal(id);\n+                if (_meta.isOpenJPAIdentity()) {\n+                    if (oidType == ObjectId.class) {\n+                        code.invokevirtual().setMethod(oidType, \"getId\",\n+                            Object.class, null);\n+                        if (!fieldManager && type != Object.class)\n+                            code.checkcast().setType(fmds[i].getDeclaredType());\n+                    } else {\n+                        code.invokevirtual().setMethod(oidType, \"getId\", \n+                            unwrapped, null);\n+                        if (unwrapped != type)\n+                            code.invokespecial().setMethod(type, \"<init>\",\n+                                void.class, new Class[]{ unwrapped });\n+                    }\n+                } else if (_meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n+                    code.getfield().setField(findDeclaredField(oidType, name));\n+                else // property\n+                    code.invokevirtual().setMethod(findDeclaredGetterMethod\n+                        (oidType, StringUtils.capitalize(name)));\n+            }\n \n             if (fieldManager)\n                 code.invokeinterface().setMethod(getFieldConsumerMethod(type));\n@@ -1793,10 +1983,12 @@ else if (usesClsString == Boolean.FALSE)\n             loadManagedInstance(code, false);\n             FieldMetaData pk = _meta.getPrimaryKeyFields()[0];\n             addGetManagedValueCode(code, pk);\n+            if (pk.getDeclaredTypeCode() == JavaTypes.PC)\n+                addExtractObjectIdFieldValueCode(code, pk);\n             if (_meta.getObjectIdType() == ObjectId.class)\n                 args = new Class[]{ Class.class, Object.class };\n             else\n-                args = new Class[]{ Class.class, pk.getDeclaredType() };\n+                args = new Class[]{ Class.class, pk.getObjectIdFieldType() };\n         }\n \n         code.invokespecial().setMethod(oidType, \"<init>\", void.class, args);"},{"sha":"563d8da01335af808b95d0296add267d74ed2ac9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/StateManager.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -33,6 +33,13 @@\n      */\n     public Object getGenericContext();\n \n+    /**\n+     * Return the persistence-capable primary key object by extracting the \n+     * identity value of the related instance stored in the given field from \n+     * the given object id.\n+     */\n+    public Object getPCPrimaryKey(Object oid, int field);\n+\n     /**\n      * Change internal flags.\n      */"},{"sha":"5b3e13fcf73c3d735d5452998092e12d18d0a9c3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -2761,7 +2761,7 @@ else if (sm.beforeRefresh(true)) {\n             // refresh all\n             if (load != null) {\n                 Collection failed = _store.loadAll(load, null,\n-                    _store.FORCE_LOAD_REFRESH, _fc, null);\n+                    StoreManager.FORCE_LOAD_REFRESH, _fc, null);\n                 if (failed != null && !failed.isEmpty())\n                     exceps = add(exceps, newObjectNotFoundException(failed));\n "},{"sha":"6a44c041d26435540ea76d34fff505cdd35e7b48","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -323,6 +323,10 @@ public byte replaceFlags() {\n         return PersistenceCapable.MEDIATE_WRITE;\n     }\n \n+    public Object getPCPrimaryKey(Object oid, int field) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     public StateManager replaceStateManager(StateManager sm) {\n         return sm;\n     }"},{"sha":"8641422203c3ccc055eb0cc718c9414abb40cc09","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -399,6 +399,10 @@ public Object getGenericContext() {\n         return _ctx;\n     }\n \n+    public Object getPCPrimaryKey(Object oid, int field) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     public byte replaceFlags() {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"bd293f2ea1d250ed0bf0ae4174eae0366b353bfd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -66,6 +66,10 @@ public Object getGenericContext() {\n         return (_owner == null) ? null : _owner.getGenericContext();\n     }\n \n+    public Object getPCPrimaryKey(Object oid, int field) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     public byte replaceFlags() {\n         throw new UnsupportedOperationException();\n     }"},{"sha":"c7cdb89cb75af7884f58eee754e40f93e487a567","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -215,9 +215,9 @@ else if (wasPending && !_state.isPendingTransactional())\n         }\n     }\n \n-    ///////////////////////////////////\n+    //////////////////////////////////////\n     // OpenJPAStateManager implementation\n-    ///////////////////////////////////\n+    //////////////////////////////////////\n \n     public void initialize(Class cls, PCState state) {\n         // check to see if our current object id instance is the\n@@ -1304,6 +1304,22 @@ public Object fetchObjectId() {\n         }\n     }\n \n+    public Object getPCPrimaryKey(Object oid, int field) {\n+        FieldMetaData fmd = _meta.getField(field);\n+        Object pk = ApplicationIds.get(oid, fmd);\n+        if (pk == null)\n+            return null;\n+\n+        ClassMetaData relmeta = fmd.getDeclaredTypeMetaData();\n+        if (relmeta.getIdentityType() == ClassMetaData.ID_DATASTORE\n+            && fmd.getObjectIdFieldTypeCode() == JavaTypes.LONG)\n+            pk = _broker.getStoreManager().newDataStoreId(pk, relmeta);\n+        else if (relmeta.getIdentityType() == ClassMetaData.ID_APPLICATION \n+            && fmd.getObjectIdFieldType() != relmeta.getObjectIdType())\n+            pk = ApplicationIds.fromPKValues(new Object[] { pk }, relmeta);\n+        return _broker.find(pk, false, null);\n+    }\n+\n     public byte replaceFlags() {\n         // we always use load required so that we can detect when objects\n         // are touched for locking or making transactional"},{"sha":"c562c7ae25466ebac3b0f6cab0dc54313b6495a4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -45,6 +45,7 @@\n     private boolean _interface = true;\n     private boolean _pcRegistry = true;\n     private int _callback = CALLBACK_RETHROW;\n+    private boolean _unwrapped = false;\n \n     /**\n      * Whether to attempt to use the information from registered classes\n@@ -113,6 +114,22 @@ public boolean getCallbacksBeforeListeners(int type) {\n         return false;\n     }\n \n+    public boolean isDeclaredInterfacePersistent() {\n+        return _interface;\n+    }\n+\n+    public void setDeclaredInterfacePersistent(boolean pers) {\n+        _interface = pers;\n+    }\n+\n+    public boolean isDataStoreObjectIdFieldUnwrapped() {\n+        return _unwrapped;\n+    }\n+\n+    public void setDataStoreObjectIdFieldUnwrapped(boolean unwrapped) {\n+        _unwrapped = unwrapped;\n+    }\n+\n     public boolean getIgnoreNonPersistent() {\n         return _ignore;\n     }\n@@ -282,14 +299,6 @@ protected boolean isReservedFieldName(String name) {\n     protected abstract boolean isDefaultPersistent(ClassMetaData meta,\n         Member member, String name);\n \n-    public void setDeclaredInterfacePersistent(boolean pers) {\n-        _interface = pers;\n-    }\n-\n-    public boolean isDeclaredInterfacePersistent() {\n-        return _interface;\n-    }\n-\n     public Member getBackingMember(FieldMetaData fmd) {\n         if (fmd == null)\n             return null;"},{"sha":"73dacb004adc0df5e93e0b7bcd392a22adafd35b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -428,7 +428,7 @@ public Class getObjectIdType() {\n         FieldMetaData[] pks = getPrimaryKeyFields();\n         if (pks.length != 1)\n             return null;\n-        switch (pks[0].getDeclaredTypeCode()) {\n+        switch (pks[0].getObjectIdFieldTypeCode()) {\n             case JavaTypes.BYTE:\n             case JavaTypes.BYTE_OBJ:\n                 _objectId = ByteId.class;\n@@ -456,6 +456,7 @@ public Class getObjectIdType() {\n                 _objectId = DateId.class;\n                 break;\n             case JavaTypes.OID:\n+            case JavaTypes.OBJECT:\n                 _objectId = ObjectId.class;\n                 break;\n         }\n@@ -1898,29 +1899,32 @@ private void validateAppIdClassPKs(ClassMetaData meta,\n             Method m;\n             String cap;\n             int type;\n-            Class comp;\n+            Class c;\n+            ClassMetaData idmeta;\n             int access = meta.getAccessType();\n             for (int i = 0; i < fmds.length; i++) {\n                 switch (fmds[i].getDeclaredTypeCode()) {\n                     case JavaTypes.ARRAY:\n-                        comp = fmds[i].getDeclaredType().getComponentType();\n-                        if (comp == byte.class || comp == Byte.class\n-                            || comp == char.class || comp == Character.class)\n+                        c = fmds[i].getDeclaredType().getComponentType();\n+                        if (c == byte.class || c == Byte.class\n+                            || c == char.class || c == Character.class) {\n+                            c = fmds[i].getDeclaredType();\n                             break;\n+                        }\n                         // else no break\n+                    case JavaTypes.PC_UNTYPED:\n                     case JavaTypes.COLLECTION:\n                     case JavaTypes.MAP:\n-                    case JavaTypes.PC:\n-                    case JavaTypes.PC_UNTYPED:\n                     case JavaTypes.OID: // we're validating embedded fields\n                         throw new MetaDataException(_loc.get(\"bad-pk-type\",\n                             fmds[i]));\n+                    default:\n+                        c = fmds[i].getObjectIdFieldType();\n                 }\n \n                 if (access == ACCESS_FIELD) {\n                     f = findField(oid, fmds[i].getName(), runtime);\n-                    if (f == null || !f.getType().isAssignableFrom(fmds[i].\n-                        getDeclaredType()))\n+                    if (f == null || !f.getType().isAssignableFrom(c))\n                         throw new MetaDataException(_loc.get(\"invalid-id\",\n                             _type)).setFailedObject(fmds[i].getName());\n                 } else if (access == ACCESS_PROPERTY) {\n@@ -1931,8 +1935,7 @@ private void validateAppIdClassPKs(ClassMetaData meta,\n                     if (m == null && (type == JavaTypes.BOOLEAN\n                         || type == JavaTypes.BOOLEAN_OBJ))\n                         m = findMethod(oid, \"is\" + cap, null, runtime);\n-                    if (m == null || !m.getReturnType().\n-                        isAssignableFrom(fmds[i].getDeclaredType()))\n+                    if (m == null || !m.getReturnType().isAssignableFrom(c))\n                         throw new MetaDataException(_loc.get(\"invalid-id\",\n                             _type)).setFailedObject(\"get\" + cap);\n "},{"sha":"2961d38d25e0cfe8035cf120a8f1f6bf36f45280","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -505,6 +505,48 @@ public void setPrimaryKey(boolean primKey) {\n         _primKey = primKey;\n     }\n \n+    /**\n+     * For a primary key field, return the type of the corresponding object id \n+     * class field.\n+     */\n+    public int getObjectIdFieldTypeCode() {\n+        ClassMetaData relmeta = getDeclaredTypeMetaData();\n+        if (relmeta == null)\n+            return getDeclaredTypeCode();\n+        if (relmeta.getIdentityType() == ClassMetaData.ID_DATASTORE) {\n+            boolean unwrap = getRepository().getMetaDataFactory().getDefaults().\n+                isDataStoreObjectIdFieldUnwrapped();\n+            return (unwrap) ? JavaTypes.LONG : JavaTypes.OBJECT;\n+        }\n+        if (relmeta.isOpenJPAIdentity())\n+            return relmeta.getPrimaryKeyFields()[0].getObjectIdFieldTypeCode();\n+        return JavaTypes.OBJECT;\n+    }\n+\n+    /**\n+     * For a primary key field, return the type of the corresponding object id \n+     * class field.\n+     */\n+    public Class getObjectIdFieldType() {\n+        ClassMetaData relmeta = getDeclaredTypeMetaData();\n+        if (relmeta == null)\n+            return getDeclaredType();\n+        switch (relmeta.getIdentityType()) {\n+            case ClassMetaData.ID_DATASTORE:\n+                boolean unwrap = getRepository().getMetaDataFactory().\n+                    getDefaults().isDataStoreObjectIdFieldUnwrapped();\n+                return (unwrap) ? long.class : Object.class;\n+            case ClassMetaData.ID_APPLICATION:\n+                if (relmeta.isOpenJPAIdentity())\n+                    return relmeta.getPrimaryKeyFields()[0].\n+                        getObjectIdFieldType();\n+                return (relmeta.getObjectIdType() == null) ? Object.class\n+                    : relmeta.getObjectIdType();\n+            default:\n+                return Object.class;\n+        } \n+    }\n+\n     /**\n      * Whether this field holds optimistic version information.\n      */"},{"sha":"c9305964de169c8f529389fccdbeb9ace40a64e2","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -49,19 +49,26 @@\n      * event type. Defaults to false.\n      */\n     public boolean getCallbacksBeforeListeners(int type);\n-    \n-    /**\n-     * Whether to ignore members which are not persistent by default\n-     * during metadata population. Defaults to true.\n-     */\n-    public void setIgnoreNonPersistent(boolean ignore);\n-\n+   \n     /**\n      * Whether declared interfaces of a class are treated as persistent\n      * types. Defaults to true.\n      */\n     public boolean isDeclaredInterfacePersistent();\n \n+    /**\n+     * Whether the field in the object id class corresponding to a \n+     * datastore id persistence-capable primary key field is the simple \n+     * datastore id value of the related instance.  Defaults to false.\n+     */\n+    public boolean isDataStoreObjectIdFieldUnwrapped();\n+ \n+    /**\n+     * Whether to ignore members which are not persistent by default\n+     * during metadata population. Defaults to true.\n+     */\n+    public void setIgnoreNonPersistent(boolean ignore);\n+\n     /**\n      * Populate the given metadata with default settings.\n      *"},{"sha":"e9714535959fed5c5120ca19d985bc06c5f4a3b9","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","status":"modified","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataInheritanceComparator.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -16,7 +16,8 @@\n package org.apache.openjpa.meta;\n \n /**\n- * Comparator that keeps metadatas in inheritance order.\n+ * Comparator that keeps metadatas in inheritance order.  Also places relation\n+ * types used as primary keys before the primary key field owner types.\n  *\n  * @author Abe White\n  * @nojavadoc\n@@ -29,4 +30,30 @@ protected Class toClass(Object elem) {\n             return null;\n         return ((ClassMetaData) elem).getDescribedType();\n     }\n+\n+    public int compare(Object o1, Object o2) {\n+        if (o1 == o2)\n+            return 0;\n+        if (o1 == null)\n+            return -1;\n+        if (o2 == null)\n+            return 1;\n+\n+        ClassMetaData m1 = (ClassMetaData) o1;\n+        ClassMetaData m2 = (ClassMetaData) o2;\n+\n+        FieldMetaData[] fmds = m1.getDeclaredFields();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (fmds[i].isPrimaryKey() && m2.getDescribedType().\n+                isAssignableFrom(fmds[i].getDeclaredType()))\n+                return 1;\n+        }\n+        fmds = m2.getDeclaredFields();\n+        for (int i = 0; i < fmds.length; i++) {\n+            if (fmds[i].isPrimaryKey() && m1.getDescribedType().\n+                isAssignableFrom(fmds[i].getDeclaredType()))\n+                return -1;\n+        }\n+        return super.compare(o1, o2);\n+    }\n }"},{"sha":"5d63e9fb0c4cd1eb61e1b18eb79e6d3d384af387","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -483,6 +483,8 @@ private void resolve(ClassMetaData meta) {\n         // load mapping data\n         for (int i = 0; i < resolved.size(); i++)\n             loadMapping((ClassMetaData) resolved.get(i));\n+        for (int i = 0; i < resolved.size(); i++)\n+            preMapping((ClassMetaData) resolved.get(i));\n \n         // resolve mappings\n         boolean err = true;\n@@ -499,7 +501,6 @@ private void resolve(ClassMetaData meta) {\n                 re = new MetaDataException(_loc.get(\"resolve-errs\")).\n                     setNestedThrowables((Throwable[]) _errs.toArray\n                         (new Exception[_errs.size()]));\n-            ;\n             _errs.clear();\n             throw re;\n         }\n@@ -540,6 +541,13 @@ private List resolveMeta(ClassMetaData meta) {\n                     meta.getPCSuperclass()));\n         }\n \n+        // resolve relation primary key fields for mapping dependencies\n+        FieldMetaData[] fmds = meta.getDeclaredFields();\n+        for (int i = 0; i < fmds.length; i++)\n+            if (fmds[i].isPrimaryKey())\n+                getMetaData(fmds[i].getDeclaredType(), \n+                    meta.getEnvClassLoader(), false);\n+\n         // resolve metadata; if we're not in the process of resolving\n         // others, this will return the set of interrelated metas that\n         // resolved\n@@ -571,10 +579,17 @@ private void loadMapping(ClassMetaData meta) {\n                 } catch (RuntimeException re) {\n                     removeMetaData(meta);\n                     _errs.add(re);\n-                    return;\n                 }\n             }\n         }\n+    }\n+\n+    /**\n+     * Pre-mapping preparation.\n+     */\n+    private void preMapping(ClassMetaData meta) {\n+        if ((meta.getResolve() & MODE_MAPPING) != 0)\n+            return;\n \n         // prepare mappings for resolve; if not resolving mappings, then\n         // make sure any superclass fields defined in metadata are resolved"},{"sha":"bc87472673ec5b4826404e2860acad78f7b2d99b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -112,6 +112,10 @@ public boolean isDeclaredInterfacePersistent() {\n         return false;\n     }\n \n+    public boolean isDataStoreObjectIdFieldUnwrapped() {\n+        return false;\n+    }\n+\n     public void populate(ClassMetaData meta, int access) {\n     }\n "},{"sha":"ea3f1ec20aa5259a7965b41ae9d94751992f348c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ProxySetupStateManager.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -81,6 +81,10 @@ public void setProxyData(PersistenceCapable pc, ClassMetaData meta) {\n         }\n     }\n \n+    public Object getPCPrimaryKey(Object oid, int field) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n     public byte replaceFlags() {\n         throw new InternalException();\n     }"},{"sha":"becc59ea34579b1cfd657bd9fb48ee94bd51204c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","status":"modified","additions":69,"deletions":19,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ApplicationIds.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -44,6 +44,9 @@\n     /**\n      * Return the primary key values for the given object id. The values\n      * will be returned in the same order as the metadata primary key fields.\n+     * Values for PC primary key fields will be the primarky key value or\n+     * oid value of the related instance (depending on \n+     * {@link FieldMetaData#isObjectIdFieldIdOfPC}).\n      */\n     public static Object[] toPKValues(Object oid, ClassMetaData meta) {\n         if (meta == null)\n@@ -88,8 +91,7 @@\n                 if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\n                     field = oidType.getField(fmds[i].getName());\n                     pks[i] = field.get(oid);\n-                } else // property\n-                {\n+                } else { // property\n                     meth = ImplHelper.getGetter(oidType, fmds[i].getName());\n                     pks[i] = meth.invoke(oid, (Object[]) null);\n                 }\n@@ -104,6 +106,9 @@\n \n     /**\n      * Return a new object id constructed from the given primary key values.\n+     * Values for PC primary key fields should be the primarky key value or\n+     * oid value of the related instance (depending on \n+     * {@link FieldMetaData#isObjectIdFieldIdOfPC}).\n      */\n     public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n         if (meta == null || pks == null)\n@@ -112,7 +117,7 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n         boolean convert = !meta.getRepository().getConfiguration().\n             getCompatibilityInstance().getStrictIdentityValues();\n         if (meta.isOpenJPAIdentity()) {\n-            int type = meta.getPrimaryKeyFields()[0].getDeclaredTypeCode();\n+            int type = meta.getPrimaryKeyFields()[0].getObjectIdFieldTypeCode();\n             Object val = (convert) ? JavaTypes.convert(pks[0], type) : pks[0];\n             switch (type) {\n                 case JavaTypes.BYTE:\n@@ -148,6 +153,7 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 case JavaTypes.DATE:\n                     return new DateId(meta.getDescribedType(), (Date) val);\n                 case JavaTypes.OID:\n+                case JavaTypes.OBJECT:\n                     return new ObjectId(meta.getDescribedType(), val);\n                 default:\n                     throw new InternalException();\n@@ -182,9 +188,8 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                 if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\n                     field = oidType.getField(fmds[i].getName());\n                     field.set(copy, (convert) ? JavaTypes.convert(pks[i],\n-                        fmds[i].getDeclaredTypeCode()) : pks[i]);\n-                } else // property\n-                {\n+                        fmds[i].getObjectIdFieldTypeCode()) : pks[i]);\n+                } else { // property\n                     if (paramTypes == null)\n                         paramTypes = new Class[1];\n                     paramTypes[0] = fmds[i].getDeclaredType();\n@@ -193,7 +198,7 @@ public static Object fromPKValues(Object[] pks, ClassMetaData meta) {\n                     if (params == null)\n                         params = new Object[1];\n                     params[0] = (convert) ? JavaTypes.convert(pks[i],\n-                        fmds[i].getDeclaredTypeCode()) : pks[i];\n+                        fmds[i].getObjectIdFieldTypeCode()) : pks[i];\n                     meth.invoke(copy, params);\n                 }\n             }\n@@ -218,7 +223,7 @@ public static Object copy(Object oid, ClassMetaData meta) {\n             Class cls = meta.getDescribedType();\n             OpenJPAId koid = (OpenJPAId) oid;\n             FieldMetaData pk = meta.getPrimaryKeyFields()[0];\n-            switch (pk.getDeclaredTypeCode()) {\n+            switch (pk.getObjectIdFieldTypeCode()) {\n                 case JavaTypes.BYTE:\n                 case JavaTypes.BYTE_OBJ:\n                     return new ByteId(cls, ((ByteId) oid).getId(),\n@@ -248,6 +253,9 @@ public static Object copy(Object oid, ClassMetaData meta) {\n                     if (embed != null)\n                         inner = copy(inner, embed, embed.getFields());\n                     return new ObjectId(cls, inner, koid.hasSubclasses());\n+                case JavaTypes.OBJECT:\n+                    return new ObjectId(cls, koid.getIdObject(), \n+                        koid.hasSubclasses());\n                 default:\n                     throw new InternalException();\n             }\n@@ -256,10 +264,11 @@ public static Object copy(Object oid, ClassMetaData meta) {\n         // create a new pc instance of the right type, set its key fields\n         // to the original oid values, then copy its key fields to a new\n         // oid instance\n-        if (!Modifier.isAbstract(meta.getDescribedType().getModifiers())) {\n-            Class type = meta.getDescribedType();\n-            if (meta.getInterfaceImpl() != null)\n-                type = meta.getInterfaceImpl();\n+        if (!Modifier.isAbstract(meta.getDescribedType().getModifiers())\n+            && !hasPCPrimaryKeyFields(meta)) {\n+            Class type = meta.getInterfaceImpl();\n+            if (type == null)\n+                type = meta.getDescribedType();\n             PersistenceCapable pc = PCRegistry.newInstance(type, null, oid, \n                  false);\n             Object copy = pc.pcNewObjectIdInstance();\n@@ -276,6 +285,18 @@ public static Object copy(Object oid, ClassMetaData meta) {\n         return copy;\n     }\n \n+    /**\n+     * Return true if any of the given type's primary key fields are \n+     * persistent objects.\n+     */\n+    private static boolean hasPCPrimaryKeyFields(ClassMetaData meta) {\n+        FieldMetaData[] fmds = meta.getPrimaryKeyFields();\n+        for (int i = 0; i < fmds.length; i++)\n+            if (fmds[i].getDeclaredTypeCode() == JavaTypes.PC)\n+                return true;\n+        return false;\n+    }\n+\n     /**\n      * Copy the given identity object using reflection.\n      */\n@@ -284,7 +305,6 @@ private static Object copy(Object oid, ClassMetaData meta,\n         if (oid == null)\n             return null;\n \n-        // default to using reflection\n         Class oidType = oid.getClass();\n         try {\n             Object copy = oidType.newInstance();\n@@ -300,11 +320,10 @@ private static Object copy(Object oid, ClassMetaData meta,\n                 if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD) {\n                     field = oidType.getField(fmds[i].getName());\n                     field.set(copy, field.get(oid));\n-                } else // property\n-                {\n+                } else { // property\n                     if (paramTypes == null)\n                         paramTypes = new Class[1];\n-                    paramTypes[0] = fmds[i].getDeclaredType();\n+                    paramTypes[0] = fmds[i].getObjectIdFieldType();\n                     cap = StringUtils.capitalize(fmds[i].getName());\n                     meth = oidType.getMethod(\"set\" + cap, paramTypes);\n                     if (params == null)\n@@ -322,6 +341,32 @@ private static Object copy(Object oid, ClassMetaData meta,\n         }\n     }\n \n+    /**\n+     * Return the given primary key field value from the given oid.\n+     */\n+    public static Object get(Object oid, FieldMetaData fmd) {\n+        if (oid == null)\n+            return null;\n+        if (oid instanceof OpenJPAId)\n+            return ((OpenJPAId) oid).getIdObject();\n+\n+        ClassMetaData meta = fmd.getDefiningMetaData();\n+        Class oidType = oid.getClass();\n+        try {\n+            if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD)\n+                return oidType.getField(fmd.getName()).get(oid);\n+\n+            // property\n+            String cap = StringUtils.capitalize(fmd.getName());\n+            return ImplHelper.getGetter(oidType, cap).\n+                invoke(oid, (Object[]) null);\n+        } catch (OpenJPAException ke) {\n+            throw ke;\n+        } catch (Throwable t) {\n+            throw new GeneralException(t);\n+        }\n+    }\n+\n     /**\n      * Generate an application id based on the current primary key field state\n      * of the given instance.\n@@ -502,9 +547,14 @@ private void store(Object val) {\n \n         private Object retrieve(int field) {\n             Object val = _store[_index++];\n-            if (_meta != null)\n-                val = JavaTypes.convert(val, _meta.getField(field).\n-                    getDeclaredTypeCode());\n+            if (_meta != null) {\n+                FieldMetaData fmd = _meta.getField(field);\n+                if (fmd.getDeclaredTypeCode() != JavaTypes.PC)\n+                    val = JavaTypes.convert(val, fmd.getDeclaredTypeCode());\n+                else\n+                    val = JavaTypes.convert(val, JavaTypes.getTypeCode(fmd.\n+                        getObjectIdFieldType()));\n+            }\n             return val;\n \t\t}\n \t}"},{"sha":"6b853e8c16266cbfd028f5ada9e171b609359094","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class BasicEntity {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private BasicEntity rel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public BasicEntity getRel() { \r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(BasicEntity rel) { \r\n+        this.rel = rel; \r\n+    }\r\n+}\r"},{"sha":"5f020c3a9ddaa98accbe8070eea54085f85e0fef","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.DataStoreId;\r\n+\r\n+@Entity\r\n+@DataStoreId\r\n+public class DataStoreBasicEntity {\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private BasicEntity rel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public BasicEntity getRel() { \r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(BasicEntity rel) { \r\n+        this.rel = rel; \r\n+    }\r\n+}\r"},{"sha":"48097afbcea3a0c96058860a419d8167446c237f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class DataStoreManyOneIdOwner {\r\n+\r\n+    @Id\r\n+    @ManyToOne\r\n+    private DataStoreBasicEntity id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private DataStoreManyOneIdOwner selfRel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public DataStoreBasicEntity getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public void setId(DataStoreBasicEntity id) { \r\n+        this.id = id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public DataStoreManyOneIdOwner getSelfRel() { \r\n+        return selfRel; \r\n+    }\r\n+\r\n+    public void setSelfRel(DataStoreManyOneIdOwner selfRel) { \r\n+        this.selfRel = selfRel; \r\n+    }\r\n+}\r"},{"sha":"3e4e1f8758893151444a64fe216bb590dcb2b27e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -0,0 +1,73 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@IdClass(ManyOneCompoundIdOwnerId.class)\r\n+public class ManyOneCompoundIdOwner {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long longId;\r\n+\r\n+    @Id\r\n+    @ManyToOne\r\n+    private BasicEntity entityId;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private ManyOneCompoundIdOwner selfRel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getLongId() {\r\n+        return longId;\r\n+    }\r\n+\r\n+    public BasicEntity getEntityId() { \r\n+        return entityId; \r\n+    }\r\n+\r\n+    public void setEntityId(BasicEntity entityId) { \r\n+        this.entityId = entityId; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public ManyOneCompoundIdOwner getSelfRel() { \r\n+        return selfRel; \r\n+    }\r\n+\r\n+    public void setSelfRel(ManyOneCompoundIdOwner selfRel) { \r\n+        this.selfRel = selfRel; \r\n+    }\r\n+}\r"},{"sha":"e26af29d976f64b2801f5ac8c78b7fcc255240c7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -0,0 +1,81 @@\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+/**\n+ * Application identity class for: org.apache.openjpa.persistence.relations.ManyOneCompoundIdOwner\n+ *\n+ * Auto-generated by:\n+ * org.apache.openjpa.enhance.ApplicationIdTool\n+ */\n+public class ManyOneCompoundIdOwnerId implements Serializable {\n+\tstatic {\n+\t\t// register persistent class in JVM\n+\t\ttry { Class.forName(\"org.apache.openjpa.persistence.relations.ManyOneCompoundIdOwner\"); }\n+\t\tcatch(Exception e) {}\n+\t}\n+\n+\tpublic long entityId;\n+\tpublic long longId;\n+\n+\tpublic ManyOneCompoundIdOwnerId() {\n+\t}\n+\n+\tpublic ManyOneCompoundIdOwnerId(String str) {\n+\t\tfromString(str);\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn String.valueOf(entityId)\n+\t\t\t+ \"::\" + String.valueOf(longId);\n+\t}\n+\n+\tpublic int hashCode() {\n+\t\tint rs = 17;\n+\t\trs = rs * 37 + (int) (entityId ^ (entityId >>> 32));\n+\t\trs = rs * 37 + (int) (longId ^ (longId >>> 32));\n+\t\treturn rs;\n+\t}\n+\n+\tpublic boolean equals(Object obj) {\n+\t\tif(this == obj)\n+\t\t\treturn true;\n+\t\tif(obj == null || obj.getClass() != getClass())\n+\t\t\treturn false;\n+\n+\t\tManyOneCompoundIdOwnerId other = (ManyOneCompoundIdOwnerId) obj;\n+\t\treturn (entityId == other.entityId)\n+\t\t\t&& (longId == other.longId);\n+\t}\n+\n+\tprivate void fromString(String str) {\n+\t\tTokenizer toke = new Tokenizer(str);\n+\t\tstr = toke.nextToken();\n+\t\tentityId = Long.parseLong(str);\n+\t\tstr = toke.nextToken();\n+\t\tlongId = Long.parseLong(str);\n+\t}\n+\n+\tprotected static class Tokenizer {\n+\t\tprivate final String str;\n+\t\tprivate int last;\n+\n+\t\tpublic Tokenizer (String str) {\n+\t\t\tthis.str = str;\n+\t\t}\n+\n+\t\tpublic String nextToken () {\n+\t\t\tint next = str.indexOf(\"::\", last);\n+\t\t\tString part;\n+\t\t\tif(next == -1) {\n+\t\t\t\tpart = str.substring(last);\n+\t\t\t\tlast = str.length();\n+\t\t\t} else {\n+\t\t\t\tpart = str.substring(last, next);\n+\t\t\t\tlast = next + 2;\n+\t\t\t}\n+\t\t\treturn part;\n+\t\t}\n+\t}\n+}"},{"sha":"88e6620ff767214a5f7fe95c9a937477471cc4d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class ManyOneIdOwner {\r\n+\r\n+    @Id\r\n+    @ManyToOne\r\n+    private BasicEntity id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private ManyOneIdOwner selfRel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public BasicEntity getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public void setId(BasicEntity id) { \r\n+        this.id = id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public ManyOneIdOwner getSelfRel() { \r\n+        return selfRel; \r\n+    }\r\n+\r\n+    public void setSelfRel(ManyOneIdOwner selfRel) { \r\n+        this.selfRel = selfRel; \r\n+    }\r\n+}\r"},{"sha":"129488f367241e73a1589d854d4bbca5d79dc0d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","status":"added","additions":397,"deletions":0,"changes":397,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -0,0 +1,397 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.Persistence;\n+import javax.persistence.Query;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * Perform basic operations on an entity with a many-one relation as its id\n+ * field.\n+ *\n+ * @author Abe White\n+ */\n+public class TestManyOneAsId\n+    extends TestCase {\n+\n+    private EntityManagerFactory emf;\n+    private long id;\n+    private long dsid;\n+    private long cid;\n+\n+    public void setUp() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" \n+            + BasicEntity.class.getName() + \";\"\n+            + DataStoreBasicEntity.class.getName() + \";\"\n+            + ManyOneIdOwner.class.getName() + \";\"\n+            + DataStoreManyOneIdOwner.class.getName() + \";\"\n+            + ManyOneCompoundIdOwner.class.getName() + \")\");\n+        emf = Persistence.createEntityManagerFactory(\"test\", props);\n+\n+        BasicEntity id1 = new BasicEntity();\n+        id1.setName(\"id1\");\n+        BasicEntity id2 = new BasicEntity();\n+        id2.setName(\"id2\");\n+        id1.setRel(id2);\n+        id2.setRel(id1);\n+        DataStoreBasicEntity dsid1 = new DataStoreBasicEntity();\n+        dsid1.setName(\"dsid1\");\n+        dsid1.setRel(id1);\n+        DataStoreBasicEntity dsid2 = new DataStoreBasicEntity();\n+        dsid2.setName(\"dsid2\");\n+        dsid2.setRel(id2);\n+\n+        ManyOneIdOwner parent = new ManyOneIdOwner();\n+        parent.setId(id1);\n+        parent.setName(\"parent\");\n+        ManyOneIdOwner child = new ManyOneIdOwner();\n+        child.setId(id2);\n+        child.setName(\"child\");\n+        parent.setSelfRel(child);\n+        DataStoreManyOneIdOwner dsparent = new DataStoreManyOneIdOwner();\n+        dsparent.setId(dsid1);\n+        dsparent.setName(\"dsparent\");\n+        DataStoreManyOneIdOwner dschild = new DataStoreManyOneIdOwner();\n+        dschild.setId(dsid2);\n+        dschild.setName(\"dschild\");\n+        dsparent.setSelfRel(dschild);\n+        ManyOneCompoundIdOwner cparent = new ManyOneCompoundIdOwner();\n+        cparent.setEntityId(id1);\n+        cparent.setName(\"cparent\");\n+        ManyOneCompoundIdOwner cchild = new ManyOneCompoundIdOwner();\n+        cchild.setEntityId(id2);\n+        cchild.setName(\"cchild\");\n+        cparent.setSelfRel(cchild);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(id1);\n+        em.persist(id2);\n+        em.persist(dsid1);\n+        em.persist(dsid2);\n+        em.persist(parent);\n+        em.persist(child);\n+        em.persist(dsparent);\n+        em.persist(dschild);\n+        em.persist(cparent);\n+        em.persist(cchild);\n+        em.getTransaction().commit();\n+        id = id1.getId();\n+        assertRelations(em, parent);\n+        OpenJPAEntityManager oem = (OpenJPAEntityManager) em;\n+        dsid = (Long) oem.getObjectId(dsid1);\n+        assertDataStoreRelations(oem, dsparent);\n+        cid = cparent.getLongId();\n+        assertCompoundRelations(oem, cparent);\n+        em.close();\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from ManyOneIdOwner\").executeUpdate();\n+            em.createQuery(\"delete from DataStoreManyOneIdOwner\").\n+                executeUpdate();\n+            em.createQuery(\"delete from ManyOneCompoundIdOwner\").\n+                executeUpdate();\n+            em.createQuery(\"delete from BasicEntity\").executeUpdate();\n+            em.createQuery(\"delete from DataStoreBasicEntity\").executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+\n+    private void assertRelations(EntityManager em, ManyOneIdOwner parent) {\n+        assertEquals(\"parent\", parent.getName());\n+        BasicEntity id1 = parent.getId();\n+        assertNotNull(id1);\n+        assertEquals(id, id1.getId());\n+        assertEquals(\"id1\", id1.getName());\n+        assertTrue(id1 == em.find(BasicEntity.class, id));\n+        ManyOneIdOwner child = parent.getSelfRel();\n+        assertNotNull(child);\n+        assertEquals(\"child\", child.getName());\n+        BasicEntity id2 = child.getId();\n+        assertNotNull(id2);\n+        assertEquals(\"id2\", id2.getName());\n+        assertTrue(id2 == em.find(BasicEntity.class, id2.getId()));\n+        assertTrue(id2 == id1.getRel());\n+        assertTrue(id1 == id2.getRel());\n+        assertNull(child.getSelfRel());\n+    }\n+\n+    private void assertDataStoreRelations(OpenJPAEntityManager em, \n+        DataStoreManyOneIdOwner dsparent) {\n+        assertEquals(\"dsparent\", dsparent.getName());\n+        DataStoreBasicEntity dsid1 = dsparent.getId();\n+        assertNotNull(dsid1);\n+        assertEquals(dsid, ((Long) em.getObjectId(dsid1)).longValue());\n+        assertEquals(\"dsid1\", dsid1.getName());\n+        assertTrue(dsid1 == em.find(DataStoreBasicEntity.class, dsid));\n+        DataStoreManyOneIdOwner dschild = dsparent.getSelfRel();\n+        assertNotNull(dschild);\n+        assertEquals(\"dschild\", dschild.getName());\n+        DataStoreBasicEntity dsid2 = dschild.getId();\n+        assertNotNull(dsid2);\n+        assertEquals(\"dsid2\", dsid2.getName());\n+        assertTrue(dsid2 == em.find(DataStoreBasicEntity.class, \n+            em.getObjectId(dsid2)));\n+        assertNull(dschild.getSelfRel());\n+    }\n+\n+    private void assertCompoundRelations(OpenJPAEntityManager em, \n+        ManyOneCompoundIdOwner cparent) {\n+        assertEquals(\"cparent\", cparent.getName());\n+        BasicEntity id1 = cparent.getEntityId();\n+        assertNotNull(id1);\n+        assertEquals(id, id1.getId());\n+        assertEquals(\"id1\", id1.getName());\n+        assertTrue(id1 == em.find(BasicEntity.class, id));\n+        ManyOneCompoundIdOwner cchild = cparent.getSelfRel();\n+        assertNotNull(cchild);\n+        assertEquals(\"cchild\", cchild.getName());\n+        BasicEntity id2 = cchild.getEntityId();\n+        assertNotNull(id2);\n+        assertEquals(\"id2\", id2.getName());\n+        assertTrue(id2 == em.find(BasicEntity.class, id2.getId()));\n+        assertNull(cchild.getSelfRel());\n+        ManyOneCompoundIdOwnerId oid = (ManyOneCompoundIdOwnerId) \n+            em.getObjectId(cparent);\n+        assertEquals(id, oid.entityId);\n+    }\n+\n+    public void testRetrieveWithManyOneId() {\n+        EntityManager em = emf.createEntityManager();\n+        ManyOneIdOwner parent = em.find(ManyOneIdOwner.class, id);\n+        assertNotNull(parent);\n+        assertRelations(em, parent);\n+        em.close();\n+    }\n+\n+    public void testRetrieveWithDataStoreManyOneId() {\n+        EntityManager em = emf.createEntityManager();\n+        DataStoreManyOneIdOwner dsparent = \n+            em.find(DataStoreManyOneIdOwner.class, dsid);\n+        assertNotNull(dsparent);\n+        assertDataStoreRelations((OpenJPAEntityManager) em, dsparent);\n+        em.close();\n+    }\n+\n+    public void testRetrieveWithCompoundManyOneId() {\n+        EntityManager em = emf.createEntityManager();\n+        ManyOneCompoundIdOwnerId oid = new ManyOneCompoundIdOwnerId();\n+        oid.entityId = id;\n+        oid.longId = cid;\n+        ManyOneCompoundIdOwner cparent = \n+            em.find(ManyOneCompoundIdOwner.class, oid);\n+        assertNotNull(cparent);\n+        assertCompoundRelations((OpenJPAEntityManager) em, cparent);\n+        em.close();\n+    }\n+\n+    public void testAttemptToChangeManyOne() {\n+        EntityManager em = emf.createEntityManager();\n+        ManyOneIdOwner parent = em.find(ManyOneIdOwner.class, id);\n+        assertNotNull(parent);\n+        assertNotNull(parent.getSelfRel());\n+        em.getTransaction().begin();\n+        try {\n+            parent.setId(parent.getSelfRel().getId()); \n+            em.getTransaction().commit();\n+            fail(\"Successfully changed id relation.\");\n+        } catch (Exception e) {\n+            // expected\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+        }\n+        em.close();\n+    }\n+\n+    public void testChangeRelationToManyOneOwner() {\n+        BasicEntity id3 = new BasicEntity();\n+        id3.setName(\"id3\");\n+        ManyOneIdOwner child2 = new ManyOneIdOwner();\n+        child2.setName(\"child2\");\n+        child2.setId(id3);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(id3);\n+        em.persist(child2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        ManyOneIdOwner parent = em.find(ManyOneIdOwner.class, id);\n+        assertNotNull(parent);\n+        em.getTransaction().begin();\n+        parent.setSelfRel(child2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(ManyOneIdOwner.class, id);\n+        child2 = parent.getSelfRel();\n+        assertEquals(\"child2\", child2.getName());\n+        assertEquals(id3.getId(), child2.getId().getId());\n+        em.close();\n+    }\n+\n+    public void testChangeRelationToDataStoreManyOneOwner() {\n+        DataStoreBasicEntity dsid3 = new DataStoreBasicEntity();\n+        dsid3.setName(\"dsid3\");\n+        DataStoreManyOneIdOwner dschild2 = new DataStoreManyOneIdOwner();\n+        dschild2.setName(\"dschild2\");\n+        dschild2.setId(dsid3);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(dsid3);\n+        em.persist(dschild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        DataStoreManyOneIdOwner dsparent = \n+            em.find(DataStoreManyOneIdOwner.class, dsid);\n+        assertNotNull(dsparent);\n+        em.getTransaction().begin();\n+        dsparent.setSelfRel(dschild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        dsparent = em.find(DataStoreManyOneIdOwner.class, dsid);\n+        dschild2 = dsparent.getSelfRel();\n+        assertEquals(\"dschild2\", dschild2.getName());\n+        OpenJPAEntityManager oem = (OpenJPAEntityManager) em;\n+        assertEquals(oem.getObjectId(dsid3), oem.getObjectId(dschild2.getId()));\n+        em.close();\n+    }\n+\n+    public void testChangeRelationToCompoundManyOneOwner() {\n+        BasicEntity id3 = new BasicEntity();\n+        id3.setName(\"id3\");\n+        ManyOneCompoundIdOwner cchild2 = new ManyOneCompoundIdOwner();\n+        cchild2.setName(\"cchild2\");\n+        cchild2.setEntityId(id3);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(id3);\n+        em.persist(cchild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        ManyOneCompoundIdOwnerId oid = new ManyOneCompoundIdOwnerId();\n+        oid.entityId = id;\n+        oid.longId = cid; \n+        ManyOneCompoundIdOwner cparent = em.find(ManyOneCompoundIdOwner.class, \n+            oid);\n+        assertNotNull(cparent);\n+        em.getTransaction().begin();\n+        cparent.setSelfRel(cchild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        cparent = em.find(ManyOneCompoundIdOwner.class, oid);\n+        cchild2 = cparent.getSelfRel();\n+        assertEquals(\"cchild2\", cchild2.getName());\n+        assertEquals(id3.getId(), cchild2.getEntityId().getId());\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneIdOwner e \"\n+            + \"where e.id.id = :id\");\n+        q.setParameter(\"id\", id);\n+        ManyOneIdOwner pc = (ManyOneIdOwner) q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"parent\", pc.getName());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        BasicEntity id1 = em.find(BasicEntity.class, id);\n+        assertNotNull(id1);\n+        assertEquals(\"id1\", id1.getName());\n+        q = em.createQuery(\"select e from ManyOneIdOwner e where e.id = :id\");\n+        q.setParameter(\"id\", id1);\n+        pc = (ManyOneIdOwner) q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"parent\", pc.getName());\n+        em.close();\n+    }\n+\n+    public void testDataStoreQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        DataStoreBasicEntity dsid1 = em.find(DataStoreBasicEntity.class, dsid);\n+        assertNotNull(dsid1);\n+        assertEquals(\"dsid1\", dsid1.getName());\n+        Query q = em.createQuery(\"select e from DataStoreManyOneIdOwner e \"\n+            + \"where e.id = :id\");\n+        q.setParameter(\"id\", dsid1);\n+        DataStoreManyOneIdOwner dspc = (DataStoreManyOneIdOwner) \n+            q.getSingleResult();\n+        assertNotNull(dspc);\n+        assertEquals(\"dsparent\", dspc.getName());\n+        em.close();\n+    }\n+\n+    public void testCompoundQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneCompoundIdOwner e \"\n+            + \"where e.longId = :cid and e.entityId.id = :id\");\n+        q.setParameter(\"cid\", cid);\n+        q.setParameter(\"id\", id);\n+        ManyOneCompoundIdOwner pc = (ManyOneCompoundIdOwner)q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"cparent\", pc.getName());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        BasicEntity id1 = em.find(BasicEntity.class, id);\n+        assertNotNull(id1);\n+        assertEquals(\"id1\", id1.getName());\n+        q = em.createQuery(\"select e from ManyOneCompoundIdOwner e \"\n+            + \"where e.longId = :cid and e.entityId = :id\");\n+        q.setParameter(\"cid\", cid);\n+        q.setParameter(\"id\", id1);\n+        pc = (ManyOneCompoundIdOwner) q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"cparent\", pc.getName());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestManyOneAsId.class);\n+    }\n+}\n+"},{"sha":"0a114ef367f521564efc64f30c3c99d36d8673eb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -95,6 +95,7 @@\n     public PersistenceMetaDataDefaults() {\n         setCallbackMode(CALLBACK_RETHROW | CALLBACK_ROLLBACK |\n             CALLBACK_FAIL_FAST);\n+        setDataStoreObjectIdFieldUnwrapped(true);\n     }\n \n     /**"},{"sha":"fb124ef2241cef3f26d4fc60d51d026330399707","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -684,15 +684,16 @@ other entites of the same type.\n         <para>\n Identity fields must be primitives, primitive wrappers, <classname>\n String</classname>s, <classname>Date</classname>s, <classname>\n-Timestamp</classname>s, or embeddable types. Notably, other entities instances \n-can <emphasis>not</emphasis> be used as identity fields.\n+Timestamp</classname>s, or embeddable types.\n         </para>\n         <note>\n             <para>\n-For legacy schemas with binary primary key columns, OpenJPA also supports using\n-identity fields of type <classname>byte[]</classname>. When you use a\n-<classname>byte[]</classname> identity field, you must create an identity class.\n-Identity classes are covered below.\n+OpenJPA supports entities as identity fields, as the Reference Guide discusses\n+in <xref linkend=\"ref_guide_pc_oid_entitypk\"/>.  For legacy schemas with binary\n+primary key columns, OpenJPA also supports using identity fields of type \n+<classname>byte[]</classname>. When you use a <classname>byte[]</classname> \n+identity field, you must create an identity class.  Identity classes are \n+covered below.\n             </para>\n         </note>\n         <warning>"},{"sha":"2a5e1ef06708d81e663818fd2cfc80b73db4afa3","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -3800,7 +3800,7 @@ definitions in XML.\n &lt;!ATTLIST sequence increment CDATA #IMPLIED&gt;\n &lt;!ATTLIST sequence allocate CDATA #IMPLIED&gt;\n \n-&lt;!ELEMENT table (column|index|pk|fk)+&gt;\n+&lt;!ELEMENT table (column|index|pk|fk|unique)+&gt;\n &lt;!ATTLIST table name CDATA #REQUIRED&gt;\n \n &lt;!ELEMENT column EMPTY&gt;"},{"sha":"744dc14e2900d903ec269183540120570858312a","filename":"openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"modified","additions":123,"deletions":22,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/9623c5c6f81b96e1d3f2587fd4697a93aefa3a45/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=9623c5c6f81b96e1d3f2587fd4697a93aefa3a45","patch":"@@ -386,14 +386,29 @@ for details.\n             </primary>\n         </indexterm>\n         <para>\n+OpenJPA makes several enhancements to JPA's standard entity identity.\n+        </para>\n+        <section id=\"ref_guide_pc_oid_datastore\">\n+            <title>\n+                Datastore Identity\n+            </title>\n+            <indexterm zone=\"ref_guide_pc_oid_datastore\">\n+                <primary>\n+                    identity\n+                </primary>\n+                <secondary>\n+                    datastore\n+                </secondary>\n+            </indexterm>\n+            <para>\n The JPA specification requires you to declare one or more identity fields in\n your persistent classes. OpenJPA fully supports this form of object identity,\n called <emphasis>application</emphasis> identity. OpenJPA, however, also\n supports <emphasis>datastore</emphasis> identity. In datastore identity, you do\n not declare any primary key fields. OpenJPA manages the identity of your\n persistent objects for you through a surrogate key in the database.\n-        </para>\n-        <para>\n+            </para>\n+            <para>\n You can control how your JPA datastore identity value is generated through\n OpenJPA's\n <ulink url=\"../javadoc/org/apache/openjpa/persistence/DataStoreId.html\">\n@@ -402,17 +417,17 @@ annotation. This annotation has <literal>strategy</literal> and <literal>\n generator</literal> properties that mirror the same-named properties on the\n standard <classname>javax.persistence.GeneratedValue</classname> annotation\n described in <xref linkend=\"jpa_overview_meta_id\"/> of the JPA Overview.\n-        </para>\n-        <para>\n+            </para>\n+            <para>\n To retrieve the identity value of a datastore identity entity, use the\n <methodname>OpenJPAEntityManager.getObjectId(Object entity)</methodname>\n method. See <xref linkend=\"ref_guide_runtime_em\"/> for more information on\n the <classname>OpenJPAEntityManager</classname>.\n-        </para>\n-        <example id=\"ref_guide_pc_oid_datastoreentityex\">\n-            <title>\n-                JPA Datastore Identity Metadata\n-            </title>\n+            </para>\n+            <example id=\"ref_guide_pc_oid_datastoreentityex\">\n+                <title>\n+                    JPA Datastore Identity Metadata\n+                </title>\n <programlisting>\n import org.apache.openjpa.persistence.*;\n \n@@ -423,19 +438,7 @@ public class LineItem {\n     ... no @Id fields declared ...\n }\n </programlisting>\n-        </example>\n-        <section id=\"ref_guide_pc_oid_datastore\">\n-            <title>\n-                Datastore Identity Objects\n-            </title>\n-            <indexterm zone=\"ref_guide_pc_oid\">\n-                <primary>\n-                    identity\n-                </primary>\n-                <secondary>\n-                    datastore\n-                </secondary>\n-            </indexterm>\n+            </example>\n             <para>\n Internally, OpenJPA uses the public\n <ulink url=\"../javadoc/org/apache/openjpa/util/Id.html\"><classname>\n@@ -454,6 +457,104 @@ primary key value for that object. You can then use this value in calls to\n record.\n             </para>\n         </section>\n+        <section id=\"ref_guide_pc_oid_entitypk\">\n+            <title>\n+                Entities as Identity Fields\n+            </title>\n+            <indexterm zone=\"ref_guide_pc_oid_entitypk\">\n+                <primary>\n+                    identity\n+                </primary>\n+                <secondary>\n+                    application\n+                </secondary>\n+                <tertiary>\n+                    entity id fields\n+                </tertiary>\n+            </indexterm>\n+            <para>\n+The JPA specification limits identity fields to simple types.  OpenJPA, however,\n+also allows <literal>ManyToOne</literal> and <literal>OneToOne</literal> \n+relations to be identity fields.  To identify a relation field as an identity\n+field, simply annotate it with both the <literal>@ManyToOne</literal> or\n+<literal>@OneToOne</literal> relation annotation and the <literal>@Id</literal>\n+identity annotation.\n+            </para>\n+            <para>\n+When finding an entity identified by a relation, pass the id of the \n+<emphasis>relation</emphasis> to the <methodname>EntityManager.find</methodname>\n+method:\n+            </para>\n+            <example id=\"ref_guide_pc_oid_entitypk_simplefind\">\n+                <title>\n+                    Finding an Entity with an Entity Identity Field\n+                </title>\n+<programlisting>\n+public Delivery createDelivery(EntityManager em, Order order) {\n+    Delivery delivery = new Delivery();\n+    delivery.setId(o);\n+    delivery.setDelivered(new Date());\n+    return delivery;\n+}\n+\n+public Delivery findDelivery(EntityManager em, Order order) {\n+    // use the identity of the related instance \n+    return em.find(Delivery.class, order.getId());\n+}\n+</programlisting>    \n+            </example>\n+            <para>\n+When your entity has multiple identity fields, at least one of which is a \n+relation to another entity, you must use an identity class (see \n+<xref linkend=\"jpa_overview_pc_identitycls\"/> in the JPA Overview).  You cannot\n+use an embedded identity object.  Identity class fields corresponding to\n+entity identity fields should be of the same type as the related entity's \n+identity.  \n+            </para>\n+            <example id=\"ref_guide_pc_oid_entitypk_idcls\">\n+                <title>\n+                    Id Class for Entity Identity Fields\n+                </title>\n+<programlisting>\n+@Entity\n+public class Order {\n+\n+    @Id\n+    private long id;\n+\n+    ... \n+}\n+\n+@Entity\n+@IdClass(LineItemId.class)\n+public class LineItem {\n+    \n+    @Id\n+    private int index;\n+\n+    @Id\n+    @ManyToOne\n+    private Order order;\n+\n+    ...\n+}\n+\n+public class LineItemId {\n+\n+    public int index;\n+    public long order; // same type as order's identity\n+\n+    ...\n+}\n+</programlisting>    \n+            </example>\n+            <para>\n+In the example above, if <classname>Order</classname> had used an identity \n+class <classname>OrderId</classname> in place of a simple <classname>long\n+</classname> value, then the <literal>LineItemId.order</literal> field would\n+have been of type <classname>OrderId</classname>.\n+            </para>\n+        </section>\n         <section id=\"ref_guide_pc_oid_application\">\n             <title>\n                 Application Identity Tool"}]}

