{"sha":"964ab657ce7d231ffdf74c96dc429933b0f16edc","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk2NGFiNjU3Y2U3ZDIzMWZmZGY3NGM5NmRjNDI5OTMzYjBmMTZlZGM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T15:08:16Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-08-25T15:08:16Z"},"message":"OPENJPA-1264: \nEnable shared-cache-mode persistence.xml element. \n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@807662 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a61db307764aeca6e3200d2b8a8ab3864eeeca2a","url":"https://api.github.com/repos/apache/openjpa/git/trees/a61db307764aeca6e3200d2b8a8ab3864eeeca2a"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/964ab657ce7d231ffdf74c96dc429933b0f16edc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/964ab657ce7d231ffdf74c96dc429933b0f16edc","html_url":"https://github.com/apache/openjpa/commit/964ab657ce7d231ffdf74c96dc429933b0f16edc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/964ab657ce7d231ffdf74c96dc429933b0f16edc/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"6303e9a753e205f16612bcd92ee7685446d849c9","url":"https://api.github.com/repos/apache/openjpa/commits/6303e9a753e205f16612bcd92ee7685446d849c9","html_url":"https://github.com/apache/openjpa/commit/6303e9a753e205f16612bcd92ee7685446d849c9"}],"stats":{"total":1235,"additions":1142,"deletions":93},"files":[{"sha":"ccb884518cab0270c355e4257af0843265a17d6b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.openjpa.datacache.DataCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.datacache.DataCacheMode;\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.RuntimeUnenhancedClassesModes;\n import org.apache.openjpa.event.BrokerFactoryEventManager;\n@@ -1830,4 +1831,20 @@\n      * @return EncryptionProvider\n      */\n     public EncryptionProvider getEncryptionProvider();\n+    \n+    \n+    /**\n+     * Set the {@link DataCacheMode}\n+     * \n+     * @param mode One of the Sting constants from {@link DataCacheMode}\n+     * @since 2.0.0\n+     */\n+    public void setDataCacheMode(String mode);\n+\n+    /**\n+     * Return the String constant that matches the {@link DataCacheMode}\n+     * @return DataCacheMode\n+     * @since 2.0.0\n+     */\n+    public String getDataCacheMode();\n }"},{"sha":"0568b7fd2ec146fc3e9632fd52e3d67783af587b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -27,6 +27,7 @@\n import org.apache.openjpa.datacache.ConcurrentQueryCache;\n import org.apache.openjpa.datacache.DataCacheManager;\n import org.apache.openjpa.datacache.DataCacheManagerImpl;\n+import org.apache.openjpa.datacache.DataCacheMode;\n import org.apache.openjpa.ee.ManagedRuntime;\n import org.apache.openjpa.enhance.RuntimeUnenhancedClassesModes;\n import org.apache.openjpa.event.BrokerFactoryEventManager;\n@@ -172,6 +173,7 @@\n     public ObjectValue writeBehindCachePlugin;\n     public ObjectValue writeBehindCacheManagerPlugin;\n     public ObjectValue writeBehindCallbackPlugin;\n+    public StringValue dataCacheMode; \n     public BooleanValue dynamicEnhancementAgent;\n     \n     // custom values\n@@ -634,6 +636,10 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         writeBehindCallbackPlugin.setAliases(aliases);\n         writeBehindCallbackPlugin.setDefault(aliases[0]);\n         writeBehindCallbackPlugin.setString(aliases[0]);\n+        \n+        dataCacheMode = addString(DataCacheMode.class.getSimpleName());\n+        dataCacheMode.setDefault(DataCacheMode.UNSPECIFIED.toString());\n+        dataCacheMode.set(DataCacheMode.UNSPECIFIED.toString());\n \n         if (derivations)\n             ProductDerivations.beforeConfigurationLoad(this);\n@@ -1782,5 +1788,13 @@ public EncryptionProvider getEncryptionProvider() {\n             encryptionProvider.instantiate(EncryptionProvider.class, this);\n         return (EncryptionProvider) encryptionProvider.get();\n     }\n+\n+    public void setDataCacheMode(String mode) {\n+        this.dataCacheMode.setString(mode);\n+    }\n+\n+    public String getDataCacheMode() {\n+        return dataCacheMode.getString();\n+    }\n }\n "},{"sha":"25a738af1d8b21fe4640282cc2577169f4b25e9e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheMode.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.datacache;\n+\n+public enum DataCacheMode {\n+    /**\n+     * <p>All entities are cached regardless of annotations or xml configuration.</p>\n+     */\n+    ALL,\n+    /**\n+     * <p>No entities are cached regardless of annotations or xml configuration.</p>\n+     */\n+    NONE,\n+    /**\n+     * <p>\n+     * <b>Only</b> the entities which are configured to be in the cache will be\n+     * cached. Entities which do not specify whether they are cacheable will be\n+     * excluded\n+     * </p>\n+     * <p>\n+     * AKA opt-in.\n+     * </p>\n+     */\n+    ENABLE_SELECTIVE,\n+    /**\n+     * <p>\n+     * All entities except those which are explicitly excluded will be cached.\n+     * </p>\n+     * <p>\n+     * AKA opt-out\n+     * </p>\n+     */\n+    DISABLE_SELECTIVE,\n+    /**\n+     * <p>\n+     * Default value. In this case OpenJPA will behave as it did in previous\n+     * releases, and will take into account the includedTypes and excludedTypes\n+     * optional parameters on the <literal>openjpa.DataCache</literal>\n+     * configuration property.\n+     * </p>\n+     */\n+    UNSPECIFIED\n+}"},{"sha":"37ed056a721e0fe7ccab8ba142d4fca52a360ead","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":69,"deletions":17,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -40,6 +40,7 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.datacache.AbstractDataCache;\n import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.DataCacheMode;\n import org.apache.openjpa.enhance.PCRegistry;\n import org.apache.openjpa.enhance.Reflection;\n import org.apache.openjpa.enhance.PersistenceCapable;\n@@ -183,6 +184,7 @@\n     private String _seqName = DEFAULT_STRING;\n     private SequenceMetaData _seqMeta = null;\n     private String _cacheName = DEFAULT_STRING;\n+    private Boolean _cacheEnabled = null;\n     private int _cacheTimeout = Integer.MIN_VALUE;\n     private Boolean _detachable = null;\n     private String _detachState = DEFAULT_STRING;\n@@ -1415,14 +1417,13 @@ private void resolveDefinedSuperclassFields() {\n      */\n     public String getDataCacheName() {\n         if (DEFAULT_STRING.equals(_cacheName)) {\n-            if (_super != null) {\n+            if (_super != null && StringUtils.isNotEmpty(getPCSuperclassMetaData().getDataCacheName())) {\n                 _cacheName = getPCSuperclassMetaData().getDataCacheName();\n-            }\n-            else {\n+            } else {\n                 _cacheName = DataCache.NAME_DEFAULT;\n             }\n-            if(!isCacheable(_cacheName)) { \n-               _cacheName = null; \n+            if (!isCacheable(_cacheName)) {\n+                _cacheName = null;\n             }\n         }\n         return _cacheName;\n@@ -1462,10 +1463,10 @@ public void setDataCacheTimeout(int timeout) {\n      */\n     public DataCache getDataCache() {\n         String name = getDataCacheName();\n-        if (name == null)\n+        if (name == null) {\n             return null;\n-        return _repos.getConfiguration().getDataCacheManagerInstance().\n-            getDataCache(name, true);\n+        }\n+        return _repos.getConfiguration().getDataCacheManagerInstance().getDataCache(name, true);\n     }\n \n     /**\n@@ -1729,8 +1730,9 @@ protected void resolveMeta(boolean runtime) {\n \n         // are we the target of an embedded value?\n         if (embed) {\n-            if (recursiveEmbed(_owner))\n+            if (recursiveEmbed(_owner)) {\n                 throw new MetaDataException(_loc.get(\"recurse-embed\", _owner));\n+            }\n \n             // copy info from the \"real\" metadata for this type\n             ClassMetaData meta = _repos.getMetaData(_type, _loader, true);\n@@ -1883,16 +1885,21 @@ private void validateDataCache() {\n             throw new MetaDataException(_loc.get(\"cache-timeout-invalid\",\n                 _type, String.valueOf(timeout)));\n \n-        if (_super == null)\n+        if (_super == null) {\n             return;\n+        }\n         String cache = getDataCacheName();\n-        if (cache == null)\n+        if (cache == null) {\n             return;\n+        }\n \n         String superCache = getPCSuperclassMetaData().getDataCacheName();\n-        if (!StringUtils.equals(cache, superCache))\n-            throw new MetaDataException(_loc.get(\"cache-names\", new Object[]\n-                { _type, cache, _super, superCache }));\n+        \n+        if (!StringUtils.isEmpty(superCache)) {  \n+            if (!StringUtils.equals(cache, superCache)) {\n+                throw new MetaDataException(_loc.get(\"cache-names\", new Object[] { _type, cache, _super, superCache }));\n+            }\n+        }\n     }\n \n     /**\n@@ -2583,11 +2590,10 @@ public void setAbstract(boolean flag) {\n      * \n      * @return true if the DataCache will accept this type, otherwise false.\n      */\n-    private boolean isCacheable(String candidateCacheName) {\n+    private boolean isConfiguredForCaching(String candidateCacheName) {\n         boolean rval = true;\n         DataCache cache =\n-            getRepository().getConfiguration().getDataCacheManagerInstance()\n-                .getDataCache(candidateCacheName);\n+            getRepository().getConfiguration().getDataCacheManagerInstance().getDataCache(candidateCacheName);\n         if (cache != null && (cache instanceof AbstractDataCache)) {\n             AbstractDataCache adc = (AbstractDataCache) cache;\n             if (!adc.isCacheableType(getDescribedType().getName()))\n@@ -2596,6 +2602,44 @@ private boolean isCacheable(String candidateCacheName) {\n         return rval;\n     }\n     \n+    private boolean isCacheable(String candidateCacheName) { \n+        boolean rval;\n+        switch(DataCacheMode.valueOf(_repos.getConfiguration().getDataCacheMode())) {\n+          case ALL:\n+              // include everything, regardless of annotation or xml configuration\n+              rval = true;\n+              break;\n+          case NONE:\n+              // excluded everything, regardless of annotation of xml configuration\n+              rval = false;\n+              break;\n+          case ENABLE_SELECTIVE:\n+              // cache only those entities which were specifically enabled\n+              if(getCacheEnabled() == null) { \n+                  rval = false; \n+              }\n+              else { \n+                  rval = getCacheEnabled();\n+              }\n+              break;\n+          case DISABLE_SELECTIVE:\n+              // exclude *only* the entities which are explicitly excluded. \n+              if(getCacheEnabled() == null) { \n+                  rval = true; \n+              }\n+              else { \n+                  rval = getCacheEnabled();\n+              }\n+              break;\n+          case UNSPECIFIED:\n+          default:\n+              // behavior from previous releases. \n+              rval = isConfiguredForCaching(candidateCacheName); \n+      }\n+      return rval;\n+        \n+    }\n+    \n     /**\n      * Convenience method to determine if the pcType modeled by\n      * this ClassMetaData object is both abstract and declares PKFields. This\n@@ -2668,5 +2712,13 @@ public boolean hasPKFieldsFromAbstractClass() {\n \n         return _hasPKFieldsFromAbstractClass.booleanValue();\n     }\n+    \n+    public void setCacheEnabled(Boolean enabled) { \n+        _cacheEnabled = enabled;\n+    }\n+    \n+    public Boolean getCacheEnabled() { \n+        return _cacheEnabled;\n+    }\n \n }"},{"sha":"b7aecf88e5c33a6733638f2b62bb4eabceeaab0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractJPACacheTestCase.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractJPACacheTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractJPACacheTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/AbstractJPACacheTestCase.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import java.lang.reflect.Modifier;\n+\n+import javax.persistence.Cache;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.CacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.NegatedCachableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.NegatedUncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UncacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.UnspecifiedEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlCacheableEntity;\n+import org.apache.openjpa.persistence.cache.jpa.featureSelection.XmlUncacheableEntity;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public abstract class AbstractJPACacheTestCase extends AbstractPersistenceTestCase {\n+    public abstract OpenJPAEntityManagerFactorySPI getEntityManagerFactory();\n+\n+    private static Class<?>[] persistentTypes =\n+        { CacheableEntity.class, UncacheableEntity.class, UnspecifiedEntity.class, \n+            NegatedCachableEntity.class, NegatedUncacheableEntity.class, XmlCacheableEntity.class,\n+            XmlUncacheableEntity.class };\n+\n+    public void populate() throws IllegalAccessException, InstantiationException {\n+        EntityManager em = getEntityManagerFactory().createEntityManager();\n+        em.getTransaction().begin();\n+        for (Class<?> clss : persistentTypes) {\n+            if (!Modifier.isAbstract(clss.getModifiers())) {\n+                CacheEntity ce = (CacheEntity) clss.newInstance();\n+                ce.setId(1);\n+                em.persist(ce);\n+            }\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public OpenJPAEntityManagerFactorySPI createEntityManagerFactory(String puName) {\n+        OpenJPAEntityManagerFactorySPI emf =\n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(puName,\n+                \"META-INF/caching-persistence.xml\", getPropertiesMap(\"openjpa.DataCache\", \"true\",\n+                    \"openjpa.RemoteCommitProvider\", \"sjvm\", persistentTypes));\n+        return emf;\n+    }\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        // populate once per test method in case we add more methods\n+        cleanDatabase();\n+        populate();\n+    }\n+\n+    public void cleanDatabase() throws Exception {\n+        EntityManager em = getEntityManagerFactory().createEntityManager();\n+        em.getTransaction().begin();\n+        for (Class<?> clss : persistentTypes) {\n+            if (!Modifier.isAbstract(clss.getModifiers())) {\n+                em.createQuery(\"Delete from \" + clss.getSimpleName()).executeUpdate();\n+            }\n+        }\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    /**\n+     * Assert whether the cache contains the expected results.\n+     * \n+     * @param cache\n+     *            The JPA Cache to verify\n+     * @param expectCacheables\n+     *            Whether entities with @Cacheable(true) should be in the cache\n+     *            (almost always true)\n+     * @param expectUncacheables\n+     *            Whether entities with @Cacheable(false) should be in the cache\n+     *            (almost always false)\n+     * @param expectUnspecified\n+     *            Whether entities with no @Cacheable annotation should be in\n+     *            the cache (varies per config).\n+     */\n+    protected void assertCacheContents(Cache cache, boolean expectCacheables, boolean expectUncacheables,\n+        boolean expectUnspecified) {\n+        assertCacheables(cache, expectCacheables);\n+        assertUncacheables(cache, expectUncacheables);\n+        assertUnspecified(cache, expectUnspecified);\n+    }\n+\n+    /**\n+     * Assert whether the cacheable types are in the cache. This method exits on\n+     * the first cache 'miss'.\n+     * \n+     * @param cache\n+     *            JPA Cache to verify\n+     * @param expected\n+     *            If true the cacheable types should be in the cache, if false\n+     *            they should not be.\n+     */\n+    protected void assertCacheables(Cache cache, boolean expected) {\n+        assertCached(cache, CacheableEntity.class, 1, expected);\n+        assertCached(cache, NegatedUncacheableEntity.class, 1, expected);\n+        assertCached(cache, XmlCacheableEntity.class, 1, expected);\n+    }\n+\n+    /**\n+     * Assert whether the uncacheable types are in the cache. This method exits\n+     * on the first cache 'miss'.\n+     * \n+     * @param cache\n+     *            JPA Cache to verify\n+     * @param expected\n+     *            If true the uncacheable types should be in the cache, if false\n+     *            they should not be.\n+     */\n+    protected void assertUncacheables(Cache cache, boolean expected) {\n+        assertCached(cache, UncacheableEntity.class, 1, expected);\n+        assertCached(cache, XmlUncacheableEntity.class, 1, expected);\n+        assertCached(cache, NegatedCachableEntity.class, 1, expected);\n+    }\n+\n+    /**\n+     * Assert whether the unspecified types are in the cache. This method exits\n+     * on the first cache 'miss'.\n+     * \n+     * @param cache\n+     *            JPA Cache to verify\n+     * @param expected\n+     *            If true the unspecified types should be in the cache, if false\n+     *            they should not be.\n+     */\n+    protected void assertUnspecified(Cache cache, boolean expected) {\n+        assertCached(cache, UnspecifiedEntity.class, 1, expected);\n+    }\n+}"},{"sha":"dd54c77863412bb6651947deb4debbb0acf997c8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeAll.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestCacheModeAll extends AbstractJPACacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            emf = createEntityManagerFactory(\"cache-mode-all\");\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, true);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+}"},{"sha":"5526035671ec39d84bd16067cb0c741871458a56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeDisableSelective.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestCacheModeDisableSelective extends AbstractJPACacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            emf = createEntityManagerFactory(\"cache-mode-disable\");\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, true);\n+    }\n+}"},{"sha":"1ff9bdcc5079907da55b94abb18646979cdcccab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeEnableSelective.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestCacheModeEnableSelective extends AbstractJPACacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            emf = createEntityManagerFactory(\"cache-mode-enable\");\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, true);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, false);\n+    }\n+    \n+}"},{"sha":"55ca94af1dc121da175e6620c0b2e87d8614485f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/TestCacheModeNone.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa;\n+\n+import javax.persistence.Cache;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+public class TestCacheModeNone extends AbstractJPACacheTestCase {\n+\n+    private static OpenJPAEntityManagerFactorySPI emf = null;\n+    private static Cache cache = null;\n+\n+    @Override\n+    public OpenJPAEntityManagerFactorySPI getEntityManagerFactory() {\n+        if (emf == null) {\n+            emf = createEntityManagerFactory(\"cache-mode-none\");\n+            assertNotNull(emf);\n+            cache = emf.getCache();\n+            assertNotNull(cache);\n+        }\n+        return emf;\n+    }\n+\n+    public void testCacheables() {\n+        assertCacheables(cache, false);\n+    }\n+\n+    public void testUncacheables() {\n+        assertUncacheables(cache, false);\n+    }\n+\n+    public void testUnspecified() {\n+        assertUnspecified(cache, false);\n+    }\n+}"},{"sha":"cfeaffe7e55cfabeeaf3b13488841b6936c6e1da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheEntity.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+public interface CacheEntity {\n+\n+    public void setId(int id);\n+}"},{"sha":"9c826e485e102e1be4aa053181a14fb775b05152","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheableEntity.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheableEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheableEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/CacheableEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Cacheable(true)\n+public class CacheableEntity  implements CacheEntity {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"9a95cab09e1ae0838132404467ca4dd2d9830e24","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedCachableEntity.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedCachableEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedCachableEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedCachableEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * Extends CacheableEntity but the cachable attribute will be negated by XML\n+ * configuration\n+ */\n+@Entity\n+public class NegatedCachableEntity implements CacheEntity  {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"8ce5df03a92e38e7de0364e42af09bb27edcba89","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedUncacheableEntity.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedUncacheableEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedUncacheableEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/NegatedUncacheableEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * Extends UncacheableEntity but the cachable attribute will be negated by XML\n+ * configuration.\n+ */\n+@Entity\n+public class NegatedUncacheableEntity implements CacheEntity {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"82cdce726b149904a364ea5983e2fa2839530a1f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UncacheableEntity.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UncacheableEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UncacheableEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UncacheableEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Cacheable(false)\n+public class UncacheableEntity implements CacheEntity {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"7ada8e19e134e0c99ecdbeaa691c4d8ddfd58adc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UnspecifiedEntity.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UnspecifiedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UnspecifiedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/UnspecifiedEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class UnspecifiedEntity implements CacheEntity {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"1134ca1f29f3e053c8ab7df51c885dfda3de149f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlCacheableEntity.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlCacheableEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlCacheableEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlCacheableEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * Cacheable setting will be provided by XML descriptor.  \n+ */\n+@Entity\n+public class XmlCacheableEntity implements CacheEntity {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"34cc5a504b2143afbef61a13cbec489933efef5d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlUncacheableEntity.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlUncacheableEntity.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlUncacheableEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/featureSelection/XmlUncacheableEntity.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.cache.jpa.featureSelection;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * Cacheable setting will be provided by XML descriptor.\n+ */\n+@Entity\n+public class XmlUncacheableEntity implements CacheEntity {\n+    @Id\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+}"},{"sha":"5a37eea8c17c614ff99255090902423bdd185d2a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/package.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/package.html","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/cache/jpa/package.html?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,23 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<html>\n+<body>\n+<p><strong>Tests for the JPA Cache interface</strong></p>\n+</body>\n+</html>\n\\ No newline at end of file"},{"sha":"63842f2d62a248ec7489c3321294365a4c7ca82b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/AbstractPersistenceTestCase.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -31,6 +31,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import javax.persistence.Cache;\n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.Persistence;\n@@ -140,7 +141,13 @@ protected OpenJPAEntityManagerFactorySPI createNamedEMF(final String pu, Object.\n                     + \"SchemaAction='drop,add')\");\n             } else if (props[i] instanceof Class<?>) {\n                 types.add((Class<?>) props[i]);\n-            } else if (props[i] != null) {\n+            } \n+            else if (props[i] instanceof Class<?>[]) { \n+                for(Class<?> clss : (Class<?>[]) props[i]) { \n+                    types.add(clss);\n+                }\n+            }\n+            else if (props[i] != null) {\n                 prop = true;\n             }\n         }\n@@ -559,5 +566,24 @@ public boolean isTargetPlatform(String target) {\n     public String getPlatform() {\n         return System.getProperty(\"platform\", \"derby\");\n     }\n-\n+    \n+    /**\n+     * Assert whether the Cache contains an instance of the specified class and id.\n+     * \n+     * @param cache\n+     *            The JPA Cache to verify\n+     * @param clss\n+     *            The Entity type\n+     * @param id\n+     *            ID of the entity\n+     * @param expected\n+     *            Whether the class should be found in the cache\n+     */\n+    protected void assertCached(Cache cache, Class<?> clss, Object id, boolean expected) {\n+        if (expected) {\n+            assertTrue(String.format(\"Expected %s:%s to exist in cache\", clss, id), cache.contains(clss, id));\n+        } else {\n+            assertFalse(String.format(\"Expected %s:%s not to exist in cache\", clss, id), cache.contains(clss, id));\n+        }\n+    }\n }"},{"sha":"c702ff6e32881db32ccd2bd196255059379097af","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/caching-orm.xml","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-orm.xml?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd\"\n+    version=\"2.0\">\n+    <package>org.apache.openjpa.persistence.cache.jpa.featureSelection</package>\n+<!--    <mapped-superclass class=\"BaseEntity\"/>-->\n+    <entity class=\"CacheableEntity\"/>\n+    <entity class=\"UncacheableEntity\"/> \n+    <entity class=\"UnspecifiedEntity\"/>\n+    <entity class=\"NegatedCachableEntity\" cacheable=\"false\" />\n+    <entity class=\"NegatedUncacheableEntity\" cacheable=\"true\"/>\n+    <entity class=\"XmlUncacheableEntity\" cacheable=\"false\"/>\n+    <entity class=\"XmlCacheableEntity\" cacheable=\"true\"/>\n+ </entity-mappings>\n\\ No newline at end of file"},{"sha":"23a6990bdcbb3edf90a8d51fe179ff69542d0306","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/caching-persistence.xml?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" \n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n+    version=\"2.0\">\n+    <!--  Caching Persistence Units -->\n+    <persistence-unit name=\"cache-mode-all\" transaction-type=\"RESOURCE_LOCAL\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <shared-cache-mode>ALL</shared-cache-mode>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\"/>\n+        </properties>\n+    </persistence-unit>\n+    <persistence-unit name=\"cache-mode-none\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <shared-cache-mode>NONE</shared-cache-mode>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+    <persistence-unit name=\"cache-mode-enable\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <shared-cache-mode>ENABLE_SELECTIVE</shared-cache-mode>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+    <persistence-unit name=\"cache-mode-disable\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <shared-cache-mode>DISABLE_SELECTIVE</shared-cache-mode>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+    <persistence-unit name=\"cache-mode-unspecified\">\n+        <mapping-file>META-INF/caching-orm.xml</mapping-file>\n+        <shared-cache-mode>UNSPECIFIED</shared-cache-mode>\n+        <properties>\n+            <!-- Connection info is passed in via system properties -->\n+            <!-- Cache configuration ie openjpa.DataCache is passed in at EMF initialization -->\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+</persistence>"},{"sha":"619f5fd35ab2e3c84de05729f1128275805a8168","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":30,"deletions":54,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -19,54 +19,7 @@\n package org.apache.openjpa.persistence;\n \n import static javax.persistence.GenerationType.AUTO;\n-import static org.apache.openjpa.persistence.MetaDataTag.ACCESS;\n-import static org.apache.openjpa.persistence.MetaDataTag.DATASTORE_ID;\n-import static org.apache.openjpa.persistence.MetaDataTag.DATA_CACHE;\n-import static org.apache.openjpa.persistence.MetaDataTag.DEPENDENT;\n-import static org.apache.openjpa.persistence.MetaDataTag.DETACHED_STATE;\n-import static org.apache.openjpa.persistence.MetaDataTag.ELEM_DEPENDENT;\n-import static org.apache.openjpa.persistence.MetaDataTag.ELEM_TYPE;\n-import static org.apache.openjpa.persistence.MetaDataTag.EMBEDDED_ID;\n-import static org.apache.openjpa.persistence.MetaDataTag.ENTITY_LISTENERS;\n-import static org.apache.openjpa.persistence.MetaDataTag.\n-        EXCLUDE_DEFAULT_LISTENERS;\n-import static org.apache.openjpa.persistence.MetaDataTag.\n-        EXCLUDE_SUPERCLASS_LISTENERS;\n-import static org.apache.openjpa.persistence.MetaDataTag.EXTERNALIZER;\n-import static org.apache.openjpa.persistence.MetaDataTag.EXTERNAL_VALS;\n-import static org.apache.openjpa.persistence.MetaDataTag.FACTORY;\n-import static org.apache.openjpa.persistence.MetaDataTag.FETCH_GROUP;\n-import static org.apache.openjpa.persistence.MetaDataTag.FETCH_GROUPS;\n-import static org.apache.openjpa.persistence.MetaDataTag.FLUSH_MODE;\n-import static org.apache.openjpa.persistence.MetaDataTag.GENERATED_VALUE;\n-import static org.apache.openjpa.persistence.MetaDataTag.ID;\n-import static org.apache.openjpa.persistence.MetaDataTag.ID_CLASS;\n-import static org.apache.openjpa.persistence.MetaDataTag.INVERSE_LOGICAL;\n-import static org.apache.openjpa.persistence.MetaDataTag.KEY_DEPENDENT;\n-import static org.apache.openjpa.persistence.MetaDataTag.KEY_TYPE;\n-import static org.apache.openjpa.persistence.MetaDataTag.LOAD_FETCH_GROUP;\n-import static org.apache.openjpa.persistence.MetaDataTag.LRS;\n-import static org.apache.openjpa.persistence.MetaDataTag.MANAGED_INTERFACE;\n-import static org.apache.openjpa.persistence.MetaDataTag.MAPPED_BY_ID;\n-import static org.apache.openjpa.persistence.MetaDataTag.MAP_KEY;\n-import static org.apache.openjpa.persistence.MetaDataTag.MAP_KEY_CLASS;\n-import static org.apache.openjpa.persistence.MetaDataTag.NATIVE_QUERIES;\n-import static org.apache.openjpa.persistence.MetaDataTag.NATIVE_QUERY;\n-import static org.apache.openjpa.persistence.MetaDataTag.ORDER_BY;\n-import static org.apache.openjpa.persistence.MetaDataTag.POST_LOAD;\n-import static org.apache.openjpa.persistence.MetaDataTag.POST_PERSIST;\n-import static org.apache.openjpa.persistence.MetaDataTag.POST_REMOVE;\n-import static org.apache.openjpa.persistence.MetaDataTag.POST_UPDATE;\n-import static org.apache.openjpa.persistence.MetaDataTag.PRE_PERSIST;\n-import static org.apache.openjpa.persistence.MetaDataTag.PRE_REMOVE;\n-import static org.apache.openjpa.persistence.MetaDataTag.PRE_UPDATE;\n-import static org.apache.openjpa.persistence.MetaDataTag.QUERIES;\n-import static org.apache.openjpa.persistence.MetaDataTag.QUERY;\n-import static org.apache.openjpa.persistence.MetaDataTag.READ_ONLY;\n-import static org.apache.openjpa.persistence.MetaDataTag.REPLICATED;\n-import static org.apache.openjpa.persistence.MetaDataTag.SEQ_GENERATOR;\n-import static org.apache.openjpa.persistence.MetaDataTag.TYPE;\n-import static org.apache.openjpa.persistence.MetaDataTag.VERSION;\n+import static org.apache.openjpa.persistence.MetaDataTag.*;\n \n import java.io.File;\n import java.io.Serializable;\n@@ -90,7 +43,10 @@\n import java.util.Stack;\n import java.util.TreeSet;\n \n+import javax.persistence.Access;\n+import javax.persistence.AccessType;\n import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.ElementCollection;\n import javax.persistence.Embeddable;\n@@ -190,6 +146,7 @@\n \n     static {\n         _tags.put(Access.class, ACCESS);\n+        _tags.put(Cacheable.class, CACHEABLE);\n         _tags.put(EmbeddedId.class, EMBEDDED_ID);\n         _tags.put(EntityListeners.class, ENTITY_LISTENERS);\n         _tags.put(ExcludeDefaultListeners.class, EXCLUDE_DEFAULT_LISTENERS);\n@@ -653,6 +610,11 @@ private ClassMetaData parseClassAnnotations() {\n                     if (isMetaDataMode())\n                         parseAccess(meta, (Access)anno);\n                     break;\n+                case CACHEABLE: \n+                    if (isMetaDataMode()) { \n+                        parseCache(meta, (Cacheable) anno);\n+                    }\n+                    break;\n                 default:\n                     throw new UnsupportedException(_loc.get(\"unsupported\", _cls,\n                         anno.toString()));\n@@ -849,15 +811,22 @@ private void warnFlushMode(Object context) {\n      * Parse @DataCache.\n      */\n     private void parseDataCache(ClassMetaData meta, DataCache cache) {\n-        if (cache.timeout() != Integer.MIN_VALUE)\n+        if (cache.timeout() != Integer.MIN_VALUE) {\n             meta.setDataCacheTimeout(cache.timeout());\n-        if (!StringUtils.isEmpty(cache.name()))\n+        }\n+        if (!StringUtils.isEmpty(cache.name())) {\n             meta.setDataCacheName(cache.name());\n-        else if (cache.enabled())\n-            meta.setDataCacheName(\n-                org.apache.openjpa.datacache.DataCache.NAME_DEFAULT);\n-        else\n+            if(cache.enabled()) {\n+                meta.setCacheEnabled(true);\n+            }\n+        }\n+        else if (cache.enabled()) {\n+            meta.setDataCacheName(org.apache.openjpa.datacache.DataCache.NAME_DEFAULT);\n+            meta.setCacheEnabled(true); \n+        } else {\n             meta.setDataCacheName(null);\n+            meta.setCacheEnabled(false);\n+        }\n     }\n \n     private void parseManagedInterface(ClassMetaData meta,\n@@ -1254,6 +1223,13 @@ private void parseMemberAnnotations(FieldMetaData fmd) {\n      */\n     protected void parseMemberMappingAnnotations(FieldMetaData fmd) {\n     }\n+    \n+    /**\n+     * Parse @Cache.\n+     */\n+    private void parseCache(ClassMetaData meta, Cacheable cacheable) {\n+        meta.setCacheEnabled(cacheable.value());\n+    }\n \n     /**\n      * Allow subclasses to handle unknown annotations."},{"sha":"fa20ff28ca438c8a658fd65dfc23861df5a6fec4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -32,6 +32,7 @@\n public enum MetaDataTag {\n     // sorted by XML order\n     ACCESS,\n+    CACHEABLE,\n     MAPPED_SUPERCLASS,\n     ENTITY,\n     EMBEDDABLE,"},{"sha":"b9d93010354f085c62b8d0415ab09c0ba63b649e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -730,6 +730,9 @@ protected void endElement(String name)\n                     if (\"provider\".equals(name))\n                         _info.setPersistenceProviderClassName(currentText());\n                     break;\n+                case 's' : // shared-cache-mode\n+                    _info.setSharedCacheMode(currentText());\n+                    break;\n                 case 'v': // validation-mode\n                     _info.setValidationMode(Enum.valueOf(ValidationMode.class,\n                         currentText()));"},{"sha":"3987e0ddca2a8379f362289a9444d2f42c2cf451","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"modified","additions":48,"deletions":20,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -41,6 +41,7 @@\n import javax.persistence.spi.PersistenceUnitTransactionType;\n import javax.sql.DataSource;\n \n+import org.apache.openjpa.datacache.DataCacheMode;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.conf.ProductDerivations;\n@@ -63,6 +64,13 @@\n     public static final String VALIDATION_MODE =\n         \"javax.persistence.validation.mode\";\n     public static final String PERSISTENCE_VERSION = \"PersistenceVersion\";\n+    \n+    /**\n+     * Properties key for the SHARED_CACHE_MODE. The JPA 2.0 spec\n+     * SharedCacheMode maps to OpenJPA's DataCacheMode so we're using that\n+     * class' simple name as the property key.\n+     */\n+    public static final String SHARED_CACHE_MODE=DataCacheMode.class.getSimpleName();  \n \n     private static final Localizer s_loc = Localizer.forPackage\n         (PersistenceUnitInfoImpl.class);\n@@ -84,6 +92,7 @@\n     private URL _persistenceXmlFile;\n     private String _schemaVersion = \"1.0\";\n     private ValidationMode _validationMode;\n+    private SharedCacheMode _sharedCacheMode;\n \n     // A persistence unit is defined by a persistence.xml file. The jar\n     // file or directory whose META-INF directory contains the\n@@ -299,29 +308,46 @@ public void fromUserProperties(Map map) {\n                 setPersistenceProviderClassName((String) val);\n             else if (\"javax.persistence.transactionType\".equals(key)) {\n                 PersistenceUnitTransactionType ttype;\n-                if (val instanceof String)\n+                if (val instanceof String) {\n                     ttype = Enum.valueOf(PersistenceUnitTransactionType.class, \n                         (String) val);\n-                else\n+                }\n+                else {\n                     ttype = (PersistenceUnitTransactionType) val;\n+                }\n                 setTransactionType(ttype);\n             } else if (\"javax.persistence.jtaDataSource\".equals(key)) {\n-                if (val instanceof String)\n+                if (val instanceof String) {\n                     setJtaDataSourceName((String) val);\n-                else\n+                }\n+                else {\n                     setJtaDataSource((DataSource) val);\n+                }\n             } else if (\"javax.persistence.nonJtaDataSource\".equals(key)) {\n-                if (val instanceof String)\n+                if (val instanceof String) {\n                     setNonJtaDataSourceName((String) val);\n-                else\n+                }\n+                else {\n                     setNonJtaDataSource((DataSource) val);\n+                }\n             } else if (VALIDATION_MODE.equals(key)) {\n-                if (val instanceof String)\n+                if (val instanceof String) {\n                     setValidationMode((String) val);\n-                else\n+                }\n+                else {\n                     setValidationMode((ValidationMode) val);\n-            } else\n+                }\n+            } else if (SHARED_CACHE_MODE.equals(key)) { \n+               if(val instanceof String) { \n+                   setSharedCacheMode((String) val);\n+               }\n+               else {\n+                   setSharedCacheMode((SharedCacheMode) val);\n+               }\n+            }\n+            else {\n                 _props.put(key, val);\n+            }\n         }\n     }\n \n@@ -465,6 +491,10 @@ public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n             map.put(PERSISTENCE_VERSION, info.getPersistenceXMLSchemaVersion());\n         }\n         \n+        if (info.getSharedCacheMode() != null) { \n+            put(map, added, SHARED_CACHE_MODE, info.getSharedCacheMode().toString());\n+        }\n+        \n         return map;\n     }\n \n@@ -531,16 +561,6 @@ public void setPersistenceXMLSchemaVersion(String version) {\n         _schemaVersion = version;\n     }\n \n-    public SharedCacheMode getCaching() {\n-        throw new UnsupportedOperationException(\n-            \"JPA 2.0 - Method not yet implemented\");\n-    }\n-    \n-    public void setCaching(SharedCacheMode cache) {\n-        throw new UnsupportedOperationException(\n-        \"JPA 2.0 - Method not yet implemented\");\n-    }\n-\n     public ValidationMode getValidationMode() {\n         return _validationMode;\n     }\n@@ -554,6 +574,14 @@ public void setValidationMode(ValidationMode mode) {\n     }\n \n     public SharedCacheMode getSharedCacheMode() {\n-        throw new UnsupportedOperationException(\"JPA 2.0 - Method not yet implemented\");\n+        return _sharedCacheMode;\n+    }\n+    \n+    public void setSharedCacheMode(String mode) { \n+        setSharedCacheMode(Enum.valueOf(SharedCacheMode.class, mode.toUpperCase()));\n+    }\n+\n+    public void setSharedCacheMode(SharedCacheMode mode) { \n+        _sharedCacheMode = mode;\n     }\n }"},{"sha":"9c12db5828270524ca3608fe68a3767a12577841","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/964ab657ce7d231ffdf74c96dc429933b0f16edc/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=964ab657ce7d231ffdf74c96dc429933b0f16edc","patch":"@@ -897,6 +897,11 @@ protected boolean startClass(String elem, Attributes attrs)\n                 addDeferredEmbeddableMetaData(_cls, access);\n             }\n         }\n+        \n+        if(attrs.getValue(\"cacheable\") != null) { \n+            meta.setCacheEnabled(Boolean.valueOf(attrs.getValue(\"cacheable\")));\n+        }\n+        \n         if (isMappingMode())\n             meta.setSourceMode(MODE_MAPPING, true);\n         if (isMappingOverrideMode())"}]}

