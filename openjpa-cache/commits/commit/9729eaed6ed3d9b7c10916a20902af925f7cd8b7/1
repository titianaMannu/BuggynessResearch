{"sha":"9729eaed6ed3d9b7c10916a20902af925f7cd8b7","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3MjllYWVkNmVkM2Q5YjdjMTA5MTZhMjA5MDJhZjkyNWY3Y2Q4Yjc=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-07T19:34:26Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2008-05-07T19:34:26Z"},"message":"OPENJPA-591\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@654226 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d78353d0b1e736a2e9eb37329ad3bfd1b77ad420","url":"https://api.github.com/repos/apache/openjpa/git/trees/d78353d0b1e736a2e9eb37329ad3bfd1b77ad420"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9729eaed6ed3d9b7c10916a20902af925f7cd8b7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9729eaed6ed3d9b7c10916a20902af925f7cd8b7","html_url":"https://github.com/apache/openjpa/commit/9729eaed6ed3d9b7c10916a20902af925f7cd8b7","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"667eed23b213e1e5e10de64ef9df2b7c382edcaa","url":"https://api.github.com/repos/apache/openjpa/commits/667eed23b213e1e5e10de64ef9df2b7c382edcaa","html_url":"https://github.com/apache/openjpa/commit/667eed23b213e1e5e10de64ef9df2b7c382edcaa"}],"stats":{"total":241,"additions":229,"deletions":12},"files":[{"sha":"89859b45ee3b4820586e626ac4b37e20e8634292","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","raw_url":"https://github.com/apache/openjpa/raw/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/Compatibility.java?ref=9729eaed6ed3d9b7c10916a20902af925f7cd8b7","patch":"@@ -30,6 +30,7 @@\n     private boolean _closeOnCommit = true;\n     private boolean _quotedNumbers = false;\n     private boolean _nonOptimisticVersionCheck = false;\n+    private boolean _flushBeforeDetach = true; \n \n     /**\n      * Whether to require exact identity value types when creating object\n@@ -159,4 +160,34 @@ public void setCloseOnManagedCommit(boolean close) {\n     public boolean getNonOptimisticVersionCheck() {\n         return _nonOptimisticVersionCheck;\n     }\n+    \n+    /**\n+     * <P>Whether OpenJPA should flush changes before detaching or serializing an\n+     * entity. In JPA this is usually false, but other persistence frameworks\n+     * (ie JDO) may expect it to be true.\n+     * <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.\n+     * \n+     * @since 1.0.3\n+     * @since 1.2.0\n+     * @return true if changes should be flushed, otherwise false.\n+     */\n+    public boolean getFlushBeforeDetach() {\n+        return _flushBeforeDetach;\n+    }\n+\n+    /**\n+     * Whether OpenJPA should flush changes before detaching or serializing an\n+     * entity. In JPA this is usually false, but other persistence frameworks\n+     * (ie JDO) may expect it to be true.\n+     * <P>Prior to version 1.0.3 and 1.2.0 changes were always flushed.\n+     * \n+     * @since 1.0.3\n+     * @since 1.2.0\n+     * @param beforeDetach if true changes will be flushed before detaching or \n+     * serializing an entity.\n+     */\n+    public void setFlushBeforeDetach(boolean beforeDetach) {\n+        _flushBeforeDetach = beforeDetach;\n+    }\n+\n }"},{"sha":"b821825c8b4aa5e713249658d476416517d7f007","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=9729eaed6ed3d9b7c10916a20902af925f7cd8b7","patch":"@@ -67,6 +67,7 @@\n     private final OpCallbacks _call;\n     private final boolean _failFast;\n     private boolean _flushed = false;\n+    private boolean _flushBeforeDetach;\n \n     // if we're not detaching full, we need to track all detached objects;\n     // if we are, then we use a special field manager for more efficient\n@@ -82,7 +83,10 @@ static boolean preSerialize(StateManagerImpl sm) {\n         if (!sm.isPersistent())\n             return false;\n \n-        flushDirty(sm);\n+        if (sm.getBroker().getConfiguration().getCompatibilityInstance()\n+                .getFlushBeforeDetach()) {\n+            flushDirty(sm);\n+        }\n \n         ClassMetaData meta = sm.getMetaData();\n         boolean setState = meta.getDetachedState() != null\n@@ -270,6 +274,9 @@ public DetachManager(BrokerImpl broker, boolean full, OpCallbacks call) {\n             _detached = new IdentityMap();\n             _fullFM = null;\n         }\n+        _flushBeforeDetach =\n+                broker.getConfiguration().getCompatibilityInstance()\n+                        .getFlushBeforeDetach();\n     }\n \n     /**\n@@ -415,8 +422,14 @@ private Object detachInternal(Object toDetach) {\n         _broker.fireLifecycleEvent(toDetach, null, sm.getMetaData(),\n             LifecycleEvent.BEFORE_DETACH);\n \n-        // any dirty instances cause a flush to occur\n-        _flushed = _flushed || flushDirty(sm);\n+        if(! _flushed)  {\n+            if(_flushBeforeDetach) {\n+                // any dirty instances cause a flush to occur\n+                flushDirty(sm);\n+            }\n+            _flushed = true;\n+        }\n+        \n         BitSet fields = new BitSet();\n         preDetach(_broker, sm, fields);\n "},{"sha":"eca1165628d439f966966f6d6383869547262c60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","raw_url":"https://github.com/apache/openjpa/raw/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java?ref=9729eaed6ed3d9b7c10916a20902af925f7cd8b7","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.openjpa.persistence.simple;\n \n+import java.io.Serializable;\n+\n import javax.persistence.Basic;\n import javax.persistence.Column;\n import javax.persistence.Entity;\n@@ -28,8 +30,10 @@\n \n @Entity\n @Table(name = \"ITEM\")\n-public class Item {\n+public class Item implements Serializable {\n \n+    private static final long serialVersionUID = 489786296539819572L;\n+    \n     public int itemId;\n     public String itemName;\n     public java.math.BigDecimal itemPrice;"},{"sha":"f18a1085b56696a1fccd4f1380a64acffe537362","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java","raw_url":"https://github.com/apache/openjpa/raw/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java?ref=9729eaed6ed3d9b7c10916a20902af925f7cd8b7","patch":"@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestFlushBeforeDetach extends SQLListenerTestCase {\n+\n+    private int _id;\n+    \n+    public void setUp() {\n+      setUp(Item.class,\"openjpa.Compatibility\", \n+                \"default(flushBeforeDetach=false)\");\n+        persistSampleEntity();\n+    }\n+    \n+    private void persistSampleEntity() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Item i = new Item();\n+        em.persist(i);\n+        em.getTransaction().commit();\n+        em.refresh(i);\n+        _id = i.getItemId();\n+        em.close();\n+    }\n+\n+    public void testClear() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"ABCD\");\n+\n+        em.clear();\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM.*\");\n+        em.close();\n+        \n+    }\n+\n+    public void testDetach() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+        \n+        i.setItemData(\"EFGH\");\n+        \n+        OpenJPAPersistence.cast(em).detach(i);\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+\n+    }\n+    \n+    public void testDetachAll() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"IJKL\");\n+\n+        OpenJPAPersistence.cast(em).detachAll(i);\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+    }\n+    \n+    public void testDetachAllCollection() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"MNOP\");\n+\n+        Collection<Item> c = new ArrayList<Item>();\n+        c.add(i);\n+        OpenJPAPersistence.cast(em).detachAll(c);\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+    }\n+\n+    public void testSerialize() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"QRSTU\");\n+\n+        serializeObject(i);\n+\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+    }\n+\n+    /**\n+     * Helper to serialize an object to a byte[]\n+     */\n+    private Object serializeObject(Object orig) throws Exception {\n+        Object deserialized = null;\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(orig);\n+\n+        ByteArrayInputStream bais =\n+                new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+\n+        deserialized = ois.readObject();\n+        return deserialized;\n+    }\n+}"},{"sha":"a4b5b33112865bf4bc4e770bb7ad014d13d3ea40","filename":"openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"modified","additions":30,"deletions":8,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=9729eaed6ed3d9b7c10916a20902af925f7cd8b7","patch":"@@ -124,21 +124,43 @@ been rolled back, then the re-attachment process will throw an optimistic\n concurrency exception.\n             </para>\n             <para>\n-You can stop OpenJPA from assuming the transaction will commit by invoking\n-<methodname>OpenJPAEntityManager.setRollbackOnly</methodname> prior to detaching\n-your objects. Setting the <literal>RollbackOnly</literal> flag prevents OpenJPA\n-from flushing when detaching dirty objects; instead OpenJPA just runs its\n-pre-flush actions (see the <methodname>OpenJPAEntityManager.preFlush\n-</methodname>\n+You can stop OpenJPA from assuming the transaction will commit in the following\n+ways :\n+    <itemizedlist>\n+        <listitem>\n+            <para>\n+                Invoke <methodname>EntityTransaction.setRollbackOnly\n+                </methodname> prior to detachingyour objects. Setting the \n+                <literal>RollbackOnly</literal> flag prevents OpenJPA from \n+                flushing when detaching dirty objects; instead OpenJPA just \n+                runs its pre-flush actions (see the \n+                <methodname>OpenJPAEntityManager.preFlush</methodname>\n <ulink url=\"../javadoc/org/apache/openjpa/persistence/OpenJPAEntityManager.html\">\n Javadoc</ulink> for details).\n             </para>\n             <para>\n This allows you to use the same instances in multiple\n-attach/modify/detach/rollback cycles. Alternatively, you might also prevent a\n-flush by making your modifications outside of a transaction (with <literal>\n+attach/modify/detach/rollback cycles. \n+            </para>\n+        </listitem>\n+        <listitem>\n+            <para>\n+                Make your modifications outside of a transaction (with <literal>\n NontransactionalWrite</literal> enabled) before detaching.\n             </para>\n+        </listitem>\n+        <listitem>\n+            <para>\n+            Set <literal>flushBeforeDetach</literal> \n+            to false (see <methodname>Compatibility.setFlushBeforeDetach\n+            </methodname>\n+            <ulink url=\"../javadoc/org/apache/openjpa/conf/Compatibility.html\">\n+Javadoc</ulink> ). This option is similar to the first option, but does not\n+            affect the current transaction.\n+            </para>\n+        </listitem>\n+    </itemizedlist>\n+    </para>\n         </section>\n         <section id=\"ref_guide_attach_behavior\">\n             <title>"},{"sha":"6597a7ca613a5d715c8c641b3260afaa0bd73145","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9729eaed6ed3d9b7c10916a20902af925f7cd8b7/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=9729eaed6ed3d9b7c10916a20902af925f7cd8b7","patch":"@@ -229,6 +229,7 @@\n                     <plugin>\r\n                         <groupId>org.codehaus.mojo</groupId>\r\n                         <artifactId>rat-maven-plugin</artifactId>\r\n+                        <version>1.0-alpha-1</version>\r\n                         <executions>\r\n                             <execution>\r\n                                 <phase>verify</phase>\r"}]}

