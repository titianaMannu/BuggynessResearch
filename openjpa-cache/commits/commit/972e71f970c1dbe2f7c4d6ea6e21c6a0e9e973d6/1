{"sha":"972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3MmU3MWY5NzBjMWRiZTJmN2M0ZDZlYTZlMjFjNmEwZTllOTczZDY=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T22:35:52Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-09-18T22:35:52Z"},"message":"OPENJPA-282 merging to 1.0.x branch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@577090 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"30d9fe8dc3de026f84bca98f545c96dbf03cc815","url":"https://api.github.com/repos/apache/openjpa/git/trees/30d9fe8dc3de026f84bca98f545c96dbf03cc815"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","html_url":"https://github.com/apache/openjpa/commit/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","url":"https://api.github.com/repos/apache/openjpa/commits/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4","html_url":"https://github.com/apache/openjpa/commit/aece331d8ac7ab4a4978c70cc86fb434fc6b90a4"}],"stats":{"total":41,"additions":33,"deletions":8},"files":[{"sha":"683d2b980faa722c71ded004a0ec1963c5e8ad5e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":24,"deletions":4,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","patch":"@@ -3059,7 +3059,7 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             return null;\n         if (fk.getDeleteAction() == ForeignKey.ACTION_NONE)\n             return null;\n-        if (fk.isDeferred() && !supportsDeferredConstraints)\n+        if (fk.isDeferred() && !supportsDeferredForeignKeyConstraints())\n             return null;\n         if (!supportsDeleteAction(fk.getDeleteAction())\n             || !supportsUpdateAction(fk.getUpdateAction()))\n@@ -3096,14 +3096,24 @@ protected String getForeignKeyConstraintSQL(ForeignKey fk) {\n             buf.append(\" ON UPDATE \").append(upAction);\n         if (fk.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredForeignKeyConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (fk.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(fk.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred foreign key constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredForeignKeyConstraints() {\n+        return supportsDeferredConstraints;\n+    }\n+\n     /**\n      * Return the name of the given foreign key action.\n      */\n@@ -3172,7 +3182,7 @@ public boolean supportsUpdateAction(int action) {\n      */\n     protected String getUniqueConstraintSQL(Unique unq) {\n         if (!supportsUniqueConstraints\n-            || (unq.isDeferred() && !supportsDeferredConstraints))\n+            || (unq.isDeferred() && !supportsDeferredUniqueConstraints()))\n             return null;\n \n         StringBuffer buf = new StringBuffer();\n@@ -3186,14 +3196,24 @@ protected String getUniqueConstraintSQL(Unique unq) {\n             append(\")\");\n         if (unq.isDeferred())\n             buf.append(\" INITIALLY DEFERRED\");\n-        if (supportsDeferredConstraints)\n+        if (supportsDeferredUniqueConstraints())\n             buf.append(\" DEFERRABLE\");\n         if (unq.getName() != null\n             && CONS_NAME_AFTER.equals(constraintNameMode))\n             buf.append(\" CONSTRAINT \").append(unq.getName());\n         return buf.toString();\n     }\n \n+    /**\n+     * Whether or not this dictionary supports deferred unique constraints.\n+     * This implementation returns {@link #supportsUniqueConstraints}.\n+     *\n+     * @since 1.1.0\n+     */\n+    protected boolean supportsDeferredUniqueConstraints() {\n+        return supportsDeferredConstraints;\n+    }\n+\n     /////////////////////\n     // Database metadata\n     /////////////////////"},{"sha":"a6bd7a4b081a58135c8f5ce8202afb34ff81f990","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/PostgresDictionary.java?ref=972e71f970c1dbe2f7c4d6ea6e21c6a0e9e973d6","patch":"@@ -94,10 +94,10 @@ public PostgresDictionary() {\n         // PostgreSQL requires double-escape for strings\n         searchStringEscape = \"\\\\\\\\\";\n \n-        maxTableNameLength = 31;\n-        maxColumnNameLength = 31;\n-        maxIndexNameLength = 31;\n-        maxConstraintNameLength = 31;\n+        maxTableNameLength = 63;\n+        maxColumnNameLength = 63;\n+        maxIndexNameLength = 63;\n+        maxConstraintNameLength = 63;\n         schemaCase = SCHEMA_CASE_LOWER;\n         rangePosition = RANGE_POST_LOCK;\n         requiresAliasForSubselect = true;\n@@ -271,6 +271,11 @@ public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,\n         return sql;\n     }\n \n+    protected boolean supportsDeferredUniqueConstraints() {\n+        // Postgres only supports deferred foreign key constraints.\n+        return false;\n+    }\n+\n     protected String getSequencesSQL(String schemaName, String sequenceName) {\n         if (schemaName == null && sequenceName == null)\n             return allSequencesSQL;"}]}

