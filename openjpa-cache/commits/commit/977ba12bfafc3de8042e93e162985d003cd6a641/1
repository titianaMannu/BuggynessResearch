{"sha":"977ba12bfafc3de8042e93e162985d003cd6a641","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3N2JhMTJiZmFmYzNkZTgwNDJlOTNlMTYyOTg1ZDAwM2NkNmE2NDE=","commit":{"author":{"name":"asf-sync-process","email":"asf-sync-process@unknown","date":"2015-10-17T18:37:39Z"},"committer":{"name":"asf-sync-process","email":"asf-sync-process@unknown","date":"2015-10-17T18:37:39Z"},"message":"OPENJPA-2603: Merging an unmanaged entity multiple (3) times leads to an exception.  Merged 2.1.x changes to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1709205 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f037ba1fdc0a0686fdc3b11c8450e071f174be6","url":"https://api.github.com/repos/apache/openjpa/git/trees/6f037ba1fdc0a0686fdc3b11c8450e071f174be6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/977ba12bfafc3de8042e93e162985d003cd6a641","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/977ba12bfafc3de8042e93e162985d003cd6a641","html_url":"https://github.com/apache/openjpa/commit/977ba12bfafc3de8042e93e162985d003cd6a641","comments_url":"https://api.github.com/repos/apache/openjpa/commits/977ba12bfafc3de8042e93e162985d003cd6a641/comments","author":null,"committer":null,"parents":[{"sha":"e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","url":"https://api.github.com/repos/apache/openjpa/commits/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870","html_url":"https://github.com/apache/openjpa/commit/e5fa4e32dfb41fe5c20ec2afe0b3397a4f81f870"}],"stats":{"total":415,"additions":414,"deletions":1},"files":[{"sha":"66f5570368b4ce74cedcecf7a9f2d8818fbceb70","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=977ba12bfafc3de8042e93e162985d003cd6a641","patch":"@@ -268,7 +268,15 @@ public void delete(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n         ValueMapping elem = field.getElementMapping();\n         ColumnIO io = elem.getColumnIO();\n         ForeignKey fk = elem.getForeignKey();\n-        if (!elem.getUseClassCriteria() && io.isAnyUpdatable(fk, true)) { \n+\n+        //OJ-2603: Don't null an FK which is also a PK in the referencing object.\n+        boolean containsPK = false;\n+        Column[] cols = fk.getColumns();\n+        for (int i = 0; i < cols.length && !containsPK; i++){\n+            containsPK= cols[i].isPrimaryKey();\n+        }\n+\n+        if (!elem.getUseClassCriteria() && io.isAnyUpdatable(fk, true) && !containsPK) { \n             assertInversable();\n             Row row = rm.getAllRows(fk.getTable(), Row.ACTION_UPDATE);\n             row.setForeignKey(fk, io, null);"},{"sha":"65c9d858e1080501524eed3acbfa412406d79e11","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItem.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItem.java?ref=977ba12bfafc3de8042e93e162985d003cd6a641","patch":"@@ -0,0 +1,142 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.merge;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table( name = \"ITEM_TABLE\" )\r\n+// Remove this @IdClass, and one of the @Id (i.e. use a single PK, not a compound PK\r\n+// and the test will work fine!!!!!\r\n+@IdClass( LineItemPK.class )\r\n+public class LineItem {\r\n+\t@Id\r\n+\t@Column( name = \"ORDER_ID\", nullable = false )\r\n+\tprivate Long orderId;\r\n+\t\r\n+\t@Id\r\n+\t@Column( name = \"ITEM_ID\", nullable = false )\r\n+\tprivate Long itemId;\r\n+\t\r\n+\t@Column( name = \"PRODUCT_NAME\", nullable = false )\r\n+\tprivate String productName;\r\n+\t\r\n+\t@Column( name = \"QUANTITY\", nullable = false )\r\n+\tprivate int quantity;\r\n+\t\r\n+\t@Column( name = \"PRICE\", nullable = false )\r\n+\tprivate float price;\r\n+\t\r\n+\tpublic LineItem() {\r\n+\t}\r\n+\t\r\n+\tpublic LineItem( String productName, int quantity, float price ) {\r\n+\t\tthis();\r\n+\t\tthis.productName = productName;\r\n+\t\tthis.quantity = quantity;\r\n+\t\tthis.price = price;\r\n+\t}\r\n+\r\n+\tpublic String getProductName() {\r\n+\t\treturn productName;\r\n+\t}\r\n+\r\n+\tpublic void setProductName(String productName) {\r\n+\t\tthis.productName = productName;\r\n+\t}\r\n+\r\n+\tpublic int getQuantity() {\r\n+\t\treturn quantity;\r\n+\t}\r\n+\r\n+\tpublic void setQuantity(int quantity) {\r\n+\t\tthis.quantity = quantity;\r\n+\t}\r\n+\r\n+\tpublic float getPrice() {\r\n+\t\treturn price;\r\n+\t}\r\n+\r\n+\tpublic void setPrice(float price) {\r\n+\t\tthis.price = price;\r\n+\t}\r\n+\r\n+\tpublic Long getOrderId() {\r\n+\t\treturn orderId;\r\n+\t}\r\n+\r\n+\tpublic void setOrderId(Long orderId) {\r\n+\t\tthis.orderId = orderId;\r\n+\t}\r\n+\r\n+\tpublic Long getItemId() {\r\n+\t\treturn itemId;\r\n+\t}\r\n+\r\n+\tpublic void setItemId(Long itemId) {\r\n+\t\tthis.itemId = itemId;\r\n+\t}\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((itemId == null) ? 0 : itemId.hashCode());\r\n+        result = prime * result + ((orderId == null) ? 0 : orderId.hashCode());\r\n+        result = prime * result + Float.floatToIntBits(price);\r\n+        result = prime * result + ((productName == null) ? 0 : productName.hashCode());\r\n+        result = prime * result + quantity;\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        LineItem other = (LineItem) obj;\r\n+        if (itemId == null) {\r\n+            if (other.itemId != null)\r\n+                return false;\r\n+        } else if (!itemId.equals(other.itemId))\r\n+            return false;\r\n+        if (orderId == null) {\r\n+            if (other.orderId != null)\r\n+                return false;\r\n+        } else if (!orderId.equals(other.orderId))\r\n+            return false;\r\n+        if (Float.floatToIntBits(price) != Float.floatToIntBits(other.price))\r\n+            return false;\r\n+        if (productName == null) {\r\n+            if (other.productName != null)\r\n+                return false;\r\n+        } else if (!productName.equals(other.productName))\r\n+            return false;\r\n+        if (quantity != other.quantity)\r\n+            return false;\r\n+        return true;\r\n+    }\t\r\n+}\r"},{"sha":"b509fe21c3eacb642b5c8ab314fff961bb8eb704","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItemPK.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItemPK.java","raw_url":"https://github.com/apache/openjpa/raw/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItemPK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/LineItemPK.java?ref=977ba12bfafc3de8042e93e162985d003cd6a641","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.merge;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Embeddable;\r\n+\r\n+@Embeddable\r\n+public class LineItemPK implements Serializable {\r\n+\tprivate static final long serialVersionUID = -8657894635702714413L;\r\n+\t\r\n+\t@Column( name = \"ORDER_ID\", nullable = false )\r\n+\tprivate Long orderId;\r\n+\t\r\n+\t@Column( name = \"ITEM_ID\", nullable = false )\r\n+\tprivate Long itemId;\r\n+\t\r\n+\tpublic LineItemPK() {\r\n+\t}\r\n+\r\n+\tpublic Long getOrderId() {\r\n+\t\treturn orderId;\r\n+\t}\r\n+\r\n+\tpublic void setOrderId(Long orderId) {\r\n+\t\tthis.orderId = orderId;\r\n+\t}\r\n+\r\n+\tpublic Long getItemId() {\r\n+\t\treturn itemId;\r\n+\t}\r\n+\r\n+\tpublic void setItemId(Long itemId) {\r\n+\t\tthis.itemId = itemId;\r\n+\t}\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((itemId == null) ? 0 : itemId.hashCode());\r\n+        result = prime * result + ((orderId == null) ? 0 : orderId.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        LineItemPK other = (LineItemPK) obj;\r\n+        if (itemId == null) {\r\n+            if (other.itemId != null)\r\n+                return false;\r\n+        } else if (!itemId.equals(other.itemId))\r\n+            return false;\r\n+        if (orderId == null) {\r\n+            if (other.orderId != null)\r\n+                return false;\r\n+        } else if (!orderId.equals(other.orderId))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+}\r"},{"sha":"7f1046f3931b78b7a5ce086b8d14753dd1a3ef5b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Order.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Order.java","raw_url":"https://github.com/apache/openjpa/raw/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/Order.java?ref=977ba12bfafc3de8042e93e162985d003cd6a641","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.merge;\r\n+\r\n+import java.sql.Date;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+@Table( name = \"ORDER_TABLE\" )\r\n+public class Order {\r\n+      @Id \r\n+      @Column( name = \"ID\", nullable = false )\r\n+      private Long id; \r\n+\r\n+      @Column( name = \"ENTRY_DATE\", nullable = false )\r\n+      @Temporal(TemporalType.TIMESTAMP)\r\n+      private Date orderEntry;\r\n+      \r\n+      // When using a List, things fails...using a Set all works fine.\r\n+      @OneToMany( fetch = FetchType.EAGER, cascade = CascadeType.ALL )\r\n+      @JoinColumn( name = \"ORDER_ID\", referencedColumnName = \"ID\" )\r\n+      private List<LineItem> items;\r\n+      \r\n+      public Order() {\r\n+          orderEntry = new Date( System.currentTimeMillis() );\r\n+          items = new ArrayList<LineItem>();\r\n+      }\r\n+      \r\n+      public Order( long id ) {\r\n+          this();\r\n+          this.id = id;\r\n+      }\r\n+      \r\n+      public Long getId() {\r\n+          return id;\r\n+      }\r\n+        \r\n+      public void setId(Long id) {\r\n+        this.id = id;\r\n+      }\r\n+        \r\n+      public Date getOrderEntry() {\r\n+          return orderEntry;\r\n+      }\r\n+        \r\n+    public void setOrderEntry(Date orderEntry) {\r\n+        this.orderEntry = orderEntry;\r\n+    }\r\n+    \r\n+    public void addItem( LineItem item ) {\r\n+        items.add(item);\r\n+        item.setOrderId(id);\r\n+        item.setItemId((long)items.size() );\r\n+    }\r\n+    \r\n+    public List<LineItem> getItems() {\r\n+        return items;\r\n+    }\r\n+\r\n+    public void setItems(List<LineItem> items) {\r\n+        this.items = items;\r\n+    }\r\n+}\r"},{"sha":"d2ce00d62cc67c51eedc996cb62d5368d02db8f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMultipleMerge.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMultipleMerge.java","raw_url":"https://github.com/apache/openjpa/raw/977ba12bfafc3de8042e93e162985d003cd6a641/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMultipleMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestMultipleMerge.java?ref=977ba12bfafc3de8042e93e162985d003cd6a641","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.merge;\r\n+\r\n+import java.sql.Date;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/*\r\n+ * See OPENJPA-2603 for details.\r\n+ */\r\n+public class TestMultipleMerge extends SingleEMFTestCase {\r\n+    \r\n+    public void setUp() {\r\n+        //Since a JPA 1.0 p.xml file is used the property \"NonDefaultMappingAllowed=true\" is \r\n+        //needed for this test.  This is needed since Order uses an @JoinColumn; something \r\n+        //not allowed in 1.0 (or at least a grey area in the spec) on an @OneToMany.\r\n+        setUp(\"openjpa.Compatibility\", \"NonDefaultMappingAllowed=true\", \r\n+            CLEAR_TABLES, Order.class, LineItemPK.class, LineItem.class);\r\n+    }    \r\n+\r\n+    public void testMultiMerge() {\r\n+        EntityManager em = emf.createEntityManager(); \r\n+        em.getTransaction().begin();\r\n+        Order order = new Order( 1l );\r\n+        \r\n+        LineItem item = new LineItem( \"my product\", 44, 4.99f );\r\n+        order.addItem(item);\r\n+        \r\n+        //NOTE: Notice that throughout the rest of the test the unmanaged order is merged.\r\n+        //Throughout the rest of the test we should do a 'order = em.merge(order)', or\r\n+        //something to that effect (i.e. use the 'managed' order).  However, technically \r\n+        //speaking merging the unmanaged order is not wrong, albeit odd and potentially \r\n+        //error prone.\r\n+        em.merge(order);\r\n+        em.getTransaction().commit();\r\n+\r\n+        em.getTransaction().begin();\r\n+        LineItem additional = new LineItem( \"My second product\", 1, 999.95f );\r\n+        order.addItem(additional);\r\n+        order.setOrderEntry( new Date( System.currentTimeMillis() ) );\r\n+        em.merge(order);\r\n+        //NOTE: do a flush here and all works fine:\r\n+        //em.flush();\r\n+        em.merge(order);\r\n+        //Prior to fix, an exception occurred on the commit.\r\n+        em.getTransaction().commit();\r\n+        \r\n+        em.clear();\r\n+        \r\n+        //OK, good, we no longer get an exception, to be double certain\r\n+        //all is well, lets verify that the expected LineItems are in the DB.\r\n+        LineItemPK liPK = new LineItemPK();\r\n+        liPK.setItemId(1l);\r\n+        liPK.setOrderId(1l);\r\n+        LineItem li = em.find(LineItem.class, liPK);\r\n+        \r\n+        assertNotNull(li);\r\n+        assertEquals(item.getProductName(), li.getProductName());\r\n+        \r\n+        liPK.setItemId(2l);\r\n+        liPK.setOrderId(1l);\r\n+        li = em.find(LineItem.class, liPK);\r\n+        assertNotNull(li);\r\n+        assertEquals(additional.getProductName(), li.getProductName());\r\n+        \r\n+        em.close();  \r\n+  }\r\n+}\r"}]}

