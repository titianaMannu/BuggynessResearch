{"sha":"979d2340e93eaaa9f273a100dbe78e42ea9ed400","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3OWQyMzQwZTkzZWFhYTlmMjczYTEwMGRiZTc4ZTQyZWE5ZWQ0MDA=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-28T23:48:13Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-07-28T23:48:13Z"},"message":"Cleanup of fetch group metadata and internal runtime APIs. Now that fetch depth\ninformation is immutable within a fetch instance and cloned on relation \ntraversal, it was safe to combine fetch state back into the fetch configuration \nclass and remove the fetch state class for cleaner APIs (no more having some\ncomponents use fetch state and others fetch configuration). Also changed\nrecursion depth logic to more accurately mirror intent (per JDO spec), though \ntesting is needed. \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@426710 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"089188988e9901684a6d8b969e8fde092720711d","url":"https://api.github.com/repos/apache/openjpa/git/trees/089188988e9901684a6d8b969e8fde092720711d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/979d2340e93eaaa9f273a100dbe78e42ea9ed400","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/979d2340e93eaaa9f273a100dbe78e42ea9ed400","html_url":"https://github.com/apache/openjpa/commit/979d2340e93eaaa9f273a100dbe78e42ea9ed400","comments_url":"https://api.github.com/repos/apache/openjpa/commits/979d2340e93eaaa9f273a100dbe78e42ea9ed400/comments","author":null,"committer":null,"parents":[{"sha":"3b6518f17455c07a475412311a950bded5701fbc","url":"https://api.github.com/repos/apache/openjpa/commits/3b6518f17455c07a475412311a950bded5701fbc","html_url":"https://github.com/apache/openjpa/commit/3b6518f17455c07a475412311a950bded5701fbc"}],"stats":{"total":4501,"additions":2180,"deletions":2321},"files":[{"sha":"6871fa061dd5ea5a930f286b8c2143c597f54706","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/DelegatingJDBCFetchConfiguration.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n ///////////////////////////////////////////////////////////////\n@@ -231,4 +232,12 @@ public JDBCFetchConfiguration clearJoins() {\n             throw translate(re);\n         }\n     }\n+\n+    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n+        try {\n+            return getJDBCDelegate().traverseJDBC(fm);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n }"},{"sha":"8e93e74e37adfdee62a5445e1432f81110f84461","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/GenericResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -87,9 +87,8 @@ public Object getResultObject()\n         throws SQLException {\n         // rather than use the standard result.load(), we go direct to\n         // the store manager so we can tell it not to load anything additional\n-        return ((JDBCStoreManager) _store).load(_mapping,\n-            (JDBCFetchState) _fetch.newFetchState(), StoreContext.EXCLUDE_ALL,\n-            _res);\n+        return ((JDBCStoreManager) _store).load(_mapping, _fetch,\n+            StoreContext.EXCLUDE_ALL, _res);\n     }\n \n     public boolean next()"},{"sha":"7ad8c6dc1e9508240b12172fb5ade8aef7eb3406","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/InstanceResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -42,8 +42,8 @@\n      * @param fetch the fetch configuration, or null for default\n      */\n     public InstanceResultObjectProvider(SelectExecutor sel,\n-        ClassMapping mapping, JDBCStore store, JDBCFetchState fetchState) {\n-        super(sel, store, fetchState);\n+        ClassMapping mapping, JDBCStore store, JDBCFetchConfiguration fetch) {\n+        super(sel, store, fetch);\n         _mapping = mapping;\n     }\n \n@@ -53,6 +53,6 @@ public Object getResultObject()\n         ClassMapping mapping = res.getBaseMapping();\n         if (mapping == null)\n             mapping = _mapping;\n-        return res.load(mapping, getStore(), (JDBCFetchState) getFetchState());\n+        return res.load(mapping, getStore(), getFetchConfiguration());\n     }\n }"},{"sha":"b4934ce572b2fc74f4a0432f8d345abd34d8aef1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfiguration.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -22,6 +22,7 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.JoinSyntaxes;\n import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n  * JDBC extensions to OpenJPA's {@link FetchConfiguration}.\n@@ -163,4 +164,9 @@\n      * @since 4.0.0\n      */\n     public JDBCFetchConfiguration clearJoins();\n+\n+    /**\n+     * Convenience method to cast traversal to store-specific type.\n+     */\n+    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm);\n }"},{"sha":"6002b6c2cac79ab8f8cc9ee97e7cfbc58f61707d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","status":"modified","additions":65,"deletions":48,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -28,7 +28,6 @@\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.FetchConfigurationImpl;\n-import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.rop.EagerResultList;\n import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n@@ -38,6 +37,7 @@\n import org.apache.openjpa.lib.rop.SoftRandomAccessResultList;\n import org.apache.openjpa.lib.rop.WindowResultList;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.UserException;\n \n /**\n@@ -53,13 +53,35 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (JDBCFetchConfigurationImpl.class);\n \n-    private int _eagerMode = 0;\n-    private int _subclassMode = 0;\n-    private int _type = 0;\n-    private int _direction = 0;\n-    private int _size = 0;\n-    private int _syntax = 0;\n-    private Set _joins = null;\n+    /**\n+     * Configurable JDBC state shared throughout a traversal chain.\n+     */\n+    private static class JDBCConfigurationState {\n+        public int eagerMode = 0;\n+        public int subclassMode = 0;\n+        public int type = 0;\n+        public int direction = 0;\n+        public int size = 0;\n+        public int syntax = 0;\n+        public Set joins = null;\n+    }\n+\n+    private final JDBCConfigurationState _state;\n+\n+    public JDBCFetchConfigurationImpl() {\n+        this(null, null);\n+    }\n+\n+    private JDBCFetchConfigurationImpl(ConfigurationState state, \n+        JDBCConfigurationState jstate) {\n+        super(state);\n+        _state = (jstate == null) ? new JDBCConfigurationState() : jstate;\n+    }\n+\n+    protected FetchConfigurationImpl newInstance(ConfigurationState state) {\n+        JDBCConfigurationState jstate = (state == null) ? null : _state;\n+        return new JDBCFetchConfigurationImpl(state, jstate);\n+    }\n \n     public void setContext(StoreContext ctx) {\n         super.setContext(ctx);\n@@ -75,11 +97,6 @@ public void setContext(StoreContext ctx) {\n         setJoinSyntax(conf.getDBDictionaryInstance().joinSyntax);\n     }\n \n-    protected FetchConfigurationImpl newInstance() {\n-        JDBCFetchConfigurationImpl fetch = new JDBCFetchConfigurationImpl();\n-        return fetch;\n-    }\n-\n     public void copy(FetchConfiguration fetch) {\n         super.copy(fetch);\n         JDBCFetchConfiguration jf = (JDBCFetchConfiguration) fetch;\n@@ -93,7 +110,7 @@ public void copy(FetchConfiguration fetch) {\n     }\n \n     public int getEagerFetchMode() {\n-        return _eagerMode;\n+        return _state.eagerMode;\n     }\n \n     public JDBCFetchConfiguration setEagerFetchMode(int mode) {\n@@ -103,21 +120,21 @@ public JDBCFetchConfiguration setEagerFetchMode(int mode) {\n                 mode = conf.getEagerFetchModeConstant();\n         }\n         if (mode != DEFAULT)\n-            _eagerMode = mode;\n+            _state.eagerMode = mode;\n         return this;\n     }\n \n     public int getSubclassFetchMode() {\n-        return _subclassMode;\n+        return _state.subclassMode;\n     }\n \n     public int getSubclassFetchMode(ClassMapping cls) {\n         if (cls == null)\n-            return _subclassMode;\n+            return _state.subclassMode;\n         int mode = cls.getSubclassFetchMode();\n         if (mode == DEFAULT)\n-            return _subclassMode;\n-        return Math.min(mode, _subclassMode);\n+            return _state.subclassMode;\n+        return Math.min(mode, _state.subclassMode);\n     }\n \n     public JDBCFetchConfiguration setSubclassFetchMode(int mode) {\n@@ -127,63 +144,63 @@ public JDBCFetchConfiguration setSubclassFetchMode(int mode) {\n                 mode = conf.getSubclassFetchModeConstant();\n         }\n         if (mode != DEFAULT)\n-            _subclassMode = mode;\n+            _state.subclassMode = mode;\n         return this;\n     }\n \n     public int getResultSetType() {\n-        return _type;\n+        return _state.type;\n     }\n \n     public JDBCFetchConfiguration setResultSetType(int type) {\n         if (type == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n-                _type = conf.getResultSetTypeConstant();\n+                _state.type = conf.getResultSetTypeConstant();\n         } else\n-            _type = type;\n+            _state.type = type;\n         return this;\n     }\n \n     public int getFetchDirection() {\n-        return _direction;\n+        return _state.direction;\n     }\n \n     public JDBCFetchConfiguration setFetchDirection(int direction) {\n         if (direction == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n-                _direction = conf.getFetchDirectionConstant();\n+                _state.direction = conf.getFetchDirectionConstant();\n         } else\n-            _direction = direction;\n+            _state.direction = direction;\n         return this;\n     }\n \n     public int getLRSSize() {\n-        return _size;\n+        return _state.size;\n     }\n \n     public JDBCFetchConfiguration setLRSSize(int size) {\n         if (size == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n-                _size = conf.getLRSSizeConstant();\n+                _state.size = conf.getLRSSizeConstant();\n         } else\n-            _size = size;\n+            _state.size = size;\n         return this;\n     }\n \n     public int getJoinSyntax() {\n-        return _syntax;\n+        return _state.syntax;\n     }\n \n     public JDBCFetchConfiguration setJoinSyntax(int syntax) {\n         if (syntax == DEFAULT) {\n             JDBCConfiguration conf = getJDBCConfiguration();\n             if (conf != null)\n-                _syntax = conf.getDBDictionaryInstance().joinSyntax;\n+                _state.syntax = conf.getDBDictionaryInstance().joinSyntax;\n         } else\n-            _syntax = syntax;\n+            _state.syntax = syntax;\n         return this;\n     }\n \n@@ -203,28 +220,28 @@ public ResultList newResultList(ResultObjectProvider rop) {\n             return new EagerResultList(rop);\n \n         // if foward only or forward direction use a forward window\n-        if (_type == ResultSet.TYPE_FORWARD_ONLY\n-            || _direction == ResultSet.FETCH_FORWARD\n+        if (_state.type == ResultSet.TYPE_FORWARD_ONLY\n+            || _state.direction == ResultSet.FETCH_FORWARD\n             || !rop.supportsRandomAccess()) {\n             if (getFetchBatchSize() > 0 && getFetchBatchSize() <= 50)\n                 return new WindowResultList(rop, getFetchBatchSize());\n             return new WindowResultList(rop, 50);\n         }\n \n         // if skipping around use a caching random access list\n-        if (_direction == ResultSet.FETCH_UNKNOWN)\n+        if (_state.direction == ResultSet.FETCH_UNKNOWN)\n             return new SoftRandomAccessResultList(rop);\n \n         // scrolling reverse... just use non-caching simple result list\n         return new SimpleResultList(rop);\n     }\n \n     public Set getJoins() {\n-        return (_joins == null) ? Collections.EMPTY_SET : _joins;\n+        return (_state.joins == null) ? Collections.EMPTY_SET : _state.joins;\n     }\n \n     public boolean hasJoin(String field) {\n-        return _joins != null && _joins.contains(field);\n+        return _state.joins != null && _state.joins.contains(field);\n     }\n \n     public JDBCFetchConfiguration addJoin(String join) {\n@@ -233,9 +250,9 @@ public JDBCFetchConfiguration addJoin(String join) {\n         \n         lock();\n         try {\n-            if (_joins == null)\n-                _joins = new HashSet();\n-            _joins.add(join);\n+            if (_state.joins == null)\n+                _state.joins = new HashSet();\n+            _state.joins.add(join);\n         } finally {\n             unlock();\n         }\n@@ -253,8 +270,8 @@ public JDBCFetchConfiguration addJoins(Collection joins) {\n     public JDBCFetchConfiguration removeJoin(String field) {\n         lock();\n         try {\n-            if (_joins != null)\n-                _joins.remove(field);\n+            if (_state.joins != null)\n+                _state.joins.remove(field);\n         } finally {\n             unlock();\n         }\n@@ -264,8 +281,8 @@ public JDBCFetchConfiguration removeJoin(String field) {\n     public JDBCFetchConfiguration removeJoins(Collection joins) {\n         lock();\n         try {\n-            if (_joins != null)\n-                _joins.removeAll(joins);\n+            if (_state.joins != null)\n+                _state.joins.removeAll(joins);\n         } finally {\n             unlock();\n         }\n@@ -275,16 +292,16 @@ public JDBCFetchConfiguration removeJoins(Collection joins) {\n     public JDBCFetchConfiguration clearJoins() {\n         lock();\n         try {\n-            if (_joins != null)\n-                _joins.clear();\n+            if (_state.joins != null)\n+                _state.joins.clear();\n         } finally {\n             unlock();\n         }\n         return this;\n     }\n \n-    public FetchState newFetchState() {\n-        return new JDBCFetchStateImpl(this);\n+    public JDBCFetchConfiguration traverseJDBC(FieldMetaData fm) {\n+        return (JDBCFetchConfiguration) traverse(fm);\n     }\n \n     /**"},{"sha":"75ccf3be94b121740942dfdc3c36c42558fba73a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchState.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/3b6518f17455c07a475412311a950bded5701fbc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchState.java","raw_url":"https://github.com/apache/openjpa/raw/3b6518f17455c07a475412311a950bded5701fbc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchState.java?ref=3b6518f17455c07a475412311a950bded5701fbc","patch":"@@ -1,32 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import org.apache.openjpa.kernel.FetchState;\n-\n-/**\n- * Store-specific extension of {@link org.apache.openjpa.kernel.FetchState FetchState}.\n- *\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\n- */\n-public interface JDBCFetchState\n-    extends FetchState {\n-\n-    /**\n-     * Returns store-specific fetch configuration.\n-     */\n-    public JDBCFetchConfiguration getJDBCFetchConfiguration();\n-}"},{"sha":"6c5fcedfcc74cc3eb4eb58da935ef2af9094aa60","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchStateImpl.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/3b6518f17455c07a475412311a950bded5701fbc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchStateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b6518f17455c07a475412311a950bded5701fbc/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchStateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchStateImpl.java?ref=3b6518f17455c07a475412311a950bded5701fbc","patch":"@@ -1,42 +0,0 @@\n-/*\n- * Copyright 2006 The Apache Software Foundation.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.openjpa.jdbc.kernel;\n-\n-import org.apache.openjpa.kernel.FetchStateImpl;\n-\n-/**\n- * JDBC-specific implementation of fetch state.\n- *\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\n- * @nojavadoc\n- */\n-class JDBCFetchStateImpl\n-    extends FetchStateImpl\n-    implements JDBCFetchState {\n-\n-    /**\n-     * Supply immutable configuration.\n-     *\n-     * @param fc\n-     */\n-    JDBCFetchStateImpl(JDBCFetchConfiguration fc) {\n-        super(fc);\n-    }\n-\n-    public JDBCFetchConfiguration getJDBCFetchConfiguration() {\n-        return (JDBCFetchConfiguration) super.getFetchConfiguration();\n-    }\n-}"},{"sha":"0b870d17a2c78265dd88bb69595ed7f9b1082f29","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStore.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -86,7 +86,7 @@\n      * @param vm the mapping holding this oid, or null if not applicable\n      */\n     public Object find(Object oid, ValueMapping vm,\n-        JDBCFetchState fetchState);\n+        JDBCFetchConfiguration fetch);\n \n     /**\n      * Makes sure all subclasses of the given type are loaded in the JVM."},{"sha":"ba24d5fce4c5eec51edd801d65ca49b213312f22","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":94,"deletions":122,"changes":216,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -46,7 +46,6 @@\n import org.apache.openjpa.jdbc.sql.SelectExecutor;\n import org.apache.openjpa.jdbc.sql.Union;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n@@ -142,12 +141,6 @@ public JDBCFetchConfiguration getFetchConfiguration() {\n         return (JDBCFetchConfiguration) _ctx.getFetchConfiguration();\n     }\n \n-    private JDBCFetchConfiguration getFetchConfiguration(\n-        JDBCFetchState fetchState) {\n-        return (fetchState == null) ? getFetchConfiguration() : fetchState\n-            .getJDBCFetchConfiguration();\n-    }\n-\n     public void beginOptimistic() {\n     }\n \n@@ -254,10 +247,11 @@ public int compareVersion(OpenJPAStateManager state, Object v1, Object v2) {\n     }\n \n     public boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState, Object context) {\n+        FetchConfiguration fetch, Object context) {\n         ConnectionInfo info = (ConnectionInfo) context;\n         try {\n-            return initializeState(sm, state, (JDBCFetchState) fetchState, info);\n+            return initializeState(sm, state, (JDBCFetchConfiguration)fetch, \n+                info);\n         } catch (ClassNotFoundException cnfe) {\n             throw new UserException(cnfe);\n         } catch (SQLException se) {\n@@ -269,11 +263,10 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n      * Initialize a newly-loaded instance.\n      */\n     private boolean initializeState(OpenJPAStateManager sm, PCState state,\n-        JDBCFetchState fetchState, ConnectionInfo info)\n+        JDBCFetchConfiguration fetch, ConnectionInfo info)\n         throws ClassNotFoundException, SQLException {\n         Object oid = sm.getObjectId();\n         ClassMapping mapping = (ClassMapping) sm.getMetaData();\n-        JDBCFetchConfiguration jfetch = getFetchConfiguration(fetchState);\n         Result res = null;\n         if (info != null && info.result != null) {\n             res = info.result;\n@@ -283,30 +276,30 @@ private boolean initializeState(OpenJPAStateManager sm, PCState state,\n             mapping = info.mapping;\n         } else if (oid instanceof OpenJPAId\n             && !((OpenJPAId) oid).hasSubclasses()) {\n-            Boolean custom = customLoad(sm, mapping, state, jfetch);\n+            Boolean custom = customLoad(sm, mapping, state, fetch);\n             if (custom != null)\n                 return custom.booleanValue();\n-            res = getInitializeStateResult(sm, mapping, fetchState,\n+            res = getInitializeStateResult(sm, mapping, fetch,\n                 Select.SUBS_EXACT);\n-            if (res == null && !selectPrimaryKey(sm, mapping, jfetch))\n+            if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n                 return false;\n             if (res != null && !res.next())\n                 return false;\n         } else {\n-            ClassMapping[] mappings = mapping\n-                .getIndependentAssignableMappings();\n+            ClassMapping[] mappings = mapping.\n+                getIndependentAssignableMappings();\n             if (mappings.length == 1) {\n                 mapping = mappings[0];\n-                Boolean custom = customLoad(sm, mapping, state, jfetch);\n+                Boolean custom = customLoad(sm, mapping, state, fetch);\n                 if (custom != null)\n                     return custom.booleanValue();\n-                res = getInitializeStateResult(sm, mapping, fetchState,\n+                res = getInitializeStateResult(sm, mapping, fetch,\n                     Select.SUBS_ANY_JOINABLE);\n-                if (res == null && !selectPrimaryKey(sm, mapping, jfetch))\n+                if (res == null && !selectPrimaryKey(sm, mapping, fetch))\n                     return false;\n             } else\n                 res = getInitializeStateUnionResult(sm, mapping, mappings,\n-                    fetchState);\n+                    fetch);\n             if (res != null && !res.next())\n                 return false;\n         }\n@@ -338,8 +331,7 @@ private boolean initializeState(OpenJPAStateManager sm, PCState state,\n             if (res != null) {\n                 // re-get the mapping in case the instance was a subclass\n                 mapping = (ClassMapping) sm.getMetaData();\n-\n-                load(mapping, sm, fetchState, res);\n+                load(mapping, sm, fetch, res);\n                 mapping.getVersion().afterLoad(sm, this);\n             }\n             return true;\n@@ -354,10 +346,10 @@ private boolean initializeState(OpenJPAStateManager sm, PCState state,\n      * does not use custom loading.\n      */\n     private Boolean customLoad(OpenJPAStateManager sm, ClassMapping mapping,\n-        PCState state, JDBCFetchConfiguration jfetch)\n+        PCState state, JDBCFetchConfiguration fetch)\n         throws ClassNotFoundException, SQLException {\n         // check to see if the mapping takes care of initialization\n-        if (!mapping.customLoad(sm, this, state, jfetch))\n+        if (!mapping.customLoad(sm, this, state, fetch))\n             return null;\n         if (sm.getManagedInstance() != null) {\n             mapping.getVersion().afterLoad(sm, this);\n@@ -371,15 +363,15 @@ private Boolean customLoad(OpenJPAStateManager sm, ClassMapping mapping,\n      * null if there is no data in the current fetch groups to select.\n      */\n     private Result getInitializeStateResult(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchState fetchState, int subs)\n+        ClassMapping mapping, JDBCFetchConfiguration fetch, int subs)\n         throws SQLException {\n         Select sel = _sql.newSelect();\n-        if (!select(sel, mapping, subs, sm, null, fetchState,\n+        if (!select(sel, mapping, subs, sm, null, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN, true))\n             return null;\n \n         sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n-        return sel.execute(this, getFetchConfiguration(fetchState));\n+        return sel.execute(this, fetch);\n     }\n \n     /**\n@@ -388,33 +380,31 @@ private Result getInitializeStateResult(OpenJPAStateManager sm,\n      */\n     private Result getInitializeStateUnionResult(final OpenJPAStateManager sm,\n         ClassMapping mapping, final ClassMapping[] mappings,\n-        final JDBCFetchState fetchState) throws SQLException {\n+        final JDBCFetchConfiguration fetch) throws SQLException {\n         final JDBCStoreManager store = this;\n-        JDBCFetchConfiguration jfetch = getFetchConfiguration(fetchState);\n-        final int eager = Math.min(jfetch.getEagerFetchMode(),\n+        final int eager = Math.min(fetch.getEagerFetchMode(),\n             JDBCFetchConfiguration.EAGER_JOIN);\n \n         Union union = _sql.newUnion(mappings.length);\n         union.setSingleResult(true);\n-        if (jfetch.getSubclassFetchMode(mapping) != jfetch.EAGER_JOIN)\n+        if (fetch.getSubclassFetchMode(mapping) != fetch.EAGER_JOIN)\n             union.abortUnion();\n         union.select(new Union.Selector() {\n-\n             public void select(Select sel, int i) {\n-                sel.select(mappings[i], Select.SUBS_ANY_JOINABLE, store,\n-                    fetchState, eager);\n+                sel.select(mappings[i], Select.SUBS_ANY_JOINABLE, store, fetch,\n+                    eager);\n                 sel.wherePrimaryKey(sm.getObjectId(), mappings[i], store);\n             }\n         });\n-        return union.execute(this, jfetch);\n+        return union.execute(this, fetch);\n     }\n \n     /**\n      * Select primary key data to make sure the given instance exists, locking\n      * if needed.\n      */\n     private boolean selectPrimaryKey(OpenJPAStateManager sm,\n-        ClassMapping mapping, JDBCFetchConfiguration jfetch)\n+        ClassMapping mapping, JDBCFetchConfiguration fetch)\n         throws SQLException {\n         // select pks from base class record to ensure it exists and lock\n         // it if needed\n@@ -425,7 +415,7 @@ private boolean selectPrimaryKey(OpenJPAStateManager sm,\n         Select sel = _sql.newSelect();\n         sel.select(base.getPrimaryKeyColumns());\n         sel.wherePrimaryKey(sm.getObjectId(), base, this);\n-        Result exists = sel.execute(this, jfetch);\n+        Result exists = sel.execute(this, fetch);\n         try {\n             if (!exists.next())\n                 return false;\n@@ -440,9 +430,8 @@ private boolean selectPrimaryKey(OpenJPAStateManager sm,\n     }\n \n     public boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, int lockLevel, Object context) {\n-        JDBCFetchState jfetchState = (JDBCFetchState) fetchState;\n-        JDBCFetchConfiguration jfetch = getFetchConfiguration(jfetchState);\n+        FetchConfiguration fetch, int lockLevel, Object context) {\n+        JDBCFetchConfiguration jfetch = (JDBCFetchConfiguration) fetch;\n \n         // get a connection, or reuse current one\n         ConnectionInfo info = (ConnectionInfo) context;\n@@ -459,7 +448,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             // if there's an existing result, load all we can from it\n             ClassMapping mapping = (ClassMapping) sm.getMetaData();\n             if (res != null) {\n-                load(mapping, sm, jfetchState, res);\n+                load(mapping, sm, jfetch, res);\n                 removeLoadedFields(sm, fields);\n             }\n \n@@ -474,25 +463,24 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n             //### object that only creates a real select when actually used?\n \n             Select sel = _sql.newSelect();\n-            if (select(sel, mapping, sel.SUBS_EXACT, sm, fields, jfetchState,\n-                jfetch.EAGER_JOIN, true)) {\n+            if (select(sel, mapping, sel.SUBS_EXACT, sm, fields, jfetch,\n+                EagerFetchModes.EAGER_JOIN, true)) {\n                 sel.wherePrimaryKey(sm.getObjectId(), mapping, this);\n                 res = sel.execute(this, jfetch, lockLevel);\n                 try {\n                     if (!res.next())\n                         return false;\n-                    load(mapping, sm, jfetchState, res);\n+                    load(mapping, sm, jfetch, res);\n                 } finally {\n                     res.close();\n                 }\n             }\n \n             // now allow the fields to load themselves individually too\n-            for (int i = 0, len = fields.length(); i < len; i++)\n-                if (fields.get(i) && !sm.getLoaded().get(i)) {\n-                \tFieldMapping fm = mapping.getFieldMapping(i);\n-                    fm.load(sm, this, (JDBCFetchState)jfetchState.traverse(fm));\n-                }\n+            FieldMapping[] fms = mapping.getFieldMappings();\n+            for (int i = 0; i < fms.length; i++)\n+                if (fields.get(i) && !sm.getLoaded().get(i))\n+                    fms[i].load(sm, this, jfetch.traverseJDBC(fms[i]));\n             mapping.getVersion().afterLoad(sm, this);\n             return true;\n         } catch (ClassNotFoundException cnfe) {\n@@ -605,8 +593,6 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n \n         ResultObjectProvider[] rops = null;\n         final JDBCFetchConfiguration jfetch = (JDBCFetchConfiguration) fetch;\n-        final JDBCFetchState jfetchState = (JDBCFetchState) jfetch\n-            .newFetchState();\n         if (jfetch.getSubclassFetchMode(mapping) != jfetch.EAGER_JOIN)\n             rops = new ResultObjectProvider[mappings.length];\n \n@@ -633,15 +619,14 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n \n                     Select sel = _sql.newSelect();\n                     sel.setLRS(true);\n-                    BitSet paged = selectExtent(sel, mappings[i], jfetchState,\n+                    BitSet paged = selectExtent(sel, mappings[i], jfetch,\n                         subclasses);\n                     if (paged == null)\n                         rops[i] = new InstanceResultObjectProvider(sel,\n-                            mappings[i], this, jfetchState);\n+                            mappings[i], this, jfetch);\n                     else\n                         rops[i] = new PagingResultObjectProvider(sel,\n-                            mappings[i], this, jfetchState, paged,\n-                            Long.MAX_VALUE);\n+                            mappings[i], this, jfetch, paged, Long.MAX_VALUE);\n                 }\n                 if (rops.length == 1)\n                     return rops[0];\n@@ -653,9 +638,8 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n             union.setLRS(true);\n             final BitSet[] paged = new BitSet[mappings.length];\n             union.select(new Union.Selector() {\n-\n                 public void select(Select sel, int idx) {\n-                    paged[idx] = selectExtent(sel, mappings[idx], jfetchState,\n+                    paged[idx] = selectExtent(sel, mappings[idx], jfetch,\n                         subclasses);\n                 }\n             });\n@@ -664,11 +648,10 @@ public void select(Select sel, int idx) {\n             for (int i = 0; i < paged.length; i++) {\n                 if (paged[i] != null)\n                     return new PagingResultObjectProvider(union, mappings,\n-                        JDBCStoreManager.this, jfetchState, paged,\n-                        Long.MAX_VALUE);\n+                        JDBCStoreManager.this, jfetch, paged, Long.MAX_VALUE);\n             }\n             return new InstanceResultObjectProvider(union, mappings[0], this,\n-                jfetchState);\n+                jfetch);\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, _dict);\n         }\n@@ -678,17 +661,17 @@ public void select(Select sel, int idx) {\n      * Select the given mapping for use in an extent, returning paged fields.\n      */\n     private BitSet selectExtent(Select sel, ClassMapping mapping,\n-        JDBCFetchState jfetchState, boolean subclasses) {\n+        JDBCFetchConfiguration fetch, boolean subclasses) {\n         int subs = (subclasses) ? Select.SUBS_JOINABLE : Select.SUBS_NONE;\n         // decide between paging and standard iteration\n         BitSet paged = PagingResultObjectProvider.getPagedFields(sel, mapping,\n-            this, jfetchState, JDBCFetchConfiguration.EAGER_PARALLEL,\n+            this, fetch, JDBCFetchConfiguration.EAGER_PARALLEL,\n             Long.MAX_VALUE);\n         if (paged == null)\n-            sel.selectIdentifier(mapping, subs, this, jfetchState,\n+            sel.selectIdentifier(mapping, subs, this, fetch,\n                 JDBCFetchConfiguration.EAGER_PARALLEL);\n         else\n-            sel.selectIdentifier(mapping, subs, this, jfetchState,\n+            sel.selectIdentifier(mapping, subs, this, fetch,\n                 JDBCFetchConfiguration.EAGER_JOIN);\n         return paged;\n     }\n@@ -756,10 +739,11 @@ private RefCountConnection connectInternal() throws SQLException {\n     /**\n      * Find the object with the given oid.\n      */\n-    public Object find(Object oid, ValueMapping vm, JDBCFetchState fetchState) {\n+    public Object find(Object oid, ValueMapping vm, \n+        JDBCFetchConfiguration fetch) {\n         if (oid == null)\n             return null;\n-        Object pc = _ctx.find(oid, fetchState, null, null, 0);\n+        Object pc = _ctx.find(oid, fetch, null, null, 0);\n         if (pc == null && vm != null) {\n             OrphanedKeyAction action = _conf.getOrphanedKeyActionInstance();\n             pc = action.orphan(oid, null, vm);\n@@ -770,7 +754,7 @@ public Object find(Object oid, ValueMapping vm, JDBCFetchState fetchState) {\n     /**\n      * Load the object in the current row of the given result.\n      */\n-    public Object load(ClassMapping mapping, JDBCFetchState fetchState,\n+    public Object load(ClassMapping mapping, JDBCFetchConfiguration fetch,\n         BitSet exclude, Result result) throws SQLException {\n         if (!mapping.isMapped())\n             throw new InvalidStateException(_loc\n@@ -787,19 +771,19 @@ public Object load(ClassMapping mapping, JDBCFetchState fetchState,\n         ConnectionInfo info = new ConnectionInfo();\n         info.result = result;\n         info.mapping = mapping;\n-        return _ctx.find(oid, fetchState, exclude, info, 0);\n+        return _ctx.find(oid, fetch, exclude, info, 0);\n     }\n \n     /**\n      * Load the given state manager with data from the result set. Only\n      * mappings originally selected will be loaded.\n      */\n     private void load(ClassMapping mapping, OpenJPAStateManager sm,\n-        JDBCFetchState fetchState, Result res) throws SQLException {\n-        FieldMapping eagerToMany = load(mapping, sm, fetchState, res, null);\n+        JDBCFetchConfiguration fetch, Result res) throws SQLException {\n+        FieldMapping eagerToMany = load(mapping, sm, fetch, res, null);\n         if (eagerToMany != null)\n-            eagerToMany.loadEagerJoin(sm, this, \n-            \t(JDBCFetchState)fetchState.traverse(eagerToMany), res);\n+            eagerToMany.loadEagerJoin(sm, this, fetch.traverseJDBC(eagerToMany),\n+                res);\n         if (_active && _lm != null && res.isLocking())\n             _lm.loadedForUpdate(sm);\n     }\n@@ -809,16 +793,15 @@ private void load(ClassMapping mapping, OpenJPAStateManager sm,\n      * without loading it.\n      */\n     private FieldMapping load(ClassMapping mapping, OpenJPAStateManager sm,\n-        JDBCFetchState fetchState, Result res, FieldMapping eagerToMany)\n+        JDBCFetchConfiguration fetch, Result res, FieldMapping eagerToMany)\n         throws SQLException {\n-        JDBCFetchConfiguration fetch = getFetchConfiguration(fetchState);\n         if (mapping.customLoad(sm, this, fetch, res))\n             return eagerToMany;\n \n         // load superclass data; base class loads version\n         ClassMapping parent = mapping.getJoinablePCSuperclassMapping();\n         if (parent != null)\n-            eagerToMany = load(parent, sm, fetchState, res, eagerToMany);\n+            eagerToMany = load(parent, sm, fetch, res, eagerToMany);\n         else if (sm.getVersion() == null)\n             mapping.getVersion().load(sm, this, res);\n \n@@ -838,15 +821,14 @@ else if (sm.getVersion() == null)\n                         eagerToMany = fms[i];\n                     else\n                         fms[i].loadEagerJoin(sm, this, \n-                        \t(JDBCFetchState)fetchState.traverse(fms[i]), res);\n+                        \tfetch.traverseJDBC(fms[i]), res);\n                 } else if (eres != null) {\n                     processed = fms[i].loadEagerParallel(sm, this, \n-                    \t(JDBCFetchState)fetchState.traverse(fms[i]), eres);\n+                    \tfetch.traverseJDBC(fms[i]), eres);\n                     if (processed != eres)\n                         res.putEager(fms[i], processed);\n                 } else\n-                    fms[i].load(sm, this, \n-                    \t(JDBCFetchState)fetchState.traverse(fms[i]), res);\n+                    fms[i].load(sm, this, fetch.traverseJDBC(fms[i]), res);\n             } finally {\n                 res.endDataRequest();\n             }\n@@ -867,15 +849,15 @@ else if (sm.getVersion() == null)\n      * initialized, else null\n      * @param fields if a state manager is being loaded, the set of\n      * fields that must be loaded in order, else null\n-     * @param fetchState the fetch configuration; used if no specific fields\n+     * @param fetch the fetch configuration; used if no specific fields\n      * must be loaded, and used when selecting relations\n      * @param eager eager fetch mode to use\n      * @param ident whether to select primary key columns as distinct\n      * identifiers\n      * @return true if the select is required, false otherwise\n      */\n     public boolean select(Select sel, ClassMapping mapping, int subs,\n-        OpenJPAStateManager sm, BitSet fields, JDBCFetchState fetchState,\n+        OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch,\n         int eager, boolean ident) {\n         // add class conditions so that they're cloned for any batched selects\n         boolean joinedSupers = false;\n@@ -887,27 +869,26 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n         // create all our eager selects so that those fields are reserved\n         // and cannot be reused during the actual eager select process,\n         // preventing infinite recursion\n-        JDBCFetchConfiguration fetch = getFetchConfiguration(fetchState);\n         eager = Math.min(eager, fetch.getEagerFetchMode());\n         FieldMapping eagerToMany = createEagerSelects(sel, mapping, sm, fields,\n-            fetchState, eager);\n+            fetch, eager);\n \n         // select all base class mappings; do this after batching so that\n         // the joins needed by these selects don't get in the WHERE clause\n         // of the batched selects\n         int seld = selectBaseMappings(sel, mapping, mapping, sm, fields,\n-            fetchState, eager, eagerToMany, ident, joinedSupers);\n+            fetch, eager, eagerToMany, ident, joinedSupers);\n \n         // select eager to-many relations last because during load they\n         // advance the result set and could exhaust it, so no other mappings\n         // can load afterwords\n         if (eagerToMany != null)\n             eagerToMany.selectEagerJoin(sel, sm, this, \n-            \t\t(JDBCFetchState)fetchState.traverse(eagerToMany), eager);\n+                fetch.traverseJDBC(eagerToMany), eager);\n \n         // optionally select subclass mappings\n         if (subs == sel.SUBS_JOINABLE || subs == sel.SUBS_ANY_JOINABLE)\n-            selectSubclassMappings(sel, mapping, sm, fetchState);\n+            selectSubclassMappings(sel, mapping, sm, fetch);\n         if (sm != null)\n             sel.setDistinct(false);\n         return seld > 0;\n@@ -918,14 +899,13 @@ public boolean select(Select sel, ClassMapping mapping, int subs,\n      * get into infinite recursive situations.\n      */\n     private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n-        OpenJPAStateManager sm, BitSet fields, JDBCFetchState fetchState,\n+        OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch,\n         int eager) {\n         if (mapping == null || eager == JDBCFetchConfiguration.EAGER_NONE)\n             return null;\n \n-        JDBCFetchConfiguration fetch = getFetchConfiguration(fetchState);\n-        FieldMapping eagerToMany = createEagerSelects(sel, mapping\n-            .getJoinablePCSuperclassMapping(), sm, fields, fetchState, eager);\n+        FieldMapping eagerToMany = createEagerSelects(sel, \n+            mapping.getJoinablePCSuperclassMapping(), sm, fields, fetch, eager);\n \n         FieldMapping[] fms = mapping.getDefinedFieldMappings();\n         boolean inEagerJoin = sel.hasEagerJoin(false);\n@@ -936,7 +916,7 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n             mode = fms[i].getEagerFetchMode();\n             if (mode == fetch.EAGER_NONE)\n                 continue;\n-            if (!requiresSelect(fms[i], sm, fields, fetchState))\n+            if (!requiresSelect(fms[i], sm, fields, fetch))\n                 continue;\n \n             // try to select with join first\n@@ -981,13 +961,13 @@ private FieldMapping createEagerSelects(Select sel, ClassMapping mapping,\n      * Determine if the given field needs to be selected.\n      */\n     private static boolean requiresSelect(FieldMapping fm,\n-        OpenJPAStateManager sm, BitSet fields, JDBCFetchState fetchState) {\n+        OpenJPAStateManager sm, BitSet fields, JDBCFetchConfiguration fetch) {\n         if (fields != null)\n             return fields.get(fm.getIndex());\n         if (sm != null && sm.getPCState() != PCState.TRANSIENT\n             && sm.getLoaded().get(fm.getIndex()))\n             return false;\n-        return fetchState.requiresFetch(fm);\n+        return fetch.requiresFetch(fm);\n     }\n \n     /**\n@@ -1007,9 +987,8 @@ private static boolean requiresSelect(FieldMapping fm,\n      */\n     private int selectBaseMappings(Select sel, ClassMapping mapping,\n         ClassMapping orig, OpenJPAStateManager sm, BitSet fields,\n-        JDBCFetchState fetchState, int eager, FieldMapping eagerToMany,\n+        JDBCFetchConfiguration fetch, int eager, FieldMapping eagerToMany,\n         boolean ident, boolean joined) {\n-        JDBCFetchConfiguration fetch = getFetchConfiguration(fetchState);\n         ClassMapping parent = mapping.getJoinablePCSuperclassMapping();\n         if (parent == null && !mapping.isMapped())\n             throw new InvalidStateException(_loc.get(\"virtual-mapping\", mapping\n@@ -1043,7 +1022,7 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n         } else {\n             // recurse on parent\n             pseld = selectBaseMappings(sel, parent, orig, sm, fields,\n-                fetchState, eager, eagerToMany, ident, joined);\n+                fetch, eager, eagerToMany, ident, joined);\n         }\n \n         // select the mappings in the given fields set, or based on fetch\n@@ -1062,18 +1041,18 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n             if (esel != null) {\n                 if (esel == sel)\n                     fms[i].selectEagerJoin(sel, sm, this, \n-                    \t(JDBCFetchState)fetchState.traverse(fms[i]), eager);\n+                    \tfetch.traverseJDBC(fms[i]), eager);\n                 else\n                     fms[i].selectEagerParallel(esel, sm, this, \n-                    \t(JDBCFetchState)fetchState.traverse(fms[i]), eager);\n+                    \tfetch.traverseJDBC(fms[i]), eager);\n                 seld = Math.max(0, seld);\n-            } else if (requiresSelect(fms[i], sm, fields, fetchState)) {\n+            } else if (requiresSelect(fms[i], sm, fields, fetch)) {\n                 fseld = fms[i].select(sel, sm, this, \n-                \t(JDBCFetchState)fetchState.traverse(fms[i]), eager);\n+                \tfetch.traverseJDBC(fms[i]), eager);\n                 seld = Math.max(fseld, seld);\n-            } else if (optSelect(fms[i], sel, sm, fetchState)) {\n+            } else if (optSelect(fms[i], sel, sm, fetch)) {\n                 fseld = fms[i].select(sel, sm, this, \n-                \t(JDBCFetchState)fetchState.traverse(fms[i]), fetch.EAGER_NONE);\n+                \tfetch.traverseJDBC(fms[i]), fetch.EAGER_NONE);\n \n                 // don't upgrade seld to > 0 based on these fields, since\n                 // they're not in the calculated field set\n@@ -1098,13 +1077,12 @@ private int selectBaseMappings(Select sel, ClassMapping mapping,\n      * case as an optimization.\n      */\n     private boolean optSelect(FieldMapping fm, Select sel,\n-        OpenJPAStateManager sm, JDBCFetchState fetchState) {\n+        OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n         return !fm.isDefaultFetchGroupExplicit()\n-            && (sm == null || sm.getPCState() == PCState.TRANSIENT || !sm\n-                .getLoaded().get(fm.getIndex()))\n-            && fm.supportsSelect(sel, sel.TYPE_TWO_PART, sm, this,\n-                getFetchConfiguration(fetchState)) > 0\n-            && fetchState.requiresFetch(fm);\n+            && (sm == null || sm.getPCState() == PCState.TRANSIENT \n+            || !sm.getLoaded().get(fm.getIndex()))\n+            && fm.supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, fetch) > 0\n+            && fetch.requiresFetch(fm);\n     }\n \n     /**\n@@ -1117,9 +1095,8 @@ private boolean optSelect(FieldMapping fm, Select sel,\n      * @param fetch the fetch configuration\n      */\n     private void selectSubclassMappings(Select sel, ClassMapping mapping,\n-        OpenJPAStateManager sm, JDBCFetchState fetchState) {\n+        OpenJPAStateManager sm, JDBCFetchConfiguration fetch) {\n         loadSubclasses(mapping);\n-        JDBCFetchConfiguration fetch = getFetchConfiguration(fetchState);\n         ClassMapping[] subMappings = mapping.getJoinablePCSubclassMappings();\n         if (subMappings.length == 0)\n             return;\n@@ -1145,15 +1122,10 @@ private void selectSubclassMappings(Select sel, ClassMapping mapping,\n             fms = subMappings[i].getDefinedFieldMappings();\n             for (int j = 0; j < fms.length; j++) {\n                 // make sure in one of configured fetch groups\n-            \tif (fetchState.requiresFetch(fms[j]) \n-            \t  || fms[j].supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, fetch) <= 0) \n+            \tif (fetch.requiresFetch(fms[j]) \n+            \t  || fms[j].supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, \n+                    fetch) <= 0) \n             \t\tcontinue;\n-//                if (!fms[j].isInDefaultFetchGroup()\n-//                    && !fetch.hasAnyFetchGroup(fms[j].getFetchGroups())\n-//                    && !fetch.hasField(fms[j].getFullName())\n-//                    && (fms[j].isDefaultFetchGroupExplicit() || fms[j]\n-//                        .supportsSelect(sel, sel.TYPE_TWO_PART, sm, this, fetch) <= 0))\n-//                    continue;\n \n                 // if we can join to the subclass, do so; much better chance\n                 // that the field will be able to select itself without joins\n@@ -1166,10 +1138,10 @@ private void selectSubclassMappings(Select sel, ClassMapping mapping,\n \n                 // if can select with tables already selected, do it\n                 if (fms[j].supportsSelect(sel, sel.TYPE_JOINLESS, sm, this,\n-                    fetch) > 0 && fetchState.requiresFetch(fms[j]))\n-                    fms[j].select(sel, null, this, \n-                        \t(JDBCFetchState)fetchState.traverse(fms[j]), \n-                        \tfetch.EAGER_NONE);\n+                    fetch) > 0 && fetch.requiresFetch(fms[j])) {\n+                    fms[j].select(sel, null, this, fetch.traverseJDBC (fms[j]),\n+                        fetch.EAGER_NONE);\n+                }\n             }\n         }\n     }"},{"sha":"c23c7317f6139e7bc0bb997d90028b36d0ff2815","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":38,"deletions":44,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -136,9 +136,8 @@ protected ResultObjectProvider executeQuery(Executor ex,\n                 .get(\"mult-mapping-aggregate\", Arrays.asList(metas)));\n \n         ClassMapping[] mappings = (ClassMapping[]) metas;\n-        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx\n-            .getFetchConfiguration();\n-        JDBCFetchState fetchState = (JDBCFetchState) fetch.newFetchState();\n+        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) \n+            ctx.getFetchConfiguration();\n         if (exps[0].fetchPaths != null) {\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n@@ -147,8 +146,8 @@ protected ResultObjectProvider executeQuery(Executor ex,\n         int eager = calculateEagerMode(exps[0], startIdx, endIdx);\n         int subclassMode = fetch.getSubclassFetchMode((ClassMapping) base);\n         DBDictionary dict = _store.getDBDictionary();\n-        long start = (mappings.length == 1 && dict.supportsSelectStartIndex) ? startIdx\n-            : 0L;\n+        long start = (mappings.length == 1 && dict.supportsSelectStartIndex) \n+            ? startIdx : 0L;\n         long end = (dict.supportsSelectEndIndex) ? endIdx : Long.MAX_VALUE;\n \n         // add selects with populate WHERE conditions to list\n@@ -158,26 +157,26 @@ protected ResultObjectProvider executeQuery(Executor ex,\n         BitSet nextBits = new BitSet();\n         boolean unionable = createWhereSelects(sels, mappings, selMappings,\n             subclasses, subclassBits, nextBits, facts, exps, params,\n-            fetchState, subclassMode)\n+            fetch, subclassMode)\n             && subclassMode == JDBCFetchConfiguration.EAGER_JOIN\n             && start == 0\n             && end == Long.MAX_VALUE;\n \n         // we might want to use lrs settings if we can't use the range\n         if (sels.size() > 1)\n             start = 0L;\n-        lrs = lrs\n-            || (fetch.getFetchBatchSize() >= 0 && (start != startIdx || end != endIdx));\n+        lrs = lrs || (fetch.getFetchBatchSize() >= 0 && (start != startIdx \n+            || end != endIdx));\n \n         ResultObjectProvider[] rops = null;\n         ResultObjectProvider rop = null;\n         if (unionable) {\n             Union union = _store.getSQLFactory().newUnion(\n                 (Select[]) sels.toArray(new Select[sels.size()]));\n             BitSet[] paged = populateUnion(union, mappings, subclasses, facts,\n-                exps, params, fetchState, lrs, eager, start, end);\n+                exps, params, fetch, lrs, eager, start, end);\n             union.setLRS(lrs);\n-            rop = executeUnion(union, mappings, exps, paged, fetchState);\n+            rop = executeUnion(union, mappings, exps, paged, fetch);\n         } else {\n             if (sels.size() > 1)\n                 rops = new ResultObjectProvider[sels.size()];\n@@ -188,10 +187,10 @@ protected ResultObjectProvider executeQuery(Executor ex,\n                 sel = (Select) sels.get(i);\n                 paged = populateSelect(sel, (ClassMapping) selMappings.get(i),\n                     subclassBits.get(i), (JDBCExpressionFactory) facts[idx],\n-                    exps[idx], params, fetchState, lrs, eager, start, end);\n+                    exps[idx], params, fetch, lrs, eager, start, end);\n \n                 rop = executeSelect(sel, (ClassMapping) selMappings.get(i),\n-                    exps[idx], paged, fetchState, start, end);\n+                    exps[idx], paged, fetch, start, end);\n                 if (rops != null)\n                     rops[i] = rop;\n \n@@ -222,7 +221,7 @@ protected ResultObjectProvider executeQuery(Executor ex,\n     private BitSet[] populateUnion(Union union, final ClassMapping[] mappings,\n         final boolean subclasses, final ExpressionFactory[] facts,\n         final QueryExpressions[] exps, final Object[] params,\n-        final JDBCFetchState fetchState, final boolean lrs, final int eager,\n+        final JDBCFetchConfiguration fetch, final boolean lrs, final int eager,\n         final long start, final long end) {\n         final BitSet[] paged = (exps[0].projections.length > 0) ? null\n             : new BitSet[mappings.length];\n@@ -231,7 +230,7 @@ protected ResultObjectProvider executeQuery(Executor ex,\n             public void select(Select sel, int idx) {\n                 BitSet bits = populateSelect(sel, mappings[idx], subclasses,\n                     (JDBCExpressionFactory) facts[idx], exps[idx], params,\n-                    fetchState, lrs, eager, start, end);\n+                    fetch, lrs, eager, start, end);\n                 if (paged != null)\n                     paged[idx] = bits;\n             }\n@@ -244,20 +243,20 @@ public void select(Select sel, int idx) {\n      */\n     private BitSet populateSelect(Select sel, ClassMapping mapping,\n         boolean subclasses, JDBCExpressionFactory fact, QueryExpressions exps,\n-        Object[] params, JDBCFetchState fetchState, boolean lrs, int eager,\n+        Object[] params, JDBCFetchConfiguration fetch, boolean lrs, int eager,\n         long start, long end) {\n         sel.setLRS(lrs);\n         sel.setRange(start, end);\n \n         BitSet paged = null;\n         if (exps.projections.length == 0) {\n             paged = PagingResultObjectProvider.getPagedFields(sel, mapping,\n-                _store, fetchState, eager, end - start);\n+                _store, fetch, eager, end - start);\n             if (paged != null)\n                 eager = JDBCFetchConfiguration.EAGER_JOIN;\n         }\n \n-        fact.select(this, mapping, subclasses, sel, exps, params, fetchState,\n+        fact.select(this, mapping, subclasses, sel, exps, params, fetch,\n             eager);\n         return paged;\n     }\n@@ -267,35 +266,33 @@ private BitSet populateSelect(Select sel, ClassMapping mapping,\n      */\n     private ResultObjectProvider executeUnion(Union union,\n         ClassMapping[] mappings, QueryExpressions[] exps, BitSet[] paged,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n         if (exps[0].projections.length > 0)\n             return new ProjectionResultObjectProvider(union, _store,\n-                fetchState, exps);\n+                fetch, exps);\n \n         if (paged != null)\n             for (int i = 0; i < paged.length; i++)\n                 if (paged[i] != null)\n                     return new PagingResultObjectProvider(union, mappings,\n-                        _store, fetchState, paged, Long.MAX_VALUE);\n+                        _store, fetch, paged, Long.MAX_VALUE);\n \n         return new InstanceResultObjectProvider(union, mappings[0], _store,\n-            fetchState);\n+            fetch);\n     }\n \n     /**\n      * Execute the given select.\n      */\n     private ResultObjectProvider executeSelect(Select sel,\n         ClassMapping mapping, QueryExpressions exps, BitSet paged,\n-        JDBCFetchState fetchState, long start, long end) {\n+        JDBCFetchConfiguration fetch, long start, long end) {\n         if (exps.projections.length > 0)\n-            return new ProjectionResultObjectProvider(sel, _store, fetchState,\n-                exps);\n+            return new ProjectionResultObjectProvider(sel, _store, fetch, exps);\n         if (paged != null)\n-            return new PagingResultObjectProvider(sel, mapping, _store,\n-                fetchState, paged, end - start);\n-        return new InstanceResultObjectProvider(sel, mapping, _store,\n-            fetchState);\n+            return new PagingResultObjectProvider(sel, mapping, _store, fetch, \n+                paged, end - start);\n+        return new InstanceResultObjectProvider(sel, mapping, _store, fetch);\n     }\n \n     /**\n@@ -305,7 +302,7 @@ private ResultObjectProvider executeSelect(Select sel,\n     private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n         List selMappings, boolean subclasses, BitSet subclassBits,\n         BitSet nextBits, ExpressionFactory[] facts, QueryExpressions[] exps,\n-        Object[] params, JDBCFetchState fetchState, int subclassMode) {\n+        Object[] params, JDBCFetchConfiguration fetch, int subclassMode) {\n         Select sel;\n         ClassMapping[] verts;\n         boolean unionable = true;\n@@ -317,7 +314,7 @@ private boolean createWhereSelects(List sels, ClassMapping[] mappings,\n                 subclassBits.set(sels.size());\n \n             // create criteria select and clone for each vert mapping\n-            sel = ((JDBCExpressionFactory) facts[i]).evaluate(this, fetchState,\n+            sel = ((JDBCExpressionFactory) facts[i]).evaluate(this, fetch,\n                 exps[i], params);\n             for (int j = 0; j < verts.length; j++) {\n                 selMappings.add(verts[j]);\n@@ -439,19 +436,18 @@ private Number executeBulkOperation(Executor ex, ClassMetaData base,\n             }\n         }\n \n-        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx\n-            .getFetchConfiguration();\n+        JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) \n+            ctx.getFetchConfiguration();\n         DBDictionary dict = _store.getDBDictionary();\n \n         SQLBuffer[] sql = new SQLBuffer[mappings.length];\n         JDBCExpressionFactory jdbcFactory;\n         Select sel;\n         for (int i = 0; i < mappings.length; i++) {\n             jdbcFactory = (JDBCExpressionFactory) facts[i];\n-            JDBCFetchState fetchState = (JDBCFetchState) fetch.newFetchState();\n-            sel = jdbcFactory.evaluate(this, fetchState, exps[i], params);\n+            sel = jdbcFactory.evaluate(this, fetch, exps[i], params);\n             jdbcFactory.select(this, mappings[i], subclasses, sel, exps[i],\n-                params, fetchState, JDBCFetchConfiguration.EAGER_NONE);\n+                params, fetch, JDBCFetchConfiguration.EAGER_NONE);\n \n             // specification of the \"udpates\" map indicates that this is\n             // an update query; otherwise, this is a delete statement\n@@ -580,7 +576,6 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n         ClassMapping[] mappings = (ClassMapping[]) metas;\n         JDBCFetchConfiguration fetch = (JDBCFetchConfiguration) ctx\n             .getFetchConfiguration();\n-        JDBCFetchState fetchState = (JDBCFetchState) fetch.newFetchState();\n         if (exps[0].fetchPaths != null) {\n             fetch.addFields(Arrays.asList(exps[0].fetchPaths));\n             fetch.addJoins(Arrays.asList(exps[0].fetchPaths));\n@@ -590,8 +585,8 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n         eager = Math.min(eager, JDBCFetchConfiguration.EAGER_JOIN);\n         int subclassMode = fetch.getSubclassFetchMode((ClassMapping) base);\n         DBDictionary dict = _store.getDBDictionary();\n-        long start = (mappings.length == 1 && dict.supportsSelectStartIndex) ? startIdx\n-            : 0L;\n+        long start = (mappings.length == 1 && dict.supportsSelectStartIndex) \n+            ? startIdx : 0L;\n         long end = (dict.supportsSelectEndIndex) ? endIdx : Long.MAX_VALUE;\n \n         // add selects with populate WHERE conditions to list\n@@ -600,27 +595,26 @@ protected Number executeUpdate(ClassMetaData base, ClassMetaData[] metas,\n         BitSet subclassBits = new BitSet();\n         BitSet nextBits = new BitSet();\n         boolean unionable = createWhereSelects(sels, mappings, selMappings,\n-            subclasses, subclassBits, nextBits, facts, exps, params,\n-            fetchState, subclassMode)\n-            && subclassMode == JDBCFetchConfiguration.EAGER_JOIN;\n+            subclasses, subclassBits, nextBits, facts, exps, params, fetch, \n+            subclassMode) && subclassMode == JDBCFetchConfiguration.EAGER_JOIN;\n         if (sels.size() > 1)\n             start = 0L;\n \n         if (unionable) {\n             Union union = _store.getSQLFactory().newUnion(\n                 (Select[]) sels.toArray(new Select[sels.size()]));\n             populateUnion(union, mappings, subclasses, facts, exps, params,\n-                fetchState, false, eager, start, end);\n+                fetch, false, eager, start, end);\n             if (union.isUnion())\n-                return new String[] { union.toSelect(false, fetch).getSQL(true) };\n+                return new String[] {union.toSelect(false, fetch).getSQL(true)};\n             sels = Arrays.asList(union.getSelects());\n         } else {\n             Select sel;\n             for (int i = 0, idx = 0; i < sels.size(); i++) {\n                 sel = (Select) sels.get(i);\n                 populateSelect(sel, (ClassMapping) selMappings.get(i),\n                     subclassBits.get(i), (JDBCExpressionFactory) facts[idx],\n-                    exps[idx], params, fetchState, false, eager, start, end);\n+                    exps[idx], params, fetch, false, eager, start, end);\n                 if (nextBits.get(i))\n                     idx++;\n             }"},{"sha":"c054e8d872402a6e2fa8a16cfd961ca2a1b81a28","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/MappedQueryResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -92,14 +92,12 @@ public Object getResultObject()\n         if (pcs.length == 0 && cols.length == 1)\n             return _mres.getObject(cols[0], JavaSQLTypes.JDBC_DEFAULT, null);\n         if (pcs.length == 1 && cols.length == 0)\n-            return _mres.load(pcs[0], _store,\n-                (JDBCFetchState) _fetch.newFetchState());\n+            return _mres.load(pcs[0], _store, _fetch);\n \n         // multiple objects\n         Object[] ret = new Object[pcs.length + cols.length];\n         for (int i = 0; i < pcs.length; i++)\n-            ret[i] = _mres.load(pcs[i], _store,\n-                (JDBCFetchState) _fetch.newFetchState());\n+            ret[i] = _mres.load(pcs[i], _store, _fetch);\n         for (int i = 0; i < cols.length; i++)\n             ret[pcs.length + i] = _mres.getObject(cols[i],\n                 JavaSQLTypes.JDBC_DEFAULT, null);\n@@ -162,31 +160,31 @@ public MappingResult(Result res) {\n          * {@link Result#load}.\n          */\n         public Object load(QueryResultMapping.PCResult pc, JDBCStore store,\n-            JDBCFetchState fetchState)\n+            JDBCFetchConfiguration fetch)\n             throws SQLException {\n             _pc = pc;\n             try {\n-                return load(pc.getCandidateTypeMapping(), store, fetchState);\n+                return load(pc.getCandidateTypeMapping(), store, fetch);\n             } finally {\n                 _pc = null;\n             }\n         }\n \n         public Object load(ClassMapping mapping, JDBCStore store,\n-            JDBCFetchState fetchState)\n+            JDBCFetchConfiguration fetch)\n             throws SQLException {\n-            return load(mapping, store, fetchState, null);\n+            return load(mapping, store, fetch, null);\n         }\n \n         public Object load(ClassMapping mapping, JDBCStore store,\n-            JDBCFetchState fetchState, Joins joins)\n+            JDBCFetchConfiguration fetch, Joins joins)\n             throws SQLException {\n             if (_pc == null)\n-                return super.load(mapping, store, fetchState, joins);\n+                return super.load(mapping, store, fetch, joins);\n \n             // we go direct to the store manager so we can tell it not to load\n             // anything additional\n-            return ((JDBCStoreManager) store).load(mapping, fetchState,\n+            return ((JDBCStoreManager) store).load(mapping, fetch,\n                 _pc.getExcludes(_requests), this);\n         }\n "},{"sha":"78cdb943410ba1d55cdc724de792134b3464f076","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -67,16 +67,14 @@\n      * @see #PagingResultObjectProvider\n      */\n     public static BitSet getPagedFields(Select sel, ClassMapping mapping,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode,\n         long size) {\n-        JDBCFetchConfiguration fetch = fetchState.getJDBCFetchConfiguration();\n         // if we have a range then we always use paging if there are any\n         // eager select fields; otherwise it depends on lrs and fetch settings\n         if (size == Long.MAX_VALUE || !sel.getAutoDistinct()) {\n             // not lrs?\n             if (!sel.isLRS())\n                 return null;\n-\n             // not configured for lazy loading?\n             if (fetch.getFetchBatchSize() < 0)\n                 return null;\n@@ -91,8 +89,7 @@ public static BitSet getPagedFields(Select sel, ClassMapping mapping,\n         FieldMapping[] fms = mapping.getDefinedFieldMappings();\n         BitSet paged = null;\n         for (int i = 0; i < fms.length; i++) {\n-            if (fetchState != null\n-                && !fetchState.requiresFetch(fms[i]))\n+            if (!fetch.requiresFetch(fms[i]))\n                 continue;\n \n             if (fms[i].supportsSelect(sel, sel.EAGER_PARALLEL, null, store,\n@@ -119,9 +116,9 @@ public static BitSet getPagedFields(Select sel, ClassMapping mapping,\n      * {@link Long#MAX_VALUE} for no known limit\n      */\n     public PagingResultObjectProvider(SelectExecutor sel,\n-        ClassMapping mapping, JDBCStore store, JDBCFetchState fetchState,\n+        ClassMapping mapping, JDBCStore store, JDBCFetchConfiguration fetch,\n         BitSet paged, long size) {\n-        this(sel, new ClassMapping[]{ mapping }, store, fetchState,\n+        this(sel, new ClassMapping[]{ mapping }, store, fetch,\n             new BitSet[]{ paged }, size);\n     }\n \n@@ -139,9 +136,9 @@ public PagingResultObjectProvider(SelectExecutor sel,\n      * {@link Long#MAX_VALUE} for no known limit\n      */\n     public PagingResultObjectProvider(SelectExecutor sel,\n-        ClassMapping[] mappings, JDBCStore store, JDBCFetchState fetchState,\n+        ClassMapping[] mappings, JDBCStore store, JDBCFetchConfiguration fetch,\n         BitSet[] paged, long size) {\n-        super(sel, store, fetchState);\n+        super(sel, store, fetch);\n         _mappings = mappings;\n         _paged = paged;\n \n@@ -255,7 +252,7 @@ private void fillPage()\n             // rather than use the standard result.load(), we go direct to\n             // the store manager so we can pass in our eager-fetched fields as\n             // fields to exclude from the initial load of the objects\n-            _page[i] = storeMgr.load(mapping, getFetchState(),\n+            _page[i] = storeMgr.load(mapping, getFetchConfiguration(),\n                 _paged[idx], res);\n             if (i != _page.length - 1 && !getResult().next()) {\n                 setSize(_pos + i + 1);\n@@ -287,7 +284,7 @@ private void loadEagerFields()\n         for (int i = 0, len = _paged[idx].length(); i < len; i++) {\n             if (_paged[idx].get(i)) {\n                 _mappings[idx].getFieldMapping(i).load(sm, store,\n-                    getFetchState());\n+                    getFetchConfiguration());\n             }\n         }\n     }\n@@ -354,7 +351,6 @@ private void executeEagerSelects(ClassMapping mapping, BitSet paged,\n \n         StoreContext ctx = store.getContext();\n         JDBCFetchConfiguration fetch = getFetchConfiguration();\n-        JDBCFetchState fetchState = (JDBCFetchState) fetch.newFetchState();\n         // do each batch select\n         Object res;\n         int esels = 0;\n@@ -377,14 +373,14 @@ private void executeEagerSelects(ClassMapping mapping, BitSet paged,\n                 esel = sel;\n \n             // get result\n-            fms[i].selectEagerParallel(esel, null, store, fetchState,\n+            fms[i].selectEagerParallel(esel, null, store, fetch,\n                 JDBCFetchConfiguration.EAGER_PARALLEL);\n             res = esel.execute(store, fetch);\n             try {\n                 // and load result into paged instances\n                 for (int j = start; j < end && _page[j] != null; j++)\n                     res = fms[i].loadEagerParallel(ctx.getStateManager\n-                        (_page[j]), store, fetchState, res);\n+                        (_page[j]), store, fetch, res);\n             } finally {\n                 if (res instanceof Closeable)\n                     try {"},{"sha":"49de6cfb4d6b4c496a98b26fd32aa9bb11f4ca31","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/ProjectionResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -39,8 +39,8 @@\n      * @param exps the query expressions\n      */\n     public ProjectionResultObjectProvider(SelectExecutor sel, JDBCStore store,\n-        JDBCFetchState fetchState, QueryExpressions exps) {\n-        this(sel, store, fetchState, new QueryExpressions[]{ exps });\n+        JDBCFetchConfiguration fetch, QueryExpressions exps) {\n+        this(sel, store, fetch, new QueryExpressions[]{ exps });\n     }\n \n     /**\n@@ -52,8 +52,8 @@ public ProjectionResultObjectProvider(SelectExecutor sel, JDBCStore store,\n      * @param exps the query expressions\n      */\n     public ProjectionResultObjectProvider(SelectExecutor sel, JDBCStore store,\n-        JDBCFetchState fetchState, QueryExpressions[] exps) {\n-        super(sel, store, fetchState);\n+        JDBCFetchConfiguration fetch, QueryExpressions[] exps) {\n+        super(sel, store, fetch);\n         _exps = exps;\n     }\n \n@@ -64,7 +64,7 @@ public Object getResultObject()\n         Object[] arr = new Object[_exps[idx].projections.length];\n         for (int i = 0; i < _exps[idx].projections.length; i++)\n             arr[i] = ((Val) _exps[idx].projections[i]).load(res, getStore(),\n-                getFetchState());\n+                getFetchConfiguration());\n         return arr;\n     }\n }"},{"sha":"299f7792690d2b5cc49f64610fa9d4afdc20b792","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","status":"modified","additions":2,"deletions":12,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SelectResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -36,7 +36,6 @@\n     private final SelectExecutor _sel;\n     private final JDBCStore _store;\n     private final JDBCFetchConfiguration _fetch;\n-    private final JDBCFetchState _fetchState;\n     private Result _res = null;\n     private int _size = -1;\n     private Boolean _ra = null;\n@@ -49,15 +48,10 @@\n      * @param fetch the fetch configuration, or null for the default\n      */\n     public SelectResultObjectProvider(SelectExecutor sel, JDBCStore store,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n         _sel = sel;\n         _store = store;\n-//\t\tif (fetch == null)\n-//\t\t\t_fetch = store.getFetchConfiguration ();\n-//\t\telse\n-//\t\t\t_fetch = fetch;\n-        _fetchState = fetchState;\n-        _fetch = fetchState.getJDBCFetchConfiguration();\n+        _fetch = fetch;\n     }\n \n     public SelectExecutor getSelect() {\n@@ -72,10 +66,6 @@ public JDBCFetchConfiguration getFetchConfiguration() {\n         return _fetch;\n     }\n \n-    public JDBCFetchState getFetchState() {\n-        return _fetchState;\n-    }\n-\n     public Result getResult() {\n         return _res;\n     }"},{"sha":"52a21fb84cf994524fa859f8f0fe4b1b756b4361","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -32,29 +32,29 @@\n     private static final String FALSE = \"1 <> 1\";\n \n     public void appendIsEmpty(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(FALSE);\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(TRUE);\n     }\n \n     public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        appendTo(sql, 0, sel, store, params, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(\" IS \").appendValue(null);\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        appendTo(sql, 0, sel, store, params, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(\" IS NOT \").appendValue(null);\n     }\n \n     public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(\"1\");\n     }\n }"},{"sha":"76fb814a0e57f9edbd98c33f19089a15c847a0df","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n@@ -108,38 +108,38 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n         sel.setAggregate(true);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n+        boolean pks, JDBCFetchConfiguration fetch) {\n         if (_arg != null)\n-            _arg.selectColumns(sel, store, params, true, fetchState);\n+            _arg.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -152,9 +152,9 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         if (_arg != null)\n-            _arg.calculateValue(sel, store, params, null, fetchState);\n+            _arg.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -167,26 +167,26 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _listener.appendTo(sql, getArgs(sel, store, params, fetchState),\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _listener.appendTo(sql, getArgs(sel, store, params, fetch),\n             _candidate, store);\n         sel.append(sql, _joins);\n     }\n \n     private FilterValue[] getArgs(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         if (_arg == null)\n             return null;\n         if (_arg instanceof Args) {\n             Val[] vals = ((Args) _arg).getVals();\n             FilterValue[] filts = new FilterValue[vals.length];\n             for (int i = 0; i < vals.length; i++)\n                 filts[i] = new FilterValueImpl(vals[i], sel, store, params,\n-                    fetchState);\n+                    fetch);\n             return filts;\n         }\n         return new FilterValue[]{\n-            new FilterValueImpl(_arg, sel, store, params, fetchState)\n+            new FilterValueImpl(_arg, sel, store, params, fetch)\n         };\n     }\n }"},{"sha":"433fd108e2153522cf07890fc2dd94cb982740ce","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AndExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -56,25 +56,25 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         if (_paren1)\n             buf.append(\"(\");\n-        _exp1.appendTo(buf, sel, store, params, fetchState);\n+        _exp1.appendTo(buf, sel, store, params, fetch);\n         if (_paren1)\n             buf.append(\")\");\n         buf.append(\" AND \");\n         if (_paren2)\n             buf.append(\"(\");\n-        _exp2.appendTo(buf, sel, store, params, fetchState);\n+        _exp2.appendTo(buf, sel, store, params, fetch);\n         if (_paren2)\n             buf.append(\")\");\n         sel.append(buf, _joins);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _exp1.selectColumns(sel, store, params, pks, fetchState);\n-        _exp2.selectColumns(sel, store, params, pks, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _exp1.selectColumns(sel, store, params, pks, fetch);\n+        _exp2.selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"7b5ee74365b2cec3fa77b984788cf47fd39f353b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n@@ -108,25 +108,25 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n+        boolean pks, JDBCFetchConfiguration fetch) {\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n         for (int i = 0; i < _args.length; i++)\n-            _args[i].selectColumns(sel, store, params, pks, fetchState);\n+            _args[i].selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n+        boolean asc, JDBCFetchConfiguration fetch) {\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n         return null;\n     }\n \n@@ -138,9 +138,9 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         for (int i = 0; i < _args.length; i++)\n-            _args[i].calculateValue(sel, store, params, null, fetchState);\n+            _args[i].calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -153,26 +153,26 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n }"},{"sha":"42ebb503d36e8f9742e6d8f4845c67679e97d465","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableAndExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -51,18 +51,18 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         boolean or = _exp instanceof OrExpression;\n         if (or)\n             buf.append(\"(\");\n-        _exp.appendTo(buf, sel, store, params, fetchState);\n+        _exp.appendTo(buf, sel, store, params, fetch);\n         if (or)\n             buf.append(\")\");\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _exp.selectColumns(sel, store, params, pks, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _exp.selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"b73b100be6647b84f939f30f1b6e0853cf167faa","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/BindVariableExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -59,12 +59,12 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         buf.append(\"1 = 1\");\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n     }\n \n     public Joins getJoins() {"},{"sha":"1481e3fc84b4b312eb9c62b083a87919ce5e5a3f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareEqualExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -79,9 +79,9 @@ private boolean isNull(Val val, Object[] params) {\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, _val2, fetchState);\n-        _val2.calculateValue(sel, store, params, _val1, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, _val2, fetch);\n+        _val2.calculateValue(sel, store, params, _val1, fetch);\n         if (!Filters.canConvert(_val1.getType(), _val2.getType(), false)\n             && !Filters.canConvert(_val2.getType(), _val1.getType(), false))\n             throw new UserException(_loc.get(\"cant-convert\", _val1.getType(),\n@@ -91,17 +91,17 @@ public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n             && ((Const) _val1).isSQLValueNull();\n         boolean val2Null = _val2 instanceof Const\n             && ((Const) _val2).isSQLValueNull();\n-        appendTo(buf, sel, store, params, fetchState, val1Null, val2Null);\n+        appendTo(buf, sel, store, params, fetch, val1Null, val2Null);\n         sel.append(buf, _joins);\n \n         _val1.clearParameters();\n         _val2.clearParameters();\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {\n@@ -120,7 +120,7 @@ public boolean hasVariable(Variable var) {\n      * Append the SQL for the comparison.\n      */\n     protected abstract void appendTo(SQLBuffer buf, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState,\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch,\n         boolean val1Null, boolean val2Null);\n \n     /**"},{"sha":"169f181632e17f436dd13ccdda83985cf8667c52","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CompareExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -64,27 +64,27 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, _val2, fetchState);\n-        _val2.calculateValue(sel, store, params, _val1, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, _val2, fetch);\n+        _val2.calculateValue(sel, store, params, _val1, fetch);\n         if (!Filters.canConvert(_val1.getType(), _val2.getType(), false)\n             && !Filters.canConvert(_val2.getType(), _val1.getType(), false))\n             throw new UserException(_loc.get(\"cant-convert\", _val1.getType(),\n                 _val2.getType()));\n \n         store.getDBDictionary().comparison(buf, _op,\n-            new FilterValueImpl(_val1, sel, store, params, fetchState),\n-            new FilterValueImpl(_val2, sel, store, params, fetchState));\n+            new FilterValueImpl(_val1, sel, store, params, fetch),\n+            new FilterValueImpl(_val2, sel, store, params, fetch));\n         sel.append(buf, _joins);\n \n         _val1.clearParameters();\n         _val2.clearParameters();\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"d4ba5005da8a44e4d06e02b6aa484ad94bd566da","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Concat.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.lang.Math;\n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n@@ -101,37 +101,37 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n-    public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+    public Object load(Result res, JDBCStore store, \n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -142,9 +142,9 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, null, fetchState);\n-        _val2.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, null, fetch);\n+        _val2.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -157,14 +157,14 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, _val2, fetchState);\n-        _val2.calculateValue(sel, store, params, _val1, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, _val2, fetch);\n+        _val2.calculateValue(sel, store, params, _val1, fetch);\n \n         sql.append(_part1);\n-        _val1.appendTo(sql, 0, sel, store, params, fetchState);\n+        _val1.appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(_part2);\n-        _val2.appendTo(sql, 0, sel, store, params, fetchState);\n+        _val2.appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(_part3);\n     }\n }"},{"sha":"2b7cbf0a021cbeebbf82419fdd53d486f3e9e040","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Const.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -19,7 +19,7 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -104,7 +104,7 @@ public Joins getJoins() {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         if (other instanceof PCPath)\n             _cols = ((PCPath) other).getColumns();\n         else\n@@ -116,35 +116,35 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         int code = JavaTypes.getTypeCode(getType());\n         if (code == JavaTypes.OBJECT)\n@@ -161,7 +161,7 @@ public int length() {\n     }\n \n     public void appendIsEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         Object obj = getValue();\n         if (obj instanceof Collection && ((Collection) obj).isEmpty())\n             sql.append(\"1 = 1\");\n@@ -172,7 +172,7 @@ else if (obj instanceof Map && ((Map) obj).isEmpty())\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         Object obj = getValue();\n         if (obj instanceof Collection && ((Collection) obj).isEmpty())\n             sql.append(\"1 <> 1\");\n@@ -183,7 +183,7 @@ else if (obj instanceof Map && ((Map) obj).isEmpty())\n     }\n \n     public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         Object obj = getValue();\n         if (obj instanceof Collection)\n             sql.appendValue(((Collection) obj).size());\n@@ -194,15 +194,15 @@ else if (obj instanceof Map)\n     }\n \n     public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (getSQLValue() == null)\n             sql.append(\"1 = 1\");\n         else\n             sql.append(\"1 <> 1\");\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (getSQLValue() != null)\n             sql.append(\"1 = 1\");\n         else"},{"sha":"b37ca372aa65b87bddc099f24373ae1f2245878f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstGetObjectId.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -56,9 +56,9 @@ public Object getSQLValue() {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        super.calculateValue(sel, store, params, other, fetchState);\n-        _constant.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        super.calculateValue(sel, store, params, other, fetch);\n+        _constant.calculateValue(sel, store, params, null, fetch);\n         _val = store.getContext().getObjectId(_constant.getValue());\n         if (other != null) {\n             _sqlVal = other.toDataStoreValue(_val, store);\n@@ -68,7 +68,7 @@ public void calculateValue(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_otherLen > 1)\n             sql.appendValue(((Object[]) _sqlVal)[index], getColumn(index));\n         else"},{"sha":"4892a1d74bb8cc1eb05e33fd16fb6f2f208b7aba","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstInstanceofExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -49,8 +49,8 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _const.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _const.calculateValue(sel, store, params, null, fetch);\n         if (_cls.isInstance(_const.getValue()))\n             buf.append(\"1 = 1\");\n         else\n@@ -59,8 +59,8 @@ public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _const.selectColumns(sel, store, params, pks, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _const.selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"32712d2b581a1ad0a426389ee94c06fe190620be","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/ConstPath.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -20,7 +20,7 @@\n import java.util.ListIterator;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -98,9 +98,9 @@ public Object getSQLValue() {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        super.calculateValue(sel, store, params, other, fetchState);\n-        _constant.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        super.calculateValue(sel, store, params, other, fetch);\n+        _constant.calculateValue(sel, store, params, null, fetch);\n         _val = _constant.getValue();\n         boolean failed = false;\n \n@@ -163,7 +163,7 @@ public void calculateValue(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_otherLen > 1)\n             sql.appendValue(((Object[]) _sqlVal)[index], getColumn(index));\n         else"},{"sha":"2957bb29fa46e83b3def5f57cbad9cd704d5eaeb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/CurrentDate.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Date;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -52,11 +52,11 @@ public Object getValue() {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_type == DATE)\n             sql.append(store.getDBDictionary().currentDateFunction);\n         else if (_type == TIME)"},{"sha":"828b91699d2eb4e4128c0e530aedf6791403a7a6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EmptyExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -36,11 +36,11 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n     }\n \n     public Joins getJoins() {"},{"sha":"7ffb593fc16222c36c565b30a4307cee043cef38","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EndsWithExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -66,9 +66,9 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, _val2, fetchState);\n-        _val2.calculateValue(sel, store, params, _val1, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, _val2, fetch);\n+        _val2.calculateValue(sel, store, params, _val1, fetch);\n \n         if (_val1 instanceof Const && ((Const) _val1).getValue() == null)\n             buf.append(\"1 <> 1\");\n@@ -84,7 +84,7 @@ else if (_val2 instanceof Const) {\n                         col = cols[0];\n                 }\n \n-                _val1.appendTo(buf, 0, sel, store, params, fetchState);\n+                _val1.appendTo(buf, 0, sel, store, params, fetch);\n                 buf.append(\" LIKE \");\n                 buf.appendValue(\"%\" + o.toString(), col);\n             }\n@@ -94,11 +94,11 @@ else if (_val2 instanceof Const) {\n             DBDictionary dict = store.getDBDictionary();\n             dict.assertSupport(_pre != null, \"StringLengthFunction\");\n             dict.substring(buf,\n-                new FilterValueImpl(_val1, sel, store, params, fetchState),\n+                new FilterValueImpl(_val1, sel, store, params, fetch),\n                 new StringLengthDifferenceFilterValue(sel, store, params,\n-                    fetchState), null);\n+                    fetch), null);\n             buf.append(\" = \");\n-            _val2.appendTo(buf, 0, sel, store, params, fetchState);\n+            _val2.appendTo(buf, 0, sel, store, params, fetch);\n         }\n \n         sel.append(buf, _joins);\n@@ -107,9 +107,9 @@ else if (_val2 instanceof Const) {\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {\n@@ -133,14 +133,14 @@ public boolean hasVariable(Variable var) {\n         private final Select _sel;\n         private final JDBCStore _store;\n         private final Object[] _params;\n-        private final JDBCFetchState _fetchState;\n+        private final JDBCFetchConfiguration _fetch;\n \n         public StringLengthDifferenceFilterValue(Select sel,\n-            JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+            JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n             _sel = sel;\n             _store = store;\n             _params = params;\n-            _fetchState = fetchState;\n+            _fetch = fetch;\n         }\n \n         public Class getType() {\n@@ -157,9 +157,9 @@ public void appendTo(SQLBuffer buf) {\n \n         public void appendTo(SQLBuffer buf, int index) {\n             buf.append(_pre);\n-            _val1.appendTo(buf, index, _sel, _store, _params, _fetchState);\n+            _val1.appendTo(buf, index, _sel, _store, _params, _fetch);\n             buf.append(_post).append(\" - \").append(_pre);\n-            _val2.appendTo(buf, index, _sel, _store, _params, _fetchState);\n+            _val2.appendTo(buf, index, _sel, _store, _params, _fetch);\n             buf.append(_post);\n         }\n "},{"sha":"607698e8e5a6c19bcde26268368c3cabdda27dfc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/EqualExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -36,7 +36,7 @@ public EqualExpression(Val val1, Val val2) {\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState,\n+        Object[] params, JDBCFetchConfiguration fetch,\n         boolean val1Null, boolean val2Null) {\n         if (val1Null && val2Null)\n             buf.appendValue(null).append(\" IS \").appendValue(null);\n@@ -47,27 +47,27 @@ else if (val1Null || val2Null) {\n                 for (int i = 0; i < len; i++) {\n                     if (i > 0)\n                         buf.append(\" AND \");\n-                    val.appendTo(buf, i, sel, store, params, fetchState);\n+                    val.appendTo(buf, i, sel, store, params, fetch);\n                     buf.append(\" IS \").appendValue(null);\n                 }\n             } else\n-                val.appendIsNull(buf, sel, store, params, fetchState);\n+                val.appendIsNull(buf, sel, store, params, fetch);\n         } else {\n             Val val1 = getValue1();\n             Val val2 = getValue2();\n             if (val1.length() == 1 && val2.length() == 1) {\n                 store.getDBDictionary().comparison(buf, \"=\",\n-                    new FilterValueImpl(val1, sel, store, params, fetchState),\n-                    new FilterValueImpl(val2, sel, store, params, fetchState));\n+                    new FilterValueImpl(val1, sel, store, params, fetch),\n+                    new FilterValueImpl(val2, sel, store, params, fetch));\n             } else {\n                 int len = java.lang.Math.max(val1.length(), val2.length());\n                 for (int i = 0; i < len; i++) {\n                     if (i > 0)\n                         buf.append(\" AND \");\n \n-                    val1.appendTo(buf, i, sel, store, params, fetchState);\n+                    val1.appendTo(buf, i, sel, store, params, fetch);\n                     buf.append(\" = \");\n-                    val2.appendTo(buf, i, sel, store, params, fetchState);\n+                    val2.appendTo(buf, i, sel, store, params, fetch);\n                 }\n             }\n         }"},{"sha":"275b1fc570868abd899579dda755adfd27d2441f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Exp.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -54,13 +54,13 @@ public void initialize(Select sel, JDBCStore store,\n      * should optionally include any joins this expression needs.\n      */\n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch);\n \n     /**\n      * Select just the columns for this value.\n      */\n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch);\n \n     /**\n      * Return the joins for this expression. These joins should be created"},{"sha":"bfaaed06c06d35c7648b6a2acedc2ff55f9cca9e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.sql.SQLException;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n@@ -121,39 +121,39 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n         if (_target != null)\n-            _target.selectColumns(sel, store, params, true, fetchState);\n+            _target.selectColumns(sel, store, params, true, fetch);\n         if (_arg != null)\n-            _arg.selectColumns(sel, store, params, true, fetchState);\n+            _arg.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -165,11 +165,11 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         if (_target != null)\n-            _target.calculateValue(sel, store, params, null, fetchState);\n+            _target.calculateValue(sel, store, params, null, fetch);\n         if (_arg != null)\n-            _arg.calculateValue(sel, store, params, null, fetchState);\n+            _arg.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -184,28 +184,28 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         FilterValue target = (_target == null) ? null\n-            : new FilterValueImpl(_target, sel, store, params, fetchState);\n-        _listener.appendTo(sql, target, getArgs(sel, store, params,\n-            fetchState), _candidate, store);\n+            : new FilterValueImpl(_target, sel, store, params, fetch);\n+        _listener.appendTo(sql, target, getArgs(sel, store, params, fetch), \n+            _candidate, store);\n         sel.append(sql, _joins);\n     }\n \n     private FilterValue[] getArgs(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         if (_arg == null)\n             return null;\n         if (_arg instanceof Args) {\n             Val[] vals = ((Args) _arg).getVals();\n             FilterValue[] filts = new FilterValue[vals.length];\n             for (int i = 0; i < vals.length; i++)\n                 filts[i] = new FilterValueImpl(vals[i], sel, store, params,\n-                    fetchState);\n+                    fetch);\n             return filts;\n         }\n         return new FilterValue[]{\n-            new FilterValueImpl(_arg, sel, store, params, fetchState)\n+            new FilterValueImpl(_arg, sel, store, params, fetch)\n         };\n     }\n \n@@ -219,9 +219,9 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n-        appendTo(sql, 0, sel, store, params, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n+        appendTo(sql, 0, sel, store, params, fetch);\n         sel.append(sql, getJoins());\n         clearParameters();\n     }"},{"sha":"4c8e3f7148495d68f2d9c6fb10743261e35b22a8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/FilterValueImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -36,15 +36,15 @@\n     private final Select _sel;\n     private final JDBCStore _store;\n     private final Object[] _params;\n-    private final JDBCFetchState _fetchState;\n+    private final JDBCFetchConfiguration _fetch;\n \n     public FilterValueImpl(Val val, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         _val = val;\n         _sel = sel;\n         _store = store;\n         _params = params;\n-        _fetchState = fetchState;\n+        _fetch = fetch;\n     }\n \n     public Class getType() {\n@@ -60,7 +60,7 @@ public void appendTo(SQLBuffer buf) {\n     }\n \n     public void appendTo(SQLBuffer buf, int index) {\n-        _val.appendTo(buf, index, _sel, _store, _params, _fetchState);\n+        _val.appendTo(buf, index, _sel, _store, _params, _fetch);\n     }\n \n     public String getColumnAlias(Column col) {"},{"sha":"66c57ec09bc94e62a40bdeef2acc80dbe752cc41","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/GetObjectId.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Joinable;\n@@ -134,38 +134,38 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        selectColumns(sel, store, params, true, fetchState);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _path.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _path.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        _path.groupBy(sel, store, params, fetchState);\n+        JDBCFetchConfiguration fetch) {\n+        _path.groupBy(sel, store, params, fetch);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        _path.orderBy(sel, store, params, asc, fetchState);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        _path.orderBy(sel, store, params, asc, fetch);\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n-        return _path.load(res, store, true, fetchState);\n+        return _path.load(res, store, true, fetch);\n     }\n \n     public boolean hasVariable(Variable var) {\n         return _path.hasVariable(var);\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _path.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _path.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -177,8 +177,8 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        _path.appendTo(sql, index, sel, store, params, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        _path.appendTo(sql, index, sel, store, params, fetch);\n     }\n }\n "},{"sha":"9a8e518a581b4251dcf1494288f4146e303eab6e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -20,7 +20,7 @@\n import java.util.Iterator;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -62,9 +62,9 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, null, fetchState);\n-        _const.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, null, fetch);\n+        _const.calculateValue(sel, store, params, null, fetch);\n \n         Collection coll = getCollection();\n         if (coll != null) {\n@@ -83,9 +83,9 @@ else if (_val instanceof GetObjectId)\n         if (coll == null || coll.isEmpty())\n             buf.append(\"1 <> 1\");\n         else if (_val.length() == 1)\n-            inContains(buf, sel, store, params, fetchState, coll, cols);\n+            inContains(buf, sel, store, params, fetch, coll, cols);\n         else\n-            orContains(buf, sel, store, params, fetchState, coll, cols);\n+            orContains(buf, sel, store, params, fetch, coll, cols);\n         sel.append(buf, _val.getJoins());\n \n         _val.clearParameters();\n@@ -96,9 +96,9 @@ else if (_val.length() == 1)\n      * Construct an IN clause with the value of the given collection.\n      */\n     private void inContains(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState,\n+        Object[] params, JDBCFetchConfiguration fetch,\n         Collection coll, Column[] cols) {\n-        _val.appendTo(buf, 0, sel, store, params, fetchState);\n+        _val.appendTo(buf, 0, sel, store, params, fetch);\n         buf.append(\" IN (\");\n \n         Column col = (cols != null && cols.length == 1) ? cols[0] : null;\n@@ -115,7 +115,7 @@ private void inContains(SQLBuffer buf, Select sel, JDBCStore store,\n      * so create a clause like '(a = b AND c = d) OR (e = f AND g = h) ...'\n      */\n     private void orContains(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState, Collection coll,\n+        Object[] params, JDBCFetchConfiguration fetch, Collection coll,\n         Column[] cols) {\n         if (coll.size() > 1)\n             buf.append(\"(\");\n@@ -132,7 +132,7 @@ private void orContains(SQLBuffer buf, Select sel, JDBCStore store,\n                 if (i > 0)\n                     buf.append(\" AND \");\n \n-                _val.appendTo(buf, i, sel, store, params, fetchState);\n+                _val.appendTo(buf, i, sel, store, params, fetch);\n                 if (vals[i] == null)\n                     buf.append(\" IS \");\n                 else\n@@ -149,9 +149,9 @@ private void orContains(SQLBuffer buf, Select sel, JDBCStore store,\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n-        _const.selectColumns(sel, store, params, pks, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n+        _const.selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"3ba4fb5edabdc91654257858f8e6e72aa408384a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InSubQExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -49,20 +49,20 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, null, fetchState);\n-        _sub.calculateValue(sel, store, params, null, fetchState);\n-        _val.appendTo(buf, 0, sel, store, params, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, null, fetch);\n+        _sub.calculateValue(sel, store, params, null, fetch);\n+        _val.appendTo(buf, 0, sel, store, params, fetch);\n         buf.append(\" IN \");\n-        _sub.appendTo(buf, 0, sel, store, params, fetchState);\n+        _sub.appendTo(buf, 0, sel, store, params, fetch);\n         _val.clearParameters();\n         _sub.clearParameters();\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n-        _sub.selectColumns(sel, store, params, pks, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n+        _sub.selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"5e5d7157a1f422e5e61765d003491ac5dd03c3df","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","status":"modified","additions":22,"deletions":23,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IndexOf.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -87,37 +87,37 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -128,9 +128,9 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, null, fetchState);\n-        _val2.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, null, fetch);\n+        _val2.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -143,19 +143,18 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        FilterValue str = new FilterValueImpl(_val1, sel, store, params,\n-            fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        FilterValue str = new FilterValueImpl(_val1, sel, store, params, fetch);\n         FilterValue search;\n         FilterValue start = null;\n         if (_val2 instanceof Args) {\n             Val[] args = ((Args) _val2).getVals();\n             search =\n-                new FilterValueImpl(args[0], sel, store, params, fetchState);\n+                new FilterValueImpl(args[0], sel, store, params, fetch);\n             start =\n-                new FilterValueImpl(args[1], sel, store, params, fetchState);\n+                new FilterValueImpl(args[1], sel, store, params, fetch);\n         } else\n-            search = new FilterValueImpl(_val2, sel, store, params, fetchState);\n+            search = new FilterValueImpl(_val2, sel, store, params, fetch);\n \n         store.getDBDictionary().indexOf(sql, str, search, start);\n     }"},{"sha":"47aed7116fd89270b223340d3c7b912b7f56f328","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InstanceofExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Discriminator;\n@@ -113,7 +113,7 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         // if no class indicator or a final class, just append true or false\n         // depending on whether the cast matches the expected type\n         if (_dsc == null) {\n@@ -134,7 +134,7 @@ public void appendTo(SQLBuffer sql, Select sel, JDBCStore store,\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n         if (_dsc != null)\n             sel.select(_dsc.getColumns(), _joins);\n     }"},{"sha":"3f57866960a8991f3142979cf8915c262b3fcf01","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsEmptyExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -46,16 +46,16 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, null, fetchState);\n-        _val.appendIsEmpty(buf, sel, store, params, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, null, fetch);\n+        _val.appendIsEmpty(buf, sel, store, params, fetch);\n         sel.append(buf, _val.getJoins());\n         _val.clearParameters();\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"c12b0a02a8bfd5610d01aca11f449683abb1f9ca","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/IsNotEmptyExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -46,16 +46,16 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, null, fetchState);\n-        _val.appendIsNotEmpty(buf, sel, store, params, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, null, fetch);\n+        _val.appendIsNotEmpty(buf, sel, store, params, fetch);\n         sel.append(buf, _val.getJoins());\n         _val.clearParameters();\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"02562a0e6e8b4f11687aacfd9a840d3cde16e02c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -16,7 +16,7 @@\n package org.apache.openjpa.jdbc.kernel.exps;\n \n import org.apache.commons.collections.map.LinkedMap;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStoreQuery;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n@@ -76,11 +76,11 @@ public JDBCExpressionFactory(ClassMapping type) {\n      * queries at the same time.\n      */\n     public synchronized Select evaluate(JDBCStoreQuery q,\n-        JDBCFetchState fetchState, QueryExpressions exps, Object[] params) {\n+        JDBCFetchConfiguration fetch, QueryExpressions exps, Object[] params) {\n         // figure out proper cache level based on parameters\n         int level = getCacheLevel(q, params);\n         return _cons.evaluate(q.getStore(), null, null, exps, params,\n-            level, fetchState);\n+            level, fetch);\n     }\n \n     /**\n@@ -116,9 +116,9 @@ private int getCacheLevel(JDBCStoreQuery q, Object[] params) {\n      */\n     public void select(JDBCStoreQuery q, ClassMapping mapping,\n         boolean subclasses, Select sel, QueryExpressions exps,\n-        Object[] params, JDBCFetchState fetchState, int eager) {\n+        Object[] params, JDBCFetchConfiguration fetch, int eager) {\n         _cons.select(q.getStore(), mapping, subclasses, sel, exps,\n-            params, fetchState, eager);\n+            params, fetch, eager);\n     }\n \n     public Expression emptyExpression() {"},{"sha":"737107631792a83af9363ee22e6a07c5ca2249f7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Lit.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -65,8 +65,8 @@ public void setValue(Object val) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        super.calculateValue(sel, store, params, other, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        super.calculateValue(sel, store, params, other, fetch);\n         if (other != null) {\n             _sqlVal = other.toDataStoreValue(_val, store);\n             _otherLen = other.length();\n@@ -75,7 +75,7 @@ public void calculateValue(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_otherLen > 1)\n             sql.appendValue(((Object[]) _sqlVal)[index], getColumn(index));\n         else"},{"sha":"1a734e039651df1e46ae7a7d9d5db3d9331b8f1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/MatchesExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -60,9 +60,9 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, _const, fetchState);\n-        _const.calculateValue(sel, store, params, _val, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, _const, fetch);\n+        _const.calculateValue(sel, store, params, _val, fetch);\n \n         Column col = null;\n         if (_val instanceof PCPath) {\n@@ -91,7 +91,7 @@ public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n             // append target\n             if (ignoreCase)\n                 buf.append(\"LOWER(\");\n-            _val.appendTo(buf, 0, sel, store, params, fetchState);\n+            _val.appendTo(buf, 0, sel, store, params, fetch);\n             if (ignoreCase)\n                 buf.append(\")\");\n \n@@ -114,9 +114,9 @@ public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n-        _const.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n+        _const.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"afc70da1d0e7daff4c3e584b74bde99b71d0d29f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Math.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -98,37 +98,37 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -139,9 +139,9 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, _val2, fetchState);\n-        _val2.calculateValue(sel, store, params, _val1, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, _val2, fetch);\n+        _val2.calculateValue(sel, store, params, _val1, fetch);\n     }\n \n     public void clearParameters() {\n@@ -154,10 +154,10 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         store.getDBDictionary().mathFunction(sql, _op,\n-            new FilterValueImpl(_val1, sel, store, params, fetchState),\n-            new FilterValueImpl(_val2, sel, store, params, fetchState));\n+            new FilterValueImpl(_val1, sel, store, params, fetch),\n+            new FilterValueImpl(_val2, sel, store, params, fetch));\n     }\n }\n "},{"sha":"6f401ffa78c01ced49c7c037f2c4345c53cfb385","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotContainsExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -49,7 +49,7 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         DBDictionary dict = store.getDBDictionary();\n         dict.assertSupport(dict.supportsSubselect, \"SupportsSubselect\");\n \n@@ -59,17 +59,17 @@ public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n         sub.where(sub.and(null, _exp.getJoins()));\n \n         SQLBuffer where = new SQLBuffer(dict).append(\"(\");\n-        _exp.appendTo(where, sub, store, params, fetchState);\n+        _exp.appendTo(where, sub, store, params, fetch);\n         if (where.getSQL().length() > 1)\n             sub.where(where.append(\")\"));\n \n         buf.append(\"0 = \");\n-        buf.appendCount(sub, fetchState.getJDBCFetchConfiguration());\n+        buf.appendCount(sub, fetch);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _exp.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _exp.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"d7a2465139b285ebfa8b5d6af56073b20e046baf","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotEqualExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -36,7 +36,7 @@ public NotEqualExpression(Val val1, Val val2) {\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState, boolean val1Null,\n+        Object[] params, JDBCFetchConfiguration fetch, boolean val1Null,\n         boolean val2Null) {\n         if (val1Null && val2Null)\n             buf.appendValue(null).append(\" IS NOT \").appendValue(null);\n@@ -47,27 +47,27 @@ else if (val1Null || val2Null) {\n                 for (int i = 0; i < len; i++) {\n                     if (i > 0)\n                         buf.append(\" AND \");\n-                    val.appendTo(buf, i, sel, store, params, fetchState);\n+                    val.appendTo(buf, i, sel, store, params, fetch);\n                     buf.append(\" IS NOT \").appendValue(null);\n                 }\n             } else\n-                val.appendIsNotNull(buf, sel, store, params, fetchState);\n+                val.appendIsNotNull(buf, sel, store, params, fetch);\n         } else {\n             Val val1 = getValue1();\n             Val val2 = getValue2();\n             if (val1.length() == 1 && val2.length() == 1) {\n                 store.getDBDictionary().comparison(buf, \"<>\",\n-                    new FilterValueImpl(val1, sel, store, params, fetchState),\n-                    new FilterValueImpl(val2, sel, store, params, fetchState));\n+                    new FilterValueImpl(val1, sel, store, params, fetch),\n+                    new FilterValueImpl(val2, sel, store, params, fetch));\n             } else {\n                 int len = java.lang.Math.max(val1.length(), val2.length());\n                 buf.append(\"(\");\n                 for (int i = 0; i < len; i++) {\n                     if (i > 0)\n                         buf.append(\" OR \");\n-                    val1.appendTo(buf, i, sel, store, params, fetchState);\n+                    val1.appendTo(buf, i, sel, store, params, fetch);\n                     buf.append(\" <> \");\n-                    val2.appendTo(buf, i, sel, store, params, fetchState);\n+                    val2.appendTo(buf, i, sel, store, params, fetch);\n                 }\n                 buf.append(\")\");\n             }"},{"sha":"a191eaf3dd3c0feeafa5f265332135a80627fe1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/NotExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -48,15 +48,15 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         buf.append(\"NOT (\");\n-        _exp.appendTo(buf, sel, store, params, fetchState);\n+        _exp.appendTo(buf, sel, store, params, fetch);\n         buf.append(\")\");\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _exp.selectColumns(sel, store, params, pks, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _exp.selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"9203658272ca3c86e68154b118d2a505af67ee77","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Null.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -40,11 +40,11 @@ public Object getValue() {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         sql.appendValue(null);\n     }\n "},{"sha":"fab263b8c0ecc56bd9d9bfa4506b1d77330b2c0b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/OrExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -19,7 +19,7 @@\n import java.util.Iterator;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n@@ -73,24 +73,24 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         boolean paren = _joins != null && !_joins.isEmpty();\n         if (paren)\n             buf.append(\"(\");\n \n-        _exp1.appendTo(buf, sel, store, params, fetchState);\n+        _exp1.appendTo(buf, sel, store, params, fetch);\n         buf.append(\" OR \");\n-        _exp2.appendTo(buf, sel, store, params, fetchState);\n+        _exp2.appendTo(buf, sel, store, params, fetch);\n \n         if (paren)\n             buf.append(\")\");\n         sel.append(buf, _joins);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _exp1.selectColumns(sel, store, params, pks, fetchState);\n-        _exp2.selectColumns(sel, store, params, pks, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _exp1.selectColumns(sel, store, params, pks, fetch);\n+        _exp2.selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public Joins getJoins() {"},{"sha":"2b57502d36f661b4deea8ad0c26b167ab9aeabb3","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":19,"deletions":20,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -21,7 +21,6 @@\n import java.util.ListIterator;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -471,12 +470,12 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        selectColumns(sel, store, params, pks, fetchState);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n         ClassMapping mapping = getClassMapping();\n         if (mapping == null || !_joinedRel)\n             sel.select(getColumns(), _joins);\n@@ -490,42 +489,42 @@ else if (pks)\n             // the candidate class on the select\n             int subs = (_type == UNBOUND_VAR) ? sel.SUBS_JOINABLE\n                 : sel.SUBS_ANY_JOINABLE;\n-            sel.select(mapping, subs, store, fetchState,\n+            sel.select(mapping, subs, store, fetch,\n                 JDBCFetchConfiguration.EAGER_NONE, sel.outer(_joins));\n         }\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n         sel.groupBy(getColumns(), sel.outer(_joins), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n+        boolean asc, JDBCFetchConfiguration fetch) {\n         sel.orderBy(getColumns(), asc, sel.outer(_joins), false);\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n-        return load(res, store, false, fetchState);\n+        return load(res, store, false, fetch);\n     }\n \n     Object load(Result res, JDBCStore store, boolean pks,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         ClassMapping mapping = getClassMapping();\n         if (mapping != null && (_field == null || !_field.isEmbedded())) {\n             if (pks)\n                 return mapping.getObjectId(store, res, null, true, _joins);\n-            return res.load(mapping, store, fetchState, _joins);\n+            return res.load(mapping, store, fetch, _joins);\n         }\n \n         Object ret;\n         if (_key)\n-            ret = _field.loadKeyProjection(store, fetchState, res, _joins);\n+            ret = _field.loadKeyProjection(store, fetch, res, _joins);\n         else\n-            ret = _field.loadProjection(store, fetchState, res, _joins);\n+            ret = _field.loadProjection(store, fetch, res, _joins);\n         if (_cast != null)\n             ret = Filters.convert(ret, _cast);\n         return ret;\n@@ -545,7 +544,7 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         // we don't create the SQL b/c it forces the Select to cache aliases\n         // for the tables we use, and these aliases might not ever be used if\n         // we eventually call appendIsEmpty or appendIsNull rather than appendTo\n@@ -559,7 +558,7 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         Column col = getColumns()[index];\n \n         // if select is null, it means we are not aliasing columns\n@@ -571,39 +570,39 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n     }\n \n     public void appendIsEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n             sql.append(\"1 <> 1\");\n         else\n             _field.appendIsEmpty(sql, sel, _joins);\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n             sql.append(\"1 <> 1\");\n         else\n             _field.appendIsNotEmpty(sql, sel, _joins);\n     }\n \n     public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n             sql.append(\"1\");\n         else\n             _field.appendSize(sql, sel, _joins);\n     }\n \n     public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n             sql.append(\"1 <> 1\");\n         else\n             _field.appendIsNull(sql, sel, _joins);\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_field == null)\n             sql.append(\"1 = 1\");\n         else"},{"sha":"07d6e02d630bc3ad20440b6827a9691cb11facf2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Param.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.util.Collection;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -92,8 +92,8 @@ public Object getValue(Object[] params) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        super.calculateValue(sel, store, params, other, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        super.calculateValue(sel, store, params, other, fetch);\n         _val = Filters.convert(params[_idx], getType());\n         if (other != null && !_container) {\n             _sqlVal = other.toDataStoreValue(_val, store);\n@@ -103,7 +103,7 @@ public void calculateValue(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         if (_otherLen > 1)\n             sql.appendValue(((Object[]) _sqlVal)[index], getColumn(index));\n         else"},{"sha":"9f726370c9a094c184efd7d452307573f94878b9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":18,"deletions":25,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -19,7 +19,6 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n@@ -60,7 +59,7 @@ public boolean isExtent() {\n      */\n     public Select evaluate(JDBCStore store, Select parent, String alias,\n         QueryExpressions exps, Object[] params, int level,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n         // already know that this query is equivalent to an extent?\n         Select sel;\n         if (_extent) {\n@@ -85,8 +84,7 @@ public Select evaluate(JDBCStore store, Select parent, String alias,\n         } else {\n             // create a new select and initialize it with the joins needed for\n             // the criteria of this query\n-            sel = newJoinsSelect(store, parent, alias, exps, params,\n-                fetchState);\n+            sel = newJoinsSelect(store, parent, alias, exps, params, fetch);\n         }\n \n         // if this select wasn't cloned from a full template,\n@@ -97,7 +95,7 @@ public Select evaluate(JDBCStore store, Select parent, String alias,\n             // query should be treated like an extent\n             Select inner = sel.getFromSelect();\n             SQLBuffer where = buildWhere((inner != null) ? inner : sel,\n-                store, exps.filter, params, fetchState);\n+                store, exps.filter, params, fetch);\n             if (where == null && exps.projections.length == 0\n                 && exps.ordering.length == 0\n                 && (sel.getJoins() == null || sel.getJoins().isEmpty())) {\n@@ -132,12 +130,11 @@ public Select evaluate(JDBCStore store, Select parent, String alias,\n             if (exps.having != null) {\n                 Exp havingExp = (Exp) exps.having;\n                 SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-                havingExp.appendTo(buf, sel, store, params, fetchState);\n+                havingExp.appendTo(buf, sel, store, params, fetch);\n                 sel.having(buf);\n             }\n             for (int i = 0; i < exps.grouping.length; i++)\n-                ((Val) exps.grouping[i]).groupBy(sel, store, params,\n-                    fetchState);\n+                ((Val) exps.grouping[i]).groupBy(sel, store, params, fetch);\n \n             // if template is still null at this point, must be a full cache\n             if (_template == null && level == CACHE_FULL) {\n@@ -154,13 +151,9 @@ public Select evaluate(JDBCStore store, Select parent, String alias,\n      */\n     private Select newJoinsSelect(JDBCStore store, Select parent,\n         String alias, QueryExpressions exps, Object[] params,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n         Select sel = store.getSQLFactory().newSelect();\n         sel.setAutoDistinct((exps.distinct & exps.DISTINCT_AUTO) != 0);\n-        JDBCFetchConfiguration fetch = (fetchState == null)\n-            ?\n-            (JDBCFetchConfiguration) store.getContext().getFetchConfiguration()\n-            : fetchState.getJDBCFetchConfiguration();\n         sel.setJoinSyntax(fetch.getJoinSyntax());\n         sel.setParent(parent, alias);\n         initializeJoins(sel, store, exps, params);\n@@ -267,12 +260,12 @@ private void initializeJoins(Select sel, JDBCStore store,\n      * Create the where sql.\n      */\n     private SQLBuffer buildWhere(Select sel, JDBCStore store,\n-        Expression filter, Object[] params, JDBCFetchState fetchState) {\n+        Expression filter, Object[] params, JDBCFetchConfiguration fetch) {\n         // create where buffer\n         SQLBuffer where = new SQLBuffer(store.getDBDictionary());\n         where.append(\"(\");\n         Exp filterExp = (Exp) filter;\n-        filterExp.appendTo(where, sel, store, params, fetchState);\n+        filterExp.appendTo(where, sel, store, params, fetch);\n \n         if (where.sqlEquals(\"(\") || where.sqlEquals(\"(1 = 1\"))\n             return null;\n@@ -284,7 +277,7 @@ private SQLBuffer buildWhere(Select sel, JDBCStore store,\n      */\n     public void select(JDBCStore store, ClassMapping mapping,\n         boolean subclasses, Select sel, QueryExpressions exps,\n-        Object[] params, JDBCFetchState fetchState, int eager) {\n+        Object[] params, JDBCFetchConfiguration fetch, int eager) {\n         Select inner = sel.getFromSelect();\n         Val val;\n         Joins joins = null;\n@@ -295,12 +288,12 @@ public void select(JDBCStore store, ClassMapping mapping,\n         // ordering gets applied after query ordering\n         for (int i = 0; i < exps.ordering.length; i++)\n             ((Val) exps.ordering[i]).orderBy(sel, store, params,\n-                exps.ascending[i], fetchState);\n+                exps.ascending[i], fetch);\n \n         // if no result string set, select matching objects like normal\n         if (exps.projections.length == 0 && sel.getParent() == null) {\n             int subs = (subclasses) ? sel.SUBS_JOINABLE : sel.SUBS_NONE;\n-            sel.selectIdentifier(mapping, subs, store, fetchState, eager);\n+            sel.selectIdentifier(mapping, subs, store, fetch, eager);\n         } else if (exps.projections.length == 0) {\n             // subselect for objects; we really just need the primary key values\n             sel.select(mapping.getPrimaryKeyColumns(), joins);\n@@ -316,30 +309,30 @@ public void select(JDBCStore store, ClassMapping mapping,\n             for (int i = 0; i < exps.projections.length; i++) {\n                 val = (Val) exps.projections[i];\n                 if (inner != null)\n-                    val.selectColumns(inner, store, params, pks, fetchState);\n-                val.select(sel, store, params, pks, fetchState);\n+                    val.selectColumns(inner, store, params, pks, fetch);\n+                val.select(sel, store, params, pks, fetch);\n             }\n \n             // make sure grouping and having columns are selected since it\n             // is required by most DBs.  put them last so they don't affect\n             // result processing\n             if (exps.having != null && inner != null)\n                 ((Exp) exps.having).selectColumns(inner, store, params, true,\n-                    fetchState);\n+                    fetch);\n             for (int i = 0; i < exps.grouping.length; i++) {\n                 val = (Val) exps.grouping[i];\n                 if (inner != null)\n-                    val.selectColumns(inner, store, params, true, fetchState);\n-                val.select(sel, store, params, true, fetchState);\n+                    val.selectColumns(inner, store, params, true, fetch);\n+                val.select(sel, store, params, true, fetch);\n             }\n         }\n \n         // select order data last so it doesn't affect result processing\n         for (int i = 0; i < exps.ordering.length; i++) {\n             val = (Val) exps.ordering[i];\n             if (inner != null)\n-                val.selectColumns(inner, store, params, true, fetchState);\n-            val.select(sel, store, params, true, fetchState);\n+                val.selectColumns(inner, store, params, true, fetch);\n+            val.select(sel, store, params, true, fetch);\n         }\n \n         // add conditions limiting the projections to the proper classes; if"},{"sha":"393f5f8bd1341b3e4024ec1e4115878e6ed18c08","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Size.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,7 +15,7 @@\n  */\n package org.apache.openjpa.jdbc.kernel.exps;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n@@ -40,9 +40,9 @@ public void initialize(Select sel, JDBCStore store, boolean nullTest) {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        getVal().calculateValue(sel, store, params, null, fetchState);\n-        getVal().appendSize(sql, sel, store, params, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        getVal().calculateValue(sel, store, params, null, fetch);\n+        getVal().appendSize(sql, sel, store, params, fetch);\n         sel.append(sql, getVal().getJoins());\n         getVal().clearParameters();\n     }"},{"sha":"8d0aae3bffd707390b0f6a9927130ee492671d7e","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StartsWithExpression.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -67,9 +67,9 @@ public void initialize(Select sel, JDBCStore store,\n     }\n \n     public void appendTo(SQLBuffer buf, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, _val2, fetchState);\n-        _val2.calculateValue(sel, store, params, _val1, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, _val2, fetch);\n+        _val2.calculateValue(sel, store, params, _val1, fetch);\n \n         if (_val1 instanceof Const && ((Const) _val1).getValue() == null)\n             buf.append(\"1 <> 1\");\n@@ -85,7 +85,7 @@ else if (_val2 instanceof Const) {\n                         col = cols[0];\n                 }\n \n-                _val1.appendTo(buf, 0, sel, store, params, fetchState);\n+                _val1.appendTo(buf, 0, sel, store, params, fetch);\n                 buf.append(\" LIKE \");\n                 buf.appendValue(o.toString() + \"%\", col);\n             }\n@@ -95,11 +95,11 @@ else if (_val2 instanceof Const) {\n             DBDictionary dict = store.getDBDictionary();\n             dict.assertSupport(_pre != null, \"StringLengthFunction\");\n             dict.substring(buf,\n-                new FilterValueImpl(_val1, sel, store, params, fetchState),\n+                new FilterValueImpl(_val1, sel, store, params, fetch),\n                 new ZeroFilterValue(sel),\n-                new StringLengthFilterValue(sel, store, params, fetchState));\n+                new StringLengthFilterValue(sel, store, params, fetch));\n             buf.append(\" = \");\n-            _val2.appendTo(buf, 0, sel, store, params, fetchState);\n+            _val2.appendTo(buf, 0, sel, store, params, fetch);\n         }\n \n         sel.append(buf, _joins);\n@@ -108,9 +108,9 @@ else if (_val2 instanceof Const) {\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public Joins getJoins() {\n@@ -199,14 +199,14 @@ public FieldMapping getFieldMapping() {\n         private final Select _sel;\n         private final JDBCStore _store;\n         private final Object[] _params;\n-        private final JDBCFetchState _fetchState;\n+        private final JDBCFetchConfiguration _fetch;\n \n         public StringLengthFilterValue(Select sel, JDBCStore store,\n-            Object[] params, JDBCFetchState fetchState) {\n+            Object[] params, JDBCFetchConfiguration fetch) {\n             _sel = sel;\n             _store = store;\n             _params = params;\n-            _fetchState = fetchState;\n+            _fetch = fetch;\n         }\n \n         public Class getType() {\n@@ -223,7 +223,7 @@ public void appendTo(SQLBuffer buf) {\n \n         public void appendTo(SQLBuffer buf, int index) {\n             buf.append(_pre);\n-            _val2.appendTo(buf, index, _sel, _store, _params, _fetchState);\n+            _val2.appendTo(buf, index, _sel, _store, _params, _fetch);\n             buf.append(_post);\n         }\n "},{"sha":"2dd4716a3827ff4d839221b07a95bb10e426ce4d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/StringFunction.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -76,36 +76,36 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -116,8 +116,8 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -129,9 +129,9 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(_pre);\n-        _val.appendTo(sql, 0, sel, store, params, fetchState);\n+        _val.appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(_post);\n     }\n }"},{"sha":"108dccc3e184d7c8de6ae1ea417394cba955e671","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","status":"modified","additions":27,"deletions":29,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SubQ.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n@@ -123,34 +122,34 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        selectColumns(sel, store, params, pks, fetchState);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        selectColumns(sel, store, params, pks, fetch);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n+        Object[] params, JDBCFetchConfiguration fetch) {\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -176,7 +175,7 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n     }\n \n     public void clearParameters() {\n@@ -187,18 +186,17 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        appendTo(sql, index, sel, store, params, fetchState, false);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        appendTo(sql, index, sel, store, params, fetch, false);\n     }\n \n     private void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState,\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch,\n         boolean size) {\n-        JDBCFetchConfiguration fetch = fetchState.getJDBCFetchConfiguration();\n         sel = _cons.evaluate(store, sel, _alias, _exps, params,\n-            _cons.CACHE_NULL, fetchState);\n+            _cons.CACHE_NULL, fetch);\n         _cons.select(store, _candidate, _subs, sel, _exps, params,\n-            fetchState, fetch.EAGER_NONE);\n+            fetch, fetch.EAGER_NONE);\n         sel.setRange(_startIdx, _endIdx);\n \n         if (size)\n@@ -208,31 +206,31 @@ private void appendTo(SQLBuffer sql, int index, Select sel,\n     }\n \n     public void appendIsEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(\"NOT EXISTS \");\n-        appendTo(sql, 0, sel, store, params, fetchState);\n+        appendTo(sql, 0, sel, store, params, fetch);\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(\"EXISTS \");\n-        appendTo(sql, 0, sel, store, params, fetchState);\n+        appendTo(sql, 0, sel, store, params, fetch);\n     }\n \n     public void appendSize(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        appendTo(sql, 0, sel, store, params, fetchState, true);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        appendTo(sql, 0, sel, store, params, fetch, true);\n     }\n \n     public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        appendTo(sql, 0, sel, store, params, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(\" IS NULL\");\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        appendTo(sql, 0, sel, store, params, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(\" IS NOT NULL\");\n     }\n }"},{"sha":"80d4a59c2982508251d4865d41252212e0e51490","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","status":"modified","additions":22,"deletions":23,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Substring.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -83,37 +83,37 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val1.selectColumns(sel, store, params, true, fetchState);\n-        _val2.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val1.selectColumns(sel, store, params, true, fetch);\n+        _val2.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -124,9 +124,9 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _val1.calculateValue(sel, store, params, null, fetchState);\n-        _val2.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _val1.calculateValue(sel, store, params, null, fetch);\n+        _val2.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -139,18 +139,17 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        FilterValue str = new FilterValueImpl(_val1, sel, store, params,\n-            fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        FilterValue str = new FilterValueImpl(_val1, sel, store, params, fetch);\n         FilterValue start;\n         FilterValue end = null;\n         if (_val2 instanceof Args) {\n             Val[] args = ((Args) _val2).getVals();\n             start =\n-                new FilterValueImpl(args[0], sel, store, params, fetchState);\n-            end = new FilterValueImpl(args[1], sel, store, params, fetchState);\n+                new FilterValueImpl(args[0], sel, store, params, fetch);\n+            end = new FilterValueImpl(args[1], sel, store, params, fetch);\n         } else\n-            start = new FilterValueImpl(_val2, sel, store, params, fetchState);\n+            start = new FilterValueImpl(_val2, sel, store, params, fetch);\n \n         store.getDBDictionary().substring(sql, str, start, end);\n     }"},{"sha":"2733e1aad27b7b7b2ebbf3ca86ccfe67c6d72c95","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Trim.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.lang.Math;\n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n@@ -98,36 +98,36 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -138,8 +138,8 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -151,9 +151,9 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, _trimChar, fetchState);\n-        _trimChar.calculateValue(sel, store, params, _val, fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, _trimChar, fetch);\n+        _trimChar.calculateValue(sel, store, params, _val, fetch);\n \n         int fromPart = _func.indexOf(\"{0}\");\n         int charPart = _func.indexOf(\"{1}\");\n@@ -172,12 +172,12 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n \n         sql.append(part1);\n         (fromPart < charPart ? _val : _trimChar).\n-            appendTo(sql, 0, sel, store, params, fetchState);\n+            appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(part2);\n \n         if (charPart != _func.length()) {\n             (fromPart > charPart ? _val : _trimChar).\n-                appendTo(sql, 0, sel, store, params, fetchState);\n+                appendTo(sql, 0, sel, store, params, fetch);\n             sql.append(part3);\n         } else {\n             // since the trim statement did not specify the token for"},{"sha":"8988664bf17f7a6c1fc87ad68857da15c8540fb4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.sql.Joins;\n@@ -86,38 +86,38 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n-        sel.select(newSQLBuffer(sel, store, params, fetchState), this);\n+        boolean pks, JDBCFetchConfiguration fetch) {\n+        sel.select(newSQLBuffer(sel, store, params, fetch), this);\n         if (isAggregate())\n             sel.setAggregate(true);\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n-        _val.selectColumns(sel, store, params, true, fetchState);\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n+        _val.selectColumns(sel, store, params, true, fetch);\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n-        sel.groupBy(newSQLBuffer(sel, store, params, fetchState), false);\n+        JDBCFetchConfiguration fetch) {\n+        sel.groupBy(newSQLBuffer(sel, store, params, fetch), false);\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n-        sel.orderBy(newSQLBuffer(sel, store, params, fetchState), asc, false);\n+        boolean asc, JDBCFetchConfiguration fetch) {\n+        sel.orderBy(newSQLBuffer(sel, store, params, fetch), asc, false);\n     }\n \n     private SQLBuffer newSQLBuffer(Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState) {\n-        calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch) {\n+        calculateValue(sel, store, params, null, fetch);\n         SQLBuffer buf = new SQLBuffer(store.getDBDictionary());\n-        appendTo(buf, 0, sel, store, params, fetchState);\n+        appendTo(buf, 0, sel, store, params, fetch);\n         clearParameters();\n         return buf;\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return Filters.convert(res.getObject(this,\n             JavaSQLTypes.JDBC_DEFAULT, null), getType());\n@@ -128,8 +128,8 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n-        _val.calculateValue(sel, store, params, null, fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n+        _val.calculateValue(sel, store, params, null, fetch);\n     }\n \n     public void clearParameters() {\n@@ -141,10 +141,10 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(getOperator());\n         sql.append(\"(\");\n-        _val.appendTo(sql, 0, sel, store, params, fetchState);\n+        _val.appendTo(sql, 0, sel, store, params, fetch);\n         sql.append(\")\");\n     }\n "},{"sha":"3a519e950992a7f386e2f0a885688efdcd8ea949","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Val.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n@@ -69,31 +69,31 @@\n      * Select the data for this value.\n      */\n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState);\n+        boolean pks, JDBCFetchConfiguration fetch);\n \n     /**\n      * Select just the columns for this value.\n      */\n     public void selectColumns(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState);\n+        boolean pks, JDBCFetchConfiguration fetch);\n \n     /**\n      * Group by this value.\n      */\n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState);\n+        JDBCFetchConfiguration fetch);\n \n     /**\n      * Order by this value.\n      */\n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState);\n+        boolean asc, JDBCFetchConfiguration fetch);\n \n     /**\n      * Load the data for this value.\n      */\n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException;\n \n     /**\n@@ -108,7 +108,7 @@ public Object load(Result res, JDBCStore store,\n      * @param other the value being compared to, or null if not a comparison\n      */\n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState);\n+        Object[] params, Val other, JDBCFetchConfiguration fetch);\n \n     /**\n      * Clear parameter values held by this value or its subcomponents.\n@@ -125,37 +125,37 @@ public void calculateValue(Select sel, JDBCStore store,\n      * Append the <code>index</code>th SQL element to the given buffer.\n      */\n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch);\n \n     /**\n      * Append the SQL testing whether this value is empty to the given buffer.\n      */\n     public void appendIsEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch);\n \n     /**\n      * Append the SQL testing whether this value is not empty to\n      * the given buffer.\n      */\n     public void appendIsNotEmpty(SQLBuffer sql, Select sel, JDBCStore store,\n-        Object[] params, JDBCFetchState fetchState);\n+        Object[] params, JDBCFetchConfiguration fetch);\n \n     /**\n      * Append the SQL checking the size of this value.\n      */\n     public void appendSize(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch);\n \n     /**\n      * Append the SQL testing whether this value is null to the given buffer.\n      */\n     public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch);\n \n     /**\n      * Append the SQL testing whether this value is not null to the given\n      * buffer.\n      */\n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState);\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch);\n }"},{"sha":"f5357ca4e551fc02afa202e270e02f0b7d474d8b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Variable.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n@@ -122,23 +122,23 @@ public Object toDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void select(Select sel, JDBCStore store, Object[] params,\n-        boolean pks, JDBCFetchState fetchState) {\n+        boolean pks, JDBCFetchConfiguration fetch) {\n     }\n \n     public void selectColumns(Select sel, JDBCStore store,\n-        Object[] params, boolean pks, JDBCFetchState fetchState) {\n+        Object[] params, boolean pks, JDBCFetchConfiguration fetch) {\n     }\n \n     public void groupBy(Select sel, JDBCStore store, Object[] params,\n-        JDBCFetchState fetchState) {\n+        JDBCFetchConfiguration fetch) {\n     }\n \n     public void orderBy(Select sel, JDBCStore store, Object[] params,\n-        boolean asc, JDBCFetchState fetchState) {\n+        boolean asc, JDBCFetchConfiguration fetch) {\n     }\n \n     public Object load(Result res, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return null;\n     }\n@@ -148,9 +148,9 @@ public boolean hasVariable(Variable var) {\n     }\n \n     public void calculateValue(Select sel, JDBCStore store,\n-        Object[] params, Val other, JDBCFetchState fetchState) {\n+        Object[] params, Val other, JDBCFetchConfiguration fetch) {\n         if (_path != null)\n-            _path.calculateValue(sel, store, params, other, fetchState);\n+            _path.calculateValue(sel, store, params, other, fetch);\n     }\n \n     public void clearParameters() {\n@@ -163,26 +163,26 @@ public int length() {\n     }\n \n     public void appendTo(SQLBuffer sql, int index, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsNotEmpty(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendSize(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n \n     public void appendIsNotNull(SQLBuffer sql, Select sel,\n-        JDBCStore store, Object[] params, JDBCFetchState fetchState) {\n+        JDBCStore store, Object[] params, JDBCFetchConfiguration fetch) {\n     }\n }"},{"sha":"9d4ec8505ba715792841350937041c0fc3c39cfb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/Embeddable.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n@@ -77,6 +77,6 @@\n      * does not have to be loaded immediately; it may be stored as impl data.\n      */\n     public void loadEmbedded(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object val)\n+        JDBCFetchConfiguration fetch, Object val)\n         throws SQLException;\n }"},{"sha":"475ba9d13eba52762380f6f3a577fa2644202803","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","status":"modified","additions":18,"deletions":21,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldMapping.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.strats.NoneFieldStrategy;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -694,24 +693,22 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n     }\n \n     public void selectEagerParallel(SelectExecutor sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode) {\n-        assertStrategy().selectEagerParallel(sel, sm, store, fetchState,\n-            eagerMode);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n+        assertStrategy().selectEagerParallel(sel, sm, store, fetch, eagerMode);\n     }\n \n     public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode) {\n-        assertStrategy().selectEagerJoin(sel, sm, store, fetchState,\n-            eagerMode);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n+        assertStrategy().selectEagerJoin(sel, sm, store, fetch, eagerMode);\n     }\n \n     public boolean isEagerSelectToMany() {\n         return assertStrategy().isEagerSelectToMany();\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode) {\n-        return assertStrategy().select(sel, sm, store, fetchState, eagerMode);\n+        JDBCFetchConfiguration fetch, int eagerMode) {\n+        return assertStrategy().select(sel, sm, store, fetch, eagerMode);\n     }\n \n     /**\n@@ -771,27 +768,27 @@ public void orderRelation(Select sel, ClassMapping elem, Joins joins) {\n     }\n \n     public Object loadEagerParallel(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object res)\n+        JDBCFetchConfiguration fetch, Object res)\n         throws SQLException {\n-        return assertStrategy().loadEagerParallel(sm, store, fetchState, res);\n+        return assertStrategy().loadEagerParallel(sm, store, fetch, res);\n     }\n \n     public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n-        assertStrategy().loadEagerJoin(sm, store, fetchState, res);\n+        assertStrategy().loadEagerJoin(sm, store, fetch, res);\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n-        assertStrategy().load(sm, store, fetchState, res);\n+        assertStrategy().load(sm, store, fetch, res);\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n-        assertStrategy().load(sm, store, fetchState);\n+        assertStrategy().load(sm, store, fetch);\n     }\n \n     public Object toDataStoreValue(Object val, JDBCStore store) {\n@@ -852,17 +849,17 @@ public Joins join(Joins joins, boolean forceOuter, boolean toMany) {\n         return joins.join(_fk, true, toMany);\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n-        return assertStrategy().loadProjection(store, fetchState, res, joins);\n+        return assertStrategy().loadProjection(store, fetch, res, joins);\n     }\n \n     public Object loadKeyProjection(JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         return assertStrategy()\n-            .loadKeyProjection(store, fetchState, res, joins);\n+            .loadKeyProjection(store, fetch, res, joins);\n     }\n \n     public boolean isVersionable() {"},{"sha":"6f97d8d06dd0144a3d894536e79aba9ac866f5d9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/FieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.sql.Joins;\n import org.apache.openjpa.jdbc.sql.Result;\n@@ -62,15 +61,15 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n      * @see #select\n      */\n     public void selectEagerParallel(SelectExecutor sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode);\n \n     /**\n      * Fill in joined select to related objects.\n      *\n      * @see #select\n      */\n     public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode);\n \n     /**\n      * Whether the eager joins or selects used by this field are to-many.\n@@ -92,7 +91,7 @@ public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n      * require it, or &lt; 0 if no data was selected\n      */\n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode);\n+        JDBCFetchConfiguration fetch, int eagerMode);\n \n     /**\n      * Load the batched eager result.\n@@ -102,14 +101,14 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n      * passed to subsequent calls\n      */\n     public Object loadEagerParallel(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object res)\n+        JDBCFetchConfiguration fetch, Object res)\n         throws SQLException;\n \n     /**\n      * Load the joined eager result.\n      */\n     public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException;\n \n     /**\n@@ -118,14 +117,14 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n      * result contains its needed column data before loading.\n      */\n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException;\n \n     /**\n      * Load secondary data using a connection from the store manager.\n      */\n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException;\n \n     ///////////\n@@ -212,7 +211,7 @@ public Joins joinKeyRelation(Joins joins, boolean forceOuter,\n      * Load this field value using the given result. The result\n      * will contain the columns from {@link ValueMapping#getColumns}.\n      */\n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException;\n \n@@ -221,7 +220,7 @@ public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n      * contain the columns from {@link ValueMapping#getColumns}.\n      */\n     public Object loadKeyProjection(JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException;\n \n     //////////////"},{"sha":"a137e1d73e95af29289eeb81fd6fd2f8c42a342d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/ValueHandler.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.schema.Column;\n import org.apache.openjpa.jdbc.schema.ColumnIO;\n@@ -94,6 +94,6 @@ public Object toDataStoreValue(ValueMapping vm, Object val,\n      * loading a projection\n      */\n     public Object toObjectValue(ValueMapping vm, Object val,\n-        OpenJPAStateManager sm, JDBCStore store, JDBCFetchState fetchState)\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch)\n         throws SQLException;\n }"},{"sha":"62356cab6d839f99a6f9b0fc91e6379e388700de","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n import org.apache.openjpa.jdbc.meta.FieldStrategy;\n@@ -68,40 +67,40 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n     }\n \n     public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n     }\n \n     public void selectEagerParallel(SelectExecutor sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n     }\n \n     public boolean isEagerSelectToMany() {\n         return false;\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode) {\n+        JDBCFetchConfiguration fetch, int eagerMode) {\n         return -1;\n     }\n \n     public Object loadEagerParallel(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object res)\n+        JDBCFetchConfiguration fetch, Object res)\n         throws SQLException {\n         return res;\n     }\n \n     public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n     }\n \n@@ -151,14 +150,14 @@ public Joins joinKeyRelation(Joins joins, boolean forceOuter,\n         return joins;\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n         return null;\n     }\n \n     public Object loadKeyProjection(JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         return null;\n     }"},{"sha":"3319d1e54e059041ffd0652ba60acb43c454f252","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/AbstractValueHandler.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ValueHandler;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n@@ -51,7 +51,7 @@ public Object toObjectValue(ValueMapping vm, Object val) {\n     }\n \n     public Object toObjectValue(ValueMapping vm, Object val,\n-        OpenJPAStateManager sm, JDBCStore store, JDBCFetchState fetchState)\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch)\n         throws SQLException {\n         return val;\n     }"},{"sha":"6cfc3445de28f98d5732a6c44df5263a6de6691d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -35,7 +35,6 @@\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.enhance.StateManager;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -52,7 +51,7 @@\n import org.apache.openjpa.jdbc.sql.RowManager;\n import org.apache.openjpa.jdbc.sql.SQLBuffer;\n import org.apache.openjpa.jdbc.sql.Select;\n-import org.apache.openjpa.kernel.FetchState;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -377,7 +376,7 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode) {\n+        JDBCFetchConfiguration fetch, int eagerMode) {\n         Joins joins = field.join(sel);\n         sel.select(field.getColumns(), joins); // null indicator\n \n@@ -386,12 +385,12 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n         // result in a clone that produces invalid SQL\n         eagerMode = Math.min(eagerMode, JDBCFetchConfiguration.EAGER_JOIN);\n         sel.select(field.getEmbeddedMapping(), sel.SUBS_EXACT, store,\n-            fetchState, eagerMode, joins);\n+            fetch, eagerMode, joins);\n         return 1;\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         Boolean isNull = indicatesNull(res);\n         if (isNull == null)\n@@ -420,15 +419,14 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n             res.startDataRequest(fields[i]);\n             try {\n                 if (eres == res)\n-                    fields[i].loadEagerJoin(em, store, fetchState, res);\n+                    fields[i].loadEagerJoin(em, store, fetch, res);\n                 else if (eres != null) {\n                     processed =\n-                        fields[i].loadEagerParallel(em, store, fetchState,\n-                            eres);\n+                        fields[i].loadEagerParallel(em, store, fetch, eres);\n                     if (processed != eres)\n                         res.putEager(fields[i], processed);\n                 } else\n-                    fields[i].load(em, store, fetchState, res);\n+                    fields[i].load(em, store, fetch, res);\n                 loaded |= em.getLoaded().get(i);\n             } finally {\n                 res.endDataRequest();\n@@ -438,7 +436,7 @@ else if (eres != null) {\n         // after loading everything from result, load the rest of the\n         // configured fields\n         if (loaded)\n-            em.load(fetchState);\n+            em.load(fetch);\n     }\n \n     /**\n@@ -517,7 +515,7 @@ public Joins join(Joins joins, boolean forceOuter) {\n         return field.join(joins, forceOuter, false);\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n         throw new UserException(_loc.get(\"cant-project-owned\", field));\n@@ -557,7 +555,7 @@ public void initialize(Class forType, PCState state) {\n             throw new InternalException();\n         }\n \n-        public void load(FetchState fetchState) {\n+        public void load(FetchConfiguration fetch) {\n             throw new InternalException();\n         }\n \n@@ -655,7 +653,7 @@ public BitSet getFlushed() {\n             return EMPTY_BITSET;\n         }\n \n-        public BitSet getUnloaded(FetchState fetchState) {\n+        public BitSet getUnloaded(FetchConfiguration fetch) {\n             throw new InternalException();\n         }\n "},{"sha":"86a2acb84635074ca300eb53bedf76164fc64946","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/EmbedValueHandler.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.sql.SQLException;\n import java.util.List;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -128,12 +128,12 @@ else if (ecols.length == 1)\n      * @param vm owning value\n      * @param val datastore value\n      * @param store optional store manager\n-     * @param fetchState optional fetch configuration\n+     * @param fetch optional fetch configuration\n      * @param cols embedded columns\n      * @param idx index in columns array to start\n      */\n     protected void toObjectValue(OpenJPAStateManager em, ValueMapping vm,\n-        Object val, JDBCStore store, JDBCFetchState fetchState,\n+        Object val, JDBCStore store, JDBCFetchConfiguration fetch,\n         Column[] cols, int idx)\n         throws SQLException {\n         FieldMapping[] fms = vm.getEmbeddedMapping().getFieldMappings();\n@@ -159,7 +159,7 @@ else if (ecols.length == 1)\n             }\n \n             if (store != null)\n-                embed.loadEmbedded(em, store, fetchState, cval);\n+                embed.loadEmbedded(em, store, fetch, cval);\n             else {\n                 cval = embed.toEmbeddedObjectValue(cval);\n                 em.store(fms[i].getIndex(), cval);"},{"sha":"5767e5c1103c19fcc48f1db0a5b53ecbb3b23a7b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","status":"modified","additions":11,"deletions":13,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -148,7 +147,7 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode) {\n+        JDBCFetchConfiguration fetch, int eagerMode) {\n         if (_cols.length == 0)\n             return -1;\n \n@@ -161,7 +160,7 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         if (_cols.length == 0 || !res.containsAll(_cols))\n             return;\n@@ -178,13 +177,13 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         // even if no columns, allow a handler to load a generated value\n         if (_cols.length == 0) {\n             if (_load)\n                 sm.store(field.getIndex(), field.getHandler().\n-                    toObjectValue(field, null, sm, store, fetchState));\n+                    toObjectValue(field, null, sm, store, fetch));\n             else\n                 sm.store(field.getIndex(), field.getHandler().\n                     toObjectValue(field, null));\n@@ -198,7 +197,7 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n                 if (ds == NULL)\n                     ds = null;\n                 sm.store(field.getIndex(), field.getHandler().\n-                    toObjectValue(field, ds, sm, store, fetchState));\n+                    toObjectValue(field, ds, sm, store, fetch));\n                 return;\n             }\n         }\n@@ -207,8 +206,7 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         sel.select(_cols);\n         field.wherePrimaryKey(sel, sm, store);\n \n-        Result res = sel.execute(store,\n-            fetchState.getJDBCFetchConfiguration());\n+        Result res = sel.execute(store, fetch);\n         Object val = null;\n         try {\n             if (res.next())\n@@ -217,7 +215,7 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n             res.close();\n         }\n \n-        loadEmbedded(sm, store, fetchState, val);\n+        loadEmbedded(sm, store, fetch, val);\n     }\n \n     public Object toDataStoreValue(Object val, JDBCStore store) {\n@@ -259,10 +257,10 @@ public Joins joinRelation(Joins joins, boolean forceOuter,\n         return joins;\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n-        return HandlerStrategies.loadObject(field, null, store, fetchState, res,\n+        return HandlerStrategies.loadObject(field, null, store, fetch, res,\n             joins, _cols, _load);\n     }\n \n@@ -387,13 +385,13 @@ public Object toEmbeddedObjectValue(Object val) {\n     }\n \n     public void loadEmbedded(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object val)\n+        JDBCFetchConfiguration fetch, Object val)\n         throws SQLException {\n         if (val == null && _cols.length > 1)\n             val = new Object[_cols.length];\n         if (_load)\n             sm.store(field.getIndex(), field.getHandler().\n-                toObjectValue(field, val, sm, store, fetchState));\n+                toObjectValue(field, val, sm, store, fetch));\n         else\n             sm.store(field.getIndex(), field.getHandler().\n                 toObjectValue(field, val));"},{"sha":"4d84ca73adc69115a488eefbe92c115dd7deb677","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -20,7 +20,7 @@\n import java.util.Iterator;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.ValueHandler;\n@@ -68,42 +68,41 @@\n     }\n \n     public void selectKey(Select sel, ClassMapping cls, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\n         sel.select(_kcols, joins);\n     }\n \n     public void selectValue(Select sel, ClassMapping cls,\n         OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\n         sel.select(_vcols, joins);\n     }\n \n     public Result[] getResults(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode, Joins[] joins, boolean lrs)\n+        JDBCFetchConfiguration fetch, int eagerMode, Joins[] joins, boolean lrs)\n         throws SQLException {\n         Select sel = store.getSQLFactory().newSelect();\n         sel.setLRS(lrs);\n         sel.select(_kcols);\n         sel.select(_vcols);\n         sel.whereForeignKey(field.getJoinForeignKey(), sm.getObjectId(),\n             field.getDefiningMapping(), store);\n-        Result res = sel.execute(store,\n-            fetchState.getJDBCFetchConfiguration());\n+        Result res = sel.execute(store, fetch);\n         return new Result[]{ res, res };\n     }\n \n     public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         return HandlerStrategies.loadObject(field.getKeyMapping(),\n-            sm, store, fetchState, res, joins, _kcols, _kload);\n+            sm, store, fetch, res, joins, _kcols, _kload);\n     }\n \n     public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         return HandlerStrategies.loadObject(field.getElementMapping(),\n-            sm, store, fetchState, res, joins, _vcols, _vload);\n+            sm, store, fetch, res, joins, _vcols, _vload);\n     }\n \n     public void map(boolean adapt) {"},{"sha":"a04072615794adc9579dcb64c2dbf11d252707c7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerStrategies.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.RelationId;\n@@ -175,7 +175,7 @@ private static void where(Row row, Column col, Object val)\n      * Load the Object value from the given result.\n      */\n     public static Object loadObject(ValueMapping vm, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Result res,\n+        JDBCStore store, JDBCFetchConfiguration fetch, Result res,\n         Joins joins, Column[] cols, boolean objectValueRequiresLoad)\n         throws SQLException {\n         if (cols.length == 0)\n@@ -184,8 +184,7 @@ public static Object loadObject(ValueMapping vm, OpenJPAStateManager sm,\n \n         Object val = loadDataStore(vm, res, joins, cols);\n         if (objectValueRequiresLoad)\n-            return vm.getHandler().toObjectValue(vm, val, sm, store,\n-                fetchState);\n+            return vm.getHandler().toObjectValue(vm, val, sm, store, fetch);\n         return vm.getHandler().toObjectValue(vm, val);\n     }\n "},{"sha":"317b22c9e0bf70bdebd4ba4d19f5e59cdd287893","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSCollectionFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -74,7 +74,7 @@\n      * {@link #loadElement}.\n      */\n     public void selectElement(Select sel, ClassMapping elem,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode,\n         Joins joins);\n \n     /**\n@@ -83,7 +83,7 @@ public void selectElement(Select sel, ClassMapping elem,\n      * results.\n      */\n     public Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException;\n \n     /**"},{"sha":"d70b1fd81c807084106da389f8ea567aea32e3ed","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSMapFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -17,7 +17,7 @@\n \n import java.sql.SQLException;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -89,14 +89,14 @@\n      * This method is only used if the key is not derived from the value.\n      */\n     public void selectKey(Select sel, ClassMapping key, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins);\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins);\n \n     /**\n      * Load a key from the given result.\n      * This method is only used if the key is not derived from the value.\n      */\n     public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException;\n \n     /**\n@@ -114,14 +114,14 @@ public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\n      * Elements of the result will be loaded with {@link #loadValue}.\n      */\n     public void selectValue(Select sel, ClassMapping val,\n-        OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins);\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch, \n+        Joins joins);\n \n     /**\n      * Load a value from the given result.\n      */\n     public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException;\n \n     /**\n@@ -132,7 +132,7 @@ public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\n      * {@link #deriveKey} and {@link #loadValue} methods.\n      */\n     public Result[] getResults(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode, Joins[] joins, boolean lrs)\n+        JDBCFetchConfiguration fetch, int eagerMode, Joins[] joins, boolean lrs)\n         throws SQLException;\n \n     /**"},{"sha":"a03dc2fdc365373b71814013bd0c249a3ccc0f83","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyCollection.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -21,7 +21,6 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -127,8 +126,6 @@ protected Iterator itr() {\n         final OpenJPAStateManager sm = assertOwner();\n         final JDBCStore store = getStore();\n         final JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n-        final JDBCFetchState fetchState =\n-            (JDBCFetchState) fetch.newFetchState();\n         final Joins[] resJoins = new Joins[Math.max(1, elems.length)];\n         final FieldMapping fm = _strat.getFieldMapping();\n \n@@ -150,14 +147,14 @@ public void select(Select sel, int idx) {\n                 resJoins[idx] = _strat.joinElementRelation(sel.newJoins(),\n                     elem);\n                 fm.orderRelation(sel, elem, resJoins[idx]);\n-                _strat.selectElement(sel, elem, store, fetchState,\n-                    fetch.EAGER_JOIN, resJoins[idx]);\n+                _strat.selectElement(sel, elem, store, fetch, fetch.EAGER_JOIN,\n+                    resJoins[idx]);\n             }\n         });\n \n         try {\n             Result res = union.execute(store, fetch);\n-            return new ResultIterator(sm, store, fetchState, res, resJoins);\n+            return new ResultIterator(sm, store, fetch, res, resJoins);\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, store.getDBDictionary());\n         }\n@@ -184,16 +181,16 @@ private JDBCStore getStore() {\n \n         private final OpenJPAStateManager _sm;\n         private final JDBCStore _store;\n-        private final JDBCFetchState _fetchState;\n+        private final JDBCFetchConfiguration _fetch;\n         private final Result _res;\n         private final Joins[] _joins;\n         private Boolean _next = null;\n \n         public ResultIterator(OpenJPAStateManager sm, JDBCStore store,\n-            JDBCFetchState fetchState, Result res, Joins[] joins) {\n+            JDBCFetchConfiguration fetch, Result res, Joins[] joins) {\n             _sm = sm;\n             _store = store;\n-            _fetchState = fetchState;\n+            _fetch = fetch;\n             _res = res;\n             _joins = joins;\n         }\n@@ -214,7 +211,7 @@ public Object next() {\n                 throw new NoSuchElementException();\n             try {\n                 _next = null;\n-                return _strat.loadElement(_sm, _store, _fetchState, _res,\n+                return _strat.loadElement(_sm, _store, _fetch, _res,\n                     _joins[_res.indexOf()]);\n             } catch (SQLException se) {\n                 throw SQLExceptions.getStore(se, _store.getDBDictionary());"},{"sha":"e9cfd684d5ae8fc46fba2dca29b8c1ae7c24af90","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","status":"modified","additions":14,"deletions":22,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LRSProxyMap.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -25,7 +25,6 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.schema.Column;\n@@ -166,8 +165,6 @@ protected Collection keys(final Object obj) {\n \n         final ClassMapping[] clss = _strat.getIndependentKeyMappings(true);\n         final JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n-        final JDBCFetchState jfetchState = (JDBCFetchState) fetch\n-            .newFetchState();\n         final Joins[] resJoins = new Joins[Math.max(1, clss.length)];\n \n         Union union = store.getSQLFactory().newUnion\n@@ -207,8 +204,7 @@ public void select(Select sel, int idx) {\n                 if (resJoins[idx] == null)\n                     resJoins[idx] = _strat.joinKeyRelation(sel.newJoins(),\n                         cls);\n-                _strat.selectKey(sel, cls, sm, store, jfetchState,\n-                    resJoins[idx]);\n+                _strat.selectKey(sel, cls, sm, store, fetch, resJoins[idx]);\n             }\n         });\n \n@@ -217,7 +213,7 @@ public void select(Select sel, int idx) {\n         try {\n             res = union.execute(store, fetch);\n             while (res.next())\n-                keys.add(_strat.loadKey(sm, store, jfetchState, res,\n+                keys.add(_strat.loadKey(sm, store, fetch, res,\n                     resJoins[res.indexOf()]));\n             return keys;\n         } catch (SQLException se) {\n@@ -239,8 +235,6 @@ protected Object value(final Object obj) {\n         }\n \n         final JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n-        final JDBCFetchState fetchState =\n-            (JDBCFetchState) fetch.newFetchState();\n         final ClassMapping[] clss = _strat.getIndependentValueMappings(true);\n         final Joins[] resJoins = new Joins[Math.max(1, clss.length)];\n         Union union = store.getSQLFactory().newUnion\n@@ -282,16 +276,15 @@ public void select(Select sel, int idx) {\n                 if (resJoins[idx] == null)\n                     resJoins[idx] = _strat.joinValueRelation(sel.newJoins(),\n                         cls);\n-                _strat.selectValue(sel, cls, sm, store, fetchState,\n-                    resJoins[idx]);\n+                _strat.selectValue(sel, cls, sm, store, fetch, resJoins[idx]);\n             }\n         });\n \n         Result res = null;\n         try {\n             res = union.execute(store, fetch);\n             if (res.next())\n-                return _strat.loadValue(sm, store, fetchState, res,\n+                return _strat.loadValue(sm, store, fetch, res,\n                     resJoins[res.indexOf()]);\n             return null;\n         } catch (SQLException se) {\n@@ -306,12 +299,11 @@ protected Iterator itr() {\n         OpenJPAStateManager sm = assertOwner();\n         JDBCStore store = getStore();\n         JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n-        JDBCFetchState jfetchState = (JDBCFetchState) fetch.newFetchState();\n         try {\n             Joins[] joins = new Joins[2];\n-            Result[] res = _strat.getResults(sm, store, jfetchState,\n-                fetch.EAGER_JOIN, joins, true);\n-            return new ResultIterator(sm, store, jfetchState, res, joins);\n+            Result[] res = _strat.getResults(sm, store, fetch, fetch.EAGER_JOIN,\n+                joins, true);\n+            return new ResultIterator(sm, store, fetch, res, joins);\n         } catch (SQLException se) {\n             throw SQLExceptions.getStore(se, store.getDBDictionary());\n         }\n@@ -338,16 +330,16 @@ private JDBCStore getStore() {\n \n         private final OpenJPAStateManager _sm;\n         private final JDBCStore _store;\n-        private final JDBCFetchState _fetchState;\n+        private final JDBCFetchConfiguration _fetch;\n         private final Result[] _res;\n         private final Joins[] _joins;\n         private Boolean _next = null;\n \n         public ResultIterator(OpenJPAStateManager sm, JDBCStore store,\n-            JDBCFetchState fetchState, Result[] res, Joins[] joins) {\n+            JDBCFetchConfiguration fetch, Result[] res, Joins[] joins) {\n             _sm = sm;\n             _store = store;\n-            _fetchState = fetchState;\n+            _fetch = fetch;\n             _res = res;\n             _joins = joins;\n         }\n@@ -378,11 +370,11 @@ public Object next() {\n             try {\n \n                 if (!keyDerived)\n-                    entry.key = _strat.loadKey(_sm, _store, _fetchState,\n-                        _res[0], _joins[0]);\n+                    entry.key = _strat.loadKey(_sm, _store, _fetch, _res[0], \n+                        _joins[0]);\n                 if (!valDerived)\n-                    entry.val = _strat.loadValue(_sm, _store, _fetchState,\n-                        _res[1], _joins[1]);\n+                    entry.val = _strat.loadValue(_sm, _store, _fetch, _res[1], \n+                        _joins[1]);\n                 if (keyDerived)\n                     entry.key = _strat.deriveKey(_store, entry.val);\n                 if (valDerived)"},{"sha":"1c070f5d271c7595117f4b6d4b8d7a4d63b45d50","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MapTableFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -19,7 +19,6 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -114,7 +113,7 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         if (field.isLRS()) {\n             sm.storeObjectField(field.getIndex(), new LRSProxyMap(this,\n@@ -124,7 +123,7 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n \n         // select all and load into a normal proxy\n         Joins[] joins = new Joins[2];\n-        Result[] res = getResults(sm, store, fetchState,\n+        Result[] res = getResults(sm, store, fetch,\n             JDBCFetchConfiguration.EAGER_PARALLEL, joins, false);\n         try {\n             Map map = (Map) sm.newProxy(field.getIndex());\n@@ -133,8 +132,8 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n                 if (res[1] != res[0] && !res[1].next())\n                     break;\n \n-                key = loadKey(sm, store, fetchState, res[0], joins[0]);\n-                val = loadValue(sm, store, fetchState, res[1], joins[1]);\n+                key = loadKey(sm, store, fetch, res[0], joins[0]);\n+                val = loadValue(sm, store, fetch, res[1], joins[1]);\n                 map.put(key, val);\n             }\n             sm.storeObject(field.getIndex(), map);\n@@ -146,15 +145,15 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n     }\n \n     public Object loadKeyProjection(JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n-        return loadKey(null, store, fetchState, res, joins);\n+        return loadKey(null, store, fetch, res, joins);\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n-        return loadValue(null, store, fetchState, res, joins);\n+        return loadValue(null, store, fetch, res, joins);\n     }\n \n     public Joins join(Joins joins, boolean forceOuter) {"},{"sha":"d26b09d202b41ce2a2204bd7223a652e3588bc43","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/MaxEmbeddedLobFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -21,7 +21,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n import org.apache.openjpa.jdbc.meta.ValueMappingInfo;\n@@ -192,23 +191,22 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         Column col = field.getColumns()[0];\n         if (res.contains(col))\n             sm.store(field.getIndex(), load(col, res, null));\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n         Column col = field.getColumns()[0];\n         Select sel = store.getSQLFactory().newSelect();\n         sel.select(col);\n         field.wherePrimaryKey(sel, sm, store);\n \n-        Result res = sel.execute(store,\n-            fetchState.getJDBCFetchConfiguration());\n+        Result res = sel.execute(store, fetch);\n         Object val = null;\n         try {\n             if (res.next())\n@@ -243,7 +241,7 @@ public Joins join(Joins joins, boolean forceOuter) {\n         return field.join(joins, forceOuter, false);\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n         return load(field.getColumns()[0], res, joins);"},{"sha":"005d3639fb4fc2fb6614adc7fc5ad5c89572379d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/PrimitiveFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.Joinable;\n@@ -173,13 +172,13 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode) {\n+        JDBCFetchConfiguration fetch, int eagerMode) {\n         sel.select(field.getColumns()[0], field.join(sel));\n         return 1;\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         Column col = field.getColumns()[0];\n         if (!res.contains(col))\n@@ -240,7 +239,7 @@ public Joins join(Joins joins, boolean forceOuter) {\n         return field.join(joins, forceOuter, false);\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n         return res.getObject(field.getColumns()[0], null, joins);\n@@ -393,7 +392,7 @@ public Object toEmbeddedDataStoreValue(Object val, JDBCStore store) {\n     }\n \n     public void loadEmbedded(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object val)\n+        JDBCFetchConfiguration fetch, Object val)\n         throws SQLException {\n         sm.store(field.getIndex(), val);\n     }"},{"sha":"0984ce854c5bba2ed8f14af1d5f0a392cbf034e4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionInverseKeyFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -63,14 +63,14 @@ public ForeignKey getJoinForeignKey(ClassMapping elem) {\n     }\n \n     public void selectElement(Select sel, ClassMapping elem, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode, Joins joins) {\n-        super.selectElement(sel, elem, store, fetchState, eagerMode, joins);\n+        JDBCFetchConfiguration fetch, int eagerMode, Joins joins) {\n+        super.selectElement(sel, elem, store, fetch, eagerMode, joins);\n     }\n \n     public Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n-        return super.loadElement(sm, store, fetchState, res, joins);\n+        return super.loadElement(sm, store, fetch, res, joins);\n     }\n \n     public Joins join(Joins joins, ClassMapping elem) {"},{"sha":"5695985b112415cda2716c0958ea78a805aa5e11","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationCollectionTableFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -62,14 +62,14 @@ public ForeignKey getJoinForeignKey(ClassMapping elem) {\n     }\n \n     public void selectElement(Select sel, ClassMapping elem, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode, Joins joins) {\n-        super.selectElement(sel, elem, store, fetchState, eagerMode, joins);\n+        JDBCFetchConfiguration fetch, int eagerMode, Joins joins) {\n+        super.selectElement(sel, elem, store, fetch, eagerMode, joins);\n     }\n \n     public Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n-        return super.loadElement(sm, store, fetchState, res, joins);\n+        return super.loadElement(sm, store, fetch, res, joins);\n     }\n \n     public Joins join(Joins joins, ClassMapping elem) {"},{"sha":"db69678fac1d6bf7b9a0c4fadcaf7a167407e775","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":24,"deletions":29,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -20,7 +20,6 @@\n import java.util.Map;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n@@ -342,19 +341,18 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n \n     public void selectEagerParallel(SelectExecutor sel,\n         final OpenJPAStateManager sm, final JDBCStore store,\n-        final JDBCFetchState fetchState, final int eagerMode) {\n+        final JDBCFetchConfiguration fetch, final int eagerMode) {\n         final ClassMapping[] clss = field.getIndependentTypeMappings();\n         if (!(sel instanceof Union))\n-            selectEagerParallel((Select) sel, clss[0], store, fetchState,\n-                eagerMode);\n+            selectEagerParallel((Select) sel, clss[0], store, fetch, eagerMode);\n         else {\n             Union union = (Union) sel;\n-            if (fetchState.getJDBCFetchConfiguration().getSubclassFetchMode\n-                (field.getTypeMapping()) != JDBCFetchConfiguration.EAGER_JOIN)\n+            if (fetch.getSubclassFetchMode (field.getTypeMapping()) \n+                != JDBCFetchConfiguration.EAGER_JOIN)\n                 union.abortUnion();\n             union.select(new Union.Selector() {\n                 public void select(Select sel, int idx) {\n-                    selectEagerParallel(sel, clss[idx], store, fetchState,\n+                    selectEagerParallel(sel, clss[idx], store, fetch,\n                         eagerMode);\n                 }\n             });\n@@ -365,26 +363,26 @@ public void select(Select sel, int idx) {\n      * Perform an eager parallel select.\n      */\n     private void selectEagerParallel(Select sel, ClassMapping cls,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n         sel.selectPrimaryKey(field.getDefiningMapping());\n         // set a variable name that does not conflict with any in the query;\n         // using a variable guarantees that the selected data will use different\n         // aliases and joins than any existing WHERE conditions on this field\n         // that might otherwise limit the relations that match\n         Joins joins = sel.newJoins().setVariable(\"*\");\n         eagerJoin(joins, cls, true);\n-        sel.select(cls, field.getSelectSubclasses(), store, fetchState,\n-            eagerMode, joins);\n+        sel.select(cls, field.getSelectSubclasses(), store, fetch, eagerMode, \n+            joins);\n     }\n \n     public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n         // limit the eager mode to single on recursive eager fetching b/c\n         // at this point the select has been modified and an attempt to\n         // clone it for a to-many eager select can result in a clone that\n         // produces invalid SQL\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n-        sel.select(cls, field.getSelectSubclasses(), store, fetchState,\n+        sel.select(cls, field.getSelectSubclasses(), store, fetch,\n             JDBCFetchConfiguration.EAGER_JOIN,\n             eagerJoin(sel.newJoins(), cls, false));\n     }\n@@ -405,7 +403,7 @@ private Joins eagerJoin(Joins joins, ClassMapping cls, boolean forceInner) {\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, int eagerMode) {\n+        JDBCFetchConfiguration fetch, int eagerMode) {\n         if (field.getJoinDirection() == field.JOIN_INVERSE)\n             return -1;\n         // already cached oid?\n@@ -418,13 +416,12 @@ public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n     }\n \n     public Object loadEagerParallel(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object res)\n+        JDBCFetchConfiguration fetch, Object res)\n         throws SQLException {\n         // process batched results if we haven't already\n         Map rels;\n         if (res instanceof Result)\n-            rels = processEagerParallelResult(sm, store, fetchState,\n-                (Result) res);\n+            rels = processEagerParallelResult(sm, store, fetch, (Result) res);\n         else\n             rels = (Map) res;\n \n@@ -437,7 +434,7 @@ public Object loadEagerParallel(OpenJPAStateManager sm, JDBCStore store,\n      * Process the given batched result.\n      */\n     private Map processEagerParallelResult(OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Result res)\n+        JDBCStore store, JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         // do same joins as for load\n         //### cheat: we know typical result joins only care about the relation\n@@ -455,23 +452,23 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n             if (cls == null)\n                 cls = clss[0];\n             oid = owner.getObjectId(store, res, null, true, null);\n-            rels.put(oid, res.load(cls, store, fetchState, joins));\n+            rels.put(oid, res.load(cls, store, fetch, joins));\n         }\n         res.close();\n \n         return rels;\n     }\n \n     public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         ClassMapping cls = field.getIndependentTypeMappings()[0];\n-        sm.storeObject(field.getIndex(), res.load(cls, store, fetchState,\n+        sm.storeObject(field.getIndex(), res.load(cls, store, fetch,\n             eagerJoin(res.newJoins(), cls, false)));\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         if (field.getJoinDirection() == field.JOIN_INVERSE)\n             return;\n@@ -522,15 +519,13 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n     }\n \n     public void load(final OpenJPAStateManager sm, final JDBCStore store,\n-        final JDBCFetchState fetchState)\n+        final JDBCFetchConfiguration fetch)\n         throws SQLException {\n-        final JDBCFetchConfiguration fetch =\n-            fetchState.getJDBCFetchConfiguration();\n         // check for cached oid value, or load oid if no way to join\n         if (Boolean.TRUE.equals(_fkOid)) {\n             Object oid = sm.getIntermediate(field.getIndex());\n             if (oid != null) {\n-                Object val = store.find(oid, field, fetchState);\n+                Object val = store.find(oid, field, fetch);\n                 sm.storeObject(field.getIndex(), val);\n                 return;\n             }\n@@ -559,16 +554,16 @@ public void select(Select sel, int idx) {\n                             false, false);\n                     field.wherePrimaryKey(sel, sm, store);\n                 }\n-                sel.select(rels[idx], subs, store, fetchState,\n-                    fetch.EAGER_JOIN, resJoins[idx]);\n+                sel.select(rels[idx], subs, store, fetch, fetch.EAGER_JOIN, \n+                    resJoins[idx]);\n             }\n         });\n \n         Result res = union.execute(store, fetch);\n         try {\n             Object val = null;\n             if (res.next())\n-                val = res.load(rels[res.indexOf()], store, fetchState,\n+                val = res.load(rels[res.indexOf()], store, fetch,\n                     resJoins[res.indexOf()]);\n             sm.storeObject(field.getIndex(), val);\n         } finally {\n@@ -695,7 +690,7 @@ public Object toEmbeddedObjectValue(Object val) {\n     }\n \n     public void loadEmbedded(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object val)\n+        JDBCFetchConfiguration fetch, Object val)\n         throws SQLException {\n         ClassMapping relMapping = field.getTypeMapping();\n         Object oid;"},{"sha":"a8049ae41bf67780a2e9f69b8cd41425c2e4fa7f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapInverseKeyFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -21,7 +21,6 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -78,12 +77,12 @@ public ForeignKey getJoinForeignKey(ClassMapping cls) {\n     }\n \n     public void selectKey(Select sel, ClassMapping key, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\n         throw new InternalException();\n     }\n \n     public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         throw new InternalException();\n     }\n@@ -100,38 +99,36 @@ public Object deriveValue(JDBCStore store, Object key) {\n     }\n \n     public void selectValue(Select sel, ClassMapping val,\n-        OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins) {\n-        selectElement(sel, val, store, fetchState,\n-            JDBCFetchConfiguration.EAGER_NONE, joins);\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch, \n+        Joins joins) {\n+        selectElement(sel, val, store, fetch, JDBCFetchConfiguration.EAGER_NONE,\n+            joins);\n     }\n \n     public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n-        return loadElement(sm, store, fetchState, res, joins);\n+        return loadElement(sm, store, fetch, res, joins);\n     }\n \n     public Result[] getResults(final OpenJPAStateManager sm,\n-        final JDBCStore store, final JDBCFetchState fetchState,\n+        final JDBCStore store, final JDBCFetchConfiguration fetch,\n         final int eagerMode, final Joins[] joins, boolean lrs)\n         throws SQLException {\n         ValueMapping val = field.getElementMapping();\n         final ClassMapping[] vals = val.getIndependentTypeMappings();\n         Union union = store.getSQLFactory().newUnion(vals.length);\n-        JDBCFetchConfiguration fetch = fetchState.getJDBCFetchConfiguration();\n         if (fetch.getSubclassFetchMode(val.getTypeMapping())\n             != JDBCFetchConfiguration.EAGER_JOIN)\n             union.abortUnion();\n         union.setLRS(lrs);\n         union.select(new Union.Selector() {\n             public void select(Select sel, int idx) {\n-                joins[1] = selectAll(sel, vals[idx], sm, store, fetchState,\n+                joins[1] = selectAll(sel, vals[idx], sm, store, fetch,\n                     eagerMode);\n             }\n         });\n-        Result res = union.execute(store,\n-            fetchState.getJDBCFetchConfiguration());\n+        Result res = union.execute(store, fetch);\n         return new Result[]{ res, res };\n     }\n "},{"sha":"956b4e90c3aff1714b0cbeb3fd5ef5ed00aa63e8","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","status":"modified","additions":11,"deletions":14,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationMapTableFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -21,7 +21,6 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -78,12 +77,12 @@ public ForeignKey getJoinForeignKey(ClassMapping cls) {\n     }\n \n     public void selectKey(Select sel, ClassMapping key, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, Joins joins) {\n         throw new InternalException();\n     }\n \n     public Object loadKey(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         throw new InternalException();\n     }\n@@ -100,38 +99,36 @@ public Object deriveValue(JDBCStore store, Object key) {\n     }\n \n     public void selectValue(Select sel, ClassMapping val,\n-        OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Joins joins) {\n-        selectElement(sel, val, store, fetchState,\n-            JDBCFetchConfiguration.EAGER_NONE, joins);\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch, \n+        Joins joins) {\n+        selectElement(sel, val, store, fetch, JDBCFetchConfiguration.EAGER_NONE,\n+            joins);\n     }\n \n     public Object loadValue(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n-        return loadElement(sm, store, fetchState, res, joins);\n+        return loadElement(sm, store, fetch, res, joins);\n     }\n \n     public Result[] getResults(final OpenJPAStateManager sm,\n-        final JDBCStore store, final JDBCFetchState fetchState,\n+        final JDBCStore store, final JDBCFetchConfiguration fetch,\n         final int eagerMode, final Joins[] joins, boolean lrs)\n         throws SQLException {\n         ValueMapping val = field.getElementMapping();\n         final ClassMapping[] vals = val.getIndependentTypeMappings();\n         Union union = store.getSQLFactory().newUnion(vals.length);\n-        JDBCFetchConfiguration fetch = fetchState.getJDBCFetchConfiguration();\n         if (fetch.getSubclassFetchMode(val.getTypeMapping())\n             != JDBCFetchConfiguration.EAGER_JOIN)\n             union.abortUnion();\n         union.setLRS(lrs);\n         union.select(new Union.Selector() {\n             public void select(Select sel, int idx) {\n-                joins[1] = selectAll(sel, vals[idx], sm, store, fetchState,\n+                joins[1] = selectAll(sel, vals[idx], sm, store, fetch,\n                     eagerMode);\n             }\n         });\n-        Result res = union.execute(store,\n-            fetchState.getJDBCFetchConfiguration());\n+        Result res = union.execute(store, fetch);\n         return new Result[]{ res, res };\n     }\n "},{"sha":"2c7b1b83016102ee85958cdc1bb809d43f8c40f4","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyInverseKeyFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -19,7 +19,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -68,19 +68,19 @@ protected ForeignKey getJoinForeignKey(ClassMapping elem) {\n     }\n \n     protected void selectElement(Select sel, ClassMapping elem,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode,\n         Joins joins) {\n         sel.select(elem, field.getElementMapping().getSelectSubclasses(),\n-            store, fetchState, eagerMode, joins);\n+            store, fetch, eagerMode, joins);\n     }\n \n     protected Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         ClassMapping elem = res.getBaseMapping();\n         if (elem == null)\n             elem = field.getElementMapping().getIndependentTypeMappings()[0];\n-        return res.load(elem, store, fetchState, joins);\n+        return res.load(elem, store, fetch, joins);\n     }\n \n     protected Joins join(Joins joins, ClassMapping elem) {"},{"sha":"a7c7a24f6a0781b231e54aec1911d559e2907ded","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationToManyTableFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -19,7 +19,7 @@\n import java.util.Collection;\n import java.util.Iterator;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -64,19 +64,19 @@ protected ForeignKey getJoinForeignKey(ClassMapping elem) {\n     }\n \n     protected void selectElement(Select sel, ClassMapping elem,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode,\n         Joins joins) {\n         sel.select(elem, field.getElementMapping().getSelectSubclasses(),\n-            store, fetchState, eagerMode, joins);\n+            store, fetch, eagerMode, joins);\n     }\n \n     protected Object loadElement(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException {\n         ClassMapping elem = res.getBaseMapping();\n         if (elem == null)\n             elem = field.getElementMapping().getIndependentTypeMappings()[0];\n-        return res.load(elem, store, fetchState, joins);\n+        return res.load(elem, store, fetch, joins);\n     }\n \n     protected Joins join(Joins joins, ClassMapping elem) {"},{"sha":"8787eedd18af240e3d8f21a1f116b80e05541b25","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","status":"modified","additions":26,"deletions":35,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StoreCollectionFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -23,7 +23,6 @@\n \n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -67,7 +66,7 @@\n      * {@link #loadElement}.\n      */\n     protected abstract void selectElement(Select sel, ClassMapping elem,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode,\n         Joins joins);\n \n     /**\n@@ -76,8 +75,7 @@ protected abstract void selectElement(Select sel, ClassMapping elem,\n      * results.\n      */\n     protected abstract Object loadElement(OpenJPAStateManager sm,\n-        JDBCStore store,\n-        JDBCFetchState fetchState, Result res, Joins joins)\n+        JDBCStore store, JDBCFetchConfiguration fetch, Result res, Joins joins)\n         throws SQLException;\n \n     /**\n@@ -143,34 +141,32 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n \n     public void selectEagerParallel(SelectExecutor sel,\n         final OpenJPAStateManager sm, final JDBCStore store,\n-        final JDBCFetchState fetchState, final int eagerMode) {\n+        final JDBCFetchConfiguration fetch, final int eagerMode) {\n         if (!(sel instanceof Union))\n             selectEager((Select) sel, getDefaultElementMapping(true), sm,\n-                store, fetchState, eagerMode, true, false);\n+                store, fetch, eagerMode, true, false);\n         else {\n             final ClassMapping[] elems = getIndependentElementMappings(true);\n             Union union = (Union) sel;\n-            JDBCFetchConfiguration fetch =\n-                fetchState.getJDBCFetchConfiguration();\n             if (fetch.getSubclassFetchMode(field.getElementMapping().\n                 getTypeMapping()) != fetch.EAGER_JOIN)\n                 union.abortUnion();\n             union.select(new Union.Selector() {\n                 public void select(Select sel, int idx) {\n-                    selectEager(sel, elems[idx], sm, store, fetchState,\n-                        eagerMode, true, false);\n+                    selectEager(sel, elems[idx], sm, store, fetch, eagerMode, \n+                        true, false);\n                 }\n             });\n         }\n     }\n \n     public void selectEagerJoin(Select sel, OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, int eagerMode) {\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eagerMode) {\n         // we limit further eager fetches to joins, because after this point\n         // the select has been modified such that parallel clones may produce\n         // invalid sql\n-        selectEager(sel, getDefaultElementMapping(true), sm, store,\n-            fetchState, JDBCFetchConfiguration.EAGER_JOIN, false,\n+        selectEager(sel, getDefaultElementMapping(true), sm, store, fetch, \n+            JDBCFetchConfiguration.EAGER_JOIN, false,\n             field.getNullValue()\n                 != FieldMapping.NULL_EXCEPTION);\n     }\n@@ -183,7 +179,7 @@ public boolean isEagerSelectToMany() {\n      * Select our data eagerly.\n      */\n     private void selectEager(Select sel, ClassMapping elem,\n-        OpenJPAStateManager sm, JDBCStore store, JDBCFetchState fetchState,\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch,\n         int eagerMode, boolean selectOid, boolean outer) {\n         // force distinct if there was a to-many join to avoid dups, but\n         // if this is a parallel select don't make distinct based on the\n@@ -221,17 +217,16 @@ else if (!sel.isDistinct())\n         if (outer)\n             joins = sel.outer(joins);\n         field.orderRelation(sel, elem, joins);\n-        selectElement(sel, elem, store, fetchState, eagerMode, joins);\n+        selectElement(sel, elem, store, fetch, eagerMode, joins);\n     }\n \n     public Object loadEagerParallel(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object res)\n+        JDBCFetchConfiguration fetch, Object res)\n         throws SQLException {\n         // process batched results if we haven't already\n         Map rels;\n         if (res instanceof Result)\n-            rels = processEagerParallelResult(sm, store, fetchState,\n-                (Result) res);\n+            rels = processEagerParallelResult(sm, store, fetch, (Result) res);\n         else\n             rels = (Map) res;\n \n@@ -252,7 +247,7 @@ public Object loadEagerParallel(OpenJPAStateManager sm, JDBCStore store,\n      * Process the given batched result.\n      */\n     private Map processEagerParallelResult(OpenJPAStateManager sm,\n-        JDBCStore store, JDBCFetchState fetchState, Result res)\n+        JDBCStore store, JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         // do same joins as for load\n         //### cheat: we know typical result joins only care about the relation\n@@ -293,8 +288,7 @@ private Map processEagerParallelResult(OpenJPAStateManager sm,\n \n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), orderJoins) + 1;\n-            add(store, coll, loadElement(null, store, fetchState, res,\n-                dataJoins));\n+            add(store, coll, loadElement(null, store, fetch, res, dataJoins));\n         }\n         res.close();\n \n@@ -324,7 +318,7 @@ private Object getNextObjectId(ClassMapping owner, JDBCStore store,\n     }\n \n     public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         // initialize field value\n         Object coll;\n@@ -364,8 +358,7 @@ public void loadEagerJoin(OpenJPAStateManager sm, JDBCStore store,\n             if (field.getOrderColumn() != null)\n                 seq = res.getInt(field.getOrderColumn(), refJoins) + 1;\n             res.setBaseMapping(null);\n-            add(store, coll, loadElement(sm, store, fetchState, res,\n-                dataJoins));\n+            add(store, coll, loadElement(sm, store, fetch, res, dataJoins));\n             if (!res.next() || res.indexOf() != typeIdx) {\n                 res.pushBack();\n                 break;\n@@ -413,7 +406,7 @@ private Object getNextRef(ClassMapping mapping, JDBCStore store,\n     }\n \n     public void load(final OpenJPAStateManager sm, final JDBCStore store,\n-        final JDBCFetchState fetchState)\n+        final JDBCFetchConfiguration fetch)\n         throws SQLException {\n         if (field.isLRS()) {\n             Proxy coll = newLRSProxy(store.getConfiguration());\n@@ -434,8 +427,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n                 sel.whereForeignKey(getJoinForeignKey(rel),\n                     sm.getObjectId(), field.getDefiningMapping(), store);\n \n-                Result res = sel.execute(store,\n-                    fetchState.getJDBCFetchConfiguration());\n+                Result res = sel.execute(store, fetch);\n                 try {\n                     res.next();\n                     coll.getChangeTracker().setNextSequence\n@@ -456,7 +448,7 @@ public void load(final OpenJPAStateManager sm, final JDBCStore store,\n         union.select(new Union.Selector() {\n             public void select(Select sel, int idx) {\n                 ClassMapping elem = (elems.length == 0) ? null : elems[idx];\n-                resJoins[idx] = selectAll(sel, elem, sm, store, fetchState,\n+                resJoins[idx] = selectAll(sel, elem, sm, store, fetch,\n                     JDBCFetchConfiguration.EAGER_PARALLEL);\n             }\n         });\n@@ -473,14 +465,13 @@ public void select(Select sel, int idx) {\n         }\n \n         // load values\n-        Result res = union.execute(store,\n-            fetchState.getJDBCFetchConfiguration());\n+        Result res = union.execute(store, fetch);\n         try {\n             int seq = 0;\n             while (res.next()) {\n                 if (ct != null && field.getOrderColumn() != null)\n                     seq = res.getInt(field.getOrderColumn());\n-                add(store, coll, loadElement(sm, store, fetchState, res,\n+                add(store, coll, loadElement(sm, store, fetch, res,\n                     resJoins[res.indexOf()]));\n             }\n             if (ct != null && field.getOrderColumn() != null)\n@@ -501,7 +492,7 @@ public void select(Select sel, int idx) {\n      * Select data for loading, starting in field table.\n      */\n     protected Joins selectAll(Select sel, ClassMapping elem,\n-        OpenJPAStateManager sm, JDBCStore store, JDBCFetchState fetchState,\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch,\n         int eagerMode) {\n         sel.whereForeignKey(getJoinForeignKey(elem), sm.getObjectId(),\n             field.getDefiningMapping(), store);\n@@ -511,14 +502,14 @@ protected Joins selectAll(Select sel, ClassMapping elem,\n         field.orderLocal(sel, elem, null);\n         Joins joins = joinElementRelation(sel.newJoins(), elem);\n         field.orderRelation(sel, elem, joins);\n-        selectElement(sel, elem, store, fetchState, eagerMode, joins);\n+        selectElement(sel, elem, store, fetch, eagerMode, joins);\n         return joins;\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n-        return loadElement(null, store, fetchState, res, joins);\n+        return loadElement(null, store, fetch, res, joins);\n     }\n \n     protected ForeignKey getJoinForeignKey() {"},{"sha":"29c5272c2ec79a9804025f325e5ae9fba3e0b679","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/StringFieldStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,6 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.Embeddable;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -140,13 +139,13 @@ public int supportsSelect(Select sel, int type, OpenJPAStateManager sm,\n     }\n \n     public int select(Select sel, OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetch, int eagerMode) {\n+        JDBCFetchConfiguration fetch, int eagerMode) {\n         sel.select(field.getColumns()[0], field.join(sel));\n         return 1;\n     }\n \n     public void load(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Result res)\n+        JDBCFetchConfiguration fetch, Result res)\n         throws SQLException {\n         Column col = field.getColumns()[0];\n         if (res.contains(col))\n@@ -169,7 +168,7 @@ public Joins join(Joins joins, boolean forceOuter) {\n         return field.join(joins, forceOuter, false);\n     }\n \n-    public Object loadProjection(JDBCStore store, JDBCFetchState fetchState,\n+    public Object loadProjection(JDBCStore store, JDBCFetchConfiguration fetch,\n         Result res, Joins joins)\n         throws SQLException {\n         return res.getString(field.getColumns()[0], joins);\n@@ -250,7 +249,7 @@ public Object toEmbeddedObjectValue(Object val) {\n     }\n \n     public void loadEmbedded(OpenJPAStateManager sm, JDBCStore store,\n-        JDBCFetchState fetchState, Object val)\n+        JDBCFetchConfiguration fetch, Object val)\n         throws SQLException {\n         sm.storeString(field.getIndex(), (String) val);\n     }"},{"sha":"e50619990c9415bb5f57bb4d8ecadf90f46a8075","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -18,7 +18,7 @@\n import java.sql.SQLException;\n \n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.RelationId;\n import org.apache.openjpa.jdbc.meta.ValueMapping;\n@@ -83,7 +83,7 @@ public Object toDataStoreValue(ValueMapping vm, Object val,\n     }\n \n     public Object toObjectValue(ValueMapping vm, Object val,\n-        OpenJPAStateManager sm, JDBCStore store, JDBCFetchState fetchState)\n+        OpenJPAStateManager sm, JDBCStore store, JDBCFetchConfiguration fetch)\n         throws SQLException {\n         if (val == null)\n             return null;\n@@ -107,7 +107,7 @@ public Object toObjectValue(ValueMapping vm, Object val,\n         }\n \n         Object oid = ctx.newObjectId(cls, oidStr);\n-        return store.find(oid, vm, fetchState);\n+        return store.find(oid, vm, fetch);\n     }\n \n     public Object toRelationDataStoreValue(OpenJPAStateManager sm, Column col) {"},{"sha":"54c133943d881b7aebf32cf629575c3d1f4d8fb6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractResult.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -34,7 +34,7 @@\n import java.util.Locale;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -243,16 +243,15 @@ public void setIndexOf(int idx) {\n     }\n \n     public Object load(ClassMapping mapping, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n-        return load(mapping, store, fetchState, null);\n+        return load(mapping, store, fetch, null);\n     }\n \n     public Object load(ClassMapping mapping, JDBCStore store,\n-        JDBCFetchState fetchState, Joins joins)\n+        JDBCFetchConfiguration fetch, Joins joins)\n         throws SQLException {\n-        return ((JDBCStoreManager) store).load(mapping, fetchState, null,\n-            this);\n+        return ((JDBCStoreManager) store).load(mapping, fetch, null, this);\n     }\n \n     public Array getArray(Object obj)"},{"sha":"386c69c2595338cb3975f5b7a37544b646288a98","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -58,7 +58,6 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.exps.FilterValue;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -1858,15 +1857,14 @@ protected void appendUpdates(Select sel, JDBCStore store, SQLBuffer sql,\n             sql.append(col.getName());\n             sql.append(\" = \");\n             val.initialize(sel, store, false);\n-            JDBCFetchState fetchState = (JDBCFetchState) store.\n-                getFetchConfiguration().newFetchState();\n-            val.calculateValue(sel, store, params, null, fetchState);\n+            JDBCFetchConfiguration fetch = store.getFetchConfiguration();\n+            val.calculateValue(sel, store, params, null, fetch);\n \n             // append the value with a null for the Select; i\n             // indicates that the\n             for (int j = 0; j < val.length(); j++)\n-                val.appendTo(sql, j, allowAlias ? sel : null,\n-                    store, params, fetchState);\n+                val.appendTo(sql, j, (allowAlias) ? sel : null, store, params, \n+                    fetch);\n \n             if (i.hasNext())\n                 sql.append(\", \");\n@@ -2083,13 +2081,20 @@ public SQLBuffer toSelect(SQLBuffer selects, JDBCFetchConfiguration fetch,\n             group, having, order, distinct, forUpdate, start, end);\n     }\n \n+    /**\n+     * Return the \"SELECT\" operation clause, adding any available hints, etc.\n+     */\n     public String getSelectOperation(JDBCFetchConfiguration fetch) {\n         return \"SELECT\";\n     }\n \n-    public SQLBuffer toOperation(String op, SQLBuffer selects, SQLBuffer from,\n-        SQLBuffer where, SQLBuffer group, SQLBuffer having, SQLBuffer order,\n-        boolean distinct, boolean forUpdate, long start, long end) {\n+    /**\n+     * Return the SQL for the given selecting operation.\n+     */\n+    protected SQLBuffer toOperation(String op, SQLBuffer selects, \n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having, \n+        SQLBuffer order, boolean distinct, boolean forUpdate, long start, \n+        long end) {\n         SQLBuffer buf = new SQLBuffer(this);\n         buf.append(op);\n "},{"sha":"31f70eb337fe526db4e582d0d5d82827acd3494b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/HSQLDictionary.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -189,9 +189,10 @@ protected String getSequencesSQL(String schemaName, String sequenceName) {\n         return buf.toString();\n     }\n \n-    public SQLBuffer toOperation(String op, SQLBuffer selects, SQLBuffer from,\n-        SQLBuffer where, SQLBuffer group, SQLBuffer having, SQLBuffer order,\n-        boolean distinct, boolean forUpdate, long start, long end) {\n+    protected SQLBuffer toOperation(String op, SQLBuffer selects, \n+        SQLBuffer from, SQLBuffer where, SQLBuffer group, SQLBuffer having, \n+        SQLBuffer order, boolean distinct, boolean forUpdate, long start, \n+        long end) {\n         // hsql requires ordering when limit is used\n         if ((start != 0 || end != Long.MAX_VALUE)\n             && (order == null || order.isEmpty()))"},{"sha":"ef218e8139c480c1593a283057c5bad11e08b84c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/LogicalUnion.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -25,7 +25,6 @@\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -555,27 +554,26 @@ public int select(Column[] cols, Joins joins) {\n         }\n \n         public void select(ClassMapping mapping, int subclasses,\n-            JDBCStore store, JDBCFetchState fetchState, int eager) {\n-            select(mapping, subclasses, store, fetchState, eager, null, false);\n+            JDBCStore store, JDBCFetchConfiguration fetch, int eager) {\n+            select(mapping, subclasses, store, fetch, eager, null, false);\n         }\n \n         public void select(ClassMapping mapping, int subclasses,\n-            JDBCStore store, JDBCFetchState fetchState, int eager,\n+            JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n             Joins joins) {\n-            select(mapping, subclasses, store, fetchState, eager, joins,\n-                false);\n+            select(mapping, subclasses, store, fetch, eager, joins, false);\n         }\n \n         private void select(ClassMapping mapping, int subclasses,\n-            JDBCStore store, JDBCFetchState fetchState, int eager,\n+            JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n             Joins joins, boolean identifier) {\n             // if this is the first (primary) mapping selected for this\n             // SELECT, record it so we can figure out what the result type is\n             // since the discriminator might not be selected\n             if (mappings[pos] == null)\n                 mappings[pos] = mapping;\n \n-            sel.select(this, mapping, subclasses, store, fetchState, eager,\n+            sel.select(this, mapping, subclasses, store, fetch, eager,\n                 joins, identifier);\n         }\n \n@@ -596,14 +594,14 @@ public int selectIdentifier(Column[] cols, Joins joins) {\n         }\n \n         public void selectIdentifier(ClassMapping mapping, int subclasses,\n-            JDBCStore store, JDBCFetchState fetchState, int eager) {\n-            select(mapping, subclasses, store, fetchState, eager, null, true);\n+            JDBCStore store, JDBCFetchConfiguration fetch, int eager) {\n+            select(mapping, subclasses, store, fetch, eager, null, true);\n         }\n \n         public void selectIdentifier(ClassMapping mapping, int subclasses,\n-            JDBCStore store, JDBCFetchState fetchState, int eager,\n+            JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n             Joins joins) {\n-            select(mapping, subclasses, store, fetchState, eager, joins, true);\n+            select(mapping, subclasses, store, fetch, eager, joins, true);\n         }\n \n         public int selectPrimaryKey(ClassMapping mapping) {"},{"sha":"6e763a1a17e4b38190d6c4e3f6bc79c39610556d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MergedResult.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -32,7 +32,7 @@\n import java.util.Locale;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -213,15 +213,15 @@ public int indexOf() {\n     }\n \n     public Object load(ClassMapping mapping, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException {\n-        return _res[_idx].load(mapping, store, fetchState);\n+        return _res[_idx].load(mapping, store, fetch);\n     }\n \n     public Object load(ClassMapping mapping, JDBCStore store,\n-        JDBCFetchState fetchState, Joins joins)\n+        JDBCFetchConfiguration fetch, Joins joins)\n         throws SQLException {\n-        return _res[_idx].load(mapping, store, fetchState, joins);\n+        return _res[_idx].load(mapping, store, fetch, joins);\n     }\n \n     public Array getArray(Object obj)"},{"sha":"0ddd4aab792e7a5aa59c9f5fcbf665a4331a9ae6","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Result.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -31,7 +31,7 @@\n import java.util.Locale;\n import java.util.Map;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -167,14 +167,14 @@ public boolean containsAll(Column[] cols, Joins joins)\n      * Load a pc object using the given store manager.\n      */\n     public Object load(ClassMapping mapping, JDBCStore store,\n-        JDBCFetchState fetchState)\n+        JDBCFetchConfiguration fetch)\n         throws SQLException;\n \n     /**\n      * Load a pc object using the given store manager.\n      */\n     public Object load(ClassMapping mapping, JDBCStore store,\n-        JDBCFetchState fetchState, Joins joins)\n+        JDBCFetchConfiguration fetch, Joins joins)\n         throws SQLException;\n \n     /**"},{"sha":"a1c4c687856031eb49a61689817a2e75c0de0b23","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/Select.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -19,7 +19,7 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n+import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n import org.apache.openjpa.jdbc.meta.FieldMapping;\n@@ -322,15 +322,15 @@\n      * case the given mapping batches other selects.\n      */\n     public void select(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager);\n \n     /**\n      * Select the columns of the given mapping, possibly including subclasses.\n      * This method should be called after all where conditions are added in\n      * case the given mapping batches other selects.\n      */\n     public void select(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n         Joins joins);\n \n     /**\n@@ -383,7 +383,7 @@ public void select(ClassMapping mapping, int subclasses,\n      * not using an LRSSize setting of <code>count</code>.\n      */\n     public void selectIdentifier(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager);\n \n     /**\n      * Select the columns of the given mapping, possibly including subclasses.\n@@ -395,7 +395,7 @@ public void selectIdentifier(ClassMapping mapping, int subclasses,\n      * not using an LRSSize setting of <code>count</code>.\n      */\n     public void selectIdentifier(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n         Joins joins);\n \n     /**"},{"sha":"200070ec7a47fb06e4b6d0edd468f9e9438bfaec","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SelectImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -38,7 +38,6 @@\n import org.apache.commons.collections.iterators.EmptyIterator;\n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n-import org.apache.openjpa.jdbc.kernel.JDBCFetchState;\n import org.apache.openjpa.jdbc.kernel.JDBCLockManager;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.kernel.JDBCStoreManager;\n@@ -699,22 +698,21 @@ private boolean select(Column col, PathJoins pj, boolean ident) {\n     }\n \n     public void select(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager) {\n-        select(mapping, subclasses, store, fetchState, eager, null);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager) {\n+        select(mapping, subclasses, store, fetch, eager, null);\n     }\n \n     public void select(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n         Joins joins) {\n-        select(this, mapping, subclasses, store, fetchState, eager, joins,\n-            false);\n+        select(this, mapping, subclasses, store, fetch, eager, joins, false);\n     }\n \n     /**\n      * Select the given mapping.\n      */\n     void select(Select wrapper, ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n         Joins joins, boolean ident) {\n         // note that this is one case where we don't want to use the result\n         // of getJoins(); just use the given joins, which will either be clean\n@@ -744,7 +742,7 @@ void select(Select wrapper, ClassMapping mapping, int subclasses,\n \n         // delegate to store manager to select in same order it loads result\n         ((JDBCStoreManager) store).select(wrapper, mapping, subclasses, null,\n-            null, fetchState, eager, ident);\n+            null, fetch, eager, ident);\n \n         // reset\n         if (hasJoins)\n@@ -777,15 +775,14 @@ public int selectIdentifier(Column[] cols, Joins joins) {\n     }\n \n     public void selectIdentifier(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager) {\n-        selectIdentifier(mapping, subclasses, store, fetchState, eager, null);\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager) {\n+        selectIdentifier(mapping, subclasses, store, fetch, eager, null);\n     }\n \n     public void selectIdentifier(ClassMapping mapping, int subclasses,\n-        JDBCStore store, JDBCFetchState fetchState, int eager,\n+        JDBCStore store, JDBCFetchConfiguration fetch, int eager,\n         Joins joins) {\n-        select(this, mapping, subclasses, store, fetchState, eager, joins,\n-            true);\n+        select(this, mapping, subclasses, store, fetch, eager, joins, true);\n     }\n \n     public int selectPrimaryKey(ClassMapping mapping) {\n@@ -2055,7 +2052,7 @@ public void putEager(FieldMapping key, Object res) {\n         }\n \n         public Object load(ClassMapping mapping, JDBCStore store,\n-            JDBCFetchState fetchState, Joins joins)\n+            JDBCFetchConfiguration fetch, Joins joins)\n             throws SQLException {\n             boolean hasJoins = joins != null\n                 && ((PathJoins) joins).path() != null;\n@@ -2065,7 +2062,7 @@ public Object load(ClassMapping mapping, JDBCStore store,\n                 _preJoins.push(joins);\n             }\n \n-            Object obj = super.load(mapping, store, fetchState, joins);\n+            Object obj = super.load(mapping, store, fetch, joins);\n \n             // reset\n             if (hasJoins)"},{"sha":"cb26602ea8a73d6a68d5b2ea8be365d7ec7bb28d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/abstractstore/AbstractStoreManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -26,7 +26,6 @@\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.FetchConfigurationImpl;\n-import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n import org.apache.openjpa.kernel.Seq;\n@@ -211,7 +210,7 @@ public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n      * data into the object.\n      */\n     public abstract boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState, Object context);\n+        FetchConfiguration fetch, Object context);\n \n     /**\n      * This method is invoked when OpenJPA needs to load additional data\n@@ -223,7 +222,7 @@ public abstract boolean initialize(OpenJPAStateManager sm, PCState state,\n      * data into the object.\n      */\n     public abstract boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, int lockLevel, Object context);\n+        FetchConfiguration fetch, int lockLevel, Object context);\n \n     /**\n      * This implementation just delegates to the proper singular\n@@ -364,7 +363,8 @@ public Object getClientConnection() {\n      *  The implementation of the result provider will typically execute\n      * some sort of data store query to find all the applicable objects, loop\n      * through the returned data, extracting object IDs from the data, and\n-     * invoking {@link StoreContext#find(Object,FetchState,BitSet,Object,int)}\n+     * invoking \n+     * {@link StoreContext#find(Object,FetchConfiguration,BitSet,Object,int)}\n      * on each OID. When invoking this method, the first argument is the OID.\n      * The second is the given fetch configuration. The\n      * third argument is a mask of fields to exclude from loading; it will"},{"sha":"cf88fbc4fef6de6654ba6e96d6dd81bd2297c6e8","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfiguration.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -42,7 +42,7 @@\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.ClassResolver;\n import org.apache.openjpa.util.ProxyManager;\n-import org.apache.openjpa.conf.StoreFacadeTypeRegistry;\n+import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n \n /**\n  * Defines the properties necessary to configure runtime properties and"},{"sha":"580ac74d72a5547ff092b1434b8b316778753c9c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -54,7 +54,7 @@\n import org.apache.openjpa.util.ClassResolver;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.ProxyManager;\n-import org.apache.openjpa.conf.StoreFacadeTypeRegistry;\n+import org.apache.openjpa.util.StoreFacadeTypeRegistry;\n \n /**\n  * Implementation of the {@link OpenJPAConfiguration} interface."},{"sha":"784680e7bb1cbb35d22935520a8aef514c462c5d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","status":"modified","additions":11,"deletions":20,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/DataCacheStoreManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -29,7 +29,6 @@\n import org.apache.openjpa.enhance.PCDataGenerator;\n import org.apache.openjpa.kernel.DelegatingStoreManager;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.LockLevels;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n@@ -316,25 +315,22 @@ public boolean syncVersion(OpenJPAStateManager sm, Object edata) {\n     }\n \n     public boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState, Object edata) {\n+        FetchConfiguration fetch, Object edata) {\n         DataCache cache = sm.getMetaData().getDataCache();\n         if (cache == null || sm.isEmbedded())\n-            return super.initialize(sm, state, fetchState, edata);\n+            return super.initialize(sm, state, fetch, edata);\n \n         DataCachePCData data = cache.get(sm.getObjectId());\n-        FetchConfiguration fetch = (fetchState == null)\n-            ? _ctx.getFetchConfiguration()\n-            : fetchState.getFetchConfiguration();\n         if (data != null && !isLocking(fetch)) {\n             //### the 'data.type' access here probably needs to be\n             //### addressed for bug 511\n             sm.initialize(data.getType(), state);\n-            data.load(sm, fetchState, edata);\n+            data.load(sm, fetch, edata);\n             return true;\n         }\n \n         // initialize from store manager\n-        if (!super.initialize(sm, state, fetchState, edata))\n+        if (!super.initialize(sm, state, fetch, edata))\n             return false;\n         if (!_ctx.getPopulateDataCache())\n             return true;\n@@ -361,25 +357,21 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n     }\n \n     public boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, int lockLevel, Object edata) {\n-        FetchConfiguration fetch = (fetchState == null)\n-            ? _ctx.getFetchConfiguration()\n-            : fetchState.getFetchConfiguration();\n+        FetchConfiguration fetch, int lockLevel, Object edata) {\n         DataCache cache = sm.getMetaData().getDataCache();\n         if (cache == null || sm.isEmbedded())\n-            return super.load(sm, fields, fetchState, lockLevel, edata);\n+            return super.load(sm, fields, fetch, lockLevel, edata);\n \n         DataCachePCData data = cache.get(sm.getObjectId());\n         if (lockLevel == LockLevels.LOCK_NONE && !isLocking(fetch)\n             && data != null)\n-            data.load(sm, fields, fetchState, edata);\n+            data.load(sm, fields, fetch, edata);\n         if (fields.length() == 0)\n             return true;\n \n         // load from store manager; clone the set of still-unloaded fields\n         // so that if the store manager decides to modify it it won't affect us\n-        if (!super.load(sm, (BitSet) fields.clone(), fetchState,\n-            lockLevel, edata))\n+        if (!super.load(sm, (BitSet) fields.clone(), fetch, lockLevel, edata))\n             return false;\n         if (!_ctx.getPopulateDataCache())\n             return true;\n@@ -432,17 +424,16 @@ public Collection loadAll(Collection sms, PCState state, int load,\n                     //### the 'data.type' access here probably needs\n                     //### to be addressed for bug 511\n                     sm.initialize(data.getType(), state);\n-                    data.load(sm, fetch.newFetchState(), edata);\n+                    data.load(sm, fetch, edata);\n                 } else\n                     unloaded = addUnloaded(sm, null, unloaded);\n             } else if (load != FORCE_LOAD_NONE\n                 || sm.getPCState() == PCState.HOLLOW) {\n                 data = cache.get(sm.getObjectId());\n                 if (data != null) {\n                     // load unloaded fields\n-                \tFetchState fetchState = fetch.newFetchState();\n-                    fields = sm.getUnloaded(fetchState);\n-                    data.load(sm, fields, fetchState, edata);\n+                    fields = sm.getUnloaded(fetch);\n+                    data.load(sm, fields, fetch, edata);\n                     if (fields.length() > 0)\n                         unloaded = addUnloaded(sm, fields, unloaded);\n                 } else"},{"sha":"fcba4649242819e7764b842d2f69e209c7c9743a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","status":"modified","additions":21,"deletions":44,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCDataGenerator.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -26,7 +26,6 @@\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.AbstractPCData;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCData;\n import org.apache.openjpa.kernel.StoreContext;\n@@ -523,18 +522,12 @@ protected void addVersionMethods(BCClass bc) {\n     }\n \n     private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n-        // public void load(OpenJPAStateManager sm, FetchState fetchState,\n+        // public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n         // \t\tObject context)\n         Code code = addLoadMethod(bc, false);\n         FieldMetaData[] fmds = meta.getFields();\n         Collection jumps = new LinkedList();\n         Collection jumps2;\n-\t\t// FetchConfiguration fetch = fetchState.getFetchConfiguration();\n-\t\tint fetch = code.getNextLocalsIndex();\n-\t\tcode.aload().setParam(1);\n-\t\tcode.invokeinterface().setMethod(FetchState.class, \n-\t\t\t\"getFetchConfiguration\", FetchConfiguration.class, null);\n-\t\tcode.astore().setLocal(fetch);\n \t\t\n         int local = code.getNextLocalsIndex();\n         code.constant().setNull();\n@@ -558,38 +551,22 @@ private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n \n             if (intermediate)\n                 addLoadIntermediate(code, i, objectCount, jumps2, inter);\n-\n             jumps2.add(code.go2());\n \n-            // if in DFG, no if statement.\n-            // else if (fetch.hasFetchGroup(sm.getMetaData().getField(i).\n-\t\t\t//     getFetchGroups()) || fetch.hasField(fmds[i].getFullName()))\n-            if (!fmds[i].isInDefaultFetchGroup()) {\n-                setTarget(code.aload().setLocal(fetch), jumps);\n-                code.aload().setParam(0);\n-                code.invokeinterface().setMethod(OpenJPAStateManager.class,\n-                    \"getMetaData\", ClassMetaData.class, null);\n-\t\t\t\tcode.constant().setValue(fmds[i].getIndex());\n-                code.invokevirtual().setMethod(ClassMetaData.class,\n-                    \"getField\", FieldMetaData.class, new Class[]{int.class});\n-                code.invokevirtual().setMethod(FieldMetaData.class,\n-                    \"getFetchGroups\", Set.class, null);\n-                code.invokeinterface().setMethod\n-                    (FetchConfiguration.class, \"hasAnyFetchGroup\",\n-                        boolean.class, new Class[]{ Set.class });\n-                JumpInstruction ifins = code.ifne();\n-                code.aload().setLocal(fetch);\n-                code.constant().setValue(fmds[i].getFullName());\n-                code.invokeinterface().setMethod\n-                    (FetchConfiguration.class, \"hasField\", boolean.class,\n-                        new Class[]{ String.class });\n-                jumps2.add(code.ifeq());\n-                ifins.setTarget(addLoad(bc, code, fmds[i], objectCount,\n-                    local, false));\n-            } else {\n-                setTarget(addLoad(bc, code, fmds[i], objectCount,\n-                    local, false), jumps);\n-            }\n+            // if (fetch.requiresFetch(fmds[i]))\n+            setTarget(code.aload().setParam(1), jumps);\n+            code.aload().setParam(0);\n+            code.invokeinterface().setMethod(OpenJPAStateManager.class,\n+                \"getMetaData\", ClassMetaData.class, null);\n+            code.constant().setValue(fmds[i].getIndex());\n+            code.invokevirtual().setMethod(ClassMetaData.class,\n+                \"getField\", FieldMetaData.class, new Class[]{int.class});\n+            code.invokeinterface().setMethod (FetchConfiguration.class, \n+                \"requiresFetch\", boolean.class, \n+                new Class[]{FieldMetaData.class});\n+            jumps2.add(code.ifeq());\n+            addLoad(bc, code, fmds[i], objectCount, local, false);\n+\n             jumps = jumps2;\n             if (replaceType(fmds[i]) >= JavaTypes.OBJECT)\n                 objectCount++;\n@@ -601,7 +578,7 @@ private void addLoadMethod(BCClass bc, ClassMetaData meta) {\n \n     private void addLoadWithFieldsMethod(BCClass bc, ClassMetaData meta) {\n         Code code = addLoadMethod(bc, true);\n-        // public void load(OpenJPAStateManager sm, FetchState fs,\n+        // public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n         // \t\tBitSet fields, Object conn)\n         FieldMetaData[] fmds = meta.getFields();\n         Collection jumps = new LinkedList();\n@@ -667,10 +644,10 @@ private Code addLoadMethod(BCClass bc, boolean fields) {\n         Class[] args = null;\n         if (fields)\n             args = new Class[]{ OpenJPAStateManager.class, BitSet.class,\n-                FetchState.class, Object.class };\n+                FetchConfiguration.class, Object.class };\n         else\n             args = new Class[]{ OpenJPAStateManager.class,\n-                FetchState.class, Object.class };\n+                FetchConfiguration.class, Object.class };\n         BCMethod load = bc.declareMethod(\"load\", void.class, args);\n         Code code = load.getCode(true);\n \n@@ -730,9 +707,9 @@ private Instruction addLoad(BCClass bc, Code code, FieldMetaData fmd,\n             code.aload().setParam(1 + offset);\n             code.aload().setParam(2 + offset);\n             code.invokevirtual().setMethod(bc.getName(), \"toField\",\n-                Object.class.getName(), toStrings\n-                (new Class[]{ OpenJPAStateManager.class, FieldMetaData.class,\n-                    Object.class, FetchState.class, Object.class }));\n+                Object.class.getName(), toStrings(new Class[]{ \n+                OpenJPAStateManager.class, FieldMetaData.class,\n+                Object.class, FetchConfiguration.class, Object.class }));\n             code.invokeinterface().setMethod(OpenJPAStateManager.class,\n                 \"storeField\", void.class,\n                 new Class[]{ int.class, Object.class });"},{"sha":"bec62db1802c252cfe3a2c61d2a34b661e3fbda7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCData.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -64,7 +64,7 @@ public boolean isLoaded(int field) {\n      * Transform the given data value into its field value.\n      */\n     protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n-        Object data, FetchState fetchState, Object context) {\n+        Object data, FetchConfiguration fetch, Object context) {\n         if (data == null)\n             return null;\n \n@@ -74,7 +74,7 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n                 Collection c2 = (Collection) sm.newFieldProxy(fmd.getIndex());\n                 for (int i = 0; i < c.size(); i++)\n                     c2.add(toNestedField(sm, fmd.getElement(), c.get(i),\n-                        fetchState, context));\n+                        fetch, context));\n                 if (c2 instanceof Proxy) {\n                     ChangeTracker ct = ((Proxy) c2).getChangeTracker();\n                     if (ct != null)\n@@ -90,9 +90,9 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n                 for (Iterator mi = m.entrySet().iterator(); mi.hasNext();) {\n                     e = (Map.Entry) mi.next();\n                     key = toNestedField(sm, fmd.getKey(), e.getKey(),\n-                        fetchState, context);\n+                        fetch, context);\n                     value = toNestedField(sm, fmd.getElement(), e.getValue(),\n-                        fetchState, context);\n+                        fetch, context);\n                     m2.put(key, value);\n                 }\n                 return m2;\n@@ -102,11 +102,11 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n                     l.size());\n                 for (int i = 0; i < l.size(); i++) {\n                     Array.set(a, i, toNestedField(sm, fmd.getElement(),\n-                        l.get(i), fetchState, context));\n+                        l.get(i), fetch, context));\n                 }\n                 return a;\n             default:\n-                return toNestedField(sm, fmd, data, fetchState, context);\n+                return toNestedField(sm, fmd, data, fetch, context);\n         }\n     }\n \n@@ -115,7 +115,7 @@ protected Object toField(OpenJPAStateManager sm, FieldMetaData fmd,\n      * may be a key, value, or element of a map or collection.\n      */\n     protected Object toNestedField(OpenJPAStateManager sm, ValueMetaData vmd,\n-        Object data, FetchState fetchState, Object context) {\n+        Object data, FetchConfiguration fetch, Object context) {\n         if (data == null)\n             return null;\n \n@@ -126,11 +126,11 @@ protected Object toNestedField(OpenJPAStateManager sm, ValueMetaData vmd,\n                 return (Locale) data;\n             case JavaTypes.PC:\n                 if (vmd.isEmbedded())\n-                    return toEmbeddedField(sm, vmd, data, fetchState, context);\n+                    return toEmbeddedField(sm, vmd, data, fetch, context);\n                 // no break\n             case JavaTypes.PC_UNTYPED:\n                 Object ret =\n-                    toRelationField(sm, vmd, data, fetchState, context);\n+                    toRelationField(sm, vmd, data, fetch, context);\n                 if (ret != null)\n                     return ret;\n                 OrphanedKeyAction action = sm.getContext().getConfiguration().\n@@ -146,21 +146,21 @@ protected Object toNestedField(OpenJPAStateManager sm, ValueMetaData vmd,\n      * implementation assumes the data is an oid.\n      */\n     protected Object toRelationField(OpenJPAStateManager sm, ValueMetaData vmd,\n-        Object data, FetchState fetchState, Object context) {\n-        return sm.getContext().find(data, fetchState, null, null, 0);\n+        Object data, FetchConfiguration fetch, Object context) {\n+        return sm.getContext().find(data, fetch, null, null, 0);\n     }\n \n     /**\n      * Transform the given data into an embedded PC field value. Default\n      * implementation assumes the data is an {@link AbstractPCData}.\n      */\n     protected Object toEmbeddedField(OpenJPAStateManager sm, ValueMetaData vmd,\n-        Object data, FetchState fetchState, Object context) {\n+        Object data, FetchConfiguration fetch, Object context) {\n         AbstractPCData pcdata = (AbstractPCData) data;\n         OpenJPAStateManager embedded = sm.getContext().embed(null,\n             pcdata.getId(), sm, vmd);\n         pcdata.load(embedded, (BitSet) pcdata.getLoaded().clone(),\n-            fetchState, context);\n+            fetch, context);\n         return embedded.getManagedInstance();\n     }\n "},{"sha":"397d31cd861dda52603c907bab3f66ba331f2721","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractPCResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -53,10 +53,10 @@ public StoreContext getContext() {\n     }\n \n     public void initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState)\n+        FetchConfiguration fetch)\n         throws Exception {\n         sm.initialize(getPCType(), state);\n-        load(sm, fetchState);\n+        load(sm, fetch);\n     }\n \n     public Object getResultObject()\n@@ -93,7 +93,8 @@ protected abstract Class getPCType()\n      * manager. Remember to call {@link OpenJPAStateManager#setVersion} to set\n      * the optimistic versioning information, if it has any.\n      */\n-    protected abstract void load(OpenJPAStateManager sm, FetchState fetch)\n+    protected abstract void load(OpenJPAStateManager sm, \n+        FetchConfiguration fetch)\n         throws Exception;\n \n     /**"},{"sha":"ad7c83bfb64d20b617f695895e195eeb970734b5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":26,"deletions":34,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -694,20 +694,18 @@ public Object find(Object oid, boolean validate, FindCallbacks call) {\n         int flags = OID_COPY | OID_ALLOW_NEW | OID_NODELETED;\n         if (!validate)\n             flags |= OID_NOVALIDATE;\n-        return find(oid, _fc.newFetchState (), null, null, flags, call);\n+        return find(oid, _fc, null, null, flags, call);\n     }\n \n-    public Object find(Object oid, FetchState fetchState, BitSet exclude,\n+    public Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         Object edata, int flags) {\n-    \tif (fetchState == null)\n-    \t\tfetchState = _fc.newFetchState ();\n-        return find(oid, fetchState, exclude, edata, flags, null);\n+        return find(oid, fetch, exclude, edata, flags, null);\n     }\n \n     /**\n      * Internal finder.\n      */\n-    protected Object find(Object oid, FetchState fetchState, BitSet exclude,\n+    protected Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         Object edata, int flags, FindCallbacks call) {\n         if (call == null)\n             call = this;\n@@ -717,6 +715,8 @@ protected Object find(Object oid, FetchState fetchState, BitSet exclude,\n                 throw new ObjectNotFoundException(_loc.get(\"null-oid\"));\n             return call.processReturn(oid, null);\n         }\n+        if (fetch == null)\n+            fetch = _fc;\n \n         beginOperation(true);\n         try {\n@@ -732,16 +732,13 @@ protected Object find(Object oid, FetchState fetchState, BitSet exclude,\n                 if (!sm.isLoading()) {\n                     // make sure all the configured fields are loaded; do this\n                     // after making instance transactional for locking\n-                    if (!sm.isTransactional()\n-                        && useTransactionalState(fetchState.\n-                        getFetchConfiguration()))\n+                    if (!sm.isTransactional() && useTransactionalState(fetch))\n                         sm.transactional();\n                     boolean loaded = sm.isLoading();\n                     if (!loaded) {\n                         try {\n-                            loaded = sm.load(fetchState,\n-                                StateManagerImpl.LOAD_FGS, exclude, edata,\n-                                false);\n+                            loaded = sm.load(fetch, StateManagerImpl.LOAD_FGS, \n+                                exclude, edata, false);\n                         } catch (ObjectNotFoundException onfe) {\n                             if ((flags & OID_NODELETED) != 0\n                                 || (flags & OID_NOVALIDATE) != 0)\n@@ -767,8 +764,6 @@ protected Object find(Object oid, FetchState fetchState, BitSet exclude,\n                 // since the object was cached, we may need to upgrade lock\n                 // if current level is higher than level of initial load\n                 if ((_flags & FLAG_ACTIVE) != 0) {\n-                    FetchConfiguration fetch =\n-                        fetchState.getFetchConfiguration();\n                     int level = fetch.getReadLockLevel();\n                     _lm.lock(sm, level, fetch.getLockTimeout(), edata);\n                     sm.readLocked(level, fetch.getWriteLockLevel());\n@@ -784,7 +779,7 @@ protected Object find(Object oid, FetchState fetchState, BitSet exclude,\n             // initialize a new state manager for the datastore instance\n             sm = newStateManagerImpl(oid, (flags & OID_COPY) != 0);\n             boolean load = requiresLoad(sm, false, edata, flags);\n-            sm = initialize(sm, load, fetchState, edata);\n+            sm = initialize(sm, load, fetch, edata);\n             if (sm == null) {\n                 if ((flags & OID_NOVALIDATE) != 0)\n                     throw new ObjectNotFoundException(oid);\n@@ -794,7 +789,7 @@ protected Object find(Object oid, FetchState fetchState, BitSet exclude,\n             // make sure all configured fields were loaded\n             if (load) {\n                 try {\n-                    sm.load(fetchState, StateManagerImpl.LOAD_FGS, exclude,\n+                    sm.load(fetch, StateManagerImpl.LOAD_FGS, exclude,\n                         edata, false);\n                 } catch (ObjectNotFoundException onfe) {\n                     if ((flags & OID_NODELETED) != 0\n@@ -817,18 +812,16 @@ protected Object find(Object oid, FetchState fetchState, BitSet exclude,\n      * Initialize a newly-constructed state manager.\n      */\n     protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n-        FetchState fetchState, Object edata) {\n+        FetchConfiguration fetch, Object edata) {\n         if (!load) {\n             sm.initialize(sm.getMetaData().getDescribedType(),\n                 PCState.HOLLOW);\n         } else {\n-            FetchConfiguration fetch = (fetchState == null)\n-                ? _fc : fetchState.getFetchConfiguration();\n             PCState state = (useTransactionalState(fetch))\n                 ? PCState.PCLEAN : PCState.PNONTRANS;\n             sm.setLoading(true);\n             try {\n-                if (!_store.initialize(sm, state, fetchState, edata))\n+                if (!_store.initialize(sm, state, fetch, edata))\n                     return null;\n             } finally {\n                 sm.setLoading(false);\n@@ -867,6 +860,9 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n         _loading = new HashMap((int) (oids.size() * 1.33 + 1));\n         if (call == null)\n             call = this;\n+        if (fetch == null)\n+            fetch = _fc;\n+\n         beginOperation(true);\n         try {\n             assertNontransactionalRead();\n@@ -912,7 +908,7 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n                 PCState state = (transState) ? PCState.PCLEAN\n                     : PCState.PNONTRANS;\n                 Collection failed = _store.loadAll(load, state,\n-                    StoreManager.FORCE_LOAD_NONE, _fc, edata);\n+                    StoreManager.FORCE_LOAD_NONE, fetch, edata);\n \n                 // set failed instances to null\n                 if (failed != null && !failed.isEmpty()) {\n@@ -934,7 +930,7 @@ protected StateManagerImpl initialize(StateManagerImpl sm, boolean load,\n                 sm = (StateManagerImpl) _loading.get(oid);\n                 if (sm != null && requiresLoad(sm, true, edata, flags)) {\n                     try {\n-                        sm.load(fetch.newFetchState(), StateManagerImpl.LOAD_FGS, \n+                        sm.load(fetch, StateManagerImpl.LOAD_FGS,\n                         \texclude, edata, false);\n                         if (active) {\n                             _lm.lock(sm, level, fetch.getLockTimeout(), edata);\n@@ -2482,8 +2478,7 @@ public OpenJPAStateManager embed(Object obj, Object id,\n \n                 // otherwise make sure pc is fully loaded for when we copy its\n                 // data below\n-                orig.load(_fc.newFetchState(), StateManagerImpl.LOAD_ALL,\n-                    null, null, false);\n+                orig.load(_fc, StateManagerImpl.LOAD_ALL, null, null, false);\n             }\n \n             // create new state manager with embedded metadata\n@@ -2698,8 +2693,8 @@ else if (sm.beforeRefresh(true)) {\n \n                     try {\n                         sm.afterRefresh();\n-                        sm.load(_fc.newFetchState(),\n-                            StateManagerImpl.LOAD_FGS, null, null, false);\n+                        sm.load(_fc, StateManagerImpl.LOAD_FGS, null, null, \n+                            false);\n                     } catch (OpenJPAException ke) {\n                         exceps = add(exceps, ke);\n                     }\n@@ -2739,8 +2734,7 @@ protected void refreshInternal(Object obj, OpCallbacks call) {\n                 if (sm.isDetached())\n                     throw newDetachedException(obj, \"refresh\");\n                 else if (sm.beforeRefresh(false)) {\n-                    sm.load(_fc.newFetchState(), StateManagerImpl.LOAD_FGS,\n-                        null, null, false);\n+                    sm.load(_fc, StateManagerImpl.LOAD_FGS, null, null, false);\n                     sm.afterRefresh();\n                 }\n                 fireLifecycleEvent(sm.getManagedInstance(), null,\n@@ -2825,7 +2819,7 @@ public void retrieveAll(Collection objs, boolean dfgOnly,\n                     : StateManagerImpl.LOAD_ALL;\n                 try {\n                     sm.beforeRead(-1);\n-                    sm.load(_fc.newFetchState(), mode, null, null, false);\n+                    sm.load(_fc, mode, null, null, false);\n                 } catch (OpenJPAException ke) {\n                     exceps = add(exceps, ke);\n                 }\n@@ -2861,7 +2855,7 @@ public void retrieve(Object obj, boolean dfgOnly, OpCallbacks call) {\n                     int mode = (dfgOnly) ? StateManagerImpl.LOAD_FGS\n                         : StateManagerImpl.LOAD_ALL;\n                     sm.beforeRead(-1);\n-                    sm.load(_fc.newFetchState(), mode, null, null, false);\n+                    sm.load(_fc, mode, null, null, false);\n                 }\n             } else if (assertPersistenceCapable(obj).pcIsDetached()\n                 == Boolean.TRUE)\n@@ -3227,8 +3221,7 @@ public void transactional(Object obj, boolean updateVersion,\n             if (sm != null && sm.isPersistent()) {\n                 assertActiveTransaction();\n                 sm.transactional();\n-                sm.load(_fc.newFetchState(), StateManagerImpl.LOAD_FGS, null,\n-                    null, false);\n+                sm.load(_fc, StateManagerImpl.LOAD_FGS, null, null, false);\n                 sm.setCheckVersion(true);\n                 if (updateVersion)\n                     sm.setUpdateVersion(true);\n@@ -3266,8 +3259,7 @@ private void transactionalStatesAll(Collection sms, Collection failed,\n \n             try {\n                 sm.transactional();\n-                sm.load(_fc.newFetchState(), StateManagerImpl.LOAD_FGS, null,\n-                    null, false);\n+                sm.load(_fc, StateManagerImpl.LOAD_FGS, null, null, false);\n             } catch (OpenJPAException ke) {\n                 exceps = add(exceps, ke);\n             }"},{"sha":"1d4f4e0ce4850b86c11d707ca284e6d87d87bdb0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -189,10 +189,10 @@ public Object findCached(Object oid, FindCallbacks call) {\n         }\n     }\n \n-    public Object find(Object oid, FetchState fetchState, BitSet exclude,\n+    public Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         Object edata, int flags) {\n         try {\n-            return _broker.find(oid, fetchState, exclude, edata, flags);\n+            return _broker.find(oid, fetch, exclude, edata, flags);\n         } catch (RuntimeException re) {\n             throw translate(re);\n         }"},{"sha":"178b545e8d0299a6f2c4c113a090750b379b2b4d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingFetchConfiguration.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -20,6 +20,7 @@\n \n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.RuntimeExceptionTranslator;\n \n ///////////////////////////////////////////////////////////////\n@@ -229,14 +230,6 @@ public boolean hasFetchGroup(String group) {\n         }\n     }\n \n-    public boolean hasAnyFetchGroup(Set groups) {\n-        try {\n-            return _fetch.hasAnyFetchGroup(groups);\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n     public FetchConfiguration addFetchGroup(String group) {\n         try {\n             _fetch.addFetchGroup(group);\n@@ -411,14 +404,6 @@ public ResultList newResultList(ResultObjectProvider rop) {\n         }\n     }\n \n-    public FetchState newFetchState() {\n-        try {\n-            return _fetch.newFetchState();\n-        } catch (RuntimeException re) {\n-            throw translate(re);\n-        }\n-    }\n-\n     public void copy(FetchConfiguration fetch) {\n         try {\n             _fetch.copy(fetch);\n@@ -451,6 +436,22 @@ public Object getHint(String name) {\n \t\t}\n \t}\n \n+    public boolean requiresFetch(FieldMetaData fmd) {\n+        try {\n+            return _fetch.requiresFetch(fmd);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public FetchConfiguration traverse(FieldMetaData fmd) {\n+        try {\n+            return _fetch.traverse(fmd);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        } \n+    }\n+\n     public void lock() {\n         try {\n             _fetch.lock();"},{"sha":"c48787068c862bc3cb36c67d3dc9fce657dedfe6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingStoreManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -104,13 +104,13 @@ public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n     }\n \n     public boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState, Object context) {\n-        return _store.initialize(sm, state, fetchState, context);\n+        FetchConfiguration fetch, Object context) {\n+        return _store.initialize(sm, state, fetch, context);\n     }\n \n     public boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, int lockLevel, Object context) {\n-        return _store.load(sm, fields, fetchState, lockLevel, context);\n+        FetchConfiguration fetch, int lockLevel, Object context) {\n+        return _store.load(sm, fields, fetch, lockLevel, context);\n     }\n \n     public Collection loadAll(Collection sms, PCState state, int load,"},{"sha":"9e16bfa140f41001fd2d88cf0be270be953f472b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -148,9 +148,7 @@ private static void preDetach(Broker broker, StateManagerImpl sm,\n             exclude = StoreContext.EXCLUDE_ALL;\n         else if (detachMode == DETACH_ALL)\n             loadMode = StateManagerImpl.LOAD_ALL;\n-        FetchState fetchState = broker.getFetchConfiguration().\n-            newFetchState();\n-        sm.load(fetchState, loadMode, exclude, null, false);\n+        sm.load(broker.getFetchConfiguration(), loadMode, exclude, null, false);\n \n         // create bitset of fields to detach; if mode is all we can use\n         // currently loaded bitset clone, since we know all fields are loaded\n@@ -221,12 +219,9 @@ private static void setFetchGroupFields(Broker broker,\n         StateManagerImpl sm, BitSet idxs) {\n         FetchConfiguration fetch = broker.getFetchConfiguration();\n         FieldMetaData[] fmds = sm.getMetaData().getFields();\n-        for (int i = 0; i < fmds.length; i++) {\n-            if (fmds[i].isPrimaryKey() || fmds[i].isInDefaultFetchGroup()\n-                || fetch.hasAnyFetchGroup(fmds[i].getFetchGroups())\n-                || fetch.hasField(fmds[i].getFullName()))\n+        for (int i = 0; i < fmds.length; i++)\n+            if (fmds[i].isPrimaryKey() || fetch.requiresFetch(fmds[i]))\n                 idxs.set(i);\n-        }\n     }\n \n     /**"},{"sha":"743cee8eb3c13dddd684368d0d50e8ff6d3330e5","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedStateManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -137,9 +137,7 @@ public Object attach(AttachManager manager, Object toAttach,\n                 }\n             }\n             FetchConfiguration fc = broker.getFetchConfiguration();\n-            FetchState fetchState = fc.newFetchState();\n-            sm.loadFields(load, fetchState, fc.getWriteLockLevel(), null, true);\n-                \n+            sm.loadFields(load, fc, fc.getWriteLockLevel(), null, true);\n         }\n         sm.setVersion(_version);\n \n@@ -646,15 +644,15 @@ public Object replaceObjectField(PersistenceCapable pc, int idx) {\n         return ret;\n     }\n \n-    ///////////////////////////////////\n+    //////////////////////////////////////\n     // OpenJPAStateManager implementation\n-    ///////////////////////////////////\n+    //////////////////////////////////////\n \n     public void initialize(Class forType, PCState state) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void load(FetchState fetchState) {\n+    public void load(FetchConfiguration fetch) {\n         throw new UnsupportedOperationException();\n     }\n \n@@ -702,7 +700,7 @@ public BitSet getFlushed() {\n         throw new UnsupportedOperationException();\n     }\n \n-    public BitSet getUnloaded(FetchState fetchState) {\n+    public BitSet getUnloaded(FetchConfiguration fetch) {\n         throw new UnsupportedOperationException();\n     }\n "},{"sha":"c2d03750cbbb6870c23198478cce5e7ad7a163ff","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachedValueStateManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -65,7 +65,7 @@ public void initialize(Class forType, PCState state) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void load(FetchState fetchState) {\n+    public void load(FetchConfiguration fetch) {\n         throw new UnsupportedOperationException();\n     }\n \n@@ -113,7 +113,7 @@ public BitSet getFlushed() {\n         throw new UnsupportedOperationException();\n     }\n \n-    public BitSet getUnloaded(FetchState fetchState) {\n+    public BitSet getUnloaded(FetchConfiguration fetch) {\n         throw new UnsupportedOperationException();\n     }\n "},{"sha":"5d30076c818aaf6167538e5803fe68e8a938b94f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","status":"modified","additions":40,"deletions":49,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfiguration.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -21,14 +21,15 @@\n \n import org.apache.openjpa.lib.rop.ResultList;\n import org.apache.openjpa.lib.rop.ResultObjectProvider;\n+import org.apache.openjpa.meta.FieldMetaData;\n \n /**\n  * Allows configuration and optimization of how objects are loaded from\n  * the data store.\n  *\n  * @since 3.0\n  * @author Abe White\n- * @author Patrick Linskey\n+ * @author Pinaki Poddar\n  */\n public interface FetchConfiguration\n     extends Serializable, Cloneable, LockLevels, QueryFlushModes {\n@@ -38,18 +39,6 @@\n      */\n     public static final int DEFAULT = -99;\n \n-    /**\n-     * Special fetch group name that is used by OpenJPA to indicate that all\n-     * fetch groups should be loaded by this configuration.\n-     */\n-    public static final String FETCH_GROUP_ALL = \"openjpa.FetchGroupAll\";\n-\n-    /**\n-     * Special fetch group name that is used by OpenJPA to denote the default\n-     * fetch group.\n-     */\n-    public static final String FETCH_GROUP_DEFAULT = \"default\";\n-\n     /**\n      * Return the context assiciated with this configuration;\n      * may be null if it has not been set or this object has been serialized.\n@@ -142,13 +131,6 @@\n      */\n     public boolean hasFetchGroup(String group);\n \n-    /**\n-     * Return true if any of the given fetch groups has been added.\n-     *\n-     * @since 4.1\n-     */\n-    public boolean hasAnyFetchGroup(Set groups);\n-\n     /**\n      * Adds <code>group</code> to the set of fetch group names to\n      * use when loading objects.\n@@ -227,26 +209,6 @@\n      */\n     public FetchConfiguration clearFields();\n \n-    /**\n-     * Root classes for recursive operations. This set is not thread safe.\n-     */\n-    public Set getRootClasses();\n-\n-    /**\n-     * Root classes for recursive operations.\n-     */\n-    public FetchConfiguration setRootClasses(Collection classes);\n-\n-    /**\n-     * Root instances for recursive operations. This set is not thread safe.\n-     */\n-    public Set getRootInstances();\n-\n-    /**\n-     * Root instances for recursive operations.\n-     */\n-    public FetchConfiguration setRootInstances(Collection roots);\n-\n     /**\n      * The number of milliseconds to wait for an object lock, or -1 for no\n      * limit.\n@@ -296,13 +258,6 @@\n      */\n     public ResultList newResultList(ResultObjectProvider rop);\n \n-    /**\n-     * Create a new fecth state for the current fetch configuration.\n-     *\n-     * @since 4.1\n-     */\n-    public FetchState newFetchState();\n-\n     /**\n      * Sets an arbitrary query hint that may be utilized during\n      * execution. The hint may be datastore-specific.\n@@ -318,11 +273,30 @@\n      * is not specified.\n      *\n \t * @param name the hint name\n-\t *\n-\t * @since\t4.0\n+\t * @since 4.0\n \t */\n \tpublic Object getHint (String name);\n \n+    /**\n+     * Root classes for recursive operations. This set is not thread safe.\n+     */\n+    public Set getRootClasses();\n+\n+    /**\n+     * Root classes for recursive operations.\n+     */\n+    public FetchConfiguration setRootClasses(Collection classes);\n+\n+    /**\n+     * Root instances for recursive operations. This set is not thread safe.\n+     */\n+    public Set getRootInstances();\n+\n+    /**\n+     * Root instances for recursive operations.\n+     */\n+    public FetchConfiguration setRootInstances(Collection roots);\n+\n     /**\n      * Synchronize on internal lock if multithreaded is true.\n      */\n@@ -332,4 +306,21 @@\n      * Release internal lock if multithreaded is true.\n      */\n     public void unlock();\n+\n+    /**\n+     * Affirms if the given field requires to be fetched in the context\n+     * of current fetch operation.\n+     *\n+     * @since 4.1\n+     */\n+    public boolean requiresFetch(FieldMetaData fm);\n+    \n+    /**\n+     * Traverse the given field to generate (possibly) a new configuration \n+     * state.\n+     * \n+     * @return a new configuration state resulting out of traversal\n+     * @since 4.1\n+     */\n+    public FetchConfiguration traverse(FieldMetaData fm);\n }"},{"sha":"5f00c8ba468a59af1a90ad20a969714a2066f3aa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","status":"modified","additions":341,"deletions":148,"changes":489,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchConfigurationImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -15,12 +15,15 @@\n  */\n package org.apache.openjpa.kernel;\n \n+import java.io.Serializable;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n@@ -33,6 +36,9 @@\n import org.apache.openjpa.lib.rop.SimpleResultList;\n import org.apache.openjpa.lib.rop.WindowResultList;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FetchGroup;\n+import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.NoTransactionException;\n import org.apache.openjpa.util.UserException;\n@@ -43,6 +49,7 @@\n  *\n  * @since 3.0\n  * @author Abe White\n+ * @author Pinaki Poddar\n  * @nojavadoc\n  */\n public class FetchConfigurationImpl\n@@ -51,31 +58,52 @@\n     private static final Localizer _loc = Localizer.forPackage\n         (FetchConfigurationImpl.class);\n \n-    // transient state\n-    private transient StoreContext _ctx = null;\n-\n-    private int _fetchBatchSize = 0;\n-    private int _maxFetchDepth = 1;\n-    private boolean _queryCache = true;\n-    private int _flushQuery = 0;\n-    private int _lockTimeout = -1;\n-    private int _readLockLevel = LOCK_NONE;\n-    private int _writeLockLevel = LOCK_NONE;\n-    private Set _fetchGroups = null;\n-    private Set _fields = null;\n-    private Set _rootClasses;\n-    private Set _rootInstances;\n-    private Map _hints = null;\n+    /**\n+     * Configurable state shared throughout a traversal chain.\n+     */\n+    protected static class ConfigurationState\n+        implements Serializable\n+    {\n+        public transient StoreContext ctx = null;\n+        public int fetchBatchSize = 0;\n+        public int maxFetchDepth = 1;\n+        public boolean queryCache = true;\n+        public int flushQuery = 0;\n+        public int lockTimeout = -1;\n+        public int readLockLevel = LOCK_NONE;\n+        public int writeLockLevel = LOCK_NONE;\n+        public Set fetchGroups = null;\n+        public Set fields = null;\n+        public Set rootClasses;\n+        public Set rootInstances;\n+        public Map hints = null;\n+    }\n+\n+    private final ConfigurationState _state;\n+    private FetchConfigurationImpl _parent;\n+    private String _fromField;\n+    private Class _fromType;\n+    private int _availableRecursion;\n+    private int _availableDepth;\n+\n+    public FetchConfigurationImpl() {\n+        this(null);\n+    }\n+\n+    protected FetchConfigurationImpl(ConfigurationState state) {\n+        _state = (state == null) ? new ConfigurationState() : state;\n+        _availableDepth = _state.maxFetchDepth;\n+    } \n \n     public StoreContext getContext() {\n-        return _ctx;\n+        return _state.ctx;\n     }\n \n     public void setContext(StoreContext ctx) {\n         // can't reset non-null context to another context\n-        if (ctx != null && _ctx != null && ctx != _ctx)\n+        if (ctx != null && _state.ctx != null && ctx != _state.ctx)\n             throw new InternalException();\n-        _ctx = ctx;\n+        _state.ctx = ctx;\n         if (ctx == null)\n             return;\n \n@@ -91,18 +119,22 @@ public void setContext(StoreContext ctx) {\n      * Clone this instance.\n      */\n     public Object clone() {\n-        FetchConfigurationImpl clone = newInstance();\n-        clone._ctx = _ctx;\n+        FetchConfigurationImpl clone = newInstance(null);\n+        clone._state.ctx = _state.ctx;\n+        clone._parent = _parent;\n+        clone._fromField = _fromField;\n+        clone._fromType = _fromType;\n+        clone._availableRecursion = _availableRecursion;\n+        clone._availableDepth = _availableDepth;\n         clone.copy(this);\n         return clone;\n     }\n \n     /**\n-     * Return a new hollow instance. Subclasses should override to return\n-     * a new instance of their type, with cached permissions set appropriately.\n+     * Return a new hollow instance.\n      */\n-    protected FetchConfigurationImpl newInstance() {\n-        return new FetchConfigurationImpl();\n+    protected FetchConfigurationImpl newInstance(ConfigurationState state) {\n+        return new FetchConfigurationImpl(state);\n     }\n \n     public void copy(FetchConfiguration fetch) {\n@@ -117,86 +149,75 @@ public void copy(FetchConfiguration fetch) {\n         addFields(fetch.getFields());\n \n         // don't use setters because require active transaction\n-        _readLockLevel = fetch.getReadLockLevel();\n-        _writeLockLevel = fetch.getWriteLockLevel();\n+        _state.readLockLevel = fetch.getReadLockLevel();\n+        _state.writeLockLevel = fetch.getWriteLockLevel();\n     }\n \n     public int getFetchBatchSize() {\n-        return _fetchBatchSize;\n+        return _state.fetchBatchSize;\n     }\n \n     public FetchConfiguration setFetchBatchSize(int fetchBatchSize) {\n-        if (fetchBatchSize == DEFAULT && _ctx != null)\n-            fetchBatchSize = _ctx.getConfiguration().getFetchBatchSize();\n+        if (fetchBatchSize == DEFAULT && _state.ctx != null)\n+            fetchBatchSize = _state.ctx.getConfiguration().getFetchBatchSize();\n         if (fetchBatchSize != DEFAULT)\n-            _fetchBatchSize = fetchBatchSize;\n+            _state.fetchBatchSize = fetchBatchSize;\n         return this;\n     }\n \n     public int getMaxFetchDepth() {\n-        return _maxFetchDepth;\n+        return _state.maxFetchDepth;\n     }\n \n     public FetchConfiguration setMaxFetchDepth(int depth) {\n-        _maxFetchDepth = depth;\n+        _state.maxFetchDepth = depth;\n+        if (_parent == null)\n+            _availableDepth = depth;\n         return this;\n     }\n \n     public boolean getQueryCache() {\n-        return _queryCache;\n+        return _state.queryCache;\n     }\n \n     public FetchConfiguration setQueryCache(boolean cache) {\n-        _queryCache = cache;\n+        _state.queryCache = cache;\n         return this;\n     }\n \n     public int getFlushBeforeQueries() {\n-        return _flushQuery;\n+        return _state.flushQuery;\n     }\n \n     public FetchConfiguration setFlushBeforeQueries(int flush) {\n-        if (flush == DEFAULT && _ctx != null)\n-            _flushQuery = _ctx.getConfiguration().\n+        if (flush == DEFAULT && _state.ctx != null)\n+            _state.flushQuery = _state.ctx.getConfiguration().\n                 getFlushBeforeQueriesConstant();\n         else if (flush != DEFAULT)\n-            _flushQuery = flush;\n+            _state.flushQuery = flush;\n         return this;\n     }\n \n     public Set getFetchGroups() {\n-        return (_fetchGroups == null) ? Collections.EMPTY_SET : _fetchGroups;\n+        return (_state.fetchGroups == null) ? Collections.EMPTY_SET \n+            : _state.fetchGroups;\n     }\n \n     public boolean hasFetchGroup(String group) {\n-        return _fetchGroups != null\n-            && (_fetchGroups.contains(group)\n-            || _fetchGroups.contains(FETCH_GROUP_ALL));\n+        return _state.fetchGroups != null\n+            && (_state.fetchGroups.contains(group)\n+            || _state.fetchGroups.contains(FetchGroup.NAME_ALL));\n     }\n \n-    public boolean hasAnyFetchGroup(Set groups) {\n-        if (groups == null || groups.isEmpty())\n-            return false;\n-        for (Iterator itr = groups.iterator(); itr.hasNext();)\n-            if (hasFetchGroup((String) itr.next()))\n-                return true;\n-        return false;\n-    }\n-\n-    /**\n-     * Adds a fetch group of the given name to this receiver.\n-     *\n-     * @param name must not be null or empty.\n-     */\n     public FetchConfiguration addFetchGroup(String name) {\n         if (StringUtils.isEmpty(name))\n             throw new UserException(_loc.get(\"null-fg\"));\n \n         lock();\n         try {\n-            if (_fetchGroups == null)\n-                _fetchGroups = new HashSet();\n-            _fetchGroups.add(name);\n+            if (_state.fetchGroups == null)\n+                _state.fetchGroups = new HashSet();\n+            _state.fetchGroups.add(name);\n         } finally {\n             unlock();\n         }\n@@ -214,8 +235,8 @@ public FetchConfiguration addFetchGroups(Collection groups) {\n     public FetchConfiguration removeFetchGroup(String group) {\n         lock();\n         try {\n-            if (_fetchGroups != null)\n-                _fetchGroups.remove(group);\n+            if (_state.fetchGroups != null)\n+                _state.fetchGroups.remove(group);\n         } finally {\n             unlock();\n         }\n@@ -225,8 +246,8 @@ public FetchConfiguration removeFetchGroup(String group) {\n     public FetchConfiguration removeFetchGroups(Collection groups) {\n         lock();\n         try {\n-            if (_fetchGroups != null)\n-                _fetchGroups.removeAll(groups);\n+            if (_state.fetchGroups != null)\n+                _state.fetchGroups.removeAll(groups);\n         } finally {\n             unlock();\n         }\n@@ -236,8 +257,8 @@ public FetchConfiguration removeFetchGroups(Collection groups) {\n     public FetchConfiguration clearFetchGroups() {\n         lock();\n         try {\n-            if (_fetchGroups != null)\n-                _fetchGroups.clear();\n+            if (_state.fetchGroups != null)\n+                _state.fetchGroups.clear();\n         } finally {\n             unlock();\n         }\n@@ -246,18 +267,18 @@ public FetchConfiguration clearFetchGroups() {\n \n     public FetchConfiguration resetFetchGroups() {\n         clearFetchGroups();\n-        if (_ctx != null)\n-            addFetchGroups(Arrays.asList(_ctx.getConfiguration().\n+        if (_state.ctx != null)\n+            addFetchGroups(Arrays.asList(_state.ctx.getConfiguration().\n                 getFetchGroupsList()));\n         return this;\n     }\n \n     public Set getFields() {\n-        return (_fields == null) ? Collections.EMPTY_SET : _fields;\n+        return (_state.fields == null) ? Collections.EMPTY_SET : _state.fields;\n     }\n \n     public boolean hasField(String field) {\n-        return _fields != null && _fields.contains(field);\n+        return _state.fields != null && _state.fields.contains(field);\n     }\n \n     public FetchConfiguration addField(String field) {\n@@ -266,9 +287,9 @@ public FetchConfiguration addField(String field) {\n \n         lock();\n         try {\n-            if (_fields == null)\n-                _fields = new HashSet();\n-            _fields.add(field);\n+            if (_state.fields == null)\n+                _state.fields = new HashSet();\n+            _state.fields.add(field);\n         } finally {\n             unlock();\n         }\n@@ -281,9 +302,9 @@ public FetchConfiguration addFields(Collection fields) {\n \n         lock();\n         try {\n-            if (_fields == null)\n-                _fields = new HashSet();\n-            _fields.addAll(fields);\n+            if (_state.fields == null)\n+                _state.fields = new HashSet();\n+            _state.fields.addAll(fields);\n         } finally {\n             unlock();\n         }\n@@ -293,8 +314,8 @@ public FetchConfiguration addFields(Collection fields) {\n     public FetchConfiguration removeField(String field) {\n         lock();\n         try {\n-            if (_fields != null)\n-                _fields.remove(field);\n+            if (_state.fields != null)\n+                _state.fields.remove(field);\n         } finally {\n             unlock();\n         }\n@@ -304,8 +325,8 @@ public FetchConfiguration removeField(String field) {\n     public FetchConfiguration removeFields(Collection fields) {\n         lock();\n         try {\n-            if (_fields != null)\n-                _fields.removeAll(fields);\n+            if (_state.fields != null)\n+                _state.fields.removeAll(fields);\n         } finally {\n             unlock();\n         }\n@@ -315,64 +336,64 @@ public FetchConfiguration removeFields(Collection fields) {\n     public FetchConfiguration clearFields() {\n         lock();\n         try {\n-            if (_fields != null)\n-                _fields.clear();\n+            if (_state.fields != null)\n+                _state.fields.clear();\n         } finally {\n             unlock();\n         }\n         return this;\n     }\n \n     public int getLockTimeout() {\n-        return _lockTimeout;\n+        return _state.lockTimeout;\n     }\n \n     public FetchConfiguration setLockTimeout(int timeout) {\n-        if (timeout == DEFAULT && _ctx != null)\n-            _lockTimeout = _ctx.getConfiguration().getLockTimeout();\n+        if (timeout == DEFAULT && _state.ctx != null)\n+            _state.lockTimeout = _state.ctx.getConfiguration().getLockTimeout();\n         else if (timeout != DEFAULT)\n-            _lockTimeout = timeout;\n+            _state.lockTimeout = timeout;\n         return this;\n     }\n \n     public int getReadLockLevel() {\n-        return _readLockLevel;\n+        return _state.readLockLevel;\n     }\n \n     public FetchConfiguration setReadLockLevel(int level) {\n-        if (_ctx == null)\n+        if (_state.ctx == null)\n             return this;\n \n         lock();\n         try {\n             assertActiveTransaction();\n             if (level == DEFAULT)\n-                _readLockLevel = _ctx.getConfiguration().\n+                _state.readLockLevel = _state.ctx.getConfiguration().\n                     getReadLockLevelConstant();\n             else\n-                _readLockLevel = level;\n+                _state.readLockLevel = level;\n         } finally {\n             unlock();\n         }\n         return this;\n     }\n \n     public int getWriteLockLevel() {\n-        return _writeLockLevel;\n+        return _state.writeLockLevel;\n     }\n \n     public FetchConfiguration setWriteLockLevel(int level) {\n-        if (_ctx == null)\n+        if (_state.ctx == null)\n             return this;\n \n         lock();\n         try {\n             assertActiveTransaction();\n             if (level == DEFAULT)\n-                _writeLockLevel = _ctx.getConfiguration().\n+                _state.writeLockLevel = _state.ctx.getConfiguration().\n                     getWriteLockLevelConstant();\n             else\n-                _writeLockLevel = level;\n+                _state.writeLockLevel = level;\n         } finally {\n             unlock();\n         }\n@@ -382,82 +403,51 @@ public FetchConfiguration setWriteLockLevel(int level) {\n     public ResultList newResultList(ResultObjectProvider rop) {\n         if (rop instanceof ListResultObjectProvider)\n             return new SimpleResultList(rop);\n-        if (_fetchBatchSize < 0)\n+        if (_state.fetchBatchSize < 0)\n             return new EagerResultList(rop);\n         if (rop.supportsRandomAccess())\n             return new SimpleResultList(rop);\n         return new WindowResultList(rop);\n     }\n \n-    public FetchState newFetchState() {\n-        return new FetchStateImpl(this);\n-    }\n-\n     /**\n      * Throw an exception if no transaction is active.\n      */\n     private void assertActiveTransaction() {\n-        if (_ctx != null && !_ctx.isActive())\n+        if (_state.ctx != null && !_state.ctx.isActive())\n             throw new NoTransactionException(_loc.get(\"not-active\"));\n     }\n \n-    public String toString() {\n-        if ((_fetchGroups == null || _fetchGroups.isEmpty())\n-            && (_fields == null || _fields.isEmpty()))\n-            return \"Default\";\n-\n-        StringBuffer buf = new StringBuffer();\n-        lock();\n-        try {\n-            if (_fetchGroups != null && !_fetchGroups.isEmpty()) {\n-                for (Iterator itr = _fetchGroups.iterator(); itr.hasNext();) {\n-                    if (buf.length() > 0)\n-                        buf.append(\", \");\n-                    buf.append(itr.next());\n-                }\n-            }\n-            if (_fields != null && !_fields.isEmpty()) {\n-                for (Iterator itr = _fields.iterator(); itr.hasNext();) {\n-                    if (buf.length() > 0)\n-                        buf.append(\", \");\n-                    buf.append(itr.next());\n-                }\n-            }\n-        } finally {\n-            unlock();\n-        }\n-        return buf.toString();\n-    }\n-\n     public void setHint(String name, Object value) {\n         lock();\n         try {\n-            if (_hints == null)\n-                _hints = new HashMap();\n-            _hints.put(name, value);\n+            if (_state.hints == null)\n+                _state.hints = new HashMap();\n+            _state.hints.put(name, value);\n         } finally {\n             unlock();\n         }\n     }\n \n     public Object getHint(String name) {\n-        return (_hints == null) ? null : _hints.get(name);\n+        return (_state.hints == null) ? null : _state.hints.get(name);\n     }\n \n     public Set getRootClasses() {\n-        return (_rootClasses == null) ? Collections.EMPTY_SET : _rootClasses;\n+        return (_state.rootClasses == null) ? Collections.EMPTY_SET \n+            : _state.rootClasses;\n     }\n \n     public FetchConfiguration setRootClasses(Collection classes) {\n         lock();\n         try {\n-            if (_rootClasses != null)\n-                _rootClasses.clear();\n+            if (_state.rootClasses != null)\n+                _state.rootClasses.clear();\n             if (classes != null && !classes.isEmpty()) {\n-                if (_rootClasses == null)\n-                    _rootClasses = new HashSet(classes);\n+                if (_state.rootClasses == null)\n+                    _state.rootClasses = new HashSet(classes);\n                 else \n-                    _rootClasses.addAll(classes);\n+                    _state.rootClasses.addAll(classes);\n             }\n         } finally {\n             unlock();\n@@ -466,20 +456,20 @@ public FetchConfiguration setRootClasses(Collection classes) {\n     }\n \n     public Set getRootInstances() {\n-        return (_rootInstances == null) ? Collections.EMPTY_SET \n-            : _rootInstances;\n+        return (_state.rootInstances == null) ? Collections.EMPTY_SET \n+            : _state.rootInstances;\n     }\n \n     public FetchConfiguration setRootInstances(Collection instances) {\n         lock();\n         try {\n-            if (_rootInstances != null)\n-                _rootInstances.clear();\n+            if (_state.rootInstances != null)\n+                _state.rootInstances.clear();\n             if (instances != null && !instances.isEmpty()) {\n-                if (_rootInstances == null)\n-                    _rootInstances = new HashSet(instances);\n+                if (_state.rootInstances == null)\n+                    _state.rootInstances = new HashSet(instances);\n                 else \n-                    _rootInstances.addAll(instances);\n+                    _state.rootInstances.addAll(instances);\n             }\n         } finally {\n             unlock();\n@@ -488,12 +478,215 @@ public FetchConfiguration setRootInstances(Collection instances) {\n     }\n \n     public void lock() {\n-        if (_ctx != null)\n-            _ctx.lock();\n+        if (_state.ctx != null)\n+            _state.ctx.lock();\n     }\n \n     public void unlock() {\n-        if (_ctx != null)\n-            _ctx.unlock();\n+        if (_state.ctx != null)\n+            _state.ctx.unlock();\n+    }\n+\n+    /////////////\n+    // Traversal\n+    /////////////\n+    \n+    public boolean requiresFetch(FieldMetaData fm) {\n+        if (!includes(fm))\n+            return false;\n+        \n+        Class type = getRelationType(fm);\n+        if (type == null)\n+            return true;\n+        if (_availableDepth == 0)\n+            return false;\n+\n+        // we can skip calculating recursion depth if this is a top-level conf:\n+        // the field is in our fetch groups, so can't possibly not select\n+        if (_parent == null) \n+            return true;\n+\n+        int rdepth = getAvailableRecursionDepth(fm, type, false);\n+        return rdepth == FetchGroup.DEPTH_INFINITE || rdepth > 0;\n+    }\n+\n+    public FetchConfiguration traverse(FieldMetaData fm) {\n+        Class type = getRelationType(fm);\n+        if (type == null)\n+            return this;\n+\n+        FetchConfigurationImpl clone = newInstance(_state);\n+        clone._parent = this;\n+        clone._availableDepth = reduce(_availableDepth);\n+        clone._fromField = fm.getFullName();\n+        clone._fromType = type;\n+        clone._availableRecursion = getAvailableRecursionDepth(fm, type, true);\n+        return clone;\n+    }\n+\n+    /**\n+     * Whether our configuration state includes the given field.\n+     */\n+    private boolean includes(FieldMetaData fmd) {\n+        if ((fmd.isInDefaultFetchGroup() \n+            && hasFetchGroup(FetchGroup.NAME_DEFAULT))\n+            || hasFetchGroup(FetchGroup.NAME_ALL)\n+            || hasField(fmd.getFullName()))\n+            return true;\n+        String[] fgs = fmd.getCustomFetchGroups();\n+        for (int i = 0; i < fgs.length; i++)\n+            if (hasFetchGroup(fgs[i]))\n+                return true;\n+        return false; \n+    }\n+\n+    /**\n+     * Return the available recursion depth via the given field for the\n+     * given type.\n+     *\n+     * @param traverse whether we're traversing the field\n+     */\n+    private int getAvailableRecursionDepth(FieldMetaData fm, Class type, \n+        boolean traverse) {\n+        // see if there's a previous limit\n+        int avail = Integer.MIN_VALUE;\n+        for (FetchConfigurationImpl f = this; f != null; f = f._parent) {\n+            if (isAssignable(type, f._fromType)) {\n+                avail = f._availableRecursion;\n+                if (traverse)\n+                    avail = reduce(avail);\n+                break;\n+            }\n+        }\n+        if (avail == 0)\n+            return 0;\n+        \n+        // calculate fetch groups max\n+        ClassMetaData meta = fm.getDefiningMetaData();\n+        int max = Integer.MIN_VALUE;\n+        if (fm.isInDefaultFetchGroup())\n+            max = meta.getFetchGroup(FetchGroup.NAME_DEFAULT).\n+                getRecursionDepth(fm);\n+        String[] groups = fm.getCustomFetchGroups();\n+        int cur;\n+        for (int i = 0; max != FetchGroup.DEPTH_INFINITE \n+            && i < groups.length; i++) {\n+            cur = meta.getFetchGroup(groups[i]).getRecursionDepth(fm);\n+            if (cur == FetchGroup.DEPTH_INFINITE || cur > max) \n+                max = cur;\n+        }\n+        // reduce max if we're traversing a self-type relation\n+        if (traverse && max != Integer.MIN_VALUE \n+            && isAssignable(meta.getDescribedType(), type))\n+            max = reduce(max);\n+\n+        // take min/defined of previous avail and fetch group max\n+        if (avail == Integer.MIN_VALUE && max == Integer.MIN_VALUE) {\n+            int def = FetchGroup.RECURSION_DEPTH_DEFAULT;\n+            return (traverse && isAssignable(meta.getDescribedType(), type))\n+                ? def - 1 : def;\n+        }\n+        if (avail == Integer.MIN_VALUE || avail == FetchGroup.DEPTH_INFINITE)\n+            return max;\n+        if (max == Integer.MIN_VALUE || max == FetchGroup.DEPTH_INFINITE)\n+            return avail;\n+        return Math.min(max, avail);\n+    }\n+ \n+    /**\n+     * Return the relation type of the given field.\n+     */\n+    private static Class getRelationType(FieldMetaData fm) {\n+        if (fm.isDeclaredTypePC())\n+            return fm.getDeclaredType();\n+        if (fm.getElement().isDeclaredTypePC())\n+            return fm.getElement().getDeclaredType();\n+        if (fm.getKey().isDeclaredTypePC())\n+            return fm.getKey().getDeclaredType();\n+        return null;\n+    }\n+\n+    /**\n+     * Whether either of the two types is assignable from the other.\n+     */\n+    private static boolean isAssignable(Class c1, Class c2) {\n+        return c1 != null && c2 != null \n+            && (c1.isAssignableFrom(c2) || c2.isAssignableFrom(c1));\n+    }\n+\n+    /**\n+     * Reduce the given logical depth by 1.\n+     */\n+    private static int reduce(int d) {\n+        if (d == 0)\n+            return 0;\n+        if (d != FetchGroup.DEPTH_INFINITE)\n+            d--;\n+        return d;\n+    }\n+\n+    /////////////////\n+    // Debug methods\n+    /////////////////\n+\n+    FetchConfiguration getParent() {\n+        return _parent;\n+    }\n+    \n+    boolean isRoot() {\n+        return _parent == null;\n+    }\n+    \n+    FetchConfiguration getRoot() {\n+        return (isRoot()) ? this : _parent.getRoot();\n+    }\n+\n+    int getAvailableFetchDepth() {\n+        return _availableDepth;\n+    }\n+\n+    int getAvailableRecursionDepth() {\n+        return _availableRecursion;\n+    }\n+\n+    String getTraversedFromField() {\n+        return _fromField;\n+    }\n+\n+    Class getTraversedFromType() {\n+        return _fromType;\n+    }\n+\n+    List getPath() {\n+        if (isRoot())\n+            return Collections.EMPTY_LIST;\n+        return trackPath(new ArrayList());\n+    }\n+    \n+    List trackPath(List path) {\n+        if (_parent != null)\n+            _parent.trackPath(path);\n+        path.add(this);\n+        return path;\n+    }\n+       \n+    public String toString() {\n+        return \"FetchConfiguration@\" + System.identityHashCode(this) \n+            + \" (\" + _availableDepth + \")\" + getPathString();\n+    }\n+    \n+    private String getPathString()\n+    {\n+        List path = getPath();\n+        if (path.isEmpty())\n+            return \"\";\n+        StringBuffer buf = new StringBuffer().append (\": \");\n+        for (Iterator itr = path.iterator(); itr.hasNext();) {\n+            buf.append(((FetchConfigurationImpl) itr.next()).\n+                getTraversedFromField());\n+            if (itr.hasNext())\n+                buf.append(\"->\");\n+        }\n+        return buf.toString();\n     }\n }"},{"sha":"9820461540bf86d98278fac6c9d63689b4e3998b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","status":"removed","additions":0,"deletions":134,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/3b6518f17455c07a475412311a950bded5701fbc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","raw_url":"https://github.com/apache/openjpa/raw/3b6518f17455c07a475412311a950bded5701fbc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchState.java?ref=3b6518f17455c07a475412311a950bded5701fbc","patch":"@@ -1,134 +0,0 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.kernel;\r\n-\r\n-import java.io.Serializable;\r\n-import java.util.List;\r\n-\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-\r\n-/**\r\n- * Defines the decision to include fields for selection or loading during\r\n- * a fetch operation.\r\n- * A state is resulted by traversal of a relationship except the <em>root</em>\r\n- * state. \r\n- *\r\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n- * @since 4.1\r\n- */\r\n-public interface FetchState \r\n-\textends Serializable, Cloneable {\r\n-    \r\n-\tpublic static final int INFINITE_DEPTH = -1;\r\n-\r\n-    /**\r\n-     * Returns the immutable fetch configuration this receiver is based on.\r\n-     */\r\n-    public FetchConfiguration getFetchConfiguration();\r\n-\r\n-    /**\r\n-     * Affirms if the given field requires to be fetched in the context\r\n-     * of current fetch operation.\r\n-     *\r\n-     * @param fm field metadata. must not be null.\r\n-     */\r\n-    public boolean requiresFetch(FieldMetaData fm);\r\n-\r\n-    /**\r\n-     * Affirms if the given field of the given instance requires to be loaded\r\n-     * in the context of current fetch operation.\r\n-     *\r\n-     * @param sm state manager being populated\r\n-     * @param fm field metadata\r\n-     */\r\n-    public boolean requiresLoad(OpenJPAStateManager sm, FieldMetaData fm);\r\n-    \r\n-    /**\r\n-     * Traverse the given field to generate (possibly) a new state.\r\n-     * \r\n-     * @return a new state resulting out of traversal. If the given field is\r\n-     * not a relation then return itself.\r\n-     */\r\n-    public FetchState traverse (FieldMetaData fm);\r\n-\r\n-    /**\r\n-     * Gets the available depth i.e. number of relations that can be traveresed\r\n-     * from this receiver. \r\n-     * \r\n-     * @return a positive integer with positive infinity designated as \r\n-     * <code>-1</code>.\r\n-     */\r\n-    public int getAvailableFetchDepth ();\r\n-    \r\n-    /**\r\n-     * Gets the root state where this receiver is derived from.\r\n-     * \r\n-     * @return itself if the state is not derived from another state.\r\n-     */\r\n-    public FetchState getRoot ();\r\n-    \r\n-    /**\r\n-     * Affirms if this receiver is the root state i.e. not derived as a result\r\n-     * of traversing a relationship.\r\n-     */\r\n-    public boolean isRoot ();\r\n-    \r\n-    /**\r\n-     * Gets the parent state.\r\n-     *\r\n-     * @return can be null for the root state.\r\n-     */\r\n-    public FetchState getParent ();\r\n-    \r\n-    \r\n-    /** \r\n-     * Gets an ordered list of states from this receiver to its root.\r\n-     * \r\n-     * @return the order starts from this receiver and ends in the \r\n-     * root. An empty list if this receiver is the root. \r\n-     */ \r\n-    public List getPath ();\r\n-    \r\n-    /** \r\n-     * Gets an ordered list of relation fields from this receiver to its root.\r\n-     * These relations denote the path traversals from the root that resulted \r\n-     * in the current state.\r\n-     * \r\n-     * @return the list starts from relation traversal of which resulted in this\r\n-     * receiver and ends in the relation traversed from the root. \r\n-     * An empty list, if this receiver itself is the root. \r\n-     */ \r\n-    public List getRelationPath ();\r\n-    \r\n-    /**\r\n-     * Gets the number of times the given field is traversed to arrive\r\n-     * at this state.\r\n-     */\r\n-    public int getCurrentRecursionDepth (FieldMetaData fm);\r\n-    \r\n-    /**\r\n-     * Gets the recursion depth of the given field. \r\n-     * \r\n-     * @param fm a relation field\r\n-     * @return If the field has multiple fetch groups in the current \r\n-     * configuration, then the recursion depth is maximum of all the recursion \r\n-     * depths.\r\n-     * The default recursion depth, if none is explictly specified, is 1.\r\n-     * The infinite i.e. unlimited recursion depth is designated as \r\n-     * <code>-1</code> \r\n-     */\r\n-    public int getRecursionDepth (FieldMetaData fm);\r\n-}\r"},{"sha":"6257ea176e560e5c0168a406a59d6d022762c731","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","status":"removed","additions":0,"deletions":225,"changes":225,"blob_url":"https://github.com/apache/openjpa/blob/3b6518f17455c07a475412311a950bded5701fbc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/3b6518f17455c07a475412311a950bded5701fbc/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/FetchStateImpl.java?ref=3b6518f17455c07a475412311a950bded5701fbc","patch":"@@ -1,225 +0,0 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.kernel;\r\n-\r\n-import java.util.*;\r\n-\r\n-import org.apache.openjpa.meta.FetchGroup;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-\r\n-/**\r\n- * Holds dynamic status of fetch operation. Decides whether a field\r\n- * requires to be selected/loaded under present condition.\r\n- *\r\n- * @author <A HREF=\"mailto:pinaki.poddar@gmail.com>Pinaki Poddar</A>\r\n- * @nojavadoc\r\n- */\r\n-public class FetchStateImpl implements FetchState {\r\n-\r\n-    private final FetchConfiguration _config;\r\n-    private FetchState _parent;\r\n-    private FieldMetaData _relation;\r\n-    private int _availableDepth;\r\n-    \r\n-    /**\r\n-     * Supply configuration.\r\n-     *\r\n-     * @param fc must not be null.\r\n-     */\r\n-    public FetchStateImpl(FetchConfiguration fc) {\r\n-        _config = fc;\r\n-        _parent = null;\r\n-        _relation = null;\r\n-        _availableDepth  = _config.getMaxFetchDepth();\r\n-    }\r\n-\r\n-    public FetchConfiguration getFetchConfiguration() {\r\n-        return _config;\r\n-    }\r\n-\r\n-    public FetchState getParent() {\r\n-        return _parent;\r\n-    }\r\n-    \r\n-    public boolean isRoot() {\r\n-        return _parent == null;\r\n-    }\r\n-    \r\n-    public FetchState getRoot() {\r\n-        return (isRoot()) ? this : getParent().getRoot();\r\n-    }\r\n-\r\n-    public int getAvailableFetchDepth() {\r\n-        return _availableDepth;\r\n-    }\r\n-\r\n-    public List getPath() {\r\n-        if (isRoot())\r\n-            return Collections.EMPTY_LIST;\r\n-        List result = new ArrayList();\r\n-        result.add(this);\r\n-        return ((FetchStateImpl)_parent).trackPath(result);\r\n-    }\r\n-    \r\n-    private List trackPath(List path) {\r\n-        if (isRoot())\r\n-            return path;\r\n-        path.add(this);\r\n-        return ((FetchStateImpl)_parent).trackPath(path);\r\n-    }\r\n-    \r\n-    public List getRelationPath() {\r\n-        if (isRoot())\r\n-            return Collections.EMPTY_LIST;\r\n-        List result = new ArrayList();\r\n-        result.add(_relation);\r\n-        return ((FetchStateImpl)_parent).trackRelationPath(result);\r\n-    }\r\n-    \r\n-    private List trackRelationPath(List path) {\r\n-        if (isRoot())\r\n-            return path;\r\n-        path.add(_relation);\r\n-        return ((FetchStateImpl)_parent).trackRelationPath(path);\r\n-    }\r\n-    \r\n-    \r\n-    public int getCurrentRecursionDepth(FieldMetaData fm) {\r\n-        if (isRoot())\r\n-            return 0;\r\n-        int rd = (_relation == fm) ? 1 : 0;\r\n-        return rd + _parent.getCurrentRecursionDepth(fm);\r\n-    }\r\n-    \r\n-    public boolean isDefault(FieldMetaData fm) {\r\n-        return (fm.isInDefaultFetchGroup() \r\n-            && _config.hasFetchGroup(FetchConfiguration.FETCH_GROUP_DEFAULT)) \r\n-            || _config.hasFetchGroup(FetchConfiguration.FETCH_GROUP_ALL);\r\n-    }\r\n-\r\n-    public boolean requiresFetch(FieldMetaData fm) {\r\n-        boolean selectable = isDefault(fm)\r\n-            || _config.hasAnyFetchGroup(fm.getFetchGroups())\r\n-            || _config.hasField(fm.getFullName());\r\n-        if (selectable && isRelation(fm)) {\r\n-            int rd  = getRecursionDepth(fm);\r\n-            int crd = getCurrentRecursionDepth(fm);\r\n-            selectable = (_availableDepth==INFINITE_DEPTH || _availableDepth>0)\r\n-                && (rd == INFINITE_DEPTH || crd < rd);\r\n-        }\r\n-        return selectable;\r\n-    }\r\n-\r\n-    public boolean requiresLoad(OpenJPAStateManager sm, FieldMetaData fm) {\r\n-        if (sm!=null && sm.getLoaded().get(fm.getIndex()))\r\n-            return false;\r\n-        boolean loadable = isDefault(fm)\r\n-            || _config.hasAnyFetchGroup(fm.getFetchGroups())\r\n-            || _config.hasField(fm.getFullName());\r\n-        if (loadable && isRelation(fm)) {\r\n-            int rd  = getRecursionDepth(fm);\r\n-            int crd = getCurrentRecursionDepth(fm);\r\n-            loadable = (_availableDepth==INFINITE_DEPTH || _availableDepth>0)\r\n-                && (rd == INFINITE_DEPTH || crd<rd);\r\n-        }\r\n-        return loadable;\r\n-    }\r\n-    \r\n-\r\n-    /**\r\n-     * Sets the recursion depth for the given field as the maximum recusion\r\n-     * depth among the groups common to this field and configured fetch groups.\r\n-     *\r\n-     * @param fm\r\n-     * @return maximum recursion depth across common fetch groups. -1 is treated\r\n-     *         as positive infinity.\r\n-     */\r\n-    public int getRecursionDepth(FieldMetaData fm) {\r\n-        Set commonFGNs = new HashSet();\r\n-        commonFGNs.addAll(_config.getFetchGroups());\r\n-        commonFGNs.retainAll(fm.getFetchGroups());\r\n-        int dMax =\r\n-            (commonFGNs.isEmpty()) ? FetchGroup.DEFAULT_RECURSION_DEPTH : 0;\r\n-        Iterator i = commonFGNs.iterator();\r\n-        while (i.hasNext()) {\r\n-            FetchGroup fg = fm.getDeclaringMetaData()\r\n-                .getFetchGroup(i.next().toString());\r\n-            int d = fg.getDepthFor(fm);\r\n-            if (d == INFINITE_DEPTH) {\r\n-                dMax = INFINITE_DEPTH;\r\n-                break;\r\n-            }\r\n-            dMax = Math.max(d, dMax);\r\n-        }\r\n-        int maxDepth = _config.getMaxFetchDepth();\r\n-        if (maxDepth != INFINITE_DEPTH)\r\n-            if (dMax != INFINITE_DEPTH)\r\n-                dMax = Math.min (maxDepth, dMax);\r\n-            else\r\n-                dMax = maxDepth;\r\n-\r\n-        return dMax;\r\n-    }\r\n-\r\n-\r\n-    public FetchState traverse(FieldMetaData fm) {\r\n-        if (isRelation(fm)) {\r\n-            try {\r\n-                FetchStateImpl clone = (FetchStateImpl)clone();\r\n-                clone._parent = this;\r\n-                clone._relation = fm;\r\n-                clone._availableDepth  = reduce(_availableDepth);\r\n-                return clone;\r\n-            } catch (CloneNotSupportedException e) {\r\n-                // ignore\r\n-            }\r\n-        }\r\n-        return this;\r\n-    }\r\n-\r\n-\r\n-    int reduce(int d) {\r\n-        if (d==0)\r\n-            return 0;//throw new InternalException(this.toString());\r\n-        if (d==INFINITE_DEPTH)\r\n-            return INFINITE_DEPTH;\r\n-        return d-1;\r\n-    }\r\n-    \r\n-    protected boolean isRelation(FieldMetaData fm) {\r\n-        return fm != null && (fm.isDeclaredTypePC() \r\n-            || fm.getElement().isDeclaredTypePC()\r\n-            || fm.getKey().isDeclaredTypePC());\r\n-    }\r\n-    \r\n-    public String toString() {\r\n-        return System.identityHashCode(this) + \"(\"+_availableDepth+\"): \" \r\n-            + printPath();\r\n-    }\r\n-    \r\n-    private String printPath()\r\n-    {\r\n-        List path = getRelationPath();\r\n-        if (path.isEmpty())\r\n-            return \"\";\r\n-        StringBuffer tmp = new StringBuffer();\r\n-        Iterator i = path.iterator();\r\n-        tmp.append(((FieldMetaData)i.next()).getName());\r\n-        for (;i.hasNext();)\r\n-            tmp.append(\".\").append(((FieldMetaData)i.next()).getName());\r\n-        return tmp.toString();\r\n-    }\r\n-}\r"},{"sha":"a12370a223314eb2570e15beb9147d95b4e72c72","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ObjectIdStateManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -281,7 +281,7 @@ public void initialize(Class forType, PCState state) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void load(FetchState fetchState) {\n+    public void load(FetchConfiguration fetch) {\n         throw new UnsupportedOperationException();\n     }\n \n@@ -329,7 +329,7 @@ public BitSet getFlushed() {\n         throw new UnsupportedOperationException();\n     }\n \n-    public BitSet getUnloaded(FetchState fetchState) {\n+    public BitSet getUnloaded(FetchConfiguration fetch) {\n         throw new UnsupportedOperationException();\n     }\n "},{"sha":"77dea8f3627213e94231b144af8aa1dad749c1df","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/OpenJPAStateManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -74,7 +74,7 @@\n     /**\n      * Load fetch group fields.\n      */\n-    public void load(FetchState fetchState);\n+    public void load(FetchConfiguration fetch);\n \n     /**\n      * Return the managed instance.\n@@ -141,13 +141,14 @@\n      * on the given fetch configuration. Pass in null to retrieve all\n      * unloaded fields.\n      */\n-    public BitSet getUnloaded(FetchState fetchState);\n+    public BitSet getUnloaded(FetchConfiguration fetch);\n \n     /**\n      * Create a new hollow proxy instance for the given field. In cases where\n      * the field externalizes to an SCO but is declared something else, the\n      * returned object may not implement {@link Proxy}. In all other cases,\n-     * this method delegates to the system {@link org.apache.openjpa.util.ProxyManager}\n+     * this method delegates to the system \n+     * {@link org.apache.openjpa.util.ProxyManager}\n      * with the correct field information. The returned proxy's owner is\n      * unset so that modifications to the proxy will not be tracked while its\n      * state is initialized. Calling {@link #storeField} or {@link #store}"},{"sha":"c24c8a90b417e4e140a6a1144f69140d0799e7de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCData.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -63,11 +63,10 @@\n      * into the given state manager.\n      *\n      * @param sm the state manager to load\n-     * @param fetchState the fetch configuration to use for loading related\n-     * objects\n+     * @param fetch the fetch configuration to use for loading related objects\n      * @param context current context information\n      */\n-    public void load(OpenJPAStateManager sm, FetchState fetchState,\n+    public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n         Object context);\n \n     /**\n@@ -77,12 +76,11 @@ public void load(OpenJPAStateManager sm, FetchState fetchState,\n      * @param sm the state manager to load\n      * @param fields the fields to load; clear the bits for the fields\n      * that are successfully loaded\n-     * @param fetchState the fetch configuration to use for loading related\n-     * objects\n+     * @param fetch the fetch configuration to use for loading related objects\n      * @param context current context information\n      */\n     public void load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, Object context);\n+        FetchConfiguration fetch, Object context);\n \n     /**\n      * Store all loaded fields of the state manager."},{"sha":"1a91f4fbaf96fbf732b12d79e794b3278dbe74dd","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCDataImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -127,7 +127,7 @@ public void setVersion(Object version) {\n         _version = version;\n     }\n \n-    public void load(OpenJPAStateManager sm, FetchState fetchState,\n+    public void load(OpenJPAStateManager sm, FetchConfiguration fetch,\n         Object context) {\n         loadVersion(sm);\n         loadImplData(sm);\n@@ -138,13 +138,13 @@ public void load(OpenJPAStateManager sm, FetchState fetchState,\n             // fields in configured fetch groups\n             if (!isLoaded(i))\n                 loadIntermediate(sm, fmds[i]);\n-            else if (fetchState.requiresLoad(sm, fmds[i]))\n-                loadField(sm, fmds[i], fetchState, context);\n+            else if (!sm.getLoaded().get(i) && fetch.requiresFetch(fmds[i]))\n+                loadField(sm, fmds[i], fetch, context);\n         }\n     }\n \n     public void load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, Object context) {\n+        FetchConfiguration fetch, Object context) {\n         loadVersion(sm);\n         loadImplData(sm);\n \n@@ -159,7 +159,7 @@ public void load(OpenJPAStateManager sm, BitSet fields,\n             if (!isLoaded(i))\n                 loadIntermediate(sm, fmd);\n             else {\n-                loadField(sm, fmd, fetchState, context);\n+                loadField(sm, fmd, fetch, context);\n                 loadImplData(sm, fmd);\n                 fields.clear(i);\n             }\n@@ -187,9 +187,9 @@ protected void loadImplData(OpenJPAStateManager sm) {\n      * Set field-level information into the given state manager.\n      */\n     protected void loadField(OpenJPAStateManager sm, FieldMetaData fmd,\n-        FetchState fetchState, Object context) {\n+        FetchConfiguration fetch, Object context) {\n         int index = fmd.getIndex();\n-        Object val = toField(sm, fmd, getData(index), fetchState, context);\n+        Object val = toField(sm, fmd, getData(index), fetch, context);\n         sm.storeField(index, val);\n     }\n "},{"sha":"fd9b72587bc46c580eef6542b350100cefe42872","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PCResultObjectProvider.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -34,6 +34,6 @@\n      * @see StoreManager#initialize\n      */\n     public void initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState)\n+        FetchConfiguration fetch)\n         throws Exception;\n }"},{"sha":"da581b5f7961fb4c71ccfc02515d4ccdac07f0ef","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ROPStoreManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -40,19 +40,18 @@ public boolean exists(OpenJPAStateManager sm, Object context) {\n     }\n \n     public boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState, Object context) {\n+        FetchConfiguration fetch, Object context) {\n         if (context instanceof PCResultObjectProvider) {\n             try {\n-                ((PCResultObjectProvider) context).initialize\n-                    (sm, state, fetchState);\n+                ((PCResultObjectProvider) context).initialize(sm, state, fetch);\n             } catch (OpenJPAException ke) {\n                 throw ke;\n             } catch (Exception e) {\n                 throw new StoreException(e);\n             }\n             return true;\n         }\n-        return super.initialize(sm, state, fetchState, context);\n+        return super.initialize(sm, state, fetch, context);\n     }\n \n     public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n@@ -66,13 +65,13 @@ public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n     }\n \n     public boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, int lockLevel, Object context) {\n+        FetchConfiguration fetch, int lockLevel, Object context) {\n         // the only way this gets called with a rop context is if the\n         // rop didn't load the field on initialize, so just null\n         // it out so we don't get unexpected results when our delegate\n         // expectes a different context type\n         if (context instanceof PCResultObjectProvider)\n             context = null;\n-        return super.load(sm, fields, fetchState, lockLevel, context);\n+        return super.load(sm, fields, fetch, lockLevel, context);\n     }\n }"},{"sha":"52c18858a5bc9b79bbb21c0600b1542a07937782","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","status":"modified","additions":84,"deletions":67,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StateManagerImpl.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -30,6 +30,7 @@\n import org.apache.openjpa.event.LifecycleEventManager;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FetchGroup;\n import org.apache.openjpa.meta.FieldMetaData;\n import org.apache.openjpa.meta.JavaTypes;\n import org.apache.openjpa.meta.UpdateStrategies;\n@@ -69,7 +70,7 @@\n \n     private static final int FLAG_SAVE = 2 << 0;\n     private static final int FLAG_DEREF = 2 << 1;\n-    private static final int FLAG_DFG = 2 << 2;\n+    private static final int FLAG_LOADED = 2 << 2;\n     private static final int FLAG_READ_LOCKED = 2 << 3;\n     private static final int FLAG_WRITE_LOCKED = 2 << 4;\n     private static final int FLAG_OID_ASSIGNED = 2 << 5;\n@@ -131,7 +132,8 @@\n     /**\n      * Constructor; supply id, type metadata, and owning persistence manager.\n      */\n-    protected StateManagerImpl(Object id, ClassMetaData meta, BrokerImpl broker) {\n+    protected StateManagerImpl(Object id, ClassMetaData meta, \n+        BrokerImpl broker) {\n         _id = id;\n         _meta = meta;\n         _broker = broker;\n@@ -304,34 +306,30 @@ private boolean fireLifecycleEvent(int type) {\n             _meta, type);\n     }\n \n-    public void load(FetchState fetchState) {\n-        load(fetchState, LOAD_FGS, null, null, false);\n+    public void load(FetchConfiguration fetch) {\n+        load(fetch, LOAD_FGS, null, null, false);\n     }\n \n     /**\n      * Load the state of this instance based on the given fetch configuration\n      * and load mode. Return true if any data was loaded, false otherwise.\n      */\n-    protected boolean load(FetchState fetchState, int loadMode,\n+    protected boolean load(FetchConfiguration fetch, int loadMode,\n         BitSet exclude, Object sdata, boolean forWrite) {\n         if (!forWrite && (!isPersistent() || isNew() || isDeleted()))\n             return false;\n \n-        if (fetchState==null)\n-        \tfetchState = _broker.getFetchConfiguration().newFetchState();\n         // if any fields being loaded, do state transitions for read\n-        BitSet fields = getUnloadedInternal(fetchState, loadMode, exclude);\n+        BitSet fields = getUnloadedInternal(fetch, loadMode, exclude);\n         boolean active = _broker.isActive();\n         if (!forWrite && fields != null)\n             beforeRead(-1);\n \n         // call load even if no fields are being loaded, because it takes\n         // care of checking if the DFG is loaded, making sure version info\n         // is loaded, etc\n-        FetchConfiguration fetch = fetchState.getFetchConfiguration();\n         int lockLevel = calculateLockLevel(active, forWrite, fetch);\n-        boolean ret = loadFields(fields, fetchState, lockLevel, sdata,\n-            forWrite);\n+        boolean ret = loadFields(fields, fetch, lockLevel, sdata, forWrite);\n         obtainLocks(active, forWrite, lockLevel, fetch, sdata);\n         return ret;\n     }\n@@ -380,9 +378,9 @@ public BitSet getDirty() {\n         return _dirty;\n     }\n \n-    public BitSet getUnloaded(FetchState fetchState) {\n+    public BitSet getUnloaded(FetchConfiguration fetch) {\n         // collect fields to load from data store based on fetch configuration\n-        BitSet fields = getUnloadedInternal(fetchState, LOAD_FGS, null);\n+        BitSet fields = getUnloadedInternal(fetch, LOAD_FGS, null);\n         return (fields == null) ? new BitSet(0) : fields;\n     }\n \n@@ -391,7 +389,7 @@ public BitSet getUnloaded(FetchState fetchState) {\n      * creating an empty bit set by returning null when there are no unloaded\n      * fields.\n      */\n-    private BitSet getUnloadedInternal(FetchState fetchState, int mode,\n+    private BitSet getUnloadedInternal(FetchConfiguration fetch, int mode,\n         BitSet exclude) {\n         if (exclude == StoreContext.EXCLUDE_ALL)\n             return null;\n@@ -408,8 +406,7 @@ private BitSet getUnloadedInternal(FetchState fetchState, int mode,\n                     load = !fmds[i].isTransient();\n                     break;\n                 case LOAD_FGS:\n-                    load = fetchState == null ||\n-                        fetchState.requiresLoad(this, fmds[i]);\n+                    load = fetch == null || fetch.requiresFetch(fmds[i]);\n                     break;\n                 default: // LOAD_ALL\n                     load = true;\n@@ -1204,8 +1201,8 @@ public boolean serializing() {\n             if (_meta.isDetachable())\n                 return DetachManager.preSerialize(this);\n \n-            load(_broker.getFetchConfiguration().newFetchState(),\n-                LOAD_SERIALIZE, null, null, false);\n+            load(_broker.getFetchConfiguration(), LOAD_SERIALIZE, null, null, \n+                false);\n             return false;\n         } catch (RuntimeException re) {\n             throw translate(re);\n@@ -2412,10 +2409,10 @@ void setLoaded(boolean val) {\n                 setLoaded(i, val);\n         }\n         if (!val) {\n-            _flags &= ~FLAG_DFG;\n+            _flags &= ~FLAG_LOADED;\n             setDirty(false);\n         } else\n-            _flags |= FLAG_DFG;\n+            _flags |= FLAG_LOADED;\n     }\n \n     /**\n@@ -2438,7 +2435,7 @@ else if (!val) {\n         }\n \n         if (val)\n-            _flags |= FLAG_DFG;\n+            _flags |= FLAG_LOADED;\n     }\n \n     /**\n@@ -2706,7 +2703,7 @@ void cascadePersist(OpCallbacks call) {\n      * Load the given field set from the data store into the instance.\n      * Return true if any data is loaded, false otherwise.\n      */\n-    boolean loadFields(BitSet fields, FetchState fetchState, int lockLevel,\n+    boolean loadFields(BitSet fields, FetchConfiguration fetch, int lockLevel,\n         Object sdata, boolean forWrite) {\n         // can't load version field from store\n         if (fields != null) {\n@@ -2721,7 +2718,7 @@ boolean loadFields(BitSet fields, FetchState fetchState, int lockLevel,\n             // if any fields given, load them\n             int len = (fields == null) ? 0 : fields.length();\n             if (len > 0) {\n-                if (!_broker.getStoreManager().load(this, fields, fetchState,\n+                if (!_broker.getStoreManager().load(this, fields, fetch,\n                     lockLevel, sdata)) {\n                     throw new ObjectNotFoundException(_loc.get(\"del-instance\",\n                         _meta.getDescribedType(), _oid)).\n@@ -2748,52 +2745,62 @@ boolean loadFields(BitSet fields, FetchState fetchState, int lockLevel,\n         // see if the dfg is now loaded; do this regardless of whether we\n         // loaded any fields, cause may already have been loaded by\n         // StoreManager during initialization\n-        postLoad(-1, fetchState);\n+        postLoad(-1, fetch);\n         return ret;\n     }\n \n-    protected void loadField(int field, int lockLevel, boolean forWrite,\n-        boolean fgs) {\n-    \tFetchConfiguration fc = _broker.getFetchConfiguration();\n-        loadField(field, fc.newFetchState(),lockLevel, forWrite, fgs);\n-     }\n-\n     /**\n      * Load the given field's fetch group; the field itself may already be\n      * loaded if it is being set by the user.\n      */\n-    protected void loadField(int field, FetchState fetchState, int lockLevel,\n-        boolean forWrite, boolean fgs) {\n+    protected void loadField(int field, int lockLevel, boolean forWrite,\n+        boolean fgs) {\n+    \tFetchConfiguration fetch = _broker.getFetchConfiguration();\n         FieldMetaData fmd = _meta.getField(field);\n         BitSet fields = null;\n         // if this is a dfg field or we need to load our dfg, do so\n         if (fmd.isInDefaultFetchGroup()\n-            || (fgs && (_flags & FLAG_DFG) == 0)) {\n-            fields = getUnloadedInternal(fetchState, LOAD_FGS, null);\n-        }\n-\n+            || (fgs && (_flags & FLAG_LOADED) == 0)) \n+            fields = getUnloadedInternal(fetch, LOAD_FGS, null);\n+        \n+        // if not a dfg field, use first custom fetch group as load group\n+        //### need to use metadata load-fetch-group\n         if (!fmd.isInDefaultFetchGroup()) {\n-            if (fmd.getFetchGroups() != null) {\n+            if (fmd.getCustomFetchGroups().length > 0) {  \n+                String fg = fmd.getCustomFetchGroups()[0];\n                 FieldMetaData[] fmds = _meta.getFields();\n                 for (int i = 0; i < fmds.length; i++) {\n                     if (!_loaded.get(i) && (i == field\n-                        || fmd.fetchGroupOverlapsWith(fmds[i]))) {\n+                        || fmds[i].isInFetchGroup(fg))) {\n                         if (fields == null)\n                             fields = new BitSet(fmds.length);\n                         fields.set(i);\n                     }\n                 }\n             } else if (!_loaded.get(fmd.getIndex())) {\n                 if (fields == null)\n-                    fields = new BitSet(fmd.getIndex());\n+                    fields = new BitSet();\n                 fields.set(fmd.getIndex());\n             }\n         }\n \n         // call this method even if there are no unloaded fields; loadFields\n         // takes care of things like loading version info and setting PC\n         // flags\n-        loadFields(fields, fetchState, lockLevel, null, forWrite);\n+        loadFields(fields, fetch, lockLevel, null, forWrite);\n+    }\n+\n+    /**\n+     * Return whether the second field has any custom fetch groups in common \n+     * with the first.\n+     */\n+    private static boolean sharesCustomFetchGroups(FieldMetaData fmd1, \n+        FieldMetaData fmd2) {\n+        String[] fgs = fmd1.getCustomFetchGroups();\n+        for (int i = 0; i < fgs.length; i++)\n+            if (fmd2.isInFetchGroup(fgs[i]))\n+                return true;\n+        return false;\n     }\n \n     /**\n@@ -2848,46 +2855,56 @@ private void setLoaded(int field, boolean isLoaded) {\n      * @param field the field index that was loaded, or -1 to indicate\n      * that a group of possibly unknown fields was loaded\n      */\n-    private void postLoad(int field, FetchState fetchState) {\n+    private void postLoad(int field, FetchConfiguration fetch) {\n         // no need for postLoad callback?\n-        if ((_flags & FLAG_DFG) > 0)\n-            return;\n-        LifecycleEventManager mgr = _broker.getLifecycleEventManager();\n-        if (mgr == null || !mgr.hasLoadListeners(getManagedInstance(), _meta))\n+        if ((_flags & FLAG_LOADED) != 0)\n             return;\n \n         // in the middle of a group load, after which this method will be\n         // called again?\n         if (field != -1 && isLoading())\n             return;\n \n-        // is this field in the dfg?\n-        FieldMetaData[] fmds = _meta.getDefaultFetchGroupFields();\n+        // no listeners?\n+        LifecycleEventManager mgr = _broker.getLifecycleEventManager();\n+        if (mgr == null || !mgr.hasLoadListeners(getManagedInstance(), _meta))\n+            return;\n \n-        // see if any fetch group with postLoad=true is fully loaded\n-        boolean isLoaded = true;\n-        for (int i = 0; isLoaded && i < fmds.length; i++)\n-            if (!_loaded.get(fmds[i].getIndex())\n-                && requiresPostLoadCallabck(fmds[i], fetchState))\n-                isLoaded = false;\n-        if (isLoaded) {\n-            _flags |= FLAG_DFG;\n-            fireLifecycleEvent(LifecycleEvent.AFTER_LOAD);\n+        // is this field a post-load field?\n+        if (field != -1) {\n+            FieldMetaData fmd = _meta.getField (field);\n+            if (fmd.isInDefaultFetchGroup() \n+                && postLoad(_meta.getFetchGroup(FetchGroup.NAME_DEFAULT)))\n+                return;\n+            String[] fgs = fmd.getCustomFetchGroups();\n+            for (int i = 0; i < fgs.length; i++)\n+                if (postLoad(_meta.getFetchGroup(fgs[i])))\n+                    return;\n+        } else {\n+            if (postLoad(_meta.getFetchGroup(FetchGroup.NAME_DEFAULT)))\n+                return;\n+            FetchGroup[] fgs = _meta.getCustomFetchGroups();\n+            for (int i = 0; i < fgs.length; i++)\n+                if (postLoad(fgs[i]))\n+                    return; \n         }\n     }\n \n-    private boolean requiresPostLoadCallabck(FieldMetaData fm, FetchState fetchState) {\n-        if (fm == null)\n+    /**\n+     * Perform post-load actions if the given fetch group is a post-load group\n+     * and is fully loaded.\n+     */\n+    private boolean postLoad(FetchGroup fg) {\n+        if (!fg.isPostLoad())\n             return false;\n-        Set fetchGroups = fm.getFetchGroups();\n-        for (Iterator i = fetchGroups.iterator(); i.hasNext();) \n-        {\n-        \tString fg = i.next().toString();\n-        \tif (_broker.getFetchConfiguration().hasFetchGroup(fg)\n-        \t\t&& fm.getDeclaringMetaData().getFetchGroup(fg).isPostLoad())\n-        \t\treturn true;\n-        }\n-        return false;\n+        FieldMetaData[] fmds = _meta.getFields();\n+        for (int i = 0; i < fmds.length; i++)\n+            if (!_loaded.get(i) && fmds[i].isInFetchGroup(fg.getName()))\n+                return false;\n+\n+        _flags |= FLAG_LOADED;\n+        fireLifecycleEvent(LifecycleEvent.AFTER_LOAD);\n+        return true;\n     }\n \n     /**"},{"sha":"746a97cc641a37abad43a26bdf557c157f2bec92","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreContext.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -135,13 +135,13 @@\n      * if a cached instance has been deleted concurrently. These options\n      * are controllable through the given <code>OID_XXX</code> flags.\n      */\n-    public Object find(Object oid, FetchState fetchState, BitSet exclude,\n+    public Object find(Object oid, FetchConfiguration fetch, BitSet exclude,\n         Object edata, int flags);\n \n     /**\n      * Return the objects with the given oids.\n      *\n-     * @see #find(Object,FetchState,BitSet,Object,int)\n+     * @see #find(Object,FetchConfiguration,BitSet,Object,int)\n      */\n     public Object[] findAll(Collection oids, FetchConfiguration fetch,\n         BitSet exclude, Object edata, int flags);"},{"sha":"8b63fb06ab2c1564f2fb49226adbe85f910cdeb4","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -129,14 +129,14 @@\n      *\n      * @param sm the instance to initialize\n      * @param state the lifecycle state to initialize the state manager with\n-     * @param fetchState configuration for how to load the instance\n+     * @param fetch configuration for how to load the instance\n      * @param edata the current execution data, or null if not\n      * given to the calling method of the broker\n      * @return true if the matching instance exists in the data\n      * store, false otherwise\n      */\n     public boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState, Object edata);\n+        FetchConfiguration fetch, Object edata);\n \n     /**\n      * Load the given state manager.\n@@ -153,7 +153,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n      * @param sm the instance to load\n      * @param fields set of fields to load; all field indexes in this\n      * set must be loaded; this set is mutable\n-     * @param fetchState the fetch configuration to use when loading\n+     * @param fetch the fetch configuration to use when loading\n      * related objects\n      * @param lockLevel attempt to load simple fields at this lock level;\n      * relations should be loaded at the read lock level\n@@ -164,7 +164,7 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n      * database, true otherwise\n      */\n     public boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, int lockLevel, Object edata);\n+        FetchConfiguration fetch, int lockLevel, Object edata);\n \n     /**\n      * Initialize, load, or validate the existance of all of the given\n@@ -192,7 +192,8 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n      * be included outside of refresh invocations if a user calls\n      * <code>findAll</code> with the <code>validate</code>\n      * parameter set to <code>true</code>.</li>\n-     * </ul> Store managers that cannot efficiently batch load can simply test\n+     * </ul> \n+     * Store managers that cannot efficiently batch load can simply test\n      * for these conditions and delegate to the proper methods.\n      *\n      * @param sms the state manager instances to load\n@@ -201,7 +202,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n      * instances are included in <code>sms</code>\n      * @param load one of the FORCE_LOAD_* constants describing the\n      * fields to force-load if this is a refresh or retrieve action\n-     * @param fetchState the current fetch configuration to use when loading\n+     * @param fetch the current fetch configuration to use when loading\n      * related objects\n      * @param edata the current execution data, or null if not\n      * given to the calling method of the broker"},{"sha":"acb91eb0f4a33ee21e97abe4752c5c745b590c46","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/VersionAttachStrategy.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -129,9 +129,7 @@ public Object attach(AttachManager manager, Object toAttach,\n                         attachField(manager, toAttach, sm, fmds[i], true);\n                         break;\n                     case DETACH_FGS:\n-                        if (fmds[i].isInDefaultFetchGroup()\n-                            || fetch.hasAnyFetchGroup(fmds[i].getFetchGroups())\n-                            || fetch.hasField(fmds[i].getFullName()))\n+                        if (fetch.requiresFetch(fmds[i]))\n                             attachField(manager, toAttach, sm, fmds[i], true);\n                         break;\n                     case DETACH_LOADED:"},{"sha":"af47d0c57adc889e735596c5350f52eed7e04d71","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","status":"modified","additions":98,"deletions":26,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/ClassMetaData.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -114,6 +114,7 @@\n     // the repository this class belongs to, if any, and source file\n     private final MetaDataRepository _repos;\n     private final ValueMetaData _owner;\n+    private final LifecycleMetaData _lifeMeta = new LifecycleMetaData(this);\n     private ClassLoader _loader = null;\n     private File _srcFile = null;\n     private int _srcType = SRC_OTHER;\n@@ -128,6 +129,7 @@\n     private boolean _defSupFields = false;\n     private Collection _staticFields = null;\n     private int[] _fieldDataTable = null;\n+    private Map _fgMap = null;\n \n     ////////////////////////////////////////////////////////////////////\n     // Note: if you add additional state, make sure to add it to copy()\n@@ -144,7 +146,6 @@\n \n     private String _seqName = DEFAULT_STRING;\n     private SequenceMetaData _seqMeta = null;\n-    private Map _fgs = new HashMap();\n     private String _cacheName = DEFAULT_STRING;\n     private int _cacheTimeout = Integer.MIN_VALUE;\n     private Boolean _detachable = null;\n@@ -166,8 +167,8 @@\n     private FieldMetaData[] _definedFields = null;\n     private FieldMetaData[] _listingFields = null;\n     private FieldMetaData[] _allListingFields = null;\n-\n-    private final LifecycleMetaData _lifeMeta = new LifecycleMetaData(this);\n+    private FetchGroup[] _fgs = null;\n+    private FetchGroup[] _customFGs = null;\n \n     /**\n      * Constructor. Supply described type and repository.\n@@ -1493,8 +1494,7 @@ protected void resolveMeta(boolean runtime) {\n             ClassMetaData meta = _repos.getMetaData(_type, _loader, true);\n             meta.resolve(MODE_META);\n             copy(this, meta);\n-            _embedded =\n-                Boolean.FALSE; // embedded instance isn't embedded-only\n+            _embedded = Boolean.FALSE; // embedded instance isn't embedded-only\n         }\n \n         // make sure superclass is resolved\n@@ -1550,6 +1550,11 @@ protected void resolveMeta(boolean runtime) {\n         // resolve lifecycle metadata now to prevent lazy threading problems\n         _lifeMeta.resolve();\n \n+        // resolve fetch groups\n+        if (_fgMap != null)\n+            for (Iterator itr = _fgMap.values().iterator(); itr.hasNext();)\n+                ((FetchGroup) itr.next()).resolve();\n+\n         // if this is runtime, create a pc instance and scan it for comparators\n         if (runtime && !Modifier.isAbstract(_type.getModifiers())) {\n             ProxySetupStateManager sm = new ProxySetupStateManager();\n@@ -1910,27 +1915,46 @@ private void validateDetachable() {\n         }\n     }\n \n-    /////////////////////\n+    ///////////////\n     // Fetch Group\n-    /////////////////////\n+    ///////////////\n \n     /**\n-     * Adds fecth group of the given name.\n-     *\n-     * @param name a non-null, non-empty name. Must be unique within this\n-     * receiver's scope. The super class <em>may</em> have a group with\n-     * the same name.\n+     * Return the fetch groups declared explicitly in this type.\n      */\n-    public synchronized FetchGroup addFetchGroup(String name) {\n-    \tif (name == null || name.trim().length()==0)\n-    \t\tthrow new MetaDataException(_loc.get(\"empty-fg-name\", this));\n-        FetchGroup fg = (FetchGroup) _fgs.get(name);\n-        if (fg == null) {\n-        \tfg = new FetchGroup(this, name);\n-        \t_fgs.put(name, fg);\n-        }\n+    public FetchGroup[] getDeclaredFetchGroups() {\n+        if (_fgs == null)\n+            _fgs = (_fgMap == null) ? new FetchGroup[0] : (FetchGroup[])\n+                _fgMap.values().toArray(new FetchGroup[_fgMap.size()]); \n+        return _fgs;\n+    }\n \n-        return fg;\n+    /**\n+     * Return all fetch groups for this type, including superclass groups.\n+     */\n+    public FetchGroup[] getCustomFetchGroups() {\n+        if (_customFGs == null) {\n+            // map fgs to names, allowing our fgs to override supers\n+            Map fgs = new HashMap();\n+            ClassMetaData sup = getPCSuperclassMetaData();\n+            if (sup != null)\n+            {\n+                FetchGroup[] supFGs = sup.getCustomFetchGroups();\n+                for (int i = 0; i < supFGs.length; i++)\n+                    fgs.put(supFGs[i].getName(), supFGs[i]);\n+            }\n+            FetchGroup[] decs = getDeclaredFetchGroups();\n+            for (int i = 0; i < decs.length; i++)\n+                fgs.put(decs[i].getName(), decs[i]);\n+            \n+            // remove std groups\n+            fgs.remove(FetchGroup.NAME_DEFAULT);\n+            fgs.remove(FetchGroup.NAME_ALL);\n+\n+            _customFGs = (FetchGroup[]) fgs.values().toArray\n+                (new FetchGroup[fgs.size()]);\n+        }\n+        return _customFGs;\n     }\n \n     /**\n@@ -1941,16 +1965,56 @@ public synchronized FetchGroup addFetchGroup(String name) {\n      * @return an existing fecth group of the given name if known to this \n      * receiver or any of its superclasses. Otherwise null.\n      */\n-    public synchronized FetchGroup getFetchGroup(String name) {\n-        FetchGroup fg = (FetchGroup) _fgs.get(name);\n+    public FetchGroup getFetchGroup(String name) {\n+        FetchGroup fg = (_fgMap == null) ? null : (FetchGroup) _fgMap.get(name);\n+        if (fg != null)\n+            return fg;\n+        ClassMetaData sup = getPCSuperclassMetaData();\n+        if (sup != null)\n+            return sup.getFetchGroup(name);\n+        if (FetchGroup.NAME_DEFAULT.equals(name))\n+            return FetchGroup.DEFAULT;\n+        if (FetchGroup.NAME_ALL.equals(name))\n+            return FetchGroup.ALL;\n+        return null;\n+    }\n+\n+    /**\n+     * Adds fetch group of the given name, or returns existing instance.\n+     *\n+     * @param name a non-null, non-empty name. Must be unique within this\n+     * receiver's scope. The super class <em>may</em> have a group with\n+     * the same name.\n+     */\n+    public FetchGroup addDeclaredFetchGroup(String name) {\n+    \tif (StringUtils.isEmpty(name))\n+    \t\tthrow new MetaDataException(_loc.get(\"empty-fg-name\", this));\n+        if (_fgMap == null)\n+            _fgMap = new HashMap();\n+        FetchGroup fg = (FetchGroup) _fgMap.get(name);\n         if (fg == null) {\n-            ClassMetaData scm = getPCSuperclassMetaData();\n-            if (scm != null)\n-                fg = scm.getFetchGroup(name);\n+        \tfg = new FetchGroup(this, name);\n+        \t_fgMap.put(name, fg);\n+            _fgs = null;\n+            _customFGs = null;\n         }\n         return fg;\n     }\n \n+    /**\n+     * Remove a declared fetch group.\n+     */\n+    public boolean removeDeclaredFetchGroup(FetchGroup fg) {\n+        if (fg == null)\n+            return false;\n+        if (_fgMap.remove(fg.getName()) != null) {\n+            _fgs = null;\n+            _customFGs = null;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n     /////////////////\n     // SourceTracker\n     /////////////////\n@@ -2083,6 +2147,14 @@ public void copy(ClassMetaData meta) {\n             field.setIndex(-1);\n             field.copy(fields[i]);\n         }\n+\n+        // copy fetch groups\n+        FetchGroup[] fgs = meta.getDeclaredFetchGroups();\n+        FetchGroup fg;\n+        for (int i = 0; i < fgs.length; i++) {\n+            fg = addDeclaredFetchGroup(fgs[i].getName());\n+            fg.copy(fgs[i]); \n+        }\n     }\n \n     /**"},{"sha":"2407bed634a3733d0e600550462da18951cde43d","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","status":"modified","additions":261,"deletions":91,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FetchGroup.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -1,173 +1,343 @@\n /*\r\n  * Copyright 2006 The Apache Software Foundation.\r\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *  http://www.apache.org/licenses/LICENSE-2.0\r\n- *  Unless required by applicable law or agreed to in writing, software\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-/**\r\n- * \r\n- */\r\n package org.apache.openjpa.meta;\r\n \r\n-import java.io.File;\r\n import java.util.ArrayList;\r\n import java.util.HashMap;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Map;\r\n \r\n import org.apache.commons.lang.StringUtils;\r\n-import org.apache.openjpa.lib.meta.SourceTracker;\r\n+import org.apache.commons.lang.ObjectUtils;\r\n import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.util.UserException;\r\n+import org.apache.openjpa.util.MetaDataException;\r\n+import serp.util.Numbers;\r\n \r\n /**\r\n  * Captures fetch group metadata.\r\n  */\r\n-public class FetchGroup implements SourceTracker {\r\n+public class FetchGroup {\r\n+\r\n+    /**\r\n+     * Name of the default fetch group.\r\n+     */\r\n+    public static final String NAME_DEFAULT = \"default\";\r\n+\r\n+    /**\r\n+     * Name of the \"all\" fetch group.\r\n+     */\r\n+    public static final String NAME_ALL = \"all\";\r\n+\r\n+    /**\r\n+     * Default field recursion depth.\r\n+     */\r\n+    public static final int RECURSION_DEPTH_DEFAULT = 1;\r\n+\r\n+    /**\r\n+     * Infinite depth.\r\n+     */\r\n+\tpublic static final int DEPTH_INFINITE = -1;\r\n+\r\n+    /**\r\n+     *  Standard default fetch group.\r\n+     */\r\n+    static final FetchGroup DEFAULT = new FetchGroup(NAME_DEFAULT, true);\r\n+\r\n+    /**\r\n+     *  Standard \"all\" fetch group.\r\n+     */\r\n+    static final FetchGroup ALL = new FetchGroup(NAME_ALL, false);\r\n+\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (FetchGroup.class);\r\n \r\n     private final String _name;\r\n-    private final ClassMetaData _declaringClass;\r\n+    private final ClassMetaData _meta;\r\n+    private final boolean _readOnly;\r\n     private List _includes;\r\n-    private Map  _depths;\r\n-    private boolean _postLoad;\r\n-    public static final int DEFAULT_RECURSION_DEPTH = 1;\r\n-    private static final Localizer _loc =\r\n-        Localizer.forPackage(FetchGroup.class);\r\n+    private Map _depths;\r\n+    private Boolean _postLoad;\r\n \r\n     /**\r\n-     * Supply immutable name.\r\n+     * Constructor; supply immutable name.\r\n      *\r\n-     * @param must not by null or empty.\r\n+     * @param name must not by null or empty.\r\n      */\r\n     FetchGroup(ClassMetaData cm, String name) {\r\n-        super();\r\n-        if (StringUtils.isEmpty(name))\r\n-            throw new UserException(_loc.get(\"invalid-fg-name\", cm, name));\r\n+        _meta = cm;\r\n         _name = name;\r\n-        _declaringClass = cm;\r\n+        _readOnly = false;\r\n     }\r\n \r\n+    /**\r\n+     * Internal constructor for builtin fetch groups.\r\n+     */\r\n+    private FetchGroup(String name, boolean postLoad) {\r\n+        _meta = null;\r\n+        _name = name;\r\n+        _postLoad = (postLoad) ? Boolean.TRUE : Boolean.FALSE;\r\n+        _readOnly = true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Copy state from the given fetch group.\r\n+     */\r\n+    void copy(FetchGroup fg) {\r\n+        if (fg._includes != null)\r\n+            for (Iterator itr = fg._includes.iterator(); itr.hasNext();)\r\n+                addDeclaredInclude((String) itr.next());\r\n+        if (fg._depths != null) {\r\n+            Map.Entry entry;\r\n+            for (Iterator itr = fg._depths.entrySet().iterator(); \r\n+                itr.hasNext();) {\r\n+                entry = (Map.Entry) itr.next();\r\n+                setRecursionDepth((FieldMetaData) entry.getKey(), ((Number) \r\n+                    entry.getValue()).intValue());\r\n+            }\r\n+        }\r\n+        if (fg._postLoad != null)\r\n+            _postLoad = fg._postLoad;\r\n+    }\r\n+\r\n+    /**\r\n+     * Fetch group name.\r\n+     */\r\n     public String getName() {\r\n         return _name;\r\n     }\r\n \r\n     /**\r\n      * Includes given fetch group within this receiver.\r\n-     *\r\n-     * @param fg must not be null or this receiver itself or must not include\r\n-     *           this receiver.\r\n-     */\r\n-    public void addInclude(FetchGroup fg) {\r\n-        if (fg == this)\r\n-            throw new UserException(_loc.get(\"self-include-fg\", this));\r\n-        if (fg == null)\r\n-            throw new UserException(_loc.get(\"null-include-fg\", this));\r\n-        if (fg.includes(this, true))\r\n-            throw new UserException(_loc.get(\"cyclic-fg\", this, fg));\r\n+     */\r\n+    public void addDeclaredInclude(String fgName) {\r\n+        if (_readOnly)\r\n+            throw new UnsupportedOperationException();\r\n+        if (StringUtils.isEmpty(fgName))\r\n+            throw new MetaDataException(_loc.get(\"null-include-fg\", this));\r\n         if (_includes == null)\r\n             _includes = new ArrayList();\r\n-        _includes.add(fg);\r\n+        if (!_includes.contains(fgName))\r\n+            _includes.add(fgName);\r\n     }\r\n \r\n     /**\r\n-     * Affirms if given fetch group is included by this receiver.\r\n+     * Affirms if given fetch group is included by this receiver.  Includes\r\n+     * superclass definition of fetch group and optionally other included \r\n+     * groups.\r\n      *\r\n-     * @param fg\r\n      * @param recurse if true then recursively checks within the included\r\n-     *                fecth groups. Otherwise just checks within direct includes.\r\n-     * @return\r\n+     * fecth groups\r\n      */\r\n-    public boolean includes(FetchGroup fg, boolean recurse) {\r\n-        if (_includes == null)\r\n-            return false;\r\n-        if (_includes.contains(fg))\r\n-            return true;\r\n-        if (recurse)\r\n-            for (Iterator i = _includes.iterator(); i.hasNext();)\r\n-                if (((FetchGroup) i.next()).includes(fg, true))\r\n-                    return true;\r\n+    public boolean includes(String fgName, boolean recurse) {\r\n+        // check our includes\r\n+        if (_includes != null) {\r\n+            if (_includes.contains(fgName))\r\n+                return true;\r\n+            if (recurse) {\r\n+                FetchGroup fg;\r\n+                for (Iterator i = _includes.iterator(); i.hasNext();) {\r\n+                    fg = _meta.getFetchGroup((String) i.next());\r\n+                    if (fg != null && fg.includes(fgName, true))\r\n+                        return true;\r\n+                }\r\n+            }\r\n+        }\r\n+        if (_meta != null) {\r\n+            // check superclass includes\r\n+            ClassMetaData sup = _meta.getPCSuperclassMetaData();\r\n+            if (sup != null) {\r\n+                FetchGroup supFG = sup.getFetchGroup(_name);\r\n+                if (supFG != null)\r\n+                    return supFG.includes(fgName, recurse);\r\n+            }\r\n+        }\r\n         return false;\r\n     }\r\n \r\n     /**\r\n-     * Sets recursion depth for a field.\r\n-     *\r\n-     * @param fm\r\n-     * @param depth\r\n+     * Return the fetch group names declared included by this group.\r\n      */\r\n-    public void setDepthFor(FieldMetaData fm, int depth) {\r\n+    public String[] getDeclaredIncludes() {\r\n+        // only used during serialization; no need to cache\r\n+        return (_includes == null) ? new String[0]\r\n+            : (String[]) _includes.toArray(new String[_includes.size()]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Recursion depth for the given field.  This is the depth of relations of\r\n+     * the same class as this one we can fetch through the given field.\r\n+     */\r\n+    public void setRecursionDepth(FieldMetaData fm, int depth) {\r\n+        if (_readOnly)\r\n+            throw new UnsupportedOperationException();\r\n         if (depth < -1)\r\n-            throw new UserException(_loc.get(\"invalid-fetch-depth\",\r\n-                _name, fm, new Integer(depth)));\r\n+            throw new MetaDataException(_loc.get(\"invalid-fg-depth\", _name, fm, \r\n+                Numbers.valueOf(depth)));\r\n         if (_depths == null)\r\n             _depths = new HashMap();\r\n-        _depths.put(fm, new Integer(depth));\r\n+        _depths.put(fm, Numbers.valueOf(depth));\r\n     }\r\n \r\n     /**\r\n-     * Gets recusrion depth for the given field.\r\n-     *\r\n-     * @param fm\r\n-     * @return defaults to 1.\r\n+     * Recursion depth for the given field.  This is the depth of relations of\r\n+     * the same class as this one we can fetch through the given field.\r\n      */\r\n-    public int getDepthFor(FieldMetaData fm) {\r\n-        if (_depths == null || !_depths.containsKey(fm))\r\n-            return DEFAULT_RECURSION_DEPTH;\r\n-        return ((Integer) _depths.get(fm)).intValue();\r\n+    public int getRecursionDepth(FieldMetaData fm) {\r\n+        Number depth = findRecursionDepth(fm);\r\n+        return (depth == null) ? RECURSION_DEPTH_DEFAULT : depth.intValue();\r\n     }\r\n \r\n-    \r\n-    public boolean isPostLoad () {\r\n-    \treturn _postLoad;\r\n+    /**\r\n+     * Return the recursion depth declared for the given field, or \r\n+     * 0 if none.\r\n+     */\r\n+    public int getDeclaredRecursionDepth(FieldMetaData fm) {\r\n+        Number depth = (_depths == null) ? null : (Number) _depths.get(fm);\r\n+        return (depth == null) ? 0 : depth.intValue();\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper to find recursion depth recursively in our includes.\r\n+     */\r\n+    private Number findRecursionDepth(FieldMetaData fm) { \r\n+        Number depth = (_depths == null) ? null : (Number) _depths.get(fm);\r\n+        if (depth != null)\r\n+            return depth;\r\n+\r\n+        // check for superclass declaration of depth\r\n+        Number max = null;\r\n+        if (_meta != null && fm.getDeclaringMetaData() != _meta) {\r\n+            ClassMetaData sup = _meta.getPCSuperclassMetaData();\r\n+            if (sup != null) {\r\n+                FetchGroup supFG = sup.getFetchGroup(_name);\r\n+                if (supFG != null)\r\n+                    max = supFG.findRecursionDepth(fm);\r\n+            }\r\n+        }\r\n+        if (_includes == null)\r\n+            return max;\r\n+\r\n+        // find largest included depth\r\n+        FetchGroup fg;\r\n+        for (Iterator itr = _includes.iterator(); itr.hasNext();) {\r\n+            fg = _meta.getFetchGroup((String) itr.next());\r\n+            depth = (fg == null) ? null : fg.findRecursionDepth(fm);\r\n+            if (depth != null && (max == null \r\n+                || depth.intValue() > max.intValue()))\r\n+                max = depth;\r\n+        }\r\n+        return max;\r\n     }\r\n \r\n+    /**\r\n+     * Return the fields with declared recursion depths in this group.\r\n+     */\r\n+    public FieldMetaData[] getDeclaredRecursionDepthFields() {\r\n+        // used in serialization only; no need to cache\r\n+        if (_depths == null)\r\n+            return new FieldMetaData[0];\r\n+         return (FieldMetaData[]) _depths.keySet().toArray\r\n+            (new FieldMetaData[_depths.size()]);\r\n+    } \r\n+\r\n+    /**\r\n+     * Whether loading this fetch group causes a post-load callback on the\r\n+     * loaded instance.\r\n+     */\r\n     public void setPostLoad (boolean flag) {\r\n-    \t_postLoad = flag;\r\n+        if (_readOnly && flag != isPostLoad())\r\n+            throw new UnsupportedOperationException();\r\n+    \t_postLoad = (flag) ? Boolean.TRUE : Boolean.FALSE;\r\n     }\r\n-    \r\n+\r\n     /**\r\n-     * Affirms equality if the other has the same name.\r\n+     * Whether loading this fetch group causes a post-load callback on the\r\n+     * loaded instance.\r\n      */\r\n-    public boolean equals(Object other) {\r\n-        if (other instanceof FetchGroup) {\r\n-            FetchGroup that = (FetchGroup) other;\r\n-            return _name.equals(that._name)\r\n-                && _declaringClass.equals(that._declaringClass);\r\n+    public boolean isPostLoad () {\r\n+    \tif (_postLoad != null)\r\n+            return _postLoad.booleanValue();\r\n+\r\n+        if (_meta != null) {\r\n+            ClassMetaData sup = _meta.getPCSuperclassMetaData();\r\n+            FetchGroup supFG = sup.getFetchGroup(_name);\r\n+            if (supFG != null && supFG.isPostLoad())\r\n+                return true;\r\n+        }\r\n+\r\n+        if (_includes == null)\r\n+            return false;\r\n+        FetchGroup fg;\r\n+        for (Iterator itr = _includes.iterator(); itr.hasNext();) {\r\n+            fg = _meta.getFetchGroup((String) itr.next());\r\n+            if (fg != null && fg.isPostLoad())\r\n+                return true;\r\n         }\r\n         return false;\r\n     }\r\n \r\n-    public int hashCode() {\r\n-        return _name.hashCode() + _declaringClass.hashCode();\r\n+    /**\r\n+     * Whether the post-load value is declared for this group.  \r\n+     */\r\n+    public boolean isPostLoadExplicit() {\r\n+        return _postLoad != null;\r\n     }\r\n \r\n-    public String toString() {\r\n-        return _name;\r\n-    }\r\n+    /**\r\n+     * Resolve and validate fetch group metadata.\r\n+     */\r\n+    public void resolve() {\r\n+        if (_includes == null)\r\n+            return;\r\n \r\n-    /////////////////\r\n-    // SourceTracker\r\n-    /////////////////\r\n-    public File getSourceFile() {\r\n-        return _declaringClass.getSourceFile();\r\n+        // validate includes\r\n+        String name;\r\n+        FetchGroup fg;\r\n+        for (Iterator itr = _includes.iterator(); itr.hasNext();) {\r\n+            name = (String) itr.next();\r\n+            if (name.equals(_name))\r\n+                throw new MetaDataException(_loc.get(\"cyclic-fg\", this, name));\r\n+            fg = _meta.getFetchGroup(name);\r\n+            if (fg == null)\r\n+                throw new MetaDataException(_loc.get(\"bad-fg-include\", this,\r\n+                    name));\r\n+            if (fg.includes(_name, true))\r\n+                throw new MetaDataException(_loc.get(\"cyclic-fg\", this, name));\r\n+        }\r\n     }\r\n-\r\n-    public Object getSourceScope() {\r\n-        return _declaringClass;\r\n+    \r\n+    /**\r\n+     * Affirms equality if the other has the same name and declaring type.\r\n+     */\r\n+    public boolean equals(Object other) {\r\n+        if (other == this)\r\n+            return true;\r\n+        if (!(other instanceof FetchGroup))\r\n+            return false;\r\n+        FetchGroup that = (FetchGroup) other;\r\n+        return _name.equals(that._name)\r\n+            && ObjectUtils.equals(_meta, that._meta);\r\n     }\r\n \r\n-    public int getSourceType() {\r\n-        return _declaringClass.getSourceType();\r\n+    public int hashCode() {\r\n+        return _name.hashCode() + ((_meta == null) ? 0 : _meta.hashCode());\r\n     }\r\n \r\n-    public String getResourceName() {\r\n-        return _declaringClass.getResourceName();\r\n+    public String toString() {\r\n+        return ((_meta == null) ? \"Builtin\" : _meta.toString ()) + \".\" + _name;\r\n     }\r\n }\r"},{"sha":"f1800f8d435ab1280daf38d068808c680804da94","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","status":"modified","additions":59,"deletions":61,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/FieldMetaData.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -39,7 +39,6 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.enhance.PersistenceCapable;\n-import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.lib.conf.Configurations;\n@@ -110,7 +109,6 @@\n     private static final int DFG_EXPLICIT = 4;\n \n     private static final Method DEFAULT_METHOD;\n-\n     static {\n         try {\n             DEFAULT_METHOD = Object.class.getMethod(\"wait\", (Class[]) null);\n@@ -152,7 +150,8 @@\n     private int _pkIndex = -1;\n     private boolean _explicit = false;\n     private int _dfg = 0;\n-    private Set _fgs = null;\n+    private Set _fgSet = null;\n+    private String[] _fgs = null;\n     private Boolean _lrs = null;\n     private String _extName = null;\n     private Method _extMethod = DEFAULT_METHOD;\n@@ -553,6 +552,61 @@ public void setDefaultFetchGroupExplicit(boolean explicit) {\n             _dfg &= ~DFG_EXPLICIT;\n     }\n \n+    /**\n+     * Gets the name of the custom fetch groups those are associated to this \n+     * receiver.  This does not include the \"default\" and \"all\" fetch groups.\n+     *\n+     * @return the set of fetch group names, not including the default and\n+     * all fetch groups.\n+     */\n+    public String[] getCustomFetchGroups() {\n+        if (_fgs == null) {\n+            if (_fgSet == null || _manage != MANAGE_PERSISTENT \n+                || isPrimaryKey() || isVersion())\n+                _fgs = new String[0];\n+            else\n+                _fgs = (String[]) _fgSet.toArray(new String[_fgSet.size()]);\n+        }\n+        return _fgs;\n+    }\n+\n+    /**\n+     * Whether this field is in the given fetch group.\n+     */\n+    public boolean isInFetchGroup(String fg) {\n+        if (_manage != MANAGE_PERSISTENT || isPrimaryKey() || isVersion())\n+            return false;\n+        if (FetchGroup.NAME_ALL.equals(fg))\n+            return true;\n+        if (FetchGroup.NAME_DEFAULT.equals(fg))\n+            return isInDefaultFetchGroup();\n+        return _fgSet != null && _fgSet.contains(fg);\n+    }\n+\n+    /**\n+     * Set whether this field is in the given fetch group.\n+     *\n+     * @param fg is the name of a fetch group that must be present in the\n+     * class that declared this field or any of its persistent superclasses.\n+     */\n+    public void setInFetchGroup(String fg, boolean in) {\n+        if (StringUtils.isEmpty(fg))\n+            throw new MetaDataException(_loc.get(\"empty-fg-name\", this));\n+        if (fg.equals(FetchGroup.NAME_ALL))\n+            return;\n+        if (fg.equals(FetchGroup.NAME_DEFAULT)) {\n+            setInDefaultFetchGroup(in);\n+            return;\n+        }\n+        if (_owner.getFetchGroup(fg) == null)\n+            throw new MetaDataException(_loc.get(\"unknown-fg\", fg, this));\n+        if (in && _fgSet == null)\n+            _fgSet = new HashSet();\n+        if ((in && _fgSet.add(fg))\n+            || (!in && _fgSet != null && _fgSet.remove(fg)))\n+            _fgs = null;\n+    }\n+\n     /**\n      * How the data store should treat null values for this field:\n      * <ul>\n@@ -827,62 +881,6 @@ public void setLRS(boolean lrs) {\n         _lrs = (lrs) ? Boolean.TRUE : Boolean.FALSE;\n     }\n \n-    /**\n-     * Gets the name of the fetch groups those are associated to this receiver.\n-     *\n-     * @return the set of fetch group names.\n-     * null if this field is a primary key or a version field.\n-     * zero-length array if no fetch group has been associated.\n-     */\n-    public Set getFetchGroups() {\n-        if (isPrimaryKey() || isVersion())\n-            return null;\n-        if (_fgs == null)\n-            return new HashSet();\n-        return _fgs;\n-    }\n-\n-    /**\n-     * Add the fetch group of given name for this field.\n-     *\n-     * @param fg is the name of a fetch group that must be present in the\n-     * class that declared this field or any of its persistent superclasses.\n-     */\n-    public void addFetchGroup(String fg) {\n-        if (StringUtils.isEmpty(fg))\n-            throw new MetaDataException(_loc.get(\"bad-fg\", fg));\n-        if (getDeclaringMetaData().getFetchGroup(fg) == null)\n-            throw new MetaDataException(_loc.get(\"unknown-fg\", fg));\n-        if (_fgs == null)\n-            _fgs = new HashSet();\n-        _fgs.add(fg);\n-        if (fg.equals(FetchConfiguration.FETCH_GROUP_DEFAULT))\n-            setInDefaultFetchGroup(true);\n-    }\n-\n-    public void removeFetchGroup(String fg) {\n-        if (_fgs == null)\n-            return;\n-        _fgs.remove(fg);\n-        if (FetchConfiguration.FETCH_GROUP_DEFAULT.equals(fg))\n-            setInDefaultFetchGroup(false);\n-    }\n-\n-    public boolean fetchGroupOverlapsWith(FieldMetaData that) {\n-        Set other = that.getFetchGroups();\n-        if (_fgs == null || other == null || other.isEmpty())\n-            return false;\n-\n-        for (Iterator fg = _fgs.iterator(); fg.hasNext();)\n-            if (other.contains(fg.next()))\n-                return true;\n-        return false;\n-    }\n-\n-    public boolean isDeclaredInFetchGroup(String fg) {\n-        return (_fgs != null && _fgs.contains(fg));\n-    }\n-\n     /**\n      * Whether this field uses intermediate data when loading/storing\n      * information through a {@link OpenJPAStateManager}. Defaults to true.\n@@ -1649,8 +1647,8 @@ public void copy(FieldMetaData field) {\n             if (field.isDefaultFetchGroupExplicit())\n                 _dfg |= DFG_EXPLICIT;\n         }\n-        if (_fgs == null)\n-            _fgs = field.getFetchGroups();\n+        if (_fgSet == null && field._fgSet != null)\n+            _fgSet = new HashSet(field._fgSet);\n         if (_lrs == null)\n             _lrs = (field.isLRS()) ? Boolean.TRUE : Boolean.FALSE;\n         if (_valStrategy == -1)"},{"sha":"d48a20d45f86ca332f05d82b406012df4ded2a87","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ImplHelper.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -24,7 +24,6 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.LockManager;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n@@ -97,15 +96,14 @@ public static Collection loadAll(Collection sms, StoreManager store,\n         LockManager lm;\n         for (Iterator itr = sms.iterator(); itr.hasNext();) {\n             sm = (OpenJPAStateManager) itr.next();\n-            FetchState fetchState = fetch.newFetchState();\n             if (sm.getManagedInstance() == null) {\n-                if (!store.initialize(sm, state, fetchState, context))\n+                if (!store.initialize(sm, state, fetch, context))\n                     failed = addFailedId(sm, failed);\n             } else if (load != StoreManager.FORCE_LOAD_NONE\n                 || sm.getPCState() == PCState.HOLLOW) {\n                 lm = sm.getContext().getLockManager();\n-                if (!store.load(sm, sm.getUnloaded(fetchState),\n-                    fetchState, lm.getLockLevel(sm), context))\n+                if (!store.load(sm, sm.getUnloaded(fetch), fetch, \n+                    lm.getLockLevel(sm), context))\n                     failed = addFailedId(sm, failed);\n             } else if (!store.exists(sm, context))\n                 failed = addFailedId(sm, failed);"},{"sha":"5d07d06ee2c2b8c5c9c4c941ed1b5b14bd1ff1a6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","status":"renamed","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/StoreFacadeTypeRegistry.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -1,8 +1,8 @@\n-package org.apache.openjpa.conf;\r\n+package org.apache.openjpa.util;\r\n \r\n-import java.util.HashMap;\r\n import java.util.Map;\r\n \r\n+import org.apache.openjpa.lib.util.concurrent.ConcurrentHashMap;\r\n \r\n /**\r\n  * Repository of store-specific facade classes. This is used by facade \r\n@@ -11,10 +11,9 @@\n  */\r\n public class StoreFacadeTypeRegistry {\r\n \r\n-    private Map _impls = new HashMap();\r\n+    private Map _impls = new ConcurrentHashMap();\r\n \r\n-    public void registerImplementation(Class facadeType, \r\n-        Class implType) {\r\n+    public void registerImplementation(Class facadeType, Class implType) {\r\n         _impls.put(facadeType, implType);\r\n     }\r\n     \r","previous_filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/StoreFacadeTypeRegistry.java"},{"sha":"479cbacb204dc7fbb44902495aa056fb8f27eee0","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/meta/localizer.properties?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -20,7 +20,7 @@ assigned-sup: Set persistence-capable superclass of \"{0}\" to \"{1}\".\n found-pcs: Found {0} classes with metadata in {1} milliseconds.\n unmanaged-sup-field: Superclass field \"{0}\" is mapped in the metadata for \\\n \tsubclass \"{1}\", but is not a persistent field.\n-bad-discover-class: The class \"{0}\" listed in the org.apache.openjpa.MetaDataFactory \\\n+bad-discover-class: The class \"{0}\" listed in the openjpa.MetaDataFactory \\\n \tconfiguration property could not be loaded; ignoring.\n bad-lrs-concrete: Large result set fields must be of type java.util.Collection \\\n \tor java.util.Map.  No concrete classes or other interfaces are allowed. \\\n@@ -248,8 +248,12 @@ unsupported-id-type: Type \"{0}\" declares field \"{1}\" as a primary key, but \\\n mapped-unknownid: Type \"{0}\" is mapped to the data store, but does not have \\\n \tan identity type.  Alter its metadata to declare datastore identity or \\\n \tto have at least one primary key field.\n-wrong-default-fg-name: Attempt to change default fetch group name to \"{0}\" \\\n-\tfrom current name \"{1}\" is not permitted.\n-duplicate-fg: Fetch group \"{0}\" is already defined in \"{1}\".\n-invalid-fetch-depth: Fetch group \"{0}\" for field \"{1}\" specifies invalid \\\n-\trecursion depth {2}. Recursion depth must be greater than or equal to -1.\n+empty-fg-name: Attempt to add an unnamed fetch group to \"{0}\".\n+invalid-fg-depth: Fetch group \"{0}\" specifies invalid recursion depth \"{2}\" \\\n+    for field \"{1}\". Recursion depth must be greater than or equal to -1.\n+cyclic-fg: Attempt to include fetch group \"{1}\" in fetch group \"{0}\" creates \\\n+    an inclusion cycle.\n+bad-fg-inclue: Attempt to include non-existent fetch group \"{1}\" in fetch \\\n+    group \"{0}\".\n+unknown-fg: Attempt to add fetch group \"{0}\" to type field \"{1}\" failed. \\\n+    This fetch group has not been defined."},{"sha":"82ac71fba9f06037a858299d12a7eea4dfb36915","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -860,28 +860,32 @@ private void recordCallbacks(ClassMetaData cls,\n      * Create fetch groups.\n      */\n     private void parseFetchGroups(ClassMetaData meta, FetchGroup... groups) {\n+        org.apache.openjpa.meta.FetchGroup fg;\n         for (FetchGroup group : groups) {\n             if (StringUtils.isEmpty(group.name()))\n                 throw new MetaDataException(_loc.get(\"unnamed-fg\", meta));\n-            meta.addFetchGroup(group.name());\n+\n+            fg = meta.addDeclaredFetchGroup(group.name());\n+            if (group.postLoad())\n+                fg.setPostLoad(true); \n             for (FetchAttribute attr : group.attributes())\n-                parseFetchAttribute(meta, group.name(), attr);\n+                parseFetchAttribute(meta, fg, attr);\n         }\n     }\n \n     /**\n      * Set a field's fetch group.\n      */\n-    private void parseFetchAttribute(ClassMetaData meta, String group,\n-        FetchAttribute attr) {\n+    private void parseFetchAttribute(ClassMetaData meta, \n+        org.apache.openjpa.meta.FetchGroup fg, FetchAttribute attr) {\n         FieldMetaData field = meta.getDeclaredField(attr.name());\n         if (field == null\n             || field.getManagement() != FieldMetaData.MANAGE_PERSISTENT)\n-            throw new MetaDataException(_loc.get(\"bad-fg-field\", group,\n+            throw new MetaDataException(_loc.get(\"bad-fg-field\", fg.getName(),\n                 meta, attr.name()));\n \n-        // validations passed; set fetch group\n-        field.addFetchGroup(group);\n+        if (attr.recursionDepth() != Integer.MIN_VALUE)\n+            fg.setRecursionDepth(field, attr.recursionDepth());\n     }\n \n     /**"},{"sha":"6e51d8ebd9e78920663359f56fde444d9c3bae23","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -29,7 +29,13 @@\n @Retention(RUNTIME)\n public @interface FetchAttribute {\n \n+    /**\n+     * Included field/property name.\n+     */\n     String name() default \"\";\n \n-    int depth() default 1;\n+    /**\n+     * Recursion depth for relation field.\n+     */\n+    int recursionDepth() default Integer.MIN_VALUE;\n }"},{"sha":"4c12e01f68874bfa33e42c2a14b869e45251e9b4","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -30,7 +30,18 @@\n @Retention(RUNTIME)\n public @interface FetchGroup {\n \n+    /**\n+     * Name of fetch group.\n+     */\n     String name() default \"\";\n \n+    /**\n+     * Whether loading this group results in a post-load callback.\n+     */\n+    boolean postLoad() default false;\n+\n+    /**\n+     * Included attributes.\n+     */\n     FetchAttribute[] attributes() default {};\n }"},{"sha":"e353bf412bdaf52583e24337662d921681f020a6","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","status":"modified","additions":29,"deletions":68,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.meta.FetchGroup;\n \n /**\n  * The fetch plan allows you to dynamically alter eager fetching\n@@ -37,8 +38,17 @@\n     /**\n      * Fetch group representing all fields.\n      */\n-    public static final String FETCH_GROUP_ALL =\n-        FetchConfiguration.FETCH_GROUP_ALL;\n+    public static final String GROUP_ALL = FetchGroup.NAME_ALL;\n+\n+    /**\n+     * The default fetch group.\n+     */\n+    public static final String GROUP_DEFAULT = FetchGroup.NAME_DEFAULT;\n+\n+    /**\n+     * Infinite fetch depth.\n+     */\n+    public static final int DEPTH_INFINITE = FetchGroup.DEPTH_INFINITE;\n \n     /**\n      * Constant to revert any setting to its default value.\n@@ -70,9 +80,24 @@ public FetchConfiguration getDelegate() {\n         return _fetch.getDelegate();\n     }\n \n+    /**\n+     * The maximum fetch depth when loading an object.\n+     */\n+    public int getMaxFetchDepth(int depth) {\n+        return _fetch.getMaxFetchDepth();\n+    }\n+\n+    /**\n+     * The maximum fetch depth when loading an object.\n+     */\n+    public FetchPlan setMaxFetchDepth(int depth) {\n+        _fetch.setMaxFetchDepth(depth);\n+        return this;\n+    }\n+\n     /**\n      * Return the fetch batch size for large result set support.\n-     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting. Note\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n     public int getFetchBatchSize() {\n@@ -81,7 +106,7 @@ public int getFetchBatchSize() {\n \n     /**\n      * Set the fetch batch size for large result set support.\n-     * Defaults to the\t<code>org.apache.openjpa.FetchBatchSize</code> setting. Note\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n      * that this property will be ignored under some data stores.\n      */\n     public FetchPlan setFetchBatchSize(int fetchBatchSize) {\n@@ -116,7 +141,6 @@ public FetchPlan setQueryResultCache(boolean cache) {\n      * <code>org.apache.openjpa.FetchGroups</code> setting.\n      */\n     public Collection<String> getFetchGroups() {\n-//\t\treturn new FetchGroupSet ();\n         return _fetch.getFetchGroups();\n     }\n \n@@ -195,7 +219,6 @@ public FetchPlan resetFetchGroups() {\n      * will use when loading objects. Defaults to the empty set.\n      */\n     public Collection<String> getFields() {\n-//\t\treturn new FetchFieldSet ();\n         return (Collection<String>) _fetch.getFields();\n     }\n \n@@ -398,66 +421,4 @@ public boolean equals(Object other) {\n             return false;\n         return _fetch.equals(((FetchPlan) other)._fetch);\n     }\n-\n-    /**\n-     * View of fetch groups as collection.\n-     */\n-//\tprivate class FetchGroupSet\n-//\t\textends AbstractCollection<String>\n-//\t{\n-//\t\tprivate String[] _groups = null;\n-//\n-//\n-//\t\tpublic boolean contains (Object o)\n-//\t\t{\n-//\t\t\treturn o instanceof String && _fetch.hasFetchGroup ((String) o);\n-//\t\t}\n-//\n-//\n-//\t\tpublic Iterator iterator ()\n-//\t\t{\n-//\t\t\tif (_groups == null)\n-//\t\t\t\t_groups = _fetch.getFetchGroups ();\n-//\t\t\treturn new ObjectArrayIterator (_groups);\n-//\t\t}\n-//\n-//\n-//\t\tpublic int size ()\n-//\t\t{\n-//\t\t\tif (_groups == null)\n-//\t\t\t\t_groups = _fetch.getFetchGroups ();\n-//\t\t\treturn _groups.length;\n-//\t\t}\n-//\t}\n-\n-    /**\n-     * View of fetch fields as collection.\n-     */\n-//\tprivate class FetchFieldSet\n-//\t\textends AbstractCollection<String>\n-//\t{\n-//\t\tprivate String[] _fields = null;\n-//\n-//\n-//\t\tpublic boolean contains (Object o)\n-//\t\t{\n-//\t\t\treturn o instanceof String && _fetch.hasField ((String) o);\n-//\t\t}\n-//\n-//\n-//\t\tpublic Iterator iterator ()\n-//\t\t{\n-//\t\t\tif (_fields == null)\n-//\t\t\t\t_fields = _fetch.getFields ();\n-//\t\t\treturn new ObjectArrayIterator (_fields);\n-//\t\t}\n-//\n-//\n-//\t\tpublic int size ()\n-//\t\t{\n-//\t\t\tif (_fields == null)\n-//\t\t\t\t_fields = _fetch.getFields ();\n-//\t\t\treturn _fields.length;\n-//\t\t}\n-//\t}\n }"},{"sha":"111a3e095f38a128f7f2d1a0cebbd9e355c6db38","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -25,7 +25,7 @@\n import java.util.Map;\n \n import org.apache.openjpa.event.OrphanedKeyAction;\n-import org.apache.openjpa.kernel.FetchState;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.StoreContext;\n import org.apache.openjpa.meta.ClassMetaData;\n@@ -105,40 +105,37 @@ public ClassMetaData getMetaData() {\n      * given state manager. Only fields in the given fetch configuration are\n      * loaded.\n      */\n-    public void load(OpenJPAStateManager sm, FetchState fetchState) {\n+    public void load(OpenJPAStateManager sm, FetchConfiguration fetch) {\n         if (sm.getVersion() == null)\n             sm.setVersion(_version);\n \n         FieldMetaData[] fmds = _meta.getFields();\n-        for (int i = 0; i < fmds.length; i++) {\n-            if (fmds[i].getManagement() == fmds[i].MANAGE_PERSISTENT\n-                && (fetchState.requiresLoad(sm, fmds[i]))) {\n-                sm.store(i, toLoadable(sm, fmds[i], _data[i], fetchState));\n-            }\n-        }\n+        for (int i = 0; i < fmds.length; i++)\n+            if (!sm.getLoaded().get(i) && fetch.requiresFetch(fmds[i]))\n+                sm.store(i, toLoadable(sm, fmds[i], _data[i], fetch));\n     }\n \n     /**\n      * Load the data and version information for this object into the\n      * given state manager. Only fields in the given bit set will be loaded.\n      */\n     public void load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState) {\n+        FetchConfiguration fetch) {\n         if (sm.getVersion() == null)\n             sm.setVersion(_version);\n \n         FieldMetaData[] fmds = _meta.getFields();\n         for (int i = 0; i < fmds.length; i++)\n             if (fields.get(i))\n-                sm.store(i, toLoadable(sm, fmds[i], _data[i], fetchState));\n+                sm.store(i, toLoadable(sm, fmds[i], _data[i], fetch));\n     }\n \n     /**\n      * Convert the stored value <code>val</code> into a value for loading\n      * into a state manager.\n      */\n     private static Object toLoadable(OpenJPAStateManager sm,\n-        FieldMetaData fmd, Object val, FetchState fetchState) {\n+        FieldMetaData fmd, Object val, FetchConfiguration fetch) {\n         if (val == null)\n             return null;\n \n@@ -157,7 +154,7 @@ private static Object toLoadable(OpenJPAStateManager sm,\n                 // it to the right type from its stored form\n                 for (Iterator itr = c.iterator(); itr.hasNext();)\n                     c2.add(toNestedLoadable(sm, fmd.getElement(), itr.next(),\n-                        fetchState));\n+                        fetch));\n                 return c2;\n \n             case JavaTypes.ARRAY:\n@@ -175,7 +172,7 @@ private static Object toLoadable(OpenJPAStateManager sm,\n                 int idx = 0;\n                 for (Iterator itr = c.iterator(); itr.hasNext(); idx++)\n                     Array.set(a, idx, toNestedLoadable(sm, fmd.getElement(),\n-                        itr.next(), fetchState));\n+                        itr.next(), fetch));\n                 return a;\n \n             case JavaTypes.MAP:\n@@ -191,16 +188,15 @@ private static Object toLoadable(OpenJPAStateManager sm,\n                 // it to the right type from its stored form\n                 for (Iterator itr = m.entrySet().iterator(); itr.hasNext();) {\n                     Map.Entry e = (Map.Entry) itr.next();\n-                    m2.put(toNestedLoadable(sm, fmd.getKey(), e.getKey(),\n-                        fetchState),\n+                    m2.put(toNestedLoadable(sm, fmd.getKey(), e.getKey(),fetch),\n                         toNestedLoadable(sm, fmd.getElement(), e.getValue(),\n-                            fetchState));\n+                            fetch));\n                 }\n                 return m2;\n \n             default:\n                 // just convert the stored value into its loadable equivalent.\n-                return toNestedLoadable(sm, fmd, val, fetchState);\n+                return toNestedLoadable(sm, fmd, val, fetch);\n         }\n     }\n \n@@ -210,7 +206,7 @@ private static Object toLoadable(OpenJPAStateManager sm,\n      * value; it cannot be a container.\n      */\n     private static Object toNestedLoadable(OpenJPAStateManager sm,\n-        ValueMetaData vmd, Object val, FetchState fetchState) {\n+        ValueMetaData vmd, Object val, FetchConfiguration fetch) {\n         if (val == null)\n             return null;\n \n@@ -224,7 +220,7 @@ private static Object toNestedLoadable(OpenJPAStateManager sm,\n                 // for relations to other persistent objects, we store the related\n                 // object's oid -- convert it back into a persistent instance\n                 StoreContext ctx = sm.getContext();\n-                Object pc = ctx.find(val, fetchState, null, null, 0);\n+                Object pc = ctx.find(val, fetch, null, null, 0);\n                 if (pc != null)\n                     return pc;\n                 OrphanedKeyAction action = ctx.getConfiguration()."},{"sha":"62f052116804a8a6d6b0204768805368777ecbf5","filename":"openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/979d2340e93eaaa9f273a100dbe78e42ea9ed400/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=979d2340e93eaaa9f273a100dbe78e42ea9ed400","patch":"@@ -25,7 +25,6 @@\n import org.apache.openjpa.abstractstore.AbstractStoreManager;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.kernel.FetchConfiguration;\n-import org.apache.openjpa.kernel.FetchState;\n import org.apache.openjpa.kernel.OpenJPAStateManager;\n import org.apache.openjpa.kernel.PCState;\n import org.apache.openjpa.lib.rop.ListResultObjectProvider;\n@@ -94,7 +93,7 @@ private static void incrementVersion(OpenJPAStateManager sm) {\n     }\n \n     public boolean initialize(OpenJPAStateManager sm, PCState state,\n-        FetchState fetchState, Object context) {\n+        FetchConfiguration fetch, Object context) {\n         // we may already have looked up the backing ObjectData (see our extent\n         // implementation below), and passed it through as the context; if\n         // not, then look it up in the store\n@@ -115,12 +114,12 @@ public boolean initialize(OpenJPAStateManager sm, PCState state,\n         // load the data from the ObjectData into the state mgr; note that\n         // this store manager doesn't do any locking -- it relies on the\n         // system's lock manager to lock after the load is complete\n-        data.load(sm, fetchState);\n+        data.load(sm, fetch);\n         return true;\n     }\n \n     public boolean load(OpenJPAStateManager sm, BitSet fields,\n-        FetchState fetchState, int lockLevel, Object context) {\n+        FetchConfiguration fetch, int lockLevel, Object context) {\n         // we may already have looked up the backing ObjectData (see our extent\n         // implementation below), and passed it through as the context; if\n         // not, then look it up in the store\n@@ -137,7 +136,7 @@ public boolean load(OpenJPAStateManager sm, BitSet fields,\n         // load the data from the ObjectData into the state mgr; note that\n         // this store manager doesn't do any locking -- it relies on the\n         // system's lock manager to lock after the load is complete\n-        data.load(sm, fields, fetchState);\n+        data.load(sm, fields, fetch);\n         return true;\n     }\n \n@@ -278,8 +277,7 @@ public ResultObjectProvider executeExtent(ClassMetaData meta,\n             // being passed through and save ourselves a trip to the store\n             // if it is present; this is particularly important in systems\n             // where a trip to the store can be expensive.\n-            pcs.add(ctx.find(datas[i].getId(), fetch.newFetchState(),\n-                null, datas[i], 0));\n+            pcs.add(ctx.find(datas[i].getId(), fetch, null, datas[i], 0));\n         }\n         return new ListResultObjectProvider(pcs);\n     }"}]}

