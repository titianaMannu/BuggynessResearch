{"sha":"97a94847f6c6620b934255f2ecf30bb9493e11c5","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk3YTk0ODQ3ZjZjNjYyMGI5MzQyNTVmMmVjZjMwYmI5NDkzZTExYzU=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:46:28Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-06-11T23:46:28Z"},"message":"OPENJPA-130. Merge from ../branches/1.1.x. svn merge -c 653008 ../branches/1.1.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@666905 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed0bff5479ea411aae089dc5100a4839266be8d3","url":"https://api.github.com/repos/apache/openjpa/git/trees/ed0bff5479ea411aae089dc5100a4839266be8d3"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/97a94847f6c6620b934255f2ecf30bb9493e11c5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/97a94847f6c6620b934255f2ecf30bb9493e11c5","html_url":"https://github.com/apache/openjpa/commit/97a94847f6c6620b934255f2ecf30bb9493e11c5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/97a94847f6c6620b934255f2ecf30bb9493e11c5/comments","author":null,"committer":null,"parents":[{"sha":"f17afddbd61836465de97ebc985a0170f062734f","url":"https://api.github.com/repos/apache/openjpa/commits/f17afddbd61836465de97ebc985a0170f062734f","html_url":"https://github.com/apache/openjpa/commit/f17afddbd61836465de97ebc985a0170f062734f"}],"stats":{"total":112,"additions":85,"deletions":27},"files":[{"sha":"6f06bdd042c0ad4eb6c0d972cb7687142e336e03","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","status":"modified","additions":27,"deletions":17,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/LobFieldStrategy.java?ref=97a94847f6c6620b934255f2ecf30bb9493e11c5","patch":"@@ -80,18 +80,12 @@ public void insert(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n             (field.getIndex()), store);\r\n         Row row = field.getRow(sm, store, rm, Row.ACTION_INSERT);\r\n         if (field.getColumnIO().isInsertable(0, ob == null)) {\r\n-            if (ob != null) {\r\n-                if (isBlob()) {\r\n-                    store.getDBDictionary().insertBlobForStreamingLoad\r\n-                        (row, field.getColumns()[0]);\r\n-                } else {\r\n-                    store.getDBDictionary().insertClobForStreamingLoad\r\n-                        (row, field.getColumns()[0]);\r\n-                }\r\n+            if (isBlob()) {\r\n+                store.getDBDictionary().insertBlobForStreamingLoad\r\n+                    (row, field.getColumns()[0], ob);\r\n             } else {\r\n-                Column col = field.getColumns()[0];\r\n-                col.setType(Types.OTHER);\r\n-                row.setNull(col);\r\n+                store.getDBDictionary().insertClobForStreamingLoad\r\n+                    (row, field.getColumns()[0], ob);\r\n             }\r\n         }\r\n     }\r\n@@ -113,11 +107,31 @@ public void customInsert(OpenJPAStateManager sm, JDBCStore store)\n             }\r\n         }\r\n     }\r\n+    \r\n+    public Boolean isCustomUpdate(OpenJPAStateManager sm, JDBCStore store) {\r\n+        return null;\r\n+    }\r\n \r\n     public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\r\n         throws SQLException {\r\n         Object ob = toDataStoreValue(sm.fetchObjectField\r\n-            (field.getIndex()), store);\r\n+                (field.getIndex()), store);\r\n+        if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n+            Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\r\n+            if (isBlob()) {\r\n+                store.getDBDictionary().insertBlobForStreamingLoad\r\n+                    (row, field.getColumns()[0], ob);\r\n+            } else {\r\n+                store.getDBDictionary().insertClobForStreamingLoad\r\n+                    (row, field.getColumns()[0], ob);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void customUpdate(OpenJPAStateManager sm, JDBCStore store)\r\n+        throws SQLException {\r\n+        Object ob = toDataStoreValue(sm.fetchObjectField\r\n+                (field.getIndex()), store);\r\n         if (field.getColumnIO().isUpdatable(0, ob == null)) {\r\n             if (ob != null) {\r\n                 Select sel = createSelect(sm, store);\r\n@@ -128,11 +142,6 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n                     store.getDBDictionary().updateClob\r\n                         (sel, store, (Reader)ob);\r\n                 }\r\n-            } else {\r\n-                Row row = field.getRow(sm, store, rm, Row.ACTION_UPDATE);\r\n-                Column col = field.getColumns()[0];\r\n-                col.setType(Types.OTHER);\r\n-                row.setNull(col);\r\n             }\r\n         }\r\n     }\r\n@@ -191,4 +200,5 @@ private Select createSelect(OpenJPAStateManager sm, JDBCStore store) {\n         sel.setLob(true);\r\n         return sel;\r\n     }\r\n+    \r\n }\r"},{"sha":"42a5d1be5abbdc070a8938d7d4c7c1bc38d5ba5d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=97a94847f6c6620b934255f2ecf30bb9493e11c5","patch":"@@ -127,8 +127,8 @@\n     public static final String CONS_NAME_MID = \"mid\";\n     public static final String CONS_NAME_AFTER = \"after\";\n     \n-    public int blobBufferSize = 50;\n-    public int clobBufferSize = 50;\n+    public int blobBufferSize = 50000;\n+    public int clobBufferSize = 50000;\n \n     protected static final int RANGE_POST_SELECT = 0;\n     protected static final int RANGE_PRE_DISTINCT = 1;\n@@ -4189,16 +4189,24 @@ public String getVersionColumn(Column column, String tableAlias) {\n         return column.toString();\n     }\n     \n-    public void insertBlobForStreamingLoad(Row row, Column col)\n+    public void insertBlobForStreamingLoad(Row row, Column col, Object ob)\n     throws SQLException {\n-        row.setBinaryStream(col, \n-                new ByteArrayInputStream(new byte[0]), 0);\n+        if (ob != null) {\n+            row.setBinaryStream(col, \n+                    new ByteArrayInputStream(new byte[0]), 0);\n+        } else {\n+            row.setNull(col);\n+        }\n     }\n     \n-    public void insertClobForStreamingLoad(Row row, Column col)\n+    public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n     throws SQLException {\n+        if (ob != null) {\n         row.setCharacterStream(col,\n                 new CharArrayReader(new char[0]), 0);\n+        } else {\n+            row.setNull(col);\n+        }\n     }\n     \n     public void updateBlob(Select sel, JDBCStore store, InputStream is)"},{"sha":"872d964880fdef32ef96970877c39679050a075f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=97a94847f6c6620b934255f2ecf30bb9493e11c5","patch":"@@ -1096,13 +1096,17 @@ private void appendXmlExtractValue(SQLBuffer buf, FilterValue val) {\n         buf.append(\"')\");\n     }\n     \n-    public void insertBlobForStreamingLoad(Row row, Column col)\n+    public void insertBlobForStreamingLoad(Row row, Column col, Object ob)\n         throws SQLException {\n+        if (ob == null)\n+            col.setType(Types.OTHER);\n         row.setNull(col);\n     }\n     \n-    public void insertClobForStreamingLoad(Row row, Column col)\n+    public void insertClobForStreamingLoad(Row row, Column col, Object ob)\n         throws SQLException {\n+        if (ob == null)\n+            col.setType(Types.OTHER);\n         row.setNull(col);\n     }\n "},{"sha":"65158ae53a3804e5220df5b868c10a7bc4a5cb1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java?ref=97a94847f6c6620b934255f2ecf30bb9493e11c5","patch":"@@ -20,6 +20,7 @@\n package org.apache.openjpa.jdbc.meta.strats;\r\n \r\n import java.io.IOException;\r\n+\r\n import javax.persistence.EntityManager;\r\n import javax.persistence.Query;\r\n \r\n@@ -117,6 +118,41 @@ public void testUpdate() throws IOException {\n         em.close();\r\n     }\r\n \r\n+    public void testUpdateWithNull() {\r\n+        if (!isDatabaseSupported()) return;\r\n+        insert(newLobEntity(\"oOOOOOo\", 1));\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        entity.setStream(null);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        assertNull(entity.getStream());\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+    \r\n+    public void testUpdateANullObjectWithoutNull() throws IOException {\r\n+        if (!isDatabaseSupported()) return;\r\n+        insert(newLobEntity(null, 1));\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        LobEntity entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        String string = \"iIIIIIi\";\r\n+        changeStream(entity, string);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        entity = (LobEntity) em.find(getLobEntityClass(), 1);\r\n+        assertEquals(string, getStreamContentAsString(entity.getStream()));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+    \r\n     public void testDelete() {\r\n         if (!isDatabaseSupported()) return;\r\n         insert(newLobEntity(\"oOOOOOo\", 1));\r"},{"sha":"64adc29f2aa8211969c1c3c081c1e23691c08e56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","raw_url":"https://github.com/apache/openjpa/raw/97a94847f6c6620b934255f2ecf30bb9493e11c5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java?ref=97a94847f6c6620b934255f2ecf30bb9493e11c5","patch":"@@ -35,10 +35,10 @@\n public class ReaderLobEntity implements LobEntity {\r\n \r\n     @Id\r\n-    int id;\r\n+    private int id;\r\n \r\n     @Persistent\r\n-    Reader stream;\r\n+    private Reader stream;\r\n \r\n     public int getId() {\r\n         return id;\r"}]}

