{"sha":"98d1da1fba419b8c6aec97dacbd4496a367c9b90","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk4ZDFkYTFmYmE0MTliOGM2YWVjOTdkYWNiZDQ0OTZhMzY3YzliOTA=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-28T07:24:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-28T07:24:11Z"},"message":"Moved Entity Listener constraints from MetaDataDefaults in kernel to JPA facade PersistenceMetaDataDefaults\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@450731 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab1bb16623e9c94647073a353aa836e72bde6122","url":"https://api.github.com/repos/apache/openjpa/git/trees/ab1bb16623e9c94647073a353aa836e72bde6122"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/98d1da1fba419b8c6aec97dacbd4496a367c9b90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/98d1da1fba419b8c6aec97dacbd4496a367c9b90","html_url":"https://github.com/apache/openjpa/commit/98d1da1fba419b8c6aec97dacbd4496a367c9b90","comments_url":"https://api.github.com/repos/apache/openjpa/commits/98d1da1fba419b8c6aec97dacbd4496a367c9b90/comments","author":null,"committer":null,"parents":[{"sha":"24c51d9fe60896520b2a810fbc6f88ff019a0d35","url":"https://api.github.com/repos/apache/openjpa/commits/24c51d9fe60896520b2a810fbc6f88ff019a0d35","html_url":"https://github.com/apache/openjpa/commit/24c51d9fe60896520b2a810fbc6f88ff019a0d35"}],"stats":{"total":96,"additions":49,"deletions":47},"files":[{"sha":"14dd20671b2095e2d64574044062b79b2a828b43","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":0,"deletions":18,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=98d1da1fba419b8c6aec97dacbd4496a367c9b90","patch":"@@ -45,8 +45,6 @@\n     private boolean _interface = true;\n     private boolean _pcRegistry = true;\n     private int _callback = CALLBACK_RETHROW;\n-    private boolean _allowsMultipleMethodsOnSameCallback = true;\n-    private boolean _allowsMissingCallbackConstructor = true;\n \n     /**\n      * Whether to attempt to use the information from registered classes\n@@ -354,22 +352,6 @@ public Class getUnimplementedExceptionType() {\n         return UnsupportedOperationException.class;\n     }\n \n-    public boolean getAllowsMultipleMethodsOnSameCallback() {\n-        return _allowsMultipleMethodsOnSameCallback;\n-    }\n-    \n-    public void setAllowsMultipleMethodsOnSameCallback(boolean flag) {\n-        _allowsMultipleMethodsOnSameCallback = flag;\n-    }\n-    \n-    public boolean getAllowsMissingCallbackConstructor() {\n-        return _allowsMissingCallbackConstructor;\n-    }\n-    \n-    public void setAllowsMissingCallbackConstructor(boolean flag) {\n-        _allowsMissingCallbackConstructor = flag;\n-    }\n-    \n     /**\n      * Helper method; returns true if the given class appears to be\n      * user-defined."},{"sha":"077258fb48de0661b60c3609f78b285c473941e3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=98d1da1fba419b8c6aec97dacbd4496a367c9b90","patch":"@@ -50,18 +50,6 @@\n      */\n     public boolean getCallbacksBeforeListeners(int type);\n     \n-    /** \n-     * Flags if multiple methods of the same class can handle the same \n-     * callback event.\n-     */\n-    public boolean getAllowsMultipleMethodsOnSameCallback();\n-\n-    /** \n-     * Flags if it allowed for the callback listener class not to have a no-arg \n-     * constructor.\n-     */\n-    public boolean getAllowsMissingCallbackConstructor();\n-    \n     /**\n      * Whether to ignore members which are not persistent by default\n      * during metadata population. Defaults to true."},{"sha":"2524f312ad687ec4440a227e53a1065ec9191703","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=98d1da1fba419b8c6aec97dacbd4496a367c9b90","patch":"@@ -122,12 +122,4 @@ public Member getBackingMember(FieldMetaData fmd) {\n     public Class getUnimplementedExceptionType() {\n         return null;\n     }\n-    \n-    public boolean getAllowsMultipleMethodsOnSameCallback() {\n-        return true;\n-    }\n-    \n-    public boolean getAllowsMissingCallbackConstructor() {\n-        return true;\n-    }\n }"},{"sha":"7e8e85d433d1746ef4919fc8268a81ea3f6d233e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=98d1da1fba419b8c6aec97dacbd4496a367c9b90","patch":"@@ -843,8 +843,6 @@ private boolean verifyMultipleMethodsOnSameEvent(Class cls,\n         boolean result = true;\n         if (callbacks == null || callbacks.isEmpty())\n             return true;\n-        MetaDataDefaults defaults = getRepository().getMetaDataFactory().\n-            getDefaults();\n         for (LifecycleCallbacks lc: callbacks) {\n             if (!(lc instanceof MethodLifecycleCallbacks))\n                 continue;\n@@ -854,9 +852,10 @@ private boolean verifyMultipleMethodsOnSameEvent(Class cls,\n                 Object[] args = new Object[]{method.getDeclaringClass()\n                     .getName(), method.getName(), exists.getName(), \n                     tag.toString()};\n-                if (defaults.getAllowsMultipleMethodsOnSameCallback()) {\n-                    _log.warn(_loc.get(\"multiple-methods-on-callback\", \n-                        args));\n+                PersistenceMetaDataDefaults defaults = getDefaults();\n+                if (defaults == null || \n+                    defaults.getAllowsMultipleMethodsOnSameCallback()) {\n+                    _log.warn(_loc.get(\"multiple-methods-on-callback\", args));\n                  } else {\n                     throw new UserException(\n                         _loc.get(\"multiple-methods-on-callback-error\", args));\n@@ -867,21 +866,29 @@ private boolean verifyMultipleMethodsOnSameEvent(Class cls,\n     }\n     \n     private boolean verifyHasNoArgConstructor(Class cls) {\n-        MetaDataDefaults defaults = getRepository().getMetaDataFactory().\n-            getDefaults();\n         try {\n             cls.getConstructor(new Class[]{});\n             return true;\n         } catch (Throwable t) {\n+            PersistenceMetaDataDefaults defaults = getDefaults();\n             Message msg = _loc.get(\"missing-no-arg-constructor\", cls.getName());\n-            if (defaults.getAllowsMissingCallbackConstructor())\n+            if (defaults == null || \n+                defaults.getAllowsMissingCallbackConstructor())\n                 _log.warn(msg);\n             else\n                 throw new UserException(msg, t);\n         } \n         return false;\n     }\n     \n+    private PersistenceMetaDataDefaults getDefaults() {\n+        MetaDataDefaults defaults = getRepository().getMetaDataFactory().\n+            getDefaults();\n+        if (defaults instanceof PersistenceMetaDataDefaults)\n+            return (PersistenceMetaDataDefaults)defaults;\n+        return null;\n+    }\n+    \n     /**\n      * Store lifecycle metadata.\n      */"},{"sha":"7cec059c4577b5dd6f03f0e54eefc2f2c61a19ba","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"modified","additions":34,"deletions":1,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/98d1da1fba419b8c6aec97dacbd4496a367c9b90/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=98d1da1fba419b8c6aec97dacbd4496a367c9b90","patch":"@@ -57,10 +57,14 @@\n  *\n  * @author Patrick Linskey\n  * @author Abe White\n+ * @nojavadoc\n  */\n-class PersistenceMetaDataDefaults\n+public class PersistenceMetaDataDefaults\n     extends AbstractMetaDataDefaults {\n \n+    private boolean _allowsMultipleMethodsOnSameCallback;\n+    private boolean _allowsMissingCallbackConstructor;\n+\n     private static Localizer _loc = Localizer.forPackage\n         (PersistenceMetaDataDefaults.class);\n \n@@ -93,6 +97,8 @@\n     public PersistenceMetaDataDefaults() {\n         setCallbackMode(CALLBACK_RETHROW | CALLBACK_ROLLBACK |\n             CALLBACK_FAIL_FAST);\n+        _allowsMultipleMethodsOnSameCallback = true;\n+        _allowsMissingCallbackConstructor = true;\n     }\n \n     /**\n@@ -265,4 +271,31 @@ protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n             return false;\n         return true;\n \t}\n+    \n+    /** \n+     * Flags if multiple methods of the same class can handle the same \n+     * callback event.\n+     */\n+    public boolean getAllowsMultipleMethodsOnSameCallback() {\n+        return _allowsMultipleMethodsOnSameCallback;\n+    }\n+    \n+    public void setAllowsMultipleMethodsOnSameCallback(boolean flag) {\n+        _allowsMultipleMethodsOnSameCallback = flag;\n+    }\n+\n+    /** \n+     * Flags if it allowed for the callback listener class not to have a no-arg \n+     * constructor.\n+     */\n+    \n+    public boolean getAllowsMissingCallbackConstructor() {\n+        return _allowsMissingCallbackConstructor;\n+    }\n+    \n+    public void setAllowsMissingCallbackConstructor(boolean flag) {\n+        _allowsMissingCallbackConstructor = flag;\n+    }\n+    \n+    \n }"}]}

