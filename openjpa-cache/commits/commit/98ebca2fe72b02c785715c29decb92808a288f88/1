{"sha":"98ebca2fe72b02c785715c29decb92808a288f88","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk4ZWJjYTJmZTcyYjAyYzc4NTcxNWMyOWRlY2I5MjgwOGEyODhmODg=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-11-16T22:12:18Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2010-11-16T22:12:18Z"},"message":"OPENJPA-1886: Remove query parameters when tracing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1035834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"57c598cccba6bca5ca27ad28d28c86797aee7642","url":"https://api.github.com/repos/apache/openjpa/git/trees/57c598cccba6bca5ca27ad28d28c86797aee7642"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/98ebca2fe72b02c785715c29decb92808a288f88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/98ebca2fe72b02c785715c29decb92808a288f88","html_url":"https://github.com/apache/openjpa/commit/98ebca2fe72b02c785715c29decb92808a288f88","comments_url":"https://api.github.com/repos/apache/openjpa/commits/98ebca2fe72b02c785715c29decb92808a288f88/comments","author":null,"committer":null,"parents":[{"sha":"d748e46040ad423ee044304f2312e3dfdb8f0502","url":"https://api.github.com/repos/apache/openjpa/commits/d748e46040ad423ee044304f2312e3dfdb8f0502","html_url":"https://github.com/apache/openjpa/commit/d748e46040ad423ee044304f2312e3dfdb8f0502"}],"stats":{"total":117,"additions":109,"deletions":8},"files":[{"sha":"031c4b6eb8fa2c4d692389422cff0551bde21118","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/98ebca2fe72b02c785715c29decb92808a288f88/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/98ebca2fe72b02c785715c29decb92808a288f88/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=98ebca2fe72b02c785715c29decb92808a288f88","patch":"@@ -287,6 +287,9 @@\n                 \"RetainState\",\n                 }));\n     }\n+    \n+    private boolean _printParameters = false;\n+    private static final String PRINT_PARAMETERS_CONFIG_STR = \"PrintParameters\";\n \n     /**\n      * Set the persistence manager's authentication. This is the first\n@@ -378,6 +381,9 @@ public void initialize(AbstractBrokerFactory factory,\n             _instm.start(InstrumentationLevel.BROKER, this);\n         }\n \n+        _printParameters =\n+            Boolean.parseBoolean(Configurations.parseProperties(_conf.getConnectionFactoryProperties()).getProperty(\n+                PRINT_PARAMETERS_CONFIG_STR, \"false\"));\n         // synch with the global transaction in progress, if any\n         if (_factory.syncWithManagedTransaction(this, false))\n             beginInternal();\n@@ -4706,6 +4712,12 @@ boolean isSerializing() {\n         return _isSerializing;\n     }\n \n+    /**\n+     * @return The value of openjpa.ConnectionFactoryProperties.PrintParameters. Default is false.\n+     */\n+    public boolean getPrintParameters() {\n+        return _printParameters;\n+    }\n     /**\n      * Transactional cache that holds soft refs to clean instances.\n      */"},{"sha":"1478c3ae7d0ce196168e6c0464ae07b503834c06","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/98ebca2fe72b02c785715c29decb92808a288f88/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/98ebca2fe72b02c785715c29decb92808a288f88/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=98ebca2fe72b02c785715c29decb92808a288f88","patch":"@@ -130,6 +130,7 @@\n     private transient final Collection<RemoveOnCloseResultList> _resultLists = \n         new ReferenceHashSet(ReferenceHashSet.WEAK);\n \n+    private boolean _printParameters = false;\n     /**\n      * Construct a query managed by the given broker.\n      */\n@@ -140,7 +141,7 @@ public QueryImpl(Broker broker, String language, StoreQuery storeQuery) {\n         _fc = (FetchConfiguration) broker.getFetchConfiguration().clone();\n         _log = broker.getConfiguration().getLog(OpenJPAConfiguration.LOG_QUERY);\n         _storeQuery.setContext(this);\n-\n+        _printParameters = _broker.getPrintParameters();\n         if (_broker != null && _broker.getMultithreaded())\n             _lock = new ReentrantLock();\n     }\n@@ -1195,16 +1196,19 @@ private void logExecution(int op, OrderedMap<Object, Class<?>> types, Object[] p\n     /**\n      * Trace log that the query is executing.\n      */\n-    private void logExecution(int op, Map<?, ?> params) {\n+    private void logExecution(int op, Map<Object, Object> params) {\n         String s = _query;\n         if (StringUtils.isEmpty(s))\n             s = toString();\n \n         String msg = \"executing-query\";\n-        if (!params.isEmpty())\n-            msg += \"-with-params\";\n+        if (params.isEmpty() == false) {\n+            msg = \"executing-query-with-params\";\n+        }\n \n-        _log.trace(_loc.get(msg, s, params));\n+        // If we aren't supposed to print parameters, replace values with '?'\n+        Object p = (_printParameters) ? params : \"?\";\n+        _log.trace(_loc.get(msg, s, p));\n     }\n \n     /**"},{"sha":"f1a0f6a2ee372a115ecb4c6137cc15027a614fbe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","status":"modified","additions":88,"deletions":3,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/98ebca2fe72b02c785715c29decb92808a288f88/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","raw_url":"https://github.com/apache/openjpa/raw/98ebca2fe72b02c785715c29decb92808a288f88/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/exception/TestParameterLogging.java?ref=98ebca2fe72b02c785715c29decb92808a288f88","patch":"@@ -18,19 +18,27 @@\n  */\n package org.apache.openjpa.persistence.exception;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.regex.Pattern;\n \n import javax.persistence.EntityManager;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.EntityTransaction;\n import javax.persistence.RollbackException;\n \n+import org.apache.openjpa.lib.log.AbstractLog;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.log.LogFactory;\n import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n \n-public class TestParameterLogging extends AbstractPersistenceTestCase {\n-\n+public class TestParameterLogging extends AbstractPersistenceTestCase implements LogFactory {\n     String _regex = \".*params=.*1,.*]\";\n-\n+    private static final String ID = Integer.toString(Integer.MIN_VALUE);\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        messages.clear();\n+    }\n     /*\n      * Persist the same row twice in the same transaction - will throw an exception with the failing SQL statement\n      */\n@@ -100,4 +108,81 @@ public void testParamsEnabledByConfig() {\n             nested = nested.getCause();\n         }\n     }\n+\n+    public void testDefaultPrintParameters() {\n+        queryCachePrintParametersLogic(null);\n+    }\n+    \n+    public void testPrintParametersTrue() {\n+        queryCachePrintParametersLogic(true);\n+    }\n+\n+    public void testPrintParametersFalse() {\n+        queryCachePrintParametersLogic(false);\n+    }\n+    \n+    private void queryCachePrintParametersLogic(Boolean printParameters){\n+        Object[] props = null;\n+        if (printParameters == null) {\n+            props =\n+                new Object[] { PObject.class, CLEAR_TABLES, \"openjpa.DataCache\", \"true\",\n+                    \"openjpa.Log\", \"org.apache.openjpa.persistence.exception.TestParameterLogging\" };\n+        } else {\n+            props =\n+                new Object[] { PObject.class, CLEAR_TABLES, \"openjpa.DataCache\", \"true\",\n+                    \"openjpa.Log\", \"org.apache.openjpa.persistence.exception.TestParameterLogging\",\n+                    \"openjpa.ConnectionFactoryProperties\", \"PrintParameters=\" + printParameters.booleanValue() };\n+        }\n+        EntityManagerFactory emf = createEMF(props);\n+        EntityManager em = emf.createEntityManager();\n+        String queryStr = \"SELECT c FROM PObject c WHERE c.id=:id\";\n+        em.createQuery(queryStr).setParameter(\"id\", Integer.MIN_VALUE).getResultList();\n+        em.createQuery(queryStr).setParameter(\"id\", Integer.MIN_VALUE).getResultList();\n+        boolean expected = (printParameters == null) ? false : printParameters.booleanValue();\n+        boolean actual = false;\n+        \n+        // Look through all trace messages for the ID before doing asserts\n+        for (String s : messages) {\n+            actual |= s.contains(ID);\n+        }\n+        \n+        assertEquals(expected, actual);\n+    }\n+\n+    // Start LogFactory implementation\n+    // This is static so both the test and the logger share\n+    private static List<String> messages = new ArrayList<String>();\n+    public Log getLog(String channel) {\n+        return new AbstractLog() {\n+\n+            protected boolean isEnabled(short logLevel) {\n+                return true;\n+            }\n+\n+            @Override\n+            public void trace(Object message) {\n+                messages.add(message.toString());\n+            }\n+\n+            protected void log(short type, String message, Throwable t) {\n+                messages.add(message);\n+            }\n+            \n+            @Override\n+            public void error(Object message) {\n+                messages.add(message.toString());\n+            }\n+            @Override\n+            public void warn(Object message) {\n+                // TODO Auto-generated method stub\n+                super.warn(message.toString());\n+            }\n+            @Override\n+            public void info(Object message) {\n+                messages.add(message.toString());\n+            }\n+        };\n+    }\n+\n+    // End LogFactory implementation\n }"}]}

