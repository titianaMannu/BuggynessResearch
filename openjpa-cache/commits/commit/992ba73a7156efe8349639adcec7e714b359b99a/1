{"sha":"992ba73a7156efe8349639adcec7e714b359b99a","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5MmJhNzNhNzE1NmVmZTgzNDk2MzlhZGNlYzdlNzE0YjM1OWI5OWE=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T18:39:02Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-03-16T18:39:02Z"},"message":"OPENJPA-1565: Raise correct Query/LockTimeout exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@923928 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f96b17c830b52dfb8eb15f22e9f61f2f37d99417","url":"https://api.github.com/repos/apache/openjpa/git/trees/f96b17c830b52dfb8eb15f22e9f61f2f37d99417"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/992ba73a7156efe8349639adcec7e714b359b99a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/992ba73a7156efe8349639adcec7e714b359b99a","html_url":"https://github.com/apache/openjpa/commit/992ba73a7156efe8349639adcec7e714b359b99a","comments_url":"https://api.github.com/repos/apache/openjpa/commits/992ba73a7156efe8349639adcec7e714b359b99a/comments","author":null,"committer":null,"parents":[{"sha":"a99ea6218f5898e37e8a6965f812976bd3362b7e","url":"https://api.github.com/repos/apache/openjpa/commits/a99ea6218f5898e37e8a6965f812976bd3362b7e","html_url":"https://github.com/apache/openjpa/commit/a99ea6218f5898e37e8a6965f812976bd3362b7e"}],"stats":{"total":89,"additions":37,"deletions":52},"files":[{"sha":"aec6593eb37e33849b4f9d1e7b3e57d4f3f08da9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PessimisticLockManager.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -37,6 +37,7 @@\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.Exceptions;\n import org.apache.openjpa.util.LockException;\n+import org.apache.openjpa.util.StoreException;\n \n /**\n  * Lock manager that uses exclusive database locks.\n@@ -137,7 +138,10 @@ private void lockRow(OpenJPAStateManager sm, int timeout, int level) {\n                 checkLock(rs, sm, timeout);\n             }\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, Exceptions.toString(sm.getPersistenceCapable()), dict, level);\n+            LockException e = new LockException(sm.getPersistenceCapable(), timeout, level);\n+            e.setCause(se);\n+            e.setFatal(dict.isFatalException(StoreException.LOCK, se));\n+            throw e;\n         } finally {\n             if (stmnt != null)\n                 try { stmnt.close(); } catch (SQLException se) {}"},{"sha":"37bf68886812612faa4a0757646376e0aa9c1568","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -923,7 +923,7 @@ String nullSafe(String s) {\n     }\n \n     @Override\n-    protected boolean isFatalException(int subtype, SQLException ex) {\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         String errorState = ex.getSQLState();\n         int errorCode = ex.getErrorCode();\n         if (errorCode == -952 && \"57014\".equals(errorState))"},{"sha":"0a47f1ed961a79ad7fc4f2671e7cc40659d40056","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -4862,7 +4862,7 @@ protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException\n      * \n      * @return false if the error is fatal. \n      */\n-    protected boolean isFatalException(int subtype, SQLException ex) {\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         return true;\n     }\n     "},{"sha":"1a8839f9d5b333212f9fa37fb0d75596d6523965","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DerbyDictionary.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -143,7 +143,7 @@ public void closeDataSource(DataSource dataSource) {\n     }\n     \n     @Override\n-    protected boolean isFatalException(int subtype, SQLException ex) {\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         int errorCode = ex.getErrorCode();\n         if ((subtype == StoreException.LOCK ||\n              subtype == StoreException.QUERY) && errorCode <= 30000) {"},{"sha":"d4cbb8af617caaa476ddd1ee4c6c1fd03e2afb5a","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/InformixDictionary.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -377,7 +377,7 @@ public String getSchemaCase(){\n     }\n         \n     @Override\n-    protected boolean isFatalException(int subtype, SQLException ex) {\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         \n         // SQL State of IX000 is a general purpose Informix error code\n         // category, so only return Boolean.TRUE if we match SQL Codes"},{"sha":"6f5f8bce8393debddd799fc231fd39fa40a8e5cb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -423,7 +423,7 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n     }\n     \n     @Override\n-    protected boolean isFatalException(int subtype, SQLException ex) {\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         if ((subtype == StoreException.LOCK  && ex.getErrorCode() == 1205)\n           ||(subtype == StoreException.QUERY && ex.getErrorCode() == 1317)) {\n             return false;"},{"sha":"0afa8ef112dadbbac14b6dde432a6ecc2d12ffcd","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/OracleDictionary.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -1259,7 +1259,7 @@ public int getBatchUpdateCount(PreparedStatement ps) throws SQLException {\n     }\n     \n     @Override\n-    protected boolean isFatalException(int subtype, SQLException ex) {\n+    public boolean isFatalException(int subtype, SQLException ex) {\n         String errorState = ex.getSQLState();\n         int errorCode = ex.getErrorCode();\n         if ((subtype == StoreException.LOCK)"},{"sha":"0adfc04de0e0fd8fd2e585e7c01b3422b7ebceab","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/SQLServerDictionary.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -281,10 +281,10 @@ public void setSupportsXMLColumn(boolean b) {\n     }\n     \n     @Override\n-    protected boolean isFatalException(int subtype,  SQLException ex) {\n+    public boolean isFatalException(int subtype,  SQLException ex) {\n         String errorState = ex.getSQLState();\n-        if ((subtype == StoreException.LOCK  && \"1222\".equals(errorState))\n-          ||(subtype == StoreException.QUERY && \"HY008\".equals(errorState)))\n+        if ((subtype == StoreException.LOCK  || subtype == StoreException.QUERY)\n+          &&(\"1222\".equals(errorState) || \"HY008\".equals(errorState)))\n          return false;\n         return super.isFatalException(subtype, ex);\n     }"},{"sha":"fbb2f55bd1bb74204d1cd0c165d5dc947b0764c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","status":"modified","additions":19,"deletions":36,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestTimeoutException.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -60,16 +60,12 @@ public void testQueryTimeOutExceptionWhileQueryingWithLocksOnAlreadyLockedEntiti\n         query.setLockMode(LockModeType.PESSIMISTIC_WRITE);\n         long timeout = 1000;\n         query.setHint(\"javax.persistence.query.timeout\", timeout);\n-        assertError(new Callable<Throwable>() {\n-            public Throwable call() throws Exception {\n-                try {\n-                    query.getResultList();\n-                } catch (Throwable t) {\n-                    return t;\n-                }\n-                return null;\n-            }\n-        }, QueryTimeoutException.class, timeout);\n+        try {\n+            query.getResultList();\n+            fail(\"Expected \" + QueryTimeoutException.class.getName());\n+        } catch (Throwable t) {\n+            assertError(t, QueryTimeoutException.class, timeout);\n+        }\n         \n         assertTrue(em2.getTransaction().isActive());\n         em2.getTransaction().rollback();\n@@ -90,18 +86,14 @@ public void testLockTimeOutExceptionWhileLockingAlreadyLockedEntities() {\n         em2.getTransaction().begin();\n         final Object entity2 = em2.find(entityClass, oid);\n         final long timeout = 1000;\n-        assertError(new Callable<Throwable>() {\n-            public Throwable call() throws Exception {\n-                try {\n-                    Map<String,Object> hint = new HashMap<String, Object>();\n-                    hint.put(\"javax.persistence.lock.timeout\", timeout);\n-                    em2.lock(entity2, LockModeType.PESSIMISTIC_WRITE, hint);\n-                } catch (Throwable t) {\n-                    return t;\n-                }\n-                return null;\n-            }\n-        }, LockTimeoutException.class, timeout);\n+        try {\n+            Map<String,Object> hint = new HashMap<String, Object>();\n+            hint.put(\"javax.persistence.lock.timeout\", timeout);\n+            em2.lock(entity2, LockModeType.PESSIMISTIC_WRITE, hint);\n+            fail(\"Expected \" + LockTimeoutException.class.getName());\n+        } catch (Throwable t) {\n+           assertError(t, LockTimeoutException.class, timeout);\n+        }\n         assertTrue(em2.getTransaction().isActive());\n         em2.getTransaction().rollback();\n         \n@@ -125,22 +117,13 @@ public Object createEntity(EntityManager em) {\n      * @param t\n      * @param expeceted\n      */\n-    void assertError(Callable<Throwable> task, Class<? extends Throwable> expected, long timeout) {\n-        try {\n-            Future<Throwable> future = scheduler.submit(task);\n-            Throwable error = future.get();\n-            if (error == null) {\n-                throw new AssertionFailedError(\"No exception was raised but expected \" + expected.getName());\n-            } else if (!expected.isAssignableFrom(error.getClass())) {\n-                error.printStackTrace();\n-                throw new AssertionFailedError(error.getClass().getName() + \" was raised but expected \" + \n+    void assertError(Throwable actual, Class<? extends Throwable> expected, long timeout) {\n+        if (!expected.isAssignableFrom(actual.getClass())) {\n+                actual.printStackTrace();\n+                throw new AssertionFailedError(actual.getClass().getName() + \" was raised but expected \" + \n                         expected.getName());\n-            }\n-        } catch (Throwable t) {\n-            t.printStackTrace();\n-            throw new AssertionFailedError(t.getClass().getName() + \" was raised but expected \" + \n-                    expected.getName());\n         }\n+        \n     }   \n     \n }"},{"sha":"02a0e86caf7973f5c5e1c3017b13f1b2f21866f7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/992ba73a7156efe8349639adcec7e714b359b99a/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=992ba73a7156efe8349639adcec7e714b359b99a","patch":"@@ -165,12 +165,10 @@ private static Throwable translateStoreException(OpenJPAException ke) {\n             \te = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal);\n         } else if (subtype == StoreException.LOCK || cause instanceof LockException) {\n             LockException lockEx = (LockException) (ke instanceof LockException ? ke : cause);\n-            if (lockEx != null && lockEx.getLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n-                if (!lockEx.isFatal()) {\n-                    e = new org.apache.openjpa.persistence.LockTimeoutException(msg, nested, failed);\n-                } else {\n-                    e = new org.apache.openjpa.persistence.PessimisticLockException(msg, nested, failed);\n-                }\n+            if (!lockEx.isFatal()) {\n+                e = new org.apache.openjpa.persistence.LockTimeoutException(msg, nested, failed);\n+            } else if (lockEx != null && lockEx.getLockLevel() >= MixedLockLevels.LOCK_PESSIMISTIC_READ) {\n+                e = new org.apache.openjpa.persistence.PessimisticLockException(msg, nested, failed);\n             } else {\n                 e = new org.apache.openjpa.persistence.OptimisticLockException(msg, nested, failed, fatal);\n             }"}]}

