{"sha":"9946b6c19bb6445d8b975d2bb734329777cf7ec5","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5NDZiNmMxOWJiNjQ0NWQ4Yjk3NWQyYmI3MzQzMjk3NzdjZjdlYzU=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-08T21:22:58Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2008-12-08T21:22:58Z"},"message":"OPENJPA-792: MappedSuperClass problem. Commit on behalf of \nSandhya Turaga.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@724490 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9f98f4b4700cb92c8cab62e9b5537dd1ca0daeec","url":"https://api.github.com/repos/apache/openjpa/git/trees/9f98f4b4700cb92c8cab62e9b5537dd1ca0daeec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9946b6c19bb6445d8b975d2bb734329777cf7ec5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9946b6c19bb6445d8b975d2bb734329777cf7ec5","html_url":"https://github.com/apache/openjpa/commit/9946b6c19bb6445d8b975d2bb734329777cf7ec5","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9946b6c19bb6445d8b975d2bb734329777cf7ec5/comments","author":null,"committer":null,"parents":[{"sha":"e78a1bc07924c7f70163929fe213e88a9002ca34","url":"https://api.github.com/repos/apache/openjpa/commits/e78a1bc07924c7f70163929fe213e88a9002ca34","html_url":"https://github.com/apache/openjpa/commit/e78a1bc07924c7f70163929fe213e88a9002ca34"}],"stats":{"total":676,"additions":673,"deletions":3},"files":[{"sha":"88d09c252ad65f0f210b7358228551a3973f6807","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -2486,14 +2486,23 @@ private void addNewObjectIdInstanceMethod(boolean obj)\n             // new ObjectId (cls, oid)\n             code.anew().setType(ObjectId.class);\n             code.dup();\n-            code.classconstant().setClass(getType(_meta));\n+            if(_meta.isEmbeddedOnly()) {\n+                code.aload().setThis();\n+                code.invokevirtual().setMethod(Object.class, \"getClass\", Class.class, null);\n+            }else\n+                code.classconstant().setClass(getType(_meta));\n         }\n \n         // new <oid class> ();\n         code.anew().setType(oidType);\n         code.dup();\n-        if (_meta.isOpenJPAIdentity() || (obj && usesClsString == Boolean.TRUE))\n-            code.classconstant().setClass(getType(_meta));\n+        if (_meta.isOpenJPAIdentity() || (obj && usesClsString == Boolean.TRUE)) {\n+            if(_meta.isEmbeddedOnly()) {\n+                code.aload().setThis();\n+                code.invokevirtual().setMethod(Object.class, \"getClass\", Class.class, null);\n+            }else\n+                code.classconstant().setClass(getType(_meta));\n+        }\n         if (obj) {\n             code.aload().setParam(0);\n             code.checkcast().setType(String.class);"},{"sha":"f515a5320b8f0a2a1fb8e98eba5eb637046b600b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMappedSuperClass.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMappedSuperClass.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMappedSuperClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/TestMappedSuperClass.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,174 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.PartyId;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site1;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store;\r\n+import org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store1;\r\n+\r\n+public class TestMappedSuperClass extends AnnotationTestCase {\r\n+\r\n+    public static Long pkey = new Long(1500);\r\n+    public static String pstr = \"TestParty\";\r\n+    public static int ikey = 1501;\r\n+    public static PartyId pid = new PartyId(pstr, ikey);\r\n+    \r\n+    public TestMappedSuperClass(String name) {\r\n+        super(name, \"annotationMappedSuperclassApp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Store.class);\r\n+        deleteAll(Site.class);\r\n+        deleteAll(Site1.class);\r\n+        deleteAll(Store1.class);\r\n+    }\r\n+\r\n+    public void testMappedSuperClassSameKeys() {\r\n+        createSite();\r\n+        createStore();\r\n+    }\r\n+\r\n+    public void testMappedSuperClassIdClass() {\r\n+        createSite1();\r\n+        createStore1();\r\n+    }\r\n+\r\n+    private void createSite() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        boolean persistSuccess = true;\r\n+        try{\r\n+            startTx(em);\r\n+    \r\n+            Site s = new Site();\r\n+            s.setPartyId(pkey);\r\n+            s.setSiteName(\"San Jose\");\r\n+            s.setSiteDescription(\"San Jose site\");\r\n+            s.setStatus(\"2\");\r\n+            s.setArchiveStatus(\"2\");\r\n+            s.setCreateDate(new Date());\r\n+    \r\n+            em.persist(s);\r\n+    \r\n+            endTx(em);\r\n+        }catch(Exception e) {\r\n+            persistSuccess = false;\r\n+        }finally{\r\n+            assertTrue(persistSuccess);\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void createStore() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        boolean persistSuccess = true;\r\n+        try{\r\n+            startTx(em);\r\n+    \r\n+            Site site = em.find(Site.class, pkey);\r\n+    \r\n+            Store store = new Store();\r\n+            store.setPartyId(pkey);\r\n+            store.setStoreDescription(\"storeDescription\");\r\n+            store.setStoreName(\"storeName\");\r\n+            store.setStatus(\"1\");\r\n+            store.setArchiveStatus(\"1\");\r\n+            store.setCreateDate(new Date());\r\n+            store.setSiteId(site.getPartyId());\r\n+            store.setSite(site);\r\n+    \r\n+            List<Store> stores = new ArrayList<Store>();\r\n+            stores.add(store);\r\n+            site.setStores(stores);\r\n+    \r\n+            em.persist(store);\r\n+            endTx(em);\r\n+        }catch(Exception e) {\r\n+            persistSuccess = false;\r\n+        }finally {\r\n+            assertTrue(persistSuccess);\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void createSite1() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        boolean persistSuccess = true;\r\n+        try{\r\n+            startTx(em);\r\n+    \r\n+            Site1 s = new Site1();\r\n+            s.setId(ikey);\r\n+            s.setPartyName(pstr);\r\n+            s.setSiteName(\"San Jose\");\r\n+            s.setSiteDescription(\"San Jose site\");\r\n+            s.setStatus(\"2\");\r\n+            s.setArchiveStatus(\"2\");\r\n+            s.setCreateDate(new Date());\r\n+    \r\n+            em.persist(s);\r\n+    \r\n+            endTx(em);\r\n+        }catch(Exception e) {\r\n+            persistSuccess = false;\r\n+        }finally {\r\n+            assertTrue(persistSuccess);\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    private void createStore1() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager) currentEntityManager();\r\n+        boolean persistSuccess = true;\r\n+        try{\r\n+            startTx(em);\r\n+    \r\n+            Site1 site = em.find(Site1.class, pid);\r\n+    \r\n+            Store1 store = new Store1();\r\n+            store.setId(ikey);\r\n+            store.setPartyName(pstr);\r\n+            store.setStoreDescription(\"storeDescription\");\r\n+            store.setStoreName(\"storeName\");\r\n+            store.setStatus(\"1\");\r\n+            store.setArchiveStatus(\"1\");\r\n+            store.setCreateDate(new Date());\r\n+            store.setSite(site);\r\n+    \r\n+            List<Store1> stores = new ArrayList<Store1>();\r\n+            stores.add(store);\r\n+            site.setStores(stores);\r\n+    \r\n+            em.persist(store);\r\n+            endTx(em);\r\n+    }catch(Exception e) {\r\n+        persistSuccess = false;\r\n+    }finally {\r\n+        assertTrue(persistSuccess);\r\n+    }\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"a225f42096c70e8456910b8aab7e85ba4b279c12","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.Id;\r\n+\r\n+@javax.persistence.MappedSuperclass\r\n+public class Party {\r\n+\r\n+    @Id\r\n+    protected Long PartyId;\r\n+\r\n+    protected String Status;\r\n+    protected String ArchiveStatus;\r\n+    protected Date CreateDate;\r\n+\r\n+\r\n+    public Long getPartyId() {\r\n+        return this.PartyId;\r\n+    }\r\n+\r\n+    public void setPartyId(Long id){\r\n+        this.PartyId = id;\r\n+    }\r\n+\r\n+    public void setArchiveStatus(String s){\r\n+        this.ArchiveStatus = s;\r\n+\r\n+    }\r\n+\r\n+    public void setStatus(String s) {\r\n+        this.Status = s;\r\n+    }\r\n+\r\n+\r\n+    public String getStatus() {\r\n+        return this.Status;\r\n+    }\r\n+\r\n+\r\n+    public String getArchiveStatus() {\r\n+        return this.ArchiveStatus;\r\n+    }\r\n+\r\n+    public void setCreateDate(Date d) {\r\n+        this.CreateDate = d;\r\n+    }\r\n+\r\n+\r\n+    public Date getCreateDate() {\r\n+        return this.CreateDate;\r\n+    }\r\n+}\r"},{"sha":"18d176e5aa96b3fc673cb7fa00bb2468351ff3ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party1.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party1.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Party1.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+@javax.persistence.MappedSuperclass\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@IdClass(PartyId.class)\r\n+public class Party1 {\r\n+\r\n+    @Id\r\n+    protected int id;\r\n+\r\n+    @Id\r\n+    protected String partyName;\r\n+\r\n+    protected String Status;\r\n+    protected String ArchiveStatus;\r\n+    protected Date CreateDate;\r\n+\r\n+    public Party1(){}\r\n+\r\n+    public String getPartyName() {\r\n+        return this.partyName;\r\n+    }\r\n+\r\n+    public void setPartyName(String name) {\r\n+        this.partyName = name;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(int id){\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public void setArchiveStatus(String s){\r\n+        this.ArchiveStatus = s;\r\n+    }\r\n+\r\n+    public void setStatus(String s) {\r\n+        this.Status = s;\r\n+    }\r\n+\r\n+    public String getStatus() {\r\n+        return this.Status;\r\n+    }\r\n+\r\n+\r\n+    public String getArchiveStatus() {\r\n+        return this.ArchiveStatus;\r\n+    }\r\n+\r\n+    public void setCreateDate(Date d) {\r\n+        this.CreateDate = d;\r\n+    }\r\n+\r\n+    public Date getCreateDate() {\r\n+        return this.CreateDate;\r\n+    }\r\n+}\r"},{"sha":"c34405ca1e95afc4ec36ac042913259d1cdf1a13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PartyId.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PartyId.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PartyId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/PartyId.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public class PartyId implements Serializable{\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    private String partyName;\r\n+    private int id;\r\n+\r\n+    public PartyId() {}\r\n+\r\n+    public  PartyId(String partyName, int id) {\r\n+        this.partyName = partyName;\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getPartyName() {\r\n+        return this.partyName;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public boolean equals(Object o) {\r\n+        return (o instanceof PartyId) &&\r\n+            partyName.equals(((PartyId)o).getPartyName()) &&\r\n+            id == (((PartyId)o).getId());\r\n+    }\r\n+\r\n+    public int hashCode() {\r\n+        return partyName.hashCode() + id;\r\n+    }\r\n+}\r"},{"sha":"544010b031635c4258d62fee769d2d8bd20a9223","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.CascadeType;\r\n+\r\n+@Entity\r\n+@Table(name = \"Site\")\r\n+public class Site  extends Party implements java.io.Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+\r\n+    private String SiteName;\r\n+    private String SiteDescription;\r\n+\r\n+    @OneToMany(mappedBy=\"site\",  cascade=CascadeType.ALL, fetch=FetchType.LAZY, \r\n+            targetEntity=Store.class)\r\n+     private List<Store> stores;\r\n+\r\n+\r\n+    public List<Store> getStores() {\r\n+        return stores;\r\n+    }\r\n+\r\n+    public void setStores(List<Store> storeList){\r\n+        this.stores = storeList;\r\n+    }\r\n+    public void setSiteName(String s) {\r\n+        this.SiteName = s;\r\n+    }\r\n+\r\n+    public String getSiteName(){\r\n+        return this.SiteName;\r\n+    }\r\n+\r\n+    public void setSiteDescription(String s) {\r\n+        this.SiteDescription = s;\r\n+    }\r\n+\r\n+    public String getSiteDescription() {\r\n+        return this.SiteDescription;\r\n+    }\r\n+}\r"},{"sha":"4589071b93861f2be9f11f16e761226f34871ebe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site1.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site1.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Site1.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.CascadeType;\r\n+\r\n+@Entity\r\n+@Table(name = \"Site1\")\r\n+public class Site1  extends Party1 implements java.io.Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+\r\n+    private String SiteName;\r\n+    private String SiteDescription;\r\n+\r\n+    @OneToMany(mappedBy=\"site\",  cascade=CascadeType.ALL, fetch=FetchType.LAZY, \r\n+            targetEntity=Store1.class)\r\n+    private List<Store1> stores;\r\n+\r\n+\r\n+    public List<Store1> getStores() {\r\n+        return stores;\r\n+    }\r\n+\r\n+    public void setStores(List<Store1> storeList){\r\n+        this.stores = storeList;\r\n+    }\r\n+\r\n+    public void setSiteName(String s) {\r\n+        this.SiteName = s;\r\n+    }\r\n+\r\n+    public String getSiteName(){\r\n+        return this.SiteName;\r\n+    }\r\n+\r\n+    public void setSiteDescription(String s) {\r\n+        this.SiteDescription = s;\r\n+    }\r\n+\r\n+    public String getSiteDescription() {\r\n+        return this.SiteDescription;\r\n+    }\r\n+}\r"},{"sha":"b47787ec091b67fabf4134f2af33275386078ca2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"Store\")\r\n+public class Store extends Party implements java.io.Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    private String StoreName;\r\n+    private String StoreDescription;\r\n+\r\n+    @ManyToOne( fetch = FetchType.LAZY,  cascade = CascadeType.ALL, \r\n+            targetEntity=Site.class)\r\n+    @JoinColumn(name = \"Store.SiteId\",\r\n+            referencedColumnName=\"site.PartyId\", nullable = false, \r\n+            insertable = true, updatable = true)\r\n+    private Site site;\r\n+\r\n+    private Long SiteId;\r\n+\r\n+    public Site getSite() {\r\n+        return site;\r\n+    }\r\n+\r\n+    public void setSite(Site s) {\r\n+        this.site = s;\r\n+\r\n+    }\r\n+\r\n+    public void setStoreName(String s) {\r\n+        this.StoreName = s;\r\n+    }\r\n+\r\n+    public String getStoreName() {\r\n+        return this.StoreName;\r\n+    }\r\n+\r\n+    public void setStoreDescription(String s){\r\n+        this.StoreDescription = s;\r\n+    }\r\n+\r\n+    public String getStoreDescription(){\r\n+        return this.StoreDescription;\r\n+    } \r\n+\r\n+\r\n+    public void setSiteId(Long pid) {\r\n+        this.SiteId = pid;\r\n+    }\r\n+\r\n+    public Long getSiteId() {\r\n+        return this.SiteId;\r\n+    }\r\n+\r\n+}\r"},{"sha":"f23677728d77dc177bb0b6ac5edd1c64e1b1f546","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store1.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store1.java","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/Store1.java?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"Store1\")\r\n+public class Store1 extends Party1 implements java.io.Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    private String StoreName;\r\n+    private String StoreDescription;\r\n+\r\n+    @ManyToOne( fetch = FetchType.LAZY,  cascade = CascadeType.ALL, \r\n+            targetEntity=Site1.class)\r\n+    private Site1 site;\r\n+\r\n+    public Site1 getSite() {\r\n+        return site;\r\n+    }\r\n+\r\n+    public void setSite(Site1 s) {\r\n+        this.site = s;\r\n+\r\n+    }\r\n+\r\n+    public void setStoreName(String s) {\r\n+        this.StoreName = s;\r\n+    }\r\n+\r\n+    public String getStoreName() {\r\n+        return this.StoreName;\r\n+    }\r\n+\r\n+    public void setStoreDescription(String s){\r\n+        this.StoreDescription = s;\r\n+    }\r\n+\r\n+    public String getStoreDescription(){\r\n+        return this.StoreDescription;\r\n+    } \r\n+}\r"},{"sha":"4d3c897a628b01a8cd75d47114256a0e9a1ae439","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9946b6c19bb6445d8b975d2bb734329777cf7ec5/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml?ref=9946b6c19bb6445d8b975d2bb734329777cf7ec5","patch":"@@ -44,5 +44,11 @@\n \t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdClass</class>\r\n \t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuper</class>\r\n \t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Party</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Party1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Store1</class>\r\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Site1</class>\r\n \t</persistence-unit>\r\n </persistence>\r"}]}

