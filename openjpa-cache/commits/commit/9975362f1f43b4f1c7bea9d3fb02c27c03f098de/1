{"sha":"9975362f1f43b4f1c7bea9d3fb02c27c03f098de","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5NzUzNjJmMWY0M2I0ZjFjN2JlYTlkM2ZiMDJjMjdjMDNmMDk4ZGU=","commit":{"author":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-30T02:33:35Z"},"committer":{"name":"David J. Wisneski","email":"wisneskid@apache.org","date":"2007-06-30T02:33:35Z"},"message":"OPENJPA-271, add DB2 JDBC driver 2 support\n- datePrecision set to MICRO, (Timesptamp in micro-second in DB2)\n- save version strategy in Column (needed for specialized TimestampVersionStrategy)\n- set storeCharsAsNumbers to false (DB2 default - store chars as chars)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@552078 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b98a690d33ddaa1f1daf1af58af64cf144c1537b","url":"https://api.github.com/repos/apache/openjpa/git/trees/b98a690d33ddaa1f1daf1af58af64cf144c1537b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9975362f1f43b4f1c7bea9d3fb02c27c03f098de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9975362f1f43b4f1c7bea9d3fb02c27c03f098de","html_url":"https://github.com/apache/openjpa/commit/9975362f1f43b4f1c7bea9d3fb02c27c03f098de","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/comments","author":null,"committer":null,"parents":[{"sha":"5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","url":"https://api.github.com/repos/apache/openjpa/commits/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26","html_url":"https://github.com/apache/openjpa/commit/5c4a8c7e73e3997f69969f0ae0315dee57bc0a26"}],"stats":{"total":242,"additions":164,"deletions":78},"files":[{"sha":"261e9c60bb609d3354ade1a6a0c0dd391151e590","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/ColumnVersionStrategy.java?ref=9975362f1f43b4f1c7bea9d3fb02c27c03f098de","patch":"@@ -101,6 +101,7 @@ public void map(boolean adapt) {\n         tmplate.setName(\"versn\");\n \n         Column[] cols = info.getColumns(vers, new Column[]{ tmplate }, adapt);\n+        cols[0].setVersionStrategy(this);\n         vers.setColumns(cols);\n         vers.setColumnIO(info.getColumnIO());\n "},{"sha":"77f0133bac87892821e2fe6dc4e40602a2f0a06f","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","raw_url":"https://github.com/apache/openjpa/raw/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Column.java?ref=9975362f1f43b4f1c7bea9d3fb02c27c03f098de","patch":"@@ -28,6 +28,7 @@\n \n import org.apache.commons.lang.StringUtils;\n import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\n+import org.apache.openjpa.jdbc.meta.VersionStrategy;\n import org.apache.openjpa.meta.JavaTypes;\n import serp.util.Numbers;\n \n@@ -70,7 +71,8 @@\n \n     private int _index = 0;\n     private boolean _pk = false;\n-\n+    private VersionStrategy _versionStrategy = null;\n+    \n     /**\n      * Default constructor.\n      */\n@@ -715,4 +717,12 @@ public void copy(Column from) {\n     public boolean isXML() {\n         return _typeName != null && _typeName.startsWith(\"XML\");\n     }\n+\n+    public VersionStrategy getVersionStrategy() {\n+        return _versionStrategy;\n+    }\n+\n+    public void setVersionStrategy(VersionStrategy strategy) {\n+        this._versionStrategy = strategy;\n+    }\n }"},{"sha":"06a5ffc92c5cc01cf812aa80d1e4f3d0df88d6ec","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","status":"modified","additions":150,"deletions":77,"changes":227,"blob_url":"https://github.com/apache/openjpa/blob/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DB2Dictionary.java?ref=9975362f1f43b4f1c7bea9d3fb02c27c03f098de","patch":"@@ -26,22 +26,26 @@\n import java.util.StringTokenizer;\r\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\r\n import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n import org.apache.openjpa.util.OpenJPAException;\r\n+import org.apache.openjpa.util.UnsupportedException;\r\n \r\n /**\r\n  * Dictionary for IBM DB2 database.\r\n  */\r\n public class DB2Dictionary\r\n     extends AbstractDB2Dictionary {\r\n+    private static final Localizer _loc = Localizer.forPackage\r\n+        (DB2Dictionary.class);\r\n \r\n     public String optimizeClause = \"optimize for\";\r\n     public String rowClause = \"row\";\r\n-    private int db2ServerType = 0;\r\n-    private static final int db2ISeriesV5R3OrEarlier = 1;\r\n-    private static final int db2UDBV81OrEarlier = 2;\r\n-    private static final int db2ZOSV8xOrLater = 3;\r\n-    private static final int db2UDBV82OrLater = 4;\r\n-    private static final int db2ISeriesV5R4OrLater = 5;\r\n+    protected int db2ServerType = 0;\r\n+    protected static final int db2ISeriesV5R3OrEarlier = 1;\r\n+    protected static final int db2UDBV81OrEarlier = 2;\r\n+    protected static final int db2ZOSV8xOrLater = 3;\r\n+    protected static final int db2UDBV82OrLater = 4;\r\n+    protected static final int db2ISeriesV5R4OrLater = 5;\r\n \tprivate static final String forUpdateOfClause = \"FOR UPDATE OF\";\r\n     private static final String withRSClause = \"WITH RS\";\r\n     private static final String withRRClause = \"WITH RR\";\r\n@@ -50,6 +54,10 @@\n     private static final String useKeepExclusiveLockClause\r\n         = \"USE AND KEEP EXCLUSIVE LOCKS\";\r\n     private static final String forReadOnlyClause = \"FOR READ ONLY\";\r\n+    protected String databaseProductName = null;\r\n+    protected String databaseProductVersion = null;\r\n+    protected int maj = 0;\r\n+    protected int min = 0;\r\n \r\n     public DB2Dictionary() {\r\n         platform = \"DB2\";\r\n@@ -70,6 +78,8 @@ public DB2Dictionary() {\n         varbinaryTypeName = \"BLOB(1M)\";\r\n         clobTypeName = \"CLOB(1M)\";\r\n         longVarcharTypeName = \"LONG VARCHAR\";\r\n+        datePrecision = MICRO;\r\n+        storeCharsAsNumbers = false;\r\n \r\n         fixedSizeTypeNameSet.addAll(Arrays.asList(new String[]{\r\n             \"LONG VARCHAR FOR BIT DATA\", \"LONG VARCHAR\", \"LONG VARGRAPHIC\",\r\n@@ -186,48 +196,78 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n     \tsuper.connectedConfiguration(conn);\r\n \r\n     \tDatabaseMetaData metaData = conn.getMetaData();\r\n-    \tif (isJDBC3(metaData)) {\r\n-\t\t\tint maj = metaData.getDatabaseMajorVersion();\r\n-\t    \tint min = metaData.getDatabaseMinorVersion();\r\n-\r\n-\t    \t// Determine the type of DB2 database\r\n-\t    \tif (isDB2ISeriesV5R3OrEarlier(metaData))\r\n-\t    \t    db2ServerType = db2ISeriesV5R3OrEarlier;\r\n-\t    \telse if (isDB2UDBV81OrEarlier(metaData,maj,min))\r\n-\t    \t    db2ServerType = db2UDBV81OrEarlier;\r\n-\t    \telse if (isDB2ZOSV8xOrLater(metaData,maj))\r\n-\t    \t    db2ServerType = db2ZOSV8xOrLater;\r\n-\t    \telse if (isDB2UDBV82OrLater(metaData,maj,min))\r\n-\t    \t    db2ServerType = db2UDBV82OrLater;\r\n-\t    \telse if (isDB2ISeriesV5R4OrLater(metaData))\r\n-\t    \t    db2ServerType = db2ISeriesV5R4OrLater;\r\n-\r\n-\t    \tif (maj >= 9 || (maj == 8 && min >= 2)) {\r\n-\t    \t\tsupportsLockingWithMultipleTables = true;\r\n-\t    \t\tsupportsLockingWithInnerJoin = true;\r\n-\t    \t\tsupportsLockingWithOuterJoin = true;\r\n-\t    \t\tforUpdateClause = \"WITH RR USE AND KEEP UPDATE LOCKS\";\r\n-\t    \t\tif (maj >=9)\r\n-\t    \t\t    supportsXMLColumn = true;\r\n-\t    \t}\r\n-\r\n-            if (metaData.getDatabaseProductVersion().indexOf(\"DSN\") != -1) {\r\n-                // DB2 Z/OS\r\n-                characterColumnSize = 255;\r\n-                lastGeneratedKeyQuery = \"SELECT IDENTITY_VAL_LOCAL() FROM \"\r\n-                    + \"SYSIBM.SYSDUMMY1\";\r\n-                nextSequenceQuery = \"SELECT NEXTVAL FOR {0} FROM \"\r\n-                    + \"SYSIBM.SYSDUMMY1\";\r\n-                sequenceSQL = \"SELECT SCHEMA AS SEQUENCE_SCHEMA, \"\r\n-                    + \"NAME AS SEQUENCE_NAME FROM SYSIBM.SYSSEQUENCES\";\r\n-                sequenceSchemaSQL = \"SCHEMA = ?\";\r\n-                sequenceNameSQL = \"NAME = ?\";\r\n-                if (maj == 8) {\r\n-                    // DB2 Z/OS Version 8: no bigint support, hence map Java\r\n-                    // long to decimal\r\n-                    bigintTypeName = \"DECIMAL(31,0)\";\r\n-                }\r\n-            }\r\n+        databaseProductName = metaData.getDatabaseProductName();\r\n+        databaseProductVersion = metaData.getDatabaseProductVersion();\r\n+        \r\n+        // Determine the type of DB2 database\r\n+        // First check for AS/400\r\n+        getProductVersionMajorMinorForISeries();\r\n+\r\n+        if (maj > 0) {\r\n+            if (isDB2ISeriesV5R3OrEarlier())\r\n+                db2ServerType = db2ISeriesV5R3OrEarlier;\r\n+            else if (isDB2ISeriesV5R4OrLater())\r\n+                db2ServerType = db2ISeriesV5R4OrLater;\r\n+        }\r\n+        \r\n+    \tif (db2ServerType == 0) {\r\n+    \t    if (isJDBC3(metaData)) {\r\n+    \t        maj = metaData.getDatabaseMajorVersion();\r\n+    \t        min = metaData.getDatabaseMinorVersion();\r\n+    \t    }\r\n+    \t    else\r\n+    \t        getProductVersionMajorMinor();\r\n+\r\n+    \t    // Determine the type of DB2 database for ZOS & UDB\r\n+    \t    if (isDB2UDBV81OrEarlier())\r\n+    \t        db2ServerType = db2UDBV81OrEarlier;\r\n+    \t    else if (isDB2ZOSV8xOrLater())\r\n+    \t        db2ServerType = db2ZOSV8xOrLater;\r\n+    \t    else if (isDB2UDBV82OrLater())\r\n+    \t        db2ServerType = db2UDBV82OrLater;\r\n+        }\r\n+\r\n+        // verify that databae product is supported\r\n+        if (db2ServerType == 0 || maj == 0)\r\n+            throw new UnsupportedException(_loc.get(\"db-not-supported\",\r\n+                new Object[] {databaseProductName, databaseProductVersion }));                    \r\n+\r\n+    \tif (maj >= 9 || (maj == 8 && min >= 2)) {\r\n+    \t    supportsLockingWithMultipleTables = true;\r\n+    \t    supportsLockingWithInnerJoin = true;\r\n+    \t    supportsLockingWithOuterJoin = true;\r\n+    \t    forUpdateClause = \"WITH RR USE AND KEEP UPDATE LOCKS\";\r\n+    \t    if (maj >=9)\r\n+    \t        supportsXMLColumn = true;\r\n+    \t}\r\n+\r\n+        // platform specific settings\r\n+        switch (db2ServerType) {\r\n+        case  db2ZOSV8xOrLater:\r\n+            // DB2 Z/OS \r\n+            characterColumnSize = 255;\r\n+            lastGeneratedKeyQuery = \"SELECT IDENTITY_VAL_LOCAL() FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n+            nextSequenceQuery = \"SELECT NEXTVAL FOR {0} FROM \"\r\n+                + \"SYSIBM.SYSDUMMY1\";\r\n+            sequenceSQL = \"SELECT SCHEMA AS SEQUENCE_SCHEMA, \"\r\n+                + \"NAME AS SEQUENCE_NAME FROM SYSIBM.SYSSEQUENCES\";\r\n+            sequenceSchemaSQL = \"SCHEMA = ?\";\r\n+            sequenceNameSQL = \"NAME = ?\";\r\n+            if (maj == 8)\r\n+                // DB2 Z/OS Version 8: no bigint support, hence map Java\r\n+                // long to decimal\r\n+                bigintTypeName = \"DECIMAL(31,0)\";\r\n+            break;\r\n+        case db2ISeriesV5R3OrEarlier:\r\n+        case db2ISeriesV5R4OrLater:\r\n+            validationSQL = \"SELECT DISTINCT(CURRENT TIMESTAMP) FROM \"\r\n+                + \"QSYS2.SYSTABLES\";\r\n+            sequenceSQL = \"SELECT SEQUENCE_SCHEMA, \"\r\n+                + \"SEQUENCE_NAME FROM QSYS2.SYSSEQUENCES\";\r\n+            sequenceSchemaSQL = \"SEQUENCE_SCHEMA = ?\";\r\n+            sequenceNameSQL = \"SEQUENCE_NAME = ?\";\r\n+            break;\r\n         }\r\n     }\r\n \r\n@@ -291,68 +331,101 @@ protected String getForUpdateClause(JDBCFetchConfiguration fetch,\n         return forUpdateString.toString();\r\n     }\r\n \r\n-    public boolean isDB2UDBV82OrLater(DatabaseMetaData metadata, int maj,\r\n-        int min) throws SQLException {\r\n+    public boolean isDB2UDBV82OrLater() throws SQLException {\r\n         boolean match = false;\r\n-        if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1\r\n+        if ((databaseProductVersion.indexOf(\"SQL\") != -1\r\n+            || databaseProductName.indexOf(\"DB2/\") != -1)\r\n             && ((maj == 8 && min >= 2) ||(maj >= 8)))\r\n             match = true;\r\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ZOSV8xOrLater(DatabaseMetaData metadata, int maj)\r\n+    public boolean isDB2ZOSV8xOrLater()\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"DSN\") != -1\r\n+       if ((databaseProductVersion.indexOf(\"DSN\") != -1\r\n+           || databaseProductName.indexOf(\"DB2/\") == -1)\r\n            && maj >= 8)\r\n            match = true;\r\n         return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R3OrEarlier(DatabaseMetaData metadata)\r\n+    public boolean isDB2ISeriesV5R3OrEarlier()\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r\n-           && generateVersionNumber(metadata.getDatabaseProductVersion())\r\n-           <= 530)\r\n+       if (databaseProductName.indexOf(\"AS\") != -1\r\n+           && maj == 5 && min <=3)\r\n            match = true;\r\n        return match;\r\n     }\r\n \r\n-    public boolean isDB2ISeriesV5R4OrLater(DatabaseMetaData metadata)\r\n+    public boolean isDB2ISeriesV5R4OrLater()\r\n        throws SQLException {\r\n        boolean match = false;\r\n-       if (metadata.getDatabaseProductVersion().indexOf(\"AS\") != -1\r\n-           && generateVersionNumber(metadata.getDatabaseProductVersion())\r\n-           >= 540)\r\n+       if (databaseProductName.indexOf(\"AS\") != -1\r\n+           && maj >= 5 && min >=4)\r\n            match = true;\r\n       return match;\r\n     }\r\n \r\n-    public boolean isDB2UDBV81OrEarlier(DatabaseMetaData metadata, int maj,\r\n-        int min) throws SQLException {\r\n+    public boolean isDB2UDBV81OrEarlier() throws SQLException {\r\n         boolean match = false;\r\n-        if (metadata.getDatabaseProductVersion().indexOf(\"SQL\") != -1 &&\r\n+        if ((databaseProductVersion.indexOf(\"SQL\") != -1 \r\n+           || databaseProductName.indexOf(\"DB2/\") != -1) &&\r\n            ((maj == 8 && min <= 1)|| maj < 8))\r\n             match = true;\r\n         return match;\r\n     }\r\n \r\n-    /** Get the version number for the ISeries\r\n+    /** Get the version Major/Minor for the ISeries\r\n      */\r\n-    protected  int generateVersionNumber(String versionString) {\r\n-        String s = versionString.substring(versionString.indexOf('V'));\r\n-        s = s.toUpperCase();\r\n-        int i = -1;\r\n-        StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\", false);\r\n-        if (stringtokenizer.countTokens() == 3)\r\n-        {\r\n-            String s1 = stringtokenizer.nextToken();\r\n-            s1 = s1 + stringtokenizer.nextToken();\r\n-            s1 = s1 + stringtokenizer.nextToken();\r\n-            i = Integer.parseInt(s1);\r\n+    private void getProductVersionMajorMinorForISeries() {\r\n+        // ISeries    DBProdName                 DB2 UDB for AS/400\r\n+        //   (Toolbox)DBProdVersion              05.04.0000 V5R4m0\r\n+        // ISeries                               DB2 UDB for AS/400\r\n+        //   (Native)                            V5R4M0\r\n+        if (databaseProductName.indexOf(\"AS\") != -1) {\r\n+            String s = databaseProductVersion.substring(databaseProductVersion\r\n+                .indexOf('V'));\r\n+            s = s.toUpperCase();\r\n+\r\n+            StringTokenizer stringtokenizer = new StringTokenizer(s, \"VRM\"\r\n+                , false);\r\n+            if (stringtokenizer.countTokens() == 3) {\r\n+                String s1 = stringtokenizer.nextToken();\r\n+                maj = Integer.parseInt(s1);\r\n+                String s2 =  stringtokenizer.nextToken();\r\n+                min = Integer.parseInt(s2);\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    private void getProductVersionMajorMinor() {\r\n+        // Incase JDBC driver version is lower than 3\r\n+        // use following info to determine Major and Minor \r\n+        //                        CLI    vs      JCC\r\n+        // ZDBV8 DBProdName       DB2            DB2\r\n+        //       DBProdVersion    08.01.0005     DSN08015\r\n+        // ZDBV9                  DB2            DB2\r\n+        //                        09.01.0005     DSN09015\r\n+        // WinV9                  DB2/NT         DB2/NT\r\n+        //                        09.01.0000     SQL09010\r\n+        // SolarisV9                             DB2/SUN64\r\n+        //                                       SQL0901\r\n+        // Linux                  DB2/LINUX      DB2/LINUX\r\n+        //                        09.01.0000     SQL0901\r\n+        if (databaseProductVersion.indexOf(\"09\") != -1) {\r\n+            maj = 9;\r\n+            if (databaseProductVersion.indexOf(\"01\") != -1) {\r\n+                min = 1;\r\n+            }\r\n+        } else if (databaseProductVersion.indexOf(\"08\") != -1) {\r\n+            maj = 8;\r\n+            min = 2;\r\n+            if (databaseProductVersion.indexOf(\"01\") != -1) {\r\n+                min = 1;\r\n+            }\r\n         }\r\n-        return i;\r\n     }\r\n \r\n     public SQLBuffer toSelect(Select sel, boolean forUpdate,\r"},{"sha":"135c9afbf420bde13ecf1c96b6f139ee1e3b131c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9975362f1f43b4f1c7bea9d3fb02c27c03f098de/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=9975362f1f43b4f1c7bea9d3fb02c27c03f098de","patch":"@@ -889,6 +889,8 @@ public void setDate(PreparedStatement stmnt, int idx, Date val, Column col)\n             setDate(stmnt, idx, new java.sql.Date(val.getTime()), null, col);\n         else if (col != null && col.getType() == Types.TIME)\n             setTime(stmnt, idx, new Time(val.getTime()), null, col);\n+        else if (val instanceof Timestamp)\n+            setTimestamp(stmnt, idx,(Timestamp)val, null, col);   \n         else\n             setTimestamp(stmnt, idx, new Timestamp(val.getTime()), null, col);\n     }"}]}

