{"sha":"99844b6b1f3d13c07bdb6223d2edc2f47320aad2","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5ODQ0YjZiMWYzZDEzYzA3YmRiNjIyM2QyZWRjMmY0NzMyMGFhZDI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T16:43:19Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-10-01T16:43:19Z"},"message":"OPENJPA-1332: Make some Value \"private\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@820712 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a1ba554f334c3c09531659b93a2d2eb2392a6d7c","url":"https://api.github.com/repos/apache/openjpa/git/trees/a1ba554f334c3c09531659b93a2d2eb2392a6d7c"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","html_url":"https://github.com/apache/openjpa/commit/99844b6b1f3d13c07bdb6223d2edc2f47320aad2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/comments","author":null,"committer":null,"parents":[{"sha":"6119ff76b9b1bed7baa42f554fc73da4ba54176b","url":"https://api.github.com/repos/apache/openjpa/commits/6119ff76b9b1bed7baa42f554fc73da4ba54176b","html_url":"https://github.com/apache/openjpa/commit/6119ff76b9b1bed7baa42f554fc73da4ba54176b"}],"stats":{"total":52,"additions":42,"deletions":10},"files":[{"sha":"f0fbca84d6a5372f348e62a73ba88b0a16d70efa","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=99844b6b1f3d13c07bdb6223d2edc2f47320aad2","patch":"@@ -352,7 +352,7 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         \n         connectionPassword = addString(\"ConnectionPassword\");\n         connectionPassword.addEquivalentKey(\"javax.persistence.jdbc.password\");\n-        connectionPassword.setVisible(false);\n+        connectionPassword.hide();\n         \n         encryptionProvider = addPlugin(\"EncryptionProvider\",true);\n \n@@ -367,7 +367,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         connectionFactoryProperties = addString(\"ConnectionFactoryProperties\");\n         connection2UserName = addString(\"Connection2UserName\");\n         connection2Password = addString(\"Connection2Password\");\n-        connection2Password.setVisible(false);\n+        connection2Password.hide();\n+        \n         connection2URL = addString(\"Connection2URL\");\n         connection2DriverName = addString(\"Connection2DriverName\");\n         connection2Properties = addString(\"Connection2Properties\");\n@@ -577,7 +578,8 @@ public OpenJPAConfigurationImpl(boolean derivations, boolean loadGlobals) {\n         validator = addObject(\"Validator\");\n         validator.setInstantiatingGetter(\"getValidatorInstance\");\n         validator.setDynamic(true);\n-\n+        validator.makePrivate();\n+        \n         lifecycleEventManager = addPlugin(\"LifecycleEventManager\", true);\n         aliases = new String[] {\n             \"default\", LifecycleEventManager.class.getName(),"},{"sha":"0342c654bf552c4c3abae0d5092e1bacaabbfb0e","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/ConfigurationImpl.java?ref=99844b6b1f3d13c07bdb6223d2edc2f47320aad2","patch":"@@ -688,13 +688,19 @@ else if (map instanceof Properties)\n     \n     /**\n      * Gets all known property keys.\n+     * The keys are harvested from the property names (including the equivalent names) of the registered values.\n+     * A key may be prefixed if the corresponding property name was without a prefix.\n+     * @see #fixPrefix(String)\n+     * The Values that are {@linkplain Value#makePrivate() marked private} are filtered out. \n      */\n     public Set<String> getPropertyKeys() {\n         if (_supportedKeys != null) \n             return _supportedKeys;\n         \n         _supportedKeys = new TreeSet<String>();\n         for (Value val : _vals) {\n+            if (val.isPrivate())\n+                continue;\n             List<String> keys = val.getPropertyKeys();\n             for (String key : keys) {\n                 _supportedKeys.add(fixPrefix(key));\n@@ -740,8 +746,8 @@ private void setValue(Map map, Value val) {\n                 key = \"openjpa.\" + val.getProperty();\n             }\n         }\n-        Object external = val.isVisible() ? val instanceof ObjectValue \n-                ? val.getString() : val.get() : Value.INVISIBLE;\n+        Object external = val.isHidden() ? Value.INVISIBLE : \n+            val instanceof ObjectValue ? val.getString() : val.get();\n         map.put(key, external);\n     }\n "},{"sha":"ebba455131c8947e0278d92182c91ce63e367f8a","filename":"openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","status":"modified","additions":29,"deletions":5,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","raw_url":"https://github.com/apache/openjpa/raw/99844b6b1f3d13c07bdb6223d2edc2f47320aad2/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-lib/src/main/java/org/apache/openjpa/lib/conf/Value.java?ref=99844b6b1f3d13c07bdb6223d2edc2f47320aad2","patch":"@@ -53,7 +53,8 @@\n     private boolean isDynamic = false;\n     private String originalValue = null;\n     private Set<String> otherNames = null;\n-    private boolean visible = true;\n+    private boolean _hidden  = false;\n+    private boolean _private = false;\n     \n     /**\n      * Default constructor.\n@@ -553,12 +554,35 @@ public Object clone() {\n         }\n     }\n \n-    public boolean isVisible() {\n-        return visible;\n+    /**\n+     * Affirms if the value for this Value is visible.\n+     * Certain sensitive value such as password can be made invisible\n+     * so that it is not returned to the user code.\n+     */\n+    public boolean isHidden() {\n+        return _hidden;\n+    }\n+\n+    /**\n+     * Hides the value of this Value from being output to the caller.\n+     */\n+    public void hide() {\n+        _hidden = true;\n+    }\n+    \n+    /**\n+     * Affirms if this Value is used for internal purpose only and not exposed as a supported property.\n+     * @see Configuration#getPropertyKeys()\n+     */\n+    public boolean isPrivate() {\n+        return _private;\n     }\n \n-    public void setVisible(boolean visible) {\n-        this.visible = visible;\n+    /**\n+     * Marks this Value for internal purpose only.\n+     */\n+    public void makePrivate() {\n+        _private = true;\n     }\n     \n     /**"}]}

