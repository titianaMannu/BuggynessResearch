{"sha":"999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5OWNlMmU2NzBlZWYyZGVmMGEwYjg5ZjRiYjYyZGJlNzRiNmE0ZmE=","commit":{"author":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-03T00:01:47Z"},"committer":{"name":"Patrick Linskey","email":"pcl@apache.org","date":"2008-04-03T00:01:47Z"},"message":"OPENJPA-536. Committing on behalf of Amy Yang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@644115 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"002abdeeba9636a2d2ae8c0d19543e5a61b2d8c0","url":"https://api.github.com/repos/apache/openjpa/git/trees/002abdeeba9636a2d2ae8c0d19543e5a61b2d8c0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","html_url":"https://github.com/apache/openjpa/commit/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","comments_url":"https://api.github.com/repos/apache/openjpa/commits/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/comments","author":null,"committer":null,"parents":[{"sha":"79b23557d3e9ee16dbd11a52d82a64aec45c7039","url":"https://api.github.com/repos/apache/openjpa/commits/79b23557d3e9ee16dbd11a52d82a64aec45c7039","html_url":"https://github.com/apache/openjpa/commit/79b23557d3e9ee16dbd11a52d82a64aec45c7039"}],"stats":{"total":324,"additions":324,"deletions":0},"files":[{"sha":"8e9679f4c006a5aeb6987caa610ab384b3db53b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/InheritanceComparator.java?ref=999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","patch":"@@ -39,6 +39,10 @@ public void setBase(Class base) {\n         _base = base;\n     }\n \n+    public Class getBase() {\n+        return _base;\n+    }\n+\n     /**\n      * Subclasses can override this method to extract the class to compare\n      * on from the elements of the collection."},{"sha":"1a5aea3b5b8081b34f03d94fa4aae46df94b301a","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","raw_url":"https://github.com/apache/openjpa/raw/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataRepository.java?ref=999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","patch":"@@ -574,6 +574,7 @@ private void resolve(ClassMetaData meta) {\n      * if we're still in the process of resolving other metadatas.\n      */\n     private List resolveMeta(ClassMetaData meta) {\n+    \tsetBaseIfNecessary(meta);\n         if (meta.getPCSuperclass() == null) {\n             // set superclass\n             Class sup = meta.getDescribedType().getSuperclass();\n@@ -616,6 +617,27 @@ private List resolveMeta(ClassMetaData meta) {\n         // resolved\n         return processBuffer(meta, _resolving, MODE_META);\n     }\n+    \n+    private void setBaseIfNecessary(ClassMetaData meta) {\n+        if (_resolving == null)\n+            return;\n+\n+        InheritanceComparator comp =\n+            (InheritanceComparator) _resolving.comparator();\n+        if (meta.getPCSuperclass() == null) {\n+            Class sup = meta.getDescribedType().getSuperclass();\n+            Class pBase = null;\n+            while (sup != null && sup != Object.class) {\n+                pBase = sup;\n+                sup = sup.getSuperclass();\n+            }\n+            if (pBase != null && !pBase.equals(comp.getBase())) {\n+                // setBase() can be called because getMetaData() is\n+                // syncronized\n+                comp.setBase(pBase);\n+            }\n+        }\n+    }\n \n     /**\n      * Load mapping information for the given metadata."},{"sha":"32c093774314847ff8e9f03bdcc9d6e0ca7850eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","raw_url":"https://github.com/apache/openjpa/raw/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java?ref=999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class Artist\r\n+    extends Person {\r\n+\r\n+    /**\r\n+     * Default constructor required for enhancement.\r\n+     */\r\n+    public Artist() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * The public constructor constructs with a name.\r\n+     *\r\n+     * @param name the name of the artist.\r\n+     */\r\n+    public Artist(String name) {\r\n+        super(name);\r\n+    }\r\n+}\r"},{"sha":"e7e0450557d28302490eff1a5e9250346170c70f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","raw_url":"https://github.com/apache/openjpa/raw/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java?ref=999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Entity\r\n+public class Item implements Serializable {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private int id;\r\n+\r\n+    private String title;\r\n+\r\n+    @ManyToOne(cascade = CascadeType.PERSIST)\r\n+    private Artist artist;\r\n+\r\n+    /**\r\n+     * A no-arg constructor is required for enhancement.\r\n+     */\r\n+    protected Item() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * The public constructor constructs with a title.\r\n+     *\r\n+     * @param title the title of the item.\r\n+     */\r\n+    public Item(String title) {\r\n+        super();\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the unique identifier of this receiver. There is no corresponding\r\n+     * <code>setId()</code> method as the identifier value is generated by the\r\n+     * Persistence Provider Runtime.\r\n+     *\r\n+     * @return unique identifier of this instance.\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the title of this item.\r\n+     *\r\n+     * @return return the tile of the item.\r\n+     */\r\n+    public String getTitle() {\r\n+        return title;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the title of this receiver.\r\n+     *\r\n+     * @param title must not be null or empty.\r\n+     */\r\n+    public void setTitle(String title) {\r\n+        if (title == null || title.trim().length() == 0)\r\n+            throw new IllegalArgumentException(\r\n+                \"null or empty title not allowed\");\r\n+        this.title = title;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the artist who created this item. This is an example of\r\n+     * unidirectional single-valued relationship.\r\n+     *\r\n+     * @return the artist who created this item.\r\n+     */\r\n+    public Artist getArtist() {\r\n+        return artist;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the artist who created this Item.\r\n+     *\r\n+     * @param artist must not be null.\r\n+     */\r\n+    public void setArtist(Artist artist) {\r\n+        if (artist == null)\r\n+            throw new IllegalArgumentException(\"null Artist for \" + this);\r\n+\r\n+        this.artist = artist;\r\n+    }\r\n+}\r"},{"sha":"e85c46b6436ea6687267a9f406458dbb04618fc6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","raw_url":"https://github.com/apache/openjpa/raw/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java?ref=999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","patch":"@@ -0,0 +1,33 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class Painter extends Artist {\r\n+\r\n+    public Painter() {\r\n+        super();\r\n+    }\r\n+\r\n+    public Painter(String name) {\r\n+        super(name);\r\n+    }\r\n+}\r"},{"sha":"49e99f867f5eddfae329456fe3c4f4dad18b0dc9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","raw_url":"https://github.com/apache/openjpa/raw/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java?ref=999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Collection;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+public class Person implements Serializable {\r\n+\r\n+    @Id\r\n+    private String name;\r\n+\r\n+    @OneToMany\r\n+    private Collection<Painter> paitersForPortrait;\r\n+\r\n+    /**\r\n+     * default constructor required by enhancement.\r\n+     */\r\n+    protected Person() {\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * The public constructor constructs with a name.\r\n+     *\r\n+     * @param name the name of the person.\r\n+     */\r\n+\r\n+    public Person(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the name of this person. This is the unique identifier.\r\n+     *\r\n+     * @return return the name of this person.\r\n+     */\r\n+    public String getName() {\r\n+\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        if (name == null || name.trim().length() == 0)\r\n+            throw new IllegalArgumentException(\r\n+                \"null or empty name not allowed\");\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public Collection<Painter> getPainters() {\r\n+\r\n+        return paitersForPortrait;\r\n+    }\r\n+\r\n+    public void setPainters(Collection<Painter> p) {\r\n+        this.paitersForPortrait = p;\r\n+    }\r\n+}\r"},{"sha":"9439385848fd78f23e6da4ee2cc04083fd8d983c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java?ref=999ce2e670eef2def0a0b89f4bb62dbe74b6a4fa","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.meta;\r\n+\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestGetMetaData extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Item.class, Person.class, Artist.class, Painter.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testGetMetaData() {\r\n+        assertNotNull(JPAFacadeHelper.getMetaData(emf, Item.class));\r\n+        assertNotNull(JPAFacadeHelper.getMetaData(emf, Person.class));\r\n+    }\r\n+}\r"}]}

