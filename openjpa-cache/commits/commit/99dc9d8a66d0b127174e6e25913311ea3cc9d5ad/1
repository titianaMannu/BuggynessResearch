{"sha":"99dc9d8a66d0b127174e6e25913311ea3cc9d5ad","node_id":"MDY6Q29tbWl0MjA2MzY0Ojk5ZGM5ZDhhNjZkMGIxMjcxNzRlNmUyNTkxMzMxMWVhM2NjOWQ1YWQ=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-10-07T05:15:05Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2008-10-07T05:15:05Z"},"message":"OPENJPA-732 - Re-commit the same original committed changes (code and tests) after test cases corrections were made.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@702348 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"51697e7161b85749bcb3ad525caf98a02a68f9e2","url":"https://api.github.com/repos/apache/openjpa/git/trees/51697e7161b85749bcb3ad525caf98a02a68f9e2"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad","html_url":"https://github.com/apache/openjpa/commit/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad","comments_url":"https://api.github.com/repos/apache/openjpa/commits/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad/comments","author":null,"committer":null,"parents":[{"sha":"7b11877e36d29fb1f23aaa0734e56267cfa33b2f","url":"https://api.github.com/repos/apache/openjpa/commits/7b11877e36d29fb1f23aaa0734e56267cfa33b2f","html_url":"https://github.com/apache/openjpa/commit/7b11877e36d29fb1f23aaa0734e56267cfa33b2f"}],"stats":{"total":40,"additions":20,"deletions":20},"files":[{"sha":"27fa3f7b68e7a12d49806c4a5d1a6aa6a4c277c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=99dc9d8a66d0b127174e6e25913311ea3cc9d5ad","patch":"@@ -1522,7 +1522,7 @@ public void setSavepoint(String name) {\n                 _savepoints = new LinkedMap();\r\n             } else {\r\n                 if (_savepointCache == null)\r\n-                    save.save(Collections.EMPTY_LIST);\r\n+                    save.save(Collections.EMPTY_SET);\r\n                 else {\r\n                     save.save(_savepointCache);\r\n                     _savepointCache.clear();\r\n@@ -2190,7 +2190,7 @@ protected void endTransaction(int status) {\n         if (hasTransactionalObjects())\r\n             transStates = _transCache;\r\n         else\r\n-            transStates = Collections.EMPTY_LIST;\r\n+            transStates = Collections.EMPTY_SET;\r\n \r\n         // fire after rollback/commit event\r\n         Collection mobjs = null;\r\n@@ -2265,7 +2265,7 @@ protected void endTransaction(int status) {\n \r\n         // now clear trans cache; keep cleared version rather than\r\n         // null to avoid having to re-create the set later; more efficient\r\n-        if (transStates != Collections.EMPTY_LIST) {\r\n+        if (transStates != Collections.EMPTY_SET) {\r\n             _transCache = (TransactionalCache) transStates;\r\n             _transCache.clear();\r\n         }\r\n@@ -3310,7 +3310,7 @@ public void transactionalAll(Collection objs, boolean updateVersion,\n             Object obj;\r\n             StateManagerImpl sm;\r\n             ClassMetaData meta;\r\n-            Collection sms = new ArrayList(objs.size());\r\n+            Collection sms = new HashSet(objs.size());\r\n             List exceps = null;\r\n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\r\n                 obj = itr.next();\r\n@@ -3637,7 +3637,7 @@ public void lockAll(Collection objs, int level, int timeout,\n         try {\r\n             assertActiveTransaction();\r\n \r\n-            Collection sms = new ArrayList(objs.size());\r\n+            Collection sms = new HashSet(objs.size());\r\n             Object obj;\r\n             StateManagerImpl sm;\r\n             for (Iterator itr = objs.iterator(); itr.hasNext();) {\r\n@@ -3784,7 +3784,7 @@ protected Collection getManagedStates() {\n      */\r\n     protected Collection getTransactionalStates() {\r\n         if (!hasTransactionalObjects())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return _transCache.copy();\r\n     }\r\n \r\n@@ -3803,7 +3803,7 @@ private boolean hasTransactionalObjects() {\n      */\r\n     protected Collection getDirtyStates() {\r\n         if (!hasTransactionalObjects())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n \r\n         return _transCache.copyDirty();\r\n     }\r\n@@ -3814,8 +3814,8 @@ protected Collection getDirtyStates() {\n      */\r\n     protected Collection getPendingTransactionalStates() {\r\n         if (_pending == null)\r\n-            return Collections.EMPTY_LIST;\r\n-        return new ArrayList(_pending);\r\n+            return Collections.EMPTY_SET;\r\n+        return new HashSet(_pending);\r\n     }\r\n \r\n     /**\r\n@@ -4036,19 +4036,19 @@ public void dirtyType(Class cls) {\n \r\n     public Collection getPersistedTypes() {\r\n         if (_persistedClss == null || _persistedClss.isEmpty())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return Collections.unmodifiableCollection(_persistedClss);\r\n     }\r\n \r\n     public Collection getUpdatedTypes() {\r\n         if (_updatedClss == null || _updatedClss.isEmpty())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return Collections.unmodifiableCollection(_updatedClss);\r\n     }\r\n \r\n     public Collection getDeletedTypes() {\r\n         if (_deletedClss == null || _deletedClss.isEmpty())\r\n-            return Collections.EMPTY_LIST;\r\n+            return Collections.EMPTY_SET;\r\n         return Collections.unmodifiableCollection(_deletedClss);\r\n     }\r\n \r\n@@ -4503,12 +4503,12 @@ public TransactionalCache(boolean orderDirty) {\n          */\r\n         public Collection copy() {\r\n             if (isEmpty())\r\n-                return Collections.EMPTY_LIST;\r\n+                return Collections.EMPTY_SET;\r\n \r\n             // size may not be entirely accurate due to refs expiring, so\r\n             // manually copy each object; doesn't matter this way if size too\r\n             // big by some\r\n-            List copy = new ArrayList(size());\r\n+            Set copy = new HashSet(size());\r\n             if (_dirty != null)\r\n                 for (Iterator itr = _dirty.iterator(); itr.hasNext();)\r\n                     copy.add(itr.next());\r\n@@ -4523,8 +4523,8 @@ public Collection copy() {\n          */\r\n         public Collection copyDirty() {\r\n             if (_dirty == null || _dirty.isEmpty())\r\n-                return Collections.EMPTY_LIST;\r\n-            return new ArrayList(_dirty);\r\n+                return Collections.EMPTY_SET;\r\n+            return new HashSet(_dirty);\r\n         }\r\n \r\n         /**\r"},{"sha":"92a830e7dd214ee5197be871e2a10ff9938134f1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","raw_url":"https://github.com/apache/openjpa/raw/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/Message.java?ref=99dc9d8a66d0b127174e6e25913311ea3cc9d5ad","patch":"@@ -23,6 +23,7 @@\n import javax.persistence.Basic;\r\n import javax.persistence.Entity;\r\n import javax.persistence.EntityListeners;\r\n+import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.Version;\r\n \r\n@@ -35,7 +36,8 @@\n @EntityListeners(value = MessageListenerImpl.class)\r\n public class Message {\r\n     @Id\r\n-    private long id = System.currentTimeMillis();\r\n+    @GeneratedValue\r\n+    private long id;\r\n \r\n     @Basic\r\n     private String message;\r"},{"sha":"ff146e0b07b990c7f8761bfcce9bfe8ba2a78686","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","raw_url":"https://github.com/apache/openjpa/raw/99dc9d8a66d0b127174e6e25913311ea3cc9d5ad/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/callbacks/TestMessageListeners.java?ref=99dc9d8a66d0b127174e6e25913311ea3cc9d5ad","patch":"@@ -26,7 +26,7 @@\n public class TestMessageListeners extends SingleEMFTestCase {\r\n \r\n     public void setUp() {\r\n-        setUp(CLEAR_TABLES);\r\n+        setUp(DROP_TABLES);\r\n     }\r\n \r\n     @Override\r\n@@ -96,7 +96,6 @@ public void testUpdateInPrePersist() {\n     }\r\n \r\n     public void testUpdateInPreUpdate() {\r\n-        if( false ) {\r\n         // Create a new EntityManager from the EntityManagerFactory. The\r\n         // EntityManager is the main object in the persistence API, and is\r\n         // used to create, delete, and query objects, as well as access\r\n@@ -166,7 +165,6 @@ public void testUpdateInPreUpdate() {\n             if (em != null && em.isOpen())\r\n                 em.close();\r\n         }\r\n-        }\r\n     }\r\n \r\n     private void assertStatus(int prePersist, int postPersist, int preUpdate,\r"}]}

