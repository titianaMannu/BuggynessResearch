{"sha":"9a40eb69b0aea72c05c0c3812b1b03561b820d84","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhNDBlYjY5YjBhZWE3MmMwNWMwYzM4MTJiMWIwMzU2MWI4MjBkODQ=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-26T17:39:21Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-09-26T17:39:21Z"},"message":"Add David Ezzio's detachment test.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@450122 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"34ccfcb131a7dd37f7e06f67b1b438f16e203b28","url":"https://api.github.com/repos/apache/openjpa/git/trees/34ccfcb131a7dd37f7e06f67b1b438f16e203b28"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9a40eb69b0aea72c05c0c3812b1b03561b820d84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9a40eb69b0aea72c05c0c3812b1b03561b820d84","html_url":"https://github.com/apache/openjpa/commit/9a40eb69b0aea72c05c0c3812b1b03561b820d84","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9a40eb69b0aea72c05c0c3812b1b03561b820d84/comments","author":null,"committer":null,"parents":[{"sha":"62bc6c997c859f5b028df18e99c484b28864109b","url":"https://api.github.com/repos/apache/openjpa/commits/62bc6c997c859f5b028df18e99c484b28864109b","html_url":"https://github.com/apache/openjpa/commit/62bc6c997c859f5b028df18e99c484b28864109b"}],"stats":{"total":268,"additions":268,"deletions":0},"files":[{"sha":"9c1a4d2fd8242b79435d6c2caa554252d8cc9448","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9a40eb69b0aea72c05c0c3812b1b03561b820d84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/9a40eb69b0aea72c05c0c3812b1b03561b820d84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyChild.java?ref=9a40eb69b0aea72c05c0c3812b1b03561b820d84","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.detachment;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+@Entity\r\n+public class DetachmentOneManyChild {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(optional=false)\r\n+    @JoinColumn(name=\"PARENT_ID\", nullable=false)\r\n+    @ForeignKey\r\n+    private DetachmentOneManyParent parent;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public DetachmentOneManyParent getParent() { \r\n+        return parent; \r\n+    }\r\n+\r\n+    public void setParent(DetachmentOneManyParent parent) { \r\n+        this.parent = parent; \r\n+    }\r\n+}\r"},{"sha":"5a2382b4e88b70668470285de7c759fdab801b4a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9a40eb69b0aea72c05c0c3812b1b03561b820d84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/9a40eb69b0aea72c05c0c3812b1b03561b820d84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/DetachmentOneManyParent.java?ref=9a40eb69b0aea72c05c0c3812b1b03561b820d84","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Copyright 2006 The Apache Software Foundation.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.detachment;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+public class DetachmentOneManyParent {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL, \r\n+        fetch=FetchType.EAGER)\r\n+    @OrderBy(\"name ASC\")\r\n+    private List<DetachmentOneManyChild> children = \r\n+        new ArrayList<DetachmentOneManyChild>();\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public List<DetachmentOneManyChild> getChildren() { \r\n+        return children; \r\n+    }\r\n+\r\n+    public void addChild(DetachmentOneManyChild child) {\r\n+        child.setParent(this);\r\n+        children.add(child);\r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"cb19b1fb424e19129a9bf6aa3a0938d43522c322","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/9a40eb69b0aea72c05c0c3812b1b03561b820d84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","raw_url":"https://github.com/apache/openjpa/raw/9a40eb69b0aea72c05c0c3812b1b03561b820d84/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/detachment/TestDetachmentOneMany.java?ref=9a40eb69b0aea72c05c0c3812b1b03561b820d84","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.detachment;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.kernel.AutoDetach;\n+\n+/**\n+ * Tests detachment for bidirectional one-many relationship\n+ *\n+ * @author David Ezzio\n+ */\n+public class TestDetachmentOneMany\n+    extends TestCase {\n+\n+    private OpenJPAEntityManagerFactory emf;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void setUp() {\n+        String types = DetachmentOneManyParent.class.getName() + \";\"\n+            + DetachmentOneManyChild.class.getName(); \n+        Map props = new HashMap();\n+        props.put(\"openjpa.MetaDataFactory\", \"jpa(Types=\" + types + \")\");\n+        emf = (OpenJPAEntityManagerFactory) Persistence.\n+            createEntityManagerFactory(\"test\", props);\n+    }\n+\n+    public void tearDown() {\n+        if (emf == null)\n+            return;\n+        try {\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.createQuery(\"delete from DetachmentOneManyChild\").\n+                executeUpdate();\n+            em.createQuery(\"delete from DetachmentOneManyParent\").\n+                executeUpdate();\n+            em.getTransaction().commit();\n+            em.close();\n+            emf.close();\n+        } catch (Exception e) {\n+        }\n+    }\n+    \n+    public void testDetachment() {\n+        long id = createParentAndChildren();\n+    \n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAPersistence.cast(em).setAutoDetach(AutoDetach.DETACH_NONTXREAD);\n+        DetachmentOneManyParent parent = em.find(DetachmentOneManyParent.class,\n+            id);\n+        assertNotNull(parent);\n+        assertFalse(\"The parent was not detached\", em.contains(parent));\n+    }\n+\n+    public void testFetchWithDetach() {\n+        long id = createParentAndChildren();\n+     \n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAPersistence.cast(em).setAutoDetach(AutoDetach.DETACH_NONTXREAD);\n+        DetachmentOneManyParent parent = em.find(DetachmentOneManyParent.class,\n+            id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertEquals(2, parent.getChildren().size());\n+        DetachmentOneManyChild child0 = parent.getChildren().get(0);\n+        DetachmentOneManyChild child1 = parent.getChildren().get(1);\n+        assertNotNull(\"Did not find expected first child\", child0);\n+        assertNotNull(\"Did not find expected second child\", child1);\n+        assertEquals(\"child0\", child0.getName());\n+        assertFalse(\"The first child was not detached\", em.contains(child0));\n+        assertEquals(\"child1\", child1.getName());\n+        assertFalse(\"The second child was not detached\", em.contains(child1));\n+        em.close();\n+    }\n+    \n+    public void testFetchWithDetachForToOneRelationship() {\n+        long id = createParentAndChildren();\n+        \n+        EntityManager em = emf.createEntityManager();\n+        OpenJPAPersistence.cast(em).setAutoDetach(AutoDetach.DETACH_NONTXREAD);\n+        DetachmentOneManyParent parent = em.find(DetachmentOneManyParent.class,\n+            id);\n+        assertNotNull(parent);\n+        assertEquals(2, parent.getChildren().size());\n+        assertEquals(\"ToOne relationship was not eagerly fetched\", \n+              parent, parent.getChildren().get(0).getParent());\n+        em.close();\n+    }\n+    \n+    private long createParentAndChildren() {\n+        DetachmentOneManyParent parent = new DetachmentOneManyParent();\n+        parent.setName(\"parent\");\n+        for (int i = 0; i < 2; i++) {\n+            DetachmentOneManyChild child = new DetachmentOneManyChild();\n+            child.setName(\"child\" + i);\n+            parent.addChild(child);\n+        }\n+      \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        assertNotNull(parent.getChildren());\n+        assertEquals(2, parent.getChildren().size());\n+        assertTrue(\"The parent is not managed\", em.contains(parent));\n+        DetachmentOneManyChild child0 = parent.getChildren().get(0);\n+        DetachmentOneManyChild child1 = parent.getChildren().get(1);\n+        assertEquals(\"child0\", child0.getName());\n+        assertEquals(\"child1\", child1.getName());\n+        assertEquals(\"The first child has no relationship to the parent\", \n+            parent, child0.getParent());\n+        assertEquals(\"The second child has no relationship to the parent\", \n+            parent, child1.getParent());\n+        em.close();\n+        return id;\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestDetachmentOneMany.class);\n+    }\n+}\n+"}]}

