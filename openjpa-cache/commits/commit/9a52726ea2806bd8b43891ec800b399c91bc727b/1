{"sha":"9a52726ea2806bd8b43891ec800b399c91bc727b","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhNTI3MjZlYTI4MDZiZDhiNDM4OTFlYzgwMGIzOTljOTFiYzcyN2I=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-26T19:23:48Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2006-09-26T19:23:48Z"},"message":"Applying the constraints that the entity listner class \na) must have a no-arg constructor \nb) multiple methods of the same class must not register for the same event \n(JPA Spec Section 3.5)  \n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@450158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"375cd8619a6d40d9f3ccd08f5c38851898b285fa","url":"https://api.github.com/repos/apache/openjpa/git/trees/375cd8619a6d40d9f3ccd08f5c38851898b285fa"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9a52726ea2806bd8b43891ec800b399c91bc727b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9a52726ea2806bd8b43891ec800b399c91bc727b","html_url":"https://github.com/apache/openjpa/commit/9a52726ea2806bd8b43891ec800b399c91bc727b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9a52726ea2806bd8b43891ec800b399c91bc727b/comments","author":null,"committer":null,"parents":[{"sha":"26a3499fe56803d29b8421fec6c404a46b68f5df","url":"https://api.github.com/repos/apache/openjpa/commits/26a3499fe56803d29b8421fec6c404a46b68f5df","html_url":"https://github.com/apache/openjpa/commit/26a3499fe56803d29b8421fec6c404a46b68f5df"}],"stats":{"total":117,"additions":107,"deletions":10},"files":[{"sha":"2dc5e9c882d2221d06d16450e8f1faedc015df15","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/AbstractMetaDataDefaults.java?ref=9a52726ea2806bd8b43891ec800b399c91bc727b","patch":"@@ -45,6 +45,8 @@\n     private boolean _interface = true;\n     private boolean _pcRegistry = true;\n     private int _callback = CALLBACK_RETHROW;\n+    private boolean _allowsMultipleMethodsOnSameCallback = true;\n+    private boolean _allowsMissingCallbackConstructor = true;\n \n     /**\n      * Whether to attempt to use the information from registered classes\n@@ -352,6 +354,22 @@ public Class getUnimplementedExceptionType() {\n         return UnsupportedOperationException.class;\n     }\n \n+    public boolean getAllowsMultipleMethodsOnSameCallback() {\n+        return _allowsMultipleMethodsOnSameCallback;\n+    }\n+    \n+    public void setAllowsMultipleMethodsOnSameCallback(boolean flag) {\n+        _allowsMultipleMethodsOnSameCallback = flag;\n+    }\n+    \n+    public boolean getAllowsMissingCallbackConstructor() {\n+        return _allowsMissingCallbackConstructor;\n+    }\n+    \n+    public void setAllowsMissingCallbackConstructor(boolean flag) {\n+        _allowsMissingCallbackConstructor = flag;\n+    }\n+    \n     /**\n      * Helper method; returns true if the given class appears to be\n      * user-defined."},{"sha":"c220260eb1c05e75b279982c1d5fc2188e8ed2c7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/MetaDataDefaults.java?ref=9a52726ea2806bd8b43891ec800b399c91bc727b","patch":"@@ -49,7 +49,17 @@\n      * event type. Defaults to false.\n      */\n     public boolean getCallbacksBeforeListeners(int type);\n+    \n+    /** Flags if multiple methods of the same class can handle the same \n+     * callback event.\n+     */\n+    public boolean getAllowsMultipleMethodsOnSameCallback();\n \n+    /** Flags if it allowed for the callback listener class not to have a no-arg \n+     * constructor.\n+     */\n+    public boolean getAllowsMissingCallbackConstructor();\n+    \n     /**\n      * Whether to ignore members which are not persistent by default\n      * during metadata population. Defaults to true."},{"sha":"5f44409035322182754f6eef6900b96614783623","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/meta/NoneMetaDataFactory.java?ref=9a52726ea2806bd8b43891ec800b399c91bc727b","patch":"@@ -122,4 +122,12 @@ public Member getBackingMember(FieldMetaData fmd) {\n     public Class getUnimplementedExceptionType() {\n         return null;\n     }\n+    \n+    public boolean getAllowsMultipleMethodsOnSameCallback() {\n+        return true;\n+    }\n+    \n+    public boolean getAllowsMissingCallbackConstructor() {\n+        return true;\n+    }\n }"},{"sha":"f9619cce00a8a6e61f2b4b0dba22d544b70e580d","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":57,"deletions":4,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=9a52726ea2806bd8b43891ec800b399c91bc727b","patch":"@@ -84,6 +84,7 @@\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n import org.apache.openjpa.meta.ClassMetaData;\n import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n import org.apache.openjpa.meta.FieldMetaData;\n@@ -98,12 +99,13 @@\n import org.apache.openjpa.meta.UpdateStrategies;\n import org.apache.openjpa.meta.ValueMetaData;\n import org.apache.openjpa.meta.ValueStrategies;\n+import org.apache.openjpa.meta.MetaDataDefaults;\n import static org.apache.openjpa.persistence.MetaDataTag.*;\n-import static org.apache.openjpa.persistence.MetaDataTag.LRS;\n import org.apache.openjpa.util.ImplHelper;\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.MetaDataException;\n import org.apache.openjpa.util.UnsupportedException;\n+import org.apache.openjpa.util.UserException;\n import serp.util.Numbers;\n import serp.util.Strings;\n \n@@ -769,7 +771,7 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n      * @param sups whether to scan superclasses\n      * @param listener whether this is a listener or not\n      */\n-    public static Collection<LifecycleCallbacks>[] parseCallbackMethods\n+    public Collection<LifecycleCallbacks>[] parseCallbackMethods\n         (Class cls, Collection<LifecycleCallbacks>[] callbacks, boolean sups,\n             boolean listener) {\n         // first sort / filter based on inheritance\n@@ -813,9 +815,15 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n \n                 for (int i = 0; events != null && i < events.length; i++) {\n                     int e = events[i];\n-                    if (callbacks[e] == null)\n-                        callbacks[e] = new ArrayList(3);\n+                    if (!verifyHasNoArgConstructor(cls))\n+                        continue; \n+                    if (!verifyMultipleMethodsOnSameEvent(cls, callbacks[e], m, \n+                        tag))\n+                        continue;\n \n+                    if (callbacks[e] == null)\n+                        callbacks[e] = new ArrayList(3);                   \n+                    \n                     if (listener) {\n                         callbacks[e].add(new BeanLifecycleCallbacks(cls, m,\n                             false));\n@@ -829,6 +837,51 @@ else if (!StringUtils.isEmpty(detached.fieldName()))\n         return callbacks;\n     }\n \n+    private boolean verifyMultipleMethodsOnSameEvent(Class cls, \n+            Collection<LifecycleCallbacks> callbacks, Method method, \n+            MetaDataTag tag) {\n+        boolean result = true;\n+        if (callbacks == null || callbacks.isEmpty())\n+            return true;\n+        MetaDataDefaults defaults = getRepository().getMetaDataFactory().\n+            getDefaults();\n+        for (LifecycleCallbacks lc: callbacks) {\n+            if (!(lc instanceof MethodLifecycleCallbacks))\n+                continue;\n+            Method exists = ((MethodLifecycleCallbacks)lc).getCallbackMethod();\n+            if (exists.getDeclaringClass().equals(method.getDeclaringClass())) {\n+                result = false;\n+                Object[] args = new Object[]{method.getDeclaringClass()\n+                    .getName(), method.getName(), exists.getName(), \n+                    tag.toString()};\n+                if (defaults.getAllowsMultipleMethodsOnSameCallback()) {\n+                    _log.warn(_loc.get(\"multiple-methods-on-callback\", \n+                        args));\n+                 } else {\n+                    throw new UserException(\n+                        _loc.get(\"multiple-methods-on-callback-error\", args));\n+                 }\n+             }\n+        }\n+        return result;\n+    }\n+    \n+    private boolean verifyHasNoArgConstructor(Class cls) {\n+        MetaDataDefaults defaults = getRepository().getMetaDataFactory().\n+            getDefaults();\n+        try {\n+            cls.getConstructor(new Class[]{});\n+            return true;\n+        } catch (Throwable t) {\n+            Message msg = _loc.get(\"missing-no-arg-constructor\", cls.getName());\n+            if (defaults.getAllowsMissingCallbackConstructor())\n+                _log.warn(msg);\n+            else\n+                throw new UserException(msg, t);\n+        } \n+        return false;\n+    }\n+    \n     /**\n      * Store lifecycle metadata.\n      */"},{"sha":"e4bda5684458995b9209193658d13bab9a5c99ac","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=9a52726ea2806bd8b43891ec800b399c91bc727b","patch":"@@ -1485,9 +1485,9 @@ private boolean startEntityListener(Attributes attrs)\n         throws SAXException {\n         _listener = classForName(attrs.getValue(\"class\"));\n         boolean system = currentElement() == null;\n-        Collection<LifecycleCallbacks>[] parsed =\n-            AnnotationPersistenceMetaDataParser.parseCallbackMethods(_listener,\n-                null, true, true);\n+        Collection<LifecycleCallbacks>[] parsed = \n+            new AnnotationPersistenceMetaDataParser(_conf).parseCallbackMethods\n+            (_listener, null, true, true);\n         if (parsed == null)\n             return true;\n \n@@ -1593,8 +1593,8 @@ private void storeCallbacks(ClassMetaData cls) {\n         Class supCls = cls.getDescribedType().getSuperclass();\n         Collection<LifecycleCallbacks>[] supCalls = null;\n         if (!Object.class.equals(supCls)) {\n-            supCalls = AnnotationPersistenceMetaDataParser.parseCallbackMethods\n-                (supCls, null, true, false);\n+            supCalls = new AnnotationPersistenceMetaDataParser(_conf).\n+                parseCallbackMethods(supCls, null, true, false);\n         }\n         if (supCalls != null) {\n             for (int event : LifecycleEvent.ALL_EVENTS) {"},{"sha":"35bafd50833c1bff3f74bbda16f1e5e5e8f47038","filename":"openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9a52726ea2806bd8b43891ec800b399c91bc727b/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=9a52726ea2806bd8b43891ec800b399c91bc727b","patch":"@@ -91,4 +91,12 @@ bad-em-props: Invalid EntityManager properties passed to createEntityManager. \\\n system-listener-err: An error occurred invoking system entity listener \\\n \tcallback on instance \"{0}\".\n no-transaction: Cannot perform operation with no transaction.\n-\n+multiple-methods-on-callback: Class \"{0}\" declares method \"{1}\" as well \\\n+\tas \"{2}\" for handling the same \"{3}\" callback. \n+multiple-methods-on-callback-error: Class \"{0}\" declares method \"{1}\" as well \\\n+\tas \"{2}\" for handling the same \"{3}\" callback. \\\n+\t\"AllowsMultipleMethodsOnSameCallback\" property of MetaDataDefaults can be \\\n+\tset to true to supress this exception.\n+missing-no-arg-constructor: Entity listener class \"{0}\" must declare a no-arg \\\n+\tconstructor. \"AllowsNoArgConstructorCallback\" property of MetaDataDefaults \\\n+\tcan be set to true to ignore this exception.\t  "}]}

