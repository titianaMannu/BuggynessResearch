{"sha":"9a98d6a2bf8203a1cead34d18f705e380c829cd6","node_id":"MDY6Q29tbWl0MjA2MzY0OjlhOThkNmEyYmY4MjAzYTFjZWFkMzRkMThmNzA1ZTM4MGM4MjljZDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-09-03T11:41:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-09-03T11:41:07Z"},"message":"[OPENJPA-2567] various MySql and MariaDB text types support is added - thanks @solomax - This closes #18\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1839940 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cdf6caa281eae33755d0fb99c27e44e1ca77d00b","url":"https://api.github.com/repos/apache/openjpa/git/trees/cdf6caa281eae33755d0fb99c27e44e1ca77d00b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9a98d6a2bf8203a1cead34d18f705e380c829cd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9a98d6a2bf8203a1cead34d18f705e380c829cd6","html_url":"https://github.com/apache/openjpa/commit/9a98d6a2bf8203a1cead34d18f705e380c829cd6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9a98d6a2bf8203a1cead34d18f705e380c829cd6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6c4c77aa7817b8e98c805ada47c5b11fe7f63172","url":"https://api.github.com/repos/apache/openjpa/commits/6c4c77aa7817b8e98c805ada47c5b11fe7f63172","html_url":"https://github.com/apache/openjpa/commit/6c4c77aa7817b8e98c805ada47c5b11fe7f63172"}],"stats":{"total":307,"additions":258,"deletions":49},"files":[{"sha":"081bc2db235a4803220ada15d684b3f4bddeda17","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java","status":"modified","additions":42,"deletions":27,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MariaDBDictionary.java?ref=9a98d6a2bf8203a1cead34d18f705e380c829cd6","patch":"@@ -14,7 +14,7 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.openjpa.jdbc.sql;\n \n@@ -30,7 +30,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.openjpa.lib.util.StringUtil;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n@@ -41,17 +40,18 @@\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.lib.util.StringUtil;\n import org.apache.openjpa.util.StoreException;\n \n /*\n  * Dictionary for MariaDB, based off the MySQLDictionary.\n- * \n+ *\n  */\n public class MariaDBDictionary extends DBDictionary {\n     public static final String SELECT_HINT = \"openjpa.hint.MariaDBSelectHint\";\n \n     public static final String DELIMITER_BACK_TICK = \"`\";\n-    \n+\n     /**\n      * The MySQL table type to use when creating tables; defaults to innodb.\n      */\n@@ -69,8 +69,8 @@\n     public boolean driverDeserializesBlobs = false;\n \n     /**\n-     * Whether to inline multi-table bulk-delete operations into MySQL's \n-     * combined <code>DELETE FROM foo, bar, baz</code> syntax. \n+     * Whether to inline multi-table bulk-delete operations into MySQL's\n+     * combined <code>DELETE FROM foo, bar, baz</code> syntax.\n      * Defaults to false, since this may fail in the presence of InnoDB tables\n      * with foreign keys.\n      * @see http://dev.mysql.com/doc/refman/5.0/en/delete.html\n@@ -80,6 +80,9 @@\n     public static final String tinyBlobTypeName = \"TINYBLOB\";\n     public static final String mediumBlobTypeName = \"MEDIUMBLOB\";\n     public static final String longBlobTypeName = \"LONGBLOB\";\n+    public static final String tinyTextTypeName = \"TINYTEXT\";\n+    public static final String mediumTextTypeName = \"MEDIUMTEXT\";\n+    public static final String longTextTypeName = \"LONGTEXT\";\n \n     public MariaDBDictionary() {\n         platform = \"MariaDB\";\n@@ -120,15 +123,15 @@ public MariaDBDictionary() {\n         reservedWordSet.addAll(Arrays.asList(new String[]{\n             \"AUTO_INCREMENT\", \"BINARY\", \"BLOB\", \"CHANGE\", \"ENUM\", \"INFILE\",\n             \"INT1\", \"INT2\", \"INT4\", \"FLOAT1\", \"FLOAT2\", \"FLOAT4\", \"LOAD\",\n-            \"MEDIUMINT\", \"OUTFILE\", \"REPLACE\", \"STARTING\", \"TEXT\", \"UNSIGNED\", \n-            \"ZEROFILL\", \"INDEX\", \n+            \"MEDIUMINT\", \"OUTFILE\", \"REPLACE\", \"STARTING\", \"TEXT\", \"UNSIGNED\",\n+            \"ZEROFILL\", \"INDEX\",\n         }));\n \n         // reservedWordSet subset that CANNOT be used as valid column names\n         // (i.e., without surrounding them with double-quotes)\n         invalidColumnWordSet.addAll(Arrays.asList(new String[]{\n             \"ADD\", \"ALL\", \"ALTER\", \"AND\", \"AS\", \"ASC\", \"BETWEEN\", \"BINARY\",\n-            \"BLOB\", \"BOTH\", \"BY\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHAR\", \n+            \"BLOB\", \"BOTH\", \"BY\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHAR\",\n             \"CHARACTER\", \"CHECK\", \"COLLATE\", \"COLUMN\", \"CONSTRAINT\", \"CONTINUE\",\n             \"CONVERT\", \"CREATE\", \"CROSS\", \"CURRENT_DATE\", \"CURRENT_TIME\",\n             \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURSOR\", \"DEC\", \"DECIMAL\",\n@@ -145,7 +148,7 @@ public MariaDBDictionary() {\n             \"STARTING\", \"TABLE\", \"THEN\", \"TO\", \"TRAILING\", \"TRUE\", \"UNION\",\n             \"UNIQUE\", \"UNSIGNED\", \"UPDATE\", \"USAGE\", \"USING\", \"VALUES\",\n             \"VARCHAR\", \"VARYING\", \"WHEN\", \"WHERE\", \"WITH\", \"WRITE\", \"ZEROFILL\",\n-            \"INDEX\", \n+            \"INDEX\",\n         }));\n \n         requiresSearchStringEscapeForLike = true;\n@@ -157,7 +160,7 @@ public MariaDBDictionary() {\n \n         setLeadingDelimiter(DELIMITER_BACK_TICK);\n         setTrailingDelimiter(DELIMITER_BACK_TICK);\n-        \n+\n         fixedSizeTypeNameSet.remove(\"NUMERIC\");\n     }\n \n@@ -180,10 +183,11 @@ public void connectedConfiguration(Connection conn) throws SQLException {\n             if (log.isWarnEnabled())\n                 log.warn(e.toString(), e);\n         }\n-        \n+\n         supportsXMLColumn = true;\n     }\n-    \n+\n+    @Override\n     protected void setDelimitedCase(DatabaseMetaData metaData) {\n         // Determination of case sensitivity is not accurate; MariaDB JIRA CONJ-55\n         delimitedCase = SCHEMA_CASE_PRESERVE;\n@@ -194,7 +198,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n         conn = super.decorate(conn);\n         return conn;\n     }\n-    \n+\n     private static int[] getMajorMinorVersions(String versionStr)\n         throws IllegalArgumentException {\n         int beginIndex = 0;\n@@ -263,7 +267,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n                 new String[]{ \"ALTER TABLE \"\n                 + getFullName(fk.getTable(), false)\n                 + \" DROP FOREIGN KEY \" + toDBName(fkName) };\n-            return retVal;   \n+            return retVal;\n         }\n         return new String[]{ \"ALTER TABLE \"\n             + getFullName(fk.getTable(), false)\n@@ -288,7 +292,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n         System.arraycopy(sql, 0, ret, cols.length, sql.length);\n         return ret;\n     }\n-    \n+\n     @Override\n     public String[] getDeleteTableContentsSQL(Table[] tables,Connection conn) {\n         // mysql >= 4 supports more-optimal delete syntax\n@@ -343,10 +347,10 @@ public int getPreferredType(int type) {\n             return Types.LONGVARCHAR;\n         return super.getPreferredType(type);\n     }\n-    \n+\n     /**\n      * Append XML comparison.\n-     * \n+     *\n      * @param buf the SQL buffer to write the comparison\n      * @param op the comparison operation to perform\n      * @param lhs the left hand side of the comparison\n@@ -368,10 +372,10 @@ public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\n         else\n             rhs.appendTo(buf);\n     }\n-    \n+\n     /**\n      * Append XML column value so that it can be used in comparisons.\n-     * \n+     *\n      * @param buf the SQL buffer to write the value\n      * @param val the value to be written\n      */\n@@ -382,7 +386,7 @@ private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n         val.appendTo(buf);\n         buf.append(\"')\");\n     }\n-    \n+\n     @Override\n     public int getBatchFetchSize(int batchFetchSize) {\n         return Integer.MIN_VALUE;\n@@ -401,23 +405,23 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n             select += \" \" + hint;\n         return select;\n     }\n-    \n+\n     @Override\n     protected Collection<String> getSelectTableAliases(Select sel) {\n-        Set<String> result = new HashSet<String>();\n+        Set<String> result = new HashSet<>();\n         List<String> selects = sel.getIdentifierAliases();\n         for (String s : selects) {\n             String tableAlias = s.substring(0, s.indexOf('.'));\n             result.add(tableAlias);\n         }\n         return result;\n     }\n-    \n+\n     @Override\n     protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n         int state = super.matchErrorState(errorStates, ex);\n-        \n-        if (state == StoreException.GENERAL && \n+\n+        if (state == StoreException.GENERAL &&\n                 ex.getNextException() != null &&\n                 \"JZ0002\".equalsIgnoreCase(ex.getNextException().getSQLState())) {\n             if (conf != null && conf.getLockTimeout() != -1) {\n@@ -449,7 +453,7 @@ public boolean isFatalException(int subtype, SQLException ex) {\n      */\n     @Override\n     public String getTypeName(Column col) {\n-        // handle blobs differently, if the DBItentifierType is NULL (e.g. no column definition is set). \n+        // handle blobs differently, if the DBItentifierType is NULL (e.g. no column definition is set).\n         if (col.getType() == Types.BLOB && col.getTypeIdentifier().getType() == DBIdentifierType.NULL) {\n             if (col.getSize() <= 0)   // unknown size\n                 return blobTypeName;  // return old default of 64KB\n@@ -461,6 +465,17 @@ else if (col.getSize() <= 16777215)\n                 return mediumBlobTypeName;\n             else\n                 return longBlobTypeName;\n+        } else if (col.getType() == Types.CLOB && col.getTypeIdentifier().getType() == DBIdentifierType.NULL) {\n+            if (col.getSize() <= 0)   // unknown size\n+                return clobTypeName;  // return old default of 64KB\n+            else if (col.getSize() <= 255)\n+                return tinyTextTypeName;\n+            else if (col.getSize() <= 65535)\n+                return clobTypeName;  // old default of 64KB\n+            else if (col.getSize() <= 16777215)\n+                return mediumTextTypeName;\n+            else\n+                return longTextTypeName;\n         } else {\n             return super.getTypeName(col);\n         }"},{"sha":"84d160c67ce23a85523f55416e144e9b8a701b87","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","status":"modified","additions":36,"deletions":22,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/MySQLDictionary.java?ref=9a98d6a2bf8203a1cead34d18f705e380c829cd6","patch":"@@ -14,7 +14,7 @@\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n  * KIND, either express or implied.  See the License for the\n  * specific language governing permissions and limitations\n- * under the License.    \n+ * under the License.\n  */\n package org.apache.openjpa.jdbc.sql;\n \n@@ -30,7 +30,6 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.openjpa.lib.util.StringUtil;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n@@ -41,6 +40,7 @@\n import org.apache.openjpa.jdbc.schema.Index;\n import org.apache.openjpa.jdbc.schema.PrimaryKey;\n import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.lib.util.StringUtil;\n import org.apache.openjpa.util.StoreException;\n \n /**\n@@ -52,7 +52,7 @@\n     public static final String SELECT_HINT = \"openjpa.hint.MySQLSelectHint\";\n \n     public static final String DELIMITER_BACK_TICK = \"`\";\n-    \n+\n     /**\n      * The MySQL table type to use when creating tables; defaults to innodb.\n      */\n@@ -70,8 +70,8 @@\n     public boolean driverDeserializesBlobs = false;\n \n     /**\n-     * Whether to inline multi-table bulk-delete operations into MySQL's \n-     * combined <code>DELETE FROM foo, bar, baz</code> syntax. \n+     * Whether to inline multi-table bulk-delete operations into MySQL's\n+     * combined <code>DELETE FROM foo, bar, baz</code> syntax.\n      * Defaults to false, since this may fail in the presence of InnoDB tables\n      * with foreign keys.\n      * @see http://dev.mysql.com/doc/refman/5.0/en/delete.html\n@@ -81,6 +81,9 @@\n     public static final String tinyBlobTypeName = \"TINYBLOB\";\n     public static final String mediumBlobTypeName = \"MEDIUMBLOB\";\n     public static final String longBlobTypeName = \"LONGBLOB\";\n+    public static final String tinyTextTypeName = \"TINYTEXT\";\n+    public static final String mediumTextTypeName = \"MEDIUMTEXT\";\n+    public static final String longTextTypeName = \"LONGTEXT\";\n \n     public MySQLDictionary() {\n         platform = \"MySQL\";\n@@ -121,15 +124,15 @@ public MySQLDictionary() {\n         reservedWordSet.addAll(Arrays.asList(new String[]{\n             \"AUTO_INCREMENT\", \"BINARY\", \"BLOB\", \"CHANGE\", \"ENUM\", \"INFILE\",\n             \"INT1\", \"INT2\", \"INT4\", \"FLOAT1\", \"FLOAT2\", \"FLOAT4\", \"LOAD\",\n-            \"MEDIUMINT\", \"OUTFILE\", \"REPLACE\", \"STARTING\", \"TEXT\", \"UNSIGNED\", \n-            \"ZEROFILL\", \"INDEX\", \n+            \"MEDIUMINT\", \"OUTFILE\", \"REPLACE\", \"STARTING\", \"TEXT\", \"UNSIGNED\",\n+            \"ZEROFILL\", \"INDEX\",\n         }));\n \n         // reservedWordSet subset that CANNOT be used as valid column names\n         // (i.e., without surrounding them with double-quotes)\n         invalidColumnWordSet.addAll(Arrays.asList(new String[]{\n             \"ADD\", \"ALL\", \"ALTER\", \"AND\", \"AS\", \"ASC\", \"BETWEEN\", \"BINARY\",\n-            \"BLOB\", \"BOTH\", \"BY\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHAR\", \n+            \"BLOB\", \"BOTH\", \"BY\", \"CASCADE\", \"CASE\", \"CHANGE\", \"CHAR\",\n             \"CHARACTER\", \"CHECK\", \"COLLATE\", \"COLUMN\", \"CONSTRAINT\", \"CONTINUE\",\n             \"CONVERT\", \"CREATE\", \"CROSS\", \"CURRENT_DATE\", \"CURRENT_TIME\",\n             \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"CURSOR\", \"DEC\", \"DECIMAL\",\n@@ -146,7 +149,7 @@ public MySQLDictionary() {\n             \"STARTING\", \"TABLE\", \"THEN\", \"TO\", \"TRAILING\", \"TRUE\", \"UNION\",\n             \"UNIQUE\", \"UNSIGNED\", \"UPDATE\", \"USAGE\", \"USING\", \"VALUES\",\n             \"VARCHAR\", \"VARYING\", \"WHEN\", \"WHERE\", \"WITH\", \"WRITE\", \"ZEROFILL\",\n-            \"INDEX\", \n+            \"INDEX\",\n         }));\n \n         requiresSearchStringEscapeForLike = true;\n@@ -158,7 +161,7 @@ public MySQLDictionary() {\n \n         setLeadingDelimiter(DELIMITER_BACK_TICK);\n         setTrailingDelimiter(DELIMITER_BACK_TICK);\n-        \n+\n         fixedSizeTypeNameSet.remove(\"NUMERIC\");\n     }\n \n@@ -206,7 +209,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n             conn.setReadOnly(true);\n         return conn;\n     }\n-    \n+\n     private static int[] getMajorMinorVersions(String versionStr)\n         throws IllegalArgumentException {\n         int beginIndex = 0;\n@@ -275,7 +278,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n                 new String[]{ \"ALTER TABLE \"\n                 + getFullName(fk.getTable(), false)\n                 + \" DROP FOREIGN KEY \" + toDBName(fkName) };\n-            return retVal;   \n+            return retVal;\n         }\n         return new String[]{ \"ALTER TABLE \"\n             + getFullName(fk.getTable(), false)\n@@ -300,7 +303,7 @@ public Connection decorate(Connection conn)  throws SQLException {\n         System.arraycopy(sql, 0, ret, cols.length, sql.length);\n         return ret;\n     }\n-    \n+\n     @Override\n     public String[] getDeleteTableContentsSQL(Table[] tables,Connection conn) {\n         // mysql >= 4 supports more-optimal delete syntax\n@@ -356,10 +359,10 @@ public int getPreferredType(int type) {\n             return Types.LONGVARCHAR;\n         return super.getPreferredType(type);\n     }\n-    \n+\n     /**\n      * Append XML comparison.\n-     * \n+     *\n      * @param buf the SQL buffer to write the comparison\n      * @param op the comparison operation to perform\n      * @param lhs the left hand side of the comparison\n@@ -381,10 +384,10 @@ public void appendXmlComparison(SQLBuffer buf, String op, FilterValue lhs,\n         else\n             rhs.appendTo(buf);\n     }\n-    \n+\n     /**\n      * Append XML column value so that it can be used in comparisons.\n-     * \n+     *\n      * @param buf the SQL buffer to write the value\n      * @param val the value to be written\n      */\n@@ -395,7 +398,7 @@ private void appendXmlValue(SQLBuffer buf, FilterValue val) {\n         val.appendTo(buf);\n         buf.append(\"')\");\n     }\n-    \n+\n     @Override\n     public int getBatchFetchSize(int batchFetchSize) {\n         return Integer.MIN_VALUE;\n@@ -414,18 +417,18 @@ public String getSelectOperation(JDBCFetchConfiguration fetch) {\n             select += \" \" + hint;\n         return select;\n     }\n-    \n+\n     @Override\n     protected Collection<String> getSelectTableAliases(Select sel) {\n-        Set<String> result = new HashSet<String>();\n+        Set<String> result = new HashSet<>();\n         List<String> selects = sel.getIdentifierAliases();\n         for (String s : selects) {\n             String tableAlias = s.substring(0, s.indexOf('.'));\n             result.add(tableAlias);\n         }\n         return result;\n     }\n-    \n+\n     @Override\n     protected int matchErrorState(Map<Integer,Set<String>> errorStates, SQLException ex) {\n         int state = super.matchErrorState(errorStates, ex);\n@@ -462,7 +465,7 @@ public boolean isFatalException(int subtype, SQLException ex) {\n      */\n     @Override\n     public String getTypeName(Column col) {\n-        // handle blobs differently, if the DBItentifierType is NULL (e.g. no column definition is set). \n+        // handle blobs differently, if the DBItentifierType is NULL (e.g. no column definition is set).\n         if (col.getType() == Types.BLOB && col.getTypeIdentifier().getType() == DBIdentifierType.NULL) {\n             if (col.getSize() <= 0)   // unknown size\n                 return blobTypeName;  // return old default of 64KB\n@@ -474,6 +477,17 @@ else if (col.getSize() <= 16777215)\n                 return mediumBlobTypeName;\n             else\n                 return longBlobTypeName;\n+        } else if (col.getType() == Types.CLOB && col.getTypeIdentifier().getType() == DBIdentifierType.NULL) {\n+            if (col.getSize() <= 0)   // unknown size\n+                return clobTypeName;  // return old default of 64KB\n+            else if (col.getSize() <= 255)\n+                return tinyTextTypeName;\n+            else if (col.getSize() <= 65535)\n+                return clobTypeName;  // old default of 64KB\n+            else if (col.getSize() <= 16777215)\n+                return mediumTextTypeName;\n+            else\n+                return longTextTypeName;\n         } else {\n             return super.getTypeName(col);\n         }"},{"sha":"d8d4b114fe3875e7a50b24dbdb73a5a4df167323","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/ClobColumnEntity.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/ClobColumnEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/ClobColumnEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/ClobColumnEntity.java?ref=9a98d6a2bf8203a1cead34d18f705e380c829cd6","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.blob.mysql;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Lob;\n+\n+@Entity\n+public class ClobColumnEntity {\n+    @Id\n+    private int id;\n+\n+    @Lob\n+    @Column(length = 20)\n+    protected String smallLob;\n+\n+    @Lob\n+    @Column(length = 66000)\n+    protected String medLob;\n+\n+    @Lob\n+    @Column(length = 16777216)\n+    protected String longLob;\n+\n+    @Lob\n+    protected String defaultLob;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getSmallLob() {\n+        return smallLob;\n+    }\n+\n+    public void setSmallLob(String smallLob) {\n+        this.smallLob = smallLob;\n+    }\n+\n+    public String getMedLob() {\n+        return medLob;\n+    }\n+\n+    public void setMedLob(String medLob) {\n+        this.medLob = medLob;\n+    }\n+\n+    public String getLongLob() {\n+        return longLob;\n+    }\n+\n+    public void setLongLob(String longLob) {\n+        this.longLob = longLob;\n+    }\n+\n+    public String getDefaultLob() {\n+        return defaultLob;\n+    }\n+\n+    public void setDefaultLob(String defaultLob) {\n+        this.defaultLob = defaultLob;\n+    }\n+}"},{"sha":"8b1b1d2919f9186143f3f3d07316252951259ff6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestClobColumnType.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestClobColumnType.java","raw_url":"https://github.com/apache/openjpa/raw/9a98d6a2bf8203a1cead34d18f705e380c829cd6/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestClobColumnType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/blob/mysql/TestClobColumnType.java?ref=9a98d6a2bf8203a1cead34d18f705e380c829cd6","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.blob.mysql;\n+\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n+import org.apache.openjpa.jdbc.identifier.DBIdentifier.DBIdentifierType;\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.schema.Column;\n+import org.apache.openjpa.jdbc.schema.Table;\n+import org.apache.openjpa.jdbc.sql.MariaDBDictionary;\n+import org.apache.openjpa.jdbc.sql.MySQLDictionary;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Testcase for MySQL Blob types. OPENJPA-740 introduced intelligent column type for BLOBs, OPENJPA-1870 refined it a\n+ * bit.\n+ */\n+public class TestClobColumnType extends SingleEMFTestCase {\n+\n+    private static boolean _firstRun=true;\n+    private boolean _runTest = false; // only test with MySQL\n+\n+    @Override\n+\tpublic void setUp() throws Exception {\n+\n+        // create EMF solely to obtain a DBDictionary.\n+        // need to do this without ClobColumnEntity.class since it contains a column definition which might\n+        // not work with all databases.\n+        super.setUp((Object) null);\n+        if (!(getDBDictionary() instanceof MySQLDictionary || getDBDictionary() instanceof MariaDBDictionary)) {\n+            // normal teardown will take care of the EMF.\n+            return;\n+        }\n+\n+        // remove the EMF\n+        tearDown();\n+\n+        _runTest = true;\n+        super.setUp(ClobColumnEntity.class, DROP_TABLES, \"openjpa.jdbc.SchemaFactory\", \"native\");\n+\n+        if(_firstRun) {\n+            emf.createEntityManager().close(); // trigger table creation.\n+            _firstRun = false;\n+        }\n+    }\n+\n+    private Column getCol(String name) {\n+        ClassMapping mapping = getMapping(ClobColumnEntity.class);\n+\n+        Table t = mapping.getTable();\n+        Column col = t.getColumn(DBIdentifier.newIdentifier(name, DBIdentifierType.COLUMN, true));\n+        assertNotNull(col);\n+        return col;\n+    }\n+\n+    public void testSmallLob() {\n+        if (_runTest) {\n+            assertEquals(MySQLDictionary.tinyTextTypeName, getCol(\"smallLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+\n+    public void testMedLob() {\n+        if (_runTest) {\n+            assertEquals(MySQLDictionary.mediumTextTypeName, getCol(\"medLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+\n+    public void testLongBlob() {\n+        if (_runTest) {\n+            assertEquals(MySQLDictionary.longTextTypeName, getCol(\"longLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+\n+    public void testDefaultLob() {\n+        if (_runTest) {\n+            assertEquals(getDBDictionary().blobTypeName, getCol(\"defaultLob\").getTypeIdentifier().getName());\n+        }\n+    }\n+}"}]}

