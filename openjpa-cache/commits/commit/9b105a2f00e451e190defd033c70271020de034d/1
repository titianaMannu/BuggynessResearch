{"sha":"9b105a2f00e451e190defd033c70271020de034d","node_id":"MDY6Q29tbWl0MjA2MzY0OjliMTA1YTJmMDBlNDUxZTE5MGRlZmQwMzNjNzAyNzEwMjBkZTAzNGQ=","commit":{"author":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-09-21T19:27:08Z"},"committer":{"name":"Jeremy Bauer","email":"jrbauer@apache.org","date":"2010-09-21T19:27:08Z"},"message":"OPENJPA-1809 Modified syncVersion exception path to pass the lock level into the exception producer.  This eventually allows the exception translator to correctly decide whether the exception was the result of a lock timeout.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@999559 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79432aa9f142385b5e8a6a27c841d519b59f00ad","url":"https://api.github.com/repos/apache/openjpa/git/trees/79432aa9f142385b5e8a6a27c841d519b59f00ad"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9b105a2f00e451e190defd033c70271020de034d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9b105a2f00e451e190defd033c70271020de034d","html_url":"https://github.com/apache/openjpa/commit/9b105a2f00e451e190defd033c70271020de034d","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9b105a2f00e451e190defd033c70271020de034d/comments","author":null,"committer":null,"parents":[{"sha":"b76ab3884e1bb57e9b066d06ea516455d2de01b2","url":"https://api.github.com/repos/apache/openjpa/commits/b76ab3884e1bb57e9b066d06ea516455d2de01b2","html_url":"https://github.com/apache/openjpa/commit/b76ab3884e1bb57e9b066d06ea516455d2de01b2"}],"stats":{"total":204,"additions":202,"deletions":2},"files":[{"sha":"893da73cf6f831d9ace7b8c10b6201a8fe6d2a1c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9b105a2f00e451e190defd033c70271020de034d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/9b105a2f00e451e190defd033c70271020de034d/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreManager.java?ref=9b105a2f00e451e190defd033c70271020de034d","patch":"@@ -305,8 +305,16 @@ public boolean syncVersion(OpenJPAStateManager sm, Object context) {\n         try {\n             return mapping.getVersion().checkVersion(sm, this, true);\n         } catch (SQLException se) {\n-            throw SQLExceptions.getStore(se, _dict);\n+            throw SQLExceptions.getStore(se, _dict, getReadLockLevel());\n+        }\n+    }\n+\n+    private int getReadLockLevel() {\n+        JDBCFetchConfiguration fetch = getFetchConfiguration();\n+        if (fetch != null) {\n+            return fetch.getReadLockLevel();\n         }\n+        return -1;\n     }\n \n     public int compareVersion(OpenJPAStateManager state, Object v1, Object v2) {"},{"sha":"a46c1397129aa69a63591dd7e9d6bbac802fce47","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","status":"modified","additions":132,"deletions":1,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/9b105a2f00e451e190defd033c70271020de034d/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","raw_url":"https://github.com/apache/openjpa/raw/9b105a2f00e451e190defd033c70271020de034d/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/TestPessimisticLocks.java?ref=9b105a2f00e451e190defd033c70271020de034d","patch":"@@ -21,6 +21,11 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n \n import javax.persistence.EntityManager;\n import javax.persistence.LockModeType;\n@@ -32,7 +37,10 @@\n import junit.framework.AssertionFailedError;\n \n import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DB2Dictionary;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.lib.log.Log;\n import org.apache.openjpa.persistence.LockTimeoutException;\n import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n@@ -65,7 +73,7 @@ public void setUp() {\n         if (isTestsDisabled())\n             return;\n         \n-        setUp(CLEAR_TABLES, Employee.class, Department.class, \"openjpa.LockManager\", \"mixed\");\n+        setUp(CLEAR_TABLES, Employee.class, Department.class, VersionEntity.class, \"openjpa.LockManager\", \"mixed\");\n \n         EntityManager em = null;\n         em = emf.createEntityManager();\n@@ -399,6 +407,82 @@ public void testRepeatedQueryWithPessimisticLocks() {\n         em.getTransaction().commit();\n     }\n     \n+    protected Log getLog() {\n+        return emf.getConfiguration().getLog(\"Tests\");\n+    }\n+\n+    /**\n+     * This variation introduces a row level write lock in a secondary thread,\n+     * issues a refresh in the main thread with a lock timeout, and expects a \n+     * LockTimeoutException.\n+     */\n+    public void testRefreshLockTimeout() {\n+\n+        // Only run this test on DB2 and Derby for now.  It could cause\n+        // the test to hang on other platforms.\n+        if (!(dict instanceof DerbyDictionary ||\n+              dict instanceof DB2Dictionary)) {\n+            return;\n+        }\n+        \n+        EntityManager em = emf.createEntityManager();\n+        \n+        resetSQL();\n+        VersionEntity ve = new VersionEntity();\n+        int veid = new Random().nextInt();\n+        ve.setId(veid);\n+        ve.setName(\"Versioned Entity\");\n+\n+        em.getTransaction().begin();\n+        em.persist(ve);\n+        em.getTransaction().commit();\n+                \n+        em.getTransaction().begin();\n+        // Assert that the department can be found and no lock mode is set\n+        ve = em.find(VersionEntity.class, veid);\n+        assertTrue(em.contains(ve));        \n+        assertTrue(em.getLockMode(ve) == LockModeType.NONE);\n+        em.getTransaction().commit();\n+        \n+        // Kick of a thread to lock the DB for update\n+        ExecutorService executor = Executors.newFixedThreadPool(1);\n+        Future<Boolean> result = executor.submit(new RefreshWithLock(veid, this));\n+        try {\n+            // Wait for the thread to lock the row\n+            getLog().trace(\"Main: waiting\");\n+            synchronized (this) {\n+                // The derby lock timeout is configured for 60 seconds, by default.\n+                wait(70000);\n+            }\n+            getLog().trace(\"Main: done waiting\");\n+            Map<String,Object> props = new HashMap<String,Object>();\n+            // This property does not have any effect on Derby for the locking\n+            // condition produced by this test.  Instead, Derby uses the \n+            // lock timeout value specified in the config (pom.xml)\n+            props.put(\"javax.persistence.lock.timeout\", 5000);\n+            em.getTransaction().begin();\n+            getLog().trace(\"Main: refresh with force increment\");\n+            em.refresh(ve, LockModeType.PESSIMISTIC_FORCE_INCREMENT, props);  \n+            getLog().trace(\"Main: commit\");\n+            em.getTransaction().commit();\n+            getLog().trace(\"Main: done commit\");\n+            fail(\"Expected LockTimeoutException\");\n+        } catch (Throwable t) {\n+            getLog().trace(\"Main: exception - \" + t.getMessage(), t);\n+            assertTrue( t instanceof LockTimeoutException);\n+        } finally {\n+            try {\n+                // Wake the thread and wait for the thread to finish\n+                synchronized(this) {\n+                    this.notify();\n+                }\n+                result.get();\n+            } catch (Throwable t) { \n+                fail(\"Caught throwable waiting for thread finish: \" + t);\n+            }\n+        }\n+    }\n+        \n     /**\n      * Assert that an exception of proper type has been thrown. Also checks that\n      * that the exception has populated the failed object.\n@@ -435,4 +519,51 @@ Object getFailedObject(Throwable e) {\n         return null;\n     }\n \n+    /**\n+     * Separate execution thread used to forcing a lock condition on \n+     * a row in the VersionEntity table.\n+     */\n+    public class RefreshWithLock implements Callable<Boolean> {\n+\n+        private int _id;\n+        private Object _monitor;\n+        \n+        public RefreshWithLock(int id, Object monitor) {\n+            _id = id;\n+            _monitor = monitor;\n+        }\n+        \n+        public Boolean call() throws Exception {\n+            try {\n+                EntityManager em = emf.createEntityManager();\n+                \n+                em.getTransaction().begin();\n+                // Find with pessimistic force increment.  Will lock row for duration of TX.\n+                VersionEntity ve = em.find(VersionEntity.class, _id, LockModeType.PESSIMISTIC_FORCE_INCREMENT);\n+                assertTrue(em.getLockMode(ve) == LockModeType.PESSIMISTIC_FORCE_INCREMENT);\n+                // Wake up the main thread\n+                getLog().trace(\"Thread: wake up main thread\");\n+                synchronized(_monitor) {\n+                    _monitor.notify();\n+                }\n+                // Wait up to 120 seconds for main thread to complete.  The default derby timeout is 60 seconds. \n+                try {\n+                    getLog().trace(\"Thread: waiting up to 120 secs for notify\");\n+                    synchronized(_monitor) {\n+                        _monitor.wait(120000);\n+                    }\n+                    getLog().trace(\"Thread: done waiting\");\n+                } catch (Throwable t) {\n+                    getLog().trace(\"Unexpected thread interrupt\",t);\n+                }\n+                \n+                em.getTransaction().commit();\n+                em.close();\n+                getLog().trace(\"Thread: done\");\n+            } catch (Throwable t) {\n+                getLog().trace(\"Thread: caught - \" + t.getMessage(), t);\n+            }\n+            return Boolean.TRUE;\n+        }\n+    }\n }"},{"sha":"472a83a1ca558d178d7deeb322f2cecd57d9aeff","filename":"openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/VersionEntity.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9b105a2f00e451e190defd033c70271020de034d/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/VersionEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9b105a2f00e451e190defd033c70271020de034d/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/VersionEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-locking/src/test/java/org/apache/openjpa/persistence/lockmgr/VersionEntity.java?ref=9b105a2f00e451e190defd033c70271020de034d","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.lockmgr;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name=\"LK_VERSENT\")\r\n+public class VersionEntity {\r\n+\r\n+    @Id\r\n+    private int id;\r\n+    \r\n+    private String name;\r\n+    \r\n+    @Version\r\n+    private int version;\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return version;\r\n+    }\r\n+}\r"}]}

