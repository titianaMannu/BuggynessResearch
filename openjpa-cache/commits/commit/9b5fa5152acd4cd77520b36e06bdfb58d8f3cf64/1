{"sha":"9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64","node_id":"MDY6Q29tbWl0MjA2MzY0OjliNWZhNTE1MmFjZDRjZDc3NTIwYjM2ZTA2YmRmYjU4ZDhmM2NmNjQ=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-03-22T20:50:21Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2011-03-22T20:50:21Z"},"message":"OPENJPA-1960: Allow openjpa.InitializeEagerly to be used with BV.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1084349 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8d22bca22015ce6e186c884b27c4f3114b5f4a00","url":"https://api.github.com/repos/apache/openjpa/git/trees/8d22bca22015ce6e186c884b27c4f3114b5f4a00"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64","html_url":"https://github.com/apache/openjpa/commit/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64/comments","author":null,"committer":null,"parents":[{"sha":"8464dc4d1d3a5e009fd93d5a0251ea7967696b17","url":"https://api.github.com/repos/apache/openjpa/commits/8464dc4d1d3a5e009fd93d5a0251ea7967696b17","html_url":"https://github.com/apache/openjpa/commit/8464dc4d1d3a5e009fd93d5a0251ea7967696b17"}],"stats":{"total":65,"additions":63,"deletions":2},"files":[{"sha":"5c15aac80c95affba1e2efd3ac6693135b8b4ac9","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestEagerInit.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestEagerInit.java","raw_url":"https://github.com/apache/openjpa/raw/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestEagerInit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestEagerInit.java?ref=9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestEagerInit extends AbstractPersistenceTestCase {\n+    OpenJPAEntityManagerFactorySPI _emf;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        Map<String, String> props = new HashMap<String, String>();\n+        props.put(\"openjpa.InitializeEagerly\", \"true\");\n+        _emf =\n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.createEntityManagerFactory(\"simple-callback-mode\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\", props);\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        // TODO Auto-generated method stub\n+        super.tearDown();\n+        _emf.close();\n+    }\n+\n+    public void testNonNullEmf() {\n+        assertNotNull(_emf);\n+    }\n+}"},{"sha":"6996d8968680c682cafca28ede036c4dc6e99e0b","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=9b5fa5152acd4cd77520b36e06bdfb58d8f3cf64","patch":"@@ -183,7 +183,7 @@\n     private final StoreFacadeTypeRegistry _storeFacadeRegistry = new StoreFacadeTypeRegistry();\n     private BrokerFactoryEventManager _brokerFactoryEventManager = new BrokerFactoryEventManager(this);\n     private Map<String, Object> _peMap; //contains persistence environment-specific info    \n-\n+    private boolean _allowSetLifeCycleEventManager = true;\n     /**\n      * Default constructor. Attempts to load global properties.\n      */\n@@ -1739,7 +1739,17 @@ public LifecycleEventManager getLifecycleEventManagerInstance() {\n     }\n \n     public void setLifecycleEventManager(String lem) {\n-        lifecycleEventManager.setString(lem);\n+        if (_allowSetLifeCycleEventManager) {\n+            _allowSetLifeCycleEventManager = false;\n+            // Only allow this to be called once even if the configuration is frozen. This can happen if a configuration\n+            // is eagerly initialized and validation is being used.\n+            lifecycleEventManager.setDynamic(true);\n+            lifecycleEventManager.setString(lem);\n+            lifecycleEventManager.setDynamic(false);\n+        } else {\n+            // If the configuration is frozen this will result in a warning message and/or an exception.\n+            lifecycleEventManager.setString(lem);\n+        }\n     }\n \n     public boolean getDynamicEnhancementAgent() {"}]}

