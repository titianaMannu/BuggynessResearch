{"sha":"9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","node_id":"MDY6Q29tbWl0MjA2MzY0OjliNjFkZWQxMWJmMWVhNjNjMTc0ZTdhMmQ2M2ZkN2U2ZTVmZTFlNjA=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-26T19:17:10Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2007-03-26T19:17:10Z"},"message":"Simplify breaking up long IN clauses into multiple OR'd IN clauses based on the\ndictionary's IN clause limit\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@522600 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1dac6a1085b45406121a49bf0902772ed8ecdad9","url":"https://api.github.com/repos/apache/openjpa/git/trees/1dac6a1085b45406121a49bf0902772ed8ecdad9"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","html_url":"https://github.com/apache/openjpa/commit/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60/comments","author":null,"committer":null,"parents":[{"sha":"442c1cee4870edc0916191e1872ae8223496e84f","url":"https://api.github.com/repos/apache/openjpa/commits/442c1cee4870edc0916191e1872ae8223496e84f","html_url":"https://github.com/apache/openjpa/commit/442c1cee4870edc0916191e1872ae8223496e84f"}],"stats":{"total":35,"additions":10,"deletions":25},"files":[{"sha":"ba7db3450ea8c57b0b2921459ec40d19bb484fc7","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PagingResultObjectProvider.java?ref=9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","patch":"@@ -392,22 +392,16 @@ private void executeEagerSelects(ClassMapping mapping, BitSet paged,\n     private void createInContains(Select sel, DBDictionary dict, SQLBuffer buf, \n         ClassMapping mapping, Column[] pks, int start, int end) {\n         int inClauseLimit = dict.inClauseLimit;\n-        if ((inClauseLimit == -1) || ((end - start) <= inClauseLimit))\n+        if (inClauseLimit <= 0 || end - start <= inClauseLimit)\n             inContains(sel, buf, mapping, pks, start, end);\n         else {\n             buf.append(\"(\");\n-\n-            int low = start;\n-            for (int i = 1, stop = (end - start)/inClauseLimit; i <= stop; i++) {\n-                inContains(sel, buf, mapping, pks, low, low + inClauseLimit);\n-                low += inClauseLimit;\n-                if (low < end)\n+            for (int low = start, high; low < end; low = high) {\n+                if (low > start)\n                     buf.append(\" OR \");\n+                high = Math.min(low + inClauseLimit, end);\n+                inContains(sel, buf, mapping, pks, low, high);\n             }\n-            // Remaining\n-            if (low < end)\n-                inContains(sel, buf, mapping, pks, low, end);\n-\n             buf.append(\")\");\n         }\n     }"},{"sha":"f05393d39065a0fe90233ce72934986fc1292026","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","status":"modified","additions":5,"deletions":14,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","raw_url":"https://github.com/apache/openjpa/raw/9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/InExpression.java?ref=9b61ded11bf1ea63c174e7a2d63fd7e6e5fe1e60","patch":"@@ -123,25 +123,16 @@ private void createInContains(Select sel, ExpContext ctx, ExpState state,\n         SQLBuffer buf, List list, Column[] cols) {\n \n         int inClauseLimit = ctx.store.getDBDictionary().inClauseLimit;\n-        if ((inClauseLimit == -1) || (list.size() < inClauseLimit))\n+        if (inClauseLimit <= 0 || list.size() <= inClauseLimit)\n             inContains(sel, ctx, state, buf, list, cols);\n         else {\n             buf.append(\"(\");\n-\n-            int low = 0;\n-            for (int i = 1, stop = list.size()/inClauseLimit; i <= stop; i++) {\n-                List subList = list.subList(low, low + inClauseLimit);\n-                inContains(sel, ctx, state, buf, subList, cols);\n-                low += inClauseLimit;\n-                if (low < list.size())\n+            for (int low = 0, high; low < list.size(); low = high) {\n+                if (low > 0)\n                     buf.append(\" OR \");\n+                high = java.lang.Math.min(low + inClauseLimit, list.size());\n+                inContains(sel, ctx, state, buf, list.subList(low, high), cols);\n             }\n-            // Remaining\n-            if (low < list.size()) {\n-                List rem = list.subList(low, list.size());\n-                inContains(sel, ctx, state, buf, rem, cols);\n-            }\n-\n             buf.append(\")\");\n         }\n     }"}]}

