{"sha":"9ba388d243a54186d07445a3bcac8fb0c0da1bca","node_id":"MDY6Q29tbWl0MjA2MzY0OjliYTM4OGQyNDNhNTQxODZkMDc0NDVhM2JjYWM4ZmIwYzBkYTFiY2E=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-17T18:52:37Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2006-09-17T18:52:37Z"},"message":"Use the environment class loader as the metadata loader only if it is not null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@447112 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2025e7ca0977156cbf24c9762638e4497d7ca66","url":"https://api.github.com/repos/apache/openjpa/git/trees/f2025e7ca0977156cbf24c9762638e4497d7ca66"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ba388d243a54186d07445a3bcac8fb0c0da1bca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ba388d243a54186d07445a3bcac8fb0c0da1bca","html_url":"https://github.com/apache/openjpa/commit/9ba388d243a54186d07445a3bcac8fb0c0da1bca","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ba388d243a54186d07445a3bcac8fb0c0da1bca/comments","author":null,"committer":null,"parents":[{"sha":"9b8351c60e9d1378d1f0c6ce5fd254e17e779d62","url":"https://api.github.com/repos/apache/openjpa/commits/9b8351c60e9d1378d1f0c6ce5fd254e17e779d62","html_url":"https://github.com/apache/openjpa/commit/9b8351c60e9d1378d1f0c6ce5fd254e17e779d62"}],"stats":{"total":15,"additions":8,"deletions":7},"files":[{"sha":"c2ec4f2e9ff72ee715443cada1438ca6473a80c7","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/9ba388d243a54186d07445a3bcac8fb0c0da1bca/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9ba388d243a54186d07445a3bcac8fb0c0da1bca/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=9ba388d243a54186d07445a3bcac8fb0c0da1bca","patch":"@@ -232,7 +232,7 @@ private void parseXML(URL xml, Class cls, int mode, ClassLoader envLoader) {\n         ClassLoader loader = repos.getConfiguration().\n             getClassResolverInstance().getClassLoader(cls, envLoader);\n         XMLPersistenceMetaDataParser xmlParser = getXMLParser();\n-        xmlParser.setClassLoader(envLoader);\n+        xmlParser.setClassLoader(envLoader != null ? envLoader : loader);\n         xmlParser.setEnvClassLoader(envLoader);\n         xmlParser.setMode(mode);\n         try {\n@@ -276,15 +276,16 @@ public Class getQueryScope(String queryName, ClassLoader loader) {\n                 (queryName, (NamedQuery) cls.getAnnotation(NamedQuery.class)))\n                 return cls;\n             if (cls.isAnnotationPresent(NamedQueries.class) &&\n-                hasNamedQuery(queryName, ((NamedQueries) cls.getAnnotation\n-                    (NamedQueries.class)).value()))\n+                hasNamedQuery(queryName, ((NamedQueries) cls.\n+                    getAnnotation(NamedQueries.class)).value()))\n                 return cls;\n-            if (cls.isAnnotationPresent(NamedNativeQuery.class) && hasNamedNativeQuery\n-                (queryName, (NamedNativeQuery) cls.getAnnotation(NamedNativeQuery.class)))\n+            if (cls.isAnnotationPresent(NamedNativeQuery.class) &&\n+                hasNamedNativeQuery(queryName, (NamedNativeQuery) cls.\n+                    getAnnotation(NamedNativeQuery.class)))\n                 return cls;\n             if (cls.isAnnotationPresent(NamedNativeQueries.class) &&\n-                hasNamedNativeQuery(queryName, ((NamedNativeQueries) cls.getAnnotation\n-                    (NamedNativeQueries.class)).value()))\n+                hasNamedNativeQuery(queryName, ((NamedNativeQueries) cls.\n+                    getAnnotation(NamedNativeQueries.class)).value()))\n                 return cls;\n         }\n         return null;"}]}

