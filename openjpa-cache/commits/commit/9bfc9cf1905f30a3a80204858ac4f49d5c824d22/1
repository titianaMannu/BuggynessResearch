{"sha":"9bfc9cf1905f30a3a80204858ac4f49d5c824d22","node_id":"MDY6Q29tbWl0MjA2MzY0OjliZmM5Y2YxOTA1ZjMwYTNhODAyMDQ4NThhYzRmNDlkNWM4MjRkMjI=","commit":{"author":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-03-09T23:07:49Z"},"committer":{"name":"Marc Prud'hommeaux","email":"mprudhom@apache.org","date":"2007-03-09T23:07:49Z"},"message":"OPENJPA-166: Added new setRollbackOnly(Throwable cause) flag so the Broker can track the reason for why the transaction would be marked for rollback, and correspondingly added reporting of the cause in LocalManagedRuntime, as well as support for WLS's corresponding support in WLSManagedRuntime.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@516597 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d838c017ae79f48cb7f6e986edb9b762a093416d","url":"https://api.github.com/repos/apache/openjpa/git/trees/d838c017ae79f48cb7f6e986edb9b762a093416d"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9bfc9cf1905f30a3a80204858ac4f49d5c824d22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9bfc9cf1905f30a3a80204858ac4f49d5c824d22","html_url":"https://github.com/apache/openjpa/commit/9bfc9cf1905f30a3a80204858ac4f49d5c824d22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/comments","author":null,"committer":null,"parents":[{"sha":"0b90c67a8bb2932037c4311e8afb7d85a6c3902e","url":"https://api.github.com/repos/apache/openjpa/commits/0b90c67a8bb2932037c4311e8afb7d85a6c3902e","html_url":"https://github.com/apache/openjpa/commit/0b90c67a8bb2932037c4311e8afb7d85a6c3902e"}],"stats":{"total":1010,"additions":616,"deletions":394},"files":[{"sha":"f8f4bd64507b7c8302aaaf70959f23f2397455a3","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/AutomaticManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -190,4 +190,26 @@ public void startConfiguration() {\n \r\n     public void endConfiguration() {\r\n     }\r\n+\r\n+    public void setRollbackOnly(Throwable cause)\r\n+        throws Exception {\r\n+        // check to see if the runtime is cached\r\n+        if (_runtime == null)\r\n+            getTransactionManager();\r\n+\r\n+        if (_runtime != null)\r\n+            _runtime.setRollbackOnly(cause);\r\n+    }\r\n+\r\n+    public Throwable getRollbackCause()\r\n+        throws Exception {\r\n+        // check to see if the runtime is cached\r\n+        if (_runtime == null)\r\n+            getTransactionManager();\r\n+\r\n+        if (_runtime != null)\r\n+            return _runtime.getRollbackCause();\r\n+\r\n+        return null;\r\n+    }\r\n }\r"},{"sha":"fefa4623c72dab49f5397e489ccdc20916a1b4ea","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/InvocationManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -76,4 +76,16 @@ public void startConfiguration() {\n \n     public void endConfiguration() {\n \t}\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        getTransactionManager().getTransaction().setRollbackOnly();\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        return null;\n+    }\n }"},{"sha":"18792ad06e7d139633903be11cdc029d058ee23f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/JNDIManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -61,4 +61,16 @@ public TransactionManager getTransactionManager() throws Exception {\n         }\n         return _tm;\n     }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        getTransactionManager().getTransaction().setRollbackOnly();\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        return null;\n+    }\n }"},{"sha":"d5822d82797355031820deefc9c138513c5fe436","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/ManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -33,4 +33,24 @@\n      */\n     public TransactionManager getTransactionManager()\n         throws Exception;\n+\n+    /** \n+     * Sets the rollback only flag on the current transaction. If the\n+     * TransactionManager is capable of tracking the cause of the\n+     * rollback-only flag, it will also pass along cause information.\n+     *  \n+     * @param  cause  the Throwable that caused the transaction to be\n+     *                marked for rollback, or null of none is known\n+     */\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception;\n+\n+    /** \n+     * Returns the Throwable that caused the current transaction to be\n+     * marked for rollback, provided that any exists.\n+     *\n+     * @return the Throwable cause, or null if none\n+     */\n+    public Throwable getRollbackCause()\n+        throws Exception;\n }"},{"sha":"50c1c9426f553ef3f9ac6aef0cc9e124551018c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/SunOneManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -43,4 +43,16 @@ public TransactionManager getTransactionManager()\n         Object sw = _switchMeth.invoke(null, (Object[]) null);\n         return (TransactionManager) _txManagerMeth.invoke(sw, (Object[]) null);\n     }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        getTransactionManager().getTransaction().setRollbackOnly();\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        return null;\n+    }\n }"},{"sha":"0dbf09fadd7c02b5f50786450ce2bcb9f162d7bf","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","status":"modified","additions":385,"deletions":373,"changes":758,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WASManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -1,373 +1,373 @@\n-/*\r\n- * Copyright 2006 The Apache Software Foundation.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.openjpa.ee;\r\n-\r\n-import java.io.IOException;\r\n+/*\n+ * Copyright 2006 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.openjpa.ee;\n+\n+import java.io.IOException;\n import java.io.InputStream;\n-import java.lang.reflect.Method;\r\n-\r\n-import javax.naming.Context;\r\n-import javax.naming.InitialContext;\r\n-import javax.transaction.HeuristicMixedException;\r\n-import javax.transaction.HeuristicRollbackException;\r\n-import javax.transaction.InvalidTransactionException;\r\n-import javax.transaction.NotSupportedException;\r\n-import javax.transaction.RollbackException;\r\n-import javax.transaction.Status;\r\n-import javax.transaction.Synchronization;\r\n-import javax.transaction.SystemException;\r\n-import javax.transaction.Transaction;\r\n-import javax.transaction.xa.XAResource;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.lib.conf.Configurable;\r\n-import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.log.Log;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.util.InvalidStateException;\r\n-import org.apache.openjpa.util.NoTransactionException;\r\n-\r\n-import serp.bytecode.BCClass;\r\n-import serp.bytecode.Project;\r\n-\r\n-/**\r\n- * {@link ManagedRuntime} implementation that allows synchronization with a\r\n- * WebSphere managed transaction.\r\n- *\r\n- * <P>\r\n- * WebSphere Application Server does not expose the TransactionManager to an\r\n- * application. Instead it provides a proprietary interface to register for\r\n- * synchronization and obtain transaction ids.\r\n- *\r\n- * <P>\r\n- * WASManagedRuntime provides the wrapper classes needed to interact with the\r\n- * WAS proprietary interface and the OpenJPA kernel.\r\n- *\r\n- * @author Michael Dick, Kevin Sutter\r\n- */\r\n-public class WASManagedRuntime implements ManagedRuntime, Configurable {\r\n-\r\n-    private static Localizer _loc =\r\n-        Localizer.forPackage(WASManagedRuntime.class);\r\n-\r\n-    private Object _extendedTransaction = null;\r\n-    private Method _getGlobalId = null;\r\n-    private Method _registerSync = null;\r\n-    private OpenJPAConfiguration _conf = null;\r\n-    private Log _log = null;\r\n-\r\n-    /**\r\n-     * Gets an extendedJTATransaction from JNDI and creates a transaction\r\n-     * wrapper\r\n-     */\r\n-    public javax.transaction.TransactionManager getTransactionManager()\r\n-        throws Exception {\r\n-        return new WASTransaction();\r\n-    }\r\n-\r\n-    /**\r\n-     * Transaction wrapper for WebSphere. WebSphere exposes a subset of the\r\n-     * Transaction and TransactionManager interfaces to the customer. Any\r\n-     * methods which are not exposed by WebSphere will throw an\r\n-     * IllegalStateException to the caller.\r\n-     *\r\n-     * <P>\r\n-     * Methods supported by WAS are\r\n-     * <UL>\r\n-     * <LI>RegisterSynchronization </LI>\r\n-     * <LI>GetStatus</LI>\r\n-     * </UL>\r\n-     */\r\n-    class WASTransaction implements javax.transaction.TransactionManager,\r\n-        javax.transaction.Transaction {\r\n-\r\n-        public int getStatus() throws SystemException {\r\n-            int rval = Status.STATUS_UNKNOWN;\r\n-            try {\r\n-                if (getGlobalId() != null) {\r\n-                    rval = Status.STATUS_ACTIVE;\r\n-                } else {\r\n-                    rval = Status.STATUS_NO_TRANSACTION;\r\n-                }\r\n-            } catch (Exception e) {\r\n-                throw new NoTransactionException(_loc\r\n-                        .get(\"was-transaction-id-exception\")).setCause(e);\r\n-            }\r\n-            return rval;\r\n-        }\r\n-\r\n-        /**\r\n-         * Provides a Transaction wrapper. The transaction wrapper mayb only be\r\n-         * used to determine the status of the current transaction. WebSphere\r\n-         * does not allow direct control of container transactions.\r\n-         *\r\n-         * @return A WebSphere transaction wrapper.\r\n-         */\r\n-        public Transaction getTransaction() throws SystemException {\r\n-            return this;\r\n-        }\r\n-\r\n-        /**\r\n-         * Register for synchronization with a WebSphere managed transaction via\r\n-         * the extendedJTATransaction interface.\r\n-         */\r\n-        public void registerSynchronization(Synchronization arg0)\r\n-            throws IllegalStateException, RollbackException, SystemException {\r\n-            if (_extendedTransaction != null) {\r\n-                try {\r\n-                    _registerSync.invoke(_extendedTransaction,\r\n-                        new Object[] { new WASSynchronization(arg0) });\r\n-                } catch (Exception e) {\r\n-                    throw new InvalidStateException(_loc\r\n-                        .get(\"was-reflection-exception\")).setCause(e);\r\n-                }\r\n-            } else {\r\n-                throw new InvalidStateException(_loc.get(\"was-lookup-error\"));\r\n-            }\r\n-        }\r\n-\r\n-        /**\r\n-         * Gets the GlobalTransaction ID of the WebSphere managed transaction.\r\n-         * If no Global Transaction is active null will be returned.\r\n-         *\r\n-         * @return Null if a global transaction is not active or if an error\r\n-         *         occurs. byte[] id if a global transaction is active.\r\n-         */\r\n-        private byte[] getGlobalId() {\r\n-            byte[] rval = null;\r\n-            try {\r\n-                rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\r\n-            } catch (Exception e) {\r\n-                throw new InvalidStateException(_loc\r\n-                    .get(\"was-reflection-exception\")).setCause(e);\r\n-            }\r\n-            return rval;\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Throws an\r\n-         * IllegalStateException\r\n-         */\r\n-        public void begin() throws NotSupportedException, SystemException {\r\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n-                \"begin\"));\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Throws an\r\n-         * IllegalStateException\r\n-         */\r\n-        public void commit() throws HeuristicMixedException,\r\n-            HeuristicRollbackException, IllegalStateException,\r\n-            RollbackException, SecurityException, SystemException {\r\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n-                \"commit\"));\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Throws an\r\n-         * IllegalStateException\r\n-         */\r\n-        public void resume(Transaction arg0) throws IllegalStateException,\r\n-            InvalidTransactionException, SystemException {\r\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n-                \"resume\"));\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Log a\r\n-         * trace instead of throwing an exception. Rollback may be used in\r\n-         * some error paths, throwing another exception may result in the\r\n-         * original exception being lost.\r\n-         */\r\n-        public void rollback() throws IllegalStateException, SecurityException,\r\n-            SystemException {\r\n-            if (_log.isTraceEnabled()) {\r\n-                _log.trace(_loc.get(\"was-unsupported-op\", \"rollback\"));\r\n-            }\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Log a\r\n-         * trace instead of throwing an exception. SetRollbackOnly may be used\r\n-         * in some error paths, throwing another exception may result in the\r\n-         * original exception being lost.\r\n-         */\r\n-        public void setRollbackOnly() throws IllegalStateException,\r\n-            SystemException {\r\n-            if (_log.isTraceEnabled()) {\r\n-                _log.trace(_loc.get(\"was-unsupported-op\", \"setRollbackOnly\"));\r\n-            }\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Throws an\r\n-         * IllegalStateException\r\n-         */\r\n-        public void setTransactionTimeout(int arg0) throws SystemException {\r\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n-                \"setTransactionTimeout\"));\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Throws an\r\n-         * IllegalStateException\r\n-         */\r\n-        public Transaction suspend() throws SystemException {\r\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n-                \"suspend\"));\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Throws an\r\n-         * IllegalStateException\r\n-         */\r\n-        public boolean delistResource(XAResource arg0, int arg1)\r\n-            throws IllegalStateException, SystemException {\r\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n-                \"delistResource\"));\r\n-        }\r\n-\r\n-        /**\r\n-         * Unimplemented, WAS does not provide this level of control. Throws an\r\n-         * IllegalStateException\r\n-         */\r\n-        public boolean enlistResource(XAResource arg0)\r\n-            throws IllegalStateException, RollbackException, SystemException {\r\n-            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\r\n-                \"enlistResource\"));\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * WASSynchronization wrapper. This class translates the WAS proprietary\r\n-     * synchronization callback methods to javax.transaction.Synchronization\r\n-     * methods.\r\n-     *\r\n-     * <P>\r\n-     * This class implements the\r\n-     * com.ibm.websphere.jtaextensions.SynchronizationCallback interface. Since\r\n-     * SynchronizationCallback is not available at compile time we use Serp to\r\n-     * add the interface to the class after all classes have been compiled.\r\n-     *\r\n-     * <P>\r\n-     * SynchronizationCallback is expected to be available whenever this class\r\n-     * is instantiated, therefore this class should only be used when running in\r\n-     * WebSphere.\r\n-     *\r\n-     * @see org.apache.openjpa.util.WASTransformer\r\n-     */\r\n-    static class WASSynchronization {\r\n-\r\n-        Synchronization _sync = null;\r\n-\r\n-        WASSynchronization(Synchronization sync) {\r\n-            _sync = sync;\r\n-        }\r\n-\r\n-        /**\r\n-         * AfterCompletion wrapper. Translates the WAS proprietary call to a\r\n-         * javax.transaction.Synchronization call.\r\n-         */\r\n-        public void afterCompletion(int localTransactionId,\r\n-            byte[] globalTransactionId, boolean committed) {\r\n-            if (_sync != null) {\r\n-                if (committed) {\r\n-                    _sync.afterCompletion(Status.STATUS_COMMITTED);\r\n-                } else {\r\n-                    _sync.afterCompletion(Status.STATUS_UNKNOWN);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        /**\r\n-         * BeforeCompletion wrapper. Translates WAS proprietary call to a\r\n-         * javax.transaction.Synchronization call.\r\n-         */\r\n-        public void beforeCompletion(int arg0, byte[] arg1) {\r\n-            if (_sync != null) {\r\n-                _sync.beforeCompletion();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Caches a copy of the configuration. The configuration is used to obtain\r\n-     * the logger and classloader.\r\n-     */\r\n-    public void setConfiguration(Configuration conf) {\r\n-        _conf = (OpenJPAConfiguration) conf;\r\n-        _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\r\n-    }\r\n-\r\n-    /**\r\n-     * EndConfiguration stub.\r\n-     */\r\n-    public void endConfiguration() {\r\n-        try {\r\n-            Context ctx = new InitialContext();\r\n-            try {\r\n-                _extendedTransaction =\r\n-                    ctx.lookup(\"java:comp/websphere/ExtendedJTATransaction\");\r\n-            } finally {\r\n-                ctx.close();\r\n-            }\r\n-\r\n-            ClassLoader loader = _conf.getClassResolverInstance()\r\n-                .getClassLoader(getClass(), null);\r\n-\r\n-            Class extendedJTATransaction = Class.forName(\r\n-                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\r\n-                loader);\r\n-\r\n-            _registerSync = extendedJTATransaction.getMethod(\r\n-                \"registerSynchronizationCallbackForCurrentTran\",\r\n-                new Class[] { Class.forName(\r\n-                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\r\n-                    true, loader) });\r\n-            _getGlobalId = extendedJTATransaction.\r\n-                getMethod(\"getGlobalId\", null);\r\n-        } catch (Exception e) {\r\n-            throw new InvalidStateException(_loc\r\n-                .get(\"was-reflection-exception\"), e).setFatal(true);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * StartConfiguration stub.\r\n-     */\r\n-    public void startConfiguration() {\r\n-        // Nothing to do\r\n-    }\r\n-\r\n-    /**\r\n-     * Class that will be modified\r\n-     */\r\n-    static final String CLASS =\r\n-        \"org.apache.openjpa.ee.WASManagedRuntime$WASSynchronization\";\r\n-\r\n-    /**\r\n-     * Interface which will be added\r\n-     */\r\n-    static final String INTERFACE =\r\n-        \"com.ibm.websphere.jtaextensions.SynchronizationCallback\";\r\n-\r\n-    public static void main(String[] args)\r\n-        throws IOException {\r\n-        Project project = new Project();\r\n+import java.lang.reflect.Method;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.transaction.HeuristicMixedException;\n+import javax.transaction.HeuristicRollbackException;\n+import javax.transaction.InvalidTransactionException;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.RollbackException;\n+import javax.transaction.Status;\n+import javax.transaction.Synchronization;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+import javax.transaction.xa.XAResource;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.lib.conf.Configurable;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.InvalidStateException;\n+import org.apache.openjpa.util.NoTransactionException;\n+\n+import serp.bytecode.BCClass;\n+import serp.bytecode.Project;\n+\n+/**\n+ * {@link ManagedRuntime} implementation that allows synchronization with a\n+ * WebSphere managed transaction.\n+ *\n+ * <P>\n+ * WebSphere Application Server does not expose the TransactionManager to an\n+ * application. Instead it provides a proprietary interface to register for\n+ * synchronization and obtain transaction ids.\n+ *\n+ * <P>\n+ * WASManagedRuntime provides the wrapper classes needed to interact with the\n+ * WAS proprietary interface and the OpenJPA kernel.\n+ *\n+ * @author Michael Dick, Kevin Sutter\n+ */\n+public class WASManagedRuntime implements ManagedRuntime, Configurable {\n+\n+    private static Localizer _loc =\n+        Localizer.forPackage(WASManagedRuntime.class);\n+\n+    private Object _extendedTransaction = null;\n+    private Method _getGlobalId = null;\n+    private Method _registerSync = null;\n+    private OpenJPAConfiguration _conf = null;\n+    private Log _log = null;\n+\n+    /**\n+     * Gets an extendedJTATransaction from JNDI and creates a transaction\n+     * wrapper\n+     */\n+    public javax.transaction.TransactionManager getTransactionManager()\n+        throws Exception {\n+        return new WASTransaction();\n+    }\n+\n+    /**\n+     * Transaction wrapper for WebSphere. WebSphere exposes a subset of the\n+     * Transaction and TransactionManager interfaces to the customer. Any\n+     * methods which are not exposed by WebSphere will throw an\n+     * IllegalStateException to the caller.\n+     *\n+     * <P>\n+     * Methods supported by WAS are\n+     * <UL>\n+     * <LI>RegisterSynchronization </LI>\n+     * <LI>GetStatus</LI>\n+     * </UL>\n+     */\n+    class WASTransaction implements javax.transaction.TransactionManager,\n+        javax.transaction.Transaction {\n+\n+        public int getStatus() throws SystemException {\n+            int rval = Status.STATUS_UNKNOWN;\n+            try {\n+                if (getGlobalId() != null) {\n+                    rval = Status.STATUS_ACTIVE;\n+                } else {\n+                    rval = Status.STATUS_NO_TRANSACTION;\n+                }\n+            } catch (Exception e) {\n+                throw new NoTransactionException(_loc\n+                        .get(\"was-transaction-id-exception\")).setCause(e);\n+            }\n+            return rval;\n+        }\n+\n+        /**\n+         * Provides a Transaction wrapper. The transaction wrapper mayb only be\n+         * used to determine the status of the current transaction. WebSphere\n+         * does not allow direct control of container transactions.\n+         *\n+         * @return A WebSphere transaction wrapper.\n+         */\n+        public Transaction getTransaction() throws SystemException {\n+            return this;\n+        }\n+\n+        /**\n+         * Register for synchronization with a WebSphere managed transaction via\n+         * the extendedJTATransaction interface.\n+         */\n+        public void registerSynchronization(Synchronization arg0)\n+            throws IllegalStateException, RollbackException, SystemException {\n+            if (_extendedTransaction != null) {\n+                try {\n+                    _registerSync.invoke(_extendedTransaction,\n+                        new Object[] { new WASSynchronization(arg0) });\n+                } catch (Exception e) {\n+                    throw new InvalidStateException(_loc\n+                        .get(\"was-reflection-exception\")).setCause(e);\n+                }\n+            } else {\n+                throw new InvalidStateException(_loc.get(\"was-lookup-error\"));\n+            }\n+        }\n+\n+        /**\n+         * Gets the GlobalTransaction ID of the WebSphere managed transaction.\n+         * If no Global Transaction is active null will be returned.\n+         *\n+         * @return Null if a global transaction is not active or if an error\n+         *         occurs. byte[] id if a global transaction is active.\n+         */\n+        private byte[] getGlobalId() {\n+            byte[] rval = null;\n+            try {\n+                rval = (byte[]) _getGlobalId.invoke(_extendedTransaction, null);\n+            } catch (Exception e) {\n+                throw new InvalidStateException(_loc\n+                    .get(\"was-reflection-exception\")).setCause(e);\n+            }\n+            return rval;\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Throws an\n+         * IllegalStateException\n+         */\n+        public void begin() throws NotSupportedException, SystemException {\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n+                \"begin\"));\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Throws an\n+         * IllegalStateException\n+         */\n+        public void commit() throws HeuristicMixedException,\n+            HeuristicRollbackException, IllegalStateException,\n+            RollbackException, SecurityException, SystemException {\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n+                \"commit\"));\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Throws an\n+         * IllegalStateException\n+         */\n+        public void resume(Transaction arg0) throws IllegalStateException,\n+            InvalidTransactionException, SystemException {\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n+                \"resume\"));\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Log a\n+         * trace instead of throwing an exception. Rollback may be used in\n+         * some error paths, throwing another exception may result in the\n+         * original exception being lost.\n+         */\n+        public void rollback() throws IllegalStateException, SecurityException,\n+            SystemException {\n+            if (_log.isTraceEnabled()) {\n+                _log.trace(_loc.get(\"was-unsupported-op\", \"rollback\"));\n+            }\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Log a\n+         * trace instead of throwing an exception. SetRollbackOnly may be used\n+         * in some error paths, throwing another exception may result in the\n+         * original exception being lost.\n+         */\n+        public void setRollbackOnly() throws IllegalStateException,\n+            SystemException {\n+            if (_log.isTraceEnabled()) {\n+                _log.trace(_loc.get(\"was-unsupported-op\", \"setRollbackOnly\"));\n+            }\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Throws an\n+         * IllegalStateException\n+         */\n+        public void setTransactionTimeout(int arg0) throws SystemException {\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n+                \"setTransactionTimeout\"));\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Throws an\n+         * IllegalStateException\n+         */\n+        public Transaction suspend() throws SystemException {\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n+                \"suspend\"));\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Throws an\n+         * IllegalStateException\n+         */\n+        public boolean delistResource(XAResource arg0, int arg1)\n+            throws IllegalStateException, SystemException {\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n+                \"delistResource\"));\n+        }\n+\n+        /**\n+         * Unimplemented, WAS does not provide this level of control. Throws an\n+         * IllegalStateException\n+         */\n+        public boolean enlistResource(XAResource arg0)\n+            throws IllegalStateException, RollbackException, SystemException {\n+            throw new InvalidStateException(_loc.get(\"was-unsupported-op\",\n+                \"enlistResource\"));\n+        }\n+    }\n+\n+    /**\n+     * WASSynchronization wrapper. This class translates the WAS proprietary\n+     * synchronization callback methods to javax.transaction.Synchronization\n+     * methods.\n+     *\n+     * <P>\n+     * This class implements the\n+     * com.ibm.websphere.jtaextensions.SynchronizationCallback interface. Since\n+     * SynchronizationCallback is not available at compile time we use Serp to\n+     * add the interface to the class after all classes have been compiled.\n+     *\n+     * <P>\n+     * SynchronizationCallback is expected to be available whenever this class\n+     * is instantiated, therefore this class should only be used when running in\n+     * WebSphere.\n+     *\n+     * @see org.apache.openjpa.util.WASTransformer\n+     */\n+    static class WASSynchronization {\n+\n+        Synchronization _sync = null;\n+\n+        WASSynchronization(Synchronization sync) {\n+            _sync = sync;\n+        }\n+\n+        /**\n+         * AfterCompletion wrapper. Translates the WAS proprietary call to a\n+         * javax.transaction.Synchronization call.\n+         */\n+        public void afterCompletion(int localTransactionId,\n+            byte[] globalTransactionId, boolean committed) {\n+            if (_sync != null) {\n+                if (committed) {\n+                    _sync.afterCompletion(Status.STATUS_COMMITTED);\n+                } else {\n+                    _sync.afterCompletion(Status.STATUS_UNKNOWN);\n+                }\n+            }\n+        }\n+\n+        /**\n+         * BeforeCompletion wrapper. Translates WAS proprietary call to a\n+         * javax.transaction.Synchronization call.\n+         */\n+        public void beforeCompletion(int arg0, byte[] arg1) {\n+            if (_sync != null) {\n+                _sync.beforeCompletion();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Caches a copy of the configuration. The configuration is used to obtain\n+     * the logger and classloader.\n+     */\n+    public void setConfiguration(Configuration conf) {\n+        _conf = (OpenJPAConfiguration) conf;\n+        _log = _conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+    }\n+\n+    /**\n+     * EndConfiguration stub.\n+     */\n+    public void endConfiguration() {\n+        try {\n+            Context ctx = new InitialContext();\n+            try {\n+                _extendedTransaction =\n+                    ctx.lookup(\"java:comp/websphere/ExtendedJTATransaction\");\n+            } finally {\n+                ctx.close();\n+            }\n+\n+            ClassLoader loader = _conf.getClassResolverInstance()\n+                .getClassLoader(getClass(), null);\n+\n+            Class extendedJTATransaction = Class.forName(\n+                \"com.ibm.websphere.jtaextensions.ExtendedJTATransaction\", true,\n+                loader);\n+\n+            _registerSync = extendedJTATransaction.getMethod(\n+                \"registerSynchronizationCallbackForCurrentTran\",\n+                new Class[] { Class.forName(\n+                    \"com.ibm.websphere.jtaextensions.SynchronizationCallback\",\n+                    true, loader) });\n+            _getGlobalId = extendedJTATransaction.\n+                getMethod(\"getGlobalId\", null);\n+        } catch (Exception e) {\n+            throw new InvalidStateException(_loc\n+                .get(\"was-reflection-exception\"), e).setFatal(true);\n+        }\n+    }\n+\n+    /**\n+     * StartConfiguration stub.\n+     */\n+    public void startConfiguration() {\n+        // Nothing to do\n+    }\n+\n+    /**\n+     * Class that will be modified\n+     */\n+    static final String CLASS =\n+        \"org.apache.openjpa.ee.WASManagedRuntime$WASSynchronization\";\n+\n+    /**\n+     * Interface which will be added\n+     */\n+    static final String INTERFACE =\n+        \"com.ibm.websphere.jtaextensions.SynchronizationCallback\";\n+\n+    public static void main(String[] args)\n+        throws IOException {\n+        Project project = new Project();\n         \n         InputStream in = WASManagedRuntime.class.getClassLoader()\n             .getResourceAsStream(CLASS.replace('.', '/') + \".class\");\n@@ -382,7 +382,19 @@ public static void main(String[] args)\n         \t\t}\n         \t}\n         }\n-        bcClass.declareInterface(INTERFACE);\r\n-        bcClass.write();\r\n-    }\r\n-}\r\n+        bcClass.declareInterface(INTERFACE);\n+        bcClass.write();\n+    }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        getTransactionManager().getTransaction().setRollbackOnly();\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        // there is no generic support for setting the rollback cause\n+        return null;\n+    }\n+}"},{"sha":"44404624b2294a8756aabb81b28bc81d5139a7af","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/ee/WLSManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -16,6 +16,7 @@\n package org.apache.openjpa.ee;\n \n import java.lang.reflect.Method;\n+import javax.transaction.Transaction;\n import javax.transaction.TransactionManager;\n \n /**\n@@ -45,4 +46,34 @@ public TransactionManager getTransactionManager()\n         Object o = _txHelperMeth.invoke(null, null);\n         return (TransactionManager) _txManagerMeth.invoke(o, null);\n     }\n+\n+    public void setRollbackOnly(Throwable cause)\n+        throws Exception {\n+        Transaction transaction = getTransactionManager().getTransaction();\n+        try {\n+            // try to use reflection to call the setRollbackOnly(Throwable)\n+            // method in weblogic.transaction.Transaction\n+            transaction.getClass().\n+                getMethod(\"setRollbackOnly\", new Class[] { Throwable.class }).\n+                    invoke(transaction, new Object[] { cause });\n+        } catch (Throwable e) {\n+            // some problem occurred: fall back to the traditional call\n+            transaction.setRollbackOnly();\n+        }\n+    }\n+\n+    public Throwable getRollbackCause()\n+        throws Exception {\n+        Transaction transaction = getTransactionManager().getTransaction();\n+        try {\n+            // try to use reflection to call the getRollbackReason()\n+            // method in weblogic.transaction.Transaction\n+            return (Throwable) transaction.getClass().\n+                getMethod(\"getRollbackReason\", new Class[0]).\n+                    invoke(transaction, new Object[0]);\n+        } catch (Throwable e) {\n+            // some problem occurred: just return null\n+            return null;\n+        }\n+    }\n }"},{"sha":"4756cdf184fcb818686aa3a95329c14e32fdac77","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/Broker.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -339,6 +339,24 @@ public void setImplicitBehavior(OpCallbacks call,\n      */\n     public void setRollbackOnly();\n \n+    /**\n+     * Mark the current transaction for rollback with the specified cause\n+     * of the rollback.\n+     *\n+     * @since 0.9.7\n+     */\n+    public void setRollbackOnly(Throwable cause);\n+\n+    /** \n+     * Returns the Throwable that caused the transaction to be\n+     * marked for rollback. \n+     *  \n+     * @return the Throwable, or null if none was given\n+     *\n+     * @since 0.9.7\n+     */\n+    public Throwable getRollbackCause();\n+\n     /**\n      * Set a transactional savepoint where operations after this savepoint\n      * will be rolled back."},{"sha":"f7f1bd7a0b3177e21d00cc00e88e3065907ddc7e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":38,"deletions":11,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -682,7 +682,7 @@ private void handleCallbackExceptions(Exception[] exceps, int mode) {\n                 setNestedThrowables(exceps);\n         if ((mode & CALLBACK_ROLLBACK) != 0 && (_flags & FLAG_ACTIVE) != 0) {\n             ce.setFatal(true);\n-            setRollbackOnlyInternal();\n+            setRollbackOnlyInternal(ce);\n         }\n         if ((mode & CALLBACK_LOG) != 0 && _log.isWarnEnabled())\n             _log.warn(ce);\n@@ -1205,12 +1205,12 @@ private void beginInternal() {\n         } catch (OpenJPAException ke) {\n             // if we already started the transaction, don't let it commit\n             if ((_flags & FLAG_ACTIVE) != 0)\n-                setRollbackOnlyInternal();\n+                setRollbackOnlyInternal(ke);\n             throw ke.setFatal(true);\n         } catch (RuntimeException re) {\n             // if we already started the transaction, don't let it commit\n             if ((_flags & FLAG_ACTIVE) != 0)\n-                setRollbackOnlyInternal();\n+                setRollbackOnlyInternal(re);\n             throw new StoreException(re).setFatal(true);\n         }\n \n@@ -1408,11 +1408,38 @@ public boolean getRollbackOnly() {\n         }\n     }\n \n+    public Throwable getRollbackCause() {\n+        beginOperation(true);\n+        try {\n+            if ((_flags & FLAG_ACTIVE) == 0)\n+                return null;\n+\n+            javax.transaction.Transaction trans =\n+                _runtime.getTransactionManager().getTransaction();\n+            if (trans == null)\n+                return null;\n+            if (trans.getStatus() == Status.STATUS_MARKED_ROLLBACK)\n+                return _runtime.getRollbackCause();\n+\n+            return null;\n+        } catch (OpenJPAException ke) {\n+            throw ke;\n+        } catch (Exception e) {\n+            throw new GeneralException(e);\n+        } finally {\n+            endOperation();\n+        }\n+    }\n+\n     public void setRollbackOnly() {\n+        setRollbackOnly(new UserException());\n+    }\n+\n+    public void setRollbackOnly(Throwable cause) {\n         beginOperation(true);\n         try {\n             assertTransactionOperation();\n-            setRollbackOnlyInternal();\n+            setRollbackOnlyInternal(cause);\n         } finally {\n             endOperation();\n         }\n@@ -1421,13 +1448,13 @@ public void setRollbackOnly() {\n     /**\n      * Mark the current transaction as rollback-only.\n      */\n-    private void setRollbackOnlyInternal() {\n+    private void setRollbackOnlyInternal(Throwable cause) {\n         try {\n             javax.transaction.Transaction trans =\n                 _runtime.getTransactionManager().getTransaction();\n             if (trans == null)\n                 throw new InvalidStateException(_loc.get(\"null-trans\"));\n-            trans.setRollbackOnly();\n+            _runtime.setRollbackOnly(cause);\n         } catch (OpenJPAException ke) {\n             throw ke;\n         } catch (Exception e) {\n@@ -1613,11 +1640,11 @@ public void flush() {\n                 _flags |= FLAG_FLUSHED;\n             } catch (OpenJPAException ke) {\n                 // rollback on flush error; objects may be in inconsistent state\n-                setRollbackOnly();\n+                setRollbackOnly(ke);\n                 throw ke.setFatal(true);\n             } catch (RuntimeException re) {\n                 // rollback on flush error; objects may be in inconsistent state\n-                setRollbackOnly();\n+                setRollbackOnly(re);\n                 throw new StoreException(re).setFatal(true);\n             }\n         }\n@@ -3145,7 +3172,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n             try {\n                 return new AttachManager(this, copyNew, call).attach(obj);\n             } catch (OptimisticException oe) {\n-                setRollbackOnly();\n+                setRollbackOnly(oe);\n                 throw oe.setFatal(true);\n             } catch (OpenJPAException ke) {\n                 throw ke;\n@@ -3172,7 +3199,7 @@ public Object attach(Object obj, boolean copyNew, OpCallbacks call) {\n             try {\n                 return new AttachManager(this, copyNew, call).attachAll(objs);\n             } catch (OptimisticException oe) {\n-                setRollbackOnly();\n+                setRollbackOnly(oe);\n                 throw oe.setFatal(true);\n             } catch (OpenJPAException ke) {\n                 throw ke;\n@@ -3609,7 +3636,7 @@ public boolean cancelAll() {\n             // transaction to complete before we have a chance to set the\n             // rollback only flag\n             if ((_flags & FLAG_STORE_FLUSHING) != 0)\n-                setRollbackOnlyInternal();\n+                setRollbackOnlyInternal(new UserException());\n             return _store.cancelAll();\n         } catch (OpenJPAException ke) {\n             throw ke;"},{"sha":"b27c16a2026b03b4666885ee991611248898b4df","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DelegatingBroker.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -906,6 +906,22 @@ public void setRollbackOnly() {\n         }\n     }\n \n+    public void setRollbackOnly(Throwable cause) {\n+        try {\n+            _broker.setRollbackOnly(cause);\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n+    public Throwable getRollbackCause() {\n+        try {\n+            return _broker.getRollbackCause();\n+        } catch (RuntimeException re) {\n+            throw translate(re);\n+        }\n+    }\n+\n     public boolean getRollbackOnly() {\n         try {\n             return _broker.getRollbackOnly();"},{"sha":"9a25aa28f24e356f949fabae681e31c52d7b3ac0","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/LocalManagedRuntime.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -28,6 +28,7 @@\n import org.apache.openjpa.util.InternalException;\n import org.apache.openjpa.util.InvalidStateException;\n import org.apache.openjpa.util.StoreException;\n+import org.apache.openjpa.util.UserException;\n \n /**\n  * Uses a local implementation of the {@link TransactionManager} interface.\n@@ -45,7 +46,7 @@\n     private Synchronization _broker = null;\n     private Synchronization _factorySync = null;\n     private boolean _active = false;\n-    private boolean _rollbackOnly = false;\n+    private Throwable _rollbackOnly = null;\n \n     /**\n      * Constructor. Provide broker that will be requesting managed\n@@ -71,20 +72,20 @@ public synchronized void commit() {\n \n         // try to invoke before completion in preparation for commit\n         RuntimeException err = null;\n-        if (!_rollbackOnly) {\n+        if (_rollbackOnly == null) {\n             try {\n                 _broker.beforeCompletion();\n                 if (_factorySync != null)\n                     _factorySync.beforeCompletion();\n             } catch (RuntimeException re) {\n-                _rollbackOnly = true;\n+                _rollbackOnly = re;\n                 err = re;\n             }\n         } else // previously marked rollback only\n             err = new StoreException(_loc.get(\"marked-rollback\")).\n-                setFatal(true);\n+                setCause(_rollbackOnly).setFatal(true);\n \n-        if (!_rollbackOnly) {\n+        if (_rollbackOnly == null) {\n             try {\n                 _broker.afterCompletion(Status.STATUS_COMMITTED);\n                 notifyAfterCompletion(Status.STATUS_COMMITTED);\n@@ -145,17 +146,25 @@ private void notifyAfterCompletion(int status) {\n             if (_factorySync != null)\n                 _factorySync.afterCompletion(status);\n         } finally {\n-            _rollbackOnly = false;\n+            _rollbackOnly = null;\n             _factorySync = null;\n         }\n     }\n \n     public synchronized void setRollbackOnly() {\n-        _rollbackOnly = true;\n+        setRollbackOnly(new UserException());\n+    }\n+\n+    public void setRollbackOnly(Throwable cause) {\n+        _rollbackOnly = cause;\n+    }\n+\n+    public Throwable getRollbackCause() {\n+        return _rollbackOnly;\n     }\n \n     public synchronized int getStatus() {\n-        if (_rollbackOnly)\n+        if (_rollbackOnly != null)\n             return Status.STATUS_MARKED_ROLLBACK;\n         if (_active)\n             return Status.STATUS_ACTIVE;"},{"sha":"7063c1cf4ef036152cff4b12436df94db32624fa","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -59,7 +59,8 @@ bad-ds-oid: The type \"{0}\" declares datastore identity but the value \\\n \tpassed to lookup of type \"{1}\" is not a OpenJPA id instance.\n null-oids: Some of the object ids passed to getObjectsById were null.\n marked-rollback: The transaction cannot be committed, because it was already \\\n-\tmarked for rollback only.  The transaction will be rolled back instead.\n+\tmarked for rollback only.  The transaction will be rolled back instead. \\\n+    The cause of the rollback-only status is reported in the embedded stack.\n refresh-flushed: You cannot refresh an instance that has been flushed to the \\\n \tdata store.\n pc-loader-different: Attempt to cast instance \"{0}\" to PersistenceCapable failed. \\"},{"sha":"ae5e25521a7b798333e993386e6ceef2a35416e5","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -430,6 +430,14 @@ public void rollbackAndResume() {\n         _broker.rollbackAndResume();\r\n     }\r\n \r\n+    public Throwable getRollbackCause() {\r\n+        if (!isActive())\r\n+            throw new IllegalStateException(_loc.get(\"no-transaction\")\r\n+                .getMessage());\r\n+\r\n+        return _broker.getRollbackCause();\r\n+    }\r\n+\r\n     public boolean getRollbackOnly() {\r\n         if (!isActive())\r\n             throw new IllegalStateException(_loc.get(\"no-transaction\")\r\n@@ -442,6 +450,10 @@ public void setRollbackOnly() {\n         _broker.setRollbackOnly();\r\n     }\r\n \r\n+    public void setRollbackOnly(Throwable cause) {\r\n+        _broker.setRollbackOnly(cause);\r\n+    }\r\n+\r\n     public void setSavepoint(String name) {\r\n         assertNotCloseInvoked();\r\n         _broker.setSavepoint(name);\r"},{"sha":"1b347af8ca3d0c34e9d3ac75bfdbdd04ea9118d1","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -407,6 +407,24 @@\n      */\n     public void setRollbackOnly();\n \n+    /**\n+     * Mark the current transaction for rollback with the specified cause\n+     * of the rollback.\n+     *\n+     * @since 0.9.7\n+     */\n+    public void setRollbackOnly(Throwable cause);\n+\n+    /** \n+     * Returns the Throwable that caused the transaction to be\n+     * marked for rollback. \n+     *  \n+     * @return the Throwable, or null if none was given\n+     *\n+     * @since 0.9.7\n+     */\n+    public Throwable getRollbackCause();\n+\n     /**\n      * Return whether the current transaction has been marked for rollback.\n      */"},{"sha":"210ea44605c08203539a1bca837a2df2605f14cb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/9bfc9cf1905f30a3a80204858ac4f49d5c824d22/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=9bfc9cf1905f30a3a80204858ac4f49d5c824d22","patch":"@@ -61,7 +61,7 @@ public RuntimeException translate(RuntimeException re) {\n                     try {\n                         throwing = true;\n                         if (em.isOpen() && em.isActive())\n-                            em.setRollbackOnly();\n+                            em.setRollbackOnly(re);\n                     } finally {\n                         // handle re-entrancy\n                         throwing = false;"}]}

