{"sha":"9c16a4373493bb9307dda99fc63e29c0fb8a3653","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMTZhNDM3MzQ5M2JiOTMwN2RkYTk5ZmM2M2UyOWMwZmI4YTM2NTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"message":"Creating 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f50e9a665eb242e4b05e0364c41f777a18914e9f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f50e9a665eb242e4b05e0364c41f777a18914e9f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","html_url":"https://github.com/apache/openjpa/commit/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f153a4ea37a2ea16247fd773756fa5da27f075ff","url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","html_url":"https://github.com/apache/openjpa/commit/f153a4ea37a2ea16247fd773756fa5da27f075ff"}],"stats":{"total":447552,"additions":447552,"deletions":0},"files":[{"sha":"d63f2365bc5c34c49f90ab3ba1ffbb7e819ecb95","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/FileMetaDataIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,189 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Iterator over a file, or over all metadata resources below a given directory.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class FileMetaDataIterator implements MetaDataIterator {\n+\n+    private static final long SCAN_LIMIT = 100000;\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (FileMetaDataIterator.class);\n+\n+    private final Iterator _itr;\n+    private File _file = null;\n+\n+    /**\n+     * Constructor; supply metadata file.\n+     */\n+    public FileMetaDataIterator(File file) {\n+        _itr = Collections.singleton(file).iterator();\n+    }\n+\n+    /**\n+     * Constructor; supply root of directory tree to search and optional\n+     * file filter.\n+     */\n+    public FileMetaDataIterator(File dir, MetaDataFilter filter)\n+        throws IOException {\n+        if (dir == null)\n+            _itr = null;\n+        else {\n+            Collection metas = new ArrayList();\n+            FileResource rsrc = (filter == null) ? null : new FileResource();\n+            scan(dir, filter, rsrc, metas, 0);\n+            _itr = metas.iterator();\n+        }\n+    }\n+\n+    /**\n+     * Scan all files below the given one for metadata files, adding them\n+     * to the given collection.\n+     */\n+    private int scan(File file, MetaDataFilter filter, FileResource rsrc,\n+        Collection metas, int scanned) throws IOException {\n+        if (scanned > SCAN_LIMIT)\n+            throw new IllegalStateException(_loc.get(\"too-many-files\",\n+                String.valueOf(SCAN_LIMIT)).getMessage());\n+        scanned++;\n+\n+        if (filter == null)\n+            metas.add(file);\n+        else {\n+            rsrc.setFile(file);\n+            if (filter.matches(rsrc))\n+                metas.add(file);\n+            else {\n+                File[] files = (File[]) AccessController\n+                    .doPrivileged(J2DoPrivHelper.listFilesAction(file)); \n+                if (files != null)\n+                    for (int i = 0; i < files.length; i++)\n+                        scanned = scan(files[i], filter, rsrc, metas, scanned);\n+            }\n+        }\n+        return scanned;\n+    }\n+\n+    public boolean hasNext() {\n+        return _itr != null && _itr.hasNext();\n+    }\n+\n+    public Object next() throws IOException {\n+        if (_itr == null)\n+            throw new NoSuchElementException();\n+\n+        _file = (File) _itr.next();\n+        try {\n+            File f = (File) AccessController.doPrivileged(J2DoPrivHelper\n+                .getAbsoluteFileAction(_file));\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.toURLAction(f));\n+        } catch (PrivilegedActionException pae) {\n+            throw (MalformedURLException) pae.getException();\n+        }\n+    }\n+\n+    public InputStream getInputStream() throws IOException {\n+        if (_file == null)\n+            throw new IllegalStateException();\n+        FileInputStream fis = null;\n+        try {\n+            fis = (FileInputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileInputStreamAction(_file));\n+            return fis;\n+        } catch (PrivilegedActionException pae) {\n+            throw (FileNotFoundException) pae.getException();\n+        }\n+    }\n+\n+    public File getFile() {\n+        if (_file == null)\n+            throw new IllegalStateException();\n+        return _file;\n+    }\n+\n+    public void close() {\n+    }\n+\n+    private static class FileResource implements MetaDataFilter.Resource {\n+\n+        private File _file = null;\n+\n+        public void setFile(File file) {\n+            _file = file;\n+        }\n+\n+        public String getName() {\n+            return _file.getName();\n+        }\n+\n+        public byte[] getContent() throws IOException {\n+            long len = ((Long) AccessController.doPrivileged(\n+                J2DoPrivHelper.lengthAction(_file))).longValue();\n+            FileInputStream fin = null;\n+            try {\n+                fin = (FileInputStream) AccessController.doPrivileged(\n+                    J2DoPrivHelper.newFileInputStreamAction(_file));\n+            } catch (PrivilegedActionException pae) {\n+                 throw (FileNotFoundException) pae.getException();\n+            }\n+            try {\n+                byte[] content;\n+                if (len <= 0 || len > Integer.MAX_VALUE) {\n+                    // some JVMs don't return a proper length\n+                    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+                    byte[] buf = new byte[1024]; \n+                    for (int r; (r = fin.read(buf)) != -1;)\n+                        bout.write(buf, 0, r);\n+                    content = bout.toByteArray();\n+                } else {\n+                    content = new byte[(int) len];\n+                    for (int r, o = 0; o < content.length && (r = fin.\n+                        read(content, o, content.length - o)) != -1; o += r);\n+                }\n+                return content;\n+            } finally {\n+                try { fin.close(); } catch (IOException ioe) {}\n+            }\n+        }\n+    }\n+}"},{"sha":"76804c7ca520bbcca43a02e89a9757a9b42f4845","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataFilter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Filters metadata resources. Typically used to constrain the results\n+ * of a {@link MetaDataIterator}.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public interface MetaDataFilter {\n+\n+    /**\n+     * Return whether the given resource passes the filter.\n+     */\n+    public boolean matches(Resource rsrc) throws IOException;\n+\n+    /**\n+     * Information about a metadata resource.\n+     */\n+    public static interface Resource {\n+\n+        /**\n+         * The name of the resource.\n+         */\n+        public String getName();\n+\n+        /**\n+         * Resource content.\n+         */\n+        public byte[] getContent() throws IOException;\n+    }\n+}"},{"sha":"0a31dfb0a3469686c9e5b208212dc6c17703f802","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.apache.openjpa.lib.util.Closeable; // also in java.io(in 1.5)\n+\n+/**\n+ * Iterator over metadata resources.\n+ *\n+ * @author Abe White\n+ */\n+public interface MetaDataIterator extends Closeable {\n+\n+    /**\n+     * Return whether there is another resource to iterate over.\n+     */\n+    public boolean hasNext() throws IOException;\n+\n+    /**\n+     * Return the next metadata resource.\n+     */\n+    public Object next() throws IOException;\n+\n+    /**\n+     * Return the last-iterated metadata resource content as a stream.\n+     */\n+    public InputStream getInputStream() throws IOException;\n+\n+    /**\n+     * Return the last-iterated metadata resource content as a file, or null\n+     * if not an extant file.\n+     */\n+    public File getFile() throws IOException;\n+\n+    /**\n+     * Close the resources used by this iterator.\n+     */\n+    public void close();\n+}\n+"},{"sha":"9df6929bc580ba6e16f24d2461b6fa7808c79ae9","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataIteratorChain.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Metadata iterator that combines several iterators.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class MetaDataIteratorChain implements MetaDataIterator {\n+\n+    private List _itrs = null;\n+    private int _cur = -1;\n+    private MetaDataIterator _itr = null;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public MetaDataIteratorChain() {\n+    }\n+\n+    /**\n+     * Combine two iterators.\n+     */\n+    public MetaDataIteratorChain(MetaDataIterator itr1, MetaDataIterator itr2) {\n+        _itrs = new ArrayList(2);\n+        _itrs.add(itr1);\n+        _itrs.add(itr2);\n+    }\n+\n+    /**\n+     * Add an iterator to the chain.\n+     */\n+    public void addIterator(MetaDataIterator itr) {\n+        if (_cur != -1)\n+            throw new IllegalStateException();\n+        if (_itrs == null)\n+            _itrs = new ArrayList(4);\n+        _itrs.add(itr);\n+    }\n+\n+    public boolean hasNext() throws IOException {\n+        if (_itrs == null)\n+            return false;\n+        if (_cur == -1)\n+            _cur = 0;\n+\n+        MetaDataIterator itr;\n+        for (; _cur < _itrs.size(); _cur++) {\n+            itr = (MetaDataIterator) _itrs.get(_cur);\n+            if (itr.hasNext()) {\n+                _itr = itr;\n+                return true;\n+            }\n+        }\n+        _itr = null;\n+        return false;\n+    }\n+\n+    public Object next() throws IOException {\n+        if (!hasNext())\n+            throw new NoSuchElementException();\n+        return _itr.next();\n+    }\n+\n+    public InputStream getInputStream() throws IOException {\n+        if (_itr == null)\n+            throw new IllegalStateException();\n+        return _itr.getInputStream();\n+    }\n+\n+    public File getFile() throws IOException {\n+        if (_itr == null)\n+            throw new IllegalStateException();\n+        return _itr.getFile();\n+    }\n+\n+    public void close() {\n+        if (_itrs != null)\n+            for (Iterator itr = _itrs.iterator(); itr.hasNext();)\n+                ((MetaDataIterator) itr.next()).close();\n+    }\n+}"},{"sha":"1d024a036c412f27be1d1d8d3040a2e92cd40e61","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.net.URL;\n+import java.util.List;\n+\n+/**\n+ * Interface for metadata parsers.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public interface MetaDataParser {\n+\n+    /**\n+     * The classloader to use to resolve resources, or null for impl-defined\n+     * default.\n+     */\n+    public void setClassLoader(ClassLoader loader);\n+\n+    /**\n+     * Return the results from the last parse.\n+     */\n+    public List getResults();\n+\n+    /**\n+     * Parse the given resource.\n+     */\n+    public void parse(String rsrc) throws IOException;\n+\n+    /**\n+     * Parse the given resource.\n+     */\n+    public void parse(URL url) throws IOException;\n+\n+    /**\n+     * Parse the given file, which may be a directory, in which case it\n+     * will be scanned recursively for metadata files.\n+     */\n+    public void parse(File file) throws IOException;\n+\n+    /**\n+     * Parse all possible metadata locations for the given class, going\n+     * top-down or bottom-up. If the class is null, only top-level locations\n+     * will be parsed.\n+     */\n+    public void parse(Class cls, boolean topDown) throws IOException;\n+\n+    /**\n+     * Parse the metadata in the given reader.\n+     *\n+     * @param content reader containing the metadata to parse\n+     * @param sourceName the name of the source being parsed, for use\n+     * in error messages\n+     */\n+    public void parse(Reader content, String sourceName) throws IOException;\n+\n+    /**\n+     * Parse the metadata supplied by the given iterator.\n+     */\n+    public void parse(MetaDataIterator itr) throws IOException;\n+\n+    /**\n+     * Clears the cache of parsed resource names.\n+     */\n+    public void clear();\n+}"},{"sha":"3ec300a105be3b989948da1a1200934c2c9757f5","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/MetaDataSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Map;\n+\n+/**\n+ * Interface for meta data serializers.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public interface MetaDataSerializer {\n+\n+    public static final int COMPACT = 0;\n+    public static final int PRETTY = 1;\n+    public static final int APPEND = 2;\n+    public static final int VERBOSE = 4;\n+\n+    /**\n+     * Serialize the current set of objects to the files from which they were\n+     * parsed. Any objects for which a source file cannot be determined will\n+     * not be included in the output.\n+     *\n+     * @param flags bit flags specifying the output flags; e.g. {@link #PRETTY}\n+     */\n+    public void serialize(int flags) throws IOException;\n+\n+    /**\n+     * Serialize the current set of objects to the files from which they were\n+     * parsed. The objects must implement the {@link SourceTracker} interface.\n+     *\n+     * @param output if null, then serialize directly to the file system;\n+     * othwerwise, populate the specified {@link Map} with\n+     * keys that are the {@link File} instances, and\n+     * values that are the {@link String} contents of the metadata\n+     * @param flags bit flags specifying the output flags; e.g. {@link #PRETTY}\n+     */\n+    public void serialize(Map output, int flags) throws IOException;\n+\n+    /**\n+     * Serialize the current set of objects to the given file.\n+     *\n+     * @param flags bit flags specifying the output flags; e.g.\n+     * {@link #PRETTY} | {@link #APPEND}\n+     */\n+    public void serialize(File file, int flags) throws IOException;\n+\n+    /**\n+     * Serialize the current set of objects to the given stream.\n+     *\n+     * @param flags bit flags specifying the output flags; e.g. {@link #PRETTY}\n+     */\n+    public void serialize(Writer out, int flags) throws IOException;\n+}"},{"sha":"af8d01f827f119e1e71916e89821ae78c61640d2","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ResourceMetaDataIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.MultiClassLoader;\n+\n+/**\n+ * Iterator over a given metadata resource.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ResourceMetaDataIterator implements MetaDataIterator {\n+\n+    private List _urls = null;\n+    private int _url = -1;\n+\n+    /**\n+     * Constructor; supply the resource to parse.\n+     */\n+    public ResourceMetaDataIterator(String rsrc) throws IOException {\n+        this(rsrc, null);\n+    }\n+\n+    /**\n+     * Constructor; supply the resource to parse.\n+     */\n+    public ResourceMetaDataIterator(String rsrc, ClassLoader loader)\n+        throws IOException {\n+        if (loader == null) {\n+            MultiClassLoader multi = (MultiClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n+            multi.addClassLoader(multi.SYSTEM_LOADER);\n+            multi.addClassLoader(multi.THREAD_LOADER);\n+            multi.addClassLoader(getClass().getClassLoader());\n+            loader = multi;\n+        }\n+\n+        try {\n+            Enumeration e = (Enumeration) AccessController.doPrivileged(\n+                J2DoPrivHelper.getResourcesAction(loader, rsrc));\n+            while (e.hasMoreElements()) {\n+                if (_urls == null)\n+                    _urls = new ArrayList(3);\n+                _urls.add(e.nextElement());\n+            }\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n+    }\n+\n+    public boolean hasNext() {\n+        return _urls != null && _url + 1 < _urls.size();\n+    }\n+\n+    public Object next() {\n+        if (!hasNext())\n+            throw new NoSuchElementException();\n+        return _urls.get(++_url);\n+    }\n+\n+    public InputStream getInputStream() throws IOException {\n+        if (_url == -1 || _url >= _urls.size())\n+            throw new IllegalStateException();\n+        try {\n+            return (InputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.openStreamAction((URL) _urls.get(_url)));\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n+    }\n+\n+    public File getFile() throws IOException {\n+        if (_url == -1 || _url >= _urls.size())\n+            throw new IllegalStateException();\n+        File file = new File(URLDecoder.decode(((URL) _urls.get(_url)).\n+            getFile()));\n+        return (((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue()) ? file :null;\n+    }\n+\n+    public void close() {\n+    }\n+}\n+"},{"sha":"be7a2c5e468214b8a77c00f9adfe0c9c5e76df65","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTracker.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+\n+/**\n+ * Interface that can optionally be implemented by metadata\n+ * to include the source file from which the metadata was originally parsed.\n+ *\n+ * @author Abe White\n+ */\n+public interface SourceTracker {\n+\n+    public static final int SRC_OTHER = 0;\n+    public static final int SRC_ANNOTATIONS = 1;\n+    public static final int SRC_XML = 2;\n+\n+    /**\n+     * Return the file from which this instance was parsed.\n+     */\n+    public File getSourceFile();\n+\n+    /**\n+     * Return the domain-dependent scope of this instance within its file.\n+     */\n+    public Object getSourceScope();\n+\n+    /**\n+     * Return the type of source.\n+     */\n+    public int getSourceType();\n+\n+    /**\n+     * Return the domain-meaningful name of the resource that was loaded\n+     * from this source. I.e., if we had loaded the source for a Java\n+     * class, this would return the name of the class.\n+     */\n+    public String getResourceName();\n+    \n+    /**\n+     * Return the line number of the file at which this instance was parsed.\n+     */\n+    public int getLineNumber();\n+\n+    /**\n+     * Return the column number in the line of the file at which this\n+     * instance was parsed.\n+     */\n+    public int getColNumber();\n+}"},{"sha":"611b685436fe043e68de9fd91522cb158296b826","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SourceTrackers.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.security.AccessController;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Utility class for performing common operations on {@link SourceTracker}s.\n+ *\n+ * @since 0.3.3.1\n+ */\n+public class SourceTrackers {\n+\n+    private static final Localizer _loc =\n+        Localizer.forPackage(SourceTrackers.class);\n+\n+    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n+\n+    /**\n+     * Create a message appropriate for display to the user describing\n+     * the location(s) that <code>trackers</code> were loaded from.\n+     *\n+     * @param trackers the source-trackers for which location info should\n+     * be provided.\n+     */\n+    public static String getSourceLocationMessage(SourceTracker[] trackers) {\n+        StringBuffer buf = new StringBuffer(20 * (trackers.length + 1));\n+        buf.append(_loc.get(\"source-trackers-location-header\")).append(SEP);\n+        String sourceFilePath;\n+        for (int i = 0; i < trackers.length; i++) {\n+            sourceFilePath = (trackers[i].getSourceFile() == null ?\n+                _loc.get(\"source-tracker-file-unknown\").getMessage() :\n+                (String) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getAbsolutePathAction(\n+                        trackers[i].getSourceFile())));\n+            buf.append(\"  \").append(_loc.get(\n+                \"source-trackers-location-line-item\",\n+                trackers[i].getResourceName(), sourceFilePath));\n+            if (i < trackers.length - 1)\n+                buf.append(SEP);\n+        }\n+        return buf.toString();\n+    }\n+}"},{"sha":"9dd600be9ef950530911e397cf935f79463c8a00","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/SuffixMetaDataFilter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+/**\n+ * Filters metadata iteration based on resource name suffix.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class SuffixMetaDataFilter implements MetaDataFilter {\n+\n+    private final String _suffix;\n+\n+    /**\n+     * Constructor; supply suffix to match against.\n+     */\n+    public SuffixMetaDataFilter(String suffix) {\n+        _suffix = suffix;\n+    }\n+\n+    public boolean matches(Resource rsrc) {\n+        String name = rsrc.getName();\n+        return name != null && name.endsWith(_suffix);\n+    }\n+}"},{"sha":"423313c139b43a0d56e7556130b5d29c8536e337","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/URLMetaDataIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n+/**\n+ * Iterator over the metadata resource represented by a URL.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class URLMetaDataIterator implements MetaDataIterator {\n+\n+    private final URL _url;\n+    private boolean _iterated = false;\n+\n+    /**\n+     * Constructor; supply resource URL.\n+     */\n+    public URLMetaDataIterator(URL url) {\n+        _url = url;\n+    }\n+\n+    public boolean hasNext() {\n+        return _url != null && !_iterated;\n+    }\n+\n+    public Object next() throws IOException {\n+        if (!hasNext())\n+            throw new IllegalStateException();\n+\n+        _iterated = true;\n+        return _url;\n+    }\n+\n+    public InputStream getInputStream() throws IOException {\n+        if (!_iterated)\n+            throw new IllegalStateException();\n+        if (_url == null)\n+            return null;\n+        try {\n+            return (InputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.openStreamAction(_url));\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n+    }\n+\n+    public File getFile() {\n+        if (!_iterated)\n+            throw new IllegalStateException();\n+        if (_url == null)\n+            return null;\n+        File file = new File(URLDecoder.decode(_url.getPath()));\n+        return (((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue()) ? file:null;\n+    }\n+\n+    public void close() {\n+    }\n+}\n+"},{"sha":"131dce98fb9ee5113075147c0a4658a3901af484","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","status":"added","additions":682,"deletions":0,"changes":682,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,682 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.xml.parsers.SAXParser;\n+\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.Locator;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import org.xml.sax.ext.LexicalHandler;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.JavaVersions;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.xml.Commentable;\n+import org.apache.openjpa.lib.xml.DocTypeReader;\n+import org.apache.openjpa.lib.xml.Location;\n+import org.apache.openjpa.lib.xml.XMLFactory;\n+\n+/**\n+ * Custom SAX parser used by the system to quickly parse metadata files.\n+ * Subclasses should handle the processing of the content.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public abstract class XMLMetaDataParser extends DefaultHandler\n+    implements LexicalHandler, MetaDataParser {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (XMLMetaDataParser.class);\n+    private static boolean _schemaBug;\n+\n+    static {\n+        try {\n+            // check for Xerces version 2.0.2 to see if we need to disable\n+            // schema validation, which works around the bug reported at:\n+            // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4708859\n+            _schemaBug = \"Xerces-J 2.0.2\".equals(Class.forName\n+                (\"org.apache.xerces.impl.Version\").getField(\"fVersion\").\n+                get(null));\n+        } catch (Throwable t) {\n+            // Xerces might not be available\n+            _schemaBug = false;\n+        }\n+    }\n+\n+    // map of classloaders to sets of parsed locations, so that we don't parse\n+    // the same resource multiple times for the same class\n+    private Map _parsed = null;\n+\n+    private Log _log = null;\n+    private boolean _validating = true;\n+    private boolean _systemId = true;\n+    private boolean _caching = true;\n+    private boolean _parseText = true;\n+    private boolean _parseComments = true;\n+    private String _suffix = null;\n+    private ClassLoader _loader = null;\n+    private ClassLoader _curLoader = null;\n+\n+    // state for current parse\n+    private final Collection _curResults = new LinkedList();\n+    private List _results = null;\n+    private String _sourceName = null;\n+    private File _sourceFile = null;\n+    private StringBuffer _text = null;\n+    private List _comments = null;\n+    private Location _location = new Location();\n+    private LexicalHandler _lh = null;\n+    private int _depth = -1;\n+    private int _ignore = Integer.MAX_VALUE;\n+\n+    /**\n+     * Whether to parse element text.\n+     */\n+    public boolean getParseText() {\n+        return _parseText;\n+    }\n+\n+    /**\n+     * Whether to parse element text.\n+     */\n+    public void setParseText(boolean text) {\n+        _parseText = text;\n+    }\n+\n+    /**\n+     * Whether to parse element comments.\n+     */\n+    public boolean getParseComments() {\n+        return _parseComments;\n+    }\n+\n+    /**\n+     * Whether to parse element comments.\n+     */\n+    public void setParseComments(boolean comments) {\n+        _parseComments = comments;\n+    }\n+\n+    /**\n+     * The XML document location.\n+     */\n+    public Location getLocation() {\n+        return _location;\n+    }\n+\n+    /**\n+     * The lexical handler that should be registered with the SAX parser used\n+     * by this class. Since the <code>org.xml.sax.ext</code> package is not\n+     * a required part of SAX2, this handler might not be used by the parser.\n+     */\n+    public LexicalHandler getLexicalHandler() {\n+        return _lh;\n+    }\n+\n+    /**\n+     * The lexical handler that should be registered with the SAX parser used\n+     * by this class. Since the <code>org.xml.sax.ext</code> package is not\n+     * a required part of SAX2, this handler might not be used by the parser.\n+     */\n+    public void setLexicalHandler(LexicalHandler lh) {\n+        _lh = lh;\n+    }\n+\n+    /**\n+     * The XML document location.\n+     */\n+    public void setLocation(Location location) {\n+        _location = location;\n+    }\n+\n+    /**\n+     * Whether to use the source name as the XML system id.\n+     */\n+    public boolean getSourceIsSystemId() {\n+        return _systemId;\n+    }\n+\n+    /**\n+     * Whether to use the source name as the XML system id.\n+     */\n+    public void setSourceIsSystemId(boolean systemId) {\n+        _systemId = systemId;\n+    }\n+\n+    /**\n+     * Whether this is a validating parser.\n+     */\n+    public boolean isValidating() {\n+        return _validating;\n+    }\n+\n+    /**\n+     * Whether this is a validating parser.\n+     */\n+    public void setValidating(boolean validating) {\n+        _validating = validating;\n+    }\n+\n+    /**\n+     * Expected suffix for metadata resources, or null if unknown.\n+     */\n+    public String getSuffix() {\n+        return _suffix;\n+    }\n+\n+    /**\n+     * Expected suffix for metadata resources, or null if unknown.\n+     */\n+    public void setSuffix(String suffix) {\n+        _suffix = suffix;\n+    }\n+\n+    /**\n+     * Whether parsed resource names are cached to avoid duplicate parsing.\n+     */\n+    public boolean isCaching() {\n+        return _caching;\n+    }\n+\n+    /**\n+     * Whether parsed resource names are cached to avoid duplicate parsing.\n+     */\n+    public void setCaching(boolean caching) {\n+        _caching = caching;\n+        if (!caching)\n+            clear();\n+    }\n+\n+    /**\n+     * The log to write to.\n+     */\n+    public Log getLog() {\n+        return _log;\n+    }\n+\n+    /**\n+     * The log to write to.\n+     */\n+    public void setLog(Log log) {\n+        _log = log;\n+    }\n+\n+    /**\n+     * Classloader to use for class name resolution.\n+     */\n+    public ClassLoader getClassLoader() {\n+        return _loader;\n+    }\n+\n+    /**\n+     * Classloader to use for class name resolution.\n+     */\n+    public void setClassLoader(ClassLoader loader) {\n+        _loader = loader;\n+    }\n+\n+    public List getResults() {\n+        if (_results == null)\n+            return Collections.EMPTY_LIST;\n+        return _results;\n+    }\n+\n+    public void parse(String rsrc) throws IOException {\n+        if (rsrc != null)\n+            parse(new ResourceMetaDataIterator(rsrc, _loader));\n+    }\n+\n+    public void parse(URL url) throws IOException {\n+        if (url != null)\n+            parse(new URLMetaDataIterator(url));\n+    }\n+\n+    public void parse(File file) throws IOException {\n+        if (file == null)\n+            return;\n+        if (!((Boolean) AccessController.doPrivileged(J2DoPrivHelper\n+            .isDirectoryAction(file))).booleanValue())\n+            parse(new FileMetaDataIterator(file));\n+        else {\n+            String suff = (_suffix == null) ? \"\" : _suffix;\n+            parse(new FileMetaDataIterator(file,\n+                new SuffixMetaDataFilter(suff)));\n+        }\n+    }\n+\n+    public void parse(Class cls, boolean topDown) throws IOException {\n+        String suff = (_suffix == null) ? \"\" : _suffix;\n+        parse(new ClassMetaDataIterator(cls, suff, topDown), !topDown);\n+    }\n+\n+    public void parse(Reader xml, String sourceName) throws IOException {\n+        if (xml != null && (sourceName == null || !parsed(sourceName)))\n+            parseNewResource(xml, sourceName);\n+    }\n+\n+    public void parse(MetaDataIterator itr) throws IOException {\n+        parse(itr, false);\n+    }\n+\n+    /**\n+     * Parse the resources returned by the given iterator, optionally stopping\n+     * when the first valid resource is found.\n+     */\n+    private void parse(MetaDataIterator itr, boolean stopFirst)\n+        throws IOException {\n+        if (itr == null)\n+            return;\n+        try {\n+            String sourceName;\n+            while (itr.hasNext()) {\n+                sourceName = itr.next().toString();\n+                if (parsed(sourceName)) {\n+                    if (stopFirst)\n+                        break;\n+                    continue;\n+                }\n+\n+                // individual files of the resource might already be parsed\n+                _sourceFile = itr.getFile();\n+                parseNewResource(new InputStreamReader(itr.getInputStream()),\n+                    sourceName);\n+                if (stopFirst)\n+                    break;\n+            }\n+        }\n+        finally {\n+            itr.close();\n+        }\n+    }\n+\n+    /**\n+     * Parse a previously-unseen source. All parsing methods delegate\n+     * to this one.\n+     */\n+    protected void parseNewResource(Reader xml, String sourceName)\n+        throws IOException {\n+        if (_log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"start-parse\", sourceName));\n+\n+        // even if we want to validate, specify that it won't happen\n+        // if we have neither a DocType not a Schema\n+        Object schemaSource = getSchemaSource();\n+        if (schemaSource != null && _schemaBug) {\n+            if (_log != null && _log.isTraceEnabled())\n+                _log.trace(_loc.get(\"parser-schema-bug\"));\n+            schemaSource = null;\n+        }\n+        boolean validating = _validating && (getDocType() != null \n+            || schemaSource != null);\n+\n+        // parse the metadata with a SAX parser\n+        try {\n+            _sourceName = sourceName;\n+            SAXParser parser = XMLFactory.getSAXParser(validating, true);\n+            Object schema = null;\n+            if (validating) {\n+                schema = schemaSource;\n+                if (schema == null && getDocType() != null)\n+                    xml = new DocTypeReader(xml, getDocType());\n+            }\n+\n+            if (_parseComments || _lh != null)\n+                parser.setProperty\n+                    (\"http://xml.org/sax/properties/lexical-handler\", this);\n+\n+            if (schema != null) {\n+                parser.setProperty\n+                    (\"http://java.sun.com/xml/jaxp/properties/schemaLanguage\",\n+                        \"http://www.w3.org/2001/XMLSchema\");\n+                parser.setProperty\n+                    (\"http://java.sun.com/xml/jaxp/properties/schemaSource\",\n+                        schema);\n+            }\n+\n+            InputSource is = new InputSource(xml);\n+            if (_systemId && sourceName != null)\n+                is.setSystemId(sourceName);\n+            parser.parse(is, this);\n+            finish();\n+        } catch (SAXException se) {\n+            IOException ioe = new IOException(se.toString());\n+            JavaVersions.initCause(ioe, se);\n+            throw ioe;\n+        } finally {\n+            reset();\n+        }\n+    }\n+\n+    /**\n+     * Return true if the given source is parsed. Otherwise, record that\n+     * it will be parsed.\n+     */\n+    protected boolean parsed(String src) {\n+        if (!_caching)\n+            return false;\n+        if (_parsed == null)\n+            _parsed = new HashMap();\n+\n+        ClassLoader loader = currentClassLoader();\n+        Set set = (Set) _parsed.get(loader);\n+        if (set == null) {\n+            set = new HashSet();\n+            _parsed.put(loader, set);\n+        }\n+        boolean added = set.add(src);\n+        if (!added && _log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"already-parsed\", src));\n+        return !added;\n+    }\n+\n+    public void clear() {\n+        if (_log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"clear-parser\", this));\n+        if (_parsed != null)\n+            _parsed.clear();\n+    }\n+\n+    public void error(SAXParseException se) throws SAXException {\n+        throw getException(se.toString());\n+    }\n+\n+    public void fatalError(SAXParseException se) throws SAXException {\n+        throw getException(se.toString());\n+    }\n+\n+    public void setDocumentLocator(Locator locator) {\n+        _location.setLocator(locator);\n+    }\n+\n+    public void startElement(String uri, String name, String qName,\n+        Attributes attrs) throws SAXException {\n+        _depth++;\n+        if (_depth <= _ignore)\n+            if (!startElement(qName, attrs))\n+                ignoreContent(true);\n+    }\n+\n+    public void endElement(String uri, String name, String qName)\n+        throws SAXException {\n+        if (_depth < _ignore)\n+            endElement(qName);\n+        _text = null;\n+        if (_comments != null)\n+            _comments.clear();\n+        if (_depth == _ignore)\n+            _ignore = Integer.MAX_VALUE;\n+        _depth--;\n+    }\n+\n+    public void characters(char[] ch, int start, int length) {\n+        if (_parseText && _depth <= _ignore) {\n+            if (_text == null)\n+                _text = new StringBuffer();\n+            _text.append(ch, start, length);\n+        }\n+    }\n+\n+    public void comment(char[] ch, int start, int length) throws SAXException {\n+        if (_parseComments && _depth <= _ignore) {\n+            if (_comments == null)\n+                _comments = new ArrayList(3);\n+            _comments.add(String.valueOf(ch, start, length));\n+        }\n+        if (_lh != null)\n+            _lh.comment(ch, start, length);\n+    }\n+\n+    public void startCDATA() throws SAXException {\n+        if (_lh != null)\n+            _lh.startCDATA();\n+    }\n+\n+    public void endCDATA() throws SAXException {\n+        if (_lh != null)\n+            _lh.endCDATA();\n+    }\n+\n+    public void startDTD(String name, String publicId, String systemId)\n+        throws SAXException {\n+        if (_lh != null)\n+            _lh.startDTD(name, publicId, systemId);\n+    }\n+\n+    public void endDTD() throws SAXException {\n+        if (_lh != null)\n+            _lh.endDTD();\n+    }\n+\n+    public void startEntity(String name) throws SAXException {\n+        if (_lh != null)\n+            _lh.startEntity(name);\n+    }\n+\n+    public void endEntity(String name) throws SAXException {\n+        if (_lh != null)\n+            _lh.endEntity(name);\n+    }\n+\n+    /**\n+     * Override this method marking the start of some element. If this method\n+     * returns false, the content of the element and the end element event will\n+     * be ignored.\n+     */\n+    protected abstract boolean startElement(String name, Attributes attrs)\n+        throws SAXException;\n+\n+    /**\n+     * Override this method marking the end of some element.\n+     */\n+    protected abstract void endElement(String name) throws SAXException;\n+\n+    /**\n+     * Add a result to be returned from the current parse.\n+     */\n+    protected void addResult(Object result) {\n+        if (_log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"add-result\", result));\n+        _curResults.add(result);\n+    }\n+\n+    /**\n+     * Override this method to finish up after a parse; this is only\n+     * called if no errors are encountered during parsing. Subclasses should\n+     * call <code>super.finish()</code> to resolve superclass state.\n+     */\n+    protected void finish() {\n+        if (_log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"end-parse\", getSourceName()));\n+        _results = new ArrayList(_curResults);\n+    }\n+\n+    /**\n+     * Override this method to clear any state and ready the parser for\n+     * a new document. Subclasses should call\n+     * <code>super.reset()</code> to clear superclass state.\n+     */\n+    protected void reset() {\n+        _curResults.clear();\n+        _curLoader = null;\n+        _sourceName = null;\n+        _sourceFile = null;\n+        _depth = -1;\n+        _ignore = Integer.MAX_VALUE;\n+        if (_comments != null)\n+            _comments.clear();\n+    }\n+\n+    /**\n+     * Implement to return the XML schema source for the document. Returns\n+     * null by default. May return:\n+     * <ul>\n+     * <li><code>String</code> pointing to schema URI.</li>\n+     * <li><code>InputStream</code> containing schema contents.</li>\n+     * <li><code>InputSource</code> containing schema contents.</li>\n+     * <li><code>File</code> containing schema contents.</li>\n+     * <li>Array of any of the above elements.</li>\n+     * </ul>\n+     */\n+    protected Object getSchemaSource() throws IOException {\n+        return null;\n+    }\n+\n+    /**\n+     * Override this method to return any <code>DOCTYPE</code> declaration\n+     * that should be dynamically included in xml documents that will be\n+     * validated. Returns null by default.\n+     */\n+    protected Reader getDocType() throws IOException {\n+        return null;\n+    }\n+\n+    /**\n+     * Return the name of the source file being parsed.\n+     */\n+    protected String getSourceName() {\n+        return _sourceName;\n+    }\n+\n+    /**\n+     * Return the file of the source being parsed.\n+     */\n+    protected File getSourceFile() {\n+        return _sourceFile;\n+    }\n+\n+    /**\n+     * Add current comments to the given entity. By default, assumes entity\n+     * is {@link Commentable}.\n+     */\n+    protected void addComments(Object obj) {\n+        String[] comments = currentComments();\n+        if (comments.length > 0 && obj instanceof Commentable)\n+            ((Commentable) obj).setComments(comments);\n+    }\n+\n+    /**\n+     * Array of comments for the current node, or empty array if none.\n+     */\n+    protected String[] currentComments() {\n+        if (_comments == null || _comments.isEmpty())\n+            return Commentable.EMPTY_COMMENTS;\n+        return (String[]) _comments.toArray(new String[_comments.size()]);\n+    }\n+\n+    /**\n+     * Return the text value within the current node.\n+     */\n+    protected String currentText() {\n+        if (_text == null)\n+            return \"\";\n+        return _text.toString().trim();\n+    }\n+\n+    /**\n+     * Return the current location within the source file.\n+     */\n+    protected String currentLocation() {\n+        return \" [\" + _loc.get(\"loc-prefix\") + _location.getLocation() + \"]\";\n+    }\n+\n+    /**\n+     * Return the parse depth. Within the root element, the depth is 0,\n+     * within the first nested element, it is 1, and so forth.\n+     */\n+    protected int currentDepth() {\n+        return _depth;\n+    }\n+\n+    /**\n+     * Return the class loader to use when resolving resources and loading\n+     * classes.\n+     */\n+    protected ClassLoader currentClassLoader() {\n+        if (_loader != null)\n+            return _loader;\n+        if (_curLoader == null)\n+            _curLoader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+        return _curLoader;\n+    }\n+\n+    /**\n+     * Ignore all content below the current element.\n+     *\n+     * @param ignoreEnd whether to ignore the end element event\n+     */\n+    protected void ignoreContent(boolean ignoreEnd) {\n+        _ignore = _depth;\n+        if (!ignoreEnd)\n+            _ignore++;\n+    }\n+\n+    /**\n+     * Returns a SAXException with the source file name and the given error\n+     * message.\n+     */\n+    protected SAXException getException(String msg) {\n+        return new SAXException(getSourceName() + currentLocation() +\n+            \": \" + msg);\n+    }\n+\n+    /**\n+     * Returns a SAXException with the source file name and the given error\n+     * message.\n+     */\n+    protected SAXException getException(Message msg) {\n+        return new SAXException(getSourceName() + currentLocation() +\n+            \": \" + msg.getMessage());\n+    }\n+\n+    /**\n+     * Returns a SAXException with the source file name and the given error\n+     * message.\n+     */\n+    protected SAXException getException(Message msg, Throwable cause) {\n+        if (cause != null && _log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"sax-exception\",\n+                getSourceName(), _location.getLocation()), cause);\n+        SAXException e = new SAXException(getSourceName() + currentLocation() +\n+            \": \" + msg + \" [\" + cause + \"]\");\n+        e.initCause(cause);\n+        return e;\n+    }\n+}"},{"sha":"92376405ae591922a8c14916213aaa4258b7700e","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","status":"added","additions":361,"deletions":0,"changes":361,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/XMLMetaDataSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,361 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+import javax.xml.transform.sax.TransformerHandler;\n+import javax.xml.transform.stream.StreamResult;\n+\n+import org.xml.sax.Attributes;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.ext.LexicalHandler;\n+import org.xml.sax.helpers.AttributesImpl;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Files;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.xml.Commentable;\n+import org.apache.openjpa.lib.xml.XMLWriter;\n+\n+/**\n+ * Abstract base type for serlializers that transfer groups of objects\n+ * to XML. Includes a way of serializing objects back to the XML files\n+ * they were parsed from. Serializers are not thread safe.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public abstract class XMLMetaDataSerializer implements MetaDataSerializer {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (XMLMetaDataSerializer.class);\n+    private static final SAXTransformerFactory _factory =\n+        (SAXTransformerFactory) TransformerFactory.newInstance();\n+\n+    private Log _log = null;\n+\n+    // current serialization state\n+    private final AttributesImpl _attrs = new AttributesImpl();\n+    private ContentHandler _handler = null;\n+    private int _flags = 0;\n+    private File _backup = null;\n+\n+    /**\n+     * The log to write to.\n+     */\n+    public Log getLog() {\n+        return _log;\n+    }\n+\n+    /**\n+     * The log to write to.\n+     */\n+    public void setLog(Log log) {\n+        _log = log;\n+    }\n+\n+    public void serialize(int flags) throws IOException {\n+        serialize((Map) null, flags);\n+    }\n+\n+    public void serialize(Map output, int flags) throws IOException {\n+        Map files = getFileMap();\n+        if (files == null)\n+            return;\n+\n+        // for each file, serialize objects\n+        Map.Entry entry;\n+        for (Iterator itr = files.entrySet().iterator(); itr.hasNext();) {\n+            entry = (Map.Entry) itr.next();\n+            File file = (File) entry.getKey();\n+            Collection fileObjs = (Collection) entry.getValue();\n+\n+            if (_log != null && _log.isInfoEnabled())\n+                _log.info(_loc.get(\"ser-file\", file));\n+\n+            try {\n+                TransformerHandler trans = _factory.newTransformerHandler();\n+                Writer writer;\n+                if (output == null) {\n+                    _backup = prepareWrite(file);\n+                    writer = new FileWriter(file);\n+                } else\n+                    writer = new StringWriter();\n+\n+                Writer xml = writer;\n+                if ((flags & PRETTY) > 0)\n+                    xml = new XMLWriter(writer);\n+                trans.setResult(new StreamResult(xml));\n+                serialize(fileObjs, trans, flags);\n+\n+                if (output != null)\n+                    output.put(file, ((StringWriter) writer).toString());\n+            } catch (SAXException se) {\n+                throw new IOException(se.toString());\n+            } catch (TransformerConfigurationException tce) {\n+                throw new IOException(tce.toString());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Prepare to write to the given file. Back up the file and make sure the\n+     * path to it is created.\n+     */\n+    protected File prepareWrite(File file) throws IOException {\n+        File backup = Files.backup(file, false);\n+        if (backup == null) {\n+            File parent = file.getParentFile();\n+            if (parent != null && !((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(parent))).booleanValue())\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.mkdirsAction(parent));\n+        }\n+        return backup;\n+    }\n+\n+    /**\n+     * Returns a {@link Map} with keys of the {@link File} to be\n+     * written to, and values of a {@link Collection} of\n+     * {@link SourceTracker} instances.\n+     */\n+    protected Map getFileMap() {\n+        Collection objs = getObjects();\n+        if (objs == null || objs.isEmpty())\n+            return null;\n+\n+        // create a map of files to lists of objects\n+        Map files = new HashMap();\n+        File file;\n+        Collection fileObjs;\n+        Object obj;\n+        for (Iterator itr = objs.iterator(); itr.hasNext();) {\n+            obj = itr.next();\n+            file = getSourceFile(obj);\n+            if (file == null) {\n+                if (_log != null && _log.isTraceEnabled())\n+                    _log.trace(_loc.get(\"no-file\", obj));\n+                continue;\n+            }\n+\n+            fileObjs = (Collection) files.get(file);\n+            if (fileObjs == null) {\n+                fileObjs = new LinkedList();\n+                files.put(file, fileObjs);\n+            }\n+            fileObjs.add(obj);\n+        }\n+\n+        return files;\n+    }\n+\n+    /**\n+     * Return the source file for the given instance. By default, checks\n+     * to see if the instance implements {@link SourceTracker}.\n+     */\n+    protected File getSourceFile(Object obj) {\n+        if (obj instanceof SourceTracker)\n+            return ((SourceTracker) obj).getSourceFile();\n+        return null;\n+    }\n+\n+    public void serialize(File file, int flags) throws IOException {\n+        if (_log != null)\n+            _log.info(_loc.get(\"ser-file\", file));\n+\n+        _backup = prepareWrite(file);\n+        try {\n+            FileWriter out = new FileWriter(\n+                (String) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getCanonicalPathAction(file)),\n+                (flags & APPEND) > 0);\n+            serialize(out, flags);\n+            out.close();\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n+    }\n+\n+    public void serialize(Writer out, int flags) throws IOException {\n+        try {\n+            if ((flags & PRETTY) > 0)\n+                serialize(new StreamResult(new XMLWriter(out)), flags);\n+            else\n+                serialize(new StreamResult(out), flags);\n+        } catch (SAXException se) {\n+            throw new IOException(se.toString());\n+        }\n+    }\n+\n+    /**\n+     * Serialize the current set of objects to the given result.\n+     */\n+    public void serialize(Result result, int flags) throws SAXException {\n+        try {\n+            TransformerHandler trans = _factory.newTransformerHandler();\n+            trans.setResult(result);\n+            serialize(trans, flags);\n+        } catch (TransformerConfigurationException tce) {\n+            throw new SAXException(tce);\n+        }\n+    }\n+\n+    /**\n+     * Serilize the current set of objects to a series of SAX events on the\n+     * given handler.\n+     */\n+    public void serialize(ContentHandler handler, int flags)\n+        throws SAXException {\n+        serialize(getObjects(), handler, flags);\n+    }\n+\n+    /**\n+     * Serialize the given collection of objects to the given handler.\n+     */\n+    private void serialize(Collection objs, ContentHandler handler, int flags)\n+        throws SAXException {\n+        if (_log != null && _log.isTraceEnabled())\n+            _log.trace(_loc.get(\"ser-objs\", objs));\n+\n+        _handler = handler;\n+        _flags = flags;\n+        try {\n+            if (!objs.isEmpty()) {\n+                handler.startDocument();\n+                serialize(objs);\n+                handler.endDocument();\n+            }\n+        }\n+        finally {\n+            reset();\n+        }\n+    }\n+\n+    /**\n+     * Whether this serialization is in verbose mode.\n+     */\n+    protected boolean isVerbose() {\n+        return (_flags & VERBOSE) > 0;\n+    }\n+\n+    /**\n+     * The backup file made for the current file being parsed.\n+     */\n+    protected File currentBackupFile() {\n+        return _backup;\n+    }\n+\n+    /**\n+     * Start an element with the current attribute settings. Clears the\n+     * attributes as well.\n+     */\n+    protected void startElement(String name) throws SAXException {\n+        _handler.startElement(\"\", name, name, _attrs);\n+        _attrs.clear();\n+    }\n+\n+    /**\n+     * End the current element.\n+     */\n+    protected void endElement(String name) throws SAXException {\n+        _handler.endElement(\"\", name, name);\n+    }\n+\n+    /**\n+     * Add text to the current element.\n+     */\n+    protected void addText(String text) throws SAXException {\n+        _handler.characters(text.toCharArray(), 0, text.length());\n+    }\n+\n+    /**\n+     * Add an attribute to the current group.\n+     */\n+    protected void addAttribute(String name, String value) {\n+        _attrs.addAttribute(\"\", name, name, \"CDATA\", value);\n+    }\n+\n+    /**\n+     * The current attributes.\n+     */\n+    protected Attributes getAttributes() {\n+        return _attrs;\n+    }\n+\n+    /**\n+     * Add a comment to the stream.\n+     */\n+    protected void addComments(String[] comments) throws SAXException {\n+        if (comments == null || comments.length == 0\n+            || !(_handler instanceof LexicalHandler))\n+            return;\n+\n+        LexicalHandler lh = (LexicalHandler) _handler;\n+        char[] chars;\n+        for (int i = 0; i < comments.length; i++) {\n+            chars = comments[i].toCharArray();\n+            lh.comment(chars, 0, chars.length);\n+        }\n+    }\n+\n+    /**\n+     * Write the given entity's comments. By default, tests if entity is\n+     * {@link Commentable}.\n+     */\n+    protected void addComments(Object obj) throws SAXException {\n+        if (obj instanceof Commentable)\n+            addComments(((Commentable) obj).getComments());\n+    }\n+\n+    /**\n+     * Reset serialization state for the next document.\n+     */\n+    protected void reset() {\n+        _attrs.clear();\n+        _handler = null;\n+        _flags = 0;\n+        _backup = null;\n+    }\n+\n+    /**\n+     * Serialize the given set of objects.\n+     */\n+    protected abstract void serialize(Collection objs) throws SAXException;\n+\n+    /**\n+     * Return the current set of objects for serialization.\n+     */\n+    protected abstract Collection getObjects();\n+}"},{"sha":"57ae0cfe58f7fb88458cf1c51331457120487014","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipFileMetaDataIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.Enumeration;\n+import java.util.NoSuchElementException;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n+/**\n+ * Iterator over all metadata resources in a given zip file.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ZipFileMetaDataIterator\n+    implements MetaDataIterator, MetaDataFilter.Resource {\n+\n+    private final ZipFile _file;\n+    private final MetaDataFilter _filter;\n+    private final Enumeration _entries;\n+    private ZipEntry _entry = null;\n+    private ZipEntry _last = null;\n+\n+    /**\n+     * Constructor; supply zip/jar URL and optional file filter.\n+     */\n+    public ZipFileMetaDataIterator(URL url, MetaDataFilter filter)\n+        throws IOException {\n+        if (url == null) {\n+            _file = null;\n+        } else {\n+            URLConnection con = url.openConnection();\n+            con.setDefaultUseCaches(false);\n+            try {\n+                _file = (ZipFile) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getContentAction(con));\n+            } catch (PrivilegedActionException pae) {\n+                 throw (IOException) pae.getException();\n+            }\n+        }\n+        _filter = filter;\n+        _entries = (_file == null) ? null : _file.entries();\n+    }\n+\n+    /**\n+     * Constructor; supply zip file and optional file filter.\n+     */\n+    public ZipFileMetaDataIterator(ZipFile file, MetaDataFilter filter) {\n+        _file = file;\n+        _filter = filter;\n+        _entries = (file == null) ? null : file.entries();\n+    }\n+\n+    public boolean hasNext() throws IOException {\n+        if (_entries == null)\n+            return false;\n+\n+        // search for next metadata file\n+        while (_entry == null && _entries.hasMoreElements()) {\n+            _entry = (ZipEntry) _entries.nextElement();\n+            if (_filter != null && !_filter.matches(this))\n+                _entry = null;\n+        }\n+        return _entry != null;\n+    }\n+\n+    public Object next() throws IOException {\n+        if (!hasNext())\n+            throw new NoSuchElementException();\n+        String ret = _entry.getName();\n+        _last = _entry;\n+        _entry = null;\n+        return ret;\n+    }\n+\n+    public InputStream getInputStream() throws IOException {\n+        if (_last == null)\n+            throw new IllegalStateException();\n+        return _file.getInputStream(_last);\n+    }\n+\n+    public File getFile() {\n+        if (_last == null)\n+            throw new IllegalStateException();\n+        return null;\n+    }\n+\n+    public void close() {\n+        try {\n+           if (_file != null)\n+               _file.close();\n+        } catch (IOException ioe) {\n+        }\n+    }\n+\n+    //////////////////////////////////////////\n+    // MetaDataFilter.Resource implementation\n+    //////////////////////////////////////////\n+\n+    public String getName() {\n+        return _entry.getName();\n+    }\n+\n+    public byte[] getContent() throws IOException {\n+        long size = _entry.getSize();\n+        if (size == 0)\n+            return new byte[0];\n+\n+        InputStream in = _file.getInputStream(_entry);\n+        byte[] content;\n+        if (size < 0) {\n+            ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+            byte[] buf = new byte[1024];\n+            for (int r; (r = in.read(buf)) != -1; bout.write(buf, 0, r)) ;\n+            content = bout.toByteArray();\n+        } else {\n+            content = new byte[(int) size];\n+            int offset = 0;\n+            int read;\n+            while (offset < size &&\n+                (read = in.read(content, offset, (int) size - offset)) != -1) {\n+                offset += read;\n+            }\n+        }\n+        in.close();\n+        return content;\n+    }\n+}\n+"},{"sha":"39150ee0193a2ea38ca83b1df4a9b61a2a3e0a37","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/ZipStreamMetaDataIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.meta;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.NoSuchElementException;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+/**\n+ * Iterator over all metadata resources in a given zip input stream.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ZipStreamMetaDataIterator\n+    implements MetaDataIterator, MetaDataFilter.Resource {\n+\n+    private final ZipInputStream _stream;\n+    private final MetaDataFilter _filter;\n+    private ZipEntry _entry = null;\n+    private ZipEntry _last = null;\n+    private byte[] _buf = null;\n+\n+    /**\n+     * Constructor; supply zip stream and optional metadata filter.\n+     */\n+    public ZipStreamMetaDataIterator(ZipInputStream stream,\n+        MetaDataFilter filter) {\n+        _stream = stream;\n+        _filter = filter;\n+    }\n+\n+    public boolean hasNext() throws IOException {\n+        if (_stream == null)\n+            return false;\n+        if (_entry != null)\n+            return true;\n+\n+        // close last rsrc\n+        if (_buf == null && _last != null)\n+            _stream.closeEntry();\n+        _last = null;\n+        _buf = null;\n+\n+        // search for next file\n+        ZipEntry entry;\n+        while (_entry == null && (entry = _stream.getNextEntry()) != null) {\n+            _entry = entry;\n+            if (_filter != null && !_filter.matches(this)) {\n+                _entry = null;\n+                _stream.closeEntry();\n+            }\n+        }\n+        return _entry != null;\n+    }\n+\n+    public Object next() throws IOException {\n+        if (!hasNext())\n+            throw new NoSuchElementException();\n+        String ret = _entry.getName();\n+        _last = _entry;\n+        _entry = null;\n+        return ret;\n+    }\n+\n+    public InputStream getInputStream() {\n+        if (_last == null)\n+            throw new IllegalStateException();\n+\n+        if (_buf != null)\n+            return new ByteArrayInputStream(_buf);\n+        return new NoCloseInputStream();\n+    }\n+\n+    public File getFile() {\n+        return null;\n+    }\n+\n+    public void close() {\n+        try {\n+            _stream.close();\n+        } catch (IOException ioe) {\n+        }\n+    }\n+\n+    //////////////////////////////////////////\n+    // MetaDataFilter.Resource implementation\n+    //////////////////////////////////////////\n+\n+    public String getName() {\n+        return _entry.getName();\n+    }\n+\n+    public byte[] getContent() throws IOException {\n+        // buffer content so that future calls to getInputStream can read\n+        // the same data\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        byte[] buf = new byte[1024];\n+        for (int r; (r = _stream.read(buf)) != -1; bout.write(buf, 0, r)) ;\n+        _buf = bout.toByteArray();\n+        _stream.closeEntry();\n+        return _buf;\n+    }\n+\n+    /**\n+     * Non-closing input stream used to make sure the underlying zip\n+     * stream is not closed.\n+     */\n+    private class NoCloseInputStream extends InputStream {\n+\n+        public int available() throws IOException {\n+            return _stream.available();\n+        }\n+\n+        public int read() throws IOException {\n+            return _stream.read();\n+        }\n+\n+        public int read(byte[] b, int off, int len) throws IOException {\n+            return _stream.read(b, off, len);\n+        }\n+\n+        public void close() {\n+        }\n+    }\n+}\n+"},{"sha":"ee65e524a2b04bc7cbce57608b36abcefda529fc","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/meta/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,27 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<html>\n+<body>\n+<p><strong>Metadata Framework</strong></p>\n+\n+<p>\n+    Extendable framework for metadata parsing and serializing.\n+</p>\n+</body>\n+</html>"},{"sha":"78ea47872914b45934fb7846757c13061a7b2d39","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractListIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.ListIterator;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Abstract read-only list iterator.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+abstract class AbstractListIterator implements ListIterator {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (AbstractListIterator.class);\n+\n+    public void add(Object o) {\n+        throw new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n+    }\n+\n+    public void set(Object o) {\n+        throw new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n+    }\n+\n+    public void remove() {\n+        throw new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n+    }\n+}"},{"sha":"0bbf3336670683918aa556ec517ccafcc684a37d","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractNonSequentialResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.lang.ObjectUtils;\n+\n+/**\n+ * Abstract base class for random-access result lists. Unlike the\n+ * {@link AbstractList}, this class doesn't rely on the\n+ * {@link Collection#size} method.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public abstract class AbstractNonSequentialResultList\n+    extends AbstractResultList {\n+\n+    protected static final Object PAST_END = new Object();\n+\n+    /**\n+     * Implement this method and {@link #size}. Return {@link #PAST_END}\n+     * if the index is out of bounds.\n+     */\n+    protected abstract Object getInternal(int index);\n+\n+    public boolean contains(Object o) {\n+        assertOpen();\n+        Object obj;\n+        for (int i = 0; true; i++) {\n+            obj = getInternal(i);\n+            if (obj == PAST_END)\n+                break;\n+            if (ObjectUtils.equals(o, obj))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    public boolean containsAll(Collection c) {\n+        assertOpen();\n+        for (Iterator itr = c.iterator(); itr.hasNext();)\n+            if (!contains(itr.next()))\n+                return false;\n+        return true;\n+    }\n+\n+    public Object get(int index) {\n+        assertOpen();\n+        Object obj = getInternal(index);\n+        if (obj == PAST_END)\n+            throw new NoSuchElementException();\n+        return obj;\n+    }\n+\n+    public int indexOf(Object o) {\n+        assertOpen();\n+        Object obj;\n+        for (int i = 0; true; i++) {\n+            obj = getInternal(i);\n+            if (obj == PAST_END)\n+                break;\n+            if (ObjectUtils.equals(o, obj))\n+                return i;\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOf(Object o) {\n+        assertOpen();\n+        int index = -1;\n+        Object obj;\n+        for (int i = 0; true; i++) {\n+            obj = getInternal(i);\n+            if (obj == PAST_END)\n+                break;\n+            if (ObjectUtils.equals(o, obj))\n+                index = i;\n+        }\n+        return index;\n+    }\n+\n+    public boolean isEmpty() {\n+        assertOpen();\n+        return getInternal(0) == PAST_END;\n+    }\n+\n+    public Iterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public ListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return new ResultListIterator(new Itr(index), this);\n+    }\n+\n+    public Object[] toArray() {\n+        assertOpen();\n+        ArrayList list = new ArrayList();\n+        Object obj;\n+        for (int i = 0; true; i++) {\n+            obj = getInternal(i);\n+            if (obj == PAST_END)\n+                break;\n+            list.add(obj);\n+        }\n+        return list.toArray();\n+    }\n+\n+    public Object[] toArray(Object[] a) {\n+        assertOpen();\n+        ArrayList list = new ArrayList();\n+        Object obj;\n+        for (int i = 0; true; i++) {\n+            obj = getInternal(i);\n+            if (obj == PAST_END)\n+                break;\n+            list.add(obj);\n+        }\n+        return list.toArray(a);\n+    }\n+\n+    private class Itr extends AbstractListIterator {\n+\n+        private int _idx = 0;\n+        private Object _next = PAST_END;\n+\n+        public Itr(int index) {\n+            _idx = index;\n+        }\n+\n+        public int nextIndex() {\n+            return _idx;\n+        }\n+\n+        public int previousIndex() {\n+            return _idx - 1;\n+        }\n+\n+        public boolean hasNext() {\n+            _next = getInternal(_idx);\n+            return _next != PAST_END;\n+        }\n+\n+        public boolean hasPrevious() {\n+            return _idx > 0;\n+        }\n+\n+        public Object previous() {\n+            if (_idx == 0)\n+                throw new NoSuchElementException();\n+            return getInternal(--_idx);\n+        }\n+\n+        public Object next() {\n+            if (!hasNext())\n+                throw new NoSuchElementException();\n+            _idx++;\n+            return _next;\n+        }\n+    }\n+}"},{"sha":"e6b80be820e2a9b39a88e713688bd7e5286c3ba8","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Abstract base class for read-only result lists.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public abstract class AbstractResultList implements ResultList {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (AbstractResultList.class);\n+\n+    public void add(int index, Object element) {\n+        throw readOnly();\n+    }\n+\n+    private UnsupportedOperationException readOnly() {\n+        return new UnsupportedOperationException(_loc.get(\"read-only\")\n+            .getMessage());\n+    }\n+\n+    public boolean add(Object o) {\n+        throw readOnly();\n+    }\n+\n+    public boolean addAll(Collection c) {\n+        throw readOnly();\n+    }\n+\n+    public boolean addAll(int index, Collection c) {\n+        throw readOnly();\n+    }\n+\n+    public Object remove(int index) {\n+        throw readOnly();\n+    }\n+\n+    public boolean remove(Object o) {\n+        throw readOnly();\n+    }\n+\n+    public boolean removeAll(Collection c) {\n+        throw readOnly();\n+    }\n+\n+    public boolean retainAll(Collection c) {\n+        throw readOnly();\n+    }\n+\n+    public Object set(int index, Object element) {\n+        throw readOnly();\n+    }\n+\n+    public void clear() {\n+        throw readOnly();\n+    }\n+\n+    public List subList(int from, int to) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    protected void assertOpen() {\n+        if (isClosed())\n+            throw new NoSuchElementException(_loc.get(\"closed\").getMessage());\n+    }\n+}"},{"sha":"988389399c95c98b5a236baa7e7100793e927997","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/AbstractSequentialResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.AbstractSequentialList;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.lang.ObjectUtils;\n+\n+/**\n+ * Abstract base class for sequential result lists. Unlike the\n+ * {@link AbstractSequentialList}, this class doesn't rely on the\n+ * {@link Collection#size} method.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public abstract class AbstractSequentialResultList extends AbstractResultList {\n+\n+    /**\n+     * Implement this method and {@link #size}.\n+     */\n+    protected abstract ListIterator itr(int index);\n+\n+    public boolean contains(Object o) {\n+        assertOpen();\n+        for (Iterator itr = itr(0); itr.hasNext();)\n+            if (ObjectUtils.equals(o, itr.next()))\n+                return true;\n+        return false;\n+    }\n+\n+    public boolean containsAll(Collection c) {\n+        assertOpen();\n+        for (Iterator itr = c.iterator(); itr.hasNext();)\n+            if (!contains(itr.next()))\n+                return false;\n+        return true;\n+    }\n+\n+    public Object get(int index) {\n+        assertOpen();\n+        return itr(index).next();\n+    }\n+\n+    public int indexOf(Object o) {\n+        assertOpen();\n+        int index = 0;\n+        for (Iterator itr = itr(0); itr.hasNext(); index++)\n+            if (ObjectUtils.equals(o, itr.next()))\n+                return index;\n+        return -1;\n+    }\n+\n+    public int lastIndexOf(Object o) {\n+        assertOpen();\n+        int index = -1;\n+        int i = 0;\n+        for (Iterator itr = itr(0); itr.hasNext(); i++)\n+            if (ObjectUtils.equals(o, itr.next()))\n+                index = i;\n+        return index;\n+    }\n+\n+    public boolean isEmpty() {\n+        assertOpen();\n+        return !itr(0).hasNext();\n+    }\n+\n+    public Iterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public ListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return new ResultListIterator(itr(index), this);\n+    }\n+\n+    public Object[] toArray() {\n+        assertOpen();\n+        ArrayList list = new ArrayList();\n+        for (Iterator itr = itr(0); itr.hasNext();)\n+            list.add(itr.next());\n+        return list.toArray();\n+    }\n+\n+    public Object[] toArray(Object[] a) {\n+        assertOpen();\n+        ArrayList list = new ArrayList();\n+        for (Iterator itr = itr(0); itr.hasNext();)\n+            list.add(itr.next());\n+        return list.toArray(a);\n+    }\n+}"},{"sha":"17a6b460a2761a378fa735c3becc6d73a0d56648","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/EagerResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * Simple, non-lazy ResultList implementation\n+ *\n+ * @author Patrick Linskey\n+ * @nojavadoc\n+ */\n+public class EagerResultList extends ListResultList implements ResultList {\n+\n+    public EagerResultList(ResultObjectProvider rop) {\n+        super(new ArrayList());\n+        try {\n+            rop.open();\n+            while (rop.next())\n+                getDelegate().add(rop.getResultObject());\n+        } catch (RuntimeException re) {\n+            throw re;\n+        } catch (Exception e) {\n+            rop.handleCheckedException(e);\n+        } finally {\n+            try {\n+                rop.close();\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+}\n+"},{"sha":"7b3049fd420ab962235368cac8509d6b63feaca5","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/LazyForwardResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.io.ObjectStreamException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Lazy forward-only result list.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class LazyForwardResultList extends AbstractSequentialResultList\n+    implements ResultList {\n+\n+    private static final int OPEN = 0;\n+    private static final int CLOSED = 1;\n+    private static final int FREED = 2;\n+\n+    private ResultObjectProvider _rop = null;\n+    private final List _list = new ArrayList();\n+    private int _state = OPEN;\n+    private int _size = -1;\n+\n+    public LazyForwardResultList(ResultObjectProvider rop) {\n+        _rop = rop;\n+        try {\n+            _rop.open();\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+        }\n+    }\n+\n+    public boolean isProviderOpen() {\n+        return _state == OPEN;\n+    }\n+\n+    public boolean isClosed() {\n+        return _state == CLOSED;\n+    }\n+\n+    public void close() {\n+        if (_state != CLOSED) {\n+            free();\n+            _state = CLOSED;\n+        }\n+    }\n+\n+    public Object get(int index) {\n+        assertOpen();\n+\n+        // optimization for getting sequntially\n+        if (index == _list.size())\n+            addNext();\n+        if (index < _list.size())\n+            return _list.get(index);\n+\n+        return super.get(index);\n+    }\n+\n+    protected ListIterator itr(int index) {\n+        return (_state != OPEN) ? _list.listIterator(index) : new Itr(index);\n+    }\n+\n+    public int size() {\n+        assertOpen();\n+        if (_size != -1)\n+            return _size;\n+        if (_state != OPEN)\n+            return _list.size();\n+        try {\n+            _size = _rop.size();\n+            return _size;\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return -1;\n+        }\n+    }\n+\n+    private boolean addNext() {\n+        try {\n+            if (!_rop.next()) {\n+                free();\n+                return false;\n+            }\n+            _list.add(_rop.getResultObject());\n+            return true;\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return false;\n+        }\n+    }\n+\n+    private void free() {\n+        if (_state == OPEN) {\n+            try {\n+                _rop.close();\n+            } catch (Exception e) {\n+            }\n+            _state = FREED;\n+        }\n+    }\n+\n+    public Object writeReplace() throws ObjectStreamException {\n+        // fully traverse results\n+        if (_state == OPEN)\n+            for (Iterator itr = itr(_list.size()); itr.hasNext();)\n+                itr.next();\n+        return _list;\n+    }\n+\n+    public int hashCode() {\n+        // superclass tries to traverses entire list for hashcode\n+        return System.identityHashCode(this);\n+    }\n+\n+    public boolean equals(Object other) {\n+        // superclass tries to traverse entire list for equality\n+        return other == this;\n+    }\n+\n+    private class Itr extends AbstractListIterator {\n+\n+        private int _idx = 0;\n+\n+        public Itr(int index) {\n+            _idx = Math.min(index, _list.size());\n+            while (_idx < index)\n+                next();\n+        }\n+\n+        public int nextIndex() {\n+            return _idx;\n+        }\n+\n+        public int previousIndex() {\n+            return _idx - 1;\n+        }\n+\n+        public boolean hasNext() {\n+            if (_list.size() > _idx)\n+                return true;\n+            if (_state != OPEN)\n+                return false;\n+            return addNext();\n+        }\n+\n+        public boolean hasPrevious() {\n+            return _idx > 0;\n+        }\n+\n+        public Object previous() {\n+            if (_idx == 0)\n+                throw new NoSuchElementException();\n+            return _list.get(--_idx);\n+        }\n+\n+        public Object next() {\n+            if (!hasNext())\n+                throw new NoSuchElementException();\n+            return _list.get(_idx++);\n+        }\n+    }\n+}"},{"sha":"5f3d2b28323fa7f9ef31a57f2b85521dbce47289","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * A basic {@link ResultList} implementation that wraps a normal list.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ListResultList extends AbstractResultList {\n+\n+    private final List _list;\n+    private boolean _closed = false;\n+\n+    /**\n+     * Constructor. Supply delegate.\n+     */\n+    public ListResultList(List list) {\n+        _list = list;\n+    }\n+\n+    /**\n+     * Return the wrapped list.\n+     */\n+    public List getDelegate() {\n+        return _list;\n+    }\n+\n+    public boolean isProviderOpen() {\n+        return false;\n+    }\n+\n+    public boolean isClosed() {\n+        return _closed;\n+    }\n+\n+    public void close() {\n+        _closed = true;\n+    }\n+\n+    public boolean contains(Object o) {\n+        assertOpen();\n+        return _list.contains(o);\n+    }\n+\n+    public boolean containsAll(Collection c) {\n+        assertOpen();\n+        return _list.containsAll(c);\n+    }\n+\n+    public Object get(int index) {\n+        assertOpen();\n+        return _list.get(index);\n+    }\n+\n+    public int indexOf(Object o) {\n+        assertOpen();\n+        return _list.indexOf(o);\n+    }\n+\n+    public int lastIndexOf(Object o) {\n+        assertOpen();\n+        return _list.lastIndexOf(o);\n+    }\n+\n+    public int size() {\n+        assertOpen();\n+        return _list.size();\n+    }\n+\n+    public boolean isEmpty() {\n+        assertOpen();\n+        return _list.isEmpty();\n+    }\n+\n+    public Iterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public ListIterator listIterator() {\n+        return new ResultListIterator(_list.listIterator(), this);\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return new ResultListIterator(_list.listIterator(index), this);\n+    }\n+\n+    public Object[] toArray() {\n+        assertOpen();\n+        return _list.toArray();\n+    }\n+\n+    public Object[] toArray(Object[] a) {\n+        assertOpen();\n+        return _list.toArray(a);\n+    }\n+\n+    public Object writeReplace() {\n+        return _list;\n+    }\n+}"},{"sha":"b2a9b28db95da08a9ba425104ae7d18edc1e8ded","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ListResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+import org.apache.openjpa.lib.util.Closeable;\n+\n+/**\n+ * A result object provider wrapped around a normal list.\n+ *\n+ * @author Abe White\n+ */\n+public class ListResultObjectProvider implements ResultObjectProvider {\n+\n+    private final List _list;\n+    private int _idx = -1;\n+\n+    /**\n+     * Constructor. Supply delegate.\n+     */\n+    public ListResultObjectProvider(List list) {\n+        _list = list;\n+    }\n+\n+    public List getDelegate() {\n+        return _list;\n+    }\n+\n+    public boolean supportsRandomAccess() {\n+        return true;\n+    }\n+\n+    public void open() throws Exception {\n+    }\n+\n+    public Object getResultObject() throws Exception {\n+        return _list.get(_idx);\n+    }\n+\n+    public boolean next() throws Exception {\n+        return absolute(_idx + 1);\n+    }\n+\n+    public boolean absolute(int pos) throws Exception {\n+        if (pos >= 0 && pos < _list.size()) {\n+            _idx = pos;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public int size() throws Exception {\n+        return _list.size();\n+    }\n+\n+    public void reset() throws Exception {\n+        _idx = -1;\n+    }\n+\n+    public void close() throws Exception {\n+        if (_list instanceof Closeable)\n+            try {\n+                ((Closeable) _list).close();\n+            } catch (Exception e) {\n+            }\n+    }\n+\n+    public void handleCheckedException(Exception e) {\n+        // shouldn't ever happen\n+        throw new NestableRuntimeException(e);\n+    }\n+}"},{"sha":"f3a178cfe0c15e879ba222101c9342918f58bb61","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","status":"added","additions":230,"deletions":0,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/MergedResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,230 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n+/**\n+ * A result object provider that merges multiple result object provider\n+ * delegates. Support exists for maintaining ordering of the internally held\n+ * results, provided that each of the individual results is itself ordered.\n+ *\n+ * @author Abe White\n+ * @author Marc Prud'hommeaux\n+ */\n+public class MergedResultObjectProvider implements ResultObjectProvider {\n+\n+    private static final byte UNOPENED = 0;\n+    private static final byte OPENED = 1;\n+    private static final byte VALUE = 2;\n+    private static final byte DONE = 3;\n+\n+    private final ResultObjectProvider[] _rops;\n+    private final Comparator _comp;\n+    private final byte[] _status;\n+    private Object[] _values;\n+    private Object[] _orderValues;\n+    private Object _cur = null;\n+    private int _size = -1;\n+\n+    /**\n+     * Constructor. Provide delegates.\n+     */\n+    public MergedResultObjectProvider(ResultObjectProvider[] rops) {\n+        this(rops, null);\n+    }\n+\n+    /**\n+     * Constructor. Provide delegates and optional comparator.\n+     */\n+    public MergedResultObjectProvider(ResultObjectProvider[] rops,\n+        Comparator comp) {\n+        _rops = rops;\n+        _comp = comp;\n+        _status = new byte[rops.length];\n+        _values = (comp == null) ? null : new Object[rops.length];\n+        _orderValues = (comp == null) ? null : new Object[rops.length];\n+    }\n+\n+    public boolean supportsRandomAccess() {\n+        return false;\n+    }\n+\n+    public void open() throws Exception {\n+        // if we have a comparator, then open all; else open first\n+        int len = (_comp != null) ? _rops.length : 1;\n+        for (int i = 0; i < len; i++) {\n+            _rops[i].open();\n+            _status[i] = OPENED;\n+        }\n+    }\n+\n+    public boolean absolute(int pos) throws Exception {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public int size() throws Exception {\n+        if (_size != -1)\n+            return _size;\n+\n+        // have to open all to get sizes\n+        for (int i = 0; i < _status.length; i++) {\n+            if (_status[i] == UNOPENED) {\n+                _rops[i].open();\n+                _status[i] = OPENED;\n+            }\n+        }\n+\n+        int total = 0;\n+        int size;\n+        for (int i = 0; i < _rops.length; i++) {\n+            size = _rops[i].size();\n+            if (size == Integer.MAX_VALUE) {\n+                total = size;\n+                break;\n+            }\n+            total += size;\n+        }\n+        _size = total;\n+        return _size;\n+    }\n+\n+    public void reset() throws Exception {\n+        for (int i = 0; i < _rops.length; i++)\n+            if (_status[i] != UNOPENED)\n+                _rops[i].reset();\n+        clear();\n+    }\n+\n+    public void close() throws Exception {\n+        Exception err = null;\n+        for (int i = 0; i < _rops.length; i++) {\n+            try {\n+                if (_status[i] != UNOPENED)\n+                    _rops[i].close();\n+            } catch (Exception e) {\n+                if (err == null)\n+                    err = e;\n+            }\n+        }\n+\n+        clear();\n+        if (err != null)\n+            throw err;\n+    }\n+\n+    private void clear() {\n+        _cur = null;\n+        for (int i = 0; i < _rops.length; i++) {\n+            _status[i] = OPENED;\n+            if (_values != null)\n+                _values[i] = null;\n+            if (_orderValues != null)\n+                _orderValues[i] = null;\n+        }\n+    }\n+\n+    public void handleCheckedException(Exception e) {\n+        if (_rops.length == 0)\n+            throw new NestableRuntimeException(e);\n+        _rops[0].handleCheckedException(e);\n+    }\n+\n+    public boolean next() throws Exception {\n+        // initialize all rops with the latest values\n+        boolean hasValue = false;\n+        for (int i = 0; i < _status.length; i++) {\n+            switch (_status[i]) {\n+                case UNOPENED:\n+                    // this will only ever be the case if we aren't ordering\n+                    _rops[i].open();\n+                    _status[i] = OPENED;\n+                    // no break\n+                case OPENED:\n+                    // if this rop has a value, cache it; if we're not ordering,\n+                    // then that's the value to return\n+                    if (_rops[i].next()) {\n+                        if (_comp == null) {\n+                            _cur = _rops[i].getResultObject();\n+                            return true;\n+                        } else {\n+                            hasValue = true;\n+                            _status[i] = VALUE;\n+                            _values[i] = _rops[i].getResultObject();\n+                            _orderValues[i] = getOrderingValue(_values[i],\n+                                i, _rops[i]);\n+                        }\n+                    } else\n+                        _status[i] = DONE;\n+                    break;\n+                case VALUE:\n+                    // we only use this state when ordering\n+                    hasValue = true;\n+                    break;\n+            }\n+        }\n+\n+        // if we get to this point without a comparator, it means none\n+        // of our rops have any more values\n+        if (_comp == null || !hasValue)\n+            return false;\n+\n+        // for all the rops with values, find the 'least' one according to\n+        // the comparator\n+        int least = -1;\n+        Object orderVal = null;\n+        for (int i = 0; i < _orderValues.length; i++) {\n+            if (_status[i] != VALUE)\n+                continue;\n+            if (least == -1 || _comp.compare(_orderValues[i], orderVal) < 0) {\n+                least = i;\n+                orderVal = _orderValues[i];\n+            }\n+        }\n+\n+        // assign the least value to the current one, and clear the cached\n+        // value for that rop so that we know to get the next value for\n+        // the next comparison\n+        _cur = _values[least];\n+        _values[least] = null;\n+        _orderValues[least] = null;\n+        _status[least] = OPENED;\n+        return true;\n+    }\n+\n+    public Object getResultObject() throws Exception {\n+        return _cur;\n+    }\n+\n+    /**\n+     * Return the value to use for ordering on the given result value. Returns\n+     * the result value by default.\n+     *\n+     * @param val the result value\n+     * @param idx the index of the result object provider in the array\n+     * given on construction that produced the result value\n+     * @param rop the result object provider that produced the result value\n+     */\n+    protected Object getOrderingValue(Object val, int idx,\n+        ResultObjectProvider rop) {\n+        return val;\n+    }\n+}"},{"sha":"d125a25091b7d9df31faf627c7f599b19a8e8b67","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","status":"added","additions":236,"deletions":0,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RandomAccessResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.io.ObjectStreamException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import serp.util.Numbers;\n+\n+/**\n+ * Random-access result list implementation. It maintains a map\n+ * of the items that we have already instantiated.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class RandomAccessResultList extends AbstractNonSequentialResultList {\n+\n+    private static final int OPEN = 0;\n+    private static final int FREED = 1;\n+    private static final int CLOSED = 2;\n+\n+    // data provider\n+    private ResultObjectProvider _rop = null;\n+\n+    // holds all the row values that have been instantiated so far\n+    private Map _rows = null;\n+    private Object[] _full = null;\n+\n+    // bookkeeping\n+    private long _requests = 0;\n+    private int _state = OPEN;\n+    private int _size = -1;\n+\n+    public RandomAccessResultList(ResultObjectProvider rop) {\n+        _rop = rop;\n+        _rows = newRowMap();\n+\n+        try {\n+            _rop.open();\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+        }\n+    }\n+\n+    /**\n+     * Override this method to control what kind of map is used for\n+     * the instantiated rows.\n+     */\n+    protected Map newRowMap() {\n+        return new HashMap();\n+    }\n+\n+    public boolean isProviderOpen() {\n+        return _state == OPEN;\n+    }\n+\n+    public boolean isClosed() {\n+        return _state == CLOSED;\n+    }\n+\n+    public void close() {\n+        if (_state != CLOSED) {\n+            free();\n+            _state = CLOSED;\n+        }\n+    }\n+\n+    protected Object getInternal(int index) {\n+        if (_full != null) {\n+            if (index >= _full.length)\n+                return PAST_END;\n+            return _full[index];\n+        }\n+\n+        Integer i = Numbers.valueOf(index);\n+        Object ret = _rows.get(i);\n+        if (ret != null) {\n+            if (ret instanceof Null)\n+                return null;\n+            return ret;\n+        }\n+\n+        ret = instantiateRow(i);\n+        return (ret == null) ? PAST_END : ret;\n+    }\n+\n+    /**\n+     * Instantiate the row object at the specified index.\n+     */\n+    private Object instantiateRow(Integer i) {\n+        _requests++;\n+        try {\n+            if (!_rop.absolute(i.intValue()))\n+                return PAST_END;\n+\n+            Object ob = _rop.getResultObject();\n+            if (ob == null)\n+                ob = new Null();\n+\n+            // cache the result\n+            _rows.put(i, ob);\n+\n+            // check to see if our map is full\n+            checkComplete();\n+            return ob;\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Check to see if the soft map is the same size as all the\n+     * rows in the Result: if so, we copy over the values to a\n+     * hard reference HashSet and close the Result object associated with\n+     * this endeavour.\n+     */\n+    private void checkComplete() {\n+        // only check if we've actually gotten the size for some reason already\n+        if (_size == -1 || _rows.size() != _size)\n+            return;\n+\n+        Object[] full = new Object[_size];\n+        int count = 0;\n+        Integer key;\n+        for (Iterator itr = _rows.keySet().iterator(); itr.hasNext(); count++) {\n+            key = (Integer) itr.next();\n+            full[key.intValue()] = _rows.get(key);\n+        }\n+\n+        // double-check, in case any of the soft references were\n+        // cleaned up between the time we checked the size and the\n+        // time we completed the copy to the hard reference map\n+        if (count == _size) {\n+            _full = full;\n+            free();\n+        }\n+    }\n+\n+    public int size() {\n+        assertOpen();\n+        if (_size != -1)\n+            return _size;\n+        if (_full != null)\n+            return _full.length;\n+        try {\n+            _size = _rop.size();\n+            return _size;\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return -1;\n+        }\n+    }\n+\n+    private void free() {\n+        if (_state == OPEN) {\n+            try {\n+                _rop.close();\n+            } catch (Exception e) {\n+            }\n+            _rows = null;\n+            _state = FREED;\n+        }\n+    }\n+\n+    public Object writeReplace() throws ObjectStreamException {\n+        if (_full != null)\n+            return new ListResultList(Arrays.asList(_full));\n+        ArrayList list = new ArrayList();\n+        for (Iterator itr = iterator(); itr.hasNext();)\n+            list.add(itr.next());\n+        return list;\n+    }\n+\n+    public String toString() {\n+        return getClass().getName()\n+            + \"; identity: \" + System.identityHashCode(this)\n+            + \"; cached: \" + _rows.size()\n+            + \"; requests: \" + _requests;\n+    }\n+\n+    public int hashCode() {\n+        // superclass tries to traverses entire list for hashcode\n+        return System.identityHashCode(this);\n+    }\n+\n+    public boolean equals(Object other) {\n+        // superclass tries to traverse entire list for equality\n+        return other == this;\n+    }\n+\n+    /**\n+     * Used to represent nulls in the result list. Can't use a singleton\n+     * pattern, because then there will always be a hard ref to all the\n+     * nulls, and they'll never get GC'd; this is bad in the unlikely\n+     * event of a huge result set with lots of nulls.\n+     */\n+    private static class Null {\n+\n+    }\n+}\n+"},{"sha":"db02762605d2647f94b086bd2a4efe5040404bca","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/RangeResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Prevents a view of a given range of indices from the delegate\n+ * result object provider.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class RangeResultObjectProvider implements ResultObjectProvider {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (RangeResultObjectProvider.class);\n+\n+    private final ResultObjectProvider _delegate;\n+    private final int _startIdx;\n+    private final int _endIdx;\n+    private int _idx = -1;\n+\n+    /**\n+     * Constructor. Because this is a wrapper around some delegate,\n+     * and result object providers work with int indexes, neither the start\n+     * or end index can be greater than Integer.MAX_VALUE(with the exception\n+     * of Long.MAX_VALUE, which is used to indicate no limit).\n+     *\n+     * @param delegate the result object provider to delegate to\n+     * @param startIdx 0-based inclusive start index of the range\n+     * to present; must be &lt; Integer.MAX_VALUE\n+     * @param endIdx 0-based exclusive end index of the range to\n+     * present; must be &lt; Integer.MAX_VALUE, or Long.MAX_VALUE for no limit\n+     */\n+    public RangeResultObjectProvider(ResultObjectProvider delegate,\n+        long startIdx, long endIdx) {\n+        // use Integer.MAX_VALUE for no limit internally\n+        if (endIdx == Long.MAX_VALUE)\n+            endIdx = Integer.MAX_VALUE;\n+\n+        _delegate = delegate;\n+        if (startIdx > Integer.MAX_VALUE || endIdx > Integer.MAX_VALUE)\n+            throw new IllegalArgumentException(_loc.get(\"range-too-high\",\n+                String.valueOf(startIdx), String.valueOf(endIdx)).getMessage());\n+\n+        _startIdx = (int) startIdx;\n+        _endIdx = (int) endIdx;\n+    }\n+\n+    public boolean supportsRandomAccess() {\n+        return _delegate.supportsRandomAccess();\n+    }\n+\n+    public void open() throws Exception {\n+        _delegate.open();\n+    }\n+\n+    public Object getResultObject() throws Exception {\n+        if (_idx < _startIdx || _idx >= _endIdx)\n+            throw new NoSuchElementException(String.valueOf(_idx));\n+        return _delegate.getResultObject();\n+    }\n+\n+    public boolean next() throws Exception {\n+        // advance up to just behind _startIdx if we haven't already\n+        while (_idx < _startIdx - 1) {\n+            if (_delegate.supportsRandomAccess()) {\n+                _idx = _startIdx - 1;\n+                if (!_delegate.absolute(_startIdx - 1))\n+                    return false;\n+            } else {\n+                _idx++;\n+                if (!_delegate.next())\n+                    return false;\n+            }\n+        }\n+\n+        // make sure we're not falling off the end of the range\n+        if (_idx >= _endIdx - 1)\n+            return false;\n+\n+        _idx++;\n+        return _delegate.next();\n+    }\n+\n+    public boolean absolute(int pos) throws Exception {\n+        _idx = pos + _startIdx;\n+        if (_idx >= _endIdx)\n+            return false;\n+        return _delegate.absolute(_idx);\n+    }\n+\n+    public int size() throws Exception {\n+        int size = _delegate.size();\n+        if (size == Integer.MAX_VALUE)\n+            return size;\n+        size = Math.min(_endIdx, size) - _startIdx;\n+        return (size < 0) ? 0 : size;\n+    }\n+\n+    public void reset() throws Exception {\n+        _idx = -1;\n+        _delegate.reset();\n+    }\n+\n+    public void close() throws Exception {\n+        _delegate.close();\n+    }\n+\n+    public void handleCheckedException(Exception e) {\n+        _delegate.handleCheckedException(e);\n+    }\n+}\n+"},{"sha":"5492f89c89ccba30f07666b1f8b979e98003af23","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import org.apache.openjpa.lib.util.Closeable;\n+\n+/**\n+ * List interface that represents a potentially lazy ResultList instantiation.\n+ * A ResultList will typically be instantiated from a factory, and\n+ * will use a ResultObjectProvider for obtaining individual object\n+ * data representations. Depending on the support for scrolling inputs,\n+ * the list that is returned may use lazy instantiation of the\n+ * objects, and thus allow very large result sets to be obtained and\n+ * manipulated. Note that wrapping a ResultList in another Collection will\n+ * always instantiate the entire set of elements contained in the\n+ * ResultList. This may not always be desireable, since the list may\n+ * be very large.\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public interface ResultList extends List, Serializable, Closeable {\n+\n+    /**\n+     * Returns true if the provider backing this list is open.\n+     */\n+    public boolean isProviderOpen();\n+\n+    /**\n+     * Close the list.\n+     */\n+    public void close();\n+\n+    /**\n+     * Returns true if the list has been closed.\n+     */\n+    public boolean isClosed();\n+}\n+"},{"sha":"3e1880f1ae0ef97d0129ae120a80d16870748b95","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultListIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Wrapper iterator that will return false for <code>hasNext()</code> if\n+ * the owning ResultList has been closed.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n+public class ResultListIterator extends AbstractListIterator {\n+\n+    private static final Localizer _loc = Localizer.forPackage(\n+        ResultListIterator.class);\n+\n+    private final ListIterator _li;\n+    private final ResultList _rl;\n+\n+    public ResultListIterator(ListIterator li, ResultList rl) {\n+        _li = li;\n+        _rl = rl;\n+    }\n+\n+    public ResultList getResultList() {\n+        return _rl;\n+    }\n+\n+    public boolean hasNext() {\n+        if (_rl.isClosed())\n+            return false;\n+        return _li.hasNext();\n+    }\n+\n+    public boolean hasPrevious() {\n+        return _li.hasPrevious();\n+    }\n+\n+    public Object next() {\n+        if (_rl.isClosed())\n+            throw new NoSuchElementException(_loc.get(\"closed\").getMessage());\n+        return _li.next();\n+    }\n+\n+    public int nextIndex() {\n+        return _li.nextIndex();\n+    }\n+\n+    public Object previous() {\n+        return _li.previous();\n+    }\n+\n+    public int previousIndex() {\n+        return _li.previousIndex();\n+    }\n+}\n+"},{"sha":"63c1f0077586708e25b2334ab4c513ebb809c696","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import org.apache.openjpa.lib.util.Closeable;\n+\n+/**\n+ * Interface that allows lazy/custom instantiation of input objects.\n+ * {@link ResultList} objects do not necessarily load in data all\n+ * at once. Instead, they may lazily load objects as necessary. So,\n+ * the lifespan of a {@link ResultObjectProvider} instance is\n+ * related to how the application deals with processing the\n+ * {@link ResultList} created with a given\n+ * {@link ResultObjectProvider} instance.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @author Patrick Linskey\n+ * @author Abe White\n+ */\n+public interface ResultObjectProvider extends Closeable {\n+\n+    /**\n+     * Return true if this provider supports random access.\n+     */\n+    public boolean supportsRandomAccess();\n+\n+    /**\n+     * Open the result. This will be called before\n+     * {@link #next}, {@link #absolute}, or {@link #size}.\n+     */\n+    public void open() throws Exception;\n+\n+    /**\n+     * Instantiate the current result object. This method will only be\n+     * called after {@link #next} or {@link #absolute}.\n+     */\n+    public Object getResultObject() throws Exception;\n+\n+    /**\n+     * Advance the input to the next position. Return <code>true</code> if\n+     * there is more data; otherwise <code>false</code>.\n+     */\n+    public boolean next() throws Exception;\n+\n+    /**\n+     * Move to the given 0-based position. This method is\n+     * only called for providers that support random access.\n+     * Return <code>true</code> if there is data at this position;\n+     * otherwise <code>false</code>. This may be invoked in place of\n+     * {@link #next}.\n+     */\n+    public boolean absolute(int pos) throws Exception;\n+\n+    /**\n+     * Return the number of items in the input, or {@link Integer#MAX_VALUE}\n+     * if the size in unknown.\n+     */\n+    public int size() throws Exception;\n+\n+    /**\n+     * Reset this provider. This is an optional operation. If supported,\n+     * it should move the position of the provider to before the first\n+     * element. Non-random-access providers may be able to support this\n+     * method by re-acquiring all resources as if the result were just opened.\n+     */\n+    public void reset() throws Exception;\n+\n+    /**\n+     * Free the resources associated with this provider.\n+     */\n+    public void close() throws Exception;\n+\n+    /**\n+     * Any checked exceptions that are thrown will be passed to this method.\n+     * The provider should re-throw the exception as an appropriate unchecked\n+     * exception.\n+     */\n+    public void handleCheckedException(Exception e);\n+}"},{"sha":"72a8a8bb284f7cf27e76b2be6c97e1272d096946","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/ResultObjectProviderIterator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.util.Closeable;\n+\n+/**\n+ * Iterator wrapped around a {@link ResultObjectProvider}.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ResultObjectProviderIterator implements Iterator, Closeable {\n+\n+    private final ResultObjectProvider _rop;\n+    private Boolean _hasNext = null;\n+    private Boolean _open = null;\n+\n+    /**\n+     * Constructor. Supply object provider.\n+     */\n+    public ResultObjectProviderIterator(ResultObjectProvider rop) {\n+        _rop = rop;\n+    }\n+\n+    /**\n+     * Close the underlying result object provider.\n+     */\n+    public void close() {\n+        if (_open == Boolean.TRUE) {\n+            try {\n+                _rop.close();\n+            } catch (Exception e) {\n+            }\n+            _open = Boolean.FALSE;\n+        }\n+    }\n+\n+    public void remove() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean hasNext() {\n+        if (_open == Boolean.FALSE)\n+            return false;\n+\n+        if (_hasNext == null) {\n+            try {\n+                if (_open == null) {\n+                    _rop.open();\n+                    _open = Boolean.TRUE;\n+                }\n+                _hasNext = (_rop.next()) ? Boolean.TRUE : Boolean.FALSE;\n+            } catch (RuntimeException re) {\n+                close();\n+                throw re;\n+            } catch (Exception e) {\n+                close();\n+                _rop.handleCheckedException(e);\n+                return false;\n+            }\n+        }\n+\n+        // close if we reach the end of the list\n+        if (!_hasNext.booleanValue()) {\n+            close();\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public Object next() {\n+        if (!hasNext())\n+            throw new NoSuchElementException();\n+        try {\n+            Object ret = _rop.getResultObject();\n+            _hasNext = null;\n+            return ret;\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return null;\n+        }\n+    }\n+\n+    protected void finalize() {\n+        close();\n+    }\n+}"},{"sha":"afb84c547227e7c0263dcaa371e4aae463272aa7","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SimpleResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.io.ObjectStreamException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * An almost stateless {@link ResultList} designed for use with result\n+ * object providers backed by efficient random-access data structures, such\n+ * as the {@link ListResultObjectProvider}. This result list does not\n+ * perform any caching.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class SimpleResultList extends AbstractNonSequentialResultList {\n+\n+    private final transient ResultObjectProvider _rop;\n+    private boolean _closed = false;\n+    private int _size = -1;\n+\n+    public SimpleResultList(ResultObjectProvider rop) {\n+        _rop = rop;\n+        try {\n+            _rop.open();\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+        }\n+    }\n+\n+    public boolean isProviderOpen() {\n+        return !_closed;\n+    }\n+\n+    public boolean isClosed() {\n+        return _closed;\n+    }\n+\n+    public void close() {\n+        if (!_closed) {\n+            _closed = true;\n+            try {\n+                _rop.close();\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n+    public Object getInternal(int index) {\n+        try {\n+            if (!_rop.absolute(index))\n+                return PAST_END;\n+            return _rop.getResultObject();\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return PAST_END;\n+        }\n+    }\n+\n+    public int size() {\n+        assertOpen();\n+        if (_size != -1)\n+            return _size;\n+        try {\n+            _size = _rop.size();\n+            return _size;\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return -1;\n+        }\n+    }\n+\n+    public Object writeReplace() throws ObjectStreamException {\n+        if (_closed)\n+            return this;\n+\n+        // load results into list\n+        List list = new ArrayList();\n+        for (Iterator itr = iterator(); itr.hasNext();)\n+            list.add(itr.next());\n+        return list;\n+    }\n+}"},{"sha":"64d54d804fae82f07def46734dd7b798c4c2d658","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/SoftRandomAccessResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.ReferenceMap;\n+\n+/**\n+ * Specialization of the {@link RandomAccessResultList} that only maintains\n+ * soft references to instantiated objects.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class SoftRandomAccessResultList extends RandomAccessResultList {\n+\n+    public SoftRandomAccessResultList(ResultObjectProvider rop) {\n+        super(rop);\n+    }\n+\n+    protected Map newRowMap() {\n+        return new ReferenceMap();\n+    }\n+}"},{"sha":"aa3c486d5939502d6fb0461d5bf82758df55042f","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","status":"added","additions":175,"deletions":0,"changes":175,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/WindowResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.io.ObjectStreamException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * ResultList implementation that uses a forward-scrolling window of results.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class WindowResultList extends AbstractNonSequentialResultList {\n+\n+    private static final int OPEN = 0;\n+    private static final int FREED = 1;\n+    private static final int CLOSED = 2;\n+\n+    private final Object[] _window;\n+    private int _pos = -1;\n+    private ResultObjectProvider _rop = null;\n+    private boolean _random = false;\n+    private int _state = OPEN;\n+    private int _size = -1;\n+\n+    public WindowResultList(ResultObjectProvider rop) {\n+        this(rop, 10);\n+    }\n+\n+    public WindowResultList(ResultObjectProvider rop, int windowSize) {\n+        _rop = rop;\n+\n+        if (windowSize <= 0)\n+            windowSize = 10;\n+        _window = new Object[windowSize];\n+\n+        try {\n+            _rop.open();\n+            _random = _rop.supportsRandomAccess();\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+        }\n+    }\n+\n+    public boolean isProviderOpen() {\n+        return _state == OPEN;\n+    }\n+\n+    public boolean isClosed() {\n+        return _state == CLOSED;\n+    }\n+\n+    public void close() {\n+        if (_state != CLOSED) {\n+            free();\n+            _state = CLOSED;\n+        }\n+    }\n+\n+    public int size() {\n+        assertOpen();\n+        if (_size != -1)\n+            return _size;\n+        try {\n+            _size = _rop.size();\n+            return _size;\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return -1;\n+        }\n+    }\n+\n+    public Object getInternal(int index) {\n+        // out of range?\n+        if (index < 0 || (_size != -1 && index >= _size))\n+            return PAST_END;\n+\n+        try {\n+            // if this is before window range, move window back\n+            if (index < _pos) {\n+                if (!_random || index == 0)\n+                    _rop.reset();\n+                _pos = -1;\n+            }\n+\n+            // if this is the first get or past window range, move window\n+            if (_pos == -1 || index >= _pos + _window.length) {\n+                // position result provider just before requested index\n+                if (_random && index != 0) {\n+                    if (!_rop.absolute(index - 1))\n+                        return PAST_END;\n+                } else {\n+                    int begin = (_pos == -1) ? 0 : _pos + _window.length;\n+                    for (int i = begin; i < index; i++)\n+                        if (!_rop.next())\n+                            return PAST_END;\n+                }\n+\n+                // create window starting at requested index\n+                int end = -1;\n+                for (int i = 0; i < _window.length; i++) {\n+                    if (end == -1 && !_rop.next())\n+                        end = i;\n+                    _window[i] = (end == -1) ? _rop.getResultObject()\n+                        : PAST_END;\n+                }\n+                _pos = index;\n+\n+                // if the window spans the entire result list, free\n+                if (end != -1 && _pos == 0) {\n+                    _size = end;\n+                    free();\n+                }\n+            }\n+\n+            // grab result from window\n+            return _window[index - _pos];\n+        } catch (RuntimeException re) {\n+            close();\n+            throw re;\n+        } catch (Exception e) {\n+            close();\n+            _rop.handleCheckedException(e);\n+            return null;\n+        }\n+    }\n+\n+    private void free() {\n+        if (_state == OPEN) {\n+            try {\n+                _rop.close();\n+            } catch (Exception e) {\n+            }\n+            _state = FREED;\n+        }\n+    }\n+\n+    public Object writeReplace() throws ObjectStreamException {\n+        if (_state != OPEN)\n+            return this;\n+\n+        // load results into list\n+        List list = new ArrayList();\n+        for (Iterator itr = iterator(); itr.hasNext();)\n+            list.add(itr.next());\n+        return list;\n+    }\n+}"},{"sha":"32bce87d77d4bbd49106f250e30e8e0bcb893187","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/rop/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,28 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<html>\n+<body>\n+<p><strong>Result Object Provider Framework</strong></p>\n+\n+<p>\n+    This package provides a framework for the lazy loading of potentially\n+    large lists of data.\n+</p>\n+</body>\n+</html>"},{"sha":"58eb052de8f617740bd173a2df2b100a1c7b2f12","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Base16Encoder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+/**\n+ * Base 16 encoder.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n+public class Base16Encoder {\n+\n+    private final static char[] HEX = new char[]{\n+        '0', '1', '2', '3', '4', '5', '6', '7',\n+        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n+\n+    /**\n+     * Convert bytes to a base16 string.\n+     */\n+    public static String encode(byte[] byteArray) {\n+        StringBuffer hexBuffer = new StringBuffer(byteArray.length * 2);\n+        for (int i = 0; i < byteArray.length; i++)\n+            for (int j = 1; j >= 0; j--)\n+                hexBuffer.append(HEX[(byteArray[i] >> (j * 4)) & 0xF]);\n+        return hexBuffer.toString();\n+    }\n+\n+    /**\n+     * Convert a base16 string into a byte array.\n+     */\n+    public static byte[] decode(String s) {\n+        int len = s.length();\n+        byte[] r = new byte[len / 2];\n+        for (int i = 0; i < r.length; i++) {\n+            int digit1 = s.charAt(i * 2), digit2 = s.charAt(i * 2 + 1);\n+            if (digit1 >= '0' && digit1 <= '9')\n+                digit1 -= '0';\n+            else if (digit1 >= 'A' && digit1 <= 'F')\n+                digit1 -= 'A' - 10;\n+            if (digit2 >= '0' && digit2 <= '9')\n+                digit2 -= '0';\n+            else if (digit2 >= 'A' && digit2 <= 'F')\n+                digit2 -= 'A' - 10;\n+\n+            r[i] = (byte) ((digit1 << 4) + digit2);\n+        }\n+        return r;\n+    }\n+}"},{"sha":"64675f5405f7993e6830b80b681f5ad1e84ea47e","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/BytecodeWriter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.IOException;\n+\n+import serp.bytecode.BCClass;\n+\n+/**\n+ * Control how enhanced bytecode is written.\n+ *\n+ * @author Steve Kim\n+ */\n+public interface BytecodeWriter {\n+\n+    public void write(BCClass type) throws IOException;\n+}"},{"sha":"83302057a5dc2d5a1db778c0663d07fb3c989857","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Bytes.java","status":"added","additions":167,"deletions":0,"changes":167,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Bytes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Bytes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Bytes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,167 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+/**\r\n+ * This class came from the Apache Commons Id sandbox project in support\r\n+ * of the UUIDGenerator implementation.\r\n+ *\r\n+ * <p>Static methods for managing byte arrays (all methods follow Big\r\n+ * Endian order where most significant bits are in front).</p>\r\n+ */\r\n+public final class Bytes {\r\n+\r\n+    /**\r\n+     * <p>Hide constructor in utility class.</p>\r\n+     */\r\n+    private Bytes() {\r\n+    }\r\n+\r\n+    /**\r\n+     * Appends two bytes array into one.\r\n+     *\r\n+     * @param a A byte[].\r\n+     * @param b A byte[].\r\n+     * @return A byte[].\r\n+     */\r\n+    public static byte[] append(byte[] a, byte[] b) {\r\n+        byte[] z = new byte[a.length + b.length];\r\n+        System.arraycopy(a, 0, z, 0, a.length);\r\n+        System.arraycopy(b, 0, z, a.length, b.length);\r\n+        return z;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a 8-byte array built from a long.\r\n+     *\r\n+     * @param n The number to convert.\r\n+     * @return A byte[].\r\n+     */\r\n+    public static byte[] toBytes(long n) {\r\n+        return toBytes(n, new byte[8]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Build a 8-byte array from a long.  No check is performed on the\r\n+     * array length.\r\n+     *\r\n+     * @param n The number to convert.\r\n+     * @param b The array to fill.\r\n+     * @return A byte[].\r\n+     */\r\n+    public static byte[] toBytes(long n, byte[] b) {\r\n+        b[7] = (byte) (n);\r\n+        n >>>= 8;\r\n+        b[6] = (byte) (n);\r\n+        n >>>= 8;\r\n+        b[5] = (byte) (n);\r\n+        n >>>= 8;\r\n+        b[4] = (byte) (n);\r\n+        n >>>= 8;\r\n+        b[3] = (byte) (n);\r\n+        n >>>= 8;\r\n+        b[2] = (byte) (n);\r\n+        n >>>= 8;\r\n+        b[1] = (byte) (n);\r\n+        n >>>= 8;\r\n+        b[0] = (byte) (n);\r\n+\r\n+        return b;\r\n+    }\r\n+\r\n+    /**\r\n+     * Build a long from first 8 bytes of the array.\r\n+     *\r\n+     * @param b The byte[] to convert.\r\n+     * @return A long.\r\n+     */\r\n+    public static long toLong(byte[] b) {\r\n+        return ((((long) b[7]) & 0xFF)\r\n+                + ((((long) b[6]) & 0xFF) << 8)\r\n+                + ((((long) b[5]) & 0xFF) << 16)\r\n+                + ((((long) b[4]) & 0xFF) << 24)\r\n+                + ((((long) b[3]) & 0xFF) << 32)\r\n+                + ((((long) b[2]) & 0xFF) << 40)\r\n+                + ((((long) b[1]) & 0xFF) << 48)\r\n+                + ((((long) b[0]) & 0xFF) << 56));\r\n+    }\r\n+\r\n+    /**\r\n+    * Compares two byte arrays for equality.\r\n+    *\r\n+    * @param a A byte[].\r\n+    * @param b A byte[].\r\n+    * @return True if the arrays have identical contents.\r\n+    */\r\n+    public static boolean areEqual(byte[] a, byte[] b) {\r\n+        int aLength = a.length;\r\n+        if (aLength != b.length) {\r\n+            return false;\r\n+        }\r\n+\r\n+        for (int i = 0; i < aLength; i++) {\r\n+            if (a[i] != b[i]) {\r\n+                return false;\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n+\r\n+    /**\r\n+     * <p>Compares two byte arrays as specified by <code>Comparable</code>.\r\n+     *\r\n+     * @param lhs - left hand value in the comparison operation.\r\n+     * @param rhs - right hand value in the comparison operation.\r\n+     * @return  a negative integer, zero, or a positive integer as \r\n+     * <code>lhs</code> is less than, equal to, or greater than \r\n+     * <code>rhs</code>.\r\n+     */\r\n+    public static int compareTo(byte[] lhs, byte[] rhs) {\r\n+        if (lhs == rhs) {\r\n+            return 0;\r\n+        }\r\n+        if (lhs == null) {\r\n+            return -1;\r\n+        }\r\n+        if (rhs == null) {\r\n+            return +1;\r\n+        }\r\n+        if (lhs.length != rhs.length) {\r\n+            return ((lhs.length < rhs.length) ? -1 : +1);\r\n+        }\r\n+        for (int i = 0; i < lhs.length; i++) {\r\n+            if (lhs[i] < rhs[i]) {\r\n+                return -1;\r\n+            } else if (lhs[i] > rhs[i]) {\r\n+                return 1;\r\n+            }\r\n+        }\r\n+        return 0;\r\n+    }\r\n+\r\n+    /**\r\n+     * Build a short from first 2 bytes of the array.\r\n+     *\r\n+     * @param b The byte[] to convert.\r\n+     * @return A short.\r\n+     */\r\n+    public static short toShort(byte[] b) {\r\n+        return  (short) ((b[1] & 0xFF) + ((b[0] & 0xFF) << 8));\r\n+    }\r\n+}\r"},{"sha":"20e58113f16b9c84893457f2f6360543ebdec16a","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Closeable.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+/**\n+ * Generic interface for components that can be closed so that helpers\n+ * can treate them in a generic way.\n+ *\n+ * @author Abe White\n+ */\n+public interface Closeable {\n+\n+    public void close() throws Exception;\n+}"},{"sha":"1584679be84a10d3ce7c584b9c7d718e8e3740a1","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","status":"added","additions":600,"deletions":0,"changes":600,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/CodeFormat.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,600 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+/**\n+ * Encapsulates some common Java source code formatting options. The\n+ * class can also be used as a buffer for formatted Java code.\n+ *\n+ * @author Abe White\n+ */\n+public final class CodeFormat implements Cloneable {\n+\n+    private static final String _sep = J2DoPrivHelper.getLineSeparator();\n+\n+    private String _tab = \"\\t\";\n+    private boolean _spaceBeforeParen = false;\n+    private boolean _spaceInParen = false;\n+    private boolean _braceOnSameLine = true;\n+    private boolean _braceAtSameTabLevel = false;\n+    private boolean _scoreBeforeFieldName = false;\n+    private int _linesBetweenSections = 1;\n+\n+    private StringBuffer _buf = new StringBuffer();\n+\n+    /**\n+     * The number of spaces to use for tabs; 0 means to use actual tab\n+     * characters. Defaults to 0.\n+     */\n+    public int getTabSpaces() {\n+        return (_tab.equals(\"\\t\")) ? 0 : _tab.length();\n+    }\n+\n+    /**\n+     * The number of spaces to use for tabs; 0 means to use actual tab\n+     * characters. Defaults to 0.\n+     */\n+    public void setTabSpaces(int tab) {\n+        if (tab == 0)\n+            _tab = \"\\t\";\n+        else {\n+            StringBuffer tabs = new StringBuffer(tab);\n+            for (int i = 0; i < tab; i++)\n+                tabs.append(\" \");\n+            _tab = tabs.toString();\n+        }\n+    }\n+\n+    /**\n+     * Whether to place a space before parentheses. Defaults to false.\n+     */\n+    public boolean getSpaceBeforeParen() {\n+        return _spaceBeforeParen;\n+    }\n+\n+    /**\n+     * Whether to place a space before parentheses. Defaults to false.\n+     */\n+    public void setSpaceBeforeParen(boolean spaceBeforeParen) {\n+        _spaceBeforeParen = spaceBeforeParen;\n+    }\n+\n+    /**\n+     * Whether to place a space within parentheses. Defaults to false.\n+     */\n+    public boolean getSpaceInParen() {\n+        return _spaceInParen;\n+    }\n+\n+    /**\n+     * Whether to place a space within parentheses. Defaults to false.\n+     */\n+    public void setSpaceInParen(boolean spaceInParen) {\n+        _spaceInParen = spaceInParen;\n+    }\n+\n+    /**\n+     * Whether to place opening braces on the same line as the\n+     * block declaration, or on the next line. Defaults to same line.\n+     */\n+    public boolean getBraceOnSameLine() {\n+        return _braceOnSameLine;\n+    }\n+\n+    /**\n+     * Whether to place opening braces on the same line as the\n+     * block declaration, or on the next line. Defaults to same line.\n+     */\n+    public void setBraceOnSameLine(boolean braceOnSameLine) {\n+        _braceOnSameLine = braceOnSameLine;\n+    }\n+\n+    /**\n+     * Whether to place braces at the same tab level as the code within\n+     * the block. Defaults to false.\n+     */\n+    public boolean getBraceAtSameTabLevel() {\n+        return _braceAtSameTabLevel;\n+    }\n+\n+    /**\n+     * Whether to place braces at the same tab level as the code within\n+     * the block. Defaults to false.\n+     */\n+    public void setBraceAtSameTabLevel(boolean braceAtSameTabLevel) {\n+        _braceAtSameTabLevel = braceAtSameTabLevel;\n+    }\n+\n+    /**\n+     * Whether to place an underscore before private field names. Defaults\n+     * to false.\n+     */\n+    public boolean getScoreBeforeFieldName() {\n+        return _scoreBeforeFieldName;\n+    }\n+\n+    /**\n+     * Whether to place an underscore before private field names. Defaults\n+     * to false.\n+     */\n+    public void setScoreBeforeFieldName(boolean scoreBeforeFieldName) {\n+        _scoreBeforeFieldName = scoreBeforeFieldName;\n+    }\n+\n+    /**\n+     * The number of empty lines between code sections. Defaults to 1.\n+     */\n+    public int getLinesBetweenSections() {\n+        return _linesBetweenSections;\n+    }\n+\n+    /**\n+     * The number of empty lines between sections. Defaults to 1.\n+     */\n+    public void setLinesBetweenSections(int linesBetweenSections) {\n+        _linesBetweenSections = linesBetweenSections;\n+    }\n+\n+    /**\n+     * Return a new line character.\n+     */\n+    public String getEndl() {\n+        return getEndl(1);\n+    }\n+\n+    /**\n+     * Return the given number of new line characters.\n+     */\n+    public String getEndl(int num) {\n+        if (num == 0)\n+            return \"\";\n+        if (num == 1)\n+            return _sep;\n+\n+        StringBuffer buf = new StringBuffer(_sep.length() * num);\n+        for (int i = 0; i < num; i++)\n+            buf.append(_sep);\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * Return the given number of new line characters, followed by\n+     * the given tab level indentation.\n+     */\n+    public String getEndl(int num, int tabs) {\n+        return getEndl(num) + getTab(tabs);\n+    }\n+\n+    /**\n+     * Return {#getLinesBetweenSections} + 1 new line characters.\n+     */\n+    public String getAfterSection() {\n+        return getEndl(getLinesBetweenSections() + 1);\n+    }\n+\n+    /**\n+     * Open parentheses string. Users can choose to place spaces before\n+     * and within parentheses.\n+     */\n+    public String getOpenParen(boolean methodOrIf) {\n+        if ((_spaceBeforeParen && methodOrIf) && _spaceInParen)\n+            return \" ( \";\n+        if (_spaceBeforeParen && methodOrIf)\n+            return \" (\";\n+        if (_spaceInParen)\n+            return \"( \";\n+        return \"(\";\n+    }\n+\n+    /**\n+     * Close parentheses string. Users can choose to place spaces within\n+     * parentheses.\n+     */\n+    public String getCloseParen() {\n+        if (_spaceInParen)\n+            return \" )\";\n+        return \")\";\n+    }\n+\n+    /**\n+     * Paired parentheses for empty method parameters. Users can choose\n+     * to place spaces before parentheses.\n+     */\n+    public String getParens() {\n+        if (_spaceBeforeParen)\n+            return \" ()\";\n+        return \"()\";\n+    }\n+\n+    /**\n+     * Open brace string. Users can choose to place braces on the same\n+     * line, or on a new line, and can choose the indenting level.\n+     *\n+     * @param tabLevel the tab level of code within the brace\n+     */\n+    public String getOpenBrace(int tabLevel) {\n+        if (_braceOnSameLine)\n+            return \" {\";\n+        if (_braceAtSameTabLevel)\n+            return getEndl() + getTab(tabLevel) + \"{\";\n+        return getEndl() + getTab(tabLevel - 1) + \"{\";\n+    }\n+\n+    /**\n+     * Close brace string. Users can choose to place braces on the same\n+     * line, or on a new line, and can choose the indenting level.\n+     *\n+     * @param tabLevel the tab level of code within the brace\n+     */\n+    public String getCloseBrace(int tabLevel) {\n+        if (_braceAtSameTabLevel)\n+            return getTab(tabLevel) + \"}\";\n+        return getTab(tabLevel - 1) + \"}\";\n+    }\n+\n+    /**\n+     * Extends declaration. Uses configuration of {@link #openBrace},\n+     * but prints \"extends\" instead of a brace.\n+     */\n+    public String getExtendsDec(int tabLevel) {\n+        if (_braceOnSameLine)\n+            return \" extends\";\n+        if (_braceAtSameTabLevel)\n+            return getEndl() + getTab(tabLevel) + \"extends\";\n+        return getEndl() + getTab(tabLevel) + \"extends\";\n+    }\n+\n+    /**\n+     * Implements declaration. Uses configuration of {@link #openBrace},\n+     * but prints \"implements\" instead of a brace.\n+     */\n+    public String getImplementsDec(int tabLevel) {\n+        if (_braceOnSameLine)\n+            return \" implements\";\n+        if (_braceAtSameTabLevel)\n+            return getEndl() + getTab(tabLevel) + \"implements\";\n+        return getEndl() + getTab(tabLevel) + \"implements\";\n+    }\n+\n+    /**\n+     * Throws declaration. Uses configuration of {@link #openBrace},\n+     * but prints \"throws\" instead of a brace.\n+     */\n+    public String getThrowsDec(int tabLevel) {\n+        if (_braceOnSameLine)\n+            return \" throws\";\n+        if (_braceAtSameTabLevel)\n+            return getEndl() + getTab(tabLevel) + \"throws\";\n+        return getEndl() + getTab(tabLevel) + \"throws\";\n+    }\n+\n+    /**\n+     * Tab string. Users can choose to use spaces or tab characters.\n+     */\n+    public String getTab() {\n+        return getTab(1);\n+    }\n+\n+    /**\n+     * Tab string. Users can choose to use spaces or tab characters.\n+     *\n+     * @param tabLevel the number of tabs\n+     */\n+    public String getTab(int tabLevel) {\n+        if (tabLevel == 0)\n+            return \"\";\n+        if (tabLevel == 1)\n+            return _tab;\n+\n+        StringBuffer tabs = new StringBuffer(_tab.length() * tabLevel);\n+        for (int i = 0; i < tabLevel; i++)\n+            tabs.append(_tab);\n+        return tabs.toString();\n+    }\n+\n+\n+    /**\n+     * Returns parametrized type string for given type(s).\n+     */\n+    public String getParametrizedType(String[] typenames) {\n+        StringBuffer buf = new StringBuffer ();\n+        buf.append(\"<\");\n+        for (int i = 0; i < typenames.length; i++) {\n+            if (i > 0)\n+                buf.append(\", \");\n+            buf.append(typenames[i]);\n+        }\n+        buf.append(\">\");\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * Return the field name for given suggested name, possibly adding\n+     * leading underscore.\n+     */\n+    public String getFieldName(String fieldName) {\n+        return (_scoreBeforeFieldName) ? \"_\" + fieldName : fieldName;\n+    }\n+\n+    /**\n+     * Return the internal code buffer.\n+     */\n+    public StringBuffer getBuffer() {\n+        return _buf;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(boolean val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(byte val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(char val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(double val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(float val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(int val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(long val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(short val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     */\n+    public CodeFormat append(Object val) {\n+        _buf.append(val);\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getEndl()\n+     */\n+    public CodeFormat endl() {\n+        _buf.append(getEndl());\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getEndl(int)\n+     */\n+    public CodeFormat endl(int num) {\n+        _buf.append(getEndl(num));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getEndl(int, int)\n+     */\n+    public CodeFormat endl(int num, int tabs) {\n+        _buf.append(getEndl(num, tabs));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getAfterSection\n+     */\n+    public CodeFormat afterSection() {\n+        _buf.append(getAfterSection());\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getOpenParen\n+     */\n+    public CodeFormat openParen(boolean methodOrIf) {\n+        _buf.append(getOpenParen(methodOrIf));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getCloseParen\n+     */\n+    public CodeFormat closeParen() {\n+        _buf.append(getCloseParen());\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getParens\n+     */\n+    public CodeFormat parens() {\n+        _buf.append(getParens());\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getOpenBrace\n+     */\n+    public CodeFormat openBrace(int tabLevel) {\n+        _buf.append(getOpenBrace(tabLevel));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getCloseBrace\n+     */\n+    public CodeFormat closeBrace(int tabLevel) {\n+        _buf.append(getCloseBrace(tabLevel));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getExtendsDec\n+     */\n+    public CodeFormat extendsDec(int tabLevel) {\n+        _buf.append(getExtendsDec(tabLevel));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getImplementsDec\n+     */\n+    public CodeFormat implementsDec(int tabLevel) {\n+        _buf.append(getImplementsDec(tabLevel));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getThrowsDec\n+     */\n+    public CodeFormat throwsDec(int tabLevel) {\n+        _buf.append(getThrowsDec(tabLevel));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getTab\n+     */\n+    public CodeFormat tab() {\n+        _buf.append(getTab());\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getTab\n+     */\n+    public CodeFormat tab(int tabLevel) {\n+        _buf.append(getTab(tabLevel));\n+        return this;\n+    }\n+\n+    /**\n+     * Append the given value to the internal buffer.\n+     *\n+     * @see #getFieldName\n+     */\n+    public CodeFormat fieldName(String name) {\n+        _buf.append(getFieldName(name));\n+        return this;\n+    }\n+\n+    /**\n+     * Clear the internal code buffer.\n+     */\n+    public void clear() {\n+        _buf = new StringBuffer();\n+    }\n+\n+    /**\n+     * Return the internal buffer as a string.\n+     */\n+    public String toString() {\n+        return _buf.toString();\n+    }\n+\n+    /**\n+     * Return the length of the internal buffer.\n+     */\n+    public int length() {\n+        return _buf.length();\n+    }\n+\n+    /**\n+     * Make a copy of this code format object with all the same formatting\n+     * settings.\n+     */\n+    public Object clone() {\n+        CodeFormat format = new CodeFormat();\n+        format._tab = _tab;\n+        format._spaceBeforeParen = _spaceBeforeParen;\n+        format._spaceInParen = _spaceInParen;\n+        format._braceOnSameLine = _braceOnSameLine;\n+        format._braceAtSameTabLevel = _braceAtSameTabLevel;\n+        format._scoreBeforeFieldName = _scoreBeforeFieldName;\n+        format._linesBetweenSections = _linesBetweenSections;\n+        return format;\n+    }\n+}"},{"sha":"fcdfeb81bf597331024a2e6f44e90ae969c3167e","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/EventManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Basic event manager interface.\n+ *\n+ * @author Abe White\n+ */\n+public interface EventManager {\n+\n+    /**\n+     * Add an event listener.\n+     */\n+    public void addListener(Object listener);\n+\n+    /**\n+     * Remove an event listener.\n+     */\n+    public boolean removeListener(Object listener);\n+\n+    /**\n+     * Return whether the given instance is in the list of listeners.\n+     */\n+    public boolean hasListener(Object listener);\n+\n+    /**\n+     * Return true if there are any registered listeners.\n+     */\n+    public boolean hasListeners();\n+\n+    /**\n+     * Return a read-only list of listeners.\n+     */\n+    public Collection getListeners();\n+\n+    /**\n+     * Fire the given event to all listeners, returning any exceptions.\n+     */\n+    public Exception[] fireEvent(Object event);\n+}"},{"sha":"74c592d78eb160cc765cfae6d2e5142d1a5b87d5","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","status":"added","additions":303,"deletions":0,"changes":303,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Files.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,303 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+import serp.util.Strings;\n+\n+/**\n+ * Utility operations on files.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class Files {\n+\n+    /**\n+     * Backup the given file to a new file called &lt;file-name&gt;~. If\n+     * the file does not exist or a backup could not be created, returns null.\n+     */\n+    public static File backup(File file, boolean copy) {\n+        if (file == null || !((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue())\n+            return null;\n+\n+        // create new file object copy so we don't modify the original\n+        String aPath = (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(file));\n+        File clone = new File(aPath);\n+        File bk = new File(aPath + \"~\");\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.renameToAction(clone, bk))).booleanValue())\n+            return null;\n+        if (copy) {\n+            try {\n+                copy(bk, file);\n+            } catch (IOException ioe) {\n+                throw new NestableRuntimeException(ioe);\n+            }\n+        }\n+        return bk;\n+    }\n+\n+    /**\n+     * Revert the given backup file to the original location. If the given\n+     * file's name does not end in '~', the '~' is appended before proceeding.\n+     * If the backup file does not exist or could not be reverted, returns null.\n+     */\n+    public static File revert(File backup, boolean copy) {\n+        if (backup == null)\n+            return null;\n+        if (!backup.getName().endsWith(\"~\"))\n+            backup = new File(backup.getPath() + \"~\");\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(backup))).booleanValue())\n+            return null;\n+\n+        // create new file object copy so we don't modify the original\n+        String path = (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getAbsolutePathAction(backup)); \n+        File clone = new File(path);\n+        File orig = new File(path.substring(0, path.length() - 1));\n+        if (!((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.renameToAction(clone, orig))).booleanValue())\n+            return null;\n+        if (copy) {\n+            try {\n+                copy(orig, backup);\n+            } catch (IOException ioe) {\n+                throw new NestableRuntimeException(ioe);\n+            }\n+        }\n+        return orig;\n+    }\n+\n+    /**\n+     * Return the source file for the given class, or null if the\n+     * source is not in the CLASSPATH.\n+     */\n+    public static File getSourceFile(Class cls) {\n+        return getClassFile(cls, \".java\");\n+    }\n+\n+    /**\n+     * Return the class file of the given class, or null if the\n+     * class is in a jar.\n+     */\n+    public static File getClassFile(Class cls) {\n+        return getClassFile(cls, \".class\");\n+    }\n+\n+    /**\n+     * Return the file for the class resource with the given extension.\n+     */\n+    private static File getClassFile(Class cls, String ext) {\n+        String name = Strings.getClassName(cls);\n+\n+        // if it's an inner class, use the parent class name\n+        int innerIdx = name.indexOf('$');\n+        if (innerIdx != -1)\n+            name = name.substring(0, innerIdx);\n+\n+        URL rsrc = (URL) AccessController.doPrivileged(\n+            J2DoPrivHelper.getResourceAction(cls, name + ext)); \n+        if (rsrc != null && rsrc.getProtocol().equals(\"file\"))\n+            return new File(URLDecoder.decode(rsrc.getFile()));\n+        return null;\n+    }\n+\n+    /**\n+     * Return the file for the given package. If the given base directory\n+     * matches the given package structure, it will be used as-is. If not,\n+     * the package structure will be added beneath the base directory. If\n+     * the base directory is null, the current working directory will be\n+     * used as the base.\n+     */\n+    public static File getPackageFile(File base, String pkg, boolean mkdirs) {\n+        if (base == null)\n+            base = new File((String) AccessController.doPrivileged(\n+                J2DoPrivHelper.getPropertyAction(\"user.dir\")));\n+        if (StringUtils.isEmpty(pkg)) {\n+            if (mkdirs && !((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(base))).booleanValue())\n+                AccessController.doPrivileged(\n+                    J2DoPrivHelper.mkdirsAction(base));\n+            return base;\n+        }\n+\n+        pkg = pkg.replace('.', File.separatorChar);\n+        File file = null;\n+        try {\n+            if (((String) AccessController.doPrivileged(\n+                J2DoPrivHelper.getCanonicalPathAction(base))).endsWith(pkg))\n+                file = base;\n+            else\n+                file = new File(base, pkg);\n+        } catch (PrivilegedActionException pae) {\n+            throw new NestableRuntimeException(\n+                (IOException) pae.getException());\n+        } catch (IOException ioe) {\n+            throw new NestableRuntimeException(ioe);\n+        }\n+\n+        if (mkdirs && !((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue())\n+            AccessController.doPrivileged(J2DoPrivHelper.mkdirsAction(file));\n+        return file;\n+    }\n+\n+    /**\n+     * Check the given string for a matching file. The string is first\n+     * tested to see if it is an existing file path. If it does not\n+     * represent an existing file, it is checked as a resource name of a\n+     * file. If no resource exists, then it is interpreted as a path\n+     * to a file that does not exist yet.\n+     *\n+     * @param name the file path or resource name\n+     * @param loader a class loader to use in resource lookup, or null\n+     * to use the thread's context loader\n+     */\n+    public static File getFile(String name, ClassLoader loader) {\n+        if (name == null)\n+            return null;\n+\n+        File file = new File(name);\n+        if (((Boolean) AccessController.doPrivileged(\n+            J2DoPrivHelper.existsAction(file))).booleanValue())\n+            return file;\n+\n+        if (loader == null)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+        URL url = (URL) AccessController.doPrivileged(\n+            J2DoPrivHelper.getResourceAction(loader, name)); \n+        if (url != null) {\n+            String urlFile = url.getFile();\n+            if (urlFile != null) {\n+                File rsrc = new File(URLDecoder.decode(urlFile));\n+                if (((Boolean) AccessController.doPrivileged(\n+                    J2DoPrivHelper.existsAction(rsrc))).booleanValue())\n+                    return rsrc;\n+            }\n+        }\n+\n+        // go back to original non-existant file path\n+        return file;\n+    }\n+\n+    /**\n+     * Return a writer to the stream(stdout or stderr) or file named by the\n+     * given string.\n+     *\n+     * @see #getFile\n+     */\n+    public static Writer getWriter(String file, ClassLoader loader)\n+        throws IOException {\n+        if (file == null)\n+            return null;\n+        if (\"stdout\".equals(file))\n+            return new PrintWriter(System.out);\n+        if (\"stderr\".equals(file))\n+            return new PrintWriter(System.err);\n+        try {\n+            return new FileWriter(getFile(file, loader));\n+        } catch (IOException ioe) {\n+            throw new NestableRuntimeException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Return an output stream to the stream(stdout or stderr) or file named\n+     * by the given string.\n+     *\n+     * @see #getFile\n+     */\n+    public static OutputStream getOutputStream(String file,\n+        ClassLoader loader) {\n+        if (file == null)\n+            return null;\n+        if (\"stdout\".equals(file))\n+            return System.out;\n+        if (\"stderr\".equals(file))\n+            return System.err;\n+        try {\n+            return (FileOutputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileOutputStreamAction(\n+                    getFile(file, loader)));\n+        } catch (PrivilegedActionException pae) {\n+            throw new NestableRuntimeException(pae.getException());\n+        } catch (IOException ioe) {\n+            throw new NestableRuntimeException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Copy a file. Return false if <code>from</code> does not exist.\n+     */\n+    public static boolean copy(File from, File to) throws IOException {\n+        if (from == null || to == null ||\n+            !((Boolean) AccessController.doPrivileged(\n+                J2DoPrivHelper.existsAction(from))).booleanValue())\n+            return false;\n+\n+        FileInputStream in = null;\n+        FileOutputStream out = null;\n+        try {\n+            in = (FileInputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileInputStreamAction(from));\n+            BufferedInputStream inbuf = new BufferedInputStream(in);\n+            out = (FileOutputStream) AccessController.doPrivileged(\n+                J2DoPrivHelper.newFileOutputStreamAction(to)); \n+            BufferedOutputStream outbuf = new BufferedOutputStream(out);\n+            for (int b; (b = inbuf.read()) != -1; outbuf.write(b)) ;\n+            outbuf.flush();\n+            return true;\n+        } catch (PrivilegedActionException pae) {\n+            throw (FileNotFoundException) pae.getException();\n+        } finally {\n+            if (in != null)\n+                try {\n+                    in.close();\n+                } catch (Exception e) {\n+                }\n+            if (out != null)\n+                try {\n+                    out.close();\n+                } catch (Exception e) {\n+                }\n+        }\n+    }\n+}"},{"sha":"901408cbd3f48a5755cb41fd530adbd6e49e8351","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","status":"added","additions":703,"deletions":0,"changes":703,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/FormatPreservingProperties.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,703 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.BufferedReader;\n+import java.io.FilterInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+/*\n+ * ### things to add: - should probably be a SourceTracker\n+ * - if an entry is removed, should there be an option to remove comments\n+ * just before the entry(a la javadoc)?\n+ * - should we have an option to clean up whitespace?\n+ * - potentially would be interesting to add comments about each\n+ * property that OpenJPA adds to this object. We'd want to make the\n+ * automatic comment-removing code work first, though, so that if\n+ * someone then removed the property, the comments would go away.\n+ * - would be neat if DuplicateKeyException could report line numbers of\n+ * offending entries.\n+ * - putAll() with another FormatPreservingProperties should be smarter\n+ */\n+\n+/**\n+ * A specialization of {@link Properties} that stores its contents\n+ * in the same order and with the same formatting as was used to read\n+ * the contents from an input stream. This is useful because it means\n+ * that a properties file loaded via this object and then written\n+ * back out later on will only be different where changes or\n+ * additions were made.\n+ * By default, the {@link #store} method in this class does not\n+ * behave the same as {@link Properties#store}. You can cause an\n+ * instance to approximate the behavior of {@link Properties#store}\n+ * by invoking {@link #setDefaultEntryDelimiter} with <code>=</code>,\n+ * {@link #setAddWhitespaceAfterDelimiter} with <code>false</code>, and\n+ * {@link #setAllowDuplicates} with <code>true</code>. However, this\n+ * will only influence how the instance will write new values, not how\n+ * it will write existing key-value pairs that are modified.\n+ * In conjunction with a conservative output writer, it is\n+ * possible to only write to disk changes / additions.\n+ * This implementation does not permit escaped ' ', '=', ':'\n+ * characters in key names.\n+ *\n+ * @since 0.3.3\n+ */\n+public class FormatPreservingProperties extends Properties {\n+\n+    private static Localizer _loc = Localizer.forPackage\n+        (FormatPreservingProperties.class);\n+\n+    private char defaultEntryDelimiter = ':';\n+    private boolean addWhitespaceAfterDelimiter = true;\n+    private boolean allowDuplicates = false;\n+    private boolean insertTimestamp = false;\n+\n+    private PropertySource source;\n+    private LinkedHashSet newKeys = new LinkedHashSet();\n+    private HashSet modifiedKeys = new HashSet();\n+\n+    // marker that indicates that we're not deserializing\n+    private transient boolean isNotDeserializing = true;\n+    private transient boolean isLoading = false;\n+\n+    public FormatPreservingProperties() {\n+        this(null);\n+    }\n+\n+    public FormatPreservingProperties(Properties defaults) {\n+        super(defaults);\n+    }\n+\n+    /**\n+     * The character to use as a delimiter between property keys and values.\n+     *\n+     * @param defaultEntryDelimiter either ':' or '='\n+     */\n+    public void setDefaultEntryDelimiter(char defaultEntryDelimiter) {\n+        this.defaultEntryDelimiter = defaultEntryDelimiter;\n+    }\n+\n+    /**\n+     * See {@link #setDefaultEntryDelimiter}\n+     */\n+    public char getDefaultEntryDelimiter() {\n+        return this.defaultEntryDelimiter;\n+    }\n+\n+    /**\n+     * If set to <code>true</code>, this properties object will add a\n+     * space after the delimiter character(if the delimiter is not\n+     * the space character). Else, this will not add a space.\n+     * Default value: <code>true</code>. Note that {@link\n+     * Properties#store} never writes whitespace.\n+     */\n+    public void setAddWhitespaceAfterDelimiter(boolean add) {\n+        this.addWhitespaceAfterDelimiter = add;\n+    }\n+\n+    /**\n+     * If set to <code>true</code>, this properties object will add a\n+     * space after the delimiter character(if the delimiter is not\n+     * the space character). Else, this will not add a space.\n+     * Default value: <code>true</code>. Note that {@link\n+     * Properties#store} never writes whitespace.\n+     */\n+    public boolean getAddWhitespaceAfterDelimiter() {\n+        return this.addWhitespaceAfterDelimiter;\n+    }\n+\n+    /**\n+     * If set to <code>true</code>, this properties object will add a\n+     * timestamp to the beginning of the file, just after the header\n+     * (if any) is printed. Else, this will not add a timestamp.\n+     * Default value: <code>false</code>. Note that {@link\n+     * Properties#store} always writes a timestamp.\n+     */\n+    public void setInsertTimestamp(boolean insertTimestamp) {\n+        this.insertTimestamp = insertTimestamp;\n+    }\n+\n+    /**\n+     * If set to <code>true</code>, this properties object will add a\n+     * timestamp to the beginning of the file, just after the header\n+     * (if any) is printed. Else, this will not add a timestamp.\n+     * Default value: <code>false</code>. Note that {@link\n+     * Properties#store} always writes a timestamp.\n+     */\n+    public boolean getInsertTimestamp() {\n+        return this.insertTimestamp;\n+    }\n+\n+    /**\n+     * If set to <code>true</code>, duplicate properties are allowed, and\n+     * the last property setting in the input will overwrite any previous\n+     * settings. If set to <code>false</code>, duplicate property definitions\n+     * in the input will cause an exception to be thrown during {@link #load}.\n+     * Default value: <code>false</code>. Note that {@link\n+     * Properties#store} always allows duplicates.\n+     */\n+    public void setAllowDuplicates(boolean allowDuplicates) {\n+        this.allowDuplicates = allowDuplicates;\n+    }\n+\n+    /**\n+     * If set to <code>true</code>, duplicate properties are allowed, and\n+     * the last property setting in the input will overwrite any previous\n+     * settings. If set to <code>false</code>, duplicate property definitions\n+     * in the input will cause an exception to be thrown during {@link #load}.\n+     * Default value: <code>false</code>. Note that {@link\n+     * Properties#store} always allows duplicates.\n+     */\n+    public boolean getAllowDuplicates() {\n+        return this.allowDuplicates;\n+    }\n+\n+    public String getProperty(String key) {\n+        return super.getProperty(key);\n+    }\n+\n+    public String getProperty(String key, String defaultValue) {\n+        return super.getProperty(key, defaultValue);\n+    }\n+\n+    public Object setProperty(String key, String value) {\n+        return put(key, value);\n+    }\n+\n+    /**\n+     * Circumvents the superclass {@link #putAll} implementation,\n+     * putting all the key-value pairs via {@link #put}.\n+     */\n+    public void putAll(Map m) {\n+        Map.Entry e;\n+        for (Iterator iter = m.entrySet().iterator(); iter.hasNext();) {\n+            e = (Map.Entry) iter.next();\n+            put(e.getKey(), e.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Removes the key from the bookkeeping collectiotns as well.\n+     */\n+    public Object remove(Object key) {\n+        newKeys.remove(key);\n+        return super.remove(key);\n+    }\n+\n+    public void clear() {\n+        super.clear();\n+\n+        if (source != null)\n+            source.clear();\n+\n+        newKeys.clear();\n+        modifiedKeys.clear();\n+    }\n+\n+    public Object clone() {\n+        FormatPreservingProperties c = (FormatPreservingProperties)\n+            super.clone();\n+\n+        if (source != null)\n+            c.source = (PropertySource) source.clone();\n+\n+        if (modifiedKeys != null)\n+            c.modifiedKeys = (HashSet) modifiedKeys.clone();\n+\n+        if (newKeys != null) {\n+            c.newKeys = new LinkedHashSet();\n+            c.newKeys.addAll(newKeys);\n+        }\n+\n+        return c;\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+\n+        isNotDeserializing = true;\n+    }\n+\n+    public Object put(Object key, Object val) {\n+        Object o = super.put(key, val);\n+\n+        // if we're no longer loading from properties and this put\n+        // represents an actual change in value, mark the modification\n+        // or addition in the bookkeeping collections.\n+        if (!isLoading && isNotDeserializing && !val.equals(o)) {\n+            if (o != null)\n+                modifiedKeys.add(key);\n+            else if (!newKeys.contains(key))\n+                newKeys.add(key);\n+        }\n+        return o;\n+    }\n+\n+    /**\n+     * Loads the properties in <code>in</code>, according to the rules\n+     * described in {@link Properties#load}. If {@link #getAllowDuplicates}\n+     * returns <code>true</code>, this will throw a {@link\n+     * DuplicateKeyException} if duplicate property declarations are\n+     * encountered.\n+     *\n+     * @see Properties#load\n+     */\n+    public void load(InputStream in) throws IOException {\n+        isLoading = true;\n+        try {\n+            loadProperties(in);\n+        } finally {\n+            isLoading = false;\n+        }\n+    }\n+\n+    private void loadProperties(InputStream in) throws IOException {\n+        source = new PropertySource();\n+\n+        PropertyLineReader reader = new PropertyLineReader(in, source);\n+\n+        Set loadedKeys = new HashSet();\n+\n+        for (PropertyLine l;\n+            (l = reader.readPropertyLine()) != null && source.add(l);) {\n+            String line = l.line.toString();\n+\n+            char c = 0;\n+            int pos = 0;\n+\n+            while (pos < line.length() && isSpace(c = line.charAt(pos)))\n+                pos++;\n+\n+            if ((line.length() - pos) == 0\n+                || line.charAt(pos) == '#' || line.charAt(pos) == '!')\n+                continue;\n+\n+            StringBuffer key = new StringBuffer();\n+            while (pos < line.length() && !isSpace(c = line.charAt(pos++))\n+                && c != '=' && c != ':') {\n+                if (c == '\\\\') {\n+                    if (pos == line.length()) {\n+                        l.append(line = reader.readLine());\n+                        pos = 0;\n+                        while (pos < line.length()\n+                            && isSpace(c = line.charAt(pos)))\n+                            pos++;\n+                    } else {\n+                        pos = readEscape(line, pos, key);\n+                    }\n+                } else {\n+                    key.append(c);\n+                }\n+            }\n+\n+            boolean isDelim = (c == ':' || c == '=');\n+\n+            for (; pos < line.length()\n+                && isSpace(c = line.charAt(pos)); pos++)\n+                ;\n+\n+            if (!isDelim && (c == ':' || c == '=')) {\n+                pos++;\n+                while (pos < line.length() && isSpace(c = line.charAt(pos)))\n+                    pos++;\n+            }\n+\n+            StringBuffer element = new StringBuffer(line.length() - pos);\n+\n+            while (pos < line.length()) {\n+                c = line.charAt(pos++);\n+                if (c == '\\\\') {\n+                    if (pos == line.length()) {\n+                        l.append(line = reader.readLine());\n+\n+                        if (line == null)\n+                            break;\n+\n+                        pos = 0;\n+                        while (pos < line.length()\n+                            && isSpace(c = line.charAt(pos)))\n+                            pos++;\n+                        element.ensureCapacity(line.length() - pos +\n+                            element.length());\n+                    } else {\n+                        pos = readEscape(line, pos, element);\n+                    }\n+                } else\n+                    element.append(c);\n+            }\n+\n+            if (!loadedKeys.add(key.toString()) && !allowDuplicates)\n+                throw new DuplicateKeyException(key.toString(),\n+                    getProperty(key.toString()), element.toString());\n+\n+            l.setPropertyKey(key.toString());\n+            l.setPropertyValue(element.toString());\n+            put(key.toString(), element.toString());\n+        }\n+    }\n+\n+    /**\n+     * Read the next escaped character: handle newlines, tabs, returns, and\n+     * form feeds with the appropriate escaped character, then try to\n+     * decode unicode characters. Finally, just add the character explicitly.\n+     *\n+     * @param source the source of the characters\n+     * @param pos the position at which to start reading\n+     * @param value the value we are appending to\n+     * @return the position after the reading is done\n+     */\n+    private static int readEscape(String source, int pos, StringBuffer value) {\n+        char c = source.charAt(pos++);\n+        switch (c) {\n+            case 'n':\n+                value.append('\\n');\n+                break;\n+            case 't':\n+                value.append('\\t');\n+                break;\n+            case 'f':\n+                value.append('\\f');\n+                break;\n+            case 'r':\n+                value.append('\\r');\n+                break;\n+            case 'u':\n+                if (pos + 4 <= source.length()) {\n+                    char uni = (char) Integer.parseInt\n+                        (source.substring(pos, pos + 4), 16);\n+                    value.append(uni);\n+                    pos += 4;\n+                }\n+                break;\n+            default:\n+                value.append(c);\n+                break;\n+        }\n+\n+        return pos;\n+    }\n+\n+    private static boolean isSpace(char ch) {\n+        return Character.isWhitespace(ch);\n+    }\n+\n+    public void save(OutputStream out, String header) {\n+        try {\n+            store(out, header);\n+        } catch (IOException ex) {\n+        }\n+    }\n+\n+    public void store(OutputStream out, String header) throws IOException {\n+        boolean endWithNewline = source != null && source.endsInNewline;\n+\n+        // Must be ISO-8859-1 ecoding according to Properties.load javadoc\n+        PrintWriter writer = new PrintWriter\n+            (new OutputStreamWriter(out, \"ISO-8859-1\"), false);\n+\n+        if (header != null)\n+            writer.println(\"#\" + header);\n+\n+        if (insertTimestamp)\n+            writer.println(\"#\" + Calendar.getInstance().getTime());\n+\n+        List lines = new LinkedList();\n+        // first write all the existing props as they were initially read\n+        if (source != null)\n+            lines.addAll(source);\n+\n+        // next write out new keys, then the rest of the keys\n+        LinkedHashSet keys = new LinkedHashSet();\n+        keys.addAll(newKeys);\n+        keys.addAll(keySet());\n+\n+        lines.addAll(keys);\n+\n+        keys.remove(null);\n+\n+        boolean needsNewline = false;\n+\n+        for (Iterator i = lines.iterator(); i.hasNext();) {\n+            Object next = i.next();\n+\n+            if (next instanceof PropertyLine) {\n+                if (((PropertyLine) next).write(writer, keys, needsNewline))\n+                    needsNewline = i.hasNext();\n+            } else if (next instanceof String) {\n+                String key = (String) next;\n+                if (keys.remove(key)) {\n+                    if (writeProperty(key, writer, needsNewline)) {\n+                        needsNewline = i.hasNext() && keys.size() > 0;\n+\n+                        // any new or modified properties will cause\n+                        // the file to end with a newline\n+                        endWithNewline = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        // make sure we end in a newline if the source ended in it\n+        if (endWithNewline)\n+            writer.println();\n+\n+        writer.flush();\n+    }\n+\n+    private boolean writeProperty(String key, PrintWriter writer,\n+        boolean needsNewline) {\n+        StringBuffer s = new StringBuffer();\n+\n+        if (key == null)\n+            return false;\n+\n+        String val = getProperty(key);\n+        if (val == null)\n+            return false;\n+\n+        formatValue(key, s, true);\n+        s.append(defaultEntryDelimiter);\n+        if (addWhitespaceAfterDelimiter)\n+            s.append(' ');\n+        formatValue(val, s, false);\n+\n+        if (needsNewline)\n+            writer.println();\n+\n+        writer.print(s);\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Format the given string as an encoded value for storage. This will\n+     * perform any necessary escaping of special characters.\n+     *\n+     * @param str the value to encode\n+     * @param buf the buffer to which to append the encoded value\n+     * @param isKey if true, then the string is a Property key, otherwise\n+     * it is a value\n+     */\n+    private static void formatValue(String str, StringBuffer buf,\n+        boolean isKey) {\n+        if (isKey) {\n+            buf.setLength(0);\n+            buf.ensureCapacity(str.length());\n+        } else {\n+            buf.ensureCapacity(buf.length() + str.length());\n+        }\n+\n+        boolean escapeSpace = true;\n+        int size = str.length();\n+\n+        for (int i = 0; i < size; i++) {\n+            char c = str.charAt(i);\n+\n+            if (c == '\\n')\n+                buf.append(\"\\\\n\");\n+            else if (c == '\\r')\n+                buf.append(\"\\\\r\");\n+            else if (c == '\\t')\n+                buf.append(\"\\\\t\");\n+            else if (c == '\\f')\n+                buf.append(\"\\\\f\");\n+            else if (c == ' ')\n+                buf.append(escapeSpace ? \"\\\\ \" : \" \");\n+            else if (c == '\\\\' || c == '!' || c == '#' || c == '=' || c == ':')\n+                buf.append('\\\\').append(c);\n+            else if (c < ' ' || c > '~')\n+                buf.append(\"\\\\u0000\".substring(0, 6 - Integer.toHexString(c).\n+                    length())).append(Integer.toHexString(c));\n+            else\n+                buf.append(c);\n+\n+            if (c != ' ')\n+                escapeSpace = isKey;\n+        }\n+    }\n+\n+    public static class DuplicateKeyException extends RuntimeException {\n+\n+        public DuplicateKeyException(String key, Object firstVal,\n+            String secondVal) {\n+            super(_loc.get(\"dup-key\", key, firstVal, secondVal).getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Contains the original line of the properties file: can be a\n+     * proper key/value pair, or a comment, or just whitespace.\n+     */\n+    private class PropertyLine implements Serializable {\n+\n+        private final StringBuffer line = new StringBuffer();\n+        private String propertyKey;\n+        private String propertyValue;\n+\n+        public PropertyLine(String line) {\n+            this.line.append(line);\n+        }\n+\n+        public void append(String newline) {\n+            line.append(J2DoPrivHelper.getLineSeparator());\n+            line.append(newline);\n+        }\n+\n+        public void setPropertyKey(String propertyKey) {\n+            this.propertyKey = propertyKey;\n+        }\n+\n+        public String getPropertyKey() {\n+            return this.propertyKey;\n+        }\n+\n+        public void setPropertyValue(String propertyValue) {\n+            this.propertyValue = propertyValue;\n+        }\n+\n+        public String getPropertyValue() {\n+            return this.propertyValue;\n+        }\n+\n+        /**\n+         * Write the given line. It will only be written if the line is a\n+         * comment, or if it is a property and its value is unchanged\n+         * from the original.\n+         *\n+         * @param pw the PrintWriter to which the write\n+         * @return whether or not this was a known key\n+         */\n+        public boolean write(PrintWriter pw, Collection keys,\n+            boolean needsNewline) {\n+            // no property? It may be a comment or just whitespace\n+            if (propertyKey == null) {\n+                if (needsNewline)\n+                    pw.println();\n+                pw.print(line.toString());\n+                return true;\n+            }\n+\n+            // check to see if we are the same value we initially read:\n+            // if so, then just write it back exactly as it was read\n+            if (propertyValue != null && containsKey(propertyKey) &&\n+                (propertyValue.equals(getProperty(propertyKey)) ||\n+                    (!newKeys.contains(propertyKey) &&\n+                        !modifiedKeys.contains(propertyKey)))) {\n+                if (needsNewline)\n+                    pw.println();\n+                pw.print(line.toString());\n+\n+                keys.remove(propertyKey);\n+\n+                return true;\n+            }\n+\n+            // if we have modified or added the specified key, then write\n+            // it back to the same location in the file from which it\n+            // was originally read, so that it will be in the proximity\n+            // to the comment\n+            if (containsKey(propertyKey) &&\n+                (modifiedKeys.contains(propertyKey) ||\n+                    newKeys.contains(propertyKey))) {\n+                while (keys.remove(propertyKey)) ;\n+                return writeProperty(propertyKey, pw, needsNewline);\n+            }\n+\n+            // this is a new or changed property: don't do anything\n+            return false;\n+        }\n+    }\n+\n+    private class PropertyLineReader extends BufferedReader {\n+\n+        public PropertyLineReader(InputStream in, PropertySource source)\n+            throws IOException {\n+            // Must be ISO-8859-1 ecoding according to Properties.load javadoc\n+            super(new InputStreamReader(new LineEndingStream(in, source),\n+                \"ISO-8859-1\"));\n+        }\n+\n+        public PropertyLine readPropertyLine() throws IOException {\n+            String l = readLine();\n+            if (l == null)\n+                return null;\n+\n+            PropertyLine pl = new PropertyLine(l);\n+            return pl;\n+        }\n+    }\n+\n+    /**\n+     * Simple FilterInputStream that merely remembers if the last\n+     * character that it read was a newline or not.\n+     */\n+    private static class LineEndingStream extends FilterInputStream {\n+\n+        private final PropertySource source;\n+\n+        LineEndingStream(InputStream in, PropertySource source) {\n+            super(in);\n+\n+            this.source = source;\n+        }\n+\n+        public int read() throws IOException {\n+            int c = super.read();\n+            source.endsInNewline = (c == '\\n' || c == '\\r');\n+            return c;\n+        }\n+\n+        public int read(byte[] b, int off, int len) throws IOException {\n+            int n = super.read(b, off, len);\n+            if (n > 0)\n+                source.endsInNewline =\n+                    (b[n + off - 1] == '\\n' || b[n + off - 1] == '\\r');\n+            return n;\n+        }\n+    }\n+\n+    static class PropertySource extends LinkedList\n+        implements Cloneable, Serializable {\n+\n+        private boolean endsInNewline = false;\n+    }\n+}"},{"sha":"cf42913f326e999026c7fabdd31bedc25b4bf8ba","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPriv5Helper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.lang.reflect.AnnotatedElement;\r\n+import java.security.PrivilegedAction;\r\n+\r\n+/**\r\n+ * Helper class to obtain the Privilege(Exception)Action object to perform\r\n+ * Java 2 doPrivilege security sensitive function call in the following\r\n+ * methods:\r\n+ * <ul>\r\n+ * <li>AnnotatedElement.getAnnotations\r\n+ * <li>AnnotatedElement.getDeclaredAnnotations\r\n+ * <li>AnnotatedElement.isAnnotationPresent\r\n+ * </ul>\r\n+ *\r\n+ * @author Albert Lee\r\n+ */\r\n+\r\n+public abstract class J2DoPriv5Helper extends J2DoPrivHelper {\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for AnnotatedElement.getAnnotations().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Annotation[]\r\n+     */\r\n+    public static final PrivilegedAction getAnnotationsAction(\r\n+        final AnnotatedElement element) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.getAnnotations();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for\r\n+     *   AnnotatedElement.getDeclaredAnnotations().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Annotation[]\r\n+     */\r\n+    public static final PrivilegedAction getDeclaredAnnotationsAction(\r\n+        final AnnotatedElement element) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.getDeclaredAnnotations();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a PrivilegeAction object for\r\n+     *   AnnotatedElement.isAnnotationPresent().\r\n+     *\r\n+     * Requires security policy:\r\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\r\n+     *\r\n+     * @return Boolean\r\n+     */\r\n+    public static final PrivilegedAction isAnnotationPresentAction(\r\n+        final AnnotatedElement element, final Class annotationClazz) {\r\n+        return new PrivilegedAction() {\r\n+            public Object run() {\r\n+                return element.isAnnotationPresent(annotationClazz)\r\n+                    ? Boolean.TRUE : Boolean.FALSE;\r\n+            }\r\n+        };\r\n+    }\r\n+}\r"},{"sha":"35b3af3f5a4f23152a3856dd8fbaae82272360bb","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","status":"added","additions":1028,"deletions":0,"changes":1028,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/J2DoPrivHelper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,1028 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.lang.reflect.AccessibleObject;\n+import java.net.InetAddress;\n+import java.net.MalformedURLException;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.UnknownHostException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.zip.ZipFile;\n+\n+import serp.bytecode.BCClass;\n+import serp.bytecode.BCClassLoader;\n+import serp.bytecode.Code;\n+import serp.bytecode.FieldInstruction;\n+import serp.bytecode.Project;\n+\n+/**\n+ * Helper class to obtain the Privilege(Exception)Action object to perform\n+ * Java 2 doPrivilege security sensitive function call in the following\n+ * methods:\n+ * <ul>\n+ * <li>AccessibleObject.setAccessible\n+ * <li>Class.forName\n+ * <li>Class.getClassLoader\n+ * <li>Class.getDeclaredField\n+ * <li>Class.getDeclaredFields\n+ * <li>Class.getDeclaredMethod\n+ * <li>Class.getDeclaredMethods\n+ * <li>Class.getResource\n+ * <li>Class.newInstance\n+ * <li>ClassLoader.getParent\n+ * <li>ClassLoader.getResource\n+ * <li>ClassLoader.getResources\n+ * <li>ClassLoader.getSystemClassLoader\n+ * <li>File.delete\n+ * <li>File.exists\n+ * <li>File.getAbsoluteFile\n+ * <li>File.getAbsolutePath\n+ * <li>File.getCanonicalPath\n+ * <li>File.listFiles\n+ * <li>File.length\n+ * <li>File.isDirectory\n+ * <li>File.mkdirs\n+ * <li>File.renameTo\n+ * <li>File.toURL\n+ * <li>FileInputStream new\n+ * <li>FileOutputStream new\n+ * <li>System.getProperties\n+ * <li>InetAddress.getByName\n+ * <li>MultiClassLoader new\n+ * <li>ServerSocket new\n+ * <li>Socket new\n+ * <li>Socket.accept\n+ * <li>System.getProperty\n+ * <li>Thread.getContextClassLoader\n+ * <li>Thread new\n+ * <li>TemporaryClassLoader new\n+ * <li>URL.openStream\n+ * <li>URLConnection.getContent\n+ * <li>ZipFile new\n+ * <li>serp.bytecode.Code new\n+ * <li>serp.bytecode.BCClassLoader new\n+ * <li>serp.bytecode.BCClass.write\n+ * <li>serp.bytecode.BCClass.getFields\n+ * <li>serp.bytecode.FieldInstruction.getField\n+ * <li>serp.bytecode.Project.loadClass\n+ * </ul>\n+ * \n+ * If these methods are used, the following sample usage patterns should be\n+ * followed to ensure proper privilege is granted:\n+ * <xmp>\n+ * 1) No security risk method call. E.g.\n+ *  \n+ *    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n+ * \n+ * 2) Methods with no exception thrown. PrivilegedAction is returned from\n+ *    J2DoPrivHelper.*Action(). E.g.\n+ *      \n+ *    ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n+ *                             J2DoPrivHelper.getClassLoaderAction(clazz));\n+ *                               \n+ *    ClassLoader loader = (ClassLoader) (System.getSecurityManager() == null)\n+ *                         ? clazz.getClassLoader()\n+ *                         : AccessController.doPrivileged(\n+ *                             J2DoPrivHelper.getClassLoaderAction(clazz));\n+ * 3) Methods with exception thrown. PrivilegedExceptionAction is returned\n+ *    from J2DoPrivHelper.*Action(). E.g.\n+ *    \n+ *    try {\n+ *      method = (Method) AccessController.doPrivileged(\n+ *        J2DoPrivHelper.getDeclaredMethodAction(clazz, name, parameterType));\n+ *    } catch (PrivilegedActionException pae) {\n+ *      throw (NoSuchMethodException) pae.getException();\n+ *    }\n+ *    \n+ *    try {\n+ *      method = (System.getSecurityManager() == null)\n+ *        ? clazz.getDeclaredMethod(name,parameterType)\n+ *        : (Method) AccessController.doPrivileged(\n+ *            J2DoPrivHelper.getDeclaredMethodAction(\n+ *              clazz, name, parameterType));\n+ *    } catch (PrivilegedActionException pae) {\n+ *        throw (NoSuchMethodException) pae.getException()\n+ *    }                               \n+ * </xmp> \n+ * @author Albert Lee\n+ */\n+\n+public abstract class J2DoPrivHelper {\n+    private static String lineSeparator = null;\n+    private static String pathSeparator = null;\n+\n+    /**\n+     * Return the value of the \"line.separator\" system property.\n+     * \n+     * Requires security policy: \n+     *   'permission java.util.PropertyPermission \"read\";'\n+     */\n+    public static final String getLineSeparator() {\n+        if (lineSeparator == null) {\n+            lineSeparator = (String) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return System.getProperty(\"line.separator\");\n+                        }\n+                    });\n+        }\n+        return lineSeparator;\n+    }\n+\n+    /**\n+     * Return the value of the \"path.separator\" system property.\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     */\n+    public static final String getPathSeparator() {\n+        if (pathSeparator == null) {\n+            pathSeparator = (String) AccessController\n+                    .doPrivileged(new PrivilegedAction() {\n+                        public Object run() {\n+                            return System.getProperty(\"path.separator\");\n+                        }\n+                    });\n+        }\n+        return pathSeparator;\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for aObj.setAccessible().\n+     * \n+     * Requires security policy: 'permission java.lang.reflect.ReflectPermission\n+     * \"suppressAccessChecks\";'\n+     */\n+    public static final PrivilegedAction setAccessibleAction(\n+        final AccessibleObject aObj, final boolean flag) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                aObj.setAccessible(flag);\n+                return (Object) null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for Class.forName().\n+     * \n+     * Notes: doPriv of Class.forName call is required only if the input\n+     * classloader argument is null. E.g.\n+     * \n+     * Class.forName(\"x\", false, Collection.class.getClassLoader());\n+     * \n+     * Requires security policy: 'permission java.lang.RuntimePermission\n+     * \"getClassLoader\";'\n+     * \n+     * @return Class\n+     */\n+    public static final PrivilegedExceptionAction<Class<?>> getForNameAction(\n+        final String className, final boolean initializeBoolean,\n+        final ClassLoader classLoader) {\n+        return new PrivilegedExceptionAction<Class<?>>() {\n+            public Class<?> run() throws ClassNotFoundException {\n+                return Class.forName(className, initializeBoolean, classLoader);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for clazz.getClassloader().\n+     * \n+     * Notes: No doPrivilege wrapping is required in the caller if:\n+     *     \"the caller's class loader is not null and the caller's class loader\n+     *      is not the same as or an ancestor of the class loader for the class\n+     *      whose class loader is requested\". E.g.\n+     *      \n+     *         this.getClass().getClassLoader();\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return Classloader\n+     */\n+    public static final PrivilegedAction<ClassLoader> getClassLoaderAction(\n+        final Class clazz) {\n+        return new PrivilegedAction<ClassLoader>() {\n+            public ClassLoader run() {\n+                return clazz.getClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for clazz.getDeclaredField().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Field\n+     * @exception NoSuchFieldException\n+     */\n+    public static final PrivilegedExceptionAction getDeclaredFieldAction(\n+        final Class clazz, final String name) {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws NoSuchFieldException {\n+                return clazz.getDeclaredField(name);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for class.getDeclaredFields().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Field[]\n+     */\n+    public static final PrivilegedAction getDeclaredFieldsAction(\n+        final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return clazz.getDeclaredFields();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for clazz.getDeclaredMethod().\n+     * \n+     * Requires security policy\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Method\n+     * @exception NoSuchMethodException\n+     */\n+    public static final PrivilegedExceptionAction getDeclaredMethodAction(\n+        final Class clazz, final String name, final Class[] parameterTypes) {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws NoSuchMethodException {\n+                return clazz.getDeclaredMethod(name, parameterTypes);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for clazz.getDeclaredMethods().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"accessDeclaredMembers\";'\n+     *   \n+     * @return Method[]\n+     */\n+    public static final PrivilegedAction getDeclaredMethodsAction(\n+        final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return clazz.getDeclaredMethods();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for clazz.getResource().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return URL\n+     */\n+    public static final PrivilegedAction getResourceAction(\n+        final Class clazz, final String resource) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return clazz.getResource(resource);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for clazz.newInstance().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return A new instance of the provided class.\n+     * @exception IllegalAccessException \n+     * @exception InstantiationException\n+     */\n+    public static final <T> PrivilegedExceptionAction<T> newInstanceAction(\n+        final Class<T> clazz) throws IllegalAccessException,\n+        InstantiationException {\n+        return new PrivilegedExceptionAction<T>() {\n+            public T run() throws IllegalAccessException,\n+                    InstantiationException {\n+                return clazz.newInstance();\n+            }\n+        };\n+    }\n+    \n+    /**\n+     * Return a PrivilegeAction object for loader.getParent().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return ClassLoader\n+     */\n+    public static final PrivilegedAction getParentAction(\n+        final ClassLoader loader) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return loader.getParent();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for loader.getResource().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return URL\n+     */\n+    public static final PrivilegedAction getResourceAction(\n+        final ClassLoader loader, final String resource) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return loader.getResource(resource);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for loader.getResources().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Enumeration\n+     * @exception IOException\n+     */\n+    public static final PrivilegedExceptionAction getResourcesAction(\n+        final ClassLoader loader, final String resource) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return loader.getResources(resource);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for ClassLoader.getSystemClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return ClassLoader\n+     */\n+    public static final PrivilegedAction getSystemClassLoaderAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return ClassLoader.getSystemClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.delete().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"delete\";'\n+     * \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction deleteAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.delete() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.exists().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction existsAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                try {\n+                    return f.exists() ? Boolean.TRUE : Boolean.FALSE;\n+                } catch (NullPointerException npe) {\n+                    return Boolean.FALSE;\n+                }\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.getAbsoluteFile().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     * \n+     * @return File\n+     */\n+    public static final PrivilegedAction getAbsoluteFileAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.getAbsoluteFile();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.getAbsolutePath().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return String\n+     */\n+    public static final PrivilegedAction getAbsolutePathAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.getAbsolutePath();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for f.getCanonicalPath().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return String\n+     * @exception IOException\n+     */\n+    public static final PrivilegedExceptionAction getCanonicalPathAction(\n+        final File f) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return f.getCanonicalPath();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.isDirectory().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction isDirectoryAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.isDirectory() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.isFile().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction isFileAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.isFile() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.length().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Long\n+     */\n+    public static final PrivilegedAction lengthAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new Long(f.length());\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.listFiles().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return File[]\n+     */\n+    public static final PrivilegedAction listFilesAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.listFiles();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.mkdirs().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     *   \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction mkdirsAction(final File f) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return f.mkdirs() ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for f.renameTo().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     *   \n+     * @return Boolean\n+     */\n+    public static final PrivilegedAction renameToAction(final File from,\n+        final File to) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return from.renameTo(to) ? Boolean.TRUE : Boolean.FALSE;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for f.toURL().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     *   \n+     * @return Boolean\n+     * @throws MalformedURLException\n+     */\n+    public static final PrivilegedExceptionAction toURLAction(final File file)\n+        throws MalformedURLException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws MalformedURLException {\n+                return file.toURL();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new FileInputStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return FileInputStream\n+     * @throws FileNotFoundException\n+     */\n+    public static final PrivilegedExceptionAction newFileInputStreamAction(\n+        final File f) throws FileNotFoundException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws FileNotFoundException {\n+                return new FileInputStream(f);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new FileOutputStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     * \n+     * @return FileOutputStream\n+     * @throws FileNotFoundException\n+     */\n+    public static final PrivilegedExceptionAction newFileOutputStreamAction(\n+        final File f) throws FileNotFoundException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws FileNotFoundException {\n+                return new FileOutputStream(f);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new FileOutputStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     * \n+     * @return FileOutputStream\n+     * @throws FileNotFoundException\n+     */\n+    public static final PrivilegedExceptionAction newFileOutputStreamAction(\n+        final String f, final boolean append) throws FileNotFoundException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws FileNotFoundException {\n+                return new FileOutputStream(f, append);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for InetAdress.getByName().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"connect\";'\n+     * \n+     * @return InetAddress\n+     * @throws UnknownHostException\n+     */\n+    public static final PrivilegedExceptionAction getByNameAction(\n+        final String hostname) throws UnknownHostException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws UnknownHostException {\n+                return InetAddress.getByName(hostname);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new Socket().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"connect\";'\n+     * \n+     * @return Socket\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction newSocketAction(\n+        final InetAddress host, final int port) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return new Socket(host, port);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new ServerSocket().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"listen\";'\n+     * \n+     * @return ServerSocket\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction newServerSocketAction(\n+        final int port) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return new ServerSocket(port);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for ServerSocket.accept().\n+     * \n+     * Requires security policy:\n+     *   'permission java.net.SocketPermission \"listen\";'\n+     * \n+     * @return Socket\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction acceptAction(\n+        final ServerSocket ss) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return ss.accept();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for System.getProperties().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return Properties\n+     */\n+    public static final PrivilegedAction getPropertiesAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return System.getProperties();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for System.getProperty().\n+     * \n+     * Requires security policy:\n+     *   'permission java.util.PropertyPermission \"read\";'\n+     *   \n+     * @return String\n+     */\n+    public static final PrivilegedAction getPropertyAction(final String name) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return System.getProperty(name);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for Thread.currentThread\n+     *   .getContextClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return ClassLoader\n+     */\n+    public static final PrivilegedAction<ClassLoader> \n+            getContextClassLoaderAction() {\n+        return new PrivilegedAction<ClassLoader>() {\n+            public ClassLoader run() {\n+                return Thread.currentThread().getContextClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedAction object for new Thread().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"modifyThreadGroup\";'\n+     *   'permission java.lang.RuntimePermission \"modifyThread\";'\n+     * \n+     * @return Thread\n+     */\n+    public static final PrivilegedAction newDaemonThreadAction(\n+        final Runnable target, final String name) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                Thread thread = new Thread(target, name);\n+                thread.setDaemon(true);\n+                return thread;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for url.openStream().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return InputStream\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction openStreamAction(\n+        final URL url) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return url.openStream();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object con.getContent().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return Object\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction getContentAction(\n+        final URLConnection con) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return con.getContent();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegedExceptionAction object for new ZipFile().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"read\";'\n+     * \n+     * @return ZipFile\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction newZipFileAction(final File f)\n+        throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                return new ZipFile(f);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for new serp.bytecode.Code().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return serp.bytecode.Code\n+     */\n+    public static final PrivilegedAction newCodeAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new Code();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for new TemporaryClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return TemporaryClassLoader\n+     */\n+    public static final PrivilegedAction newTemporaryClassLoaderAction(\n+        final ClassLoader parent) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new TemporaryClassLoader(parent);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for new MultiClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return MultiClassLoader\n+     */\n+    public static final PrivilegedAction newMultiClassLoaderAction() {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new MultiClassLoader();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for new BCClassLoader().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return BCClassLoader\n+     */\n+    public static final PrivilegedAction newBCClassLoaderAction(\n+        final Project project, final ClassLoader parent) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new BCClassLoader(project, parent);\n+            }\n+        };\n+    }\n+\n+    public static final PrivilegedAction newBCClassLoaderAction(\n+        final Project project) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return new BCClassLoader(project);\n+            }\n+        };\n+    }\n+    \n+    /**\n+     * Return a PrivilegedExceptionAction object for BCClass.write().\n+     * \n+     * Requires security policy:\n+     *   'permission java.io.FilePermission \"write\";'\n+     * \n+     * @return File\n+     * @throws IOException\n+     */\n+    public static final PrivilegedExceptionAction bCClassWrite(\n+        final BCClass bc, final File f) throws IOException {\n+        return new PrivilegedExceptionAction() {\n+            public Object run() throws IOException {\n+                bc.write(f);\n+                return null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for BCClass.getFields().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return BCField\n+     */\n+    public static final PrivilegedAction getBCClassFieldsAction(\n+        final BCClass bcClass, final String fieldName) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return bcClass.getFields(fieldName);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for FieldInstruction.getField().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return BCField\n+     */\n+    public static final PrivilegedAction getFieldInstructionFieldAction(\n+        final FieldInstruction instruction) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return instruction.getField();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Return a PrivilegeAction object for Project.loadClass().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"createClassLoader\";'\n+     *   \n+     * @return BCClass\n+     */\n+    public static final PrivilegedAction loadProjectClassAction(\n+        final Project project, final Class clazz) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return project.loadClass(clazz);\n+            }\n+        };\n+    }\n+    \n+    /**\n+     * Return a PrivilegeAction object for Project.loadClass().\n+     * \n+     * Requires security policy:\n+     *   'permission java.lang.RuntimePermission \"getClassLoader\";'\n+     *   \n+     * @return BCClass\n+     */\n+    public static final PrivilegedAction loadProjectClassAction(\n+        final Project project, final String clazzName) {\n+        return new PrivilegedAction() {\n+            public Object run() {\n+                return project.loadClass(clazzName);\n+            }\n+        };\n+    }\n+}"},{"sha":"40999a7595029b95e8117e2175adedbc882d2e91","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/JavaVersions.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+\n+/**\n+ * Utilities for dealing with different Java spec versions.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class JavaVersions {\n+\n+    /**\n+     * Java version; one of 2, 3, 4, 5, 6, or 7.\n+     */\n+    public static final int VERSION;\n+\n+    private static final Class[] EMPTY_CLASSES = new Class[0];\n+\n+    private static Class PARAM_TYPE = null;\n+    private static Class ENUM_TYPE = null;\n+    private static Class ANNO_TYPE = null;\n+    private static Method GET_STACK = null;\n+    private static Method SET_STACK = null;\n+    private static Method GET_CAUSE = null;\n+    private static Method INIT_CAUSE = null;\n+\n+    static {\n+        String specVersion = (String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getPropertyAction(\"java.specification.version\")); \n+        if (\"1.2\".equals(specVersion))\n+            VERSION = 2;\n+        else if (\"1.3\".equals(specVersion))\n+            VERSION = 3;\n+        else if (\"1.4\".equals(specVersion))\n+            VERSION = 4;\n+        else if (\"1.5\".equals(specVersion))\n+            VERSION = 5;\n+        else if (\"1.6\".equals(specVersion))\n+            VERSION = 6;\n+        else\n+            VERSION = 7; // maybe someday...\n+\n+        if (VERSION >= 5) {\n+            try {\n+                PARAM_TYPE = Class.forName\n+                    (\"java.lang.reflect.ParameterizedType\");\n+                ENUM_TYPE = Class.forName(\"java.lang.Enum\");\n+                ANNO_TYPE = Class.forName(\"java.lang.annotation.Annotation\");\n+            } catch (Throwable t) {\n+            }\n+        }\n+\n+        if (VERSION >= 4) {\n+            try {\n+                Class stack = Class.forName(\"[Ljava.lang.StackTraceElement;\");\n+                GET_STACK = Throwable.class.getMethod(\"getStackTrace\",\n+                    (Class[]) null);\n+                SET_STACK = Throwable.class.getMethod(\"setStackTrace\",\n+                    new Class[]{ stack });\n+                GET_CAUSE = Throwable.class.getMethod(\"getCause\",\n+                    (Class[]) null);\n+                INIT_CAUSE = Throwable.class.getMethod(\"initCause\",\n+                    new Class[]{ Throwable.class });\n+            } catch (Throwable t) {\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns a version-specific instance of the specified class\n+     *\n+     * @param base the base class to check\n+     * @return the JDK-version-specific version of the class\n+     * @see #getVersionSpecificClass(String)\n+     */\n+    public static Class getVersionSpecificClass(Class base) {\n+        try {\n+            return getVersionSpecificClass(base.getName());\n+        } catch (ClassNotFoundException e) {\n+            return base;\n+        }\n+    }\n+\n+    /**\n+     * Obtains a subclass of the specific base class that is\n+     * specific to the current version of Java in use. The\n+     * heuristic for the class name to load will be that OpenJPA\n+     * first checks for the name of the class with the current\n+     * setting of the {@link #VERSION} field, then each number in\n+     * decreasing order, until ending in the unqualified name.\n+     * For example, if we are using JDK 1.5.1, and we want to load\n+     * \"org.apache.openjpa.lib.SomeClass\", we will try to load the following\n+     * classes in order and return the first one that is successfully\n+     * found and loaded:\n+     * <ol>\n+     * <li>org.apache.openjpa.lib.SomeClass5</li>\n+     * <li>org.apache.openjpa.lib.SomeClass4</li>\n+     * <li>org.apache.openjpa.lib.SomeClass3</li>\n+     * <li>org.apache.openjpa.lib.SomeClass2</li>\n+     * <li>org.apache.openjpa.lib.SomeClass1</li>\n+     * <li>org.apache.openjpa.lib.SomeClass</li>\n+     * </ol>\n+     *\n+     * @param base the base name of the class to load\n+     * @return the subclass appropriate for the current Java version\n+     */\n+    public static Class getVersionSpecificClass(String base)\n+        throws ClassNotFoundException {\n+        for (int i = VERSION; i >= 1; i--) {\n+            try {\n+                return Class.forName(base + i);\n+            } catch (Throwable e) {\n+                // throwables might occur with bytecode that we\n+                // cannot understand\n+            }\n+        }\n+        return Class.forName(base);\n+    }\n+\n+    /**\n+     * Return true if the given type is an annotation.\n+     */\n+    public static boolean isAnnotation(Class cls) {\n+        return ANNO_TYPE != null && ANNO_TYPE.isAssignableFrom(cls);\n+    }\n+\n+    /**\n+     * Return true if the given type is an enumeration.\n+     */\n+    public static boolean isEnumeration(Class cls) {\n+        return ENUM_TYPE != null && ENUM_TYPE.isAssignableFrom(cls);\n+    }\n+\n+    /**\n+     * Collects the parameterized type declarations for a given field.\n+     */\n+    public static Class[] getParameterizedTypes(Field f) {\n+        if (f == null)\n+            return null;\n+        if (VERSION < 5)\n+            return EMPTY_CLASSES;\n+\n+        try {\n+            Object type = Field.class.getMethod(\"getGenericType\",\n+                (Class[]) null).invoke(f, (Object[]) null);\n+            return collectParameterizedTypes(type);\n+        } catch (Exception e) {\n+            return EMPTY_CLASSES;\n+        }\n+    }\n+\n+    /**\n+     * Collects the parameterized return type declarations for a given method.\n+     */\n+    public static Class[] getParameterizedTypes(Method meth) {\n+        if (meth == null)\n+            return null;\n+        if (VERSION < 5)\n+            return EMPTY_CLASSES;\n+\n+        try {\n+            Object type = Method.class.getMethod(\"getGenericReturnType\",\n+                (Class[]) null).invoke(meth, (Object[]) null);\n+            return collectParameterizedTypes(type);\n+        } catch (Exception e) {\n+            return EMPTY_CLASSES;\n+        }\n+    }\n+\n+    /**\n+     * Return all parameterized classes for the given type.\n+     */\n+    private static Class[] collectParameterizedTypes(Object type)\n+        throws Exception {\n+        if (PARAM_TYPE == null || !PARAM_TYPE.isInstance(type))\n+            return EMPTY_CLASSES;\n+\n+        Object[] args = (Object[]) PARAM_TYPE.getMethod\n+            (\"getActualTypeArguments\", (Class[]) null).invoke(type,\n+            (Object[]) null);\n+        if (args.length == 0)\n+            return EMPTY_CLASSES;\n+\n+        Class[] clss = new Class[args.length];\n+        for (int i = 0; i < args.length; i++) {\n+            if (!(args[i] instanceof Class))\n+                return EMPTY_CLASSES;\n+            clss[i] = (Class) args[i];\n+        }\n+        return clss;\n+    }\n+\n+    /**\n+     * Transfer the stack from one throwable to another, or return\n+     * false if it cannot be done, possibly due to an unsupported Java version.\n+     */\n+    public static boolean transferStackTrace(Throwable from, Throwable to) {\n+        if (GET_STACK == null || SET_STACK == null || from == null\n+            || to == null)\n+            return false;\n+\n+        try {\n+            Object stack = GET_STACK.invoke(from, (Object[]) null);\n+            SET_STACK.invoke(to, new Object[]{ stack });\n+            return true;\n+        } catch (Throwable t) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Return the cause of the given throwable.\n+     */\n+    public static Throwable getCause(Throwable ex) {\n+        if (GET_CAUSE == null || ex == null)\n+            return null;\n+\n+        try {\n+            return (Throwable) GET_CAUSE.invoke(ex, (Object[]) null);\n+        } catch (Throwable t) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Set the cause of the given throwable.\n+     */\n+    public static Throwable initCause(Throwable ex, Throwable cause) {\n+        if (INIT_CAUSE == null || ex == null || cause == null)\n+            return ex;\n+\n+        try {\n+            return (Throwable) INIT_CAUSE.invoke(ex, new Object[]{ cause });\n+        } catch (Throwable t) {\n+            return ex;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"Java version is: \" + VERSION);\n+    }\n+}"},{"sha":"33d4e438912953708cb08b0847853d17cf0b0e04","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/LRUMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Map;\n+\n+/**\n+ * Extension of the commons <code>LRUMap</code> that can change its\n+ * maximum size.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class LRUMap extends org.apache.commons.collections.map.LRUMap\n+    implements SizedMap {\n+\n+    private int _max = -1;\n+\n+    public LRUMap() {\n+    }\n+\n+    public LRUMap(int initCapacity) {\n+        super(initCapacity);\n+    }\n+\n+    public LRUMap(int initCapacity, float loadFactor) {\n+        super(initCapacity, loadFactor);\n+    }\n+\n+    public LRUMap(Map map) {\n+        super(map);\n+    }\n+\n+    public int getMaxSize() {\n+        return maxSize();\n+    }\n+\n+    public void setMaxSize(int max) {\n+        if (max < 0)\n+            throw new IllegalArgumentException(String.valueOf(max));\n+        _max = max;\n+\n+        Object key;\n+        while (size() > _max) {\n+            key = lastKey();\n+            overflowRemoved(key, remove(key));\n+        }\n+    }\n+\n+    public void overflowRemoved(Object key, Object value) {\n+    }\n+\n+    public int maxSize() {\n+        return (_max == -1) ? super.maxSize() : _max;\n+    }\n+\n+    public boolean isFull() {\n+        return (_max == -1) ? super.isFull() : size() >= _max;\n+    }\n+\n+    protected boolean removeLRU(LinkEntry entry) {\n+        overflowRemoved(entry.getKey(), entry.getValue());\n+        return super.removeLRU(entry);\n+    }\n+\n+    protected void doWriteObject(ObjectOutputStream out) throws IOException {\n+        out.writeInt(_max);\n+        super.doWriteObject(out);\n+    }\n+\n+    protected void doReadObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _max = in.readInt();\n+        super.doReadObject(in);\n+    }\n+}"},{"sha":"a82b2f7f45bc93eef6995b41e6c6befc2b190c88","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","status":"added","additions":302,"deletions":0,"changes":302,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Localizer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,302 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.security.AccessController;\r\n+import java.text.MessageFormat;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.Locale;\r\n+import java.util.Map;\r\n+import java.util.MissingResourceException;\r\n+import java.util.Properties;\r\n+import java.util.ResourceBundle;\r\n+\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.CopyOnWriteArraySet;\r\n+\r\n+/**\r\n+ * The Localizer provides convenient access to localized\r\n+ * strings. It inlcudes built-in support for parameter substitution through\r\n+ * the use of the {@link MessageFormat} utility.\r\n+ * Strings are stored in per-package {@link Properties} files.\r\n+ * The property file for the default locale must be named\r\n+ * <code>localizer.properties</code>. Additional locales can be supported\r\n+ * through additional property files using the naming conventions specified\r\n+ * in the {@link ResourceBundle} class. For example, the german locale\r\n+ * could be supported through a <code>localizer_de_DE.properties</code> file.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class Localizer {\r\n+\r\n+    // static cache of package+loc name to localizer mappings\r\n+    private static final Map _localizers = new ConcurrentHashMap();\r\n+\r\n+    // list of resource providers to delegate to when locating resources\r\n+    private static final Collection _providers = new CopyOnWriteArraySet\r\n+        (Arrays.asList(new Object[]{\r\n+            new SimpleResourceBundleProvider(),\r\n+            new StreamResourceBundleProvider(),\r\n+            new ZipResourceBundleProvider(), }));\r\n+\r\n+    /**\r\n+     * Return a Localizer instance that will access the properties file\r\n+     * in the package of the given class using the system default locale.\r\n+     *\r\n+     * @see #forPackage(Class,Locale)\r\n+     */\r\n+    public static Localizer forPackage(Class cls) {\r\n+        return forPackage(cls, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a Localizer instance that will access the properties file\r\n+     * in the package of the given class using the given locale.\r\n+     *\r\n+     * @param cls the class whose package to check for the localized\r\n+     * properties file; if null, the system will check for\r\n+     * a top-level properties file\r\n+     * @param locale the locale to which strings should be localized; if\r\n+     * null, the system default will be assumed\r\n+     */\r\n+    public static Localizer forPackage(Class cls, Locale locale) {\r\n+        if (locale == null)\r\n+            locale = Locale.getDefault();\r\n+\r\n+        int dot = (cls == null) ? -1 : cls.getName().lastIndexOf('.');\r\n+        String pkg;\r\n+        String file;\r\n+        if (dot == -1) {\r\n+            pkg = \"\";\r\n+            file = \"localizer\";\r\n+        } else {\r\n+            pkg = cls.getName().substring(0, dot);\r\n+            file = pkg + \".localizer\";\r\n+        }\r\n+        String key = file + locale.toString();\r\n+\r\n+        // no locking; ok if bundle created multiple times\r\n+        // check for cached version\r\n+        Localizer loc = (Localizer) _localizers.get(key);\r\n+        if (loc != null)\r\n+            return loc;\r\n+        else {\r\n+            loc = new Localizer(pkg, file, locale,\r\n+                cls == null ? null:(ClassLoader) AccessController.doPrivileged(\r\n+                    J2DoPrivHelper.getClassLoaderAction(cls)));\r\n+            _localizers.put(key, loc);\r\n+            return loc;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Register a resource provider.\r\n+     */\r\n+    public static void addProvider(ResourceBundleProvider provider) {\r\n+        _providers.add(provider);\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove a resource provider.\r\n+     */\r\n+    public static boolean removeProvider(ResourceBundleProvider provider) {\r\n+        return _providers.remove(provider);\r\n+    }\r\n+\r\n+    private String _file;\r\n+    private String _pkg;\r\n+    private ResourceBundle _bundle = null;\r\n+    private Locale _locale;\r\n+    private ClassLoader _loader;\r\n+\r\n+    private Localizer(String pkg, String f, Locale locale, ClassLoader loader) {\r\n+        _pkg = pkg;\r\n+        _file = f;\r\n+        _locale = locale;\r\n+        _loader = loader;\r\n+    }\r\n+\r\n+    private ResourceBundle getBundle() {\r\n+        // no locking; it's ok to create multiple bundles\r\n+        if (_bundle == null) {\r\n+            // find resource bundle\r\n+            for (Iterator itr = _providers.iterator();\r\n+                itr.hasNext() && _bundle == null; ) {\r\n+                _bundle = ((ResourceBundleProvider) itr.next())\r\n+                    .findResource(_file, _locale, _loader);\r\n+            }\r\n+        }\r\n+        return _bundle;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string matching the given key.\r\n+     */\r\n+    public Message get(String key) {\r\n+        return get(key, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string matching the given key.\r\n+     */\r\n+    public Message getFatal(String key) {\r\n+        return getFatal(key, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string matching the given key. The given\r\n+     * <code>sub</code> object will be packed into an array and substituted\r\n+     * into the found string according to the rules of the\r\n+     * {@link MessageFormat} class.\r\n+     *\r\n+     * @see #get(String)\r\n+     */\r\n+    public Message get(String key, Object sub) {\r\n+        return get(key, new Object[]{ sub });\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string matching the given key. The given\r\n+     * <code>sub</code> object will be packed into an array and substituted\r\n+     * into the found string according to the rules of the\r\n+     * {@link MessageFormat} class.\r\n+     *\r\n+     * @see #getFatal(String)\r\n+     */\r\n+    public Message getFatal(String key, Object sub) {\r\n+        return getFatal(key, new Object[]{ sub });\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string for the given key.\r\n+     *\r\n+     * @see #get(String,Object)\r\n+     */\r\n+    public Message get(String key, Object sub1, Object sub2) {\r\n+        return get(key, new Object[]{ sub1, sub2 });\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string for the given key.\r\n+     *\r\n+     * @see #getFatal(String,Object)\r\n+     */\r\n+    public Message getFatal(String key, Object sub1, Object sub2) {\r\n+        return getFatal(key, new Object[]{ sub1, sub2 });\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string for the given key.\r\n+     *\r\n+     * @see #get(String,Object)\r\n+     */\r\n+    public Message get(String key, Object sub1, Object sub2, Object sub3) {\r\n+        return get(key, new Object[]{ sub1, sub2, sub3 });\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string matching the given key. The given\r\n+     * <code>subs</code> objects will be substituted\r\n+     * into the found string according to the rules of the\r\n+     * {@link MessageFormat} class.\r\n+     *\r\n+     * @see #get(String)\r\n+     */\r\n+    public Message get(String key, Object[] subs) {\r\n+        return new Message(_pkg, getBundle(), key, subs, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the localized string matching the given key. The given\r\n+     * <code>subs</code> objects will be substituted\r\n+     * into the found string according to the rules of the\r\n+     * {@link MessageFormat} class.\r\n+     *\r\n+     * @see #getFatal(String)\r\n+     */\r\n+    public Message getFatal(String key, Object[] subs) {\r\n+        return new Message(_pkg, getBundle(), key, subs, true);\r\n+    }\r\n+\r\n+    /**\r\n+     * A <code>Message</code> can provide a localized message via the\r\n+     * {@link #getMessage} method call, and can also provide the original key,\r\n+     * package, and substitution array that were used to assemble the message.\r\n+     */\r\n+    public static class Message {\r\n+\r\n+        private final String _pkg;\r\n+        private final String _key;\r\n+        private final Object[] _subs;\r\n+        private final String _localizedMessage;\r\n+\r\n+        private Message(String packageName, ResourceBundle bundle, String key,\r\n+            Object[] subs, boolean fatal) {\r\n+            if (bundle == null && fatal)\r\n+                throw new MissingResourceException(key, key, key);\r\n+\r\n+            _pkg = packageName;\r\n+            _key = key;\r\n+            _subs = subs;\r\n+            if (bundle == null) {\r\n+                _localizedMessage = key;\r\n+            } else {\r\n+                String localized = null;\r\n+                try {\r\n+                    localized = bundle.getString(key);\r\n+                } catch (MissingResourceException mre) {\r\n+                    if (fatal)\r\n+                        throw mre;\r\n+                }\r\n+                _localizedMessage = (localized == null) ? key : localized;\r\n+            }\r\n+        }\r\n+\r\n+        /**\r\n+         * The localized message.\r\n+         */\r\n+        public String getMessage() {\r\n+            return MessageFormat.format(_localizedMessage, _subs);\r\n+        }\r\n+\r\n+        /**\r\n+         * The unique key for the localized message.\r\n+         */\r\n+        public String getKey() {\r\n+            return _key;\r\n+        }\r\n+\r\n+        /**\r\n+         * Substitutions inserted into the message.\r\n+         */\r\n+        public Object[] getSubstitutions() {\r\n+            return _subs;\r\n+        }\r\n+\r\n+        public String getPackageName() {\r\n+            return _pkg;\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return getMessage();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"205d8466d8b4fc1f1475344ae0c294925cca7b96","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","status":"added","additions":279,"deletions":0,"changes":279,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/MultiClassLoader.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,279 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Vector;\n+\n+/**\n+ * Class loader type that can be configured to delegate to multiple\n+ * internal class loaders.\n+ * The {@link #THREAD_LOADER} constant is a marker that will be replaced\n+ * with the context loader of the current thread.\n+ *\n+ * @author Abe White\n+ */\n+public class MultiClassLoader extends ClassLoader {\n+\n+    /**\n+     * Marker that will be replaced with the context loader of the current\n+     * thread whenever it is discovered in the class loader list.\n+     */\n+    public static final ClassLoader THREAD_LOADER = null;\n+\n+    /**\n+     * The standard system class loader.\n+     */\n+    public static final ClassLoader SYSTEM_LOADER =\n+        (ClassLoader) AccessController.doPrivileged(\n+            J2DoPrivHelper.getSystemClassLoaderAction());\n+\n+    private List _loaders = new ArrayList(5);\n+\n+    /**\n+     * Constructor; initializes the loader with an empty list of delegates.\n+     */\n+    public MultiClassLoader() {\n+        super(null);\n+    }\n+\n+    /**\n+     * Construct with the class loaders of another multi loader.\n+     */\n+    public MultiClassLoader(MultiClassLoader other) {\n+        super(null);\n+        addClassLoaders(other);\n+    }\n+\n+    /**\n+     * Returns true if the list contains the given class loader or marker.\n+     */\n+    public boolean containsClassLoader(ClassLoader loader) {\n+        return _loaders.contains(loader);\n+    }\n+\n+    /**\n+     * Return an array of all contained class loaders.\n+     */\n+    public ClassLoader[] getClassLoaders() {\n+        ClassLoader[] loaders = new ClassLoader[size()];\n+        ClassLoader loader;\n+        Iterator itr = _loaders.iterator();\n+        for (int i = 0; i < loaders.length; i++) {\n+            loader = (ClassLoader) itr.next();\n+            if (loader == THREAD_LOADER)\n+                loader = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getContextClassLoaderAction());\n+            loaders[i] = loader;\n+        }\n+        return loaders;\n+    }\n+\n+    /**\n+     * Return the class loader at the given index.\n+     */\n+    public ClassLoader getClassLoader(int index) {\n+        ClassLoader loader = (ClassLoader) _loaders.get(index);\n+        if (loader == THREAD_LOADER)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+        return loader;\n+    }\n+\n+    /**\n+     * Add the given class loader to the set of loaders that will be tried.\n+     *\n+     * @return true if the loader was added, false if already in the list\n+     */\n+    public boolean addClassLoader(ClassLoader loader) {\n+        if (_loaders.contains(loader))\n+            return false;\n+        return _loaders.add(loader);\n+    }\n+\n+    /**\n+     * Add the given class loader at the specified index.\n+     *\n+     * @return true if the loader was added, false if already in the list\n+     */\n+    public boolean addClassLoader(int index, ClassLoader loader) {\n+        if (_loaders.contains(loader))\n+            return false;\n+        _loaders.add(index, loader);\n+        return true;\n+    }\n+\n+    /**\n+     * Set the class loaders of this loader to those of the given loader.\n+     */\n+    public void setClassLoaders(MultiClassLoader multi) {\n+        clear();\n+        addClassLoaders(multi);\n+    }\n+\n+    /**\n+     * Adds all class loaders from the given multi loader starting at the\n+     * given index.\n+     *\n+     * @return true if any loaders were added, false if all already in list\n+     */\n+    public boolean addClassLoaders(int index, MultiClassLoader multi) {\n+        if (multi == null)\n+            return false;\n+\n+        // use iterator so that the thread loader is not resolved\n+        boolean added = false;\n+        for (Iterator itr = multi._loaders.iterator(); itr.hasNext();) {\n+            if (addClassLoader(index, (ClassLoader) itr.next())) {\n+                index++;\n+                added = true;\n+            }\n+        }\n+        return added;\n+    }\n+\n+    /**\n+     * Adds all the class loaders from the given multi loader.\n+     *\n+     * @return true if any loaders were added, false if all already in list\n+     */\n+    public boolean addClassLoaders(MultiClassLoader multi) {\n+        if (multi == null)\n+            return false;\n+\n+        // use iterator so that the thread loader is not resolved\n+        boolean added = false;\n+        for (Iterator itr = multi._loaders.iterator(); itr.hasNext();)\n+            added = addClassLoader((ClassLoader) itr.next()) || added;\n+        return added;\n+    }\n+\n+    /**\n+     * Remove the given loader from the list.\n+     *\n+     * @return true if removed, false if not in list\n+     */\n+    public boolean removeClassLoader(ClassLoader loader) {\n+        return _loaders.remove(loader);\n+    }\n+\n+    /**\n+     * Clear the list of class loaders.\n+     */\n+    public void clear() {\n+        _loaders.clear();\n+    }\n+\n+    /**\n+     * Return the number of internal class loaders.\n+     */\n+    public int size() {\n+        return _loaders.size();\n+    }\n+\n+    /**\n+     * Return true if there are no internal class laoders.\n+     */\n+    public boolean isEmpty() {\n+        return _loaders.isEmpty();\n+    }\n+\n+    protected Class findClass(String name) throws ClassNotFoundException {\n+        ClassLoader loader;\n+        for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n+            loader = (ClassLoader) itr.next();\n+            if (loader == THREAD_LOADER)\n+                loader = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getContextClassLoaderAction());\n+            try {\n+                return Class.forName(name, false, loader);\n+            } catch (Throwable t) {\n+            }\n+        }\n+        throw new ClassNotFoundException(name);\n+    }\n+\n+    protected URL findResource(String name) {\n+        ClassLoader loader;\n+        URL rsrc;\n+        for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n+            loader = (ClassLoader) itr.next();\n+            if (loader == THREAD_LOADER)\n+                loader = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getContextClassLoaderAction());\n+\n+            if (loader == null) // skip \n+                continue;\n+\n+            rsrc = (URL) AccessController.doPrivileged(\n+                J2DoPrivHelper.getResourceAction(loader, name)); \n+            if (rsrc != null)\n+                return rsrc;\n+        }\n+        return null;\n+    }\n+\n+    protected Enumeration findResources(String name) throws IOException {\n+        ClassLoader loader;\n+        Enumeration rsrcs;\n+        Object rsrc;\n+        Vector all = new Vector();\n+        for (Iterator itr = _loaders.iterator(); itr.hasNext();) {\n+            loader = (ClassLoader) itr.next();\n+            if (loader == THREAD_LOADER)\n+                loader = (ClassLoader) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getContextClassLoaderAction());\n+\n+            if (loader == null) // skip\n+                continue;\n+\n+            try {\n+                rsrcs = (Enumeration) AccessController.doPrivileged(\n+                    J2DoPrivHelper.getResourcesAction(loader, name)); \n+                while (rsrcs.hasMoreElements()) {\n+                    rsrc = rsrcs.nextElement();\n+                    if (!all.contains(rsrc))\n+                        all.addElement(rsrc);\n+                }\n+            } catch (PrivilegedActionException pae) {\n+                throw (IOException) pae.getException();\n+            }                \n+        }\n+        return all.elements();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof MultiClassLoader))\n+            return false;\n+        return ((MultiClassLoader) other)._loaders.equals(_loaders);\n+    }\n+\n+    public int hashCode() {\n+        return _loaders.hashCode();\n+    }\n+}"},{"sha":"722fbf78615508207265c86a3abebafd45fc4a0d","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","status":"added","additions":641,"deletions":0,"changes":641,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Options.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,641 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.TreeSet;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import serp.util.Strings;\n+\n+/**\n+ * A specialization of the {@link Properties} map type with the added\n+ * abilities to read application options from the command line and to\n+ * use bean patterns to set an object's properties via command-line the\n+ * stored mappings.\n+ * A typical use pattern for this class is to construct a new instance\n+ * in the <code>main</code> method, then call {@link #setFromCmdLine} with the\n+ * given args. Next, an instanceof the class being invoked is created, and\n+ * {@link #setInto} is called with that instance as a parameter. With this\n+ * pattern, the user can configure any bean properties of the class, or even\n+ * properties of classes reachable from the class, through the command line.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class Options extends TypedProperties {\n+\n+    /**\n+     * Immutable empty instance.\n+     */\n+    public static Options EMPTY = new EmptyOptions();\n+\n+    // maps primitive types to the appropriate wrapper class and default value\n+    private static Object[][] _primWrappers = new Object[][]{\n+        { boolean.class, Boolean.class, Boolean.FALSE },\n+        { byte.class, Byte.class, new Byte((byte) 0) },\n+        { char.class, Character.class, new Character((char) 0) },\n+        { double.class, Double.class, new Double(0D) },\n+        { float.class, Float.class, new Float(0F) },\n+        { int.class, Integer.class, new Integer(0) },\n+        { long.class, Long.class, new Long(0L) },\n+        { short.class, Short.class, new Short((short) 0) }, };\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public Options() {\n+        super();\n+    }\n+\n+    /**\n+     * Construct the options instance with the given set of defaults.\n+     *\n+     * @see Properties#Properties(Properties)\n+     */\n+    public Options(Properties defaults) {\n+        super(defaults);\n+    }\n+\n+    /**\n+     * Parses the given argument list into flag/value pairs, which are stored\n+     * as properties. Flags that are present without values are given\n+     * the value \"true\". If any flag is found for which there is already\n+     * a mapping present, the existing mapping will be overwritten.\n+     * Flags should be of the form:<br />\n+     * <code>java Foo -flag1 value1 -flag2 value2 ... arg1 arg2 ...</code>\n+     *\n+     * @param args the command-line arguments\n+     * @return all arguments in the original array beyond the\n+     * flag/value pair list\n+     * @author Patrick Linskey\n+     */\n+    public String[] setFromCmdLine(String[] args) {\n+        if (args == null || args.length == 0)\n+            return args;\n+\n+        String key = null;\n+        String value = null;\n+        List remainder = new LinkedList();\n+        for (int i = 0; i < args.length + 1; i++) {\n+            if (i == args.length || args[i].startsWith(\"-\")) {\n+                key = trimQuote(key);\n+                if (key != null) {\n+                    if (!StringUtils.isEmpty(value))\n+                        setProperty(key, trimQuote(value));\n+                    else\n+                        setProperty(key, \"true\");\n+                }\n+\n+                if (i == args.length)\n+                    break;\n+                else {\n+                    key = args[i].substring(1);\n+                    value = null;\n+                }\n+            } else if (key != null) {\n+                setProperty(key, trimQuote(args[i]));\n+                key = null;\n+            } else\n+                remainder.add(args[i]);\n+        }\n+\n+        return (String[]) remainder.toArray(new String[remainder.size()]);\n+    }\n+\n+    /**\n+     * This method uses reflection to set all the properties in the given\n+     * object that are named by the keys in this map. For a given key 'foo',\n+     * the algorithm will look for a 'setFoo' method in the given instance.\n+     * For a given key 'foo.bar', the algorithm will first look for a\n+     * 'getFoo' method in the given instance, then will recurse on the return\n+     * value of that method, now looking for the 'bar' property. This allows\n+     * the setting of nested object properties. If in the above example the\n+     * 'getFoo' method is not present or returns null, the algorithm will\n+     * look for a 'setFoo' method; if found it will constrct a new instance\n+     * of the correct type, set it using the 'setFoo' method, then recurse on\n+     * it as above. Property names can be nested in this way to an arbitrary\n+     * depth. For setter methods that take multiple parameters, the value\n+     * mapped to the key can use the ',' as an argument separator character.\n+     * If not enough values are present for a given method after splitting\n+     * the string on ',', the remaining arguments will receive default\n+     * values. All arguments are converted from string form to the\n+     * correct type if possible(i.e. if the type is primitive,\n+     * java.lang.Clas, or has a constructor that takes a single string\n+     * argument). Examples:\n+     * <ul>\n+     * <li>Map Entry: <code>\"age\"-&gt;\"12\"</code><br />\n+     * Resultant method call: <code>obj.setAge(12)</code></li>\n+     * <li>Map Entry: <code>\"range\"-&gt;\"1,20\"</code><br />\n+     * Resultant method call: <code>obj.setRange(1, 20)</code></li>\n+     * <li>Map Entry: <code>\"range\"-&gt;\"10\"</code><br />\n+     * Resultant method call: <code>obj.setRange(10, 10)</code></li>\n+     * <li>Map Entry: <code>\"brother.name\"-&gt;\"Bob\"</code><br />\n+     * Resultant method call: <code>obj.getBrother().setName(\"Bob\")\n+     * <code></li>\n+     * </ul> \n+     * Any keys present in the map for which there is no\n+     * corresponding property in the given object will be ignored,\n+     * and will be returned in the {@link Map} returned by this method.\n+     *\n+     * @return an {@link Options} of key-value pairs in this object\n+     * for which no setters could be found.\n+     * @throws RuntimeException on parse error\n+     */\n+    public Options setInto(Object obj) {\n+        // set all defaults that have no explicit value\n+        Map.Entry entry = null;\n+        if (defaults != null) {\n+            for (Iterator itr = defaults.entrySet().iterator(); itr.hasNext();)\n+            {\n+                entry = (Map.Entry) itr.next();\n+                if (!containsKey(entry.getKey()))\n+                    setInto(obj, entry);\n+            }\n+        }\n+\n+        // set from main map\n+        Options invalidEntries = null;\n+        Map.Entry e;\n+        for (Iterator itr = entrySet().iterator(); itr.hasNext();) {\n+            e = (Map.Entry) itr.next();\n+            if (!setInto(obj, e)) {\n+                if (invalidEntries == null)\n+                    invalidEntries = new Options();\n+                invalidEntries.put(e.getKey(), e.getValue());\n+            }\n+        }\n+        return (invalidEntries == null) ? EMPTY : invalidEntries;\n+    }\n+\n+    /**\n+     * Sets the property named by the key of the given entry in the\n+     * given object.\n+     *\n+     * @return <code>true</code> if the set succeeded, or\n+     * <code>false</code> if no method could be found for this property.\n+     */\n+    private boolean setInto(Object obj, Map.Entry entry) {\n+        if (entry.getKey() == null)\n+            return false;\n+\n+        try {\n+            // look for matching parameter of object\n+            Object[] match = new Object[]{ obj, null };\n+            if (!matchOptionToMember(entry.getKey().toString(), match))\n+                return false;\n+\n+            Class[] type = getType(match[1]);\n+            Object[] values = new Object[type.length];\n+            String[] strValues;\n+            if (entry.getValue() == null)\n+                strValues = new String[1];\n+            else if (values.length == 1)\n+                strValues = new String[]{ entry.getValue().toString() };\n+            else\n+                strValues = Strings.split(entry.getValue().toString(), \",\", 0);\n+\n+            // convert the string values into parameter values, if not\n+            // enough string values repeat last one for rest\n+            for (int i = 0; i < strValues.length; i++)\n+                values[i] = stringToObject(strValues[i].trim(), type[i]);\n+            for (int i = strValues.length; i < values.length; i++)\n+                values[i] = getDefaultValue(type[i]);\n+\n+            // invoke the setter / set the field\n+            invoke(match[0], match[1], values);\n+            return true;\n+        } catch (Throwable t) {\n+            throw new ParseException(obj + \".\" + entry.getKey()\n+                + \" = \" + entry.getValue(), t);\n+        }\n+    }\n+\n+    /**\n+     * Removes leading and trailing single quotes from the given String, if any.\n+     */\n+    private static String trimQuote(String val) {\n+        if (val != null && val.startsWith(\"'\") && val.endsWith(\"'\"))\n+            return val.substring(1, val.length() - 1);\n+        return val;\n+    }\n+\n+    /**\n+     * Finds all the options that can be set on the provided class. This does\n+     * not look for path-traversal expressions.\n+     *\n+     * @param type The class for which available options should be listed.\n+     * @return The available option names in <code>type</code>. The\n+     * names will have initial caps. They will be ordered alphabetically.\n+     */\n+    public static Collection findOptionsFor(Class type) {\n+        Collection names = new TreeSet();\n+        // look for a setter method matching the key\n+        Method[] meths = type.getMethods();\n+        Class[] params;\n+        for (int i = 0; i < meths.length; i++) {\n+            if (meths[i].getName().startsWith(\"set\")) {\n+                params = meths[i].getParameterTypes();\n+                if (params.length == 0)\n+                    continue;\n+                if (params[0].isArray())\n+                    continue;\n+\n+                names.add(StringUtils.capitalize(\n+                    meths[i].getName().substring(3)));\n+            }\n+        }\n+\n+        // check for public fields\n+        Field[] fields = type.getFields();\n+        for (int i = 0; i < fields.length; i++)\n+            names.add(StringUtils.capitalize(fields[i].getName()));\n+\n+        return names;\n+    }\n+\n+    /**\n+     * Matches a key to an object/setter pair.\n+     *\n+     * @param key the key given at the command line; may be of the form\n+     * 'foo.bar' to signify the 'bar' property of the 'foo' owned object\n+     * @param match an array of length 2, where the first index is set\n+     * to the object to retrieve the setter for\n+     * @return true if a match was made, false otherwise; additionally,\n+     * the first index of the match array will be set to\n+     * the matching object and the second index will be\n+     * set to the setter method or public field for the\n+     * property named by the key\n+     */\n+    private static boolean matchOptionToMember(String key, Object[] match)\n+        throws Exception {\n+        if (StringUtils.isEmpty(key))\n+            return false;\n+\n+        // unfortunately we can't use bean properties for setters; any\n+        // setter with more than 1 arg is ignored; calc setter and getter\n+        // name to look for\n+        String[] find = Strings.split(key, \".\", 2);\n+        String base = StringUtils.capitalize(find[0]);\n+        String set = \"set\" + base;\n+        String get = \"get\" + base;\n+\n+        // look for a setter/getter matching the key; look for methods first\n+        Class type = match[0].getClass();\n+        Method[] meths = type.getMethods();\n+        Method setMeth = null;\n+        Method getMeth = null;\n+        Class[] params;\n+        for (int i = 0; i < meths.length; i++) {\n+            if (meths[i].getName().equals(set)) {\n+                params = meths[i].getParameterTypes();\n+                if (params.length == 0)\n+                    continue;\n+                if (params[0].isArray())\n+                    continue;\n+\n+                // use this method if we haven't found any other setter, if\n+                // it has less parameters than any other setter, or if it uses\n+                // string parameters\n+                if (setMeth == null)\n+                    setMeth = meths[i];\n+                else if (params.length < setMeth.getParameterTypes().length)\n+                    setMeth = meths[i];\n+                else if (params.length == setMeth.getParameterTypes().length\n+                    && params[0] == String.class)\n+                    setMeth = meths[i];\n+            } else if (meths[i].getName().equals(get))\n+                getMeth = meths[i];\n+        }\n+\n+        // if no methods found, check for public field\n+        Member setter = setMeth;\n+        Member getter = getMeth;\n+        if (setter == null) {\n+            Field[] fields = type.getFields();\n+            String uncapBase = StringUtils.uncapitalize(find[0]);\n+            for (int i = 0; i < fields.length; i++) {\n+                if (fields[i].getName().equals(base)\n+                    || fields[i].getName().equals(uncapBase)) {\n+                    setter = fields[i];\n+                    getter = fields[i];\n+                    break;\n+                }\n+            }\n+        }\n+\n+        // if no way to access property, give up\n+        if (setter == null && getter == null)\n+            return false;\n+\n+        // recurse on inner object with remainder of key?\n+        if (find.length > 1) {\n+            Object inner = null;\n+            if (getter != null)\n+                inner = invoke(match[0], getter, null);\n+\n+            // if no getter or current inner is null, try to create a new\n+            // inner instance and set it in object\n+            if (inner == null && setter != null) {\n+                Class innerType = getType(setter)[0];\n+                try {\n+                    inner = AccessController.doPrivileged(\n+                        J2DoPrivHelper.newInstanceAction(innerType));\n+                } catch (PrivilegedActionException pae) {\n+                    throw pae.getException();\n+                }\n+                invoke(match[0], setter, new Object[]{ inner });\n+            }\n+            match[0] = inner;\n+            return matchOptionToMember(find[1], match);\n+        }\n+\n+        // got match; find setter for property\n+        match[1] = setter;\n+        return match[1] != null;\n+    }\n+\n+    /**\n+     * Return the types of the parameters needed to set the given member.\n+     */\n+    private static Class[] getType(Object member) {\n+        if (member instanceof Method)\n+            return ((Method) member).getParameterTypes();\n+        return new Class[]{ ((Field) member).getType() };\n+    }\n+\n+    /**\n+     * Set the given member to the given value(s).\n+     */\n+    private static Object invoke(Object target, Object member, Object[] values)\n+        throws Exception {\n+        if (member instanceof Method)\n+            return ((Method) member).invoke(target, values);\n+        if (values == null || values.length == 0)\n+            return ((Field) member).get(target);\n+        ((Field) member).set(target, values[0]);\n+        return null;\n+    }\n+\n+    /**\n+     * Converts the given string into an object of the given type, or its\n+     * wrapper type if it is primitive.\n+     */\n+    private Object stringToObject(String str, Class type) throws Exception {\n+        // special case for null and for strings\n+        if (str == null || type == String.class)\n+            return str;\n+\n+        // special case for creating Class instances\n+        if (type == Class.class)\n+            return Class.forName(str, false, getClass().getClassLoader());\n+\n+        // special case for numeric types that end in .0; strip the decimal\n+        // places because it can kill int, short, long parsing\n+        if (type.isPrimitive() || Number.class.isAssignableFrom(type))\n+            if (str.length() > 2 && str.endsWith(\".0\"))\n+                str = str.substring(0, str.length() - 2);\n+\n+        // for primitives, recurse on wrapper type\n+        if (type.isPrimitive())\n+            for (int i = 0; i < _primWrappers.length; i++)\n+                if (type == _primWrappers[i][0])\n+                    return stringToObject(str, (Class) _primWrappers[i][1]);\n+\n+        // look for a string constructor\n+        Exception err = null;\n+        try {\n+            Constructor cons = type.getConstructor\n+                (new Class[]{ String.class });\n+            if (type == Boolean.class && \"t\".equalsIgnoreCase(str))\n+                str = \"true\";\n+            return cons.newInstance(new Object[]{ str });\n+        } catch (Exception e) {\n+            err = e;\n+        }\n+\n+        // special case: the arg value is a subtype name and a new instance\n+        // of that type should be set as the object\n+        Class subType = null;\n+        try {\n+            subType = Class.forName(str);\n+        } catch (Exception e) {\n+            throw err;\n+        }\n+        if (!type.isAssignableFrom(subType))\n+            throw err;\n+        try {\n+            return AccessController.doPrivileged(\n+                J2DoPrivHelper.newInstanceAction(subType));\n+        } catch (PrivilegedActionException pae) {\n+            throw pae.getException();\n+        }\n+    }\n+\n+    /**\n+     * Returns the default value for the given parameter type.\n+     */\n+    private Object getDefaultValue(Class type) {\n+        for (int i = 0; i < _primWrappers.length; i++)\n+            if (_primWrappers[i][0] == type)\n+                return _primWrappers[i][2];\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Specialization of {@link #getBooleanProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public boolean getBooleanProperty(String key, String key2, boolean def) {\n+        String val = getProperty(key);\n+        if (val == null)\n+            val = getProperty(key2);\n+        if (val == null)\n+            return def;\n+        return \"t\".equalsIgnoreCase(val) || \"true\".equalsIgnoreCase(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#getFloatProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public float getFloatProperty(String key, String key2, float def) {\n+        String val = getProperty(key);\n+        if (val == null)\n+            val = getProperty(key2);\n+        return (val == null) ? def : Float.parseFloat(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#getDoubleProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public double getDoubleProperty(String key, String key2, double def) {\n+        String val = getProperty(key);\n+        if (val == null)\n+            val = getProperty(key2);\n+        return (val == null) ? def : Double.parseDouble(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#getLongProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public long getLongProperty(String key, String key2, long def) {\n+        String val = getProperty(key);\n+        if (val == null)\n+            val = getProperty(key2);\n+        return (val == null) ? def : Long.parseLong(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#getIntProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public int getIntProperty(String key, String key2, int def) {\n+        String val = getProperty(key);\n+        if (val == null)\n+            val = getProperty(key2);\n+        return (val == null) ? def : Integer.parseInt(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link Properties#getProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public String getProperty(String key, String key2, String def) {\n+        String val = getProperty(key);\n+        return (val == null) ? getProperty(key2, def) : val;\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#removeBooleanProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public boolean removeBooleanProperty(String key, String key2, boolean def) {\n+        String val = removeProperty(key);\n+        if (val == null)\n+            val = removeProperty(key2);\n+        else\n+            removeProperty(key2);\n+        if (val == null)\n+            return def;\n+        return \"t\".equalsIgnoreCase(val) || \"true\".equalsIgnoreCase(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#removeFloatProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public float removeFloatProperty(String key, String key2, float def) {\n+        String val = removeProperty(key);\n+        if (val == null)\n+            val = removeProperty(key2);\n+        else\n+            removeProperty(key2);\n+        return (val == null) ? def : Float.parseFloat(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#removeDoubleProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public double removeDoubleProperty(String key, String key2, double def) {\n+        String val = removeProperty(key);\n+        if (val == null)\n+            val = removeProperty(key2);\n+        else\n+            removeProperty(key2);\n+        return (val == null) ? def : Double.parseDouble(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#removeLongProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public long removeLongProperty(String key, String key2, long def) {\n+        String val = removeProperty(key);\n+        if (val == null)\n+            val = removeProperty(key2);\n+        else\n+            removeProperty(key2);\n+        return (val == null) ? def : Long.parseLong(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link TypedProperties#removeIntProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public int removeIntProperty(String key, String key2, int def) {\n+        String val = removeProperty(key);\n+        if (val == null)\n+            val = removeProperty(key2);\n+        else\n+            removeProperty(key2);\n+        return (val == null) ? def : Integer.parseInt(val);\n+    }\n+\n+    /**\n+     * Specialization of {@link Properties#removeProperty} to allow\n+     * a value to appear under either of two keys; useful for short and\n+     * long versions of command-line flags.\n+     */\n+    public String removeProperty(String key, String key2, String def) {\n+        String val = removeProperty(key);\n+        return (val == null) ? removeProperty(key2, def) : val;\n+    }\n+\n+    /**\n+     * Immutable empty options.\n+     */\n+    private static class EmptyOptions extends Options {\n+\n+        public Object setProperty(String key, String value) {\n+            throw new UnsupportedOperationException();\n+        }\n+\n+        public Object put(Object key, Object value) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+}"},{"sha":"b814cfcf83cb8984209a699a5450ede44b645028","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","status":"added","additions":259,"deletions":0,"changes":259,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParameterTemplate.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.security.AccessController;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A template that allows parameter substitutions. Parameters should be\n+ * placed in the template in the form ${param-name}. Use the\n+ * {@link #setParameter} method to set the parameter values, which will be\n+ * substituted into the template on calls to {@link #write} and\n+ * {@link #toString}. If a parameter is encountered that hasn't been set, then\n+ * the parameter key is used to lookup the corresponding System property.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ParameterTemplate {\n+\n+    private static final String SEP = J2DoPrivHelper.getLineSeparator();\n+\n+    private final StringBuffer _buf = new StringBuffer();\n+    private final Map _params = new HashMap();\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(String value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(boolean value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(char value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(double value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(float value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(int value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(long value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(short value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(Object value) {\n+        _buf.append(value);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(InputStream in) throws IOException {\n+        return append(new InputStreamReader(in));\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(Reader reader) throws IOException {\n+        BufferedReader buf = new BufferedReader(reader);\n+        String line;\n+        while ((line = buf.readLine()) != null)\n+            _buf.append(line).append(SEP);\n+        return this;\n+    }\n+\n+    /**\n+     * Add the given value to the internal template.\n+     */\n+    public ParameterTemplate append(File file) throws IOException {\n+        FileReader reader = new FileReader(file);\n+        try {\n+            return append(reader);\n+        } finally {\n+            try {\n+                reader.close();\n+            } catch (IOException ioe) {\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Return true if the given parameter has been given a value.\n+     */\n+    public boolean hasParameter(String name) {\n+        return _params.containsKey(name);\n+    }\n+\n+    /**\n+     * Return the value set for the given parameter.\n+     */\n+    public Object getParameter(String name) {\n+        return _params.get(name);\n+    }\n+\n+    /**\n+     * Set the value for the given parameter.\n+     */\n+    public Object setParameter(String name, Object val) {\n+        return _params.put(name, val);\n+    }\n+\n+    /**\n+     * Set the values for all the parameters in the given map.\n+     */\n+    public void setParameters(Map params) {\n+        _params.putAll(params);\n+    }\n+\n+    /**\n+     * Clear the recorded parameter values.\n+     */\n+    public void clearParameters() {\n+        _params.clear();\n+    }\n+\n+    /**\n+     * Return a copy of the internal value template with all parameters\n+     * substituted with their current values.\n+     */\n+    public String toString() {\n+        if (_buf.length() == 0 || _params.isEmpty())\n+            return _buf.toString();\n+\n+        StringBuffer copy = new StringBuffer();\n+        StringBuffer param = null;\n+        char ch, last = 0;\n+        for (int i = 0; i < _buf.length(); i++) {\n+            ch = _buf.charAt(i);\n+            if (last == '$' && ch == '{') {\n+                copy.deleteCharAt(copy.length() - 1);\n+                param = new StringBuffer();\n+            } else if (ch == '}' && param != null) {\n+                if (_params.containsKey(param.toString()))\n+                    copy.append(_params.get(param.toString()));\n+                else\n+                    copy.append((String) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getPropertyAction(param.toString())));\n+                param = null;\n+            } else if (param != null)\n+                param.append(ch);\n+            else\n+                copy.append(ch);\n+\n+            last = ch;\n+        }\n+        return copy.toString();\n+    }\n+\n+    /**\n+     * Write the internal value template with all parameters\n+     * substituted with their current values.\n+     */\n+    public void write(OutputStream out) throws IOException {\n+        write(new OutputStreamWriter(out));\n+    }\n+\n+    /**\n+     * Write the internal value template with all parameters\n+     * substituted with their current values.\n+     */\n+    public void write(Writer writer) throws IOException {\n+        writer.write(toString());\n+        writer.flush();\n+    }\n+\n+    /**\n+     * Write the internal value template with all parameters\n+     * substituted with their current values.\n+     */\n+    public void write(File file) throws IOException {\n+        FileWriter writer = new FileWriter(file);\n+        try {\n+            write(writer);\n+        } finally {\n+            try {\n+                writer.close();\n+            } catch (IOException ioe) {\n+            }\n+        }\n+    }\n+}"},{"sha":"729a94d910fca9337d7b381d95921d52a9a37ad6","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ParseException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n+/**\n+ * Exception type for parse errors.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ * @since 0.4.0\n+ */\n+public class ParseException extends NestableRuntimeException {\n+\n+    public ParseException() {\n+    }\n+\n+    public ParseException(String msg) {\n+        super(msg);\n+    }\n+\n+    public ParseException(Localizer.Message msg) {\n+        super(msg.getMessage());\n+    }\n+\n+    public ParseException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    public ParseException(String msg, Throwable cause) {\n+        super(msg, cause);\n+    }\n+\n+    public ParseException(Localizer.Message msg, Throwable cause) {\n+        super(msg.getMessage(), cause);\n+    }\n+}"},{"sha":"d605d2fa6f999f294571de20f28ba34a923b1f77","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.ref.Reference;\n+\n+/**\n+ * Map in which the key, value, or both may be weak/soft references.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ * @since 0.4.0\n+ */\n+public class ReferenceHashMap\n+    extends org.apache.commons.collections.map.ReferenceMap\n+    implements ReferenceMap, SizedMap {\n+\n+    private int _maxSize = Integer.MAX_VALUE;\n+\n+    public ReferenceHashMap(int keyType, int valueType) {\n+        super(toReferenceConstant(keyType), toReferenceConstant(valueType));\n+    }\n+\n+    public ReferenceHashMap(int keyType, int valueType, int capacity,\n+        float loadFactor) {\n+        super(toReferenceConstant(keyType), toReferenceConstant(valueType),\n+            capacity, loadFactor);\n+    }\n+\n+    /**\n+     * Concver our reference constants to Apache's.\n+     */\n+    private static int toReferenceConstant(int type) {\n+        switch (type) {\n+            case ReferenceMap.HARD:\n+                return org.apache.commons.collections.map.ReferenceMap. HARD;\n+            case ReferenceMap.SOFT:\n+                return org.apache.commons.collections.map.ReferenceMap. SOFT;\n+            default:\n+                return org.apache.commons.collections.map.ReferenceMap. WEAK;\n+        }\n+    }\n+\n+    public int getMaxSize() {\n+        return _maxSize;\n+    }\n+\n+    public void setMaxSize(int maxSize) {\n+        _maxSize = (maxSize < 0) ? Integer.MAX_VALUE : maxSize;\n+        if (_maxSize != Integer.MAX_VALUE)\n+            removeOverflow(_maxSize);\n+    }\n+\n+    public boolean isFull() {\n+        return size() >= _maxSize;\n+    }\n+\n+    public void overflowRemoved(Object key, Object value) {\n+    }\n+\n+    public void valueExpired(Object key) {\n+    }\n+\n+    public void keyExpired(Object value) {\n+    }\n+\n+    public void removeExpired() {\n+        purge();\n+    }\n+\n+    /**\n+     * Remove any entries over max size.\n+     */\n+    private void removeOverflow(int maxSize) {\n+        Object key;\n+        while (size() > maxSize) {\n+            key = keySet().iterator().next();\n+            overflowRemoved(key, remove(key));\n+        }\n+    }\n+\n+    protected void addMapping(int hashIndex, int hashCode, Object key,\n+        Object value) {\n+        if (_maxSize != Integer.MAX_VALUE)\n+            removeOverflow(_maxSize - 1);\n+        super.addMapping(hashIndex, hashCode, key, value);\n+    }\n+\n+    protected HashEntry createEntry(HashEntry next, int hashCode, Object key,\n+        Object value) {\n+        return new AccessibleEntry(this, next, hashCode, key, value);\n+    }\n+\n+    protected void purge(Reference ref) {\n+        // the logic for this method is taken from the original purge method\n+        // we're overriding, with added logic to track the expired key/value\n+        int index = hashIndex(ref.hashCode(), data.length);\n+        AccessibleEntry entry = (AccessibleEntry) data[index];\n+        AccessibleEntry prev = null;\n+        Object key = null, value = null;\n+        while (entry != null) {\n+            if (purge(entry, ref)) {\n+                if (isHard(keyType))\n+                    key = entry.key();\n+                else if (isHard(valueType))\n+                    value = entry.value();\n+\n+                if (prev == null)\n+                    data[index] = entry.nextEntry();\n+                else\n+                    prev.setNextEntry(entry.nextEntry());\n+                size--;\n+                break;\n+            }\n+            prev = entry;\n+            entry = entry.nextEntry();\n+        }\n+\n+        if (key != null)\n+            valueExpired(key);\n+        else if (value != null)\n+            keyExpired(value);\n+    }\n+\n+    /**\n+     * See the code for <code>ReferenceMap.ReferenceEntry.purge</code>.\n+     */\n+    private boolean purge(AccessibleEntry entry, Reference ref) {\n+        boolean match = (!isHard(keyType) && entry.key() == ref)\n+            || (!isHard(valueType) && entry.value() == ref);\n+        if (match) {\n+            if (!isHard(keyType))\n+                ((Reference) entry.key()).clear();\n+            if (!isHard(valueType))\n+                ((Reference) entry.value()).clear();\n+            else if (purgeValues)\n+                entry.nullValue();\n+        }\n+        return match;\n+    }\n+\n+    private static boolean isHard(int type) {\n+        return type == org.apache.commons.collections.map. ReferenceMap.HARD;\n+    }\n+\n+    protected void doWriteObject(ObjectOutputStream out) throws IOException {\n+        out.writeInt(_maxSize);\n+        super.doWriteObject(out);\n+    }\n+\n+    protected void doReadObject(ObjectInputStream in)\n+        throws ClassNotFoundException, IOException {\n+        _maxSize = in.readInt();\n+        super.doReadObject(in);\n+    }\n+\n+    /**\n+     * Extension of the base entry type that allows our outer class to access\n+     * protected state.\n+     */\n+    private static class AccessibleEntry extends ReferenceEntry {\n+\n+        public AccessibleEntry(org.apache.commons.collections.map.\n+            AbstractReferenceMap map, HashEntry next,\n+            int hashCode, Object key, Object value) {\n+            super(map, next, hashCode, key, value);\n+        }\n+\n+        public Object key() {\n+            return key;\n+        }\n+\n+        public Object value() {\n+            return value;\n+        }\n+\n+        public void nullValue() {\n+            value = null;\n+        }\n+\n+        public AccessibleEntry nextEntry() {\n+            return (AccessibleEntry) next;\n+        }\n+\n+        public void setNextEntry(AccessibleEntry next) {\n+            this.next = next;\n+        }\n+    }\n+}"},{"sha":"9c5642b724c4775ac55d40ed973cac013ede265e","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceHashSet.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.set.MapBackedSet;\n+\n+/**\n+ * A set whose values may be stored as weak or soft references.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ReferenceHashSet implements Set, Serializable {\n+\n+    /**\n+     * Hard reference marker.\n+     */\n+    public static final int HARD = 0;\n+\n+    /**\n+     * Soft reference marker.\n+     */\n+    public static final int SOFT = 1;\n+\n+    /**\n+     * Weak reference marker.\n+     */\n+    public static final int WEAK = 2;\n+\n+    private static final Object DUMMY_VAL = new Serializable() {\n+        public String toString() {\n+            return ReferenceHashSet.class.getName() + \".DUMMY_VAL\";\n+        }\n+    };\n+\n+    private final Set _set;\n+\n+    /**\n+     * Construct a set with the given reference type.\n+     */\n+    public ReferenceHashSet(int refType) {\n+        if (refType == HARD)\n+            _set = new HashSet();\n+        else {\n+            int mapRefType = (refType == WEAK) ? org.apache.commons.\n+                collections.map.ReferenceMap.WEAK : org.apache.\n+                commons.collections.map.ReferenceMap.SOFT;\n+            _set = MapBackedSet.decorate(new org.apache.commons.\n+                collections.map.ReferenceMap(mapRefType,\n+                org.apache.commons.collections.map.\n+                    ReferenceMap.HARD), DUMMY_VAL);\n+        }\n+    }\n+\n+    public boolean add(Object obj) {\n+        return _set.add(obj);\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        return _set.addAll(coll);\n+    }\n+\n+    public void clear() {\n+        _set.clear();\n+    }\n+\n+    public boolean contains(Object obj) {\n+        return _set.contains(obj);\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        return _set.containsAll(coll);\n+    }\n+\n+    public boolean isEmpty() {\n+        return _set.isEmpty();\n+    }\n+\n+    public Iterator iterator() {\n+        return _set.iterator();\n+    }\n+\n+    public boolean remove(Object obj) {\n+        return _set.remove(obj);\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        return _set.removeAll(coll);\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        return _set.retainAll(coll);\n+    }\n+\n+    public int size() {\n+        return _set.size();\n+    }\n+\n+    public Object[] toArray() {\n+        return _set.toArray();\n+    }\n+\n+    public Object[] toArray(Object[] arr) {\n+        return _set.toArray(arr);\n+    }\n+\n+    public int hashCode() {\n+        return _set.hashCode();\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj instanceof ReferenceHashSet)\n+            obj = ((ReferenceHashSet) obj)._set;\n+        return _set.equals(obj);\n+    }\n+}"},{"sha":"1ee59c57a7660b5c87ab470fe7941b17762d60ee","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ReferenceMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Map;\n+\n+/**\n+ * A {@link Map} type that can hold its keys, values, or both with\n+ * weak or soft references.\n+ *\n+ * @author Abe White\n+ */\n+public interface ReferenceMap extends Map {\n+\n+    public static final int HARD = 0;\n+    public static final int WEAK = 1;\n+    public static final int SOFT = 2;\n+\n+    /**\n+     * Purge stale entries.\n+     */\n+    public void removeExpired();\n+\n+    /**\n+     * Overridable callback for when a key reference expires.\n+     *\n+     * @param value the value for the expired key\n+     */\n+    public void keyExpired(Object value);\n+\n+    /**\n+     * Overridable callback for when a value reference expires.\n+     *\n+     * @param key the key for the expired value\n+     */\n+    public void valueExpired(Object key);\n+}"},{"sha":"017032972bc8232e53665bcb934e107662b5d042","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ResourceBundleProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * A simple mechanism for looking up ResourceBundle instances\n+ * across different potential sources.\n+ *\n+ * @author Stephen Kim\n+ */\n+interface ResourceBundleProvider {\n+\n+    /**\n+     * Find a ResourceBundle with the given name, locale, and class loader\n+     * (which may be null).\n+     */\n+    public ResourceBundle findResource(String name, Locale locale,\n+        ClassLoader loader);\n+}\n+"},{"sha":"e13b09feabe560c023afa5097cb78383d308f83b","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","status":"added","additions":232,"deletions":0,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/Services.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,232 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.security.AccessController;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+import java.util.TreeSet;\n+\n+/**\n+ * Utility classes to locate services, as defined in the <a\n+ * href=\"http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html\n+ * #Service%20Provider\">Jar File Specification</a>. Most of the methods in this\n+ * class can also be found in the <em>sun.misc.Service</em> class, but since\n+ * it is undocumented, we cannot rely on its API.\n+ * Service location for a specified interface is done by searching for the\n+ * resource <em>/META-INF/services/</em><i>service.class.name</i>, and\n+ * loading the resource.\n+ * Methods in this class that do not declare exceptions will never throw\n+ * Runtime exceptions: exceptions are silently swallowed and empty array values\n+ * are returned.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n+public class Services {\n+\n+    private static final String PREFIX = \"META-INF/services/\";\n+\n+    /**\n+     * Return an array of Strings of class names of all known service\n+     * implementors of the specified interface or class.\n+     */\n+    public static String[] getImplementors(Class serviceClass) {\n+        return getImplementors(serviceClass, null);\n+    }\n+\n+    /**\n+     * Return an array of Strings of class names of all known service\n+     * implementors of the specified interface or class.\n+     */\n+    public static String[] getImplementors(Class serviceClass,\n+        ClassLoader loader) {\n+        return getImplementors(serviceClass.getName(), loader);\n+    }\n+\n+    /**\n+     * Return an array of Strings of class names of all known service\n+     * implementors of the specified class name(as resolved by the current\n+     * thread's context class loader).\n+     */\n+    public static String[] getImplementors(String serviceName) {\n+        return getImplementors(serviceName, null);\n+    }\n+\n+    /**\n+     * Return an array of Strings of class names of all known service\n+     * implementors of the specified class name, as resolved by the specified\n+     * {@link ClassLoader}.\n+     */\n+    public static String[] getImplementors(String serviceName,\n+        ClassLoader loader) {\n+        if (loader == null)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+\n+        try {\n+            Set resourceList = new TreeSet();\n+            Enumeration resources = (Enumeration) AccessController.doPrivileged(\n+                J2DoPrivHelper.getResourcesAction(loader, PREFIX + serviceName)); \n+            while (resources.hasMoreElements())\n+                addResources((URL) resources.nextElement(), resourceList);\n+\n+            return (String[]) resourceList.toArray(new String[resourceList\n+                .size()]);\n+        } catch (Exception e) {\n+            // silently swallow all exceptions.\n+            return new String[0];\n+        }\n+    }\n+\n+    /**\n+     * Parse the URL resource and add the listed class names to the specified\n+     * Set. Class names are separated by lines. Lines starting with '#' are\n+     * ignored.\n+     */\n+    private static void addResources(URL url, Set set) throws IOException {\n+        InputStream in = null;\n+        BufferedReader reader = null;\n+        URLConnection urlCon = null;\n+\n+        try {\n+            urlCon = url.openConnection();\n+            urlCon.setUseCaches(false);\n+            in = urlCon.getInputStream();\n+            reader = new BufferedReader(new InputStreamReader(in)); \n+            \n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                if (line.trim().startsWith(\"#\")\n+                    || line.trim().length() == 0)\n+                    continue;\n+\n+                StringTokenizer tok = new StringTokenizer(line, \"# \\t\");\n+                if (tok.hasMoreTokens()) {\n+                    String next = tok.nextToken();\n+                    if (next != null) {\n+                        next = next.trim();\n+                        if (next.length() > 0 && !next.startsWith(\"#\"))\n+                            set.add(next);\n+                    }\n+                }\n+            }\n+        } finally {\n+            try { \n+                reader.close();\n+            } catch (IOException ioe) { \n+                // silently consume exception\n+            }\n+            try {\n+                in.close();\n+            } catch (IOException ioe) {\n+                // silently consume exception\n+            }\n+        }\n+    }\n+\n+    public static Class[] getImplementorClasses(Class serviceClass) {\n+        return getImplementorClasses(serviceClass.getName(), null);\n+    }\n+\n+    public static Class[] getImplementorClasses(Class serviceClass,\n+        ClassLoader loader) {\n+        Set invalid = new HashSet();\n+        Class[] classes = getImplementorClasses(serviceClass.getName(), loader);\n+\n+        // filter out any classes that have any classloader issues wrt.\n+        // the specified service class.\n+        for (int i = 0; i < classes.length; i++)\n+            if (!serviceClass.isAssignableFrom(classes[i]))\n+                invalid.add(classes[i]);\n+        if (invalid.size() != 0) {\n+            List list = new ArrayList(Arrays.asList(classes));\n+            list.removeAll(invalid);\n+            return (Class[]) list.toArray(new Class[list.size()]);\n+        } else {\n+            return classes;\n+        }\n+    }\n+\n+    /**\n+     * Return an array of Class objects of all known service implementors of the\n+     * specified class name(as resolved by the current thread's context class\n+     * loader).\n+     */\n+    public static Class[] getImplementorClasses(String serviceName) {\n+        return getImplementorClasses(serviceName, null);\n+    }\n+\n+    public static Class[] getImplementorClasses(String serviceName,\n+        ClassLoader loader) {\n+        try {\n+            return getImplementorClasses(serviceName, loader, true);\n+        } catch (Exception cnfe) {\n+            // this will never happen with skipmissing\n+            return new Class[0];\n+        }\n+    }\n+\n+    /**\n+     * Return an array of Class objects of all known service implementors of the\n+     * specified class name, as resolved by the specified {@link ClassLoader}.\n+     *\n+     * @param skipMissing if true, then ignore classes that cannot be loaded by\n+     * the classloader; otherwise, resolution failures will throw a\n+     * {@link ClassNotFoundException}.\n+     */\n+    public static Class[] getImplementorClasses(String serviceName,\n+        ClassLoader loader, boolean skipMissing) throws ClassNotFoundException {\n+        if (loader == null)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+\n+        String[] names = getImplementors(serviceName, loader);\n+        if (names == null)\n+            return new Class[0];\n+\n+        List classes = new ArrayList(names.length);\n+        for (int i = 0; i < names.length; i++) {\n+            try {\n+                classes.add(Class.forName(names[i], false, loader));\n+            } catch (ClassNotFoundException e) {\n+                if (!skipMissing)\n+                    throw e;\n+            } catch (UnsupportedClassVersionError ecve) {\n+                if (!skipMissing)\n+                    throw ecve;\n+            } catch (LinkageError le) {\n+                if (!skipMissing)\n+                    throw le;\n+            }\n+        }\n+        return (Class[]) classes.toArray(new Class[classes.size()]);\n+    }\n+}"},{"sha":"d7e3d505eb80e51734eb61ed0d22852bc7804275","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleRegex.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+/**\n+ * Allows for simple regex style testing of strings. The wildcard '.'\n+ * is used to represent any single character, while '.*' is used to represent\n+ * any series of 0 or more characters. Examples:<br />\n+ * <code> SimpleRegex re = new SimpleRegex(\"the qu.ck .* dog\", true);\n+ * boolean matches = re.matches(\"The quick fox jumped over the lazy dog\");\n+ * </code>\n+ *\n+ * @nojavadoc\n+ */\n+public class SimpleRegex {\n+\n+    private final String expr;\n+    private final boolean caseInsensitive;\n+\n+    public SimpleRegex(String expr, boolean caseInsensitive) {\n+        this.caseInsensitive = caseInsensitive;\n+\n+        // If we're case insensitive, toLowerCase the expr.  We'll toLowerCase\n+        // each target, too, in the matches call.\n+        if (caseInsensitive)\n+            this.expr = expr.toLowerCase();\n+        else\n+            this.expr = expr;\n+    }\n+\n+    public boolean matches(String target) {\n+        // If we're case insensitive, toLowerCase the target\n+        if (caseInsensitive)\n+            target = target.toLowerCase();\n+\n+        // By default, we are not position independent(\"mobile\"). We only\n+        // become position independent once we hit our first \".*\".\n+        boolean mobile = false;\n+\n+        // Find occurrences of \".*\" in the expression.\n+        int exprPos = 0;\n+        int targetPos = 0;\n+        while (true) {\n+            // Find the next occurrence of \".*\"\n+            int star = expr.indexOf(\".*\", exprPos);\n+\n+            // If we're at a \".*\" now, simply skip it and become position\n+            // independent\n+            if (star == exprPos) {\n+                mobile = true;\n+                exprPos += 2;\n+                continue;\n+            }\n+            // If there are no more \".*\"s, then we're effectively no longer\n+            // position independent(assuming we even were before), since\n+            // we must match the end of the string\n+            else if (star == -1) {\n+                int len = expr.length() - exprPos;\n+\n+                // If we're not mobile, then the remainder of the expr and\n+                // target must be the same length.  If not, then it's not a\n+                // match.  If we're mobile, then the length doesn't have to\n+                // be the same as long as the remainder of the expression\n+                // is equal to the end of the target\n+                if (!mobile && targetPos != target.length() - len)\n+                    return false;\n+\n+                // In anycase, the remaining length of the target must be\n+                // at least as long as the remaining length of the expression.\n+                // (We check now to avoid sending a negative start pos to\n+                // indexOf)\n+                if (target.length() < len)\n+                    return false;\n+\n+                // Match the end of the target to the remainder of the\n+                // expression\n+                int match = indexOf(target, target.length() - len, exprPos,\n+                    len, true);\n+                if (match != -1)\n+                    return true;\n+                return false;\n+            }\n+\n+            // Match the fragment of the expression to the target\n+            int match = indexOf(target, targetPos, exprPos,\n+                star - exprPos, !mobile);\n+            if (match == -1)\n+                return false;\n+            targetPos = match + star - exprPos;\n+            exprPos = star + 2;\n+            mobile = true;\n+        }\n+    }\n+\n+    /**\n+     * Match a section of target to a fragment of the expression.\n+     * If we're only to match the beginning of the target, beginOnly\n+     * will be true, otherwise we can match anymore in the target(starting\n+     * at the targetStart position). A \".\" in the expression matches any\n+     * character.\n+     */\n+    private int indexOf(String target, int targetStart,\n+        int exprStart, int exprLength, boolean beginOnly) {\n+        // Run through the target seeing if there is a match\n+        while (target.length() - targetStart >= exprLength) {\n+            // Assume success.  If there isn't a match we'll break out\n+            boolean found = true;\n+            for (int i = 0; i < exprLength; i++) {\n+                // \".\" in the expr matches any character in the target\n+                if (expr.charAt(exprStart + i) != '.' &&\n+                    expr.charAt(exprStart + i) !=\n+                        target.charAt(targetStart + i)) {\n+                    found = false;\n+                    break;\n+                }\n+            }\n+            if (found)\n+                return targetStart;\n+\n+            // If we're position dependent(beginOnly == true), then don't\n+            // continue the search\n+            if (beginOnly)\n+                return -1;\n+\n+            targetStart++;\n+        }\n+        return -1;\n+    }\n+}"},{"sha":"13e332b8f3b853bb1e2223a5c4983b1f658a34e7","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SimpleResourceBundleProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * {@link ResourceBundleProvider} that uses Java's built-in resource\n+ * bundle lookup methods.\n+ *\n+ * @author Abe White\n+ */\n+class SimpleResourceBundleProvider implements ResourceBundleProvider {\n+\n+    public ResourceBundle findResource(String name, Locale locale,\n+        ClassLoader loader) {\n+        ResourceBundle bundle = null;\n+        if (loader != null) {\n+            try {\n+                bundle = ResourceBundle.getBundle(name, locale, loader);\n+            } catch (Throwable t) {\n+            }\n+        }\n+\n+        // try with the default class loader\n+        if (bundle == null) {\n+            try {\n+                bundle = ResourceBundle.getBundle(name, locale);\n+            } catch (Throwable t) {\n+            }\n+        }\n+\n+        return bundle;\n+    }\n+}"},{"sha":"0df224d13c1e35a38b6899f210de6c6ca1e94a18","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/SizedMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Map;\n+\n+/**\n+ * A {@link Map} type that maintains a maximum size, automatically\n+ * removing entries when the maximum is exceeded.\n+ *\n+ * @author Abe White\n+ */\n+public interface SizedMap extends Map {\n+\n+    /**\n+     * The maximum number of entries, or Integer.MAX_VALUE for no limit.\n+     */\n+    public int getMaxSize();\n+\n+    /**\n+     * The maximum number of entries, or Integer.MAX_VALUE for no limit.\n+     */\n+    public void setMaxSize(int max);\n+\n+    /**\n+     * Whether the map is full.\n+     */\n+    public boolean isFull();\n+\n+    /**\n+     * Overridable callback for when an overflow entry is automatically removed.\n+     */\n+    public void overflowRemoved(Object key, Object value);\n+}"},{"sha":"43fe7bc5d57c172194f87feb9662a2043ecc3a65","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StreamResourceBundleProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.AccessController;\n+import java.util.Locale;\n+import java.util.PropertyResourceBundle;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * {@link ResourceBundleProvider} that uses the\n+ * {@link ClassLoader#getResourceAsStream} method to load resources.\n+ * Created for use under WSAD.\n+ *\n+ * @author Stephen Kim\n+ */\n+class StreamResourceBundleProvider implements ResourceBundleProvider {\n+\n+    public ResourceBundle findResource(String name, Locale locale,\n+        ClassLoader loader) {\n+        String rsrc = name.replace('.', '/') + \".properties\";\n+        if (loader == null)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+\n+        InputStream in = loader.getResourceAsStream(rsrc);\n+        if (in != null) {\n+            try {\n+                return new PropertyResourceBundle(in);\n+            } catch (Exception e) {\n+            } finally {\n+                try {\n+                    in.close();\n+                } catch (IOException ioe) {\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}"},{"sha":"862f484202e8e20fde4dddcadf9e39e4e14016df","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/StringDistance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * Utilities for calculating string distance.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n+public class StringDistance {\n+\n+    /**\n+     * Returns the candidate string with the closest Levenshtein distance\n+     * to the given string.\n+     *\n+     * @see #getClosestLevenshteinDistance(String,Collection,int)\n+     */\n+    public static String getClosestLevenshteinDistance(String str,\n+        String[] candidates) {\n+        if (candidates == null)\n+            return null;\n+        return getClosestLevenshteinDistance(str, Arrays.asList(candidates));\n+    }\n+\n+    /**\n+     * Returns the candidate string with the closest Levenshtein distance\n+     * to the given string.\n+     *\n+     * @see #getClosestLevenshteinDistance(String,Collection,int)\n+     */\n+    public static String getClosestLevenshteinDistance(String str,\n+        Collection candidates) {\n+        return getClosestLevenshteinDistance(str, candidates,\n+            Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Returns the candidate string with the closest Levenshtein distance\n+     * to the given string.\n+     *\n+     * @see #getClosestLevenshteinDistance(String,Collection,int)\n+     */\n+    public static String getClosestLevenshteinDistance(String str,\n+        String[] candidates, int threshold) {\n+        if (candidates == null)\n+            return null;\n+        return getClosestLevenshteinDistance(str, Arrays.asList(candidates),\n+            threshold);\n+    }\n+\n+    /**\n+     * Returns the candidate string with the closest Levenshtein distance\n+     * to the given string and using the threshold as the specified\n+     * percentage of the length of the candidate string(0.0f-1.0f).\n+     *\n+     * @see #getClosestLevenshteinDistance(String,Collection,int)\n+     */\n+    public static String getClosestLevenshteinDistance(String str,\n+        String[] candidates, float thresholdPercentage) {\n+        if (candidates == null)\n+            return null;\n+\n+        return getClosestLevenshteinDistance(str, Arrays.asList(candidates),\n+            thresholdPercentage);\n+    }\n+\n+    /**\n+     * Returns the candidate string with the closest Levenshtein distance\n+     * to the given string and using the threshold as the specified\n+     * percentage of the length of the candidate string(0.0f-1.0f).\n+     *\n+     * @see #getClosestLevenshteinDistance(String,Collection,int)\n+     */\n+    public static String getClosestLevenshteinDistance(String str,\n+        Collection candidates, float thresholdPercentage) {\n+        if (str == null)\n+            return null;\n+\n+        thresholdPercentage = Math.min(thresholdPercentage, 1.0f);\n+        thresholdPercentage = Math.max(thresholdPercentage, 0.0f);\n+\n+        return getClosestLevenshteinDistance(str, candidates,\n+            (int) (str.length() * thresholdPercentage));\n+    }\n+\n+    /**\n+     * Returns the candidate string with the closest Levenshtein distance\n+     * to the given string.\n+     *\n+     * @param str the string to check\n+     * @param candidates the list of strings to test against\n+     * @param threshold the threshold distance a candidate must meet\n+     * @see #getLevenshteinDistance\n+     */\n+    public static String getClosestLevenshteinDistance(String str,\n+        Collection candidates, int threshold) {\n+        if (candidates == null || candidates.isEmpty())\n+            return null;\n+\n+        String minString = null;\n+        int minValue = Integer.MAX_VALUE;\n+\n+        for (Iterator i = candidates.iterator(); i.hasNext();) {\n+            String candidate = (String) i.next();\n+            int distance = getLevenshteinDistance(str, candidate);\n+            if (distance < minValue) {\n+                minValue = distance;\n+                minString = candidate;\n+            }\n+        }\n+\n+        // return the lowest close string only if we surpass the threshhold\n+        if (minValue <= threshold)\n+            return minString;\n+        else\n+            return null;\n+    }\n+\n+    /**\n+     * Returns the Levenshtein distance between the two strings.\n+     * The distance is the minimum number of changes that need to be\n+     * applied to the first string in order to get to the second\n+     * string. For details of the algorithm, see\n+     * <a href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">\n+     * http://en.wikipedia.org/wiki/Levenshtein_distance</a>.\n+     */\n+    public static int getLevenshteinDistance(String s, String t) {\n+        int n = s.length();\n+        int m = t.length();\n+\n+        if (n == 0)\n+            return m;\n+\n+        if (m == 0)\n+            return n;\n+\n+        int[][] matrix = new int[n + 1][m + 1];\n+\n+        for (int i = 0; i <= n; i++)\n+            matrix[i][0] = i;\n+\n+        for (int j = 0; j <= m; j++)\n+            matrix[0][j] = j;\n+\n+        for (int i = 1; i <= n; i++) {\n+            int si = s.charAt(i - 1);\n+\n+            for (int j = 1; j <= m; j++) {\n+                int tj = t.charAt(j - 1);\n+\n+                int cost;\n+\n+                if (si == tj)\n+                    cost = 0;\n+                else\n+                    cost = 1;\n+\n+                matrix[i][j] = min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1,\n+                    matrix[i - 1][j - 1] + cost);\n+            }\n+        }\n+\n+        return matrix[n][m];\n+    }\n+\n+    private static int min(int a, int b, int c) {\n+        int mi = a;\n+\n+        if (b < mi)\n+            mi = b;\n+\n+        if (c < mi)\n+            mi = c;\n+\n+        return mi;\n+    }\n+}\n+"},{"sha":"b8cefc0befad8b0d74b911ba1bd8ec9a67d4267a","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TemporaryClassLoader.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.AccessController;\n+\n+import serp.bytecode.lowlevel.ConstantPoolTable;\n+\n+/**\n+ * ClassLoader implementation that allows classes to be temporarily\n+ * loaded and then thrown away. Useful for the enhancer to be able\n+ * to run against a class without first loading(and thus polluting)\n+ * the parent ClassLoader.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n+public class TemporaryClassLoader extends ClassLoader {\n+\n+    public TemporaryClassLoader(ClassLoader parent) {\n+        super(parent);\n+    }\n+\n+    public Class loadClass(String name) throws ClassNotFoundException {\n+        return loadClass(name, false);\n+    }\n+\n+    protected Class loadClass(String name, boolean resolve)\n+        throws ClassNotFoundException {\n+        // see if we've already loaded it\n+        Class c = findLoadedClass(name);\n+        if (c != null)\n+            return c;\n+\n+        // bug #283. defer to system if the name is a protected name.\n+        // \"sun.\" is required for JDK 1.4, which has an access check for\n+        // sun.reflect.GeneratedSerializationConstructorAccessor1\n+        if (name.startsWith(\"java.\") || name.startsWith(\"javax.\")\n+            || name.startsWith(\"sun.\"))\n+            return Class.forName(name, resolve, getClass().getClassLoader());\n+\n+        String resourceName = name.replace('.', '/') + \".class\";\n+        InputStream resource = getResourceAsStream(resourceName);\n+        if (resource == null)\n+            throw new ClassNotFoundException(name);\n+\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        byte[] b = new byte[1024];\n+        try {\n+            for (int n = 0; (n = resource.read(b, 0, b.length)) != -1;\n+                bout.write(b, 0, n))\n+                ;\n+            byte[] classBytes = bout.toByteArray();\n+            // To avoid classloader issues with the JVM (Sun and IBM), we\n+            // will not load Enums via the TemporaryClassLoader either.\n+            // Reference JIRA Issue OPENJPA-646 for more information.\n+            if (isAnnotation(classBytes) || isEnum(classBytes))\n+                return Class.forName(name, resolve, getClass().\n+                    getClassLoader());\n+\n+            try {\n+                return defineClass(name, classBytes, 0, classBytes.length);\n+            } catch (SecurityException e) {\n+                // possible prohibited package: defer to the parent\n+                return super.loadClass(name, resolve);\n+            }\n+        } catch (IOException ioe) {\n+            // defer to the parent\n+            return super.loadClass(name, resolve);\n+        }\n+    }\n+\n+    /**\n+     * Fast-parse the given class bytecode to determine if it is an\n+     * annotation class.\n+     */\n+    private static boolean isAnnotation(byte[] b) {\n+        if (JavaVersions.VERSION < 5)\n+            return false;\n+        int idx = ConstantPoolTable.getEndIndex(b);\n+        int access = ConstantPoolTable.readUnsignedShort(b, idx);\n+        return (access & 0x2000) != 0; // access constant for annotation type\n+    }\n+\n+    /**\n+     * Fast-parse the given class bytecode to determine if it is an\n+     * enum class.\n+     */\n+    private static boolean isEnum(byte[] b) {\n+        if (JavaVersions.VERSION < 5)\n+            return false;\n+        int idx = ConstantPoolTable.getEndIndex(b);\n+        int access = ConstantPoolTable.readUnsignedShort(b, idx);\n+        return (access & 0x4000) != 0; // access constant for enum type\n+    }\n+}"},{"sha":"ddff2af56ab8f9a4e443d3ee300faffaa55f5dde","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TimestampHelper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.sql.Timestamp;\r\n+\r\n+/**\r\n+ * Helper base class attempts to return java.sql.Timestamp object with\r\n+ * nanosecond precision. \r\n+ * \r\n+ * @author Albert Lee\r\n+ */\r\n+public class TimestampHelper {\r\n+\r\n+    // number of millisecond, mircoseconds and nanoseconds in one second.\r\n+    protected static final long MilliMuliplier = 1000L;\r\n+    protected static final long MicroMuliplier = MilliMuliplier * 1000L;\r\n+    protected static final long NanoMuliplier = MicroMuliplier * 1000L;\r\n+\r\n+    // number of seconds passed 1970/1/1 00:00:00 GMT.\r\n+    private static long sec0;\r\n+    // fraction of seconds passed 1970/1/1 00:00:00 GMT, offset by\r\n+    // the base System.nanoTime (nano0), in nanosecond unit.\r\n+    private static long nano0;\r\n+\r\n+    static {\r\n+        // initialize base time in second and fraction of second (ns).\r\n+        long curTime = System.currentTimeMillis();\r\n+        sec0 = curTime / MilliMuliplier;\r\n+        nano0 = (curTime % MilliMuliplier) * MicroMuliplier - System.nanoTime();\r\n+    }\r\n+\r\n+    /*\r\n+     * Return a java.sql.Timestamp object of current time.\r\n+     */\r\n+    public static Timestamp getNanoPrecisionTimestamp() {\r\n+        long nano_delta = nano0 + System.nanoTime();\r\n+        long sec1 = sec0 + (nano_delta / NanoMuliplier);\r\n+        long nano1 = nano_delta % NanoMuliplier;\r\n+\r\n+        Timestamp rtnTs = new Timestamp(sec1 * MilliMuliplier);\r\n+        rtnTs.setNanos((int) nano1);\r\n+        return rtnTs;\r\n+    }\r\n+}\r"},{"sha":"13e90d96eef724dba366976e0faeb106b7ab13a4","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","status":"added","additions":332,"deletions":0,"changes":332,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/TypedProperties.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Properties;\n+\n+/**\n+ * A specialization of the {@link Properties} map type with added\n+ * convenience methods to retrieve and set options as primitive values.\n+ * The internal representation of all data is kept in string form.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class TypedProperties extends Properties {\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public TypedProperties() {\n+        super();\n+    }\n+\n+    /**\n+     * Construct the properties instance with the given set of defaults.\n+     *\n+     * @see Properties#Properties(Properties)\n+     */\n+    public TypedProperties(Properties defaults) {\n+        super(defaults);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a boolean, or false if\n+     * it does not exist and has no set default.\n+     */\n+    public boolean getBooleanProperty(String key) {\n+        return getBooleanProperty(key, false);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a boolean, or the given\n+     * default if it does not exist.\n+     */\n+    public boolean getBooleanProperty(String key, boolean def) {\n+        String val = getProperty(key);\n+        if (val == null)\n+            return def;\n+        return \"t\".equalsIgnoreCase(val) || \"true\".equalsIgnoreCase(val);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a float, or 0 if\n+     * it does not exist and has no set default.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public float getFloatProperty(String key) {\n+        return getFloatProperty(key, 0F);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a float, or the given\n+     * default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public float getFloatProperty(String key, float def) {\n+        String val = getProperty(key);\n+        return (val == null) ? def : Float.parseFloat(val);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a double, or 0 if\n+     * it does not exist and has no set default.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public double getDoubleProperty(String key) {\n+        return getDoubleProperty(key, 0D);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a double, or the given\n+     * default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public double getDoubleProperty(String key, double def) {\n+        String val = getProperty(key);\n+        return (val == null) ? def : Double.parseDouble(val);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a long, or 0 if\n+     * it does not exist and has no set default.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public long getLongProperty(String key) {\n+        return getLongProperty(key, 0L);\n+    }\n+\n+    /**\n+     * Return the property under the given key as a double, or the given\n+     * default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public long getLongProperty(String key, long def) {\n+        String val = getProperty(key);\n+        return (val == null) ? def : Long.parseLong(val);\n+    }\n+\n+    /**\n+     * Return the property under the given key as an int, or 0 if\n+     * it does not exist and has no set default.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public int getIntProperty(String key) {\n+        return getIntProperty(key, 0);\n+    }\n+\n+    /**\n+     * Return the property under the given key as an int, or the given\n+     * default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public int getIntProperty(String key, int def) {\n+        String val = getProperty(key);\n+        return (val == null) ? def : Integer.parseInt(val);\n+    }\n+\n+    /**\n+     * Overrides {@link Properties#setProperty(String,String)} to remove\n+     * the key if the given value is <code>null</code>.\n+     *\n+     * @see Properties#setProperty(String,String)\n+     */\n+    public Object setProperty(String key, String val) {\n+        if (val == null)\n+            return remove(key);\n+        return super.setProperty(key, val);\n+    }\n+\n+    /**\n+     * Set the given key to a string version of the given value.\n+     *\n+     * @see Properties#setProperty(String,String)\n+     */\n+    public void setProperty(String key, boolean val) {\n+        setProperty(key, String.valueOf(val));\n+    }\n+\n+    /**\n+     * Set the given key to a string version of the given value.\n+     *\n+     * @see Properties#setProperty(String,String)\n+     */\n+    public void setProperty(String key, double val) {\n+        setProperty(key, String.valueOf(val));\n+    }\n+\n+    /**\n+     * Set the given key to a string version of the given value.\n+     *\n+     * @see Properties#setProperty(String,String)\n+     */\n+    public void setProperty(String key, float val) {\n+        setProperty(key, String.valueOf(val));\n+    }\n+\n+    /**\n+     * Set the given key to a string version of the given value.\n+     *\n+     * @see Properties#setProperty(String,String)\n+     */\n+    public void setProperty(String key, int val) {\n+        setProperty(key, String.valueOf(val));\n+    }\n+\n+    /**\n+     * Set the given key to a string version of the given value.\n+     *\n+     * @see Properties#setProperty(String,String)\n+     */\n+    public void setProperty(String key, long val) {\n+        setProperty(key, String.valueOf(val));\n+    }\n+\n+    /**\n+     * Remove the given property.\n+     */\n+    public String removeProperty(String key) {\n+        Object val = remove(key);\n+        return (val == null) ? null : val.toString();\n+    }\n+\n+    /**\n+     * Remove the given property, or return the given default if it does\n+     * not exist.\n+     */\n+    public String removeProperty(String key, String def) {\n+        if (!containsKey(key))\n+            return def;\n+        return removeProperty(key);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a boolean.\n+     */\n+    public boolean removeBooleanProperty(String key) {\n+        String val = removeProperty(key);\n+        return \"t\".equalsIgnoreCase(val) || \"true\".equalsIgnoreCase(val);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a boolean, or return the\n+     * given default if it does not exist.\n+     */\n+    public boolean removeBooleanProperty(String key, boolean def) {\n+        if (!containsKey(key))\n+            return def;\n+        return removeBooleanProperty(key);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a double.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public double removeDoubleProperty(String key) {\n+        String val = removeProperty(key);\n+        return (val == null) ? 0D : Double.parseDouble(val);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a double, or return the\n+     * given default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public double removeDoubleProperty(String key, double def) {\n+        if (!containsKey(key))\n+            return def;\n+        return removeDoubleProperty(key);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a float.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public float removeFloatProperty(String key) {\n+        String val = removeProperty(key);\n+        return (val == null) ? 0F : Float.parseFloat(val);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a float, or return the\n+     * given default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public float removeFloatProperty(String key, float def) {\n+        if (!containsKey(key))\n+            return def;\n+        return removeFloatProperty(key);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a int.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public int removeIntProperty(String key) {\n+        String val = removeProperty(key);\n+        return (val == null) ? 0 : Integer.parseInt(val);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a int, or return the\n+     * given default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public int removeIntProperty(String key, int def) {\n+        if (!containsKey(key))\n+            return def;\n+        return removeIntProperty(key);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a long.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public long removeLongProperty(String key) {\n+        String val = removeProperty(key);\n+        return (val == null) ? 0L : Long.parseLong(val);\n+    }\n+\n+    /**\n+     * Remove the property under the given key as a long, or return the\n+     * given default if it does not exist.\n+     *\n+     * @throws NumberFormatException on parse error\n+     */\n+    public long removeLongProperty(String key, long def) {\n+        if (!containsKey(key))\n+            return def;\n+        return removeLongProperty(key);\n+    }\n+}"},{"sha":"b34191b5e0db4b4d62d754fa85049fce2e6754ff","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","status":"added","additions":275,"deletions":0,"changes":275,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/UUIDGenerator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,275 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.security.SecureRandom;\n+import java.util.Random;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+\n+/**\n+ * UUID value generator.  Type 1 generator is based on the time-based generator  \n+ * in the Apache Commons Id project:  http://jakarta.apache.org/commons/sandbox\n+ * /id/uuid.html  The type 4 generator uses the standard Java UUID generator.\n+ *\n+ * The type 1 code has been vastly simplified and modified to replace the \n+ * ethernet address of the host machine with the IP, since we do not want to \n+ * require native libs and Java cannot access the MAC address directly.\n+ *\n+ * In spirit, implements the IETF UUID draft specification, found here:<br />\n+ * http://www1.ics.uci.edu/~ejw/authoring/uuid-guid/draft-leach-uuids-guids-01\n+ * .txt\n+ *\n+ * @author Abe White, Kevin Sutter\n+ * @nojavadoc\n+ * @since 0.3.3\n+ */\n+public class UUIDGenerator {\n+\n+    // supported UUID types\n+    public static final int TYPE1 = 1;\n+    public static final int TYPE4 = 4;\n+\n+    // indexes within the uuid array for certain boundaries\n+    private static final byte IDX_TIME_HI = 6;\n+    private static final byte IDX_TYPE = 6; // multiplexed\n+    private static final byte IDX_TIME_MID = 4;\n+    private static final byte IDX_TIME_LO = 0;\n+    private static final byte IDX_TIME_SEQ = 8;\n+    private static final byte IDX_VARIATION = 8; // multiplexed\n+\n+    // indexes and lengths within the timestamp for certain boundaries\n+    private static final byte TS_TIME_LO_IDX = 4;\n+    private static final byte TS_TIME_LO_LEN = 4;\n+    private static final byte TS_TIME_MID_IDX = 2;\n+    private static final byte TS_TIME_MID_LEN = 2;\n+    private static final byte TS_TIME_HI_IDX = 0;\n+    private static final byte TS_TIME_HI_LEN = 2;\n+\n+    // offset to move from 1/1/1970, which is 0-time for Java, to gregorian\n+    // 0-time 10/15/1582, and multiplier to go from 100nsec to msec units\n+    private static final long GREG_OFFSET = 0xB1D069B5400L;\n+    private static final long MILLI_MULT = 10000L;\n+\n+    // type of UUID -- time based\n+    private final static byte TYPE_TIME_BASED = 0x10;\n+\n+    // random number generator used to reduce conflicts with other JVMs, and\n+    // hasher for strings.  \n+    private static Random RANDOM;\n+\n+    // 4-byte IP address + 2 random bytes to compensate for the fact that\n+    // the MAC address is usually 6 bytes\n+    private static byte[] IP;\n+\n+    // counter is initialized to 0 and is incremented for each uuid request\n+    // within the same timestamp window.\n+    private static int _counter;\n+\n+    // current timestamp (used to detect multiple uuid requests within same\n+    // timestamp)\n+    private static long _currentMillis;\n+\n+    // last used millis time, and a semi-random sequence that gets reset\n+    // when it overflows\n+    private static long _lastMillis = 0L;\n+    private static final int MAX_14BIT = 0x3FFF;\n+    private static short _seq = 0;\n+        \n+    /*\n+     * Initializer for type 1 UUIDs.  Creates random generator and genenerates\n+     * the node portion of the UUID using the IP address.\n+     */\n+    private static synchronized void initializeForType1()\n+    {\n+        if (RANDOM != null)\n+            return;\n+        // note that secure random is very slow the first time\n+        // it is used; consider switching to a standard random\n+        RANDOM = new SecureRandom();\n+        _seq = (short) RANDOM.nextInt(MAX_14BIT);\n+        \n+        byte[] ip = null;\n+        try {\n+            ip = InetAddress.getLocalHost().getAddress();\n+        } catch (IOException ioe) {\n+            throw new NestableRuntimeException(ioe);\n+        }\n+\n+        IP = new byte[6];\n+        RANDOM.nextBytes(IP);\n+        System.arraycopy(ip, 0, IP, 2, ip.length);        \n+    }\n+\n+    /**\n+     * Return a unique UUID value.\n+     */\n+    public static byte[] next(int type) {\n+        if (type == TYPE4) {\n+            return createType4();\n+        }\n+        return createType1();\n+    }\n+      \n+    /*\n+     * Creates a type 1 UUID \n+     */\n+    public static byte[] createType1() {\n+        if (RANDOM == null)\n+            initializeForType1();\n+        // set ip addr\n+        byte[] uuid = new byte[16];\n+        System.arraycopy(IP, 0, uuid, 10, IP.length);\n+\n+        // Set time info.  Have to do this processing within a synchronized\n+        // block because of the statics...\n+        long now = 0;\n+        synchronized (UUIDGenerator.class) {\n+            // Get the time to use for this uuid.  This method has the side\n+            // effect of modifying the clock sequence, as well.\n+            now = getTime();\n+\n+            // Insert the resulting clock sequence into the uuid\n+            uuid[IDX_TIME_SEQ] = (byte) ((_seq & 0x3F00) >>> 8);\n+            uuid[IDX_VARIATION] |= 0x80;\n+            uuid[IDX_TIME_SEQ+1] = (byte) (_seq & 0xFF);\n+\n+        }\n+\n+        // have to break up time because bytes are spread through uuid\n+        byte[] timeBytes = Bytes.toBytes(now);\n+\n+        // Copy time low\n+        System.arraycopy(timeBytes, TS_TIME_LO_IDX, uuid, IDX_TIME_LO,\n+                TS_TIME_LO_LEN);\n+        // Copy time mid\n+        System.arraycopy(timeBytes, TS_TIME_MID_IDX, uuid, IDX_TIME_MID,\n+                TS_TIME_MID_LEN);\n+        // Copy time hi\n+        System.arraycopy(timeBytes, TS_TIME_HI_IDX, uuid, IDX_TIME_HI,\n+                TS_TIME_HI_LEN);\n+        //Set version (time-based)\n+        uuid[IDX_TYPE] |= TYPE_TIME_BASED; // 0001 0000\n+\n+        return uuid;\n+    }\n+\n+    /*\n+     * Creates a type 4 UUID\n+     */\n+    private static byte[] createType4() {\n+        UUID type4 = UUID.randomUUID();\n+        byte[] uuid = new byte[16];\n+        longToBytes(type4.getMostSignificantBits(), uuid, 0);\n+        longToBytes(type4.getLeastSignificantBits(), uuid, 8);\n+        return uuid;\n+    }\n+    \n+    /*\n+     * Converts a long to byte values, setting them in a byte array\n+     * at a given starting position.\n+     */\n+    private static void longToBytes(long longVal, byte[] buf, int sPos) {\n+        sPos += 7;\n+        for(int i = 0; i < 8; i++)         \n+            buf[sPos-i] = (byte)(longVal >>> (i * 8));\n+    }\n+\n+    /**\n+     * Return the next unique uuid value as a 16-character string.\n+     */\n+    public static String nextString(int type) {\n+        byte[] bytes = next(type);\n+        try {\n+            return new String(bytes, \"ISO-8859-1\");\n+        } catch (Exception e) {\n+            return new String(bytes);\n+        }\n+    }\n+\n+    /**\n+     * Return the next unique uuid value as a 32-character hex string.\n+     */\n+    public static String nextHex(int type) {\n+        return Base16Encoder.encode(next(type));\n+    }\n+\n+    /**\n+     * Get the timestamp to be used for this uuid.  Must be called from\n+     * a synchronized block.\n+     *\n+     * @return long timestamp\n+     */\n+    // package-visibility for testing\n+    static long getTime() {\n+        if (RANDOM == null)\n+            initializeForType1();\n+        long newTime = getUUIDTime();\n+        if (newTime <= _lastMillis) {\n+            incrementSequence();\n+            newTime = getUUIDTime();\n+        }\n+        _lastMillis = newTime;\n+        return newTime;\n+    }\n+\n+    /**\n+     * Gets the appropriately modified timestamep for the UUID.  Must be called\n+     * from a synchronized block.\n+     *\n+     * @return long timestamp in 100ns intervals since the Gregorian change\n+     * offset\n+     */\n+    private static long getUUIDTime() {\n+        if (_currentMillis != System.currentTimeMillis()) {\n+            _currentMillis = System.currentTimeMillis();\n+            _counter = 0;  // reset counter\n+        }\n+\n+        // check to see if we have created too many uuid's for this timestamp\n+        if (_counter + 1 >= MILLI_MULT) {\n+            // Original algorithm threw exception.  Seemed like overkill.\n+            // Let's just increment the timestamp instead and start over...\n+            _currentMillis++;\n+            _counter = 0;\n+        }\n+\n+        // calculate time as current millis plus offset times 100 ns ticks\n+        long currentTime = (_currentMillis + GREG_OFFSET) * MILLI_MULT;\n+\n+        // return the uuid time plus the artificial tick counter incremented\n+        return currentTime + _counter++;\n+    }\n+\n+    /**\n+     * Increments the clock sequence for this uuid.  Must be called from a\n+     * synchronized block.\n+     */\n+    private static void incrementSequence() {\n+        // increment, but if it's greater than its 14-bits, reset it\n+        if (++_seq > MAX_14BIT) {\n+            _seq = (short) RANDOM.nextInt(MAX_14BIT);  // semi-random\n+        }\n+    }\n+\n+\n+}"},{"sha":"dfedda2aba36cc8156b79c80cef7a2ec08c664e2","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/ZipResourceBundleProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.AccessController;\n+import java.util.Locale;\n+import java.util.PropertyResourceBundle;\n+import java.util.ResourceBundle;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+/**\n+ * {@link ResourceBundleProvider} that expects the\n+ * {@link ClassLoader#getResourceAsStream} method to return a zipped input\n+ * stream. Created for use under Weblogic RARs.\n+ *\n+ * @author Patrick Linskey\n+ */\n+class ZipResourceBundleProvider implements ResourceBundleProvider {\n+\n+    public ResourceBundle findResource(String name, Locale locale,\n+        ClassLoader loader) {\n+        String rsrc = name.replace('.', '/') + \".properties\";\n+        if (loader == null)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+\n+        InputStream in = loader.getResourceAsStream(rsrc);\n+        if (in == null)\n+            return null;\n+\n+        ZipInputStream zip = new ZipInputStream(in);\n+        try {\n+            ZipEntry ze;\n+            while (true) {\n+                ze = zip.getNextEntry();\n+                if (ze == null)\n+                    break;\n+\n+                if (rsrc.equals(ze.getName()))\n+                    return new PropertyResourceBundle(zip);\n+\n+                zip.closeEntry();\n+            }\n+        } catch (Exception e) {\n+        } finally {\n+            try {\n+                zip.close();\n+            } catch (IOException ioe) {\n+            }\n+        }\n+        return null;\n+    }\n+}"},{"sha":"b28b1763d6e01bb2721483a25a474926ba15954f","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/AbstractConcurrentEventManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util.concurrent;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import org.apache.openjpa.lib.util.EventManager;\n+\n+/**\n+ * Base event manager that handles adding/removing listeners\n+ * and firing events. Meant for high concurrency. This class is\n+ * reentrant-safe; listeners can be added and removed by other listeners when \n+ * they receive events. The changes will not be visible until the event fire\n+ * that initiated the recursive sequence of calls completes, however.\n+ *\n+ * @author Abe White\n+ */\n+public abstract class AbstractConcurrentEventManager\n+    implements EventManager, Serializable {\n+\n+    private static final Exception[] EMPTY_EXCEPTIONS = new Exception[0];\n+\n+    protected final Collection _listeners;\n+    private boolean _failFast = false;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public AbstractConcurrentEventManager() {\n+        _listeners = newListenerCollection();\n+    }\n+\n+    /**\n+     * Whether to fail after the first exception thrown by any listener.\n+     */\n+    public boolean isFailFast() {\n+        return _failFast;\n+    }\n+\n+    /**\n+     * Whether to fail after the first exception thrown by any listener.\n+     */\n+    public void setFailFast(boolean failFast) {\n+        _failFast = failFast;\n+    }\n+\n+    /**\n+     * Register an event listener.\n+     */\n+    public void addListener(Object listener) {\n+        if (listener != null)\n+            _listeners.add(listener);\n+    }\n+\n+    /**\n+     * Remove an event listener.\n+     */\n+    public boolean removeListener(Object listener) {\n+        return _listeners.remove(listener);\n+    }\n+\n+    /**\n+     * Return whether the given instance is in the list of listeners.\n+     */\n+    public boolean hasListener(Object listener) {\n+        return _listeners.contains(listener);\n+    }\n+\n+    /**\n+     * Return true if there are any registered listeners.\n+     */\n+    public boolean hasListeners() {\n+        return !_listeners.isEmpty();\n+    }\n+\n+    /**\n+     * Return a read-only list of listeners.\n+     */\n+    public Collection getListeners() {\n+        return Collections.unmodifiableCollection(_listeners);\n+    }\n+\n+    /**\n+     * Fire the given event to all listeners.\n+     */\n+    public Exception[] fireEvent(Object event) {\n+        if (_listeners.isEmpty())\n+            return EMPTY_EXCEPTIONS;\n+\n+        List exceptions = null;\n+        for (Iterator itr = _listeners.iterator(); itr.hasNext();) {\n+            try {\n+                fireEvent(event, itr.next());\n+            } catch (Exception e) {\n+                if (_failFast)\n+                    return new Exception[] { e };\n+                if (exceptions == null)\n+                    exceptions = new LinkedList();\n+                exceptions.add(e);\n+            }\n+        }\n+\n+        if (exceptions == null)\n+            return EMPTY_EXCEPTIONS;\n+        return (Exception[]) exceptions.toArray\n+            (new Exception[exceptions.size()]);\n+    }\n+\n+    /**\n+     * Implement this method to fire the given event to the given listener.\n+     */\n+    protected abstract void fireEvent(Object event, Object listener)\n+        throws Exception;\n+\n+    /**\n+     * Return a new concurrent container for listeners. Uses a \n+     * {@link CopyOnWriteArrayList} by default.\n+     */\n+    protected Collection newListenerCollection() {\n+        return new CopyOnWriteArrayList();\n+    }\n+}"},{"sha":"e66adfbbca65e8f034a49e9d2e732f09d89ee13e","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","status":"added","additions":941,"deletions":0,"changes":941,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentHashMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,941 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util.concurrent;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractCollection;\n+import java.util.AbstractMap;\n+import java.util.AbstractSet;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Random;\n+import java.util.Set;\n+\n+import org.apache.openjpa.lib.util.SizedMap;\n+\n+/**\n+ * This class implements a HashMap which has limited synchronization.\n+ * In particular mutators are generally synchronized while accessors\n+ * are generally not. Additionally the Iterators returned by this\n+ * class are not \"fail-fast\", but instead try to continue to iterate\n+ * over the data structure after changes have been made.\n+ * The synchronization semantics are built right in to the\n+ * implementation rather than using a delegating wrapper like the\n+ * other collection classes do because it wasn't clear to me that the\n+ * how the two should be seperated or that it would be useful to do\n+ * so. This can probably be a topic for further debate in the future.\n+ * This class is based heavily on the HashMap class in the Java\n+ * collections package.\n+ */\n+public class ConcurrentHashMap extends AbstractMap\n+    implements ConcurrentMap, SizedMap, Cloneable, Serializable {\n+\n+    /**\n+     * The default initial capacity - MUST be a power of two.\n+     */\n+    private static final int DEFAULT_INITIAL_CAPACITY = 16;\n+\n+    /**\n+     * The maximum capacity, used if a higher value is implicitly specified\n+     * by either of the constructors with arguments.\n+     * MUST be a power of two <= 1<<30.\n+     */\n+    private static final int MAXIMUM_CAPACITY = 1 << 30;\n+\n+    /**\n+     * The load fast used when none specified in constructor.\n+     */\n+    private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n+\n+    /**\n+     * Cache of random numbers used in \"random\" methods, since generating them\n+     * is expensive. We hope each map changes enough between cycling through\n+     * this list that the overall effect is random enough.\n+     */\n+    static final double[] RANDOMS = new double[1000];\n+\n+    static {\n+        Random random = new Random();\n+        for (int i = 0; i < RANDOMS.length; i++)\n+            RANDOMS[i] = random.nextDouble();\n+    }\n+\n+    /**\n+     * The table, resized as necessary. Length MUST Always be a power of two.\n+     */\n+    private transient Entry[] table;\n+\n+    /**\n+     * The number of key-value mappings contained in this identity hash map.\n+     */\n+    private transient int size;\n+\n+    /**\n+     * The next size value at which to resize(capacity * load factor).\n+     *\n+     * @serial\n+     */\n+    private int threshold;\n+\n+    /**\n+     * The load factor for the hash table.\n+     *\n+     * @serial\n+     */\n+    private final float loadFactor;\n+\n+    /**\n+     * Spread \"random\" removes and iteration.\n+     */\n+    private int randomEntry = 0;\n+\n+    /**\n+     * Maximum entries.\n+     */\n+    private int maxSize = Integer.MAX_VALUE;\n+\n+    /**\n+     * Constructs an empty <tt>ConcurrentHashMap</tt> with the specified initial\n+     * capacity and load factor.\n+     *\n+     * @param initialCapacity The initial capacity.\n+     * @param loadFactor The load factor.\n+     * @throws IllegalArgumentException if the initial capacity is negative\n+     * or the load factor is nonpositive.\n+     */\n+    public ConcurrentHashMap(int initialCapacity, float loadFactor) {\n+        if (initialCapacity < 0) {\n+            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n+                initialCapacity);\n+        }\n+        if (initialCapacity > MAXIMUM_CAPACITY)\n+            initialCapacity = MAXIMUM_CAPACITY;\n+        if (loadFactor <= 0 || loadFactor > 1) {\n+            throw new IllegalArgumentException(\"Illegal load factor: \" +\n+                loadFactor);\n+        }\n+\n+        // Find a power of 2 >= initialCapacity\n+        int capacity = 1;\n+        while (capacity < initialCapacity) capacity <<= 1;\n+\n+        this.loadFactor = loadFactor;\n+        threshold = (int) (capacity * loadFactor);\n+        table = new Entry[capacity];\n+    }\n+\n+    /**\n+     * Constructs an empty <tt>ConcurrentHashMap</tt> with the specified initial\n+     * capacity and the default load factor(0.75).\n+     *\n+     * @param initialCapacity the initial capacity.\n+     * @throws IllegalArgumentException if the initial capacity is negative.\n+     */\n+    public ConcurrentHashMap(int initialCapacity) {\n+        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n+    }\n+\n+    /**\n+     * Constructs an empty <tt>ConcurrentHashMap</tt> with the default initial\n+     * capacity(16) and the default load factor(0.75).\n+     */\n+    public ConcurrentHashMap() {\n+        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n+    }\n+\n+    /**\n+     * Constructs a new <tt>ConcurrentHashMap</tt> with the same mappings as the\n+     * specified <tt>Map</tt>. The <tt>ConcurrentHashMap</tt> is created with\n+     * default load factor(0.75) and an initial capacity sufficient to\n+     * hold the mappings in the specified <tt>Map</tt>.\n+     *\n+     * @param m the map whose mappings are to be placed in this map.\n+     * @throws NullPointerException if the specified map is null.\n+     */\n+    public ConcurrentHashMap(Map m) {\n+        this(Math.max((int) (m.size() / DEFAULT_LOAD_FACTOR) + 1,\n+            DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);\n+        putAll(m);\n+    }\n+\n+    // internal utilities\n+\n+    /**\n+     * Value representing null keys inside tables.\n+     */\n+    private static final Object NULL_KEY = new Object();\n+\n+    /**\n+     * Returns internal representation for key. Use NULL_KEY if key is null.\n+     */\n+    private static Object maskNull(Object key) {\n+        return (key == null ? NULL_KEY : key);\n+    }\n+\n+    /**\n+     * Returns key represented by specified internal representation.\n+     */\n+    private static Object unmaskNull(Object key) {\n+        return (key == NULL_KEY ? null : key);\n+    }\n+\n+    /**\n+     * Returns a hash code for non-null Object x.\n+     */\n+    private static int hash(Object x) {\n+        int h = x.hashCode();\n+        return h - (h << 7); // i.e., -127 * h\n+    }\n+\n+    /**\n+     * Check for equality of non-null reference x and possibly-null y.\n+     */\n+    private static boolean eq(Object x, Object y) {\n+        return x == y || x.equals(y);\n+    }\n+\n+    /**\n+     * Returns the current capacity of backing table in this map.\n+     *\n+     * @return the current capacity of backing table in this map.\n+     */\n+    public final int capacity() {\n+        return table.length;\n+    }\n+\n+    /**\n+     * Returns the load factor for this map.\n+     *\n+     * @return the load factor for this map.\n+     */\n+    public final float loadFactor() {\n+        return loadFactor;\n+    }\n+\n+    public int getMaxSize() {\n+        return maxSize;\n+    }\n+\n+    public void setMaxSize(int maxSize) {\n+        this.maxSize = (maxSize < 0) ? Integer.MAX_VALUE : maxSize;\n+        if (this.maxSize != Integer.MAX_VALUE)\n+            removeOverflow(this.maxSize);\n+    }\n+\n+    public boolean isFull() {\n+        return maxSize != Integer.MAX_VALUE && size() >= maxSize;\n+    }\n+\n+    public void overflowRemoved(Object key, Object value) {\n+    }\n+\n+    /**\n+     * Returns the number of key-value mappings in this map.\n+     *\n+     * @return the number of key-value mappings in this map.\n+     */\n+    public final int size() {\n+        return size;\n+    }\n+\n+    /**\n+     * Returns <tt>true</tt> if this map contains no key-value mappings.\n+     *\n+     * @return <tt>true</tt> if this map contains no key-value mappings.\n+     */\n+    public final boolean isEmpty() {\n+        return size == 0;\n+    }\n+\n+    /**\n+     * Returns the value to which the specified key is mapped in this identity\n+     * hash map, or <tt>null</tt> if the map contains no mapping for this key.\n+     * A return value of <tt>null</tt> does not <i>necessarily</i> indicate\n+     * that the map contains no mapping for the key; it is also possible that\n+     * the map explicitly maps the key to <tt>null</tt>. The\n+     * <tt>containsKey</tt> method may be used to distinguish these two cases.\n+     *\n+     * @param key the key whose associated value is to be returned.\n+     * @return the value to which this map maps the specified key, or\n+     * <tt>null</tt> if the map contains no mapping for this key.\n+     * @see #put(Object, Object)\n+     */\n+    public Object get(Object key) {\n+        Entry e = getEntry(key);\n+        return e == null ? null : e.value;\n+    }\n+\n+    /**\n+     * Returns <tt>true</tt> if this map contains a mapping for the\n+     * specified key.\n+     *\n+     * @param key The key whose presence in this map is to be tested\n+     * @return <tt>true</tt> if this map contains a mapping for the specified\n+     * key.\n+     */\n+    public final boolean containsKey(Object key) {\n+        return getEntry(key) != null;\n+    }\n+\n+    /**\n+     * Returns the entry associated with the specified key in the\n+     * ConcurrentHashMap. Returns null if the ConcurrentHashMap contains no\n+     * mapping for this key.\n+     */\n+    protected Entry getEntry(Object key) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        Entry[] tab = table;\n+        for (Entry e = tab[hash & (tab.length - 1)]; e != null; e = e.next) {\n+            if (e.hash == hash && eq(k, e.key)) return e;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Associates the specified value with the specified key in this map.\n+     * If the map previously contained a mapping for this key, the old\n+     * value is replaced.\n+     *\n+     * @param key key with which the specified value is to be associated.\n+     * @param value value to be associated with the specified key.\n+     * @return previous value associated with specified key, or <tt>null</tt>\n+     * if there was no mapping for key. A <tt>null</tt> return can\n+     * also indicate that the ConcurrentHashMap previously associated\n+     * <tt>null</tt> with the specified key.\n+     */\n+    public Object put(Object key, Object value) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+\n+            for (Entry e = table[i]; e != null; e = e.next) {\n+                if (e.hash == hash && eq(k, e.key)) {\n+                    Object oldValue = e.value;\n+                    e.value = value;\n+                    return oldValue;\n+                }\n+            }\n+\n+            if (maxSize != Integer.MAX_VALUE)\n+                removeOverflow(maxSize - 1);\n+            table[i] = createEntry(hash, k, value, table[i]);\n+            if (size++ >= threshold) resize(2 * table.length);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove any entries equal to or over the max size.\n+     */\n+    private void removeOverflow(int maxSize) {\n+        while (size > maxSize) {\n+            Map.Entry entry = removeRandom();\n+            if (entry == null)\n+                break;\n+            overflowRemoved(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    public Object putIfAbsent(Object key, Object value) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+\n+            for (Entry e = table[i]; e != null; e = e.next) {\n+                if (e.hash == hash && eq(k, e.key)) {\n+                    return e.value;\n+                }\n+            }\n+\n+            if (maxSize != Integer.MAX_VALUE)\n+                removeOverflow(maxSize - 1);\n+            table[i] = createEntry(hash, k, value, table[i]);\n+            if (size++ >= threshold) resize(2 * table.length);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Rehashes the contents of this map into a new <tt>ConcurrentHashMap</tt>\n+     * instance with a larger capacity. This method is called automatically when\n+     * the number of keys in this map exceeds its capacity and load factor.\n+     *\n+     * @param newCapacity the new capacity, MUST be a power of two.\n+     */\n+    private void resize(int newCapacity) {\n+        // assert(newCapacity & -newCapacity) == newCapacity; // power of 2\n+        Entry[] oldTable = table;\n+        int oldCapacity = oldTable.length;\n+\n+        // check if needed\n+        if (size < threshold || oldCapacity > newCapacity) return;\n+\n+        Entry[] newTable = new Entry[newCapacity];\n+        int mask = newCapacity - 1;\n+        for (int i = oldCapacity; i-- > 0;) {\n+            for (Entry e = oldTable[i]; e != null; e = e.next) {\n+                Entry clone = (Entry) e.clone();\n+                int j = clone.hash & mask;\n+                clone.next = newTable[j];\n+                newTable[j] = clone;\n+            }\n+        }\n+        table = newTable;\n+        threshold = (int) (newCapacity * loadFactor);\n+    }\n+\n+    /**\n+     * Copies all of the mappings from the specified map to this map\n+     * These mappings will replace any mappings that\n+     * this map had for any of the keys currently in the specified map.\n+     *\n+     * @param t mappings to be stored in this map.\n+     * @throws NullPointerException if the specified map is null.\n+     */\n+    public final synchronized void putAll(Map t) {\n+        // Expand enough to hold t's elements without resizing.\n+        int n = t.size();\n+        if (n == 0) return;\n+        if (n >= threshold) {\n+            n = (int) (n / loadFactor + 1);\n+            if (n > MAXIMUM_CAPACITY) n = MAXIMUM_CAPACITY;\n+            int capacity = table.length;\n+            while (capacity < n) capacity <<= 1;\n+            resize(capacity);\n+        }\n+\n+        for (Iterator i = t.entrySet().iterator(); i.hasNext();) {\n+            Map.Entry e = (Map.Entry) i.next();\n+            put(e.getKey(), e.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Removes the mapping for this key from this map if present.\n+     *\n+     * @param key key whose mapping is to be removed from the map.\n+     * @return previous value associated with specified key, or <tt>null</tt>\n+     * if there was no mapping for key. A <tt>null</tt> return can\n+     * also indicate that the map previously associated <tt>null</tt>\n+     * with the specified key.\n+     */\n+    public Object remove(Object key) {\n+        Entry e = removeEntryForKey(key);\n+        return (e == null ? e : e.value);\n+    }\n+\n+    /**\n+     * Removes and returns the entry associated with the specified key in the\n+     * ConcurrentHashMap. Returns null if the ConcurrentHashMap contains no\n+     * mapping for this key.\n+     */\n+    private Entry removeEntryForKey(Object key) {\n+        Object k = maskNull(key);\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+            Entry e = table[i];\n+\n+            if (e == null) return null;\n+            if (e.hash == hash && eq(k, e.key)) {\n+                size--;\n+                table[i] = e.next;\n+                return e;\n+            }\n+\n+            Entry prev = e;\n+            for (e = e.next; e != null; prev = e, e = e.next) {\n+                if (e.hash == hash && eq(k, e.key)) {\n+                    size--;\n+                    prev.next = e.next;\n+                    return e;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Special version of remove for EntrySet.\n+     */\n+    private Entry removeMapping(Object o) {\n+        if (!(o instanceof Map.Entry)) return null;\n+\n+        Map.Entry entry = (Map.Entry) o;\n+        Object k = maskNull(entry.getKey());\n+        int hash = hash(k);\n+        synchronized (this) {\n+            int i = hash & (table.length - 1);\n+            Entry e = table[i];\n+\n+            if (e == null) return null;\n+            if (e.hash == hash && e.equals(entry)) {\n+                size--;\n+                table[i] = e.next;\n+                return e;\n+            }\n+\n+            Entry prev = e;\n+            for (e = e.next; e != null; prev = e, e = e.next) {\n+                if (e.hash == hash && e.equals(entry)) {\n+                    size--;\n+                    prev.next = e.next;\n+                    return e;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Removes all mappings from this map.\n+     */\n+    public synchronized void clear() {\n+        table = new Entry[table.length];\n+        size = 0;\n+    }\n+\n+    /**\n+     * Return an arbitrary entry index.\n+     */\n+    private int randomEntryIndex() {\n+        if (randomEntry == RANDOMS.length)\n+            randomEntry = 0;\n+        return (int) (RANDOMS[randomEntry++] * table.length);\n+    }\n+\n+    public Map.Entry removeRandom() {\n+        if (size == 0)\n+            return null;\n+\n+        synchronized (this) {\n+            int random = randomEntryIndex();\n+            int index = findEntry(random, random % 2 == 0, false);\n+            if (index == -1)\n+                return null;\n+            Entry rem = table[index];\n+            table[index] = rem.next;\n+            size--;\n+            return rem;\n+        }\n+    }\n+\n+    /**\n+     * Find the index of the entry nearest the given index, starting in the\n+     * given direction.\n+     */\n+    private int findEntry(int start, boolean forward, boolean searchedOther) {\n+        if (forward) {\n+            for (int i = start; i < table.length; i++)\n+                if (table[i] != null)\n+                    return i;\n+            return (searchedOther || start == 0) ? -1\n+                : findEntry(start - 1, false, true);\n+        } else {\n+            for (int i = start; i >= 0; i--)\n+                if (table[i] != null)\n+                    return i;\n+            return (searchedOther || start == table.length - 1) ? -1\n+                : findEntry(start + 1, true, true);\n+        }\n+    }\n+\n+    public Iterator randomEntryIterator() {\n+        // pass index so calculated before iterator refs table, in case table\n+        // gets replace with a larger one\n+        return new HashIterator(ENTRIES, randomEntryIndex());\n+    }\n+\n+    /**\n+     * Returns <tt>true</tt> if this map maps one or more keys to the\n+     * specified value.\n+     *\n+     * @param value value whose presence in this map is to be tested.\n+     * @return <tt>true</tt> if this map maps one or more keys to the\n+     * specified value.\n+     */\n+    public final boolean containsValue(Object value) {\n+        if (value == null) return containsNullValue();\n+\n+        Entry tab[] = table;\n+        for (int i = 0; i < tab.length; i++) {\n+            for (Entry e = tab[i]; e != null; e = e.next) {\n+                if (value.equals(e.value)) return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Special-case code for containsValue with null argument\n+     */\n+    private boolean containsNullValue() {\n+        Entry tab[] = table;\n+        for (int i = 0; i < tab.length; i++) {\n+            for (Entry e = tab[i]; e != null; e = e.next) {\n+                if (e.value == null) return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns a shallow copy of this <tt>ConcurrentHashMap</tt> instance: the\n+     * keys and values themselves are not cloned.\n+     *\n+     * @return a shallow copy of this map.\n+     */\n+    public final Object clone() {\n+        return new ConcurrentHashMap(this);\n+    }\n+\n+    protected Entry createEntry(int h, Object k, Object v, Entry n) {\n+        return new Entry(h, k, v, n);\n+    }\n+\n+    protected static class Entry implements Map.Entry {\n+\n+        final Object key;\n+        Object value;\n+        final int hash;\n+        Entry next;\n+\n+        /**\n+         * Create new entry.\n+         */\n+        protected Entry(int h, Object k, Object v, Entry n) {\n+            value = v;\n+            next = n;\n+            key = k;\n+            hash = h;\n+        }\n+\n+        public Object getKey() {\n+            return unmaskNull(key);\n+        }\n+\n+        public Object getValue() {\n+            return value;\n+        }\n+\n+        public Object setValue(Object newValue) {\n+            Object oldValue = value;\n+            value = newValue;\n+            return oldValue;\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (!(o instanceof Map.Entry)) return false;\n+            Map.Entry e = (Map.Entry) o;\n+            Object k1 = getKey();\n+            Object k2 = e.getKey();\n+            if (k1 == k2 || (k1 != null && k1.equals(k2))) {\n+                Object v1 = getValue();\n+                Object v2 = e.getValue();\n+                if (v1 == v2 || (v1 != null && v1.equals(v2)))\n+                    return true;\n+            }\n+            return false;\n+        }\n+\n+        public int hashCode() {\n+            return (key == NULL_KEY ? 0 : key.hashCode()) ^\n+                (value == null ? 0 : value.hashCode());\n+        }\n+\n+        public String toString() {\n+            return getKey() + \"=\" + getValue();\n+        }\n+\n+        protected Object clone() {\n+            // It is the callers responsibility to set the next field\n+            // correctly.\n+            return new Entry(hash, key, value, null);\n+        }\n+    }\n+\n+    // Types of Enumerations/Iterations\n+    private static final int KEYS = 0;\n+    private static final int VALUES = 1;\n+    private static final int ENTRIES = 2;\n+\n+    /**\n+     * Map iterator.\n+     */\n+    private class HashIterator implements Iterator {\n+\n+        final Entry[] table = ConcurrentHashMap.this.table;\n+        final int type;\n+        int startIndex;\n+        int stopIndex = 0;\n+        int index;\n+        Entry entry = null;\n+        Entry lastReturned = null;\n+\n+        HashIterator(int type, int startIndex) {\n+            this.type = type;\n+            this.startIndex = startIndex;\n+            index = startIndex;\n+        }\n+\n+        public boolean hasNext() {\n+            if (entry != null) {\n+                return true;\n+            }\n+            while (index >= stopIndex) {\n+                if ((entry = table[index--]) != null) {\n+                    return true;\n+                }\n+            }\n+            if (stopIndex == 0) {\n+                index = table.length - 1;\n+                stopIndex = startIndex + 1;\n+                while (index >= stopIndex) {\n+                    if ((entry = table[index--]) != null) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n+        public Object next() {\n+            if (!hasNext())\n+                throw new NoSuchElementException();\n+            Entry e = lastReturned = entry;\n+            entry = e.next;\n+            return type == KEYS ? e.key : (type == VALUES ? e.value : e);\n+        }\n+\n+        public void remove() {\n+            if (lastReturned == null)\n+                throw new IllegalStateException();\n+            synchronized (ConcurrentHashMap.this) {\n+                Entry[] tab = ConcurrentHashMap.this.table;\n+                int index = (lastReturned.hash & 0x7FFFFFFF) % tab.length;\n+\n+                for (Entry e = tab[index], prev = null; e != null;\n+                    prev = e, e = e.next) {\n+                    if (e == lastReturned) {\n+                        if (prev == null)\n+                            tab[index] = e.next;\n+                        else\n+                            prev.next = e.next;\n+                        size--;\n+                        lastReturned = null;\n+                        return;\n+                    }\n+                }\n+                throw new Error(\"Iterated off table when doing remove\");\n+            }\n+        }\n+    }\n+\n+    // Views\n+\n+    private transient Set entrySet = null;\n+    private transient Set keySet = null;\n+    private transient Collection values = null;\n+\n+    /**\n+     * Returns a set view of the keys contained in this map. The set is\n+     * backed by the map, so changes to the map are reflected in the set, and\n+     * vice-versa. The set supports element removal, which removes the\n+     * corresponding mapping from this map, via the <tt>Iterator.remove</tt>,\n+     * <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and\n+     * <tt>clear</tt> operations. It does not support the <tt>add</tt> or\n+     * <tt>addAll</tt> operations.\n+     *\n+     * @return a set view of the keys contained in this map.\n+     */\n+    public final Set keySet() {\n+        Set ks = keySet;\n+        return (ks != null ? ks : (keySet = new KeySet()));\n+    }\n+\n+    private final class KeySet extends AbstractSet {\n+\n+        public Iterator iterator() {\n+            return new HashIterator(KEYS, table.length - 1);\n+        }\n+\n+        public int size() {\n+            return size;\n+        }\n+\n+        public boolean contains(Object o) {\n+            return containsKey(o);\n+        }\n+\n+        public boolean remove(Object o) {\n+            return ConcurrentHashMap.this.removeEntryForKey(o) != null;\n+        }\n+\n+        public void clear() {\n+            ConcurrentHashMap.this.clear();\n+        }\n+    }\n+\n+    /**\n+     * Returns a collection view of the values contained in this map. The\n+     * collection is backed by the map, so changes to the map are reflected in\n+     * the collection, and vice-versa. The collection supports element\n+     * removal, which removes the corresponding mapping from this map, via the\n+     * <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,\n+     * <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.\n+     * It does not support the <tt>add</tt> or <tt>addAll</tt> operations.\n+     *\n+     * @return a collection view of the values contained in this map.\n+     */\n+    public final Collection values() {\n+        Collection vs = values;\n+        return (vs != null ? vs : (values = new Values()));\n+    }\n+\n+    private final class Values extends AbstractCollection {\n+\n+        public Iterator iterator() {\n+            return new HashIterator(VALUES, table.length - 1);\n+        }\n+\n+        public int size() {\n+            return size;\n+        }\n+\n+        public boolean contains(Object o) {\n+            return containsValue(o);\n+        }\n+\n+        public void clear() {\n+            ConcurrentHashMap.this.clear();\n+        }\n+    }\n+\n+    /**\n+     * Returns a collection view of the mappings contained in this map. Each\n+     * element in the returned collection is a <tt>Map.Entry</tt>. The\n+     * collection is backed by the map, so changes to the map are reflected in\n+     * the collection, and vice-versa. The collection supports element\n+     * removal, which removes the corresponding mapping from the map, via the\n+     * <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,\n+     * <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.\n+     * It does not support the <tt>add</tt> or <tt>addAll</tt> operations.\n+     *\n+     * @return a collection view of the mappings contained in this map.\n+     * @see Map.Entry\n+     */\n+    public final Set entrySet() {\n+        Set es = entrySet;\n+        return (es != null ? es : (entrySet = new EntrySet()));\n+    }\n+\n+    private final class EntrySet extends AbstractSet {\n+\n+        public Iterator iterator() {\n+            return new HashIterator(ENTRIES, table.length - 1);\n+        }\n+\n+        public boolean contains(Object o) {\n+            if (!(o instanceof Map.Entry)) return false;\n+            Map.Entry e = (Map.Entry) o;\n+            Entry candidate = getEntry(e.getKey());\n+            return candidate != null && candidate.equals(e);\n+        }\n+\n+        public boolean remove(Object o) {\n+            return removeMapping(o) != null;\n+        }\n+\n+        public int size() {\n+            return size;\n+        }\n+\n+        public void clear() {\n+            ConcurrentHashMap.this.clear();\n+        }\n+    }\n+\n+    /**\n+     * Save the state of the <tt>ConcurrentHashMap</tt> instance to a stream\n+     * (i.e., serialize it).\n+     *\n+     * @serialData The <i>capacity</i> of the ConcurrentHashMap(the length of\n+     * the bucket array) is emitted(int), followed by the <i>size</i> of the\n+     * ConcurrentHashMap(the number of key-value mappings), followed by the key\n+     * (Object) and value(Object) for each key-value mapping represented by the\n+     * ConcurrentHashMap The key-value mappings are emitted in the order that\n+     * they are returned by <tt>entrySet().iterator()</tt>.\n+     */\n+    private void writeObject(ObjectOutputStream s) throws IOException {\n+        // Write out the threshold, loadfactor, and any hidden stuff\n+        s.defaultWriteObject();\n+\n+        // Write out number of buckets\n+        s.writeInt(table.length);\n+\n+        // Write out size(number of Mappings)\n+        s.writeInt(size);\n+        s.writeInt(maxSize);\n+\n+        // Write out keys and values(alternating)\n+        for (Iterator i = entrySet().iterator(); i.hasNext();) {\n+            Map.Entry e = (Map.Entry) i.next();\n+            s.writeObject(e.getKey());\n+            s.writeObject(e.getValue());\n+        }\n+    }\n+\n+    private static final long serialVersionUID = -6452706556724125778L;\n+\n+    /**\n+     * Reconstitute the <tt>ConcurrentHashMap</tt> instance from a stream(i.e.,\n+     * deserialize it).\n+     */\n+    private void readObject(ObjectInputStream s)\n+        throws IOException, ClassNotFoundException {\n+        // Read in the threshold, loadfactor, and any hidden stuff\n+        s.defaultReadObject();\n+\n+        // Read in number of buckets and allocate the bucket array;\n+        int numBuckets = s.readInt();\n+        table = new Entry[numBuckets];\n+\n+        // Read in size(number of Mappings)\n+        int size = s.readInt();\n+        \n+        // read the max size\n+        maxSize = s.readInt();\n+\n+        // Read the keys and values, and put the mappings in the\n+        // ConcurrentHashMap\n+        for (int i = 0; i < size; i++) {\n+            Object key = s.readObject();\n+            Object value = s.readObject();\n+            put(key, value);\n+        }\n+    }\n+}"},{"sha":"adf6605a6d4fe411d13bbee67db2bd165a86db11","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util.concurrent;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * A highly concurrent map.\n+ *\n+ * @author Abe White\n+ */\n+public interface ConcurrentMap extends Map {\n+\n+    /**\n+     * Remove an arbitrary(not strictly random) entry from the map. This\n+     * allows implementation of concurrent caches with size ceilings.\n+     *\n+     * @return the removed entry, or null if map is empty\n+     */\n+    public Map.Entry removeRandom();\n+\n+    /**\n+     * Iterate over map entries, beginning at an arbitrary\n+     * (not strictly random) entry.\n+     */\n+    public Iterator randomEntryIterator();\n+}"},{"sha":"0c6a8ddac5d1e560ba5762cbc23d75281f94d8c2","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","status":"added","additions":1077,"deletions":0,"changes":1077,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,1077 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util.concurrent;\n+\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.SoftReference;\n+import java.lang.ref.WeakReference;\n+import java.util.AbstractMap;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Random;\n+import java.util.Set;\n+\n+import org.apache.openjpa.lib.util.ReferenceMap;\n+import org.apache.openjpa.lib.util.SizedMap;\n+\n+/**\n+ * This class implements a HashMap which has limited synchronization\n+ * and reference keys or values(but not both). In particular mutators are\n+ * generally synchronized while accessors are generally not. Additionally the\n+ * Iterators returned by this class are not \"fail-fast\", but instead try to\n+ * continue to iterate over the data structure after changes have been\n+ * made. Finally purging of the reference queue is only done inside mutators.\n+ * Null keys are not supported if keys use references. Null values are not\n+ * supported if values use references.\n+ * This class is based heavily on the WeakHashMap class in the Java\n+ * collections package.\n+ */\n+public class ConcurrentReferenceHashMap extends AbstractMap\n+    implements ConcurrentMap, ReferenceMap, SizedMap, Cloneable {\n+\n+    /**\n+     * Cache of random numbers used in \"random\" methods, since generating them\n+     * is expensive. We hope each map changes enough between cycling through\n+     * this list that the overall effect is random enough.\n+     */\n+    static final double[] RANDOMS = new double[1000];\n+\n+    static {\n+        Random random = new Random();\n+        for (int i = 0; i < RANDOMS.length; i++)\n+            RANDOMS[i] = random.nextDouble();\n+    }\n+\n+    /**\n+     * The hash table data.\n+     */\n+    private transient Entry[] table;\n+\n+    /**\n+     * The total number of entries in the hash table.\n+     */\n+    private transient int count;\n+\n+    /**\n+     * Rehashes the table when count exceeds this threshold.\n+     */\n+    private int threshold;\n+\n+    /**\n+     * The load factor for the HashMap.\n+     */\n+    private float loadFactor;\n+\n+    /**\n+     * The key reference type.\n+     */\n+    private int keyType;\n+\n+    /**\n+     * The value reference type.\n+     */\n+    private int valueType;\n+\n+    /**\n+     * Reference queue for cleared Entries\n+     */\n+    private final ReferenceQueue queue = new ReferenceQueue();\n+\n+    /**\n+     * Spread \"random\" removes and iteration.\n+     */\n+    private int randomEntry = 0;\n+\n+    /**\n+     * Maximum entries.\n+     */\n+    private int maxSize = Integer.MAX_VALUE;\n+\n+    /**\n+     * Compare two objects. These might be keys, values, or Entry instances.\n+     * This implementation uses a normal null-safe object equality algorithm.\n+     *\n+     * @since 1.0.0\n+     */\n+    protected boolean eq(Object x, Object y) {\n+        return x == y || (x != null && x.equals(y));\n+    }\n+\n+    /**\n+     * Obtain the hashcode of an object. The object might be a key, a value,\n+     * or an Entry. This implementation just delegates to\n+     * {@link Object#hashCode}\n+     *\n+     * @since 1.0.0\n+     */\n+    protected int hc(Object o) {\n+        return o == null ? 0 : o.hashCode();\n+    }\n+\n+    /**\n+     * Constructs a new, empty HashMap with the specified initial\n+     * capacity and the specified load factor.\n+     *\n+     * @param keyType the reference type of map keys\n+     * @param valueType the reference type of map values\n+     * @param initialCapacity the initial capacity of the HashMap.\n+     * @param loadFactor a number between 0.0 and 1.0.\n+     * @throws IllegalArgumentException if neither keys nor values use hard\n+     * references, if the initial capacity is less than or equal to zero, or if\n+     * the load factor is less than or equal to zero\n+     */\n+    public ConcurrentReferenceHashMap(int keyType, int valueType,\n+        int initialCapacity, float loadFactor) {\n+        if (initialCapacity < 0) {\n+            throw new IllegalArgumentException(\"Illegal Initial Capacity: \" +\n+                initialCapacity);\n+        }\n+        if ((loadFactor > 1) || (loadFactor <= 0)) {\n+            throw new IllegalArgumentException(\"Illegal Load factor: \" +\n+                loadFactor);\n+        }\n+        if (keyType != HARD && valueType != HARD) {\n+            throw new IllegalArgumentException(\"Either keys or values must \" +\n+                \"use hard references.\");\n+        }\n+        this.keyType = keyType;\n+        this.valueType = valueType;\n+        this.loadFactor = loadFactor;\n+        table = new Entry[initialCapacity];\n+        threshold = (int) (initialCapacity * loadFactor);\n+    }\n+\n+    /**\n+     * Constructs a new, empty HashMap with the specified initial capacity\n+     * and default load factor.\n+     *\n+     * @param keyType the reference type of map keys\n+     * @param valueType the reference type of map values\n+     * @param initialCapacity the initial capacity of the HashMap.\n+     */\n+    public ConcurrentReferenceHashMap(int keyType, int valueType,\n+        int initialCapacity) {\n+        this(keyType, valueType, initialCapacity, 0.75f);\n+    }\n+\n+    /**\n+     * Constructs a new, empty HashMap with a default capacity and load factor.\n+     *\n+     * @param keyType the reference type of map keys\n+     * @param valueType the reference type of map values\n+     */\n+    public ConcurrentReferenceHashMap(int keyType, int valueType) {\n+        this(keyType, valueType, 11, 0.75f);\n+    }\n+\n+    /**\n+     * Constructs a new HashMap with the same mappings as the given\n+     * Map. The HashMap is created with a capacity of thrice the number\n+     * of entries in the given Map or 11 (whichever is greater), and a\n+     * default load factor.\n+     *\n+     * @param keyType the reference type of map keys\n+     * @param valueType the reference type of map values\n+     */\n+    public ConcurrentReferenceHashMap(int keyType, int valueType, Map t) {\n+        this(keyType, valueType, Math.max(3 * t.size(), 11), 0.75f);\n+        putAll(t);\n+    }\n+\n+    public int getMaxSize() {\n+        return maxSize;\n+    }\n+\n+    public void setMaxSize(int maxSize) {\n+        this.maxSize = (maxSize < 0) ? Integer.MAX_VALUE : maxSize;\n+        if (this.maxSize != Integer.MAX_VALUE)\n+            removeOverflow(this.maxSize);\n+    }\n+\n+    public boolean isFull() {\n+        return maxSize != Integer.MAX_VALUE && size() >= maxSize;\n+    }\n+\n+    public void overflowRemoved(Object key, Object value) {\n+    }\n+\n+    /**\n+     * Returns the number of key-value mappings in this Map. This\n+     * result is a snapshot, and may not reflect unprocessed entries\n+     * that will be removed before next attempted access because they\n+     * are no longer referenced.\n+     */\n+    public int size() {\n+        return count;\n+    }\n+\n+    /**\n+     * Returns true if this Map contains no key-value mappings. This\n+     * result is a snapshot, and may not reflect unprocessed entries\n+     * that will be removed before next attempted access because they\n+     * are no longer referenced.\n+     */\n+    public boolean isEmpty() {\n+        return count == 0;\n+    }\n+\n+    /**\n+     * Returns true if this HashMap maps one or more keys to the specified\n+     * value.\n+     *\n+     * @param value value whose presence in this Map is to be tested.\n+     */\n+    public boolean containsValue(Object value) {\n+        Entry[] tab = table;\n+\n+        if (value == null) {\n+            if (valueType != HARD)\n+                return false;\n+            for (int i = tab.length; i-- > 0;)\n+                for (Entry e = tab[i]; e != null; e = e.getNext())\n+                    if (e.getValue() == null)\n+                        return true;\n+        } else {\n+            for (int i = tab.length; i-- > 0;)\n+                for (Entry e = tab[i]; e != null; e = e.getNext())\n+                    if (eq(value, e.getValue()))\n+                        return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if this HashMap contains a mapping for the specified key.\n+     *\n+     * @param key key whose presence in this Map is to be tested.\n+     */\n+    public boolean containsKey(Object key) {\n+        if (key == null && keyType != HARD)\n+            return false;\n+\n+        Entry[] tab = table;\n+        int hash = hc(key);\n+        int index = (hash & 0x7FFFFFFF) % tab.length;\n+        for (Entry e = tab[index]; e != null; e = e.getNext())\n+            if (e.getHash() == hash && eq(key, e.getKey()))\n+                return true;\n+        return false;\n+    }\n+\n+    /**\n+     * Returns the value to which this HashMap maps the specified key.\n+     * Returns null if the HashMap contains no mapping for this key.\n+     *\n+     * @param key key whose associated value is to be returned.\n+     */\n+    public Object get(Object key) {\n+        if (key == null && keyType != HARD)\n+            return null;\n+\n+        Entry[] tab = table;\n+        int hash = hc(key);\n+        int index = (hash & 0x7FFFFFFF) % tab.length;\n+        for (Entry e = tab[index]; e != null; e = e.getNext())\n+            if ((e.getHash() == hash) && eq(key, e.getKey()))\n+                return e.getValue();\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Rehashes the contents of the HashMap into a HashMap with a\n+     * larger capacity. This method is called automatically when the\n+     * number of keys in the HashMap exceeds this HashMap's capacity\n+     * and load factor.\n+     */\n+    private void rehash() {\n+        int oldCapacity = table.length;\n+        Entry oldMap[] = table;\n+\n+        int newCapacity = oldCapacity * 2 + 1;\n+        Entry newMap[] = new Entry[newCapacity];\n+\n+        for (int i = oldCapacity; i-- > 0;) {\n+            for (Entry old = oldMap[i]; old != null;) {\n+                if ((keyType != HARD && old.getKey() == null)\n+                    || valueType != HARD && old.getValue() == null) {\n+                    Entry e = old;\n+                    old = old.getNext();\n+                    e.setNext(null);\n+                    count--;\n+                } else {\n+                    Entry e = (Entry) old.clone(queue);\n+                    old = old.getNext();\n+\n+                    int index = (e.getHash() & 0x7FFFFFFF) % newCapacity;\n+                    e.setNext(newMap[index]);\n+                    newMap[index] = e;\n+                }\n+            }\n+        }\n+\n+        threshold = (int) (newCapacity * loadFactor);\n+        table = newMap;\n+    }\n+\n+    /**\n+     * Associates the specified value with the specified key in this HashMap.\n+     * If the HashMap previously contained a mapping for this key, the old\n+     * value is replaced.\n+     *\n+     * @param key key with which the specified value is to be associated.\n+     * @param value value to be associated with the specified key.\n+     * @return previous value associated with specified key, or null if there\n+     * was no mapping for key. A null return can also indicate that\n+     * the HashMap previously associated null with the specified key.\n+     */\n+    public Object put(Object key, Object value) {\n+        if ((key == null && keyType != HARD)\n+            || (value == null && valueType != HARD))\n+            throw new IllegalArgumentException(\"Null references not supported\");\n+\n+        int hash = hc(key);\n+        synchronized (this) {\n+            expungeStaleEntries();\n+\n+            Entry[] tab = table;\n+            int index = 0;\n+\n+            index = (hash & 0x7FFFFFFF) % tab.length;\n+            for (Entry e = tab[index], prev = null; e != null; prev = e,\n+                e = e.getNext()) {\n+                if ((e.getHash() == hash) && eq(key, e.getKey())) {\n+                    Object old = e.getValue();\n+                    if (valueType == HARD)\n+                        e.setValue(value);\n+                    else {\n+                        e = newEntry(hash, e.getKey(), value, e.getNext());\n+                        if (prev == null)\n+                            tab[index] = e;\n+                        else\n+                            prev.setNext(e);\n+                    }\n+                    return old;\n+                }\n+            }\n+\n+            if (count >= threshold) {\n+                // Rehash the table if the threshold is exceeded\n+                rehash();\n+\n+                tab = table;\n+                index = (hash & 0x7FFFFFFF) % tab.length;\n+            }\n+\n+            if (maxSize != Integer.MAX_VALUE)\n+                removeOverflow(maxSize - 1);\n+            tab[index] = newEntry(hash, key, value, tab[index]);\n+            count++;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Creates a new entry.\n+     */\n+    private Entry newEntry(int hash, Object key, Object value, Entry next) {\n+        int refType = (keyType != HARD) ? keyType : valueType;\n+        switch (refType) {\n+            case WEAK:\n+                return new WeakEntry(hash, key, value, refType == keyType, next,\n+                    queue);\n+            case SOFT:\n+                return new SoftEntry(hash, key, value, refType == keyType, next,\n+                    queue);\n+            default:\n+                return new HardEntry(hash, key, value, next);\n+        }\n+    }\n+\n+    /**\n+     * Remove any entries equal to or over the max size.\n+     */\n+    private void removeOverflow(int maxSize) {\n+        while (count > maxSize) {\n+            Map.Entry entry = removeRandom();\n+            if (entry == null)\n+                break;\n+            overflowRemoved(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Removes the mapping for this key from this HashMap if present.\n+     *\n+     * @param key key whose mapping is to be removed from the Map.\n+     * @return previous value associated with specified key, or null if there\n+     * was no mapping for key. A null return can also indicate that\n+     * the HashMap previously associated null with the specified key.\n+     */\n+    public Object remove(Object key) {\n+        if (key == null && keyType != HARD)\n+            return null;\n+\n+        int hash = hc(key);\n+        synchronized (this) {\n+            expungeStaleEntries();\n+\n+            Entry[] tab = table;\n+\n+            int index = (hash & 0x7FFFFFFF) % tab.length;\n+            for (Entry e = tab[index], prev = null; e != null;\n+                prev = e, e = e.getNext()) {\n+                if ((e.getHash() == hash) && eq(key, e.getKey())) {\n+                    if (prev != null)\n+                        prev.setNext(e.getNext());\n+                        // otherwise put the bucket after us\n+                    else\n+                        tab[index] = e.getNext();\n+\n+                    count--;\n+                    return e.getValue();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public void removeExpired() {\n+        synchronized (this) {\n+            expungeStaleEntries();\n+        }\n+    }\n+\n+    public void keyExpired(Object value) {\n+    }\n+\n+    public void valueExpired(Object key) {\n+    }\n+\n+    /**\n+     * Return an arbitrary entry index.\n+     */\n+    private int randomEntryIndex() {\n+        if (randomEntry == RANDOMS.length)\n+            randomEntry = 0;\n+        return (int) (RANDOMS[randomEntry++] * table.length);\n+    }\n+\n+    public Map.Entry removeRandom() {\n+        synchronized (this) {\n+            expungeStaleEntries();\n+            if (count == 0)\n+                return null;\n+\n+            int random = randomEntryIndex();\n+            int index = findEntry(random, random % 2 == 0, false);\n+            if (index == -1)\n+                return null;\n+            Entry rem = table[index];\n+            table[index] = rem.getNext();\n+            count--;\n+            return rem;\n+        }\n+    }\n+\n+    /**\n+     * Find the index of the entry nearest the given index, starting in the\n+     * given direction.\n+     */\n+    private int findEntry(int start, boolean forward, boolean searchedOther) {\n+        if (forward) {\n+            for (int i = start; i < table.length; i++)\n+                if (table[i] != null)\n+                    return i;\n+            return (searchedOther || start == 0) ? -1\n+                : findEntry(start - 1, false, true);\n+        } else {\n+            for (int i = start; i >= 0; i--)\n+                if (table[i] != null)\n+                    return i;\n+            return (searchedOther || start == table.length - 1) ? -1\n+                : findEntry(start + 1, true, true);\n+        }\n+    }\n+\n+    public Iterator randomEntryIterator() {\n+        // pass index so calculated before iterator refs table, in case table\n+        // gets replace with a larger one\n+        return new HashIterator(ENTRIES, randomEntryIndex());\n+    }\n+\n+    /**\n+     * Copies all of the mappings from the specified Map to this HashMap\n+     * These mappings will replace any mappings that this HashMap had for any\n+     * of the keys currently in the specified Map.\n+     *\n+     * @param t Mappings to be stored in this Map.\n+     */\n+    public void putAll(Map t) {\n+        Iterator i = t.entrySet().iterator();\n+        while (i.hasNext()) {\n+            Map.Entry e = (Map.Entry) i.next();\n+            put(e.getKey(), e.getValue());\n+        }\n+    }\n+\n+    /**\n+     * Removes all mappings from this HashMap.\n+     */\n+    public synchronized void clear() {\n+        // clear out ref queue. We don't need to expunge entries\n+        // since table is getting cleared.\n+        while (queue.poll() != null)\n+            ;\n+        table = new Entry[table.length];\n+        count = 0;\n+        // Allocation of array may have caused GC, which may have caused\n+        // additional entries to go stale.    Removing these entries from\n+        // the reference queue will make them eligible for reclamation.\n+        while (queue.poll() != null)\n+            ;\n+    }\n+\n+    /**\n+     * Returns a shallow copy of this HashMap. The keys and values\n+     * themselves are not cloned.\n+     */\n+    public synchronized Object clone() {\n+        try {\n+            expungeStaleEntries();\n+\n+            ConcurrentReferenceHashMap t = (ConcurrentReferenceHashMap)\n+                super.clone();\n+            t.table = new Entry[table.length];\n+            for (int i = table.length; i-- > 0;) {\n+                Entry e = table[i];\n+                if (e != null) {\n+                    t.table[i] = (Entry) e.clone(t.queue);\n+                    e = e.getNext();\n+                    for (Entry k = t.table[i]; e != null; e = e.getNext()) {\n+                        k.setNext((Entry) e.clone(t.queue));\n+                        k = k.getNext();\n+                    }\n+                }\n+            }\n+            t.keySet = null;\n+            t.entrySet = null;\n+            t.values = null;\n+            return t;\n+        } catch (CloneNotSupportedException e) {\n+            // this shouldn't happen, since we are Cloneable\n+            throw new InternalError();\n+        }\n+    }\n+\n+    // Views\n+\n+    private transient Set keySet = null;\n+    private transient Set entrySet = null;\n+    private transient Collection values = null;\n+\n+    /**\n+     * Returns a Set view of the keys contained in this HashMap. The Set is\n+     * backed by the HashMap, so changes to the HashMap are reflected in the\n+     * Set, and vice-versa. The Set supports element removal, which removes\n+     * the corresponding mapping from the HashMap, via the Iterator.remove,\n+     * Set.remove, removeAll retainAll, and clear operations. It does not\n+     * support the add or addAll operations.\n+     */\n+    public Set keySet() {\n+        if (keySet == null) {\n+            keySet = new java.util.AbstractSet() {\n+                public Iterator iterator() {\n+                    return new HashIterator(KEYS, table.length - 1);\n+                }\n+\n+                public int size() {\n+                    return count;\n+                }\n+\n+                public boolean contains(Object o) {\n+                    return containsKey(o);\n+                }\n+\n+                public boolean remove(Object o) {\n+                    return ConcurrentReferenceHashMap.this.remove(o) != null;\n+                }\n+\n+                public void clear() {\n+                    ConcurrentReferenceHashMap.this.clear();\n+                }\n+            };\n+        }\n+        return keySet;\n+    }\n+\n+    /**\n+     * Returns a Collection view of the values contained in this HashMap.\n+     * The Collection is backed by the HashMap, so changes to the HashMap are\n+     * reflected in the Collection, and vice-versa. The Collection supports\n+     * element removal, which removes the corresponding mapping from the\n+     * HashMap, via the Iterator.remove, Collection.remove, removeAll,\n+     * retainAll and clear operations. It does not support the add or addAll\n+     * operations.\n+     */\n+    public Collection values() {\n+        if (values == null) {\n+            values = new java.util.AbstractCollection() {\n+                public Iterator iterator() {\n+                    return new HashIterator(VALUES, table.length - 1);\n+                }\n+\n+                public int size() {\n+                    return count;\n+                }\n+\n+                public boolean contains(Object o) {\n+                    return containsValue(o);\n+                }\n+\n+                public void clear() {\n+                    ConcurrentReferenceHashMap.this.clear();\n+                }\n+            };\n+        }\n+        return values;\n+    }\n+\n+    /**\n+     * Returns a Collection view of the mappings contained in this HashMap.\n+     * Each element in the returned collection is a Map.Entry. The Collection\n+     * is backed by the HashMap, so changes to the HashMap are reflected in the\n+     * Collection, and vice-versa. The Collection supports element removal,\n+     * which removes the corresponding mapping from the HashMap, via the\n+     * Iterator.remove, Collection.remove, removeAll, retainAll and clear\n+     * operations. It does not support the add or addAll operations.\n+     *\n+     * @see Map.Entry\n+     */\n+    public Set entrySet() {\n+        if (entrySet == null) {\n+            entrySet = new java.util.AbstractSet() {\n+                public Iterator iterator() {\n+                    return new HashIterator(ENTRIES, table.length - 1);\n+                }\n+\n+                public boolean contains(Object o) {\n+                    if (!(o instanceof Map.Entry))\n+                        return false;\n+                    Map.Entry entry = (Map.Entry) o;\n+                    Object key = entry.getKey();\n+                    Entry[] tab = table;\n+                    int hash = hc(key);\n+                    int index = (hash & 0x7FFFFFFF) % tab.length;\n+\n+                    for (Entry e = tab[index]; e != null; e = e.getNext())\n+                        if (e.getHash() == hash && eq(e, entry))\n+                            return true;\n+                    return false;\n+                }\n+\n+                public boolean remove(Object o) {\n+                    if (!(o instanceof Map.Entry))\n+                        return false;\n+                    Map.Entry entry = (Map.Entry) o;\n+                    Object key = entry.getKey();\n+                    synchronized (ConcurrentReferenceHashMap.this) {\n+                        Entry[] tab = table;\n+                        int hash = hc(key);\n+                        int index = (hash & 0x7FFFFFFF) % tab.length;\n+\n+                        for (Entry e = tab[index], prev = null; e != null;\n+                            prev = e, e = e.getNext()) {\n+                            if (e.getHash() == hash && eq(e, entry)) {\n+                                if (prev != null)\n+                                    prev.setNext(e.getNext());\n+                                else\n+                                    tab[index] = e.getNext();\n+\n+                                count--;\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    }\n+                }\n+\n+                public int size() {\n+                    return count;\n+                }\n+\n+                public void clear() {\n+                    ConcurrentReferenceHashMap.this.clear();\n+                }\n+            };\n+        }\n+\n+        return entrySet;\n+    }\n+\n+    /**\n+     * Expunge stale entries from the table.\n+     */\n+    private void expungeStaleEntries() {\n+        Object r;\n+        while ((r = queue.poll()) != null) {\n+            Entry entry = (Entry) r;\n+            int hash = entry.getHash();\n+            Entry[] tab = table;\n+            int index = (hash & 0x7FFFFFFF) % tab.length;\n+\n+            for (Entry e = tab[index], prev = null; e != null;\n+                prev = e, e = e.getNext()) {\n+                if (e == entry) {\n+                    if (prev != null)\n+                        prev.setNext(e.getNext());\n+                        // otherwise put the bucket after us\n+                    else\n+                        tab[index] = e.getNext();\n+\n+                    count--;\n+                    if (keyType == HARD)\n+                        valueExpired(e.getKey());\n+                    else\n+                        keyExpired(e.getValue());\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * HashMap collision list entry.\n+     */\n+    private static interface Entry extends Map.Entry {\n+\n+        public int getHash();\n+\n+        public Entry getNext();\n+\n+        public void setNext(Entry next);\n+\n+        public Object clone(ReferenceQueue queue);\n+    }\n+\n+    /**\n+     * Hard entry.\n+     */\n+    private class HardEntry implements Entry {\n+\n+        private int hash;\n+        private Object key;\n+        private Object value;\n+        private Entry next;\n+\n+        HardEntry(int hash, Object key, Object value, Entry next) {\n+            this.hash = hash;\n+            this.key = key;\n+            this.value = value;\n+            this.next = next;\n+        }\n+\n+        public int getHash() {\n+            return hash;\n+        }\n+\n+        public Entry getNext() {\n+            return next;\n+        }\n+\n+        public void setNext(Entry next) {\n+            this.next = next;\n+        }\n+\n+        public Object clone(ReferenceQueue queue) {\n+            // It is the callers responsibility to set the next field\n+            // correctly.\n+            return new HardEntry(hash, key, value, null);\n+        }\n+\n+        // Map.Entry Ops\n+\n+        public Object getKey() {\n+            return key;\n+        }\n+\n+        public Object getValue() {\n+            return value;\n+        }\n+\n+        public Object setValue(Object value) {\n+            Object oldValue = this.value;\n+            this.value = value;\n+            return oldValue;\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (!(o instanceof Map.Entry)) return false;\n+            Map.Entry e = (Map.Entry) o;\n+\n+            Object k1 = key;\n+            Object k2 = e.getKey();\n+\n+            return (k1 == null ? k2 == null : eq(k1, k2)) &&\n+                (value == null ? e.getValue() == null\n+                    : eq(value, e.getValue()));\n+        }\n+\n+        public int hashCode() {\n+            return hash ^ (value == null ? 0 : value.hashCode());\n+        }\n+\n+        public String toString() {\n+            return key + \"=\" + value.toString();\n+        }\n+    }\n+\n+    /**\n+     * Weak entry.\n+     */\n+    private class WeakEntry extends WeakReference implements Entry {\n+\n+        private int hash;\n+        private Object hard;\n+        private boolean keyRef;\n+        private Entry next;\n+\n+        WeakEntry(int hash, Object key, Object value, boolean keyRef,\n+            Entry next, ReferenceQueue queue) {\n+            super((keyRef) ? key : value, queue);\n+            this.hash = hash;\n+            this.hard = (keyRef) ? value : key;\n+            this.keyRef = keyRef;\n+            this.next = next;\n+        }\n+\n+        public int getHash() {\n+            return hash;\n+        }\n+\n+        public Entry getNext() {\n+            return next;\n+        }\n+\n+        public void setNext(Entry next) {\n+            this.next = next;\n+        }\n+\n+        public Object clone(ReferenceQueue queue) {\n+            // It is the callers responsibility to set the next field\n+            // correctly.\n+            return new WeakEntry(hash, getKey(), getValue(), keyRef, null,\n+                queue);\n+        }\n+\n+        // Map.Entry Ops\n+\n+        public Object getKey() {\n+            return (keyRef) ? super.get() : hard;\n+        }\n+\n+        public Object getValue() {\n+            return (keyRef) ? hard : super.get();\n+        }\n+\n+        public Object setValue(Object value) {\n+            if (!keyRef)\n+                throw new Error(\"Attempt to reset reference value.\");\n+\n+            Object oldValue = hard;\n+            hard = value;\n+            return oldValue;\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (!(o instanceof Map.Entry)) return false;\n+            Map.Entry e = (Map.Entry) o;\n+            return eq(getKey(), e.getKey()) && eq(getValue(), e.getValue());\n+        }\n+\n+        public int hashCode() {\n+            Object val = getValue();\n+            return hash ^ (val == null ? 0 : val.hashCode());\n+        }\n+\n+        public String toString() {\n+            return getKey() + \"=\" + getValue();\n+        }\n+    }\n+\n+    /**\n+     * Soft entry.\n+     */\n+    private class SoftEntry extends SoftReference implements Entry {\n+\n+        private int hash;\n+        private Object hard;\n+        private boolean keyRef;\n+        private Entry next;\n+\n+        SoftEntry(int hash, Object key, Object value, boolean keyRef,\n+            Entry next, ReferenceQueue queue) {\n+            super((keyRef) ? key : value, queue);\n+            this.hash = hash;\n+            this.hard = (keyRef) ? value : key;\n+            this.keyRef = keyRef;\n+            this.next = next;\n+        }\n+\n+        public int getHash() {\n+            return hash;\n+        }\n+\n+        public Entry getNext() {\n+            return next;\n+        }\n+\n+        public void setNext(Entry next) {\n+            this.next = next;\n+        }\n+\n+        public Object clone(ReferenceQueue queue) {\n+            // It is the callers responsibility to set the next field\n+            // correctly.\n+            return new SoftEntry(hash, getKey(), getValue(), keyRef, null,\n+                queue);\n+        }\n+\n+        // Map.Entry Ops\n+\n+        public Object getKey() {\n+            return (keyRef) ? super.get() : hard;\n+        }\n+\n+        public Object getValue() {\n+            return (keyRef) ? hard : super.get();\n+        }\n+\n+        public Object setValue(Object value) {\n+            if (!keyRef)\n+                throw new Error(\"Attempt to reset reference value.\");\n+\n+            Object oldValue = hard;\n+            hard = value;\n+            return oldValue;\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (!(o instanceof Map.Entry)) return false;\n+            Map.Entry e = (Map.Entry) o;\n+            return eq(getKey(), e.getKey()) && eq(getValue(), e.getValue());\n+        }\n+\n+        public int hashCode() {\n+            Object val = getValue();\n+            return hash ^ (val == null ? 0 : val.hashCode());\n+        }\n+\n+        public String toString() {\n+            return getKey() + \"=\" + getValue();\n+        }\n+    }\n+\n+    // Types of Enumerations/Iterations\n+    private static final int KEYS = 0;\n+    private static final int VALUES = 1;\n+    private static final int ENTRIES = 2;\n+\n+    /**\n+     * Map iterator.\n+     */\n+    private class HashIterator implements Iterator {\n+\n+        final Entry[] table = ConcurrentReferenceHashMap.this.table;\n+        final int type;\n+        int startIndex;\n+        int stopIndex = 0;\n+        int index;\n+        Entry entry = null;\n+        Entry lastReturned = null;\n+\n+        HashIterator(int type, int startIndex) {\n+            this.type = type;\n+            this.startIndex = startIndex;\n+            index = startIndex;\n+        }\n+\n+        public boolean hasNext() {\n+            if (entry != null) {\n+                return true;\n+            }\n+            while (index >= stopIndex) {\n+                if ((entry = table[index--]) != null) {\n+                    return true;\n+                }\n+            }\n+            if (stopIndex == 0) {\n+                index = table.length - 1;\n+                stopIndex = startIndex + 1;\n+                while (index >= stopIndex) {\n+                    if ((entry = table[index--]) != null) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+\n+        public Object next() {\n+            if (!hasNext())\n+                throw new NoSuchElementException();\n+            Entry e = lastReturned = entry;\n+            entry = e.getNext();\n+            return type == KEYS ? e.getKey()\n+                : (type == VALUES ? e.getValue() : e);\n+        }\n+\n+        public void remove() {\n+            if (lastReturned == null)\n+                throw new IllegalStateException();\n+            synchronized (ConcurrentReferenceHashMap.this) {\n+                Entry[] tab = ConcurrentReferenceHashMap.this.table;\n+                int index = (lastReturned.getHash() & 0x7FFFFFFF) % tab.length;\n+\n+                for (Entry e = tab[index], prev = null; e != null;\n+                    prev = e, e = e.getNext()) {\n+                    if (e == lastReturned) {\n+                        if (prev == null)\n+                            tab[index] = e.getNext();\n+                        else\n+                            prev.setNext(e.getNext());\n+                        count--;\n+                        lastReturned = null;\n+                        return;\n+                    }\n+                }\n+                throw new Error(\"Iterated off table when doing remove\");\n+            }\n+        }\n+    }\n+\n+    int capacity() {\n+        return table.length;\n+    }\n+\n+    float loadFactor() {\n+        return loadFactor;\n+    }\n+}"},{"sha":"27185d88af14adf57eb27596c0bb63df24a77040","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/ConcurrentReferenceHashSet.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util.concurrent;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.commons.collections.set.MapBackedSet;\n+\n+/**\n+ * A concurrent set whose values may be stored as weak or soft references. If\n+ * the constructor is invoked with <code>refType</code> set to {@link #HARD},\n+ * this uses a JDK1.5 {@link ConcurrentHashMap} under the covers. Otherwise,\n+ * it uses a {@link ConcurrentReferenceHashMap}.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ConcurrentReferenceHashSet implements Set, Serializable {\n+\n+    /**\n+     * Hard reference marker.\n+     */\n+    public static final int HARD = 0;\n+\n+    /**\n+     * Soft reference marker.\n+     */\n+    public static final int SOFT = 1;\n+\n+    /**\n+     * Weak reference marker.\n+     */\n+    public static final int WEAK = 2;\n+\n+    private static final Object DUMMY_VAL = new Object();\n+\n+    private final Set _set;\n+\n+    /**\n+     * Construct a set with the given reference type.\n+     */\n+    public ConcurrentReferenceHashSet(int refType) {\n+        if (refType == HARD)\n+            _set = MapBackedSet.decorate(new ConcurrentHashMap(), DUMMY_VAL);\n+        else {\n+            int mapRefType = (refType == WEAK) ? ConcurrentReferenceHashMap.WEAK\n+                : ConcurrentReferenceHashMap.SOFT;\n+            _set = MapBackedSet.decorate(new ConcurrentReferenceHashMap\n+                (mapRefType, ConcurrentReferenceHashMap.HARD), DUMMY_VAL);\n+        }\n+    }\n+\n+    public boolean add(Object obj) {\n+        return _set.add(obj);\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        return _set.addAll(coll);\n+    }\n+\n+    public void clear() {\n+        _set.clear();\n+    }\n+\n+    public boolean contains(Object obj) {\n+        return _set.contains(obj);\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        return _set.containsAll(coll);\n+    }\n+\n+    public boolean isEmpty() {\n+        return _set.isEmpty();\n+    }\n+\n+    public Iterator iterator() {\n+        return _set.iterator();\n+    }\n+\n+    public boolean remove(Object obj) {\n+        return _set.remove(obj);\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        return _set.removeAll(coll);\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        return _set.retainAll(coll);\n+    }\n+\n+    public int size() {\n+        return _set.size();\n+    }\n+\n+    public Object[] toArray() {\n+        return _set.toArray();\n+    }\n+\n+    public Object[] toArray(Object[] arr) {\n+        return _set.toArray(arr);\n+    }\n+\n+    public int hashCode() {\n+        return _set.hashCode();\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj instanceof ConcurrentReferenceHashSet)\n+            obj = ((ConcurrentReferenceHashSet) obj)._set;\n+        return _set.equals(obj);\n+    }\n+}"},{"sha":"08c6c3cc7cb13f1a220be2176cc25026a2debef9","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","status":"added","additions":416,"deletions":0,"changes":416,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/NullSafeConcurrentHashMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,416 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.util.concurrent;\r\n+\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.Enumeration;\r\n+import java.util.Set;\r\n+import java.util.Collection;\r\n+import java.util.AbstractSet;\r\n+import java.util.Iterator;\r\n+import java.util.AbstractCollection;\r\n+import java.util.Random;\r\n+import java.util.HashSet;\r\n+import java.util.TreeSet;\r\n+\r\n+import org.apache.commons.collections.set.MapBackedSet;\r\n+\r\n+/**\r\n+ * A subclass of {@link ConcurrentHashMap} that allows null keys and values.\r\n+ * In exchange, it weakens the contract of {@link #putIfAbsent} and the other\r\n+ * concurrent methods added in {@link #ConcurrentHashMap}.\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class NullSafeConcurrentHashMap extends ConcurrentHashMap {\r\n+\r\n+    private enum Markers {\r\n+        NULL,\r\n+        MAP_BACKED_SET_DUMMY_VAL\r\n+    }\r\n+\r\n+    // The second argument is used within MapBackedSet as the value for\r\n+    // all the key-val pairs that are put into the underlying Map. This\r\n+    // is required for our usage since ConcurrentHashMap does not allow\r\n+    // null values.\r\n+    private Set randomKeys = MapBackedSet.decorate(\r\n+        new ConcurrentHashMap(), Markers.MAP_BACKED_SET_DUMMY_VAL);\r\n+\r\n+    private Random random = new Random();\r\n+\r\n+    public NullSafeConcurrentHashMap(int size, float load,\r\n+        int concurrencyLevel) {\r\n+        super(size, load, concurrencyLevel);\r\n+    }\r\n+\r\n+    public NullSafeConcurrentHashMap() {\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns internal representation for object.\r\n+     */\r\n+    private static Object maskNull(Object o) {\r\n+        return (o == null ? Markers.NULL : o);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns object represented by specified internal representation.\r\n+     */\r\n+    private static Object unmaskNull(Object o) {\r\n+        return (o == Markers.NULL ? null : o);\r\n+    }\r\n+\r\n+    public Entry removeRandom() {\r\n+        // this doesn't just use randomEntryIterator() because that iterator\r\n+        // has weaker concurrency guarantees than this method. In particular,\r\n+        // this method will continue to attempt to remove random entries even\r\n+        // as other threads remove the same entries, whereas the random\r\n+        // iterator may return values that have been removed.\r\n+\r\n+        for (Iterator iter = randomKeys.iterator(); iter.hasNext(); ) {\r\n+            // randomKeys contains null-masked data\r\n+            Object key = iter.next();\r\n+            if (key != null && randomKeys.remove(key)) {\r\n+                Object val = super.remove(key);\r\n+                if (val != null)\r\n+                    return new EntryImpl(unmaskNull(key), unmaskNull(val));\r\n+            }\r\n+        }\r\n+\r\n+        // if randomKeys is empty, fall back to non-random behavior.\r\n+        for (Iterator iter = super.keySet().iterator(); iter.hasNext(); ) {\r\n+            Object key = iter.next();\r\n+            if (key == null)\r\n+                continue;\r\n+            Object val = super.remove(key);\r\n+            if (val != null)\r\n+                return new EntryImpl(unmaskNull(key), unmaskNull(val));\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * The returned data structure should not be shared among multiple\r\n+     * threads.\r\n+     */\r\n+    public Iterator<Entry> randomEntryIterator() {\r\n+        return new Iterator<Entry>() {\r\n+\r\n+            Iterator randomIter = randomKeys.iterator();\r\n+            Iterator nonRandomIter = NullSafeConcurrentHashMap.super.keySet()\r\n+                .iterator();\r\n+\r\n+            Set returned = new HashSet();\r\n+            Entry next;\r\n+            boolean nextSet = false;\r\n+\r\n+            public boolean hasNext() {\r\n+                // we've set the next value and we haven't returned it yet\r\n+                if (nextSet)\r\n+                    return true;\r\n+\r\n+                // compute the next value. If the computation returns null,\r\n+                // return false. Else, store the next value and return true.\r\n+                Object nextKey;\r\n+                Object nextValue;\r\n+                if (randomIter.hasNext()) {\r\n+                    nextKey = randomIter.next();\r\n+                    nextValue = NullSafeConcurrentHashMap.super.get(nextKey);\r\n+                    if (nextValue != null) {\r\n+                        returned.add(nextKey);\r\n+                        next = new EntryImpl(unmaskNull(nextKey),\r\n+                            unmaskNull(nextValue));\r\n+                        nextSet = true;\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+\r\n+                while (nonRandomIter.hasNext()) {\r\n+                    nextKey = nonRandomIter.next();\r\n+\r\n+                    if (returned.contains(nextKey))\r\n+                        continue;\r\n+\r\n+                    nextValue = NullSafeConcurrentHashMap.super.get(nextKey);\r\n+                    if (nextValue != null) {\r\n+                        returned.add(nextKey);\r\n+                        next = new EntryImpl(unmaskNull(nextKey),\r\n+                            unmaskNull(nextValue));\r\n+                        nextSet = true;\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                return false;\r\n+            }\r\n+\r\n+            public Entry next() {\r\n+                // hasNext() will initialize this.next\r\n+                if (!nextSet && !hasNext())\r\n+                    return null;\r\n+\r\n+                // if we get here, then we're about to return a next value\r\n+                nextSet = false;\r\n+                \r\n+                if (containsKey(next.getKey()))\r\n+                    return next;\r\n+\r\n+                // something has changed since the last iteration (presumably\r\n+                // due to multi-threaded access to the underlying data\r\n+                // structure); recurse\r\n+                return next();\r\n+            }\r\n+\r\n+            public void remove() {\r\n+                throw new UnsupportedOperationException();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object remove(Object key) {\r\n+        Object maskedKey = maskNull(key);\r\n+        Object val = unmaskNull(super.remove(maskedKey));\r\n+        randomKeys.remove(maskedKey);\r\n+        return val;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean remove(Object key, Object value) {\r\n+        Object maskedKey = maskNull(key);\r\n+        boolean val = super.remove(maskedKey, maskNull(value));\r\n+        randomKeys.remove(maskedKey);\r\n+        return val;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean replace(Object key, Object oldValue, Object newValue) {\r\n+        return super.replace(maskNull(key), maskNull(oldValue),\r\n+            maskNull(newValue));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object replace(Object key, Object value) {\r\n+        return unmaskNull(super.replace(maskNull(key), maskNull(value)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object putIfAbsent(Object key, Object value) {\r\n+        Object maskedKey = maskNull(key);\r\n+        Object superVal = super.putIfAbsent(maskedKey, maskNull(value));\r\n+        addRandomKey(maskedKey);\r\n+        return unmaskNull(superVal);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object put(Object key, Object value) {\r\n+        Object maskedKey = maskNull(key);\r\n+        Object superVal = super.put(maskedKey, maskNull(value));\r\n+        addRandomKey(maskedKey);\r\n+        return unmaskNull(superVal);\r\n+    }\r\n+\r\n+    /**\r\n+     * Potentially adds <code>maskedKey</ccode> to the set of random keys\r\n+     * to be removed by {@link #removeRandom()}.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    private void addRandomKey(Object maskedKey) {\r\n+        // Add one in every three keys to the set. Only do this when\r\n+        // there are less than 16 elements in the random key set; this\r\n+        // means that the algorithm will be pseudo-random for up to\r\n+        // 16 removes (either via removeRandom() or normal remove()\r\n+        // calls) that have no intervening put() calls.\r\n+        if (random != null && randomKeys.size() < 16 && random.nextInt(10) < 3)\r\n+            randomKeys.add(maskedKey);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object get(Object key) {\r\n+        return unmaskNull(super.get(maskNull(key)));\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean containsKey(Object key) {\r\n+        return super.containsKey(maskNull(key));\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean containsValue(Object value) {\r\n+        return super.containsValue(maskNull(value));\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean contains(Object value) {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Enumeration elements() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set entrySet() {\r\n+        return new TranslatingSet(super.entrySet()) {\r\n+            protected Object unmask(Object internal) {\r\n+                final Entry e = (Entry) internal;\r\n+                return new Entry() {\r\n+\r\n+                    public Object getKey() {\r\n+                        return unmaskNull(e.getKey());\r\n+                    }\r\n+\r\n+                    public Object getValue() {\r\n+                        return unmaskNull(e.getValue());\r\n+                    }\r\n+\r\n+                    public Object setValue(Object value) {\r\n+                        return unmaskNull(e.setValue(maskNull(value)));\r\n+                    }\r\n+\r\n+                    @Override\r\n+                    public int hashCode() {\r\n+                        return e.hashCode();\r\n+                    }\r\n+                };\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    @Override\r\n+    public Enumeration keys() {\r\n+        throw new UnsupportedOperationException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set keySet() {\r\n+        return new TranslatingSet(super.keySet()) {\r\n+            protected Object unmask(Object internal) {\r\n+                return unmaskNull(internal);\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    @Override\r\n+    public Collection values() {\r\n+        return new TranslatingCollection(super.values()) {\r\n+\r\n+            protected Object unmask(Object internal) {\r\n+                return unmaskNull(internal);\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    private abstract class TranslatingSet extends AbstractSet {\r\n+\r\n+        private Set backingSet;\r\n+\r\n+        private TranslatingSet(Set backing) {\r\n+            this.backingSet = backing;\r\n+        }\r\n+\r\n+        protected abstract Object unmask(Object internal);\r\n+\r\n+        public Iterator iterator() {\r\n+            final Iterator iterator = backingSet.iterator();\r\n+            return new Iterator() {\r\n+                public boolean hasNext() {\r\n+                    return iterator.hasNext();\r\n+                }\r\n+\r\n+                public Object next() {\r\n+                    return unmask(iterator.next());\r\n+                }\r\n+\r\n+                public void remove() {\r\n+                    iterator.remove();\r\n+                }\r\n+            };\r\n+        }\r\n+\r\n+        public int size() {\r\n+            return backingSet.size();\r\n+        }\r\n+    }\r\n+\r\n+    private abstract class TranslatingCollection extends AbstractCollection {\r\n+\r\n+        private Collection backingCollection;\r\n+\r\n+        private TranslatingCollection(Collection backing) {\r\n+            this.backingCollection = backing;\r\n+        }\r\n+\r\n+        protected abstract Object unmask(Object internal);\r\n+\r\n+        public Iterator iterator() {\r\n+            final Iterator iterator = backingCollection.iterator();\r\n+            return new Iterator() {\r\n+                public boolean hasNext() {\r\n+                    return iterator.hasNext();\r\n+                }\r\n+\r\n+                public Object next() {\r\n+                    return unmask(iterator.next());\r\n+                }\r\n+\r\n+                public void remove() {\r\n+                    iterator.remove();\r\n+                }\r\n+            };\r\n+        }\r\n+\r\n+        public int size() {\r\n+            return backingCollection.size();\r\n+        }\r\n+    }\r\n+\r\n+    private class EntryImpl implements Entry {\r\n+\r\n+        final Object key;\r\n+        final Object val;\r\n+\r\n+        private EntryImpl(Object key, Object val) {\r\n+            this.key = key;\r\n+            this.val = val;\r\n+        }\r\n+\r\n+        public Object getKey() {\r\n+            return key;\r\n+        }\r\n+\r\n+        public Object getValue() {\r\n+            return val;\r\n+        }\r\n+\r\n+        public Object setValue(Object value) {\r\n+            throw new UnsupportedOperationException();\r\n+        }\r\n+    }\r\n+\r\n+    public interface KeyFilter {\r\n+\r\n+        /**\r\n+         * @param key may be null\r\n+         * @return whether or not <code>key</code> shuold be excluded\r\n+         */\r\n+        public boolean exclude(Object key);\r\n+    }\r\n+}\r"},{"sha":"c31e26ddcd1ec3546f8b101e744d4deab55d41ba","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/SizedConcurrentHashMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,128 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.util.concurrent;\r\n+\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.Map;\r\n+import java.util.Iterator;\r\n+import java.util.Set;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.Serializable;\r\n+\r\n+import org.apache.openjpa.lib.util.SizedMap;\r\n+\r\n+/**\r\n+ * An implementation of {@link SizedMap} that uses JDK1.5 concurrency primitives\r\n+ *\r\n+ * @since 1.1.0\r\n+ */\r\n+public class SizedConcurrentHashMap\r\n+    extends NullSafeConcurrentHashMap\r\n+    implements SizedMap, ConcurrentMap, Serializable {\r\n+\r\n+    private int maxSize;\r\n+\r\n+    /**\r\n+     * @param size the maximum size of this map. If additional elements are\r\n+     * put into the map, overflow will be removed via calls to\r\n+     * {@link #overflowRemoved}.\r\n+     * @param load the load factor for the underlying map\r\n+     * @param concurrencyLevel the concurrency level for the underlying map\r\n+     *\r\n+     * @see ConcurrentHashMap\r\n+     */\r\n+    public SizedConcurrentHashMap(int size, float load, int concurrencyLevel) {\r\n+        super(size, load, concurrencyLevel);\r\n+        setMaxSize(size);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object putIfAbsent(Object key, Object value) {\r\n+        if (maxSize != Integer.MAX_VALUE)\r\n+            removeOverflow(true);\r\n+        return super.putIfAbsent(key, value);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Object put(Object key, Object value) {\r\n+        if (maxSize != Integer.MAX_VALUE)\r\n+            removeOverflow(true);\r\n+        return super.put(key, value);\r\n+    }\r\n+\r\n+    public int getMaxSize() {\r\n+        return maxSize;\r\n+    }\r\n+\r\n+    public void setMaxSize(int max) {\r\n+        if (max < 0)\r\n+            throw new IllegalArgumentException(String.valueOf(max));\r\n+        maxSize = max;\r\n+\r\n+        removeOverflow(false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Equivalent to <code>removeOverflow(false)</code>.\r\n+     */\r\n+    protected void removeOverflow() {\r\n+        removeOverflow(false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Removes overflow. If <code>forPut</code> is <code>true</code>, then\r\n+     * this uses <code>size() + 1</code> when computing size.\r\n+     */\r\n+    protected void removeOverflow(boolean forPut) {\r\n+        int sizeToCompareTo = forPut ? maxSize - 1 : maxSize;\r\n+        while (size() > sizeToCompareTo) {\r\n+            Entry entry = removeRandom();\r\n+            // if removeRandom() returns null, break out of the loop. Of course,\r\n+            // since we're not locking, the size might not actually be null\r\n+            // when we do this. But this prevents weird race conditions from\r\n+            // putting this thread into more loops.\r\n+            if (entry == null)\r\n+                break;\r\n+            overflowRemoved(entry.getKey(), entry.getValue());\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isFull() {\r\n+        return size() >= maxSize;\r\n+    }\r\n+\r\n+    /**\r\n+     * This implementation does nothing.\r\n+     */\r\n+    public void overflowRemoved(Object key, Object value) {\r\n+    }\r\n+\r\n+    private void writeObject(ObjectOutputStream out) throws IOException {\r\n+        out.defaultWriteObject();\r\n+        out.writeInt(maxSize);\r\n+    }\r\n+\r\n+    private void readObject(ObjectInputStream in)\r\n+        throws IOException, ClassNotFoundException {\r\n+        in.defaultReadObject();\r\n+        maxSize = in.readInt();\r\n+    }\r\n+}\r"},{"sha":"d1f91c7074e545fc6efd2be11843b986bb90c9ba","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/concurrent/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,23 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<html>\n+<body>\n+<p><strong>Concurrent Utilities</strong></p>\n+</body>\n+</html>"},{"sha":"e5447b95149044db9f954fd51d10a2f1c62cf635","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/util/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,23 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<html>\n+<body>\n+<p><strong>General Utilities</strong></p>\n+</body>\n+</html>"},{"sha":"3aa091e19dd6379c844195fae9c72d8b8b59f391","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Commentable.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.xml;\n+\n+/**\n+ * Implementations of this interface can be adorned with comments.\n+ *\n+ * @nojavadoc\n+ * @since 0.3.3\n+ */\n+public interface Commentable {\n+\n+    public static final String[] EMPTY_COMMENTS = new String[0];\n+\n+    /**\n+     * Set comments.\n+     */\n+    public void setComments(String[] comments);\n+\n+    /**\n+     * Return comments, or empty array if none.\n+     */\n+    public String[] getComments();\n+}"},{"sha":"28a64e8528debd94e4e9fccb53dc2d64c3a49233","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","status":"added","additions":278,"deletions":0,"changes":278,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/DocTypeReader.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,278 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.xml;\n+\n+import java.io.IOException;\n+import java.io.PushbackReader;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+/**\n+ * The DocTypeReader can be used to dynamically include a\n+ * <code>DOCTYPE</code> declaration in an XML stream. Often it is\n+ * inconvenient to specify a <code>DOCTYPE</code> in XML files -- you many\n+ * want the option of parsing the files without reading the DTD, the files\n+ * may move around, making placing a <code>DOCTYPE</code> path to the DTD in\n+ * them unattractive, and you may have many files, making an in-line include\n+ * of the DTD unattractive as well. This class makes\n+ * it possible to maintain XML files without any <code>DOCTYPE</code>\n+ * declaration, then dynamically include the <code>DOCTYPE</code> information\n+ * at runtime.\n+ * If the XML stream already contains a <code>DOCTYPE</code> declaration,\n+ * the reader will not add an additional one.\n+ * The <code>DOCTYPE</code> information given to the reader will be placed\n+ * in the XML stream it wraps just before the root element of the document.\n+ * Note that all methods other than the various forms of <code>read</code>\n+ * apply onto the underlying XML stream and should not be used until the\n+ * header and doc type have been read.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class DocTypeReader extends Reader {\n+\n+    private Reader _xml = null;\n+    private Reader _docType = null;\n+\n+    // use to hold all header information until the doctype dec should be\n+    // inserted\n+    private char[] _header = null;\n+    private int _headerPos = 0;\n+\n+    /**\n+     * Construct the reader with an XML stream, and set the\n+     * <code>DOCTYPE</code> information to be included. The given\n+     * reader should access an input source containing the exact declaration\n+     * to include, such as:<br />\n+     * <code>&lt;DOCTYPE schedule SYSTEM \"schedule.dtd\"&gt;</code><br />\n+     * <code>&lt;DOCTYPE html PUBLIC \"-//W3C//DTD XHTML ...&gt;</code><br />\n+     * <code>&lt;DOCTYPE stock-price [ &lt;ELEMENT symb ... ]&gt;</code><br />\n+     * If the reader is null, no <code>DOCTYPE</code> information will be\n+     * included in the stream.\n+     */\n+    public DocTypeReader(Reader xml, Reader docType) throws IOException {\n+        _docType = docType;\n+        _xml = bufferHeader(xml);\n+    }\n+\n+    public int read() throws IOException {\n+        int ch = readHeader();\n+        if (ch != -1)\n+            return ch;\n+\n+        ch = readDocType();\n+        if (ch != -1)\n+            return ch;\n+\n+        return _xml.read();\n+    }\n+\n+    public int read(char[] buf) throws IOException {\n+        return read(buf, 0, buf.length);\n+    }\n+\n+    public int read(char[] buf, int off, int len) throws IOException {\n+        int headerRead = readHeader(buf, off, len);\n+        off += headerRead;\n+        len -= headerRead;\n+\n+        int docRead = readDocType(buf, off, len);\n+        off += docRead;\n+        len -= docRead;\n+\n+        return headerRead + docRead + _xml.read(buf, off, len);\n+    }\n+\n+    public long skip(long len) throws IOException {\n+        return _xml.skip(len);\n+    }\n+\n+    public boolean ready() throws IOException {\n+        return _xml.ready();\n+    }\n+\n+    public boolean markSupported() {\n+        return _xml.markSupported();\n+    }\n+\n+    public void mark(int readAheadLimit) throws IOException {\n+        _xml.mark(readAheadLimit);\n+    }\n+\n+    public void reset() throws IOException {\n+        _xml.reset();\n+    }\n+\n+    public void close() throws IOException {\n+        _xml.close();\n+        if (_docType != null)\n+            _docType.close();\n+    }\n+\n+    /**\n+     * Buffer all text until the doc type declaration should be inserted.\n+     */\n+    private Reader bufferHeader(Reader origXML) throws IOException {\n+        // don't bother if no doc type declaration\n+        if (_docType == null) {\n+            _header = new char[0];\n+            return origXML;\n+        }\n+\n+        // create buffer\n+        StringWriter writer = new StringWriter();\n+        PushbackReader xml = new PushbackReader(origXML, 3);\n+        int ch, ch2, ch3;\n+        boolean comment;\n+\n+        while (true) {\n+            // read leading space\n+            for (ch = xml.read(); ch != -1\n+                && Character.isWhitespace((char) ch); ch = xml.read())\n+                writer.write(ch);\n+            if (ch == -1)\n+                return headerOnly(writer.toString());\n+\n+            // if not XML, finish\n+            if (ch != '<') {\n+                xml.unread(ch);\n+                _header = writer.toString().toCharArray();\n+                return xml;\n+            }\n+\n+            // if the root element, finish\n+            ch = xml.read();\n+            if (ch != '?' && ch != '!') {\n+                xml.unread(ch);\n+                xml.unread('<');\n+                _header = writer.toString().toCharArray();\n+                return xml;\n+            }\n+\n+            // if a doc type element, finish\n+            ch2 = xml.read();\n+            if (ch == '!' && ch2 == 'D') {\n+                xml.unread(ch2);\n+                xml.unread(ch);\n+                xml.unread('<');\n+                _header = writer.toString().toCharArray();\n+                _docType = null; // make sure doc type not included\n+                return xml;\n+            }\n+\n+            // is this a comment?\n+            ch3 = xml.read();\n+            comment = ch == '!' && ch2 == '-' && ch3 == '-';\n+\n+            // place everything read into the header material\n+            writer.write('<');\n+            writer.write(ch);\n+            writer.write(ch2);\n+            writer.write(ch3);\n+\n+            // read until the next '>' or '-->' if a comment\n+            ch2 = 0;\n+            ch3 = 0;\n+            while ((ch = xml.read()) != -1) {\n+                writer.write(ch);\n+\n+                if ((!comment && ch == '>')\n+                    || (comment && ch == '>' && ch2 == '-' && ch3 == '-'))\n+                    break;\n+\n+                // track last two chars so we can tell if comment is ending\n+                ch3 = ch2;\n+                ch2 = ch;\n+            }\n+            if (ch == -1)\n+                return headerOnly(writer.toString());\n+\n+            // read the space after the declaration\n+            for (ch = xml.read(); ch != -1\n+                && Character.isWhitespace((char) ch); ch = xml.read())\n+                writer.write(ch);\n+            if (ch == -1)\n+                return headerOnly(writer.toString());\n+            xml.unread(ch);\n+        }\n+    }\n+\n+    /**\n+     * If the stream contained only space, think of it as pure XML with no\n+     * header for consistency with the other methods.\n+     */\n+    private Reader headerOnly(String header) {\n+        _header = new char[0];\n+        _docType = null;\n+        return new StringReader(header);\n+    }\n+\n+    /**\n+     * Return a single character from the buffered header, or -1 if none.\n+     */\n+    private int readHeader() {\n+        if (_headerPos == _header.length)\n+            return -1;\n+        return _header[_headerPos++];\n+    }\n+\n+    /**\n+     * Read from the buffered header to the given array, returning the\n+     * number of characters read.\n+     */\n+    private int readHeader(char[] buf, int off, int len) {\n+        int read = 0;\n+        for (; len > 0 && _headerPos < _header.length; read++, off++, len--)\n+            buf[off] = _header[_headerPos++];\n+\n+        return read;\n+    }\n+\n+    /**\n+     * Return a single character from the doc type declaration, or -1 if none.\n+     */\n+    private int readDocType() throws IOException {\n+        if (_docType == null)\n+            return -1;\n+\n+        int ch = _docType.read();\n+        if (ch == -1)\n+            _docType = null;\n+\n+        return ch;\n+    }\n+\n+    /**\n+     * Read from the doc type declaration to the given array, returning the\n+     * number of characters read.\n+     */\n+    private int readDocType(char[] buf, int off, int len) throws IOException {\n+        if (_docType == null)\n+            return 0;\n+\n+        int read = _docType.read(buf, off, len);\n+        if (read < len)\n+            _docType = null;\n+        if (read == -1)\n+            read = 0;\n+\n+        return read;\n+    }\n+}"},{"sha":"8390f78c10190626d73a70e4a2a0c2c0517322e5","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/Location.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.xml;\n+\n+import java.text.MessageFormat;\n+\n+import org.xml.sax.Locator;\n+import org.apache.openjpa.lib.util.Localizer;\n+import serp.util.Numbers;\n+\n+/**\n+ * @author Stephen Kim\n+ * @nojavadoc\n+ */\n+public class Location {\n+\n+    private static final Localizer _loc = Localizer.forPackage(Location.class);\n+\n+    private boolean _nullOnNoLocator = false;\n+    private Locator _locator = null;\n+\n+    public Location() {\n+        this(false);\n+    }\n+\n+    public Location(boolean nullOnNoLocator) {\n+        _nullOnNoLocator = nullOnNoLocator;\n+    }\n+\n+    /**\n+     * for customized responses\n+     */\n+    public String getLocation(String format) {\n+        if (_locator == null) {\n+            if (_nullOnNoLocator)\n+                return null;\n+            return _loc.get(\"no-locator\").getMessage();\n+        }\n+        return MessageFormat.format(format, new Object []{\n+            Numbers.valueOf(_locator.getLineNumber()),\n+            Numbers.valueOf(_locator.getColumnNumber()), _locator.getPublicId(),\n+            _locator.getSystemId() });\n+    }\n+\n+    public String getLocation() {\n+        return getLocation(_loc.get(\"location-format\").getMessage());\n+    }\n+\n+    public void setLocator(Locator locator) {\n+        _locator = locator;\n+    }\n+\n+    public Locator getLocator() {\n+        return _locator;\n+    }\n+\n+    public void setNullOnNoLocator(boolean val) {\n+        _nullOnNoLocator = val;\n+    }\n+\n+    public boolean isNullOnNoLocator() {\n+        return _nullOnNoLocator;\n+    }\n+}"},{"sha":"717abdef76ffb8b9f251fd8f40f60213d24b8dd5","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/ValidatingErrorHandler.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.xml;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+/**\n+ * ErrorHandler implementation which overrides the default\n+ * behavior of ignoring parse errors to throw a {@link SAXException} instead.\n+ * This handler is used by the validating parsers of the {@link XMLFactory}.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class ValidatingErrorHandler implements ErrorHandler {\n+\n+    public void warning(SAXParseException e) throws SAXException {\n+        throw e;\n+    }\n+\n+    public void error(SAXParseException e) throws SAXException {\n+        throw e;\n+    }\n+\n+    public void fatalError(SAXParseException e) throws SAXException {\n+        throw e;\n+    }\n+}"},{"sha":"90432bf242f8c6140e08f164846fc428f745ba04","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.xml;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n+import org.w3c.dom.Document;\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The XMLFactory produces validating and non-validating DOM level 2\n+ * and SAX level 2 parsers and XSL transformers through JAXP. It uses\n+ * caching to avoid repeatedly paying the relatively expensive runtime costs\n+ * associated with resolving the correct XML implementation through the\n+ * JAXP configuration mechanisms.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class XMLFactory {\n+\n+    // cache parsers and transformers in all possible configurations\n+    private static SAXParserFactory[] _saxFactories = null;\n+    private static DocumentBuilderFactory[] _domFactories = null;\n+    private static ErrorHandler _validating;\n+\n+    static {\n+        _saxFactories = new SAXParserFactory[4];\n+        _domFactories = new DocumentBuilderFactory[4];\n+\n+        SAXParserFactory saxFactory;\n+        DocumentBuilderFactory domFactory;\n+        int arrIdx;\n+        for (int validating = 0; validating < 2; validating++) {\n+            for (int namespace = 0; namespace < 2; namespace++) {\n+                arrIdx = factoryIndex(validating == 1, namespace == 1);\n+\n+                saxFactory = SAXParserFactory.newInstance();\n+                saxFactory.setValidating(validating == 1);\n+                saxFactory.setNamespaceAware(namespace == 1);\n+                _saxFactories[arrIdx] = saxFactory;\n+\n+                domFactory = DocumentBuilderFactory.newInstance();\n+                domFactory.setValidating(validating == 1);\n+                domFactory.setNamespaceAware(namespace == 1);\n+                _domFactories[arrIdx] = domFactory;\n+            }\n+        }\n+        _validating = new ValidatingErrorHandler();\n+    }\n+\n+    /**\n+     * Return a SAXParser with the specified configuration.\n+     */\n+    public static SAXParser getSAXParser(boolean validating,\n+        boolean namespaceAware) {\n+        SAXParser sp;\n+        try {\n+            sp = _saxFactories[factoryIndex(validating, namespaceAware)].\n+                newSAXParser();\n+        } catch (ParserConfigurationException pce) {\n+            throw new NestableRuntimeException(pce);\n+        } catch (SAXException se) {\n+            throw new NestableRuntimeException(se);\n+        }\n+\n+        if (validating) {\n+            try {\n+                sp.getXMLReader().setErrorHandler(_validating);\n+            } catch (SAXException se) {\n+                throw new NestableRuntimeException(se);\n+            }\n+        }\n+\n+        return sp;\n+    }\n+\n+    /**\n+     * Return a DocumentBuilder with the specified configuration.\n+     */\n+    public static DocumentBuilder getDOMParser(boolean validating,\n+        boolean namespaceAware) {\n+        DocumentBuilder db;\n+        try {\n+            db = _domFactories[factoryIndex(validating, namespaceAware)].\n+                newDocumentBuilder();\n+        } catch (ParserConfigurationException pce) {\n+            throw new NestableRuntimeException(pce);\n+        }\n+\n+        if (validating)\n+            db.setErrorHandler(_validating);\n+        return db;\n+    }\n+\n+    /**\n+     * Return a new DOM Document.\n+     */\n+    public static Document getDocument() {\n+        return getDOMParser(false, false).newDocument();\n+    }\n+\n+    /**\n+     * Return the array index of the factory with the given properties.\n+     */\n+    private static int factoryIndex(boolean validating,\n+        boolean namespaceAware) {\n+        int arrayIndex = 0;\n+        if (validating)\n+            arrayIndex += 2;\n+        if (namespaceAware)\n+            arrayIndex += 1;\n+        return arrayIndex;\n+    }\n+}"},{"sha":"5f345645b9e87bdefef3067ee5c5d2b3dfd31624","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/XMLWriter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.xml;\n+\n+import java.io.FilterWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+\n+/**\n+ * The XMLWriter is a writer type for pretty-printing XML.\n+ * It assumes that the streamed XML will be given without any whitespace,\n+ * other than the space within text blocks.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class XMLWriter extends FilterWriter {\n+\n+    private static String _endl = J2DoPrivHelper.getLineSeparator();\n+\n+    private int _lastChar = ' ';\n+    private int _lastChar2 = ' ';\n+    private int _lastChar3 = ' ';\n+    private int _depth = 0;\n+\n+    /**\n+     * Construct an XMLWriter that will write to the given stream.\n+     */\n+    public XMLWriter(Writer out) {\n+        super(out);\n+    }\n+\n+    public void write(char[] cbuf, int off, int len) throws IOException {\n+        for (int i = 0; i < len; i++)\n+            write(cbuf[off + i]);\n+    }\n+\n+    public void write(String str, int off, int len) throws IOException {\n+        for (int i = 0; i < len; i++)\n+            write(str.charAt(off + i));\n+    }\n+\n+    public void write(int c) throws IOException {\n+        // the basic idea of this method is to make sure that when a tag\n+        // or a text block starts, it is placed on a separate line and\n+        // indented an amount appropriate to the XML tree depth\n+\n+        if (_lastChar == '<') {\n+            // tag or processing instruction?\n+            if (c != '?' && c != '!') {\n+                // end tag; decrease depth before writing spaces\n+                if (c == '/')\n+                    _depth--;\n+\n+                // tags are always on separate lines\n+                out.write(_endl);\n+                writeSpaces();\n+\n+                // beginning tag; increase depth for tag body\n+                if (c != '/')\n+                    _depth++;\n+            }\n+\n+            // if this is not a processing instruction / comment,\n+            // write the chars\n+            if (c != '!') {\n+                out.write('<');\n+                out.write(c);\n+            }\n+        } else if (c == '>') {\n+            // if unary tag decrease depth to undo the increase at tag start\n+            if (_lastChar == '/')\n+                _depth--;\n+\n+            // check for the comment-processing conditions\n+            if (_lastChar2 == '<' && _lastChar == '!')\n+                out.write(\"<!\");\n+            else if (_lastChar3 == '<' && _lastChar2 == '!' && _lastChar == '-')\n+                out.write(\"<!-\");\n+\n+            out.write('>');\n+        } else if (c != '<') {\n+            // if we're at \"<!--\", indent and put in the beginning of\n+            // the comment. if it's \"<!-?\" where ? is something other\n+            // than -, dump what we've gotten so far\n+            if (_lastChar3 == '<' && _lastChar2 == '!' && _lastChar == '-') {\n+                if (c == '-') {\n+                    out.write(_endl);\n+                    writeSpaces();\n+                    out.write(\"<!--\");\n+                } else {\n+                    out.write(\"<!-\");\n+                    out.write(c);\n+                }\n+            }\n+            // if we're at \"<!-\", keep on not writing data\n+            else if (!(_lastChar2 == '<' && _lastChar == '!' && c == '-')) {\n+                // if just ended a tag and about to print text, put on\n+                // separate line\n+                if (_lastChar == '>' && _lastChar2 != '?' && _lastChar2 != '!')\n+                {\n+                    out.write(_endl);\n+                    writeSpaces();\n+                }\n+                out.write(c);\n+            }\n+        }\n+\n+        _lastChar3 = _lastChar2;\n+        _lastChar2 = _lastChar;\n+        _lastChar = c;\n+    }\n+\n+    private void writeSpaces() throws IOException {\n+        for (int i = 0; i < _depth; i++)\n+            out.write(\"    \");\n+    }\n+}"},{"sha":"01b966c6d82f5638e41b0beeeb4c188e6241635c","filename":"1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/java/org/apache/openjpa/lib/xml/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,23 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<html>\n+<body>\n+<p><strong>XML Handling</strong></p>\n+</body>\n+</html>"},{"sha":"af95849fd7af0938238b8ce7bea25f4830a5e929","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/ant/localizer.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/ant/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/ant/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/ant/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+no-filesets: No filesets specified."},{"sha":"8ddc13c3f109703b9425d880e36b7b787ca4fd3f","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/conf/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,117 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+get-prop-errs: There were errors initializing your configuration: {0}\n+read-only: The configuration is read only; it cannot be modified.\n+obj-create: An instance of the class \"{0}\" could not be instantiated.  Make \\\n+\tsure the class has a public no-args constructor.\n+prop-parse: There was an error parsing the properties string \"{0}\".  Please \\\n+\tcheck that the format is: \"<name1>=<value1> <name2>=<value2> ...\".\n+naming-err:\tThere was an error during JNDI lookup of the name \"{0}\".\n+invalid-config-params: There was an error while setting up the configuration \\\n+\tplugin option \"{0}\". The plugin was of type \"{1}\". Setter methods for the \\\n+\tfollowing plugin properties were not available in that type: {2}. \\\n+\tPossible plugin properties are: {3}.\\n\\\n+\tEnsure that your plugin configuration string uses key values that \\\n+\tcorrespond to setter methods in the plugin class.\n+invalid-config-param-hint: There was an error while setting up the \\\n+\tconfiguration plugin option \"{0}\". The plugin was of type \"{1}\". \\\n+\tThe plugin property \"{2}\" had no corresponding setter method or accessible \\\n+\tfield. The plugin property closely matches \"{3}\"; perhaps the property \\\n+\twas misspelled. Ensure that your plugin configuration string uses key \\\n+\tvalues that correspond to setter methods in the plugin class. All \\\n+\tpossible plugin properties are: {4}.\n+invalid-enumerated-config: There was an error while setting up the \\\n+\tconfiguration option \"{0}\", and it was set to \"{1}\". All \\\n+\tpossible values for this setting are: {2}.\n+invalid-list-config: There was an error setting up the \\\n+\tconfiguration option \"{0}\". It was set to \"{1}\". All \\\n+\tpossible values for this setting are: {2}, or a comma separated list \\\n+\tof the same.\n+invalid-property-descriptors: Errors occurred while creating property \\\n+\tdescriptors for the following properties: {0}.\n+invalid-property: The configuration property named \"{0}\" was not recognized \\\n+    and will be ignored.\n+invalid-property-hint: The configuration property named \"{0}\" was not \\\n+    recognized and will be ignored, although the name closely matches a valid \\\n+    property called \"{1}\".\n+invalid-plugin: Instantiation of plugin \"{0}\" with value \"{1}\" caused an \\\n+\terror \"{2}\". The alias or class name may have been misspelled, or the \\\n+\tclass may not be available in the class path.\n+invalid-plugin-aliases: Instantiation of plugin \"{0}\" with value \"{1}\" caused \\\n+\tan error \"{2}\". The alias or class name may have been misspelled, or the \\\n+\tclass may not have be available in the class path. Valid aliases for this \\\n+\tplugin are: {3}\n+invalid-plugin-aliases-hint: Instantiation of plugin \"{0}\" with value \"{1}\" \\\n+\tcaused an error \"{2}\". The alias or class name may have been misspelled \\\n+\t(as it closely matches the valid plugin alias \"{4}\"), or the class may \\\n+\tnot be available in the class path.  Valid aliases for this plugin are: {3}\n+not-singleton: You cannot set the value of property \"{0}\" as an object.  The \\\n+\tproperty cannot use a single value; it must be recreated on each request.\n+cant-set-string: Configuration property \"{0}\" cannot be set from a string. \\\n+\tYou must supply the object value.\n+loaded-via-provider: Configuration information loaded via \"{0}\".\n+no-default-providers: Default configuration information couldn''t be loaded \\\n+\tfrom any configuration provider.\n+no-provider: No registered configuration provider could load \"{0}\".\n+no-providers: Your system is missing configuration providers. \\\n+    Configuration providers load configuration information for supported \\\n+    specifications.  You must have a META-INF/services/{0} file in your \\\n+    classpath listing the available provider classes, and some listed class \\\n+    must be instantiable.  Typically this file is bundled as part of the \\\n+    distribution.  Have you unbundled it, or unbundled its listed classes?\n+dup-with-different-prefixes: Found multiple properties with different valid \\\n+\tprefixes. Properties: {0}, {1}.\n+plugin-creation-exception: An exception occurred while creating a plugin for \\\n+    value {0}. This exception will be consumed.\n+anchor-only: You cannot supply a configuration unit name only.  You must also \\\n+    supply the name of the resource in which the unit appears.\n+no-product-derivations: Your system is missing product derivations.  Product \\\n+    derivations provide configuration options for supported data stores and \\\n+    specifications.  You must have a META-INF/services/{0} file in your \\\n+    classpath listing the available derivation classes, and some listed class \\\n+    must be instantiable.  Typically this file is bundled as part of the \\\n+    distribution.  Have you unbundled it, or unbundled its listed classes? \\\n+    If you are using ant, a common solution to this problem is to place \\\n+    the jar libraries of the OpenJPA distribution in the \\\n+    $'{user.home}/.ant/lib directory. Another common cause of this problem \\\n+    is an overly-restrictive security manager.\\n{1}\n+bad-product-derivations: Some product derivations are being skipped. For \\\n+    information about product derivation status, run:\\njava {0}\n+before-close-ex: An exception occurred during ProductDerivations.beforeClose().\\\n+\tThis exception will be ignored, and is logged along with this message.\n+\n+Log-name: Log factory\n+Log-desc: LogFactory and configuration for OpenJPA''s logging needs.\n+Log-type: General\n+Log-cat: Logging\n+Log-displayorder: 50\n+Log-expert: false\n+Log-interface: org.apache.openjpa.lib.log.LogFactory\n+\n+Id-name: Configuration ID\n+Id-desc: An environment-specific identifier for this configuration. This \\\n+\tmight correspond to a JPA persistence-unit name, or to some other \\\n+    more-unique value available in the current environment. \n+Id-type: General\n+Id-cat: General\n+Id-displayorder: 50\n+Id-expert: true\n+\n+veto-change: Can not modify \"{0}\" because the property is not dynamic and the \\\n+\tcurrent configuration is read-only.\n+jndi-lookup-failed: JNDI lookup for \"{0}\" with key \"{1}\" returned null.\n\\ No newline at end of file"},{"sha":"ed10c2082d841ab91a64409464a70c8b50fdf57a","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/graph/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+cycle-null: The cycle must not be null for edge {0}!\n+edge-no-loop: Edge {0} must be a single node loop, if the depth first search \\\n+    path is null!\n+node-not-on-path: Could not find node {1} in the depth first search path \\\n+    leading to edge {0}!"},{"sha":"18fa1181156b75ec3908898eff8e12967af920f9","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/jdbc/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,104 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+not-jdbc3: Attempted to call JDBC 3 method on a non-JDBC 3 JVM.\n+invoke-jdbc3: An error occurred attempting to invoke JDBC 3 method.  Your \\\n+\tdriver or database may not support JDBC 3 features.\n+error-jdbc3: Error loading JDBC 3 method.\n+wait-on-conn: Waited {0} milliseconds for connection {1}.  This might indicate \\\n+\tthat you need to increase your connection pool size.\n+ps-overflow: The prepared statement cache has overflowed. \"{0}\" was removed. \\\n+\tYou may want to increase your prepared statement cache size.  The maximum \\\n+\tnumber of cached statements is currently set to {1}.\n+tracker-executestmnt: Statement execution\n+tracker-executeprepstmnt: PreparedStatement execution\n+tracker-commit: Commit execution\n+tracker-rollback: Rollback execution\n+tracker-connection: Connection opening\n+tracker-resultSet: ResultSet closing\n+tracker-min: min\n+tracker-total: total\n+tracker-max: max\n+tracker-average: average\n+tracker-ms: ms\n+tracker-occurances: occurrences\n+tracker-slowest-statements: slowest statements\n+rsrc-closed: The connection \"{0}\" has already been closed.  The embedded \\\n+\tstack trace for this exception details the closure point.\n+not-active: Attempt to operate on connection \"{0}\" that has already been \\\n+\treturned to the connection pool.\n+poolds-null: A connection could not be obtained for driver class \"{0}\" \\\n+\tand URL \"{1}\".  You may have specified an invalid URL.\n+get-conn-exception:\tAn unexpected exception of type \"{0}\" occurred while \\\n+\tgetting a connection. This exception will be re-thrown as a SQLException.\n+conn-pool-exhausted: The maximum number of connections ({0}) for the \\\n+\tconnection pool have been exhausted.\n+pscache.stat.requests.name: Requests\n+pscache.stat.requests.desc: Cache requests\n+pscache.stat.requests.ord: Count\n+pscache.stat.leaked.name: Leaked\n+pscache.stat.leaked.desc: Leaked statements\n+pscache.stat.leaked.ord: Statements\n+pscache.stat.hits.name: Hits\n+pscache.stat.hits.desc: Cache hits\n+pscache.stat.hits.ord: Count\n+pscache.stat.created.name: Created\n+pscache.stat.created.desc: Created statements\n+pscache.stat.created.ord: Statements\n+pscache.stat.redundant.name: Redundant\n+pscache.stat.redundant.desc: Redundant statements\n+pscache.stat.redundant.ord: Statements\n+pscache.stat.overflow.name: Overflow\n+pscache.stat.overflow.desc: Cache overflows\n+pscache.stat.overflow.ord: Count\n+pscache.stat.size.name: Size\n+pscache.stat.size.desc: Cached statements\n+pscache.stat.size.ord: Size\n+validationsql-desc:  SQL used to validate connections\n+validation-timeout-desc:  The minimum number of milliseconds that must elapse \\\n+\tbefore a connection will ever be re-validated.\n+rollback-on-return-desc:  Force all connections to be rolled back when they \\\n+\tare returned to the pool.\n+max-active-desc:  The maximum number of database connections in use at one time.\n+max-idle-desc:  The maximum number of idle database connections to keep in the \\\n+\tpool.\n+max-wait-desc:  The maximum number of milliseconds to wait for a free database \\\n+\tconnection to become available before giving up.\n+test-on-borrow-desc:  Whether to validate database connections before \\\n+\tobtaining them from the pool.\n+test-on-return-desc:  Whether to validate database connections before \\\n+\treturning them to the pool.\n+time-between-eviction-runs-millis-desc:  The number of milliseconds between \\\n+\truns of the eviction thread.  -1 indicates that the thread will never run.\n+num-tests-per-eviction-run-desc:  Number of connections tested per eviction run.\n+min-evictable-idle-time-millis-desc:  The minimum number of milliseconds that \\\n+\ta database connection can sit idle before it becomes a candidate for \\\n+\teviction from the pool.\n+test-while-idle-desc:  Whether to periodically validate idle database \\\n+\tconnections.\n+num-active-desc:  Number of active connections in pool.\n+num-idle-desc:  Number of idle connections in pool.\n+connection-user-name-desc:  The JDBC user name for connecting to the database.\n+connection-url-desc:  The JDBC URL for the database.\n+connection-properties-desc:  Properties applied to the JDBC driver or \\\n+\tdatasource.\n+connection-driver-name-desc:  The JDBC driver.\n+login-timeout-desc:  The maximum number of milliseconds to block for database \\\n+\tlogin.\n+close-pool: Shutting down connection pool.\n+close-pool-fail: Error caught when issuing close pool SQL: {0}\n+datasource-trace-data: {0}"},{"sha":"d08aa280de3465c8bb53936bc36e0ed10e701225","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/log/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,31 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+log-trace: TRACE\n+log-info: INFO\n+log-warn: WARN\n+log-error: ERROR\n+log-fatal: FATAL\n+log-unknown: UNKNOWN\n+log-bad-constant: The log level string \"{0}\" is not valid. Valid values are \\\n+\tTRACE, INFO, WARN, ERROR or FATAL.\n+log-bad-file: The file name \"{0}\" is not valid.\n+could-not-create-factory: An error occurred while trying to create a \\\n+\tLogFactory of type \"{0}\", as specified by the \\\n+\topenjpa.Log system property. Created a \\\n+\torg.apache.openjpa.lib.log.LogFactoryImpl instead.\n+log-output-stream-data: {0}"},{"sha":"a5ce82cc0a0940cd490077485e4d358011e8ea2b","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/meta/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,45 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+loc-prefix: Location: \n+start-parse: Parsing resource \"{0}\".\n+end-parse: Finished parsing metadata resource \"{0}\".\n+already-parsed: Skipping resource \"{0}\"; it was parsed previously.\n+clear-parser: Clearing cache of parsed files in \"{0}\".\n+add-result: Adding parse result: \"{0}\"\n+cant-diff-elems: Unable to differentiate between given package and class \\\n+\telements for class arg parsing.  No element can be a complete prefix of \\\n+\tanother.\n+class-arg: Error extracting class information from \"{0}\".\n+parse-error: An error was encountered while parsing element \"{0}\".  Make sure \\\n+\tthe metadata file is correctly formatted.\n+no-file: No source file found for \"{0}\".\n+ser-file: Writing to file \"{0}\".\n+ser-objs: Serializing contents: {0}\n+parse-class: Parsing class \"{0}\".\n+ser-class: Writing object \"{0}\".\n+invalid-class: Type \"{0}\" could not be instantiated.\n+too-many-files: Too many files to scan for metadata.  Reached limit of {0} \\\n+\tfiles.\n+source-trackers-location-header: Source file locations:\n+source-trackers-location-line-item: {0}: {1}\n+source-tracker-file-unknown: <file location unknown>\n+parser-schema-bug: XML schema validation is disabled due to bugs detected \\\n+\tin the SAX parser.\n+sax-exception: An exception occurred while parsing {0} at location {1}. \\\n+    This exception has been translated to a SAXException, and will be \\\n+    re-thrown. The original exception is being logged along with this message."},{"sha":"fb4048536fec4f4842546eae7803b61fd15c2d3a","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/rop/localizer.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/rop/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/rop/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/rop/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+closed: The result list has been closed.\n+read-only: Result lists are read-only.\n+range-too-high: The RangeResultObjectProvider can only be used for ranges that \\\n+\tare below Integer.MAX_VALUE. Start index: \"{0}\", end index: \"{1}\"."},{"sha":"f28a8e112509fae92434f942419ed8683dda5c79","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/util/localizer.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/util/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/util/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/util/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+dup-key: Duplicate keys are not allowed in this properties file. Key: {0}, \\\n+\tfirst value: {1}, second value: {2}.\n+concurrent-initial: Illegal initial value of {0} specified.\n+concurrent-load: Illegal load value of {0} specified."},{"sha":"21a44b3e3bf99d824621f06f3ca5797063e7f011","filename":"1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/xml/localizer.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/xml/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/xml/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/main/resources/org/apache/openjpa/lib/xml/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+no-locator: Unknown\n+location-format: Line: {0}, C: {1}"},{"sha":"8c391d9d30e7d265623a86d223518d9a29466171","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurationProviderPrefixes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.conf;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+\n+public class TestConfigurationProviderPrefixes\n+    extends TestCase {\n+    \n+    private static final String CUSTOM_PREFIX = \n+        TestConfigurationProviderPrefixes.class.getName();\n+\n+    private String[] _origPrefixes;\n+\n+    public void setUp() {\n+        _origPrefixes = ProductDerivations.getConfigurationPrefixes();\n+        List l = new ArrayList(Arrays.asList(_origPrefixes));\n+        l.add(CUSTOM_PREFIX);\n+        ProductDerivations.setConfigurationPrefixes(\n+            (String[]) l.toArray(new String[0]));\n+    }\n+    \n+    public void tearDown() {\n+        ProductDerivations.setConfigurationPrefixes(_origPrefixes);\n+    }\n+    \n+    public void testPrefixContents() { \n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        assertEquals(CUSTOM_PREFIX, prefixes[prefixes.length - 1]);\n+        assertEquals(\"openjpa\", prefixes[0]);\n+    }\n+    \n+    public void testPartialKeyAndNullMap() {\n+        assertEquals(\"openjpa.Foo\", \"Foo\", (Map) null, null);\n+    }\n+        \n+    public void testPartialKeyWithInvalidPrefix() {\n+        Map map = new HashMap();\n+        map.put(\"bar.Foo\", \"value\");\n+        assertEquals(\"openjpa.Foo\", \"Foo\", map, null);\n+    }\n+\n+    public void testPartialKeyWithoutMatch() {\n+        Map map = new HashMap();\n+        map.put(\"bar.Baz\", \"value\");\n+        assertEquals(\"openjpa.Foo\", \"Foo\", map, null);\n+    }\n+\n+    public void testPartialKeyWithOpenJPAMatch() {\n+        Map map = new HashMap();\n+        map.put(\"openjpa.Foo\", \"value\");\n+        assertEquals(\"openjpa.Foo\", \"Foo\", map, \"value\");\n+    }\n+\n+    public void testPartialKeyWithCustomMatch() {\n+        Map map = new HashMap();\n+        map.put(CUSTOM_PREFIX + \".Foo\", \"value\");\n+        assertEquals(CUSTOM_PREFIX + \".Foo\", \"Foo\", map, \"value\");\n+    }\n+    \n+    public void testPartialKeyDuplicateFullKeys() {\n+        Map map = new HashMap();\n+        map.put(CUSTOM_PREFIX + \".Foo\", \"value\");\n+        map.put(\"openjpa.Foo\", \"value\");\n+        try {\n+            ProductDerivations.getConfigurationKey(\"Foo\", map);\n+            fail(\"duplicate keys should result in an IllegalStateException\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+    private static void assertEquals(String fullKey, String partialKey, \n+        Map map, Object value) {\n+        assertEquals(fullKey, ProductDerivations.getConfigurationKey(\n+            partialKey, map));\n+        if (map != null)\n+            assertEquals(value, map.get(fullKey));\n+    }\n+}"},{"sha":"3c53293e243185ba87bae1d63957ad3c9435b1ce","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestConfigurations.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.conf;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.openjpa.lib.test.AbstractTestCase;\n+import org.apache.openjpa.lib.util.Options;\n+\n+/**\n+ * Tests the {@link Configurations} class.\n+ *\n+ * @author Abe White\n+ */\n+public class TestConfigurations extends AbstractTestCase {\n+\n+    public TestConfigurations(String test) {\n+        super(test);\n+    }\n+\n+    public void testParsePlugin() {\n+        String str = null;\n+        assertNull(Configurations.getClassName(str));\n+        assertNull(Configurations.getProperties(str));\n+        str = \"foo\";\n+        assertEquals(\"foo\", Configurations.getClassName(str));\n+        assertNull(Configurations.getProperties(str));\n+        str = \"a=b\";\n+        assertNull(Configurations.getClassName(str));\n+        assertEquals(\"a=b\", Configurations.getProperties(str));\n+        str = \"a=b, c=d\";\n+        assertNull(Configurations.getClassName(str));\n+        assertEquals(\"a=b, c=d\", Configurations.getProperties(str));\n+        str = \"foo(a=b, c=d)\";\n+        assertEquals(\"foo\", Configurations.getClassName(str));\n+        assertEquals(\"a=b, c=d\", Configurations.getProperties(str));\n+        str = \" foo( a=\\\"b,c d\\\", c=\\\"d\\\" ) \";\n+        assertEquals(\"foo\", Configurations.getClassName(str));\n+        assertEquals(\"a=\\\"b,c d\\\", c=\\\"d\\\"\", Configurations.getProperties(str));\n+        str = \" foo( a='b,c d', c='d' ) \";\n+        assertEquals(\"foo\", Configurations.getClassName(str));\n+        assertEquals(\"a='b,c d', c='d'\", Configurations.getProperties(str));\n+    }\n+\n+    public void testParseProperties() {\n+        Options opts = Configurations.parseProperties(null);\n+        assertEquals(0, opts.size());\n+\n+        opts = Configurations.parseProperties(\" foo=bar, biz=baz \");\n+        assertEquals(2, opts.size());\n+        assertEquals(\"bar\", opts.getProperty(\"foo\"));\n+        assertEquals(\"baz\", opts.getProperty(\"biz\"));\n+\n+        opts = Configurations.parseProperties(\"foo=bar,biz=\\\"baz,=,baz\\\",x=y\");\n+        assertEquals(3, opts.size());\n+        assertEquals(\"bar\", opts.getProperty(\"foo\"));\n+        assertEquals(\"baz,=,baz\", opts.getProperty(\"biz\"));\n+        assertEquals(\"y\", opts.getProperty(\"x\"));\n+\n+        opts = Configurations.parseProperties\n+            (\"foo=\\\"bar bar,10\\\",biz=\\\"baz baz\\\"\");\n+        assertEquals(2, opts.size());\n+        assertEquals(\"bar bar,10\", opts.getProperty(\"foo\"));\n+        assertEquals(\"baz baz\", opts.getProperty(\"biz\"));\n+        opts = Configurations.parseProperties\n+            (\"foo='bar bar,10',biz='baz baz'\");\n+        assertEquals(2, opts.size());\n+        assertEquals(\"bar bar,10\", opts.getProperty(\"foo\"));\n+        assertEquals(\"baz baz\", opts.getProperty(\"biz\"));\n+    }\n+\n+    public void testCombinePlugins() {\n+        assertPluginsCombined(\"jpa\", null, \n+            null, null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jpa\", null,\n+            \"jpa\", null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jdo\", null,\n+            \"jpa\", null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jdo\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", null,\n+            \"jpa\", null);\n+        assertPluginsCombined(\"jdo\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" }); \n+        assertPluginsCombined(\"jdo\", new String[] { \"foo\", \"bar\" },\n+            null, new String[] { \"biz\", \"baz\" },\n+            \"jdo\", new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(null, new String[] { \"foo\", \"bar\" },\n+            null, new String[] { \"biz\", \"baz\" },\n+            null, new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(null, new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" },\n+            \"jpa\", new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(\"jpa\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"biz\", \"baz\" },\n+            \"jpa\", new String[] { \"foo\", \"bar\", \"biz\", \"baz\" }); \n+        assertPluginsCombined(\"jpa\", new String[] { \"foo\", \"bar\" },\n+            \"jpa\", new String[] { \"foo\", \"baz\" },\n+            \"jpa\", new String[] { \"foo\", \"baz\" }); \n+    }\n+\n+    private void assertPluginsCombined(String cls1, String[] props1,\n+        String cls2, String[] props2, String expCls, String[] expProps) {\n+        String plugin1 = Configurations.getPlugin(cls1, \n+            Configurations.serializeProperties(toProperties(props1)));\n+        String plugin2 = Configurations.getPlugin(cls2, \n+            Configurations.serializeProperties(toProperties(props2)));\n+\n+        String res = Configurations.combinePlugins(plugin1, plugin2);\n+        String resCls = Configurations.getClassName(res);\n+        Map resProps = Configurations.parseProperties(Configurations.\n+            getProperties(res));\n+        assertEquals(expCls, resCls);\n+        assertEquals(toProperties(expProps), resProps);\n+    }\n+\n+    private static Map toProperties(String[] props) {\n+        Map map = new HashMap();\n+        if (props != null)\n+            for (int i = 0; i < props.length; i++)\n+                map.put(props[i], props[++i]);\n+        return map;\n+    }\n+\n+    public static void main(String[] args) {\n+        main(TestConfigurations.class);\n+    }\n+}"},{"sha":"98b42fe62853e85c93eec9e43fbfd1edc7f908ba","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestValue.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.conf;\n+\n+import junit.framework.TestCase;\n+\n+public class TestValue extends TestCase {\n+    \n+    private static class SimpleValue extends Value {\n+\n+        protected String getInternalString() {\n+            return null;\n+        }\n+\n+        public Class getValueType() {\n+            return null;\n+        }\n+\n+        protected void setInternalObject(Object obj) {\n+            \n+        }\n+\n+        protected void setInternalString(String str) {\n+        }\n+        \n+    }\n+    \n+    public void testSetAliasesByValue() {\n+        String alias = \"alias\";\n+        String aName = \"Johnny\";\n+        String bName = \"Pete\";\n+        String [] aStrings = { alias, aName };\n+        \n+        SimpleValue sValue = new SimpleValue();\n+        sValue.setAliases(aStrings);\n+        sValue.setAlias(alias, bName);\n+        assertEquals(\"Did not set the new alias\", bName, \n+                sValue.getAliases()[1]);\n+        assertEquals(\"Array of aliases not set by value\", aName, aStrings[1]);\n+    }\n+}"},{"sha":"f56d3594ddf98c1742a906090b02d8c92f189278","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestXMLCaseConversions.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestXMLCaseConversions.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestXMLCaseConversions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/TestXMLCaseConversions.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,63 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.conf;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.File;\r\n+import java.io.FileReader;\r\n+import java.io.IOException;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+\r\n+public class TestXMLCaseConversions extends TestCase {\r\n+\r\n+    public void testToXMLName() {\r\n+        assertEquals(\"easy-xml-conversion\", \r\n+            ConfigurationImpl.toXMLName(\"easyXmlConversion\"));\r\n+        assertEquals(\"initial-caps\", \r\n+            ConfigurationImpl.toXMLName(\"InitialCaps\"));\r\n+        assertEquals(\"nodash\", \r\n+            ConfigurationImpl.toXMLName(\"nodash\"));\r\n+        assertEquals(\"anothernodash\", \r\n+            ConfigurationImpl.toXMLName(\"Anothernodash\"));\r\n+        assertEquals(\"multiple-caps\", \r\n+            ConfigurationImpl.toXMLName(\"MUltipleCaps\"));\r\n+        assertEquals(\"trailing-multi-caps\", \r\n+            ConfigurationImpl.toXMLName(\"TrailingMultiCAPS\"));\r\n+        assertEquals(\"two-i-nner-caps\", \r\n+            ConfigurationImpl.toXMLName(\"TwoINnerCaps\"));\r\n+        assertEquals(\"four-inn-er-caps\", \r\n+            ConfigurationImpl.toXMLName(\"FourINNErCaps\"));\r\n+        assertEquals(\"inner-3-number\", \r\n+            ConfigurationImpl.toXMLName(\"Inner3Number\"));\r\n+        assertEquals(\"inner-03-number\", \r\n+            ConfigurationImpl.toXMLName(\"Inner03Number\"));\r\n+    }\r\n+    \r\n+    public static void main(String[] args) throws IOException {\r\n+        BufferedReader r = new BufferedReader (new FileReader(new File(args[0])));\r\n+        while (true) {\r\n+            String s = r.readLine();\r\n+            if (s == null)\r\n+                break;\r\n+            System.out.println(s + \": \" + ConfigurationImpl.toXMLName(s));\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"48a1a6e1f9d0dabe484908ec7a65245893d60ca0","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/ConfigurationTestProductDerivation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,109 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.conf.test;\r\n+\r\n+import java.io.InputStream;\r\n+import java.io.IOException;\r\n+import java.net.URL;\r\n+import java.util.MissingResourceException;\r\n+import java.util.Properties;\r\n+\r\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\r\n+import org.apache.openjpa.lib.conf.Configuration;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.MapConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.ProductDerivation;\r\n+\r\n+/**\r\n+ * A Product Derivation to test loading of global and default configuration with\r\n+ * System settings.  Reads its global from a file specified by \r\n+ * <code>\"openjpatest.properties\"</code> system property.\r\n+ *\r\n+ * @author Pinaki Poddar\r\n+ * @author Abe White\r\n+ */\r\n+public class ConfigurationTestProductDerivation \r\n+    extends AbstractProductDerivation {\r\n+    \r\n+    public static boolean closed = false;\r\n+\r\n+    public int getType() {\r\n+        return ProductDerivation.TYPE_PRODUCT;\r\n+    }\r\n+    \r\n+    public void beforeConfigurationClose(Configuration conf) {\r\n+        closed = true;\r\n+    }\r\n+\r\n+    public ConfigurationProvider loadGlobals(ClassLoader loader)\r\n+        throws IOException {\r\n+        return load(null, loader);\r\n+    }\r\n+\r\n+    public ConfigurationProvider load(String rsrc, ClassLoader loader)\r\n+        throws IOException {\r\n+        if (rsrc == null)\r\n+            rsrc = System.getProperty(\"openjpatest.properties\");\r\n+        if (rsrc == null || !rsrc.endsWith(\".properties\"))\r\n+            return null;\r\n+\r\n+        URL url = findResource(rsrc, loader);\r\n+        if (url == null)\r\n+            throw new MissingResourceException(rsrc, getClass().getName(), \r\n+                rsrc);\r\n+\r\n+        InputStream in = url.openStream();\r\n+        Properties props = new Properties();\r\n+        if (in != null) {\r\n+            try {\r\n+                props.load(in);\r\n+                return new MapConfigurationProvider(props);\r\n+            } finally {\r\n+                try { in.close(); } catch (Exception e) {}\r\n+            }\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    /**\r\n+     * Locate the given resource.\r\n+     */\r\n+    private URL findResource(String rsrc, ClassLoader loader)\r\n+        throws IOException {\r\n+        if (loader != null)\r\n+            return loader.getResource(rsrc);\r\n+\r\n+        // in jbuilder the classloader can be null\r\n+        URL url = null;\r\n+        loader = getClass().getClassLoader();\r\n+        if (loader != null)\r\n+            url = loader.getResource(rsrc);\r\n+        if (url == null) {\r\n+            loader = Thread.currentThread().getContextClassLoader();\r\n+            if (loader != null)\r\n+                url = loader.getResource(rsrc);\r\n+        }\r\n+        if (url == null) {\r\n+            loader = ClassLoader.getSystemClassLoader();\r\n+            if (loader != null)\r\n+                url = loader.getResource(rsrc);\r\n+        }\r\n+        return url;\r\n+    }\r\n+}\r"},{"sha":"ea4d300bfd148643457e0f2d7c0db0bf927c83ad","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","status":"added","additions":327,"deletions":0,"changes":327,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestConfigurationImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,327 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.conf.test;\n+\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.MissingResourceException;\n+import java.util.Properties;\n+\n+import org.apache.openjpa.lib.conf.*;\n+import org.apache.openjpa.lib.test.AbstractTestCase;\n+\n+/**\n+ * Tests the {@link ConfigurationImpl} type. This needs to be placed\n+ * in a sub-package so that it can have its own localizer.properties\n+ * properties, which are required for the bean descriptors used by the\n+ * configuration framework {@link Value}.\n+ * \n+ * This test assumes a <code>\"test.properties\"</code> file available in\n+ * classpath and also system property <code>\"openjpatest.properties\"</code>\n+ * is set to <code>\"test.properties\"</code>.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ */\n+public class TestConfigurationImpl extends AbstractTestCase {\n+\n+    private ConfigurationTest _conf = new ConfigurationTest();\n+\n+    public TestConfigurationImpl(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        System.setProperty(\"openjpatest.properties\", \"test.properties\");\n+    }\n+\n+    public void tearDown() throws Exception {\n+        System.setProperty(\"openjpatest.properties\", \"\");\n+    \tsuper.tearDown();\n+    }\n+\n+    /**\n+     * Test that global properties are found and loaded.\n+     */\n+    public void testGlobals() {\n+        System.setProperty(\"openjpa.sysKey\", \"sysvalue\");\n+        assertNull(_conf.getTestKey());\n+        assertNull(_conf.getSysKey());\n+        assertNull(_conf.getPluginKey());\n+        assertNull(_conf.getObjectKey());\n+        assertTrue(_conf.loadGlobals());\n+        assertEquals(\"testvalue\", _conf.getTestKey());\n+        assertEquals(\"sysvalue\", _conf.getSysKey());\n+        assertNull(_conf.getPluginKey());\n+        assertNull(_conf.getObjectKey());\n+\n+        // override the properties location to a non-existant value\n+        _conf.setTestKey(null);\n+        _conf.setSysKey(null);\n+        System.setProperty(\"openjpatest.properties\", \"foo.properties\");\n+        try {\n+            assertTrue(!_conf.loadGlobals());\n+            fail(\"Should have thrown exception for missing resource.\");\n+        } catch (MissingResourceException mre) {\n+        }\n+\n+        // set back for remainder of tests\n+        System.setProperty(\"openjpatest.properties\", \"test.properties\");\n+        System.setProperty(\"openjpa.pluginKey\", \"java.lang.Object\");\n+        assertTrue(_conf.loadGlobals());\n+        assertEquals(\"testvalue\", _conf.getTestKey());\n+        assertEquals(\"sysvalue\", _conf.getSysKey());\n+        assertEquals(\"java.lang.Object\", _conf.getPluginKey());\n+        assertNotNull(_conf.getPluginKeyInstance());\n+        assertNull(_conf.getObjectKey());\n+    }\n+\n+    /**\n+     * Test that the configuration is serialized to properties correctly.\n+     */\n+    public void testToProperties() {\n+        assertTrue(_conf.loadGlobals());\n+        assertEquals(\"testvalue\", _conf.getTestKey());\n+        Map props = _conf.toProperties(false);\n+        assertEquals(\"testvalue\", props.get(\"openjpa.testKey\"));\n+        assertFalse(props.containsKey(\"openjpa.objectKey\"));\n+        _conf.setTestKey(\"foo\");\n+        _conf.setPluginKey(new Object());\n+        _conf.setObjectKey(new Object());\n+        props = _conf.toProperties(false);\n+        assertEquals(\"foo\", props.get(\"openjpa.testKey\"));\n+        assertEquals(\"java.lang.Object\", props.get(\"openjpa.pluginKey\"));\n+        assertFalse(props.containsKey(\"openjpa.objectKey\"));\n+    }\n+\n+    /**\n+     * Tests properties caching.\n+     */\n+    public void testPropertiesCaching() {\n+        _conf.setTestKey(\"val\");\n+        _conf.setPluginKey(\"java.lang.Object\");\n+        Map props1 = _conf.toProperties(false);\n+        Map props2 = _conf.toProperties(false);\n+        _conf.setObjectKey(new Object());\n+        assertNotNull(_conf.getPluginKeyInstance()); // instantiate\n+        Map props3 = _conf.toProperties(false);\n+        _conf.setTestKey(\"changed\");\n+        Map props4 = _conf.toProperties(false);\n+        _conf.setPluginKey(new Integer(1));\n+        Map props5 = _conf.toProperties(false);\n+        assertEquals(props1, props2);\n+        assertEquals(props1, props3);\n+        assertNotEquals(props1, props4);\n+        assertNotEquals(props4, props5);\n+    }\n+\n+    /**\n+     * Test the equals method.\n+     */\n+    public void testEquals() {\n+        ConfigurationTest conf = new ConfigurationTest();\n+        conf.setTestKey(_conf.getTestKey());\n+        conf.setSysKey(_conf.getSysKey());\n+        conf.setPluginKey(_conf.getPluginKey());\n+        conf.setObjectKey(_conf.getObjectKey());\n+        assertEquals(_conf, conf);\n+\n+        conf.setTestKey(\"newval\");\n+        assertTrue(!_conf.equals(conf));\n+        conf.setTestKey(_conf.getTestKey());\n+        assertEquals(_conf, conf);\n+\n+        conf.setObjectKey(new Object());\n+        assertEquals(_conf, conf);\n+\n+        conf.setPluginKey(new StringBuffer());\n+        assertTrue(!_conf.equals(conf));\n+    }\n+\n+    /**\n+     * Test using bean introspection.\n+     */\n+    public void testBeanAccessors() throws Exception {\n+        PropertyDescriptor[] pds = _conf.getPropertyDescriptors();\n+        for (int i = 0; i < pds.length; i++) {\n+            assertNotNull(pds[i].getShortDescription());\n+            assertNotNull(pds[i].getDisplayName());\n+\n+            assertNotNull(pds[i].getWriteMethod());\n+            assertNotNull(pds[i].getReadMethod());\n+\n+            pds[i].getReadMethod().invoke(_conf, (Object[]) null);\n+\n+            Method setter = pds[i].getWriteMethod();\n+            Method getter = pds[i].getReadMethod();\n+            Class param = pds[i].getReadMethod().getReturnType();\n+\n+            Object setVal = null;\n+            if (param == int.class)\n+                setVal = randomInt();\n+            else if (param == long.class)\n+                setVal = randomLong();\n+            else if (param == String.class)\n+                setVal = randomString();\n+            else if (param == boolean.class)\n+                setVal = new Boolean(!(((Boolean) getter.invoke(_conf,\n+                    (Object[]) null)).booleanValue()));\n+            else\n+                continue;\n+\n+            setter.invoke(_conf, new Object []{ setVal });\n+            assertEquals(setVal, getter.invoke(_conf, (Object[]) null));\n+        }\n+    }\n+\n+    /**\n+     * Test freezing.\n+     */\n+    public void testFreezing() {\n+        assertTrue(!_conf.isReadOnly());\n+        _conf.setReadOnly(Configuration.INIT_STATE_FROZEN);\n+        assertTrue(_conf.isReadOnly());\n+        try {\n+            _conf.setTestKey(\"bar\");\n+            fail(\"Allowed set on read only configuration.\");\n+        } catch (RuntimeException re) {\n+        }\n+        try {\n+            Properties p = new Properties();\n+            p.put(\"x\", \"y\");\n+            _conf.fromProperties(p);\n+            fail(\"Allowed fromMap on read only configuration.\");\n+        } catch (RuntimeException re) {\n+        }\n+    }\n+\n+    /**\n+     * Test serialization.\n+     */\n+    public void testSerialization() throws Exception {\n+        assertTrue(_conf.loadGlobals());\n+        _conf.setTestKey(\"testvalue\");\n+        _conf.setSysKey(\"sysvalue\");\n+        _conf.setObjectKey(new Object());\n+        _conf.setPluginKey(new Object());\n+\n+        ConfigurationTest copy = (ConfigurationTest) roundtrip(_conf, true);\n+        assertEquals(\"testvalue\", copy.getTestKey());\n+        assertEquals(\"sysvalue\", copy.getSysKey());\n+        assertNull(copy.getObjectKey());\n+        assertEquals(\"java.lang.Object\", copy.getPluginKey());\n+        assertNotNull(copy.getPluginKeyInstance());\n+\n+        copy.setTestKey(\"testvalue2\");\n+        copy.setSysKey(\"sysvalue2\");\n+        copy.setPluginKey(new StringBuffer());\n+\n+        ConfigurationTest copy2 = (ConfigurationTest) roundtrip(copy, true);\n+        assertEquals(\"testvalue2\", copy2.getTestKey());\n+        assertEquals(\"sysvalue2\", copy2.getSysKey());\n+        assertNull(copy2.getObjectKey());\n+        assertEquals(\"java.lang.StringBuffer\", copy2.getPluginKey());\n+        assertEquals(\"\", copy2.getPluginKeyInstance().toString());\n+    }\n+    \n+    public void testProductDerivationCloseCallback() {\n+        // toggle the static. This will be reset by the close invocation.\n+        ConfigurationTestProductDerivation.closed = false;\n+        _conf.close();\n+        assertTrue(ConfigurationTestProductDerivation.closed);\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+\n+    private static class ConfigurationTest extends ConfigurationImpl {\n+\n+        private final StringValue _testKey;\n+        private final StringValue _sysKey;\n+        private final PluginValue _pluginKey;\n+        private final ObjectValue _objectKey;\n+\n+        public ConfigurationTest() {\n+            this(true);\n+        }\n+\n+        public ConfigurationTest(boolean canSetPlugin) {\n+            super(false);\n+            _testKey = addString(\"testKey\");\n+            _sysKey = addString(\"sysKey\");\n+            _pluginKey = addPlugin(\"pluginKey\", canSetPlugin);\n+            _objectKey = addObject(\"objectKey\");\n+        }\n+\n+        public String getTestKey() {\n+            return _testKey.get();\n+        }\n+\n+        public void setTestKey(String val) {\n+            _testKey.set(val);\n+        }\n+\n+        public String getSysKey() {\n+            return _sysKey.get();\n+        }\n+\n+        public void setSysKey(String val) {\n+             _sysKey.set(val);\n+        }\n+\n+        public String getPluginKey() {\n+            return _pluginKey.getString();\n+        }\n+\n+        public void setPluginKey(String val) {\n+            _pluginKey.setString(val);\n+        }\n+\n+        public Object getPluginKeyInstance() {\n+            if (_pluginKey.get() == null)\n+                return _pluginKey.instantiate(Object.class, this);\n+            return _pluginKey.get();\n+        }\n+\n+        public void setPluginKey(Object val) {\n+            _pluginKey.set(val);\n+        }\n+\n+        public Object getObjectKey() {\n+            return _objectKey.get();\n+        }\n+\n+        public void setObjectKey(Object val) {\n+            _objectKey.set(val);\n+        }\n+\n+        public void deriveObjectKey(Object val) {\n+            _objectKey.set(val, true);\n+        }\n+        \n+        protected boolean isInvalidProperty(String s) {\n+            if (\"openjpatest.properties\".equals(s))\n+                return false;\n+            else \n+                return super.isInvalidProperty(s);\n+        }\n+    }\n+}"},{"sha":"e894e23382d83f445d20b859c9119b5b127f9890","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/conf/test/TestPluginValue.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.conf.test;\n+\n+import org.apache.openjpa.lib.conf.PluginListValue;\n+import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.conf.StringValue;\n+import org.apache.openjpa.lib.conf.Value;\n+import org.apache.openjpa.lib.test.AbstractTestCase;\n+\n+/**\n+ * Tests the {@link Value}, {@link PluginValue}, and\n+ * {@link PluginListValue} classes.\n+ *\n+ * @author Abe White\n+ */\n+public class TestPluginValue extends AbstractTestCase {\n+\n+    public TestPluginValue(String test) {\n+        super(test);\n+    }\n+\n+    public void testDefault() {\n+        defaultTest(new StringValue(\"testKey\"));\n+        defaultTest(new PluginValue(\"testKey\", true));\n+        defaultTest(new PluginListValue(\"testKey\"));\n+        pluginDefaultTest(new PluginValue(\"testKey\", true));\n+    }\n+\n+    private void defaultTest(Value val) {\n+        assertNull(val.getString());\n+        val.setString(\"foo\");\n+        assertEquals(\"foo\", val.getString());\n+        val.setString(null);\n+        assertNull(val.getString());\n+        val.setDefault(\"xxx\");\n+        val.setString(null);\n+        assertEquals(\"xxx\", val.getString());\n+        val.setString(\"bar\");\n+        assertEquals(\"bar\", val.getString());\n+        val.setString(\" \");\n+        assertEquals(\"xxx\", val.getString());\n+        val.setString(\"yyy\");\n+        assertEquals(\"yyy\", val.getString());\n+        val.setString(null);\n+        assertEquals(\"xxx\", val.getString());\n+    }\n+\n+    private void pluginDefaultTest(PluginValue val) {\n+        val.setDefault(\"foo\");\n+        val.setString(\"x=y\");\n+        assertEquals(\"foo(x=y)\", val.getString());\n+        val.set(new Integer(1));\n+        assertEquals(\"java.lang.Integer\", val.getString());\n+        assertEquals(new Integer(1), val.get());\n+        val.set(null);\n+        assertEquals(\"foo\", val.getString());\n+        assertEquals(null, val.get());\n+    }\n+\n+    public void testAlias() {\n+        aliasTest(new StringValue(\"testKey\"));\n+        aliasTest(new PluginValue(\"testKey\", true));\n+        aliasTest(new PluginListValue(\"testKey\"));\n+        emptyAliasTest(new StringValue(\"testKey\"));\n+        emptyAliasTest(new StringValue(\"testKey\"));\n+        pluginAliasTest(new PluginValue(\"testKey\", true));\n+        pluginAliasTest(new PluginListValue(\"testKey\"));\n+        pluginListAliasTest(new PluginListValue(\"testKey\"));\n+    }\n+\n+    private void aliasTest(Value val) {\n+        val.setAliases(new String[]{ \"foo\", \"bar\" });\n+        val.setDefault(\"bar\");\n+        assertEquals(\"bar\", val.getDefault());\n+        val.setString(null);\n+        assertEquals(\"foo\", val.getString());\n+        val.setDefault(\"xxx\");\n+        val.setString(null);\n+        assertEquals(\"xxx\", val.getString());\n+        val.setDefault(\"bar\");\n+        val.setString(null);\n+        assertEquals(\"foo\", val.getString());\n+        val.setString(\"yyy\");\n+        val.setAliases(new String[]{ \"xxx\", \"yyy\" });\n+        assertEquals(\"xxx\", val.getString());\n+    }\n+\n+    private void emptyAliasTest(Value val) {\n+        val.setDefault(\"foo\");\n+        val.setAliases(new String[]{ \"false\", null });\n+        val.setString(\"false\");\n+        assertEquals(\"false\", val.getString());\n+        val.setString(null);\n+        assertEquals(\"foo\", val.getString());\n+    }\n+\n+    private void pluginAliasTest(Value val) {\n+        // test plugin name-only aliases\n+        val.setString(\"foo(biz=baz)\");\n+        assertEquals(\"foo(biz=baz)\", val.getString());\n+        val.setAliases(new String[]{ \"xxx\", \"foo\" });\n+        assertEquals(\"xxx(biz=baz)\", val.getString());\n+    }\n+\n+    private void pluginListAliasTest(Value val) {\n+        // and test on lists\n+        val.setString(\"foo(biz=baz), foo(a=b),xxx, foo, yyy\");\n+        assertEquals(\"foo(biz=baz), foo(a=b), xxx, foo, yyy\", val.getString());\n+        val.setAliases(new String[]{ \"bar\", \"foo\" });\n+        assertEquals(\"bar(biz=baz), bar(a=b), xxx, bar, yyy\", val.getString());\n+\n+        val.setAliases(new String[]{ \"none\", null });\n+        val.setString(\"none\");\n+        assertTrue(((PluginListValue) val).getClassNames().length == 0);\n+    }\n+\n+    public void testPluginListParsing() {\n+        PluginListValue val = new PluginListValue(\"testKey\");\n+        assertEquals(0, val.getClassNames().length);\n+        val.setString(\"foo\");\n+        assertEquals(1, val.getClassNames().length);\n+        assertEquals(\"foo\", val.getClassNames()[0]);\n+        assertNull(val.getProperties()[0]);\n+        val.setString(\"foo()\");\n+        assertEquals(1, val.getClassNames().length);\n+        assertEquals(\"foo\", val.getClassNames()[0]);\n+        assertNull(val.getProperties()[0]);\n+        val.setString(\"foo(a=b)\");\n+        assertEquals(1, val.getClassNames().length);\n+        assertEquals(\"foo\", val.getClassNames()[0]);\n+        assertEquals(\"a=b\", val.getProperties()[0]);\n+        val.setString(\"foo(a=b, c=\\\"d,e f\\\", g=\\\"h\\\")\");\n+        assertEquals(1, val.getClassNames().length);\n+        assertEquals(\"foo\", val.getClassNames()[0]);\n+        assertEquals(\"a=b, c=\\\"d,e f\\\", g=\\\"h\\\"\", val.getProperties()[0]);\n+        val.setString(\"foo(a=b, c=\\\"d,e f\\\"), bar, biz(a=c, d=g), baz()\");\n+        assertEquals(4, val.getClassNames().length);\n+        assertEquals(\"foo\", val.getClassNames()[0]);\n+        assertEquals(\"a=b, c=\\\"d,e f\\\"\", val.getProperties()[0]);\n+        assertEquals(\"bar\", val.getClassNames()[1]);\n+        assertNull(val.getProperties()[1]);\n+        assertEquals(\"biz\", val.getClassNames()[2]);\n+        assertEquals(\"a=c, d=g\", val.getProperties()[2]);\n+        assertEquals(\"baz\", val.getClassNames()[3]);\n+        assertNull(val.getProperties()[3]);\n+    }\n+\n+    /**\n+     * Required because we use a 'testKey' dummy property name.\n+     */\n+    public String getTestKey() {\n+        return null;\n+    }\n+\n+    /**\n+     * Required because we use a 'testKey' dummy property name.\n+     */\n+    public void setTestKey(String key) {\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"40c663cb1ef0c527685f2bf1af0195368c6496b2","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestDepthFirstAnalysis.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,152 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.graph;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.lib.test.AbstractTestCase;\r\n+\r\n+/**\r\n+ * <p>Tests the {@link DepthFirstAnalysis} type.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestDepthFirstAnalysis\r\n+    extends AbstractTestCase {\r\n+\r\n+    private DepthFirstAnalysis _dfa = null;\r\n+\r\n+    public void setUp() {\r\n+        setUpGraph1();   \r\n+    }\r\n+    \r\n+    public void setUpGraph1() {\r\n+        Graph graph = new Graph();\r\n+        Object node1 = new Object();\r\n+        Object node2 = new Object();\r\n+        Object node3 = new Object();\r\n+        Object node4 = new Object();\r\n+        graph.addNode(node1);\r\n+        graph.addNode(node2);\r\n+        graph.addNode(node3);\r\n+        graph.addNode(node4);\r\n+        graph.addEdge(new Edge(node1, node2, true));\r\n+        graph.addEdge(new Edge(node2, node3, true));\r\n+        graph.addEdge(new Edge(node3, node1, true));\r\n+        graph.addEdge(new Edge(node3, node4, true));\r\n+        graph.addEdge(new Edge(node2, node2, true));\r\n+        _dfa = new DepthFirstAnalysis(graph);\r\n+    }\r\n+\r\n+    public void setUpGraph2() {\r\n+        Graph graph = new Graph();\r\n+        Integer node1 = new Integer(1);\r\n+        Integer node2 = new Integer(2);\r\n+        Integer node3 = new Integer(3);\r\n+        Integer node4 = new Integer(4);\r\n+        Integer node5 = new Integer(5);\r\n+        graph.addNode(node2);  // has to be first node for testcase\r\n+        graph.addNode(node5);\r\n+        graph.addNode(node4);\r\n+        graph.addNode(node3);\r\n+        graph.addNode(node1);\r\n+        graph.addEdge(new Edge(node5, node4, true));\r\n+        graph.addEdge(new Edge(node4, node3, true));\r\n+        graph.addEdge(new Edge(node3, node3, true));\r\n+        graph.addEdge(new Edge(node3, node2, true));\r\n+        graph.addEdge(new Edge(node2, node5, true));\r\n+        graph.addEdge(new Edge(node2, node4, true));\r\n+        graph.addEdge(new Edge(node1, node4, true));\r\n+        _dfa = new DepthFirstAnalysis(graph);\r\n+    }\r\n+\r\n+    public void testNodeSorting() {\r\n+        Collection nodes = _dfa.getSortedNodes();\r\n+        assertEquals(4, nodes.size());\r\n+\r\n+        int time = 0;\r\n+        Object node;\r\n+        for (Iterator itr = nodes.iterator(); itr.hasNext();) {\r\n+            node = itr.next();\r\n+            assertTrue(time <= _dfa.getFinishedTime(node));\r\n+            time = _dfa.getFinishedTime(node);\r\n+        }\r\n+    }\r\n+\r\n+    public void testEdgeTyping() {\r\n+        Collection edges = _dfa.getEdges(Edge.TYPE_BACK);\r\n+        assertEquals(2, edges.size());\r\n+        Iterator itr = edges.iterator();\r\n+        Edge edge0 = (Edge) itr.next();\r\n+        Edge edge1 = (Edge) itr.next();\r\n+        assertTrue((edge0.getTo().equals(edge0.getFrom()))\r\n+                || edge1.getTo().equals(edge1.getFrom()));\r\n+    }\r\n+\r\n+    public void testBackEdges() {\r\n+        setUpGraph2();\r\n+        Collection edges = _dfa.getEdges(Edge.TYPE_BACK);\r\n+        assertEquals(2, edges.size());\r\n+        Iterator itr = edges.iterator();\r\n+        Edge edge0 = (Edge) itr.next();\r\n+        Edge edge1 = (Edge) itr.next();\r\n+        if (edge0.getTo().equals(edge0.getFrom())) {\r\n+            assertTrue(edge0.getCycle() != null && edge0.getCycle().size() == 1);\r\n+            List cycle = edge1.getCycle();\r\n+            assertTrue(cycle != null && cycle.size() == 4);\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(3)).getTo()));\r\n+        } else if (edge1.getTo().equals(edge1.getFrom())) {\r\n+            assertTrue(edge1.getCycle() != null && edge1.getCycle().size() == 1);            \r\n+            assertTrue(edge1 == edge1.getCycle());\r\n+            List cycle = edge0.getCycle();\r\n+            assertTrue(cycle != null && cycle.size() == 4);\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(3)).getTo()));\r\n+        } else {\r\n+            // should not happen\r\n+            assertFalse(true);\r\n+        }\r\n+    }\r\n+    \r\n+    public void testForwardEdges() {\r\n+        setUpGraph2();\r\n+        Collection edges = _dfa.getEdges(Edge.TYPE_FORWARD);\r\n+        assertEquals(2, edges.size());\r\n+        Iterator itr = edges.iterator();\r\n+        Edge edge0 = (Edge) itr.next();\r\n+        Edge edge1 = (Edge) itr.next();\r\n+        if (edge0.getCycle() == null) {\r\n+            List cycle = edge1.getCycle();\r\n+            assertTrue(cycle != null && cycle.size() == 3);\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(2)).getTo()));\r\n+        } else if (edge1.getCycle() == null) {\r\n+            List cycle = edge0.getCycle();\r\n+            assertTrue(cycle != null && cycle.size() == 3);\r\n+            assertTrue(((Edge)cycle.get(0)).getFrom().equals(((Edge)cycle.get(2)).getTo()));\r\n+        } else {\r\n+            // should not happen\r\n+            assertFalse(true);\r\n+        }\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        main(TestDepthFirstAnalysis.class);\r\n+    }\r\n+}\r"},{"sha":"2c93755c672336c8a98e0fd46a867e687939b7b7","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/graph/TestGraph.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,148 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.lib.graph;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+\r\n+import org.apache.openjpa.lib.test.AbstractTestCase;\r\n+\r\n+/**\r\n+ * <p>Tests the {@link Graph} type, and in so doing implicitly tests the\r\n+ * {@link Edge} as well.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestGraph\r\n+    extends AbstractTestCase {\r\n+\r\n+    private Graph _graph = new Graph();\r\n+    private Object _node1 = new Object();\r\n+    private Object _node2 = new Object();\r\n+    private Object _node3 = new Object();\r\n+    private Edge _edge1 = new Edge(_node1, _node2, true);\r\n+    private Edge _edge2 = new Edge(_node2, _node3, true);\r\n+    private Edge _edge3 = new Edge(_node1, _node3, false);\r\n+    private Edge _edge4 = new Edge(_node2, _node2, false);\r\n+\r\n+    public void setUp() {\r\n+        _graph.addNode(_node1);\r\n+        _graph.addNode(_node2);\r\n+        _graph.addNode(_node3);\r\n+        _graph.addEdge(_edge1);\r\n+        _graph.addEdge(_edge2);\r\n+        _graph.addEdge(_edge3);\r\n+        _graph.addEdge(_edge4);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests adding and retrieving nodes and edges.\r\n+     */\r\n+    public void testAddRetrieve() {\r\n+        assertEquals(3, _graph.getNodes().size());\r\n+        assertEquals(4, _graph.getEdges().size());\r\n+\r\n+        Collection edges = _graph.getEdgesFrom(_node1);\r\n+        assertEquals(2, edges.size());\r\n+        Iterator itr = edges.iterator();\r\n+        Edge edge0 = (Edge) itr.next();\r\n+        Edge edge1 = (Edge) itr.next();\r\n+        assertTrue((edge0 == _edge1 && edge1 == _edge3)\r\n+            || (edge0 == _edge3 && edge1 == _edge1));\r\n+\r\n+        edges = _graph.getEdgesTo(_node1);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge3, edges.iterator().next());\r\n+\r\n+        edges = _graph.getEdges(_node1, _node3);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge3, edges.iterator().next());\r\n+        edges = _graph.getEdges(_node3, _node1);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge3, edges.iterator().next());\r\n+\r\n+        edges = _graph.getEdgesFrom(_node2);\r\n+        assertEquals(2, edges.size());\r\n+        itr = edges.iterator();\r\n+        edge0 = (Edge) itr.next();\r\n+        edge1 = (Edge) itr.next();\r\n+        assertTrue((edge0 == _edge2 && edge1 == _edge4)\r\n+            || (edge0 == _edge4 && edge1 == _edge2));\r\n+\r\n+        edges = _graph.getEdgesTo(_node2);\r\n+        assertEquals(2, edges.size());\r\n+        itr = edges.iterator();\r\n+        edge0 = (Edge) itr.next();\r\n+        edge1 = (Edge) itr.next();\r\n+        assertTrue((edge0 == _edge1 && edge1 == _edge4)\r\n+            || (edge0 == _edge4 && edge1 == _edge1));\r\n+\r\n+        edges = _graph.getEdges(_node2, _node2);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge4, edges.iterator().next());\r\n+\r\n+        edges = _graph.getEdgesFrom(_node3);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge3, edges.iterator().next());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test removing edges.\r\n+     */\r\n+    public void testRemoveEdges() {\r\n+        assertTrue(_graph.removeEdge(_edge2));\r\n+        Collection edges = _graph.getEdgesFrom(_node2);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge4, edges.iterator().next());\r\n+\r\n+        assertTrue(_graph.removeEdge(_edge3));\r\n+        edges = _graph.getEdgesFrom(_node1);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge1, edges.iterator().next());\r\n+        edges = _graph.getEdgesTo(_node1);\r\n+        assertEquals(0, edges.size());\r\n+        edges = _graph.getEdgesTo(_node3);\r\n+        assertEquals(0, edges.size());\r\n+        edges = _graph.getEdgesFrom(_node3);\r\n+        assertEquals(0, edges.size());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test removing nodes.\r\n+     */\r\n+    public void testRemoveNodes() {\r\n+        assertTrue(_graph.removeNode(_node3));\r\n+        Collection edges = _graph.getEdges();\r\n+        assertEquals(2, edges.size());\r\n+        Iterator itr = edges.iterator();\r\n+        Edge edge0 = (Edge) itr.next();\r\n+        Edge edge1 = (Edge) itr.next();\r\n+        assertTrue((edge0 == _edge1 && edge1 == _edge4)\r\n+            || (edge0 == _edge4 && edge1 == _edge1));\r\n+        edges = _graph.getEdgesFrom(_node1);\r\n+        assertEquals(1, edges.size());\r\n+        assertEquals(_edge1, edges.iterator().next());\r\n+        edges = _graph.getEdgesTo(_node1);\r\n+        assertEquals(0, edges.size());\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        main(TestGraph.class);\r\n+\t}\r\n+}\r"},{"sha":"cb39557f960876762e70eaf933b65598d7c97e95","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","status":"added","additions":272,"deletions":0,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/ResultListTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,272 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.openjpa.lib.test.AbstractTestCase;\n+\n+/**\n+ * Tests for {@link ResultList} implementations.\n+ *\n+ * @author Abe White\n+ */\n+public abstract class ResultListTest extends AbstractTestCase {\n+\n+    private ResultList[] _lists = null;\n+\n+    public ResultListTest(String test) {\n+        super(test);\n+    }\n+\n+    /**\n+     * Return a result list to use with the given provider.\n+     */\n+    protected abstract ResultList getResultList(ResultObjectProvider provider);\n+\n+    /**\n+     * Override to customize the result object provider being used. You\n+     * can return multiple providers to test with each.\n+     */\n+    protected ResultObjectProvider[] getResultObjectProviders(List list) {\n+        return new ResultObjectProvider[]{\n+            new ListResultObjectProvider(list)\n+        };\n+    }\n+\n+    public void setUp() {\n+        List results = new ArrayList(100);\n+        for (int i = 0; i < 100; i++)\n+            results.add(String.valueOf(i));\n+        ResultObjectProvider[] rops = getResultObjectProviders(results);\n+        _lists = new ResultList[rops.length];\n+        for (int i = 0; i < _lists.length; i++)\n+            _lists[i] = getResultList(rops[i]);\n+    }\n+\n+    public void testIterator() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            Iterator itr = _lists[i].iterator();\n+            int count = 0;\n+            for (; itr.hasNext(); count++)\n+                assertEquals(String.valueOf(count), itr.next());\n+            assertEquals(100, count);\n+            try {\n+                itr.next();\n+                fail(\"After last.\");\n+            } catch (IndexOutOfBoundsException ioob) {\n+            } catch (NoSuchElementException nse) {\n+            }\n+        }\n+    }\n+\n+    public void testIteratorModification() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            try {\n+                Iterator itr = _lists[i].iterator();\n+                itr.next();\n+                itr.remove();\n+                fail(\"Allowed modification.\");\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n+    public void testListIteratorForward() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            ListIterator itr = _lists[i].listIterator();\n+            int count = 0;\n+            for (; itr.hasNext(); count++) {\n+                assertEquals(count, itr.nextIndex());\n+                assertEquals(String.valueOf(count), itr.next());\n+            }\n+            assertEquals(100, count);\n+            try {\n+                itr.next();\n+                fail(\"After last.\");\n+            } catch (IndexOutOfBoundsException ioob) {\n+            } catch (NoSuchElementException nse) {\n+            }\n+        }\n+    }\n+\n+    public void testListIteratorIndex() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            ListIterator itr = _lists[i].listIterator(50);\n+            int count = 50;\n+            for (; itr.hasNext(); count++) {\n+                assertEquals(count, itr.nextIndex());\n+                assertEquals(String.valueOf(count), itr.next());\n+            }\n+            assertEquals(100, count);\n+            try {\n+                itr.next();\n+                fail(\"After last.\");\n+            } catch (IndexOutOfBoundsException ioob) {\n+            } catch (NoSuchElementException nse) {\n+            }\n+        }\n+    }\n+\n+    public void testListIteratorReverse() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            ListIterator itr = _lists[i].listIterator(100);\n+            int count = 99;\n+            for (; itr.hasPrevious(); count--) {\n+                assertEquals(count, itr.previousIndex());\n+                assertEquals(String.valueOf(count), itr.previous());\n+            }\n+            assertEquals(-1, count);\n+            try {\n+                itr.previous();\n+                fail(\"Before first.\");\n+            } catch (IndexOutOfBoundsException ioob) {\n+            } catch (NoSuchElementException nse) {\n+            }\n+        }\n+    }\n+\n+    public void testListIteratorModification() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            try {\n+                ListIterator itr = _lists[i].listIterator();\n+                itr.next();\n+                itr.set(\"foo\");\n+                fail(\"Allowed modification.\");\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n+    public void testMultipleIterations() {\n+        testListIteratorIndex();\n+        testListIteratorForward();\n+        testListIteratorReverse();\n+    }\n+\n+    public void testContains() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            assertTrue(_lists[i].contains(\"0\"));\n+            assertTrue(_lists[i].contains(\"50\"));\n+            assertTrue(_lists[i].contains(\"99\"));\n+            assertFalse(_lists[i].contains(\"-1\"));\n+            assertFalse(_lists[i].contains(\"100\"));\n+            assertFalse(_lists[i].contains(null));\n+            assertTrue(_lists[i].containsAll(Arrays.asList(new String[]\n+                { \"0\", \"50\", \"99\" })));\n+            assertFalse(_lists[i].containsAll(Arrays.asList(new String[]\n+                { \"0\", \"-1\", \"99\" })));\n+        }\n+    }\n+\n+    public void testModification() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            try {\n+                _lists[i].add(\"foo\");\n+                fail(\"Allowed modification.\");\n+            } catch (UnsupportedOperationException uoe) {\n+            }\n+            try {\n+                _lists[i].remove(\"1\");\n+                fail(\"Allowed modification.\");\n+            } catch (UnsupportedOperationException uoe) {\n+            }\n+            try {\n+                _lists[i].set(0, \"foo\");\n+                fail(\"Allowed modification.\");\n+            } catch (UnsupportedOperationException uoe) {\n+            }\n+        }\n+    }\n+\n+    public void testGetBegin() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            for (int j = 0; j < 10; j++)\n+                assertEquals(String.valueOf(j), _lists[i].get(j));\n+            try {\n+                _lists[i].get(-1);\n+                fail(\"Before begin.\");\n+            } catch (IndexOutOfBoundsException ioob) {\n+            } catch (NoSuchElementException nse) {\n+            }\n+        }\n+    }\n+\n+    public void testGetMiddle() {\n+        for (int i = 0; i < _lists.length; i++)\n+            for (int j = 50; j < 60; j++)\n+                assertEquals(String.valueOf(j), _lists[i].get(j));\n+    }\n+\n+    public void testGetEnd() {\n+        for (int i = 0; i < _lists.length; i++) {\n+            for (int j = 90; j < 100; j++)\n+                assertEquals(String.valueOf(j), _lists[i].get(j));\n+            try {\n+                _lists[i].get(100);\n+                fail(\"Past end.\");\n+            } catch (IndexOutOfBoundsException ioob) {\n+            } catch (NoSuchElementException nse) {\n+            }\n+        }\n+    }\n+\n+    public void testGetReverse() {\n+        for (int i = 0; i < _lists.length; i++)\n+            for (int j = 99; j > -1; j--)\n+                assertEquals(String.valueOf(j), _lists[i].get(j));\n+    }\n+\n+    public void testMultipleGet() {\n+        testGetMiddle();\n+        testGetBegin();\n+        testGetEnd();\n+\n+        // take list size and traverse list to cache values if not already\n+        for (int i = 0; i < _lists.length; i++)\n+            _lists[i].size();\n+        testListIteratorForward();\n+\n+        testGetMiddle();\n+        testGetBegin();\n+        testGetEnd();\n+    }\n+\n+    public void testSize() {\n+        for (int i = 0; i < _lists.length; i++)\n+            assertTrue(_lists[i].size() == 100\n+                || _lists[i].size() == Integer.MAX_VALUE);\n+    }\n+\n+    public void testEmpty() {\n+        ResultObjectProvider[] rops = getResultObjectProviders\n+            (Collections.EMPTY_LIST);\n+        for (int i = 0; i < rops.length; i++) {\n+            ResultList list = getResultList(rops[i]);\n+            assertEquals(0, list.size());\n+            assertTrue(list.isEmpty());\n+        }\n+    }\n+}"},{"sha":"fa1830caf143f51208d51dacdc63431bdc3e7dfa","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestEagerResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+/**\n+ * Tests the {@link EagerResultList}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestEagerResultList extends ResultListTest {\n+\n+    public TestEagerResultList(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new EagerResultList(provider);\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"f3b209f00f418e6fc57ef153c8459d59ab42a420","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestLazyForwardResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+/**\n+ * Tests the {@link LazyForwardResultList}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestLazyForwardResultList extends ResultListTest {\n+\n+    public TestLazyForwardResultList(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new LazyForwardResultList(provider);\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"a94353672549c2e8ca2ccbccc321d1518731e0a1","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestListResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+/**\n+ * Tests the {@link ListResultList}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestListResultList extends ResultListTest {\n+\n+    public TestListResultList(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new ListResultList(((ListResultObjectProvider) provider).\n+            getDelegate());\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"34900bbb0beb00c9da1c8d359121fdda2f09dd52","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestMergedResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Tests the {@link MergedResultObjectProvider}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestMergedResultObjectProvider extends ResultListTest {\n+\n+    public TestMergedResultObjectProvider(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new WindowResultList(provider, 10);\n+    }\n+\n+    protected ResultObjectProvider[] getResultObjectProviders(List list) {\n+        // test 3 merges:\n+        // 1. first rop empty,\n+        // 2. neither rop empty\n+        // 3. both rops empty\n+        ResultObjectProvider[] merges = new ResultObjectProvider[3];\n+        merges[0] = new MergedResultObjectProvider(new ResultObjectProvider[]{\n+            new ListResultObjectProvider(Collections.EMPTY_LIST),\n+            new ListResultObjectProvider(list), });\n+\n+        int mid = list.size() / 2;\n+        List list1 = list.subList(0, mid);\n+        List list2 = list.subList(mid, list.size());\n+        merges[1] = new MergedResultObjectProvider(new ResultObjectProvider[]{\n+            new ListResultObjectProvider(list1),\n+            new ListResultObjectProvider(list2), });\n+\n+        merges[2] = new MergedResultObjectProvider(new ResultObjectProvider[]{\n+            new ListResultObjectProvider(list),\n+            new ListResultObjectProvider(Collections.EMPTY_LIST), });\n+\n+        return merges;\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"f14e6be6374f2f4056f3560bba7d4a363330a3fb","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestOrderedMergedResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+/**\n+ * Tests the {@link MergedResultObjectProvider}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestOrderedMergedResultObjectProvider extends ResultListTest {\n+\n+    public TestOrderedMergedResultObjectProvider(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new WindowResultList(provider, 10);\n+    }\n+\n+    protected ResultObjectProvider[] getResultObjectProviders(List list) {\n+        Collections.shuffle(list);\n+        int quart = list.size() / 4;\n+        List list1 = new ArrayList(list.subList(0, quart));\n+        List list2 = new ArrayList(list.subList(quart, quart * 2));\n+        List list3 = new ArrayList(list.subList(quart * 2, quart * 3));\n+        List list4 = new ArrayList(list.subList(quart * 3, list.size()));\n+\n+        Comparator comp = new IntValueComparator();\n+        Collections.sort(list1, comp);\n+        Collections.sort(list2, comp);\n+        Collections.sort(list3, comp);\n+        Collections.sort(list4, comp);\n+\n+        ResultObjectProvider[] rops = new ResultObjectProvider[]{\n+            new ListResultObjectProvider(list1),\n+            new ListResultObjectProvider(list2),\n+            new ListResultObjectProvider(list3),\n+            new ListResultObjectProvider(list4), };\n+        return new ResultObjectProvider[]{\n+            new MergedResultObjectProvider(rops, comp)\n+        };\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+\n+    private static class IntValueComparator implements Comparator {\n+\n+        public int compare(Object o1, Object o2) {\n+            return Integer.valueOf(o1.toString()).\n+                compareTo(Integer.valueOf(o2.toString()));\n+        }\n+    }\n+}"},{"sha":"675708a8c39ee3e4127e9f3d32be5b7919fb71d8","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRandomAccessResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+/**\n+ * Tests the {@link RandomAccessResultList}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestRandomAccessResultList extends ResultListTest {\n+\n+    public TestRandomAccessResultList(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new RandomAccessResultList(provider);\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"f833fe2a2aa153fab1157e910ae1e733014d3f1b","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestRangeResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Tests the {@link RangeResultObjectProvider}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestRangeResultObjectProvider extends ResultListTest {\n+\n+    public TestRangeResultObjectProvider(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new WindowResultList(provider, 10);\n+    }\n+\n+    protected ResultObjectProvider[] getResultObjectProviders(List list) {\n+        // test 3 ranges:\n+        // 1. 0 to infinite\n+        // 2. 0 to N\n+        // 3. N to N + X\n+        ResultObjectProvider[] ranges = new ResultObjectProvider[3];\n+        ranges[0] = new RangeResultObjectProvider\n+            (new ListResultObjectProvider(list), 0, Integer.MAX_VALUE);\n+\n+        List copy = new ArrayList(list.size() + 10);\n+        copy.addAll(list);\n+        for (int i = list.size(); i < list.size() + 10; i++)\n+            copy.add(String.valueOf(i));\n+        ranges[1] = new RangeResultObjectProvider\n+            (new ListResultObjectProvider(copy), 0, list.size());\n+\n+        copy = new ArrayList(list.size() + 20);\n+        for (int i = -10; i < 0; i++)\n+            copy.add(String.valueOf(i));\n+        copy.addAll(list);\n+        for (int i = list.size(); i < list.size() + 10; i++)\n+            copy.add(String.valueOf(i));\n+        ranges[2] = new RangeResultObjectProvider\n+            (new ListResultObjectProvider(copy), 10, list.size() + 10);\n+\n+        return ranges;\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"35be06da82e9c9928779838e57bfe286b3de2b20","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSimpleResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+/**\n+ * Tests the {@link SimpleResultList}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestSimpleResultList extends ResultListTest {\n+\n+    public TestSimpleResultList(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new SimpleResultList(provider);\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"776390bc8ed55bc6bed92c9238df8b8a4abb98b2","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestSoftRandomAccessResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+/**\n+ * Tests the {@link SoftRandomAccessResultList}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestSoftRandomAccessResultList extends ResultListTest {\n+\n+    public TestSoftRandomAccessResultList(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new SoftRandomAccessResultList(provider);\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"ecd0d9ba6dfe9ce58326ba846a782c9adffc631e","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/rop/TestWindowResultList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.rop;\n+\n+/**\n+ * Tests the {@link WindowResultList}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestWindowResultList extends ResultListTest {\n+\n+    public TestWindowResultList(String test) {\n+        super(test);\n+    }\n+\n+    protected ResultList getResultList(ResultObjectProvider provider) {\n+        return new WindowResultList(provider, 10);\n+    }\n+\n+    public static void main(String[] args) {\n+        main();\n+    }\n+}"},{"sha":"0495c18519e646680e3da1c89f47cfebb33eadc0","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","status":"added","additions":1115,"deletions":0,"changes":1115,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,1115 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.test;\r\n+\r\n+import java.beans.BeanInfo;\r\n+import java.beans.IntrospectionException;\r\n+import java.beans.Introspector;\r\n+import java.beans.PropertyDescriptor;\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.File;\r\n+import java.io.FileInputStream;\r\n+import java.io.FileNotFoundException;\r\n+import java.io.FileOutputStream;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.PrintStream;\r\n+import java.io.PrintWriter;\r\n+import java.io.StringWriter;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.net.URL;\r\n+import java.text.NumberFormat;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Comparator;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.ListIterator;\r\n+import java.util.Map;\r\n+import java.util.NoSuchElementException;\r\n+import java.util.StringTokenizer;\r\n+\r\n+import junit.framework.TestCase;\r\n+import junit.framework.TestResult;\r\n+import junit.textui.TestRunner;\r\n+import org.apache.regexp.RE;\r\n+import org.apache.regexp.RESyntaxException;\r\n+import org.apache.regexp.REUtil;\r\n+import org.apache.tools.ant.AntClassLoader;\r\n+import org.apache.tools.ant.Project;\r\n+import org.apache.tools.ant.ProjectHelper;\r\n+import org.apache.openjpa.lib.log.Log;\r\n+import org.apache.openjpa.lib.log.LogFactoryImpl;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * TestCase framework to run various tests against solarmetric code.\r\n+ * This class contains various utility methods for the following functions:\r\n+ * <ul>\r\n+ * <li>Using multiple, isolated ClassLoaders</li>\r\n+ * <li>Running a test in multiple concurrent threads</li>\r\n+ * <li>Assertion helpers</li>\r\n+ * <li>Creating random Strings, numbers, etc.</li>\r\n+ * </ul>\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @author Patrick Linskey\r\n+ */\r\n+public abstract class AbstractTestCase extends TestCase {\r\n+\r\n+    public static final String TEST_METHODS =\r\n+        System.getProperty(AbstractTestCase.class.getName() + \".testMethods\");\r\n+    public static final long PLATFORM_ALL = 2 << 1;\r\n+    public static final long PLATFORM_UNKNOWN = 2 << 2;\r\n+\r\n+    public static final String SKIP_TOKEN = \"SOLARSKIP\";\r\n+    public static final String SKIP_DELIMITER = \"|\";\r\n+\r\n+    private static final Localizer _loc =\r\n+        Localizer.forPackage(AbstractTestCase.class);\r\n+\r\n+    private Log log = null;\r\n+\r\n+    private static Map _times = new HashMap();\r\n+\r\n+    private static AbstractTestCase _lastTest = null;\r\n+\r\n+    private static WatchdogThread _watchdog = new WatchdogThread();\r\n+    private long _timeout;\r\n+\r\n+    /**\r\n+     * Constructor. Create a test case with the specified name.\r\n+     */\r\n+    public AbstractTestCase(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public AbstractTestCase() {\r\n+    }\r\n+\r\n+    protected final Log getLog() {\r\n+        if (log == null)\r\n+            log = newLog();\r\n+        return log;\r\n+    }\r\n+\r\n+    protected Log newLog() {\r\n+        // this implementation leaves much to be desired, as it just\r\n+        // creates a new LogFactoryImpl each time, and does not apply\r\n+        // any configurations.\r\n+        return new LogFactoryImpl().getLog(getLogName());\r\n+    }\r\n+\r\n+    protected String getLogName() {\r\n+        return \"com.solarmetric.Runtime\";\r\n+    }\r\n+\r\n+    /**\r\n+     * Called before the watchdog thread is about to kill the entire\r\n+     * JVM due to a test case's timeout. This method offers the\r\n+     * ability to try to resolve whatever contention is taking place\r\n+     * in the test. It will be given 10 seconds to try to end the\r\n+     * test peacefully before the watchdog exits the JVM.\r\n+     */\r\n+    protected void preTimeout() {\r\n+    }\r\n+\r\n+    public void run(TestResult result) {\r\n+        if (skipTest()) {\r\n+            // keep track of the tests we skip so that we can get an\r\n+            // idea in the autobuild status\r\n+            System.err.println(SKIP_TOKEN + SKIP_DELIMITER\r\n+                + (\"\" + getClass().getName())\r\n+                + \".\" + getName() + SKIP_DELIMITER);\r\n+            return;\r\n+        }\r\n+\r\n+        if (_lastTest != null && _lastTest.getClass() != getClass()) {\r\n+            try {\r\n+                _lastTest.tearDownTestClass();\r\n+            } catch (Throwable t) {\r\n+                getLog().error(null, t);\r\n+            }\r\n+        }\r\n+\r\n+        if (_lastTest == null || _lastTest.getClass() != getClass()) {\r\n+            try {\r\n+                setUpTestClass();\r\n+            } catch (Throwable t) {\r\n+                getLog().error(null, t);\r\n+            }\r\n+        }\r\n+\r\n+        _lastTest = this;\r\n+\r\n+        // inform the watchdog thread that we are entering the test\r\n+        _watchdog.enteringTest(this);\r\n+        try {\r\n+            super.run(result);\r\n+        } finally {\r\n+            _watchdog.leavingTest(this);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * If this test should be skipped given the current\r\n+     * environment, return <code>true</code>. This allows a unit test\r\n+     * class to disable test cases on a per-method granularity, and\r\n+     * prevents the test from showing up as a passed test just\r\n+     * because it was skipped.\r\n+     * For example, if a particular test case method should not be\r\n+     * run against a certain database, this method could check the\r\n+     * name of the test result and the current database configuration\r\n+     * in order to make the decision:\r\n+     * <p/>\r\n+     * <code> protected boolean skipTest() {\r\n+     * // don't run with pointbase: it uses a DataSource, which\r\n+     * // can't be translated into a JBoss DataSource configuration.\r\n+     * if (\"testJBoss\".equals(getName()) &&\r\n+     * getCurrentPlatform() == PLATFORM_POINTBASE)\r\n+     * return true;\r\n+     * }\r\n+     * </code>\r\n+     * If you want to disable execution of an entire test case\r\n+     * class for a given database, you might want to add the class to\r\n+     * the excluded test list in that database's properties file.\r\n+     */\r\n+    protected boolean skipTest() {\r\n+        if (TEST_METHODS != null && TEST_METHODS.length() > 0)\r\n+            return TEST_METHODS.indexOf(getName()) == -1;\r\n+\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * This method is called before the first test in this test class\r\n+     * is executed.\r\n+     */\r\n+    public void setUpTestClass() throws Exception {\r\n+    }\r\n+\r\n+    /**\r\n+     * This method is called after the last test in this test class\r\n+     * is executed. It can be used to do things like clean up\r\n+     * large, slow processes that may have been started.\r\n+     */\r\n+    public void tearDownTestClass() throws Exception {\r\n+    }\r\n+\r\n+    public void tearDown() throws Exception {\r\n+        if (\"true\".equals(System.getProperty(\"meminfo\")))\r\n+            printMemoryInfo();\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    //////////////////////////\r\n+    // Generating random data\r\n+    //////////////////////////\r\n+\r\n+    /**\r\n+     * Support method to get a random Integer for testing.\r\n+     */\r\n+    public static Integer randomInt() {\r\n+        return new Integer((int) (Math.random() * Integer.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Character for testing.\r\n+     */\r\n+    public static Character randomChar() {\r\n+        char [] TEST_CHAR_ARRAY = new char []{\r\n+            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\r\n+            'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\r\n+            's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1',\r\n+            '2', '3', '4', '5', '6', '7', '8', '9' };\r\n+\r\n+        return new Character(TEST_CHAR_ARRAY[\r\n+            (int) (Math.random() * TEST_CHAR_ARRAY.length)]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Long for testing.\r\n+     */\r\n+    public static Long randomLong() {\r\n+        return new Long((long) (Math.random() * Long.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Short for testing.\r\n+     */\r\n+    public static Short randomShort() {\r\n+        return new Short((short) (Math.random() * Short.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Double for testing.\r\n+     */\r\n+    public static Double randomDouble() {\r\n+        return new Double((double) (Math.round(Math.random() * 5000d)) / 1000d);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Float for testing.\r\n+     */\r\n+    public static Float randomFloat() {\r\n+        return new Float((float) (Math.round(Math.random() * 5000f)) / 1000f);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Byte for testing.\r\n+     */\r\n+    public static Byte randomByte() {\r\n+        return new Byte((byte) (Math.random() * Byte.MAX_VALUE));\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Boolean for testing.\r\n+     */\r\n+    public static Boolean randomBoolean() {\r\n+        return new Boolean(Math.random() > 0.5 ? true : false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random Date for testing.\r\n+     */\r\n+    public static Date randomDate() {\r\n+        long millis = (long) (Math.random() * System.currentTimeMillis());\r\n+\r\n+        // round millis to the nearest 1000: this is because some\r\n+        // databases do not store the milliseconds correctly(e.g., MySQL).\r\n+        // This is a really a bug we should fix. FC #27.\r\n+        millis -= (millis % 1000);\r\n+\r\n+        return new Date(millis);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random String for testing.\r\n+     */\r\n+    public static String randomString() {\r\n+        // default to a small string, in case column sizes are\r\n+        // limited(such as with a string primary key)\r\n+        return randomString(50);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random String for testing.\r\n+     */\r\n+    public static String randomString(int len) {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < (int) (Math.random() * len) + 1; i++)\r\n+            buf.append(randomChar());\r\n+        return buf.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random clob for testing.\r\n+     */\r\n+    public static String randomClob() {\r\n+        StringBuffer sbuf = new StringBuffer();\r\n+        while (sbuf.length() < (5 * 1024)) { // at least 5K\r\n+            sbuf.append(randomString(1024));\r\n+        }\r\n+\r\n+        return sbuf.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random BigInteger for testing.\r\n+     */\r\n+    public static BigInteger randomBigInteger() {\r\n+        // too many of our test databases don't support bigints > MAX_LONG:\r\n+        // I don't like it, but for now, let's only test below MAX_LONG\r\n+        BigInteger lng = new BigInteger(\r\n+            ((long) (Math.random() * Long.MAX_VALUE)) + \"\");\r\n+\r\n+        BigInteger multiplier = new BigInteger(\"1\");\r\n+        // (1 + (int)(Math.random() * 10000)) + \"\");\r\n+        if (Math.random() < 0.5)\r\n+            multiplier = multiplier.multiply(new BigInteger(\"-1\"));\r\n+\r\n+        return lng.multiply(multiplier);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random BigDecimal for testing.\r\n+     */\r\n+    public static BigDecimal randomBigDecimal() {\r\n+        BigInteger start = randomBigInteger();\r\n+        String str = start.toString();\r\n+        // truncate off the last 8 digits: we still get some\r\n+        // overflows with lame databases.\r\n+        for (int i = 0; i < 8; i++)\r\n+            if (str.length() > 2)\r\n+                str = str.substring(0, str.length() - 1);\r\n+        start = new BigInteger(str);\r\n+\r\n+        String val = start + \".\" + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10))\r\n+            + ((int) (Math.random() * 10));\r\n+\r\n+        return new BigDecimal(val);\r\n+    }\r\n+\r\n+    /**\r\n+     * Support method to get a random blob for testing.\r\n+     */\r\n+    public static byte[] randomBlob() {\r\n+        // up to 100K blob\r\n+        byte [] blob = new byte [(int) (Math.random() * 1024 * 100)];\r\n+        for (int i = 0; i < blob.length; i++)\r\n+            blob[i] = randomByte().byteValue();\r\n+\r\n+        return blob;\r\n+    }\r\n+\r\n+    /**\r\n+     * Invoke setters for pimitives and primitive wrappers on the\r\n+     * specified object.\r\n+     */\r\n+    public static Object randomizeBean(Object bean)\r\n+        throws IntrospectionException, IllegalAccessException,\r\n+        InvocationTargetException {\r\n+        BeanInfo info = Introspector.getBeanInfo(bean.getClass());\r\n+        PropertyDescriptor [] props = info.getPropertyDescriptors();\r\n+        for (int i = 0; i < props.length; i++) {\r\n+            Method write = props[i].getWriteMethod();\r\n+            if (write == null)\r\n+                continue;\r\n+\r\n+            Class [] params = write.getParameterTypes();\r\n+            if (params == null || params.length != 1)\r\n+                continue;\r\n+\r\n+            Class paramType = params[0];\r\n+            Object arg = null;\r\n+\r\n+            if (paramType == boolean.class || paramType == Boolean.class)\r\n+                arg = randomBoolean();\r\n+            else if (paramType == byte.class || paramType == Byte.class)\r\n+                arg = randomByte();\r\n+            else if (paramType == char.class || paramType == Character.class)\r\n+                arg = randomChar();\r\n+            else if (paramType == short.class || paramType == Short.class)\r\n+                arg = randomShort();\r\n+            else if (paramType == int.class || paramType == Integer.class)\r\n+                arg = randomInt();\r\n+            else if (paramType == long.class || paramType == Long.class)\r\n+                arg = randomLong();\r\n+            else if (paramType == double.class || paramType == Double.class)\r\n+                arg = randomDouble();\r\n+            else if (paramType == float.class || paramType == Float.class)\r\n+                arg = randomFloat();\r\n+            else if (paramType == String.class)\r\n+                arg = randomString();\r\n+            else if (paramType == BigInteger.class)\r\n+                arg = randomBigInteger();\r\n+            else if (paramType == BigDecimal.class)\r\n+                arg = randomBigDecimal();\r\n+            else if (paramType == Date.class)\r\n+                arg = randomDate();\r\n+\r\n+            if (arg != null)\r\n+                write.invoke(bean, new Object []{ arg });\r\n+        }\r\n+\r\n+        return bean;\r\n+    }\r\n+\r\n+    /**\r\n+     * Utility method to start a profile.\r\n+     *\r\n+     * @see #endProfile(String)\r\n+     */\r\n+    public void startProfile(String name) {\r\n+        _times.put(name, new Long(System.currentTimeMillis()));\r\n+    }\r\n+\r\n+    /**\r\n+     * Utility to end the profile and print out the time. Example usage:\r\n+     * <p/>\r\n+     * <pre><code> startProfile(\"Some long task\"); doSomeLongTask();\r\n+     * endProfile(\"Some long task\");\r\n+     * </code></pre>\r\n+     *\r\n+     * @param name\r\n+     * @return the amount of time that this profile invocation took, or\r\n+     *         -1 if <code>name</code> was never started.\r\n+     */\r\n+    public long endProfile(String name) {\r\n+        Long time = (Long) _times.remove(name);\r\n+\r\n+        long elapsed = -1;\r\n+        if (time != null)\r\n+            elapsed = System.currentTimeMillis() - time.longValue();\r\n+\r\n+        getLog().info(_loc.get(\"profile-info\", name,\r\n+            (time == null ? \"???\" : \"\" + elapsed)));\r\n+        return elapsed;\r\n+    }\r\n+\r\n+    /////////////////////////\r\n+    // ClassLoader functions\r\n+    /////////////////////////\r\n+\r\n+    /**\r\n+     * Create a ClassLoader that will not use the parent\r\n+     * ClassLoader to resolve classes. This is useful for\r\n+     * testing interactions between Kodo in running\r\n+     * in ClassLoaderA and instances in ClassLoaderB.\r\n+     */\r\n+    public ClassLoader createIsolatedClassLoader() {\r\n+        return new IsolatedClassLoader();\r\n+    }\r\n+\r\n+    public NestedClassLoader createNestedClassLoader() {\r\n+        return new NestedClassLoader(false);\r\n+    }\r\n+\r\n+    public NestedClassLoader createNestedParentClassLoader() {\r\n+        return new NestedClassLoader(true);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reload the specified class in an isolated ClassLoader.\r\n+     *\r\n+     * @param target the target class to load\r\n+     * @return the Class as reloaded in an new ClassLoader\r\n+     */\r\n+    public Class isolate(Class target) throws ClassNotFoundException {\r\n+        Class result = isolate(target.getName());\r\n+        assertTrue(result != target);\r\n+        assertNotEquals(result, target);\r\n+        assertTrue(result.getClassLoader() != target.getClassLoader());\r\n+        return result;\r\n+    }\r\n+\r\n+    public Class isolate(String target) throws ClassNotFoundException {\r\n+        ClassLoader il = createIsolatedClassLoader();\r\n+        Class result = il.loadClass(target);\r\n+        assertEquals(result.getName(), target);\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public Class nest(Class target) throws ClassNotFoundException {\r\n+        ClassLoader il = createNestedClassLoader();\r\n+        Class result = il.loadClass(target.getName());\r\n+        assertTrue(result != target);\r\n+        assertNotEquals(result, target);\r\n+        assertTrue(result.getClassLoader() != target.getClassLoader());\r\n+        assertEquals(result.getName(), target.getName());\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public Object isolateNew(Class target)\r\n+        throws ClassNotFoundException, IllegalAccessException,\r\n+        InstantiationException {\r\n+        return isolate(target).newInstance();\r\n+    }\r\n+\r\n+    private static class NestedClassLoader extends AntClassLoader {\r\n+\r\n+        public NestedClassLoader(boolean useParent) {\r\n+            super(ClassLoader.getSystemClassLoader(), useParent);\r\n+\r\n+            for (StringTokenizer cltok = new StringTokenizer(\r\n+                System.getProperty(\"java.class.path\"), File.pathSeparator);\r\n+                cltok.hasMoreTokens();) {\r\n+                String path = cltok.nextToken();\r\n+\r\n+                // only load test paths, not jar files\r\n+                if (path.indexOf(\".jar\") != -1)\r\n+                    continue;\r\n+                if (path.indexOf(\".zip\") != -1)\r\n+                    continue;\r\n+\r\n+                addPathElement(path);\r\n+            }\r\n+\r\n+            try {\r\n+                if (!useParent) {\r\n+                    assertTrue(loadClass\r\n+                        (AbstractTestCase.class.getName()).getClassLoader()\r\n+                        != AbstractTestCase.class.getClassLoader());\r\n+                }\r\n+            } catch (ClassNotFoundException cnfe) {\r\n+                fail(cnfe.toString());\r\n+            }\r\n+        }\r\n+\r\n+        public Class findClass(String name) throws ClassNotFoundException {\r\n+            // don't isolate PC and related classes in kodo.enhnace\r\n+            if (name.indexOf(\".enhance.\") != -1)\r\n+                throw new ClassNotFoundException(name);\r\n+            if (name.indexOf(\"/enhance/\") != -1)\r\n+                throw new ClassNotFoundException(name);\r\n+            return super.findClass(name);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * A ClassLoader that is completely isolated with respect to\r\n+     * any classes that are loaded in the System ClassLoader.\r\n+     *\r\n+     * @author Marc Prud'hommeaux\r\n+     */\r\n+    private static class IsolatedClassLoader extends NestedClassLoader {\r\n+\r\n+        public IsolatedClassLoader() {\r\n+            super(false);\r\n+            setIsolated(false);\r\n+        }\r\n+    }\r\n+\r\n+    ///////////////\r\n+    // Collections\r\n+    ///////////////\r\n+\r\n+    /**\r\n+     * Validate that the specified {@link Collection} fulfills the\r\n+     * Collection contract as specified by the Collections API.\r\n+     * <p/>\r\n+     * <strong>Note</strong>: does not validate mutable operations\r\n+     */\r\n+    public static void validateCollection(Collection collection) {\r\n+        int size = collection.size();\r\n+        int iterated = 0;\r\n+        // ensure we can walk along the iterator\r\n+        for (Iterator i = collection.iterator(); i.hasNext();) {\r\n+            iterated++;\r\n+            i.next();\r\n+        }\r\n+\r\n+        // ensure the number of values iterated is the same as the list size\r\n+        assertEquals(size, iterated);\r\n+\r\n+        // also validate the list\r\n+        if (collection instanceof List) {\r\n+            List ll = new ArrayList();\r\n+            for (int i = 0; i < 100; i++)\r\n+                ll.add(new Integer(i));\r\n+            validateList((List) ll);\r\n+            validateList((List) collection);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Validate that the specified {@link List} fulfills the\r\n+     * List contract as specified by the Collections API.\r\n+     * <p/>\r\n+     * <strong>Note</strong>: does not validate mutable operations\r\n+     */\r\n+    public static void validateList(List list) {\r\n+        Object [] coreValues = list.toArray();\r\n+        Object [] values1 = new Object [list.size()];\r\n+        Object [] values2 = new Object [list.size()];\r\n+        Object [] values3 = new Object [list.size()];\r\n+        Object [] values4 = new Object [list.size()];\r\n+\r\n+        // fill sequential index access list\r\n+        for (int i = 0; i < list.size(); i++)\r\n+            values1[i] = list.get(i);\r\n+\r\n+        // fill sequential list\r\n+        int index = 0;\r\n+        ListIterator iter;\r\n+        for (iter = list.listIterator(0); iter.hasNext();) {\r\n+            assertEquals(index, iter.nextIndex());\r\n+            assertEquals(index, iter.previousIndex() + 1);\r\n+            values2[index] = iter.next();\r\n+            assertTrue(list.contains(values2[index]));\r\n+            index++;\r\n+        }\r\n+\r\n+        // ensure NoSuchElementException is thrown as appropriate\r\n+        try {\r\n+            iter.next();\r\n+            fail(\"next() should have resulted in a NoSuchElementException\");\r\n+        } catch (NoSuchElementException e) {\r\n+        } // as expected\r\n+\r\n+        // fill reverse sequential list\r\n+        int back = 0;\r\n+        for (iter = list.listIterator(list.size()); iter.hasPrevious();) {\r\n+            assertEquals(index, iter.previousIndex() + 1);\r\n+            assertEquals(index, iter.nextIndex());\r\n+            values3[--index] = iter.previous();\r\n+            back++;\r\n+        }\r\n+        assertEquals(list.size(), back);\r\n+\r\n+        // ensure NoSuchElementException is thrown as appropriate\r\n+        try {\r\n+            iter.previous();\r\n+            fail(\"previous() should have resulted in a \"\r\n+                + \"NoSuchElementException\");\r\n+        } catch (NoSuchElementException e) {\r\n+        } // as expected\r\n+\r\n+        // fill random access list\r\n+        List indices = new LinkedList();\r\n+        for (int i = 0; i < list.size(); i++)\r\n+            indices.add(new Integer(i));\r\n+\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            int rand = (int) (Math.random() * indices.size());\r\n+            Integer randIndex = (Integer) indices.remove(rand);\r\n+            values4[randIndex.intValue()] = list.get(randIndex.intValue());\r\n+        }\r\n+\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values1));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values1));\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values2));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values2));\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values4));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values4));\r\n+        assertEquals(Arrays.asList(coreValues), Arrays.asList(values3));\r\n+        assertIdentical(Arrays.asList(coreValues), Arrays.asList(values3));\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the given List contain the exact same\r\n+     * elements. This is different than the normal List contract, which\r\n+     * states that list1.equals(list2) if each element e1.equals(e2).\r\n+     * This method asserts that e1 == n2.\r\n+     */\r\n+    public static void assertIdentical(List c1, List c2) {\r\n+        assertEquals(c1.size(), c2.size());\r\n+        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\r\n+            i1.hasNext() && i2.hasNext();)\r\n+            assertTrue(i1.next() == i2.next());\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the collection parameter is already ordered\r\n+     * according to the specified comparator.\r\n+     */\r\n+    public void assertOrdered(Collection c, Comparator comp) {\r\n+        List l1 = new LinkedList(c);\r\n+        List l2 = new LinkedList(c);\r\n+        assertEquals(l1, l2);\r\n+        Collections.sort(l2, comp);\r\n+        assertEquals(l1, l2);\r\n+        Collections.sort(l1, comp);\r\n+        assertEquals(l1, l2);\r\n+    }\r\n+\r\n+    ////////////////////\r\n+    // Assertion Helpers\r\n+    ////////////////////\r\n+\r\n+    public void assertNotEquals(Object a, Object b) {\r\n+        if (a == null && b != null)\r\n+            return;\r\n+        if (a != null && b == null)\r\n+            return;\r\n+        if (!(a.equals(b)))\r\n+            return;\r\n+        if (!(b.equals(a)))\r\n+            return;\r\n+\r\n+        fail(\"expected !<\" + a + \">.equals(<\" + b + \">)\");\r\n+    }\r\n+\r\n+    public void assertSize(int size, Object ob) {\r\n+        if (ob == null) {\r\n+            assertEquals(size, 0);\r\n+            return;\r\n+        }\r\n+\r\n+        if (ob instanceof Collection)\r\n+            ob = ((Collection) ob).iterator();\r\n+        if (ob instanceof Iterator) {\r\n+            Iterator i = (Iterator) ob;\r\n+            int count = 0;\r\n+            while (i.hasNext()) {\r\n+                count++;\r\n+                i.next();\r\n+            }\r\n+\r\n+            assertEquals(size, count);\r\n+        } else\r\n+            fail(\"assertSize: expected Collection, Iterator, \"\r\n+                + \"Query, or Extent, but got \" + ob.getClass().getName());\r\n+    }\r\n+\r\n+    /////////////////////\r\n+    // Generic utilities\r\n+    /////////////////////\r\n+\r\n+    public void copy(File from, File to) throws IOException {\r\n+        copy(new FileInputStream(from), to);\r\n+    }\r\n+\r\n+    public void copy(InputStream in, File to) throws IOException {\r\n+        FileOutputStream fout = new FileOutputStream(to);\r\n+\r\n+        byte[] b = new byte[1024];\r\n+\r\n+        for (int n = 0; (n = in.read(b)) != -1;)\r\n+            fout.write(b, 0, n);\r\n+    }\r\n+\r\n+    /**\r\n+     * Print out information on memory usage.\r\n+     */\r\n+    public void printMemoryInfo() {\r\n+        Runtime rt = Runtime.getRuntime();\r\n+        long total = rt.totalMemory();\r\n+        long free = rt.freeMemory();\r\n+        long used = total - free;\r\n+\r\n+        NumberFormat nf = NumberFormat.getInstance();\r\n+        getLog().warn(_loc.get(\"mem-info\",\r\n+            nf.format(used),\r\n+            nf.format(total),\r\n+            nf.format(free)));\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a list of all values iterated by the given iterator.\r\n+     */\r\n+    public static List iteratorToList(Iterator i) {\r\n+        LinkedList list = new LinkedList();\r\n+        while (i.hasNext())\r\n+            list.add(i.next());\r\n+        return list;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return an array of the objects iterated by the given iterator.\r\n+     */\r\n+    public static Object [] iteratorToArray(Iterator i, Class [] clazz) {\r\n+        return iteratorToList(i).toArray(clazz);\r\n+    }\r\n+\r\n+    /**\r\n+     * Run ant on the specified build file.\r\n+     *\r\n+     * @param buildFile the build file to use\r\n+     * @param target the name of the target to invoke\r\n+     */\r\n+    public void ant(File buildFile, String target) {\r\n+        assertTrue(buildFile.isFile());\r\n+\r\n+        Project project = new Project();\r\n+        project.init();\r\n+        project.setUserProperty(\"ant.file\", buildFile.getAbsolutePath());\r\n+        ProjectHelper.configureProject(project, buildFile);\r\n+        project.executeTarget(target);\r\n+    }\r\n+\r\n+    /**\r\n+     * Serialize and deserialize the object.\r\n+     *\r\n+     * @param validateEquality make sure the hashCode and equals\r\n+     * methods hold true\r\n+     */\r\n+    public static Object roundtrip(Object orig, boolean validateEquality)\r\n+        throws IOException, ClassNotFoundException {\r\n+        assertNotNull(orig);\r\n+\r\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\r\n+        out.writeObject(orig);\r\n+        ByteArrayInputStream bin = new ByteArrayInputStream(\r\n+            bout.toByteArray());\r\n+        ObjectInputStream in = new ObjectInputStream(bin);\r\n+        Object result = in.readObject();\r\n+\r\n+        if (validateEquality) {\r\n+            assertEquals(orig, result);\r\n+            assertEquals(orig.hashCode(), result.hashCode());\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return true if the specified input matches the regular expression regex.\r\n+     */\r\n+    public static boolean matches(String regex, String input)\r\n+        throws RESyntaxException {\r\n+        RE re = REUtil.createRE(regex);\r\n+        return re.match(input);\r\n+    }\r\n+\r\n+    public static void assertMatches(String regex, String input) {\r\n+        try {\r\n+            if (!(matches(regex, input)))\r\n+                fail(\"Expected regular expression: <\" + regex + \">\"\r\n+                    + \" did not match: <\" + input + \">\");\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    public static void assertNotMatches(String regex, String input) {\r\n+        try {\r\n+            if (matches(regex, input))\r\n+                fail(\"Regular expression: <\" + regex + \">\"\r\n+                    + \" should not match: <\" + input + \">\");\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Check the list if strings and return the ones that match\r\n+     * the specified match.\r\n+     */\r\n+    public static List matches(String regex, Collection input)\r\n+        throws RESyntaxException {\r\n+        List matches = new ArrayList();\r\n+        for (Iterator i = input.iterator(); i.hasNext();) {\r\n+            String check = (String) i.next();\r\n+            if (matches(regex, check))\r\n+                matches.add(check);\r\n+        }\r\n+\r\n+        return matches;\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the specified collection of Strings contains at least\r\n+     * one string that matches the specified regular expression.\r\n+     */\r\n+    public static void assertMatches(String regex, Collection input) {\r\n+        try {\r\n+            if (matches(regex, input).size() == 0)\r\n+                fail(\"The specified list of size \" + input.size()\r\n+                    + \" did not contain any strings that match the\"\r\n+                    + \" specified regular expression(\\\"\" + regex + \"\\\")\");\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Assert that the specified collection of Strings does not match\r\n+     * the specified regular expression.\r\n+     */\r\n+    public static void assertNotMatches(String regex, Collection input) {\r\n+        try {\r\n+            List matches;\r\n+\r\n+            if (((matches = matches(regex, input))).size() > 0)\r\n+                fail(\"The specified list of size \" + input.size()\r\n+                    + \" did contain one or more strings that matchs the\"\r\n+                    + \" specified illegal regular expression\"\r\n+                    + \" (\\\"\" + regex + \"\\\").\"\r\n+                    + \" First example of a matching message is: \"\r\n+                    + matches.iterator().next());\r\n+        } catch (RESyntaxException e) {\r\n+            throw new IllegalArgumentException(e.toString());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * To be called by the child. E.g.:\r\n+     * <code> public static void main(String [] args) { main(TestBug375.class);\r\n+     * }\r\n+     * </code>\r\n+     */\r\n+    public static void main(Class c) {\r\n+        TestRunner.run(c);\r\n+    }\r\n+\r\n+    /**\r\n+     * To be called by child. Figures out the class from the calling context.\r\n+     */\r\n+    public static void main() {\r\n+        String caller = new SecurityManager() {\r\n+            public String toString() {\r\n+                return getClassContext()[2].getName();\r\n+            }\r\n+        }.toString();\r\n+\r\n+        try {\r\n+            main(Class.forName(caller));\r\n+        } catch (ClassNotFoundException cnfe) {\r\n+            throw new RuntimeException(cnfe.toString());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the jar file in which the class is contained.\r\n+     *\r\n+     * @return the jar file, or none if the class is not in a jar\r\n+     * @throws FileNotFoundException if the jar file cannot located\r\n+     */\r\n+    public static File getJarFile(Class clazz) throws FileNotFoundException {\r\n+        URL url = clazz.getResource(clazz.getName().substring(\r\n+            clazz.getName().lastIndexOf(\".\") + 1) + \".class\");\r\n+        if (url == null)\r\n+            throw new FileNotFoundException(clazz.toString());\r\n+\r\n+        String file = url.getFile();\r\n+        if (file == null)\r\n+            throw new FileNotFoundException(url.toString());\r\n+        int index = file.indexOf(\"!\");\r\n+        if (index == -1)\r\n+            throw new FileNotFoundException(file);\r\n+\r\n+        file = file.substring(0, index);\r\n+        file = file.substring(\"file:\".length());\r\n+\r\n+        File f = new File(file);\r\n+        if (!(f.isFile()))\r\n+            throw new FileNotFoundException(file);\r\n+\r\n+        return f.getAbsoluteFile();\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of milliseconds each test case will have for a timeout.\r\n+     */\r\n+    public void setTimeout(long timeout) {\r\n+        _timeout = timeout;\r\n+    }\r\n+\r\n+    /**\r\n+     * The number of milliseconds each test case will have for a timeout.\r\n+     */\r\n+    public long getTimeout() {\r\n+        return _timeout;\r\n+    }\r\n+\r\n+    /**\r\n+     * A watchdog that just exits the JVM if a test has not completed in\r\n+     * a certain amount of time. This speeds up the mechanism of determining\r\n+     * if a timeout has occurred, since we can exit the entire test run\r\n+     * if a test hasn't completed in a shorted amount of time than\r\n+     * the global test timeout.\r\n+     *\r\n+     * @author Marc Prud'hommeaux\r\n+     */\r\n+    private static class WatchdogThread extends Thread {\r\n+\r\n+        private final long _timeoutms;\r\n+        private long _endtime = -1;\r\n+        private AbstractTestCase _curtest = null;\r\n+\r\n+        public WatchdogThread() {\r\n+            super(\"Kodo test case watchdog thread\");\r\n+            setDaemon(true);\r\n+\r\n+            int timeoutMin = new Integer\r\n+                (System.getProperty(\"autobuild.testcase.timeout\", \"20\"))\r\n+                .intValue();\r\n+\r\n+            _timeoutms = timeoutMin * 60 * 1000;\r\n+        }\r\n+\r\n+        public void run() {\r\n+            while (true) {\r\n+                try {\r\n+                    sleep(200);\r\n+                } catch (InterruptedException ie) {\r\n+                }\r\n+\r\n+                if (_endtime > 0 && System.currentTimeMillis() > _endtime) {\r\n+                    Thread preTimeout = new Thread\r\n+                        (\"Attempting pre-timeout for \" + _curtest) {\r\n+                        public void run() {\r\n+                            _curtest.preTimeout();\r\n+                        }\r\n+                    };\r\n+                    preTimeout.start();\r\n+\r\n+                    // wait a little while for the pre-timeout\r\n+                    // thread to complete\r\n+                    try {\r\n+                        preTimeout.join(10 * 1000);\r\n+                    } catch (Exception e) {\r\n+                    }\r\n+\r\n+                    // give it a few more seconds...\r\n+                    try {\r\n+                        sleep(5 * 1000);\r\n+                    } catch (Exception e) {\r\n+                    }\r\n+\r\n+                    // new endtime? resume...\r\n+                    if (System.currentTimeMillis() < _endtime)\r\n+                        continue;\r\n+\r\n+                    new Exception(\"test case \"\r\n+                        + (_curtest != null ? _curtest.getName()\r\n+                        : \"UNKNOWN\") + \" timed out after \"\r\n+                        + _timeoutms + \"ms\").printStackTrace();\r\n+\r\n+                    // also run \"killall -QUIT java\" to try to grab\r\n+                    // a stack trace\r\n+                    try {\r\n+                        Runtime.getRuntime().exec\r\n+                            (new String[]{ \"killall\", \"-QUIT\", \"java\" });\r\n+                    } catch (Exception e) {\r\n+                    }\r\n+\r\n+                    try {\r\n+                        sleep(1000);\r\n+                    } catch (InterruptedException ie) {\r\n+                    }\r\n+\r\n+                    // now actually exit\r\n+                    System.exit(111);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        public synchronized void enteringTest(AbstractTestCase test) {\r\n+            long timeout = test.getTimeout();\r\n+            if (timeout <= 0)\r\n+                timeout = _timeoutms;\r\n+\r\n+            _endtime = System.currentTimeMillis() + timeout;\r\n+            _curtest = test;\r\n+\r\n+            if (!isAlive())\r\n+                start();\r\n+        }\r\n+\r\n+        public synchronized void leavingTest(AbstractTestCase test) {\r\n+            _endtime = -1;\r\n+            _curtest = null;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"d976d2c7d8e7d9b3ea77dff84e4ae31ac56d538e","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestAbstractEventManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,100 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import junit.framework.Test;\r\n+import junit.framework.TestCase;\r\n+import junit.framework.TestSuite;\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.lib.util.concurrent.AbstractConcurrentEventManager;\r\n+\r\n+/**\r\n+ * Tests the {@link AbstractConcurrentEventManager}.\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public class TestAbstractEventManager extends TestCase {\r\n+\r\n+    private EventManager _em = new EventManager();\r\n+\r\n+    public TestAbstractEventManager(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testReentrantAdd() {\r\n+        Listener l1 = new Listener(Listener.ADD);\r\n+        Listener l2 = new Listener(Listener.NONE);\r\n+        _em.addListener(l1);\r\n+        _em.addListener(l2);\r\n+        _em.fireEvent(new Object());\r\n+        assertTrue(l1.fired);\r\n+        assertTrue(l2.fired);\r\n+        assertEquals(3, _em.getListeners().size());\r\n+    }\r\n+\r\n+    public void testReentrantRemove() {\r\n+        Listener l1 = new Listener(Listener.REMOVE);\r\n+        Listener l2 = new Listener(Listener.NONE);\r\n+        _em.addListener(l1);\r\n+        _em.addListener(l2);\r\n+        _em.fireEvent(new Object());\r\n+        assertTrue(l1.fired);\r\n+        assertTrue(l2.fired);\r\n+        assertEquals(1, _em.getListeners().size());\r\n+        assertFalse(_em.getListeners().contains(l1));\r\n+    }\r\n+\r\n+    public static Test suite() {\r\n+        return new TestSuite(TestAbstractEventManager.class);\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(suite());\r\n+    }\r\n+\r\n+    private static class EventManager extends AbstractConcurrentEventManager {\r\n+\r\n+        protected void fireEvent(Object event, Object listener) {\r\n+            ((Listener) listener).fire();\r\n+        }\r\n+    }\r\n+\r\n+    private class Listener {\r\n+\r\n+        public static final int NONE = 0;\r\n+        public static final int ADD = 1;\r\n+        public static final int REMOVE = 2;\r\n+\r\n+        public boolean fired;\r\n+        private final int _action;\r\n+\r\n+        public Listener(int action) {\r\n+            _action = action;\r\n+        }\r\n+\r\n+        public void fire() {\r\n+            fired = true;\r\n+            if (_action == ADD)\r\n+                _em.addListener(new Listener(NONE));\r\n+            else if (_action == REMOVE)\r\n+                assertTrue(_em.removeListener(this));\r\n+        }\r\n+    }\r\n+}\r\n+\r"},{"sha":"3f87372196414b703eaa505a1e79f66327e8bd56","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestLocalizer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+import org.apache.openjpa.lib.util.Localizer.Message;\n+import org.apache.openjpa.lib.util.testlocalizer.LocalizerTestHelper;\n+\n+/**\n+ * Tests the Localizer.\n+ *\n+ * @author Abe White\n+ */\n+public class TestLocalizer extends TestCase {\n+\n+    private Localizer _locals = null;\n+\n+    public TestLocalizer(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        _locals = Localizer.forPackage(LocalizerTestHelper.class);\n+    }\n+\n+    /**\n+     * Test getting a string for a class.\n+     */\n+    public void testForClass() {\n+        assertEquals(Locale.getDefault().equals(Locale.GERMANY)\n+            ? \"value1_de\" : \"value1\", _locals.get(\"test.local1\"));\n+    }\n+\n+    /**\n+     * Test getting a string for a non-default locale.\n+     */\n+    public void testForLocale() {\n+        Localizer locl = Localizer.forPackage(LocalizerTestHelper.class,\n+            Locale.GERMANY);\n+        assertEquals(\"value1_de\", locl.get(\"test.local1\"));\n+    }\n+\n+    /**\n+     * Tests that if a locale is missing the system falls back to the default.\n+     */\n+    public void testFallbackLocale() {\n+        Localizer locl = Localizer.forPackage(LocalizerTestHelper.class,\n+            Locale.FRANCE);\n+        assertEquals(Locale.getDefault().equals(Locale.GERMANY)\n+            ? \"value1_de\" : \"value1\", locl.get(\"test.local1\"));\n+    }\n+\n+    /**\n+     * Tests that a null class accesses the localizer.properties file\n+     * for the top-level(no package).\n+     */\n+    public void testTopLevel() {\n+        Localizer system = Localizer.forPackage(null);\n+        assertEquals(\"systemvalue1\", system.get(\"test.systemlocal\"));\n+    }\n+\n+    /**\n+     * Test that the message formatting works correctly.\n+     */\n+    public void testMessageFormat() {\n+        String suffix = Locale.getDefault().equals(Locale.GERMANY) ? \"_de\" : \"\";\n+\n+        assertEquals(\"value2\" + suffix + \" x sep y\", _locals.get(\"test.local2\",\n+            new String[]{ \"x\", \"y\" }));\n+\n+        // test that it treates single objects as single-element arrays\n+        assertEquals(\"value2\" + suffix + \" x sep {1}\",\n+            _locals.get(\"test.local2\", \"x\"));\n+    }\n+\n+    /**\n+     * Test that a {@link MissingResourceException} is thrown for missing\n+     * resource bundles.\n+     */\n+    public void testMissingBundle() {\n+        Localizer missing = Localizer.forPackage(String.class);\n+        assertEquals(\"foo.bar\", missing.get(\"foo.bar\"));\n+        try {\n+            missing.getFatal(\"foo.bar\");\n+            fail(\"No exception for fatal get on missing bundle.\");\n+        } catch (MissingResourceException mre) {\n+        }\n+    }\n+\n+    /**\n+     * Test that a {@link MissingResourceException} is thrown for missing keys.\n+     */\n+    public void testMissingKey() {\n+        assertEquals(\"foo.bar\", _locals.get(\"foo.bar\"));\n+        try {\n+            _locals.getFatal(\"foo.bar\");\n+            fail(\"No exception for fatal get on missing key.\");\n+        } catch (MissingResourceException mre) {\n+        }\n+    }\n+    \n+    public static void assertEquals(String s, Message m) {\n+        assertEquals(s, m.getMessage());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestLocalizer.class);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+}"},{"sha":"c56c6677de48dc2b6516c2576ba49e1267211b7b","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestMultiClassLoader.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.net.URL;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the {@link MultiClassLoader}.\n+ *\n+ * @author Abe White\n+ */\n+public class TestMultiClassLoader extends TestCase {\n+\n+    private ClassLoader SYSTEM_LOADER = MultiClassLoader.class.getClassLoader();\n+\n+    private MultiClassLoader _loader = new MultiClassLoader();\n+\n+    public TestMultiClassLoader(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        _loader.addClassLoader(MultiClassLoader.THREAD_LOADER);\n+        _loader.addClassLoader(SYSTEM_LOADER);\n+    }\n+\n+    /**\n+     * Tests basic add/remove functionality.\n+     */\n+    public void testBasic() {\n+        assertEquals(2, _loader.size());\n+        assertTrue(!_loader.isEmpty());\n+        assertTrue(_loader.getClassLoaders()[0] == SYSTEM_LOADER);\n+        assertEquals(Thread.currentThread().getContextClassLoader(),\n+            _loader.getClassLoaders()[1]);\n+        assertTrue(_loader.getClassLoader(0) == SYSTEM_LOADER);\n+        assertTrue(!_loader.addClassLoader(_loader.THREAD_LOADER));\n+\n+        FooLoader foo = new FooLoader();\n+        assertTrue(_loader.addClassLoader(foo));\n+        assertTrue(!_loader.addClassLoader(foo));\n+        assertEquals(3, _loader.size());\n+        assertEquals(foo, _loader.getClassLoaders()[2]);\n+\n+        assertTrue(_loader.removeClassLoader(_loader.THREAD_LOADER));\n+        assertTrue(!_loader.removeClassLoader(_loader.THREAD_LOADER));\n+        assertEquals(2, _loader.size());\n+        assertTrue(_loader.getClassLoaders()[0] == SYSTEM_LOADER);\n+        assertEquals(foo, _loader.getClassLoaders()[1]);\n+\n+        assertTrue(_loader.removeClassLoader(foo));\n+        assertTrue(_loader.removeClassLoader(SYSTEM_LOADER));\n+        assertTrue(_loader.isEmpty());\n+\n+        MultiClassLoader loader2 = new MultiClassLoader();\n+        loader2.addClassLoader(MultiClassLoader.THREAD_LOADER);\n+        loader2.addClassLoader(SYSTEM_LOADER);\n+        assertTrue(_loader.addClassLoaders(loader2));\n+        assertTrue(!_loader.addClassLoaders(loader2));\n+        FooLoader foo2 = new FooLoader();\n+        loader2.addClassLoader(foo);\n+        loader2.addClassLoader(foo2);\n+        assertTrue(_loader.addClassLoaders(1, loader2));\n+        ClassLoader[] loaders = _loader.getClassLoaders();\n+        assertTrue(loaders[0] == SYSTEM_LOADER);\n+        assertEquals(Thread.currentThread().getContextClassLoader(),\n+            loaders[3]);\n+        assertEquals(foo, loaders[1]);\n+        assertEquals(foo2, loaders[2]);\n+    }\n+\n+    /**\n+     * Test finding classes.\n+     */\n+/*\n+ public void testClassForName()\n+ throws Exception\n+ {\n+ assertEquals(MultiClassLoader.class,\n+ Class.forName(MultiClassLoader.class.getName(), true, _loader));\n+ assertTrue(_loader.removeClassLoader(SYSTEM_LOADER));\n+ assertTrue(_loader.removeClassLoader(MultiClassLoader.THREAD_LOADER));\n+ try\n+ {\n+ // have to switch classes here b/c other is now cached\n+ assertEquals(TestMultiClassLoader.class, Class.forName\n+ (TestMultiClassLoader.class.getName(), true, _loader));\n+ fail(\"System class laoder still working.\");\n+ } catch (ClassNotFoundException cnfe)\n+ {\n+ }\n+ try\n+ {\n+ Class.forName(\"foo\", true, _loader);\n+ fail(\"Somehow found 'foo'???\");\n+ } catch (ClassNotFoundException cnfe)\n+ {\n+ }\n+ _loader.addClassLoader(new FooLoader());\n+ assertEquals(Integer.class, Class.forName(\"foo\", true, _loader));\n+ }\n+*/\n+\n+    /**\n+     * Test finding resources.\n+     */\n+    public void testGetResource() {\n+        assertNull(_loader.getResource(\"foo\"));\n+        _loader.addClassLoader(new FooLoader());\n+        assertNotNull(_loader.getResource(\"foo\"));\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestMultiClassLoader.class);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    private static final class FooLoader extends ClassLoader {\n+\n+        protected Class findClass(String name) throws ClassNotFoundException {\n+            if (\"foo\".equals(name))\n+                return Integer.class;\n+            throw new ClassNotFoundException(name);\n+        }\n+\n+        protected URL findResource(String name) {\n+            try {\n+                if (\"foo\".equals(name))\n+                    return new URL(\"file:///dev/null\");\n+            } catch (Exception e) {\n+            }\n+            return null;\n+        }\n+    }\n+}"},{"sha":"335468b0b97e450c2380a11360cfc0b237fee754","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","status":"added","additions":220,"deletions":0,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestOptions.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,220 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import java.util.Properties;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the {@link Options} type.\n+ *\n+ * @author Abe White\n+ */\n+public class TestOptions extends TestCase {\n+\n+    private Options _opts = null;\n+\n+    private String[] _args = new String[]{\n+        \"-int\", \"10\", \"-boolean\", \"-string\", \"STR,STR2\", \"-range1\", \"10,100\",\n+        \"-range2\", \"10\", \"-fieldVal\", \"20\", \"-FieldVal2\", \"30\",\n+        \"-inner.nullInner.range1\", \"10,100\", \"arg1\", \"arg2\", \"arg3\" };\n+\n+    public TestOptions(String test) {\n+        super(test);\n+    }\n+\n+    public void setUp() {\n+        Properties defs = new Properties();\n+        defs.setProperty(\"default\", \"value\");\n+        _opts = new Options(defs);\n+        _args = _opts.setFromCmdLine(_args);\n+    }\n+\n+    /**\n+     * Test command-line parsing.\n+     */\n+    public void testCmdLineParsing() {\n+        assertEquals(3, _args.length);\n+        assertEquals(\"arg1\", _args[0]);\n+        assertEquals(\"arg2\", _args[1]);\n+        assertEquals(\"arg3\", _args[2]);\n+\n+        assertEquals(\"10\", _opts.getProperty(\"int\"));\n+        assertEquals(\"true\", _opts.getProperty(\"boolean\"));\n+        assertEquals(\"STR,STR2\", _opts.getProperty(\"string\"));\n+        assertEquals(\"20\", _opts.getProperty(\"fieldVal\"));\n+        assertEquals(\"30\", _opts.getProperty(\"FieldVal2\"));\n+        assertEquals(\"10,100\", _opts.getProperty(\"range1\"));\n+        assertEquals(\"10\", _opts.getProperty(\"range2\"));\n+        assertEquals(\"10,100\", _opts.getProperty(\"inner.nullInner.range1\"));\n+        assertEquals(\"value\", _opts.getProperty(\"default\"));\n+\n+        _args = _opts.setFromCmdLine(new String[]{ \"-default\", \"newValue\" });\n+        assertEquals(0, _args.length);\n+        assertEquals(\"newValue\", _opts.getProperty(\"default\"));\n+    }\n+\n+    /**\n+     * Tests the setting of option values into bean objects.\n+     */\n+    public void testSetObject() {\n+        Inner inner = new Inner();\n+        _opts.setInto(inner);\n+\n+        assertEquals(10, inner.getInt());\n+        assertTrue(inner.getBoolean());\n+        assertEquals(\"STR,STR2\", inner.getString());\n+        assertEquals(20, inner.fieldVal);\n+        assertEquals(30, inner.fieldVal2);\n+        assertEquals(10, inner.getRange1()[0]);\n+        assertEquals(100, inner.getRange1()[1]);\n+        assertEquals(10, inner.getRange2()[0]);\n+        assertEquals(0, inner.getRange2()[1]);\n+        assertEquals(\"value\", inner.getDefault());\n+\n+        assertEquals(10, inner.getInner().getNullInner().getRange1()[0]);\n+        assertEquals(100, inner.getInner().getNullInner().getRange1()[1]);\n+\n+        inner = new Inner();\n+        Options opts = new Options();\n+        opts.setProperty(\"inner\", Inner2.class.getName());\n+        opts.setInto(inner);\n+        assertEquals(Inner2.class, inner.getInner().getClass());\n+\n+        inner = new Inner();\n+        opts = new Options();\n+        opts.setProperty(\"mixed\", \"STR,1\");\n+        opts.setInto(inner);\n+        assertEquals(1, inner.getInt());\n+        assertEquals(\"STR\", inner.getString());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestOptions.class);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Used internally for testing; must be public so Options can construct it.\n+     */\n+    public static class Inner {\n+\n+        public int fieldVal = 0;\n+        public int fieldVal2 = 0;\n+\n+        private int _int = 0;\n+        private boolean _boolean = false;\n+        private String _string = null;\n+        private String _default = null;\n+        private Inner _inner = null;\n+        private Inner _nullInner = null;\n+        private int[] _range1 = new int[2];\n+        private int[] _range2 = new int[2];\n+\n+        public Inner() {\n+        }\n+\n+        public int getInt() {\n+            return _int;\n+        }\n+\n+        public void setInt(int i) {\n+            _int = i;\n+        }\n+\n+        public boolean getBoolean() {\n+            return _boolean;\n+        }\n+\n+        public void setBoolean(boolean b) {\n+            _boolean = b;\n+        }\n+\n+        public String getString() {\n+            return _string;\n+        }\n+\n+        public void setString(String s) {\n+            _string = s;\n+        }\n+\n+        public String getDefault() {\n+            return _default;\n+        }\n+\n+        public void setDefault(String s) {\n+            _default = s;\n+        }\n+\n+        public int[] getRange1() {\n+            return _range1;\n+        }\n+\n+        public void setRange1(int min, int max) {\n+            _range1[0] = min;\n+            _range1[1] = max;\n+        }\n+\n+        public int[] getRange2() {\n+            return _range2;\n+        }\n+\n+        public void setRange2(int min, int max) {\n+            _range2[0] = min;\n+            _range2[1] = max;\n+        }\n+\n+        public void setMixed(String s, int i) {\n+            _int = i;\n+            _string = s;\n+        }\n+\n+        public Inner getInner() {\n+            if (_inner == null)\n+                _inner = new Inner();\n+            return _inner;\n+        }\n+\n+        public void setInner(Inner in) {\n+            _inner = in;\n+        }\n+\n+        public Inner getNullInner() {\n+            return _nullInner;\n+        }\n+\n+        public void setNullInner(Inner in) {\n+            _nullInner = in;\n+        }\n+    }\n+\n+    /**\n+     * Used internally for testing; must be public so Options can construct it.\n+     */\n+    public static class Inner2 extends Inner {\n+\n+    }\n+}"},{"sha":"28470074ac6f796fac155cfa5dcfd5bef911f404","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestParameterTemplate.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.lib.util;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the {@link ParameterTemplate} utility class.\n+ *\n+ * @author Abe White\n+ */\n+public class TestParameterTemplate extends TestCase {\n+\n+    private ParameterTemplate templ = new ParameterTemplate();\n+\n+    public TestParameterTemplate(String test) {\n+        super(test);\n+    }\n+\n+    public void testParameters() {\n+        templ.append(\"{foo$${foo}bar{${bar}}biz baz$\");\n+        templ.append(\"{booz}booz${java.io.tmpdir}{ack}\");\n+\n+        templ.setParameter(\"foo\", \"X\");\n+        templ.setParameter(\"bar\", \"Y\");\n+        templ.setParameter(\"booz\", \"Z\");\n+        String tmpdir = System.getProperty(\"java.io.tmpdir\");\n+        assertEquals(\"{foo$Xbar{Y}biz bazZbooz\" + tmpdir + \"{ack}\",\n+            templ.toString());\n+\n+        templ.clearParameters();\n+        templ.setParameter(\"foo\", \"AA\");\n+        templ.setParameter(\"bar\", \"BB\");\n+        templ.setParameter(\"booz\", \"CC\");\n+        assertEquals(\"{foo$AAbar{BB}biz bazCCbooz\" + tmpdir + \"{ack}\",\n+            templ.toString());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestParameterTemplate.class);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+}\n+"},{"sha":"e2f50e4a16453fce0f8a53b1f251f1443b710d34","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","status":"added","additions":400,"deletions":0,"changes":400,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestPropertiesParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,400 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.lib.util;\r\n+\r\n+import java.io.BufferedInputStream;\r\n+import java.io.BufferedReader;\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.StringBufferInputStream;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+import java.util.Properties;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.openjpa.lib.util.FormatPreservingProperties.DuplicateKeyException;\r\n+\r\n+// things to test:\r\n+// - delimiters in keys\r\n+// - escape chars, including \\:, \\= in files(as generated by Properties)\r\n+// - unicode\r\n+// - non-String keys / vals\r\n+// - list() method behavior\r\n+\r\n+public class TestPropertiesParser extends TestCase {\r\n+\r\n+    private static final String LS = System.getProperty( \"line.separator\" );\r\n+\r\n+    public void testSimpleProperties() throws IOException {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        buf.append(\"key: value\" + LS);\r\n+        buf.append(\"key2: value2\"); // no EOL -- this is intentional\r\n+        Properties p = toProperties(buf.toString());\r\n+        assertProperties(new String[][]{\r\n+            { \"key\", \"value\" }, { \"key2\", \"value2\" } }, p);\r\n+    }\r\n+\r\n+    public void testComments() throws IOException {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        buf.append(\"# this is a comment\" + LS);\r\n+        buf.append(\" # another one, with leading whitespace\t\" + LS);\r\n+        buf.append(\" \t# \tand more with interesting whitespace\t\" + LS);\r\n+        buf.append(\"! and with a ! delimiter\" + LS);\r\n+        buf.append(\"! and with escape \\t chars\" + LS);\r\n+        buf.append(\"#and a comment with no whitespace\" + LS);\r\n+        Properties p = toProperties(buf.toString());\r\n+        assertEquals(0, p.size());\r\n+    }\r\n+\r\n+    public void testMixedContent() throws IOException {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        buf.append(\"# this is a comment\" + LS);\r\n+        buf.append(\" # another one, with leading whitespace\t\" + LS);\r\n+        buf.append(\"foo: bar#baz\" + LS);\r\n+        buf.append(\"! and with a ! delimiter\" + LS);\r\n+        buf.append(\"! and with escape \\t chars\" + LS);\r\n+        Properties p = toProperties(buf.toString());\r\n+        assertProperties(new String[][]{ { \"foo\", \"bar#baz\" } }, p);\r\n+    }\r\n+\r\n+    public void testMultiLineInput() throws IOException {\r\n+        String s = \"foo: bar\\\\\" + LS + \"more line goes here\";\r\n+        Properties p = toProperties(s);\r\n+        assertProperties(\r\n+            new String[][]{ { \"foo\", \"barmore line goes here\" } }, p);\r\n+    }\r\n+\r\n+    public void testEmptyLines() throws IOException {\r\n+        Properties p = toProperties(LS + \"foo: bar\" + LS + LS + \"baz: val\");\r\n+        assertProperties(new String[][]{ { \"foo\", \"bar\" }, { \"baz\", \"val\" } },\r\n+            p);\r\n+    }\r\n+\r\n+    public void testAddProperties() throws IOException {\r\n+        // intentionally left out the trailing end line\r\n+        String s = \"foo: bar\" + LS + \"baz: val\";\r\n+        Properties p = toProperties(s);\r\n+        assertProperties(new String[][]{ { \"foo\", \"bar\" }, { \"baz\", \"val\" } },\r\n+            p);\r\n+\r\n+        p.put(\"new-key\", \"val1\");\r\n+        p.put(\"new-key-2\", \"val2\");\r\n+        p.put(\"another-new-key\", \"val3\");\r\n+        assertRoundTrip(s + LS + \"new-key: val1\" + LS + \"new-key-2: val2\" + LS +\r\n+            \"another-new-key: val3\" + LS, p);\r\n+    }\r\n+\r\n+    public void testAddAndMutateProperties() throws IOException {\r\n+        // intentionally left out the trailing end line\r\n+        Properties p = toProperties(\"foo: bar\" + LS + \"baz: val\");\r\n+        assertProperties(new String[][]{ { \"foo\", \"bar\" }, { \"baz\", \"val\" } },\r\n+            p);\r\n+\r\n+        p.put(\"new-key\", \"new value\");\r\n+        p.put(\"foo\", \"barbar\");\r\n+        assertRoundTrip(\"foo: barbar\" + LS + \"baz: val\" + LS \r\n+            + \"new-key: new value\" + LS, p);\r\n+    }\r\n+\r\n+    public void testEscapedEquals() throws IOException {\r\n+        Properties p = toProperties(\"foo=bar\\\\=WARN,baz\\\\=TRACE\");\r\n+        assertProperties(new String[][]{ { \"foo\", \"bar=WARN,baz=TRACE\" } }, p);\r\n+    }\r\n+\r\n+    public void testLineTypes() throws IOException {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        buf.append(\"   !comment\" + LS + \" \\t  \" + LS + \"name = no\" + LS + \"    \"\r\n+            + \"#morec\\tomm\\\\\" + LS + \"ents\" + LS + LS + \"  dog=no\\\\cat   \" + LS \r\n+            + \"burps    :\" + LS + \"test=\" + LS + \"date today\" + LS + LS + LS \r\n+            + \"long\\\\\" + LS + \"   value=tryin \\\\\" + LS + \" \"\r\n+            + \"gto\" + LS + \"4:vier\" + LS + \"vier     :4\");\r\n+        Properties p = toProperties(buf.toString());\r\n+        assertProperties(new String[][]{\r\n+            { \"name\", \"no\" }, { \"ents\", \"\" }, { \"dog\", \"nocat   \" },\r\n+            { \"burps\", \"\" }, { \"test\", \"\" }, { \"date\", \"today\" },\r\n+            { \"longvalue\", \"tryin gto\" }, { \"4\", \"vier\" }, { \"vier\", \"4\" },\r\n+        }, p);\r\n+    }\r\n+\r\n+    public void testSpecialChars() throws Throwable {\r\n+        testSpecialChars(false, true);\r\n+        testSpecialChars(true, true);\r\n+        testSpecialChars(false, false);\r\n+        testSpecialChars(true, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that special characters work.\r\n+     *\r\n+     * @param formattingProps if true, test against the\r\n+     * FormatPreservingProperties, otherwise test\r\n+     * against a normal Properties instance(for validation of the test case).\r\n+     * @param value whether to test the key or the value\r\n+     */\r\n+    public void testSpecialChars(boolean formattingProps, boolean value)\r\n+        throws Throwable {\r\n+        List valueList = new ArrayList(Arrays.asList(new String[]{\r\n+            \"xxyy\", \"xx\\\\yy\", \"xx\" + LS + \"yy\", \"xx\\\\nyy\", \"xx\\tyy\", \"xx\\\\tyy\",\r\n+            \"xx\\ryy\", \"xx\\\\ryy\", \"xx\\fyy\", \"xx\\\\fyy\", \"xx\\r\" + LS + \"\\\\\\t\\r\\t\" \r\n+            + LS + \"yy\",\r\n+            \"xx\\\\r\" + LS + \"\\\\\\t\\\\r\\t\\\\nyy\",\r\n+            \"xx\\r\" + LS + \"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\t\\r\\t\" + LS + \"yy\",\r\n+            \"C:\\\\Program Files\\\\Some Application\\\\OpenJPA\\\\My File.dat\", }));\r\n+\r\n+        // also store every individual character\r\n+        for (char c = 'a'; c < 'Z'; c++) {\r\n+            valueList.add(new String(new char[]{ c }));\r\n+            valueList.add(new String(new char[]{ c, '\\\\', c }));\r\n+            valueList.add(new String(new char[]{ '\\\\', c }));\r\n+        }\r\n+\r\n+        String[] values = (String[]) valueList.toArray(new String[0]);\r\n+\r\n+        final String dummy = \"XXX\";\r\n+\r\n+        for (int i = 0; i < values.length; i++) {\r\n+            // test special characters in either keys or values\r\n+            String val = value ? values[i] : dummy;\r\n+            String key = value ? dummy : values[i];\r\n+\r\n+            Properties p = formattingProps ?\r\n+                new FormatPreservingProperties() : new Properties();\r\n+            if (p instanceof FormatPreservingProperties) {\r\n+                // set these properties so we behave the same way as\r\n+                // java.util.Properties\r\n+                ((FormatPreservingProperties) p).setDefaultEntryDelimiter('=');\r\n+                ((FormatPreservingProperties) p).\r\n+                    setAddWhitespaceAfterDelimiter(false);\r\n+            }\r\n+\r\n+            p.setProperty(key, val);\r\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+            p.store(out, null);\r\n+\r\n+            Properties copy = new Properties();\r\n+            copy.setProperty(key, val);\r\n+            ByteArrayOutputStream copyOut = new ByteArrayOutputStream();\r\n+            copy.store(copyOut, null);\r\n+\r\n+            p = formattingProps ?\r\n+                new FormatPreservingProperties() : new Properties();\r\n+\r\n+            InputStream in = new BufferedInputStream\r\n+                (new ByteArrayInputStream(out.toByteArray()));\r\n+\r\n+            try {\r\n+                // make sure that the 2 properties serialized are the same\r\n+                String copyOutString = stripComments(copyOut.toByteArray());\r\n+                String outString = stripComments(out.toByteArray());\r\n+                assertEquals(copyOutString, outString);\r\n+\r\n+                p.load(in);\r\n+\r\n+                assertNotNull(\"Property \\\"\" + key + \"\\\" was null\",\r\n+                    p.getProperty(key));\r\n+                assertEquals(val.trim(), p.getProperty(key).trim());\r\n+            } catch (Throwable ioe) {\r\n+                if (!formattingProps)\r\n+                    throw ioe;\r\n+\r\n+                // bug(1211, ioe,\r\n+                // \"Cannot store backslash in FormatPreservingProperties\");\r\n+                throw ioe;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    static Character randomChar() {\r\n+        char [] TEST_CHAR_ARRAY = new char []{\r\n+            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\r\n+            'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\r\n+            's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1',\r\n+            '2', '3', '4', '5', '6', '7', '8', '9' };\r\n+\r\n+        return new Character(TEST_CHAR_ARRAY[\r\n+            (int) (Math.random() * TEST_CHAR_ARRAY.length)]);\r\n+    }\r\n+\r\n+    static String randomString(int len) {\r\n+        StringBuffer buf = new StringBuffer();\r\n+        for (int i = 0; i < (int) (Math.random() * len) + 1; i++)\r\n+            buf.append(randomChar());\r\n+        return buf.toString();\r\n+    }\r\n+\r\n+    public void testEquivalentStore() throws IOException {\r\n+        Properties p1 = new Properties();\r\n+        FormatPreservingProperties p2 = new FormatPreservingProperties();\r\n+\r\n+        ((FormatPreservingProperties) p2).setDefaultEntryDelimiter('=');\r\n+        ((FormatPreservingProperties) p2).setAddWhitespaceAfterDelimiter(false);\r\n+\r\n+        String[] values =\r\n+            new String[] { \r\n+                \"x\", \r\n+                \"x\" + LS + \"y\", \r\n+                \"x\\\\ny\", \r\n+                \"x\\ty\", \r\n+                \"x\\\\ty\",\r\n+                \"x\\fy\", \r\n+                \"x\\\\fy\", \r\n+                \"x\\ry\", \r\n+                \"x\\\\ry\", \r\n+                \"C:\\\\Foo Bar\\\\Baz\",\r\n+                randomString(5).replace('a', '\\\\'),\r\n+                randomString(500).replace('a', '\\\\'),\r\n+                randomString(5000).replace('a', '\\\\'), \r\n+                };\r\n+\r\n+        for (int i = 0; i < values.length; i++) {\r\n+            p1.clear();\r\n+            p2.clear();\r\n+\r\n+            p1.setProperty(\"xxx\", values[i]);\r\n+            p2.setProperty(\"xxx\", values[i]);\r\n+\r\n+            ByteArrayOutputStream out1 = new ByteArrayOutputStream();\r\n+            ByteArrayOutputStream out2 = new ByteArrayOutputStream();\r\n+\r\n+            p1.store(out1, null);\r\n+            p2.store(out2, null);\r\n+\r\n+            String s1 = new String(out1.toByteArray());\r\n+            String s2 = new String(out2.toByteArray());\r\n+\r\n+            assertTrue(\"Expected <\" + s1 + \"> but was <\" + s2 + \">\",\r\n+                s1.indexOf(s2) != -1);\r\n+        }\r\n+    }\r\n+\r\n+    static String stripComments(byte[] bytes) throws IOException {\r\n+        BufferedReader reader = new BufferedReader(new InputStreamReader\r\n+            (new ByteArrayInputStream(bytes)));\r\n+        StringBuffer sbuf = new StringBuffer();\r\n+        String line;\r\n+        while ((line = reader.readLine()) != null) {\r\n+            // skip comments\r\n+            if (line.trim().startsWith(\"#\"))\r\n+                continue;\r\n+\r\n+            sbuf.append(line);\r\n+            sbuf.append(LS);\r\n+        }\r\n+\r\n+        return sbuf.toString();\r\n+    }\r\n+\r\n+    public void testDuplicateProperties() throws IOException {\r\n+        FormatPreservingProperties p = new FormatPreservingProperties();\r\n+        try {\r\n+            toProperties(\"foo=bar\" + LS + \"foo=baz\", p);\r\n+            fail(\"expected duplicate keys to cause exception\");\r\n+        } catch (DuplicateKeyException e) {\r\n+            // expected\r\n+        }\r\n+\r\n+        // now test the expected behavior when duplicates are allowed.\r\n+        p = new FormatPreservingProperties();\r\n+        p.setAllowDuplicates(true);\r\n+        toProperties(\"foo=bar\" + LS + \"foo=baz\", p);\r\n+        assertProperties(new String[][]{ { \"foo\", \"baz\" } }, p);\r\n+    }\r\n+\r\n+    public void testMultipleLoads() throws IOException {\r\n+        String props = \"foo=bar\" + LS + \"baz=quux\";\r\n+        String props2 = \"a=b\" + LS + \"c=d\";\r\n+        Properties vanilla = new Properties();\r\n+        vanilla.load(new BufferedInputStream\r\n+            (new StringBufferInputStream(props)));\r\n+        vanilla.load(new BufferedInputStream\r\n+            (new StringBufferInputStream(props2)));\r\n+\r\n+        Properties p = new FormatPreservingProperties();\r\n+        p.load(new BufferedInputStream(new StringBufferInputStream(props)));\r\n+        p.load(new BufferedInputStream(new StringBufferInputStream(props2)));\r\n+        assertPropertiesSame(vanilla, p);\r\n+    }\r\n+\r\n+    protected FormatPreservingProperties toProperties(String s)\r\n+        throws IOException {\r\n+        return toProperties(s, new FormatPreservingProperties());\r\n+    }\r\n+\r\n+    protected FormatPreservingProperties toProperties(String s,\r\n+        FormatPreservingProperties p) throws IOException {\r\n+        Properties vanilla = new Properties();\r\n+        vanilla.load(new StringBufferInputStream(s));\r\n+\r\n+        p.load(new StringBufferInputStream(s));\r\n+        assertRoundTrip(s, p);\r\n+\r\n+        assertPropertiesSame(vanilla, p);\r\n+\r\n+        return p;\r\n+    }\r\n+\r\n+    private void assertRoundTrip(String s, Properties p) throws IOException {\r\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+        p.store(out, null);\r\n+        assertEquals(s, out.toString());\r\n+\r\n+        // also check serializable\r\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n+        new ObjectOutputStream(bout).writeObject(p);\r\n+\r\n+        try {\r\n+            FormatPreservingProperties deserialized =\r\n+                (FormatPreservingProperties) new ObjectInputStream\r\n+                    (new ByteArrayInputStream(bout.toByteArray())).\r\n+                    readObject();\r\n+            assertEquals(p, deserialized);\r\n+\r\n+            out = new ByteArrayOutputStream();\r\n+            deserialized.store(out, null);\r\n+            assertEquals(s, out.toString());\r\n+        } catch (ClassNotFoundException cnfe) {\r\n+            fail(cnfe + \"\");\r\n+        }\r\n+    }\r\n+\r\n+    public static void assertEquals(String expected, String actual) {\r\n+        if (expected == actual)\r\n+            return;\r\n+\r\n+        if (expected == null || !expected.equals(actual))\r\n+            fail(\"Expected <\" + expected + \"> but was <\" + actual + \">\");\r\n+    }\r\n+\r\n+    private void assertPropertiesSame(Properties vanilla, Properties p) {\r\n+        assertEquals(vanilla, p);\r\n+    }\r\n+\r\n+    protected void assertProperties(String[][] strings, Properties p) {\r\n+        for (int i = 0; i < strings.length; i++)\r\n+            assertEquals(strings[i][1], p.get(strings[i][0]));\r\n+\r\n+        assertEquals(strings.length, p.size());\r\n+    }\r\n+}\r"},{"sha":"96dd955e9b9b27387d92f7cdf8a840a341516813","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestReferenceSet.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5bbb465abe4541913491d9ccf73bf6db594b5fa8","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestSimpleRegex.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f6c2fef121b2ee64fd49f993ec6961949ea1805f","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTemporaryClassLoader.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"854b13d6611c3f708fb5595188abcd4b01947a97","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestTypedProperties.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8e8777b5908eabdd8b8462961299bf9b2d83e1cb","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/TestUUIDGenerator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f182e714e9b2d7a986248fd3c262dfe53eb8f040","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestConcurrentMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"74857be9be44fe56e21f4cf559e8858646f7aa40","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"862d1784ef8bafe2d0f048ab7f8e864dbeffebfe","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/testlocalizer/LocalizerTestHelper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5fe7ddbe7f1ce32f5fd90fe469e38176abb9d401","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","status":"added","additions":217,"deletions":0,"changes":217,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestDocTypeReader.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c0654ad8984bb4135b0453bf5539b35b02588daf","filename":"1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/java/org/apache/openjpa/lib/xml/TestXMLWriter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bddee304a82dcb262ae66295a88a09025f465a3d","filename":"1.2.x/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"83a783f9802fc6e1d0921b7174908d796398e756","filename":"1.2.x/openjpa-lib/src/test/resources/localizer.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f74536cd126a8815cf8cf697bbfe536475abb26e","filename":"1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/conf/test/localizer.properties","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/conf/test/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/conf/test/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/conf/test/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cc7588a3cc53d74b9912ba8eb0ec386a931e2b8a","filename":"1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a6fda5877d7e262c235b89e4e1dd63e964e1a4c4","filename":"1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer_de_DE.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer_de_DE.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer_de_DE.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/util/testlocalizer/localizer_de_DE.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2e902b7453fa29b7630092367f52c9ddc2e8692f","filename":"1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/formatted-result.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bb9ceaaf702399d26e31a58d79f47860ac3ee20d","filename":"1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/raw-source.xml","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/raw-source.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/raw-source.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/org/apache/openjpa/lib/xml/raw-source.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5fcce0bf87ac13fb53daa6a62e39785f601d5cd9","filename":"1.2.x/openjpa-lib/src/test/resources/test.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/test.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-lib/src/test/resources/test.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-lib/src/test/resources/test.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1d34e0b4420f1434674b79697b72a2b4ba75419c","filename":"1.2.x/openjpa-persistence-jdbc/pom.xml","status":"added","additions":627,"deletions":0,"changes":627,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/pom.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7d82e160213908362cd5fb3df0ab8a6e8d4296ec","filename":"1.2.x/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/ant/enhancer.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"dd3030ecf1c2b2e1fecba2a588860645e48ae7c4","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","status":"added","additions":1654,"deletions":0,"changes":1654,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"493a8ee2b54713d5ec840d068f57feebb1735907","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","status":"added","additions":793,"deletions":0,"changes":793,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/AnnotationPersistenceMappingSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"302e4bd0327faf80c68e6c5ba514b2fb998a55a8","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ClassCriteria.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b00a2edb0ec6ccfc2ab82b5e224a75482752b190","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Columns.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"de329a2132804a42caf28f573b1e87b10e797ec1","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ContainerTable.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7967b9196f2bf6fd544142437582ec2e1c174a77","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DataStoreIdColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"54e1dc7542ca2aa07421135faadf84e2075f6c4f","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/DiscriminatorStrategy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5ccb2809b99c0e8286d211d8d0395eb5bcb03f8a","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EagerFetchMode.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8ff92b8d769b04756b8507ee532e517039ab8a91","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementClassCriteria.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"30e9b5e3503b520ff06d91325d9e9c3582c55fb9","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6a17e8789b09d19d01d5d943eb74f0328a7ab56e","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementColumns.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e2673dfa0512a1be92d2d16db19b82b1d5fa4562","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementEmbeddedMapping.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"031019d92fdd4fa0e2618410e40bc53dcf7c731a","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementForeignKey.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e4f4357761e9e3600e4caf178bfbd0ca0e1447c8","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementIndex.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d46a67cd1cb6983a0edf007131cd560a6321fb9c","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ab497d37e0f522c7f4837bc5ce83afb581020336","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementJoinColumns.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3ddac657049ed2867e1b79d349c9a3f90acf5dc3","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementNonpolymorphic.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"04509ee5112be7446627cb4db9b0ad05a76ed32f","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ElementStrategy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4ccfb7c94d0ce3cac9c1df1149204e739ed4bb50","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/EmbeddedMapping.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f11a1ebec13086f1a85bcd1ee9a02158c0fc2b51","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchDirection.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchDirection.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchDirection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchDirection.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"dba6e504a64d870c377e34749c1568c1f316cce8","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/FetchMode.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5cc2d674cf6057e663eb66d91a65a42668cef6a1","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKey.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"734bc6ce5ab4d3ad70fe5f5182209ec0c2bfc8d8","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ForeignKeyAction.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0e6a7560d0c10fc9deb1f668a62a96b154ff76fb","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Index.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9c110167ddb19ccf51673b6bb82f50442d842158","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/IsolationLevel.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d8bc48c2a076148541468ddd4b8ab0e7f8f68b39","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlan.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1b6e9ec3807b8dbd75edec5f5f4cc17ac3d31135","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","status":"added","additions":290,"deletions":0,"changes":290,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCFetchPlanImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ca7333debae767bcdfe8a02b0c517d8efa5dee64","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JDBCPersistenceProductDerivation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6b742863aa27d276b8fd6b2595c84d72bf839bc2","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/JoinSyntax.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1337aa168454dc7269a3ff340f968f2c3c9ba0c6","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyClassCriteria.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"401a1f8f9525cd42dcc6e628697b9d6696660eec","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a5ee2328eebafe7e27d1d032dafd9d86145f17b6","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyColumns.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1061737b34a8a7bfb9274c8d2f9f8bf295de4758","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyEmbeddedMapping.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3bd708e5ea75c36744c8df1a92ca79be568abf39","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyForeignKey.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d1b84d11fcc1cc33a9b101cf4ee9f1227a606bf3","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyIndex.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyIndex.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyIndex.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyIndex.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3a283688bbb11e8e26a380a45dbca885ee919a78","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumn.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c747074876721d29804bd4e9d1a405057aa2f23a","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumns.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumns.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyJoinColumns.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a1a1d0083eed88e2c6cf7e9c160553f20b1287a2","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyNonpolymorphic.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyNonpolymorphic.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyNonpolymorphic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyNonpolymorphic.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ea17513d46b05460bcd08884b8264b881b7596a7","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyStrategy.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/KeyStrategy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"16ace3d83d319d1c7d47e9ca8522e8e038295831","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeAlgorithm.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeAlgorithm.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeAlgorithm.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/LRSSizeAlgorithm.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"58ca6eb33e472a334912101d6d40133c1af1feee","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverride.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"429ac5c0930af0d3f1c5650f76f0685bd28d399a","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingOverrides.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"83f58c43ca978ecdaf5aff65ec6f666d41890d78","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/MappingTag.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cac6e66446376e97da2391060dfbf537a076c961","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Nonpolymorphic.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1ad2f0c4732ae88bffb8813ab9f78f22a90645b6","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/NonpolymorphicType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f11321b6e9e728e30680ee161fa9e6ab3342da5d","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/OrderColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cbaafd4572ab92e88fa78a2cddec1fa9b0b53787","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","status":"added","additions":210,"deletions":0,"changes":210,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingDefaults.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"18bfc356b5db1bf8d3cc9e59cde1074d9d1b826b","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingFactory.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/PersistenceMappingFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cb6ed7348ce7cd16c735c27b996e168a8875b6d6","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ResultSetType.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ResultSetType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ResultSetType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/ResultSetType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"26ad7b2fe5cfb9ed0547a4bc667e1a69e9e17bc4","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Strategy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d909d746258096685892004a0f13c66c3be84a65","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/SubclassFetchMode.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"44e6aa730e57118ab5d70a26a4b6f5ec1c771da5","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/Unique.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e9df6b20504a88d2aae3ba3b0fd02868119b57ec","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5e0adca6e39f4c3ef23b79d9b6edd98a250a79da","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionColumns.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2d3f33b9b1ff2509bef3d0530a7410dbcff7a01f","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/VersionStrategy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5a2907aa5ddb485f78f94afda15e4b72ad45e0c6","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XEmbeddedMapping.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XEmbeddedMapping.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XEmbeddedMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XEmbeddedMapping.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bd3b4cc598c108e9d43851de5badc045a7c8f7f5","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ad5af98034abb27b54153f85d5185bcf7634b2ce","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XJoinColumns.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6060bca21831fb1938c36b42d96d8829ef689560","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","status":"added","additions":980,"deletions":0,"changes":980,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"65783e93457d13af197dcae4b132088c3bdd23f7","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","status":"added","additions":702,"deletions":0,"changes":702,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMLPersistenceMappingSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f20bf6e7df7f2c8801ee1bf5414d7257b6ed40eb","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverride.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverride.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverride.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverride.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6f4e9e16884ae1ad094adfa3f887f85c9af8dafd","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverrides.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverrides.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverrides.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XMappingOverrides.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"46095d25e532456bae5c722453b325768e44262f","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTable.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"574a9f81dc8920f53c4227fbb4680bb086c33aaf","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XSecondaryTables.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"be286370956150940dd2e0b60666f5f0d7cec0fc","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/XTable.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5e18e70029c527a756d7e1b8caa3a5e9955f113e","filename":"1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/package.html","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/java/org/apache/openjpa/persistence/jdbc/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f958c6d5951d0f239ead98035b099570c4e6ada2","filename":"1.2.x/openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"468a0a6277eca75d9babf43c2eea528c099e8805","filename":"1.2.x/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/main/resources/org/apache/openjpa/persistence/jdbc/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d06631e3be4948c5225899b02f5c2a13c1abda5d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestAutoDetachProperty.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c5b506ae4774c0b943b06e52f536b442660144e9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadAutoDetachProperty.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b40f614a6e9f9a8b58991cb6ad4053542204c8ce","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestBadJdbcUrl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d7a8611b764fb4468f5fc656de37af76fdbc9fc7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshaller.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshaller.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshaller.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshaller.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"462bcd5e5e153850c16b994f728e8f0fe7f80251","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","status":"added","additions":171,"deletions":0,"changes":171,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestCacheMarshallerEndToEnd.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e8949649b227480a0747662fc315531c3ccb5fdf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/conf/TestDynamicConfiguration.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"028f34ffdbea93b567c501bb7e62c622f6639359","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","status":"added","additions":610,"deletions":0,"changes":610,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/AbstractUnenhancedClassTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"489d2a52dae4f62ffe9a4b1163c15e93d28dbe14","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestDataCachingAndUnenhancedPropertyAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0737163188fb73b15372d2c497ba3a136fbb3f81","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementConfiguration.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"10e79737357beee5ede9a3b76e7861256cb638e7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestEnhancementWithMultiplePUs.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d3b8e3e6137eb780de615a55cddc9ef764434a21","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestPCEnhancerFindField.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"02cb60b534ced737908ab280d3507a224698afad","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestRelationToUnlistedClass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c44a5646c45a4b581baa60b2a9bf563838d3b6d1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestSimpleUnenhancedQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"797db3557a9166cf9b7b6a0329a168d02c3f0956","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPK.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPK.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPK.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPK.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bbfe16e6ba68112d922b21813b24e3bc3e4ddcd9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedCompoundPKSubclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b3a2b255d88b1340eead36c415b05f2d52f1f6f3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"616f34b1d1e26d9b29225477f359a6d9839a822a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedFieldAccessPrimitiveWrapper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9db55d11d08141fd2a4768706da601ceea17be5d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedOneToMany.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedOneToMany.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedOneToMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedOneToMany.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d8618d153f5af8e8fd5dc7c6c20c323a77e288c7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/TestUnenhancedPropertyAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"95a0e4a5449b92b05b7bb88fcd18871f26a7906c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3db77b8570df437e7a74e30671f2f0e388fded05","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedBootstrapInstance2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"35d23c2ba242ad312eb8232b9191b2df2b4e3743","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccess.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d1b007fd29069215b0111afb1a49ec0b46ed09f3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSubclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a791c05f86442b7d15e27b3b47885ce070c5b9bf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKFieldAccessSuperclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e69da157aadd2b652de6b25d2606f7c3f899eae6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKPropertyAccess.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedCompoundPKPropertyAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a8894f603048831a058f2636766aa7e68aa551c9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d7d799f9fcb4b53e5417539a9efc83175b8f8fb3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f5125fcd6ee878f619704cbdb53ff1aa0474322a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessPrimitiveWrapperSubclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"26e8ee34d1f5b9a5673bb918d552194703821448","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessSubclass.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedFieldAccessSubclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c1088af9870b7ebe6916ca3d015438a38d2b14f8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedIdentityIdPropertyAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9b2b052a0443af7be66ea0e5723f58446620567f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedMany.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedMany.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedMany.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a9644452281d1516d388ba5877d9e419f1360ab5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedOne.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedOne.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedOne.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4812fbf2ef96b5188f4ed5d6979d293562f1ceb5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPObject.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"dc0de4b7433ff5bb2543953b164a8dea82e0cd6b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"72b464b43ae741bbd3d1db7504da9256a4b0f541","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccessSubclass.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccessSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccessSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedPropertyAccessSubclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4530db7c5d60cc6764105e84f0976abb5ca622a9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedSubtype.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedSubtype.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedSubtype.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedSubtype.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"707eb31390284ce2ab3ef0fca4bc37d1de3af34c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5ae5e07d06b57aafe1e511d71a7f0f1513bd66f7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedClass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e520fe5ecec3b231e9dc5ff7f7e6cce402847dd8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/enhance/UnenhancedUnlistedReferer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ece282a686409f9b42f008587fa06197279b9339","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestLifecycleListener.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestLifecycleListener.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestLifecycleListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestLifecycleListener.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3c9c0c5839067f0a34a4e58dda29a1059e27ae2c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/event/TestSJVMRemoteCommitProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c2fd9b852cbdc01a6998014e534d74e64f477e9a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Employee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5003166f66b737b343d94b12b18290f5e4d08207","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a4087f2b039f6c90f3a516a79d4c2c1df799e4e6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"03c85b4f31f07e6cb5392e1890a098eaf51ea522","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d321dd2e0ff539e30a9ba739ca8373cfde66dc74","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityD.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"df5b8302651859d14ad5bebf6a28bd63a1de9de1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityE.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityE.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityE.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"72d589f39b174b43a667d7558a6351d746f492d7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityF.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c547dd086cdbaea55ae840caf9e8553516db86fb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/EntityG.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3aaf100f583121badb6addc62b3f4ab00b9cd00f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniDepartment.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"32e6593bdd9df677d97d12251c80480927467be6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M21UniEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7470cd5ad9a9e62c87cd6c4caa27144627c0cb77","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiDepartment.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1d9151f2f5c31db6fded29ad5d4b7e48c1c2bfef","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/M2MBiEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d2ed6bb9b4fcb81121e1f306d638cee48f248d7a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Story.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d3aef7c7e3abf668d893f84d43d1b304df7eb8ea","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/Task.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6e86aa208ac24d57aa7c37bc16c3f91a12d2a9e4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestInsertOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5dfc8c371e123bcc809f11c69e3ac18c6669d7ff","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","status":"added","additions":211,"deletions":0,"changes":211,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/kernel/TestNoForeignKeyViolation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0dfe9d82634c2591221b0606f194289fb71d5239","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestCalendarField.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestCalendarField.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestCalendarField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestCalendarField.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cea8c4c8827d843380141a016ed6716287258b4b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolAutoDelete.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6e29e04baf1aca91e352a56e920b79bdc7584911","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/TestMappingToolTemporal.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0745dfd2a91b4fc9d1f8781acf12a5c58219f881","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","status":"added","additions":286,"deletions":0,"changes":286,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/AbstractLobTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5321f9001b15ddf0e75bb362871e8c588cafa33e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobEntity.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3f91be6ed1f55da1d7158cb39a3fa58e6ade7614","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobTest.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamLobTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c728ddbd877fda8567034a1df0bb25f7491ffdb2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamWrapper.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/InputStreamWrapper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0ffb1dfe120da5ca671a1a2d9b569de53f701dd1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/LobEntity.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/LobEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/LobEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/LobEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"64adc29f2aa8211969c1c3c081c1e23691c08e56","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d2097edf3e004781a739fdae81cfd97958b4ba6e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobTest.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderLobTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"334d02fa943bb6cc0b8cf72e5228c4794f38608f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderWrapper.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/jdbc/meta/strats/ReaderWrapper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7d8d44b02ae7ac654b5ab2ec197c5f3d6489d793","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractBrokerSerializationTest.java","status":"added","additions":446,"deletions":0,"changes":446,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractBrokerSerializationTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractBrokerSerializationTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractBrokerSerializationTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f8f0a817be0b5de27e49d538eea51e667cdf4639","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractUnenhancedRelationBrokerSerializationTest.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractUnenhancedRelationBrokerSerializationTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractUnenhancedRelationBrokerSerializationTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/AbstractUnenhancedRelationBrokerSerializationTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2f3928574e6e5984e25bbeb009c4f5e5ee966e3b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryEventManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3f24bda849b6940cc9c42b8dfc55f9e570646100","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestBrokerFactoryListenerRegistry.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"91541a01ca808bd545eea57531143c232a11a9e0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestDynamicClassRegistration.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ceb8f257dfd3a1c0c02c8cabc5f77feb708b739a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEnhancedInstanceBrokerSerialization.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEnhancedInstanceBrokerSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEnhancedInstanceBrokerSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEnhancedInstanceBrokerSerialization.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f61a62c682b5012785e60ca9f765910f0b9dbf07","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEntityManagerFactoryPool.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEntityManagerFactoryPool.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEntityManagerFactoryPool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestEntityManagerFactoryPool.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4fc26d412c3f7cec0d82234948ca8c0940640e57","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestInstanceGraphBrokerSerialization.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestInstanceGraphBrokerSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestInstanceGraphBrokerSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestInstanceGraphBrokerSerialization.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e65e356565a431ebfc9a3c486422a10398cab984","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQueryCompilationCache.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"093774627730694a835ceff1d686fdb731c93b4b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","status":"added","additions":461,"deletions":0,"changes":461,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestQuerySQLCache.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1918545d0fe840f6fd44fd2cbb6b4ddf7b253d29","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessInstanceBrokerSerialization.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessInstanceBrokerSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessInstanceBrokerSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessInstanceBrokerSerialization.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"02ac209d121b22c7d86435742d8be4364ad2728b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessWithRelationInstanceBrokerSerialization.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessWithRelationInstanceBrokerSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessWithRelationInstanceBrokerSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedFieldAccessWithRelationInstanceBrokerSerialization.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3c49949483b7d34af86072cb61fb7020ae3f6ca7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessInstanceBrokerSerialization.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessInstanceBrokerSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessInstanceBrokerSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessInstanceBrokerSerialization.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3f533f7d95fa737d9cf686f691492eb469b74304","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessWithRelationInstanceBrokerSerialization.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessWithRelationInstanceBrokerSerialization.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessWithRelationInstanceBrokerSerialization.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/kernel/TestUnenhancedPropertyAccessWithRelationInstanceBrokerSerialization.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0b97ff2d87088a96f85e1d1bcfa0330fb5d87e4e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/lib/conf/TestAnchorParsing.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2062d3f5a29e56383b29c3158046a7332c9a1764","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/A.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7fb70373e8774865e9ded4846545ddca29fa65ef","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/AbstractThing.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"32c093774314847ff8e9f03bdcc9d6e0ca7850eb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Artist.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e89ba24257197a83c4ed4b2088bb50b6ce8c4386","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/B.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"83f99aaa1b39d60d559f663bcfa8a2f47e30b730","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/C.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e7e0450557d28302490eff1a5e9250346170c70f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Item.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e85c46b6436ea6687267a9f406458dbb04618fc6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Painter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"49e99f867f5eddfae329456fe3c4f4dad18b0dc9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/Person.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9439385848fd78f23e6da4ee2cc04083fd8d983c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestGetMetaData.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c93377fc49a13d7b2ebe26dd4e372bd07586841a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/meta/TestMetaDataInheritanceComparator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"}]}

