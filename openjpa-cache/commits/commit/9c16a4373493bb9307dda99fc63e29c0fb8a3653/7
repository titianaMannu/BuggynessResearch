{"sha":"9c16a4373493bb9307dda99fc63e29c0fb8a3653","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMTZhNDM3MzQ5M2JiOTMwN2RkYTk5ZmM2M2UyOWMwZmI4YTM2NTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"message":"Creating 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f50e9a665eb242e4b05e0364c41f777a18914e9f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f50e9a665eb242e4b05e0364c41f777a18914e9f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","html_url":"https://github.com/apache/openjpa/commit/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f153a4ea37a2ea16247fd773756fa5da27f075ff","url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","html_url":"https://github.com/apache/openjpa/commit/f153a4ea37a2ea16247fd773756fa5da27f075ff"}],"stats":{"total":447552,"additions":447552,"deletions":0},"files":[{"sha":"e83999426ad7e24f6f086a5631724a6cf050507a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBCustomMapping.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC;\r\n+import junit.framework.*;\r\n+\r\n+\r\n+public class TestEJBCustomMapping extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int _oid;\r\n+\r\n+\tpublic TestEJBCustomMapping(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp ()\r\n+\t{\r\n+\t\tdeleteAll(CustomMappingPC.class);\r\n+\r\n+\t\tCustomMappingPC pc = new CustomMappingPC (2);\r\n+\t\tpc.setName (\"name\");\r\n+\t\tpc.setFemale (true);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tendTx(pm);\r\n+\t\t_oid = pc.getId();\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testInsert ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n+\t\tassertNotNull (pc);\r\n+\r\n+\t\tassertEquals (\"name\", pc.getName ());\r\n+\t\tassertEquals (true, pc.isFemale ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testUpdate ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tCustomMappingPC pc = pm.find(CustomMappingPC.class, _oid);\r\n+\r\n+\t\tpc.setName (\"name2\");\r\n+\t\tpc.setFemale (false);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(CustomMappingPC.class, _oid);\r\n+\t\tassertEquals (\"name2\", pc.getName ());\r\n+\t\tassertTrue (!pc.isFemale ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"973f12ddd84c0d45c8b8468bcd7365e1314a6f94","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBDateVersion.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.DateVersion;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBDateVersion extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int oid;\r\n+\r\n+\tpublic TestEJBDateVersion(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp() throws Exception\r\n+\t{\r\n+\t\tdeleteAll(DateVersion.class);\r\n+\r\n+\t\tDateVersion pc = new DateVersion (\"pc1\", 1);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\r\n+\t\toid = pc.getId();\r\n+\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testOptLock ()\tthrows InterruptedException\r\n+{\r\n+\tEntityManager pm1 = currentEntityManager();\r\n+\tEntityManager pm2 = currentEntityManager();\r\n+\r\n+\r\n+\tstartTx(pm1);\r\n+\tstartTx(pm2);\r\n+\tDateVersion pc1 = (DateVersion) pm1.find(DateVersion.class, oid);\r\n+\tDateVersion pc2 = (DateVersion) pm2.find(DateVersion.class, oid);\r\n+\r\n+\tpc1.setString (\"pc-2-1\");\r\n+\tpc2.setString (\"pc-2-2\");\r\n+\r\n+\t// some DBs do not distinguish dates unless there is 1 sec diff\r\n+\tThread.currentThread ().sleep (1 * 1000);\r\n+\tendTx(pm1);\r\n+\ttry\r\n+\t{\r\n+\t\tThread.currentThread ().sleep (1 * 1000);\r\n+\t\tendTx(pm2);\r\n+\t\tfail (\"Should have caused OL exception.\");\r\n+\t}\r\n+\tcatch (Exception jfe)\r\n+\t{\r\n+\t\tstartTx(pm2);\r\n+\t\tpm2.refresh (pc2);\r\n+\t\tpc2.setString (\"pc-3-2\");\r\n+\t\tendTx(pm2);\r\n+\t}\r\n+\r\n+\t// make sure the next transaction works too\r\n+\tstartTx(pm2);\r\n+\tpc2.setString (\"pc-string-4-2\");\r\n+\tendTx(pm2);\r\n+\r\n+\tstartTx(pm1);\r\n+\tpm1.refresh (pc1);\r\n+\tpc1.setString (\"pc-string-3-1\");\r\n+\r\n+\tstartTx(pm2);\r\n+\tpc2.setString (\"pc-string-5-2\");\r\n+\r\n+\tThread.currentThread ().sleep (1 * 1000);\r\n+\tendTx(pm1);\r\n+\ttry\r\n+\t{\r\n+\t\tThread.currentThread ().sleep (1 * 1000);\r\n+\t\tendTx(pm2);\r\n+\t\tfail (\"Should have caused OL exception2.\");\r\n+\t}\r\n+\tcatch (Exception jfe)\r\n+\t{\r\n+\t\tstartTx(pm2);\r\n+\t\tpm2.refresh (pc2);\r\n+\t\tpc2.setString (\"pc-string-6-2\");\r\n+\t\tendTx(pm2);\r\n+\t}\r\n+\tendEm(pm1);\r\n+\tendEm(pm2);\r\n+\r\n+\tEntityManager pm = currentEntityManager();\r\n+\tDateVersion pc = pm.find(DateVersion.class, oid);\r\n+\tassertEquals (\"pc-string-6-2\", pc.toString ());\r\n+\tendEm(pm);\r\n+  }\r\n+}\n\\ No newline at end of file"},{"sha":"61360fdd2b00a6a92be38500dbf633eea1c6ec0d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBEager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,153 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBEager extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tprivate int _oid;\r\n+\r\n+\tpublic TestEJBEager(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(EagerPCSub.class);\r\n+\t\tdeleteAll(EagerPC.class);\r\n+\t\tdeleteAll(HelperPC.class);\r\n+\t\tdeleteAll(HelperPC2.class);\r\n+\t\tdeleteAll(HelperPC4.class);\r\n+\t\tdeleteAll(HelperPC3.class);\r\n+\r\n+\t\tEagerPCSub pc = new EagerPCSub (1);\r\n+\t\tpc.setStringField (\"string1\");\r\n+\t\tEagerPCSub pc2 = new EagerPCSub (2);\r\n+\t\tpc2.setStringField (\"string2\");\r\n+\r\n+\t\tHelperPC helper1 = new HelperPC (4);\r\n+\t\thelper1.setStringField (\"helper1\");\r\n+\t\tpc.setHelper (helper1);\r\n+\r\n+\t\tHelperPC2 helperCollection1 = new HelperPC2 ();\r\n+\t\thelperCollection1.setStringField (\"helperCollection1\");\r\n+\t\thelperCollection1.getHelperCollection ().add (new HelperPC (5));\r\n+\t\tHelperPC2 helperCollection2 = new HelperPC2 (6);\r\n+\t\thelperCollection2.setStringField (\"helperCollection2\");\r\n+\t\tpc.getHelperCollection ().add (helperCollection1);\r\n+\t\tpc.getHelperCollection ().add (helperCollection2);\r\n+\r\n+\t\tHelperPC eager = new HelperPC (7);\r\n+\t\teager.setStringField (\"eager\");\r\n+\t\tpc.setEager (eager);\r\n+\r\n+\t\tHelperPC4 eagerSub = new HelperPC4 ();\r\n+\t\teagerSub.setStringField (\"eagerSub\");\r\n+\t\teagerSub.setIntField (1);\r\n+\t\tpc.setEagerSub (eagerSub);\r\n+\r\n+\t\tHelperPC eagerCollection1 = new HelperPC (8);\r\n+\t\teagerCollection1.setStringField (\"eagerCollection1\");\r\n+\t\tHelperPC eagerCollection2 = new HelperPC (9);\r\n+\t\teagerCollection2.setStringField (\"eagerCollection2\");\r\n+\t\tpc.getEagerCollection ().add (eagerCollection1);\r\n+\t\tpc.getEagerCollection ().add (eagerCollection2);\r\n+\t\teagerCollection1.setEager (pc);\r\n+\t\teagerCollection2.setEager (pc);\r\n+\t\tpc.getEagerCollection2 ().add (eagerCollection1);\r\n+\t\tpc.getEagerCollection2 ().add (eagerCollection2);\r\n+\r\n+\t\tHelperPC eagerCollection3 = new HelperPC (10);\r\n+\t\teagerCollection3.setStringField (\"eagerCollection3\");\r\n+\t\tpc2.getEagerCollection ().add (eagerCollection3);\r\n+\r\n+\t\tHelperPC2 recurse = new HelperPC2 (11);\r\n+\t\trecurse.setStringField (\"recurse\");\r\n+\t\tHelperPC3 helper3 = new HelperPC3 (12);\r\n+\t\thelper3.setStringField (\"helper3\");\r\n+\t\trecurse.setHelper (helper3);\r\n+\t\teager.setHelper (helper1);\r\n+\t\tpc.setRecurse (recurse);\r\n+\r\n+\t\tHelperPC2 recurseCollection1 = new HelperPC2 (13);\r\n+\t\trecurseCollection1.setStringField (\"recurseCollection1\");\r\n+\t\tHelperPC2 recurseCollection2 = new HelperPC2 (14);\r\n+\t\trecurseCollection2.setStringField (\"recurseCollection2\");\r\n+\t\tpc.getRecurseCollection ().add (recurseCollection1);\r\n+\t\tpc.getRecurseCollection ().add (recurseCollection2);\r\n+\t\trecurseCollection1.getHelperCollection ().add (helper1);\r\n+\t\tHelperPC helper2 = new HelperPC (15);\r\n+\t\thelper2.setStringField (\"helper2\");\r\n+\t\trecurseCollection1.getHelperCollection ().add (helper2);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tpm.persist(pc2);\r\n+\t\tendTx(pm);\r\n+\t\t_oid = pc.getId();\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testOuterJoin ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tpc.setEager (null);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tassertNull (pc.getEager());\r\n+\t\tassertNotNull (pc.getRecurse ());\r\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().\r\n+\t\t\tgetStringField ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testOuterJoinToSubclass ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tEagerPCSub pc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tpc.setEagerSub (null);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpc = pm.find(EagerPCSub.class, _oid);\r\n+\t\tassertNull (pc.getEagerSub ());\r\n+\t\tassertNotNull (pc.getRecurse ());\r\n+\t\tassertEquals (\"helper3\", pc.getRecurse ().getHelper ().getStringField ());\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"76e3f8291e354396b53b56cb8c89a9177f2d3316","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBInverseOneToOne.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertA;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.InvertB;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBInverseOneToOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tpublic TestEJBInverseOneToOne(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp ()\r\n+\t{\r\n+\t\tdeleteAll(InvertA.class);\r\n+\t\tdeleteAll(InvertB.class);\r\n+\t}\r\n+\r\n+\r\n+\tprivate static Object insertData (EntityManager pm)\r\n+\t{\r\n+\t\tInvertA a;\r\n+\t\tInvertB b;\r\n+\t\ta = new InvertA (1);\r\n+\t\tb = new InvertB (2);\r\n+\t\ta.setTest (\"testA\");\r\n+\t\tb.setTest (\"testB\");\r\n+\t\tb.setInvertA (a);\r\n+\r\n+\t\tEntityTransaction t = pm.getTransaction ();\r\n+\t\tt.begin ();\r\n+\t\tpm.persist(b);\r\n+\t\t//pm.makeTransactional (b);\r\n+\r\n+\t\treturn (pm.find(InvertB.class, 2));\r\n+\t}\r\n+\r\n+\r\n+\tpublic void testLoad ()\r\n+\t{\r\n+\t\tInvertA a;\r\n+\t\tInvertB b;\r\n+\t\tObject aId;\r\n+\t\tObject bId;\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\taId = insertData (pm);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tb = (InvertB) aId;\r\n+\r\n+\t\tassertNotNull(b.getInvertA().getTest());\r\n+\t\tassertEquals (b.getInvertA().getTest (), \"testA\");\r\n+\t}\r\n+\r\n+}\r"},{"sha":"0dfc484a80d7abc51e43559bab28b00ccddc8eaa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEJBOuterJoinValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,101 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBOuterJoinValues extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tpublic int oid = 0;\r\n+\r\n+\tpublic TestEJBOuterJoinValues(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll(OuterJoinValuePC.class);\r\n+\r\n+\t\tOuterJoinValuePC pc = new OuterJoinValuePC (10);\r\n+\t\tpc.setStringField (\"pc\");\r\n+\t\tpc.setValue1 (1);\r\n+\t\tpc.setValue2 (2);\r\n+\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tpm.persist(pc);\r\n+\t\tendTx(pm);\r\n+\r\n+\t\toid = pc.getId();\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testNull ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n+\r\n+\t\tpc.setValue1 (0);\r\n+\t\tpc.setValue2 (0);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tassertEquals (0, pc.getValue1 ());\r\n+\t\tassertEquals (0, pc.getValue2 ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testUpdate ()\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tstartTx(pm);\r\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tpc.setValue1 (3);\r\n+\t\tpc.setValue2 (0);\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\r\n+\t\tpm = currentEntityManager();\r\n+\t\tpc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tassertEquals (3, pc.getValue1 ());\r\n+\t\tassertEquals (0, pc.getValue2 ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testInsert ()\r\n+\t{\r\n+\t\t// just tests the values inserted in the setup method\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tOuterJoinValuePC pc = pm.find(OuterJoinValuePC.class, oid);\r\n+\t\tassertEquals (\"pc\", pc.getStringField ());\r\n+\t\tassertEquals (1, pc.getValue1 ());\r\n+\t\tassertEquals (2, pc.getValue2 ());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"05405fd53210d720f51b071441c98a46cb6979d7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","status":"added","additions":242,"deletions":0,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerDistinct.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,242 @@\n+/*\r\n+ * TestEagerDistinct.java\r\n+ *\r\n+ * Created on October 4, 2006, 4:27 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestEagerDistinct extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \r\n+{\r\n+        \r\n+    /** Creates a new instance of TestEagerDistinct */\r\n+    public TestEagerDistinct(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        return ((JDBCConfiguration) getConfiguration()).\r\n+                getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+       deleteAll(EagerPC.class);\r\n+       deleteAll(HelperPC.class);\r\n+       deleteAll(HelperPC2.class);\r\n+        \r\n+        HelperPC shared = new HelperPC();\r\n+        shared.setStringField(\"shared\");\r\n+        \r\n+        HelperPC2 pc1 = new HelperPC2();\r\n+        pc1.setStringField(\"pc1\");\r\n+        pc1.getHelperCollection().add(shared);\r\n+        pc1.getHelperCollection().add(new HelperPC());\r\n+        \r\n+        HelperPC2 pc2 = new HelperPC2();\r\n+        pc2.setStringField(\"pc2\");\r\n+        pc2.getHelperCollection().add(shared);\r\n+        pc2.getHelperCollection().add(new HelperPC());\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);\r\n+        \r\n+        // to make sure subclasses are selected, etc\r\n+        //FIXME jthomas\r\n+        //pm.createNativeQuery(\"\",HelperPC.class).execute();\r\n+        //pm.newQuery(HelperPC2.class).execute();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public OpenJPAEntityManager getPM() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n+        return pm;\r\n+    }\r\n+    \r\n+    public void testEagerParallelWithNonDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithNonDistinctQuery(-1);\r\n+    }\r\n+    \r\n+    public void testPagingEagerParallelWithNonDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithNonDistinctQuery(0);\r\n+    }\r\n+    \r\n+    private void eagerParallelWithNonDistinctQuery(int fetchSize)\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"stringField.startsWith ('pc')\",HelperPC2.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n+        List res = (List) q.getResultList();\r\n+        \r\n+        if (fetchSize == -1)\r\n+            assertEquals(2, sql.size());\r\n+        \r\n+        assertEquals(2, res.size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n+        \r\n+        assertNotSQL(\"DISTINCT\");\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertHelperPC2(String stringField, HelperPC2 pc) {\r\n+        assertEquals(stringField, pc.getStringField());\r\n+        assertEquals(2, pc.getHelperCollection().size());\r\n+        assertEquals(\"shared\", ((HelperPC) pc.getHelperCollection().get(0)).\r\n+                getStringField());\r\n+        assertNull(((HelperPC) pc.getHelperCollection().get(1)).\r\n+                getStringField());\r\n+    }\r\n+    \r\n+    public void testEagerParallelWithDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithDistinctQuery(-1);\r\n+    }\r\n+    \r\n+    public void testPagingEagerParallelWithDistinctQuery()\r\n+    throws Exception {\r\n+        eagerParallelWithDistinctQuery(0);\r\n+    }\r\n+    \r\n+    private void eagerParallelWithDistinctQuery(int fetchSize)\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        OpenJPAQuery q =  pm.createNativeQuery(\"helperCollection.contains (h) && h.stringField == 'shared'\",HelperPC2.class);\r\n+        //FIXME  jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n+        List res = (List) q.getResultList();\r\n+        \r\n+        if (fetchSize == -1) {\r\n+            sql.remove(0);    // orig sel\r\n+            assertSQL(\"DISTINCT\");\r\n+        }\r\n+        \r\n+        assertEquals(2, res.size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) res.get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) res.get(1));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testNestedEagerParallel()\r\n+    throws Exception {\r\n+        nestedEagerParallel(-1);\r\n+    }\r\n+    \r\n+    public void testPagingNestedEagerParallel()\r\n+    throws Exception {\r\n+        nestedEagerParallel(0);\r\n+    }\r\n+    \r\n+    private void nestedEagerParallel(int fetchSize)\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",HelperPC2.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        List helpers = (List) q.getResultList();\r\n+        \r\n+        EagerPC eager1 = new EagerPC();\r\n+        eager1.setStringField(\"eager1\");\r\n+        eager1.getRecurseCollection().addAll(helpers);\r\n+        \r\n+        EagerPC eager2 = new EagerPC();\r\n+        eager2.setStringField(\"eager2\");\r\n+        eager2.getRecurseCollection().addAll(helpers);\r\n+        HelperPC2 pc3 = new HelperPC2();\r\n+        pc3.setStringField(\"pc3\");\r\n+        pc3.getHelperCollection().add(new HelperPC());\r\n+        pc3.getHelperCollection().add(new HelperPC());\r\n+        pc3.getHelperCollection().add(new HelperPC());\r\n+        eager2.getRecurseCollection().add(pc3);\r\n+        \r\n+        startTx(pm);;\r\n+        pm.persist(eager1);\r\n+        pm.persist(eager2);\r\n+        endTx(pm);;\r\n+        // make sure subclasses selected, etc\r\n+        //FIXME jthomas\r\n+        pm.createNativeQuery(\"\",EagerPC.class).getResultList();\r\n+        pm.close();\r\n+        sql.clear();\r\n+        \r\n+        pm = getPM();\r\n+        q = pm.createNativeQuery(\"stringField.startsWith ('eager')\",EagerPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"stringField ascending\");\r\n+        q.getFetchPlan().setFetchBatchSize(fetchSize);\r\n+        List res = (List) q.getResultList();\r\n+        \r\n+        if (fetchSize == -1) {\r\n+            sql.remove(0); // orig sel\r\n+            assertSQL(\"DISTINCT\");\r\n+        }\r\n+        \r\n+        assertEquals(2, res.size());\r\n+        eager1 = (EagerPC) res.get(0);\r\n+        assertEquals(\"eager1\", eager1.getStringField());\r\n+        assertEquals(2, eager1.getRecurseCollection().size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager1.getRecurseCollection().\r\n+                get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager1.getRecurseCollection().\r\n+                get(1));\r\n+        \r\n+        eager2 = (EagerPC) res.get(1);\r\n+        assertEquals(\"eager2\", eager2.getStringField());\r\n+        assertEquals(3, eager2.getRecurseCollection().size());\r\n+        assertHelperPC2(\"pc1\", (HelperPC2) eager2.getRecurseCollection().\r\n+                get(0));\r\n+        assertHelperPC2(\"pc2\", (HelperPC2) eager2.getRecurseCollection().\r\n+                get(1));\r\n+        pc3 = (HelperPC2) eager2.getRecurseCollection().get(2);\r\n+        assertEquals(\"pc3\", pc3.getStringField());\r\n+        assertEquals(3, pc3.getHelperCollection().size());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"b94ad7e9124cc64ee5864219dfff0d0c28807eab","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","status":"added","additions":874,"deletions":0,"changes":874,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestEagerOuterToManyJoins.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,874 @@\n+/*\r\n+ * TestEagerOuterToManyJoins.java\r\n+ *\r\n+ * Created on October 3, 2006, 10:53 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.persistence.FetchPlan;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.EagerOuterJoinPC;\r\n+\r\n+\r\n+public class TestEagerOuterToManyJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    /** Creates a new instance of TestEagerOuterToManyJoins */\r\n+    public TestEagerOuterToManyJoins(String name) {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        DBDictionary dict = ((JDBCConfiguration) getConfiguration()).\r\n+                getDBDictionaryInstance();\r\n+        return !dict.supportsSubselect;\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        \r\n+       deleteAll(HelperPC.class);\r\n+       deleteAll(EagerOuterJoinPC2.class);\r\n+       deleteAll(EagerOuterJoinPC.class);\r\n+    }\r\n+    \r\n+    \r\n+    public void testStringCollectionById() {\r\n+        stringCollectionByIdTest(false);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionById() {\r\n+        stringCollectionByIdTest(true);\r\n+    }\r\n+    \r\n+    private void stringCollectionByIdTest(boolean empty) {\r\n+        Object oid = insertStringCollection((empty) ? 1 : 0);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if (empty)\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    0, pc.getStringCollection().size());\r\n+        else {\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    2, pc.getStringCollection().size());\r\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        }\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStringCollectionByQuery() {\r\n+        stringCollectionByQueryTest(0);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionByQuery1() {\r\n+        stringCollectionByQueryTest(1);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionByQuery2() {\r\n+        stringCollectionByQueryTest(2);\r\n+    }\r\n+    \r\n+    public void testEmptyStringCollectionByQuery3() {\r\n+        stringCollectionByQueryTest(3);\r\n+    }\r\n+    \r\n+    private void stringCollectionByQueryTest(int empty) {\r\n+        insertStringCollection(empty);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        \r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if ((empty & 1) > 0)\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    0, pc.getStringCollection().size());\r\n+        else {\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    2, pc.getStringCollection().size());\r\n+            assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+            assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        }\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        if ((empty & 2) > 0)\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    0, pc.getStringCollection().size());\r\n+        else {\r\n+            assertEquals(pc.getStringCollection().toString(),\r\n+                    2, pc.getStringCollection().size());\r\n+            assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n+            assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n+        }\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertStringCollection(int empty) {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        if ((empty & 1) == 0) {\r\n+            pc1.getStringCollection().add(\"1.1\");\r\n+            pc1.getStringCollection().add(\"1.2\");\r\n+        }\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        if ((empty & 2) == 0) {\r\n+            pc2.getStringCollection().add(\"2.1\");\r\n+            pc2.getStringCollection().add(\"2.2\");\r\n+        }\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testStringListById() {\r\n+        Object oid = insertStringList();\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        \r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringList().size());\r\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStringListByQuery() {\r\n+        insertStringList();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringList().size());\r\n+        assertEquals(\"1.1\", pc.getStringList().get(0));\r\n+        assertEquals(\"1.2\", pc.getStringList().get(1));\r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        assertEquals(2, pc.getStringList().size());\r\n+        assertEquals(\"2.1\", pc.getStringList().get(0));\r\n+        assertEquals(\"2.2\", pc.getStringList().get(1));\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertStringList() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        pc1.getStringList().add(\"1.1\");\r\n+        pc1.getStringList().add(\"1.2\");\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        pc2.getStringList().add(\"2.1\");\r\n+        pc2.getStringList().add(\"2.2\");\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testOneManyCollectionById() {\r\n+        oneManyCollectionByIdTest(false);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionById() {\r\n+        oneManyCollectionByIdTest(true);\r\n+    }\r\n+    \r\n+    private void oneManyCollectionByIdTest(boolean empty) {\r\n+        Object oid = insertOneManyCollection((empty) ? 1 : 0);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if (empty)\r\n+            assertEquals(0, pc.getOneManyCollection().size());\r\n+        else\r\n+            assertEquals(2, pc.getOneManyCollection().size());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testOneManyCollectionByQuery() {\r\n+        oneManyCollectionByQueryTest(0);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionByQuery1() {\r\n+        oneManyCollectionByQueryTest(1);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionByQuery2() {\r\n+        oneManyCollectionByQueryTest(2);\r\n+    }\r\n+    \r\n+    public void testEmptyOneManyCollectionByQuery3() {\r\n+        oneManyCollectionByQueryTest(3);\r\n+    }\r\n+    \r\n+    private void oneManyCollectionByQueryTest(int empty) {\r\n+        insertOneManyCollection(empty);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if ((empty & 1) > 0)\r\n+            assertEquals(0, pc.getOneManyCollection().size());\r\n+        else\r\n+            assertEquals(2, pc.getOneManyCollection().size());\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        if ((empty & 2) > 0)\r\n+            assertEquals(0, pc.getOneManyCollection().size());\r\n+        else\r\n+            assertEquals(2, pc.getOneManyCollection().size());\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertOneManyCollection(int empty) {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        EagerOuterJoinPC2 hpc;\r\n+        if ((empty & 1) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.1\");\r\n+            hpc.setRef(pc1);\r\n+            pc1.getOneManyCollection().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.2\");\r\n+            hpc.setRef(pc1);\r\n+            pc1.getOneManyCollection().add(hpc);\r\n+        }\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        if ((empty & 2) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.1\");\r\n+            hpc.setRef(pc2);\r\n+            pc2.getOneManyCollection().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.2\");\r\n+            hpc.setRef(pc2);\r\n+            pc2.getOneManyCollection().add(hpc);\r\n+        }\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testManyManyCollectionById() {\r\n+        Object oid = insertManyManyCollection();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyCollection().size());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testManyManyCollectionByQuery() {\r\n+        insertManyManyCollection();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyCollection\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyCollection().size());\r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyCollection().size());\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertManyManyCollection() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.1\");\r\n+        pc1.getManyManyCollection().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.2\");\r\n+        pc1.getManyManyCollection().add(hpc);\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.1\");\r\n+        pc2.getManyManyCollection().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.2\");\r\n+        pc2.getManyManyCollection().add(hpc);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testManyManyListById() {\r\n+        manyManyListByIdTest(false);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListById() {\r\n+        manyManyListByIdTest(true);\r\n+    }\r\n+    \r\n+    private void manyManyListByIdTest(boolean empty) {\r\n+        Object oid = insertManyManyList((empty) ? 1 : 0);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        if (empty)\r\n+            assertEquals(0, pc.getManyManyList().size());\r\n+        else {\r\n+            assertEquals(2, pc.getManyManyList().size());\r\n+            EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n+            pc.getManyManyList().get(0);\r\n+            assertEquals(\"1.1\", hpc.getName());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+            assertEquals(\"1.2\", hpc.getName());\r\n+        }\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testManyManyListByQuery() {\r\n+        manyManyListByQueryTest(0);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListByQuery1() {\r\n+        manyManyListByQueryTest(1);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListByQuery2() {\r\n+        manyManyListByQueryTest(2);\r\n+    }\r\n+    \r\n+    public void testEmptyManyManyListByQuery3() {\r\n+        manyManyListByQueryTest(3);\r\n+    }\r\n+    \r\n+    private void manyManyListByQueryTest(int empty) {\r\n+        insertManyManyList(empty);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        EagerOuterJoinPC2 hpc;\r\n+        if ((empty & 1) > 0)\r\n+            assertEquals(0, pc.getManyManyList().size());\r\n+        else {\r\n+            assertEquals(2, pc.getManyManyList().size());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n+            assertEquals(\"1.1\", hpc.getName());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+            assertEquals(\"1.2\", hpc.getName());\r\n+        }\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        if ((empty & 2) > 0)\r\n+            assertEquals(0, pc.getManyManyList().size());\r\n+        else {\r\n+            assertEquals(2, pc.getManyManyList().size());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n+            assertEquals(\"2.1\", hpc.getName());\r\n+            hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+            assertEquals(\"2.2\", hpc.getName());\r\n+        }\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertManyManyList(int empty) {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        EagerOuterJoinPC2 hpc;\r\n+        if ((empty & 1) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.1\");\r\n+            pc1.getManyManyList().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"1.2\");\r\n+            pc1.getManyManyList().add(hpc);\r\n+        }\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        if ((empty & 2) == 0) {\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.1\");\r\n+            pc2.getManyManyList().add(hpc);\r\n+            hpc = new EagerOuterJoinPC2();\r\n+            hpc.setName(\"2.2\");\r\n+            pc2.getManyManyList().add(hpc);\r\n+        }\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testTwoCollectionsInFetchGroupsById() {\r\n+        Object oid = insertTwoCollections();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) pm.getObjectId(oid);\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"1.1\", hpc.getName());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"1.2\", hpc.getName());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testTwoCollectionsInFetchGroupsByQuery() {\r\n+        insertTwoCollections();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.setFetchBatchSize(-1);\r\n+        \r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        \r\n+        assertEquals(2, results.size());\r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 hpc = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"1.1\", hpc.getName());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"1.2\", hpc.getName());\r\n+        \r\n+        pc = (EagerOuterJoinPC) itr.next();\r\n+        assertEquals(\"2\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"2.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"2.2\"));\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(0);\r\n+        assertEquals(\"2.1\", hpc.getName());\r\n+        hpc = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"2.2\", hpc.getName());\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertTwoCollections() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        pc1.getStringCollection().add(\"1.1\");\r\n+        pc1.getStringCollection().add(\"1.2\");\r\n+        EagerOuterJoinPC2 hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.1\");\r\n+        pc1.getManyManyList().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"1.2\");\r\n+        pc1.getManyManyList().add(hpc);\r\n+        \r\n+        EagerOuterJoinPC pc2 = new EagerOuterJoinPC();\r\n+        pc2.setName(\"2\");\r\n+        pc2.getStringCollection().add(\"2.1\");\r\n+        pc2.getStringCollection().add(\"2.2\");\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.1\");\r\n+        pc2.getManyManyList().add(hpc);\r\n+        hpc = new EagerOuterJoinPC2();\r\n+        hpc.setName(\"2.2\");\r\n+        pc2.getManyManyList().add(hpc);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        pm.persist(pc2);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    public void testQueryRandomAccess() {\r\n+        insertManyStringList();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        fetch.setFetchBatchSize(3);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        List results = (List) q.getResultList();\r\n+        assertEquals(10, results.size());\r\n+        \r\n+        for (int i = 5; i < results.size(); i++) {\r\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n+            assertEquals(String.valueOf(i), pc.getName());\r\n+            assertEquals(2, pc.getStringList().size());\r\n+            assertEquals(i + \".1\", pc.getStringList().get(0));\r\n+            assertEquals(i + \".2\", pc.getStringList().get(1));\r\n+        }\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testQueryRange() {\r\n+        insertManyStringList();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringList\");\r\n+        fetch.setFetchBatchSize(3);\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        //q.setRange(5, 20);\r\n+        \r\n+        List results = (List) q.getResultList();\r\n+        assertEquals(5, results.size());\r\n+        \r\n+        for (int i = 0; i < results.size(); i++) {\r\n+            EagerOuterJoinPC pc = (EagerOuterJoinPC) results.get(i);\r\n+            assertEquals(String.valueOf(i + 5), pc.getName());\r\n+            assertEquals(2, pc.getStringList().size());\r\n+            assertEquals((i + 5) + \".1\", pc.getStringList().get(0));\r\n+            assertEquals((i + 5) + \".2\", pc.getStringList().get(1));\r\n+        }\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void insertManyStringList() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        for (int i = 0; i < 10; i++) {\r\n+            EagerOuterJoinPC pc = new EagerOuterJoinPC();\r\n+            pc.setName(String.valueOf(i));\r\n+            pc.getStringList().add(i + \".1\");\r\n+            pc.getStringList().add(i + \".2\");\r\n+            pm.persist(pc);\r\n+        }\r\n+        endTx(pm);;\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToOneThenEagerToMany() {\r\n+        insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"ref\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"stringCollection\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC2.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(new ArrayList(results).toString(), 2, results.size());\r\n+        \r\n+        Iterator itr = results.iterator();\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n+        assertEquals(\"r1\", ref.getName());\r\n+        EagerOuterJoinPC pc = ref.getRef();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getStringCollection().size());\r\n+        assertTrue(pc.getStringCollection().contains(\"1.1\"));\r\n+        assertTrue(pc.getStringCollection().contains(\"1.2\"));\r\n+        \r\n+        ref = (EagerOuterJoinPC2) itr.next();\r\n+        assertEquals(\"r2\", ref.getName());\r\n+        assertTrue(pc == ref.getRef());\r\n+        \r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToManyThenEagerToOne() {\r\n+        insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(1, results.size());\r\n+        \r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"r1\", ref.getName());\r\n+        assertEquals(\"h1\", ref.getHelper().getStringField());\r\n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"r2\", ref.getName());\r\n+        assertEquals(\"h2\", ref.getHelper().getStringField());\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToManyThenEagerToMany() {\r\n+        insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"manyManyList\");\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"stringCollection\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(1, results.size());\r\n+        \r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(2, pc.getManyManyList().size());\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2)\r\n+        pc.getManyManyList().get(0);\r\n+        assertEquals(\"r1\", ref.getName());\r\n+        assertEquals(2, ref.getStringCollection().size());\r\n+        assertTrue(ref.getStringCollection().contains(\"r1.1\"));\r\n+        assertTrue(ref.getStringCollection().contains(\"r1.2\"));\r\n+        \r\n+        ref = (EagerOuterJoinPC2) pc.getManyManyList().get(1);\r\n+        assertEquals(\"r2\", ref.getName());\r\n+        assertEquals(2, ref.getStringCollection().size());\r\n+        assertTrue(ref.getStringCollection().contains(\"r2.1\"));\r\n+        assertTrue(ref.getStringCollection().contains(\"r2.2\"));\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testEagerToOneAndToManyThenEagerToOne() {\r\n+        Object oid = insertEagers();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        fetch.addField(EagerOuterJoinPC.class, \"oneManyCollection\");\r\n+        fetch.addField(EagerOuterJoinPC.class, \"helper\");\r\n+        fetch.addField(EagerOuterJoinPC2.class, \"helper\");\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",EagerOuterJoinPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"name ascending\");\r\n+        Collection results = (Collection) q.getResultList();\r\n+        assertEquals(1, results.size());\r\n+        \r\n+        EagerOuterJoinPC pc = (EagerOuterJoinPC) results.iterator().next();\r\n+        assertEquals(\"1\", pc.getName());\r\n+        assertEquals(\"h3\", pc.getHelper().getStringField());\r\n+        assertEquals(2, pc.getOneManyCollection().size());\r\n+        Iterator itr = pc.getOneManyCollection().iterator();\r\n+        EagerOuterJoinPC2 ref = (EagerOuterJoinPC2) itr.next();\r\n+        if (\"r1\".equals(ref.getName())) {\r\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n+            ref = (EagerOuterJoinPC2) itr.next();\r\n+            assertEquals(\"r2\", ref.getName());\r\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n+        } else {\r\n+            assertEquals(\"r2\", ref.getName());\r\n+            assertEquals(\"h2\", ref.getHelper().getStringField());\r\n+            ref = (EagerOuterJoinPC2) itr.next();\r\n+            assertEquals(\"r1\", ref.getName());\r\n+            assertEquals(\"h1\", ref.getHelper().getStringField());\r\n+        }\r\n+        assertTrue(!itr.hasNext());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private Object insertEagers() {\r\n+        EagerOuterJoinPC pc1 = new EagerOuterJoinPC();\r\n+        pc1.setName(\"1\");\r\n+        pc1.getStringCollection().add(\"1.1\");\r\n+        pc1.getStringCollection().add(\"1.2\");\r\n+        \r\n+        EagerOuterJoinPC2 ref1 = new EagerOuterJoinPC2();\r\n+        ref1.setName(\"r1\");\r\n+        ref1.getStringCollection().add(\"r1.1\");\r\n+        ref1.getStringCollection().add(\"r1.2\");\r\n+        \r\n+        EagerOuterJoinPC2 ref2 = new EagerOuterJoinPC2();\r\n+        ref2.setName(\"r2\");\r\n+        ref2.getStringCollection().add(\"r2.1\");\r\n+        ref2.getStringCollection().add(\"r2.2\");\r\n+        \r\n+        HelperPC hpc1 = new HelperPC();\r\n+        hpc1.setStringField(\"h1\");\r\n+        \r\n+        HelperPC hpc2 = new HelperPC();\r\n+        hpc2.setStringField(\"h2\");\r\n+        \r\n+        HelperPC hpc3 = new HelperPC();\r\n+        hpc3.setStringField(\"h3\");\r\n+        \r\n+        pc1.getManyManyList().add(ref1);\r\n+        pc1.getOneManyCollection().add(ref1);\r\n+        ref1.setRef(pc1);\r\n+        pc1.getManyManyList().add(ref2);\r\n+        pc1.getOneManyCollection().add(ref2);\r\n+        ref2.setRef(pc1);\r\n+        \r\n+        ref1.setHelper(hpc1);\r\n+        ref2.setHelper(hpc2);\r\n+        pc1.setHelper(hpc3);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        endTx(pm);;\r\n+        Object oid = pm.getObjectId(pc1);\r\n+        pm.close();\r\n+        return oid;\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"9e0b90827b465013a0eb9d77091b8e6c1bfd9869","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIntermediate.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,132 @@\n+/*\r\n+ * TestIntermediate.java\r\n+ *\r\n+ * Created on October 3, 2006, 12:01 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestIntermediate extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+    \r\n+    private Object _pc;\r\n+    private Object _rel;\r\n+    \r\n+    public TestIntermediate(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestIntermediate */\r\n+    public TestIntermediate() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        RuntimeTest1 pc = new RuntimeTest1(\"pc\", 1);\r\n+        RuntimeTest1 rel = new RuntimeTest1(\"rel\", 2);\r\n+        pc.setSelfOneOne(rel);\r\n+        \r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+        broker.begin();\r\n+        broker.persist(pc, null);\r\n+        broker.commit();\r\n+        _pc = broker.getObjectId(pc);\r\n+        _rel = broker.getObjectId(rel);\r\n+        broker.close();\r\n+        em.close();\r\n+    }\r\n+    \r\n+    public void testOneOneSetsIntermediate() {\r\n+        OpenJPAEntityManager em =(OpenJPAEntityManager)currentEntityManager();\r\n+        Broker broker = JPAFacadeHelper.toBroker(em);\r\n+        try {\r\n+            oneOneIntermediateTest(broker);\r\n+        } finally {\r\n+            broker.close();\r\n+            em.close();\r\n+        }\r\n+    }\r\n+    \r\n+    public void testDataCacheOneOneSetsIntermediate() {\r\n+        BrokerFactory factory = getBrokerFactory(new String[]{\r\n+            \"openjpa.DataCache\", \"true\",\r\n+            \"openjpa.RemoteCommitProvider\", \"sjvm\",\r\n+        });\r\n+        \r\n+        // get obj into cache\r\n+        Broker broker = factory.newBroker();\r\n+        try {\r\n+            broker.find(_pc, true, null);\r\n+        } finally {\r\n+            broker.close();\r\n+        }\r\n+        \r\n+        // test from cache\r\n+        broker = factory.newBroker();\r\n+        try {\r\n+            oneOneIntermediateTest(broker);\r\n+        } finally {\r\n+            broker.close();\r\n+            try {\r\n+                factory.close();\r\n+            } catch (Exception e) {\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Helper method to see that the one to one uses an intermediate values.\r\n+     */\r\n+    private void oneOneIntermediateTest(Broker broker) {\r\n+        RuntimeTest1 pc = (RuntimeTest1) broker.find(_pc, true, null);\r\n+        OpenJPAStateManager sm = broker.getStateManager(pc);\r\n+        assertNotNull(sm);\r\n+        FieldMetaData fmd = sm.getMetaData().getField(\"selfOneOne\");\r\n+        assertNotNull(fmd);\r\n+        assertEquals(_rel, sm.getIntermediate(fmd.getIndex()));\r\n+        assertEquals(_rel, broker.getObjectId(pc.getSelfOneOne()));\r\n+        assertNull(sm.getIntermediate(fmd.getIndex()));\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"36c8404721fc080e8806492d32b7a5f4f1d80d75","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","status":"added","additions":363,"deletions":0,"changes":363,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestIrregularJoins.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,363 @@\n+/*\r\n+ * TestIrregularJoins.java\r\n+ *\r\n+ * Created on October 3, 2006, 12:47 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.NonPKJoinPC2;\r\n+\r\n+\r\n+\r\n+public class TestIrregularJoins extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+\r\n+    private Object _nonpk = null;\r\n+    private Object _nonpk3 = null;\r\n+    private Object _partial = null;\r\n+    private Object _partial3 = null;\r\n+    private Object _constant2 = null;\r\n+    private Object _constant3 = null;\r\n+\r\n+    public TestIrregularJoins(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestIrregularJoins */\r\n+    public TestIrregularJoins() {\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        // make sure these classes are registered since we're using metadata\r\n+        // values for the class indicator\r\n+        new ConstantJoinPC();\r\n+        new ConstantJoinPC2();\r\n+        new ConstantJoinPC3();\r\n+\r\n+       deleteAll(PartialJoinPC.class);\r\n+       deleteAll(NonPKJoinPC.class);\r\n+       deleteAll(ConstantJoinPC.class);\r\n+\r\n+        PartialJoinPC partial = new PartialJoinPC();\r\n+        partial.setPk1(1);\r\n+        partial.setPk2(2);\r\n+        PartialJoinPC2 partial2 = new PartialJoinPC2();\r\n+        partial2.setPk1(2);\r\n+        partial2.setPk2(3);\r\n+        PartialJoinPC3 partial3 = new PartialJoinPC3();\r\n+        partial3.setPk1(3);\r\n+        partial3.setPk2(4);\r\n+\r\n+        NonPKJoinPC nonpk = new NonPKJoinPC();\r\n+        nonpk.setId1(1);\r\n+        nonpk.setId2(2);\r\n+        NonPKJoinPC2 nonpk2 = new NonPKJoinPC2();\r\n+        nonpk2.setId1(2);\r\n+        nonpk2.setId2(3);\r\n+        NonPKJoinPC3 nonpk3 = new NonPKJoinPC3();\r\n+        nonpk3.setId1(3);\r\n+        nonpk3.setId2(4);\r\n+\r\n+        partial.setNonPK(nonpk);\r\n+        partial.getNonPKs().add(nonpk);\r\n+        nonpk.setPartial(partial);\r\n+        nonpk.getPartials().add(partial);\r\n+\r\n+        partial3.setNonPK(nonpk);\r\n+        partial3.setNonPK3(nonpk3);\r\n+        partial3.getNonPKs().add(nonpk);\r\n+        partial3.getNonPK2s().add(nonpk2);\r\n+        nonpk3.setPartial(partial);\r\n+        nonpk3.setPartial3(partial3);\r\n+        nonpk3.getPartials().add(partial);\r\n+        nonpk3.getPartial2s().add(partial2);\r\n+\r\n+        ConstantJoinPC2 constant2 = new ConstantJoinPC2();\r\n+        constant2.setPk1(1);\r\n+        constant2.setPk2(2);\r\n+        constant2.setNonPK(nonpk3);\r\n+        constant2.setNonPK2(nonpk3);\r\n+\r\n+        // set the object's inverse on diff objects so we can be sure\r\n+        // that its 1-many includes only the object with the right constant\r\n+        nonpk.setConstant(constant2);\r\n+        nonpk2.setConstant(constant2);\r\n+        nonpk3.setConstant(constant2);\r\n+\r\n+        ConstantJoinPC3 constant3 = new ConstantJoinPC3();\r\n+        constant3.setPk1(1);\r\n+        constant3.setPk2(3);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+        pm.persist(partial);\r\n+        pm.persist(partial3);\r\n+        pm.persist(constant2);\r\n+        pm.persist(constant3);\r\n+        endTx(pm);\r\n+        _partial = pm.getObjectId(partial);\r\n+        _partial3 = pm.getObjectId(partial3);\r\n+        _nonpk = pm.getObjectId(nonpk);\r\n+        _nonpk3 = pm.getObjectId(nonpk3);\r\n+        _constant2 = pm.getObjectId(constant2);\r\n+        _constant3 = pm.getObjectId(constant3);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNonPKOneOne() {\r\n+        \r\n+        nonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerNonPKOneOne() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n+        nonPKOneOne(pm);\r\n+    }\r\n+\r\n+    private void nonPKOneOne(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n+        NonPKJoinPC nonpk = partial.getNonPK();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testPartialOneOne() {\r\n+        partialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerPartialOneOne() {\r\n+        \r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partial\");\r\n+        partialOneOne(pm);\r\n+    }\r\n+\r\n+    private void partialOneOne(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n+        PartialJoinPC partial = nonpk.getPartial();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalNonPKOneOne() {\r\n+        verticalNonPKOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalNonPKOneOne() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK3\");\r\n+        verticalNonPKOneOne(pm);\r\n+    }\r\n+\r\n+    private void verticalNonPKOneOne(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n+        NonPKJoinPC nonpk = partial3.getNonPK();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        NonPKJoinPC3 nonpk3 = partial3.getNonPK3();\r\n+        assertEquals(3, nonpk3.getId1());\r\n+        assertEquals(4, nonpk3.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalPartialOneOne() {\r\n+        verticalPartialOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalPartialOneOne() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partial3\");\r\n+        verticalPartialOneOne(pm);\r\n+    }\r\n+\r\n+    private void verticalPartialOneOne(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n+        PartialJoinPC partial = nonpk3.getPartial();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        PartialJoinPC3 partial3 = nonpk3.getPartial3();\r\n+        assertEquals(3, partial3.getPk1());\r\n+        assertEquals(4, partial3.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNonPKManyMany() {\r\n+        nonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerNonPKManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n+        nonPKManyMany(pm);\r\n+    }\r\n+\r\n+    private void nonPKManyMany(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC partial = (PartialJoinPC) pm.getObjectId(_partial);\r\n+        Collection nonpks = partial.getNonPKs();\r\n+        assertEquals(1, nonpks.size());\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testPartialManyMany() {\r\n+        partialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerPartialManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partials\");\r\n+        partialManyMany(pm);\r\n+    }\r\n+\r\n+    private void partialManyMany(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) pm.getObjectId(_nonpk);\r\n+        Collection partials = nonpk.getPartials();\r\n+        assertEquals(1, partials.size());\r\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalNonPKManyMany() {\r\n+        verticalNonPKManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalNonPKManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK2s\");\r\n+        verticalNonPKManyMany(pm);\r\n+    }\r\n+\r\n+    private void verticalNonPKManyMany(OpenJPAEntityManager pm) {\r\n+        PartialJoinPC3 partial3 = (PartialJoinPC3) pm.getObjectId(_partial3);\r\n+        Collection nonpks = partial3.getNonPKs();\r\n+        assertEquals(1, nonpks.size());\r\n+        NonPKJoinPC nonpk = (NonPKJoinPC) nonpks.iterator().next();\r\n+        assertEquals(1, nonpk.getId1());\r\n+        assertEquals(2, nonpk.getId2());\r\n+        Collection nonpk2s = partial3.getNonPK2s();\r\n+        assertEquals(1, nonpk2s.size());\r\n+        NonPKJoinPC2 nonpk2 = (NonPKJoinPC2) nonpk2s.iterator().next();\r\n+        assertEquals(2, nonpk2.getId1());\r\n+        assertEquals(3, nonpk2.getId2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalPartialManyMany() {\r\n+        verticalPartialManyMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerVerticalPartialManyMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"partial2s\");\r\n+        verticalPartialManyMany(pm);\r\n+    }\r\n+\r\n+    private void verticalPartialManyMany(OpenJPAEntityManager pm) {\r\n+        NonPKJoinPC3 nonpk3 = (NonPKJoinPC3) pm.getObjectId(_nonpk3);\r\n+        Collection partials = nonpk3.getPartials();\r\n+        assertEquals(1, partials.size());\r\n+        PartialJoinPC partial = (PartialJoinPC) partials.iterator().next();\r\n+        assertEquals(1, partial.getPk1());\r\n+        assertEquals(2, partial.getPk2());\r\n+        Collection partial2s = nonpk3.getPartial2s();\r\n+        assertEquals(1, partial2s.size());\r\n+        PartialJoinPC2 partial2 = (PartialJoinPC2) partial2s.iterator().next();\r\n+        assertEquals(2, partial2.getPk1());\r\n+        assertEquals(3, partial2.getPk2());\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testVerticalConstant() {\r\n+        \r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n+        assertEquals(1, constant2.getPk1());\r\n+        assertEquals(2, constant2.getPk2());\r\n+        ConstantJoinPC3 constant3 = (ConstantJoinPC3) pm.getObjectId(_constant3);\r\n+        assertEquals(1, constant3.getPk1());\r\n+        assertEquals(3, constant3.getPk2());\r\n+    }\r\n+\r\n+    public void testConstantOneOne() {\r\n+        constantOneOne((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerConstantOneOne() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPK\");\r\n+        constantOneOne(pm);\r\n+    }\r\n+\r\n+    private void constantOneOne(OpenJPAEntityManager pm) {\r\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n+\r\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK()));\r\n+        assertEquals(_nonpk3, pm.getObjectId(constant2.getNonPK2()));\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testConstantOneMany() {\r\n+        constantOneMany((OpenJPAEntityManager)currentEntityManager());\r\n+    }\r\n+\r\n+    public void testEagerConstantOneMany() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nonPKs\");\r\n+        constantOneMany(pm);\r\n+    }\r\n+\r\n+    private void constantOneMany(OpenJPAEntityManager pm) {\r\n+        ConstantJoinPC2 constant2 = (ConstantJoinPC2) pm.getObjectId(_constant2);\r\n+\r\n+        Collection nonpks = constant2.getNonPKs();\r\n+        assertEquals(1, nonpks.size());\r\n+        assertEquals(_nonpk, pm.getObjectId\r\n+            (nonpks.iterator().next()));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+}\r"},{"sha":"9830b7f9ec9051815a2f28a56653a7addafdd6b5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJDBCType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * TestJDBCType.java\r\n+ *\r\n+ * Created on October 3, 2006, 4:11 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.meta.RefreshStrategyInstaller;\r\n+import org.apache.openjpa.jdbc.meta.strats.BlobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.ClobValueHandler;\r\n+import org.apache.openjpa.jdbc.meta.strats.MaxEmbeddedClobFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.StringFieldStrategy;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.jdbc.meta.JavaSQLTypes;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+\r\n+public class TestJDBCType extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\t\r\n+    /** Creates a new instance of TestJDBCType */\r\n+    public TestJDBCType(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    /**\r\n+     * Tests that application identity classes are returned correctly.\r\n+     */\r\n+    public void testSchemaGeneration() {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n+        repos.setStrategyInstaller(new RefreshStrategyInstaller(repos));\r\n+        ClassMapping mapping = repos.getMapping(Column.class, null, true);\r\n+\r\n+        Class cls;\r\n+        if (dict.getPreferredType(JavaSQLTypes.CLOB) ==  JavaSQLTypes.CLOB) {\r\n+            if (dict.maxEmbeddedClobSize > 0) {\r\n+                cls = mapping.getFieldMapping(\"toClob\").getStrategy().\r\n+                    getClass();\r\n+                assertTrue(cls.getName(),\r\n+                    MaxEmbeddedClobFieldStrategy.class.isAssignableFrom(cls));\r\n+            } else {\r\n+                cls = mapping.getFieldMapping(\"toClob\").getHandler().\r\n+                    getClass();\r\n+                assertTrue(cls.getName(),\r\n+                    ClobValueHandler.class.isAssignableFrom(cls));\r\n+            }\r\n+        } else\r\n+            assertTrue(mapping.getFieldMapping(\"toClob\").getStrategy()\r\n+                instanceof StringFieldStrategy);\r\n+\r\n+        cls = mapping.getFieldMapping(\"toBlob\").getHandler().getClass();\r\n+        assertTrue(cls.getName(),\r\n+            BlobValueHandler.class.isAssignableFrom(cls));\r\n+\r\n+        SchemaGroup schema = repos.getSchemaGroup();\r\n+        Table table = schema.getSchemas()[0].getTables()[0];\r\n+        Column[] cols = table.getColumns();\r\n+        for (int i = 0; i < cols.length; i++) {\r\n+            if (cols[i].getName().equalsIgnoreCase(\"id\")\r\n+                || cols[i].getName().equalsIgnoreCase(\"versn\")\r\n+                || cols[i].getName().equalsIgnoreCase(\"typ\"))\r\n+                continue;\r\n+            if (\"longToInt\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.INT),\r\n+                    cols[i].getType());\r\n+            else if (\"longToSQL\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(\"varchar\", cols[i].getTypeName());\r\n+            else if (\"toClob\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.CLOB),\r\n+                    cols[i].getType());\r\n+            else if (\"toBlob\".equalsIgnoreCase(cols[i].getName()))\r\n+                assertEquals(dict.getPreferredType(JavaSQLTypes.BLOB),\r\n+                    cols[i].getType());\r\n+            else\r\n+                fail(\"Unknown column:\" + cols[i].getName());\r\n+        }\r\n+    }    \r\n+}\r"},{"sha":"70d8090b4eec22424b4b45de7bd1e42de082fe95","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestJoinToBaseClass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * TestJoinToBaseClass.java\r\n+ *\r\n+ * Created on October 3, 2006, 4:19 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestJoinToBaseClass extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    \r\n+    \r\n+    /** Creates a new instance of TestJoinToBaseClass */\r\n+    public TestJoinToBaseClass(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void testMapping() {\r\n+        ClassMapping mapping = ((JDBCConfiguration) getConfiguration()).\r\n+            getMappingRepositoryInstance().\r\n+            getMapping(MappingTest5.class, null, true);\r\n+\r\n+        Table supTable = mapping.getPCSuperclassMapping().getTable();\r\n+        assertTrue(mapping.getTable() != supTable);\r\n+        FieldMapping field = mapping.getFieldMapping(\"vertRel\");\r\n+        ForeignKey fk = field.getForeignKey();\r\n+        assertEquals(mapping.getTable(), fk.getTable());\r\n+        assertEquals(supTable, fk.getPrimaryKeyTable());\r\n+        Column[] cols = field.getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(\"V1\", cols[0].getName());\r\n+        assertEquals(\"V2\", cols[1].getName());\r\n+    }\r\n+\r\n+    public void testConstraintAnalysis() {\r\n+        //FIXME jthomas\r\n+        //PersistenceManagerFactory factory = getPMFactory(new String[]{\r\n+          //  \"openjpa.jdbc.SchemaFactory\", \"native(ForeignKeys=true)\",\r\n+        //});\r\n+        OpenJPAEntityManagerFactory factory=null;\r\n+        OpenJPAEntityManager pm = factory.createEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+       deleteAll( MappingTest1.class,pm);\r\n+       deleteAll( MappingTest2.class,pm);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = factory.createEntityManager();\r\n+        startTx(pm);\r\n+        for (int i = 0; i < 10; i++) {\r\n+            MappingTest5 pc1 = new MappingTest5();\r\n+            pc1.setPk1(i);\r\n+            pc1.setPk2(i + 1);\r\n+            MappingTest5 pc2 = new MappingTest5();\r\n+            pc2.setPk1(i + 10);\r\n+            pc2.setPk2(i + 11);\r\n+            pc1.setVertRel(pc2);\r\n+            pc2.setVertRel(pc1);\r\n+            pm.persist(pc1);\r\n+        }\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        assertSizes(20, MappingTest5.class);\r\n+\r\n+        pm = factory.createEntityManager();\r\n+        startTx(pm);\r\n+        deleteAll(MappingTest2.class,pm);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    private void assertSizes(int size, Class cls) {\r\n+        assertSize(size, currentEntityManager().createExtent(cls, true).list());\r\n+    }\r\n+}\r"},{"sha":"fc104775cdadec42c2bb866335d4c2663f7899f4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","status":"added","additions":601,"deletions":0,"changes":601,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLRSProxies.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,601 @@\n+/*\r\n+ * TestLRSProxies.java\r\n+ *\r\n+ * Created on October 3, 2006, 5:01 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestLRSProxies extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+   \r\n+    private Object _oid = null;\r\n+    private Object _coid = null;\r\n+    \r\n+    public TestLRSProxies(String casename) {\r\n+        super(casename);\r\n+    }\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestLRSProxies */\r\n+    public TestLRSProxies() {\r\n+    }\r\n+    public void setUp() {\r\n+       deleteAll(LRSPC.class);\r\n+       deleteAll(LRSCompoundPC.class);\r\n+        \r\n+        LRSPC pc = new LRSPC(\"main\");\r\n+        \r\n+        pc.getStringSet().add(\"val1\");\r\n+        pc.getStringSet().add(\"val2\");\r\n+        pc.getStringSet().add(\"val3\");\r\n+        \r\n+        pc.getRelSet().add(new LRSPC(\"set1\"));\r\n+        pc.getRelSet().add(new LRSPC(\"set2\"));\r\n+        pc.getRelSet().add(new LRSPC(\"set3\"));\r\n+        \r\n+        pc.getStringCollection().add(\"val1\");\r\n+        pc.getStringCollection().add(\"val2\");\r\n+        pc.getStringCollection().add(\"val3\");\r\n+        \r\n+        pc.getRelCollection().add(new LRSPC(\"set1\"));\r\n+        pc.getRelCollection().add(new LRSPC(\"set2\"));\r\n+        pc.getRelCollection().add(new LRSPC(\"set3\"));\r\n+        \r\n+        pc.getStringMap().put(\"key1\", \"1\");\r\n+        pc.getStringMap().put(\"key2\", \"2\");\r\n+        pc.getStringMap().put(\"key3\", \"3\");\r\n+        \r\n+        pc.getRelMap().put(\"key1\", new LRSPC(\"map1\"));\r\n+        pc.getRelMap().put(\"key2\", new LRSPC(\"map2\"));\r\n+        pc.getRelMap().put(\"key3\", new LRSPC(\"map3\"));\r\n+        \r\n+        LRSCompoundPC cpc = new LRSCompoundPC(\"main\");\r\n+        \r\n+        cpc.getStringSet().add(\"val1\");\r\n+        cpc.getStringSet().add(\"val2\");\r\n+        cpc.getStringSet().add(\"val3\");\r\n+        \r\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set1\"));\r\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set2\"));\r\n+        cpc.getRelSet().add(new LRSCompoundPC(\"set3\"));\r\n+        \r\n+        cpc.getStringCollection().add(\"val1\");\r\n+        cpc.getStringCollection().add(\"val2\");\r\n+        cpc.getStringCollection().add(\"val3\");\r\n+        \r\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set1\"));\r\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set2\"));\r\n+        cpc.getRelCollection().add(new LRSCompoundPC(\"set3\"));\r\n+        \r\n+        cpc.getStringMap().put(\"key1\", \"1\");\r\n+        cpc.getStringMap().put(\"key2\", \"2\");\r\n+        cpc.getStringMap().put(\"key3\", \"3\");\r\n+        \r\n+        cpc.getRelMap().put(\"key1\", new LRSCompoundPC(\"map1\"));\r\n+        cpc.getRelMap().put(\"key2\", new LRSCompoundPC(\"map2\"));\r\n+        cpc.getRelMap().put(\"key3\", new LRSCompoundPC(\"map3\"));\r\n+        \r\n+        \r\n+        \r\n+        OpenJPAEntityManager pm = getEm(false, false);\r\n+        \r\n+        startTx(pm);\r\n+        pm.persist(pc);\r\n+        pm.persist(cpc);\r\n+        endTx(pm);\r\n+        _oid = pm.getObjectId(pc);\r\n+        _coid = pm.getObjectId(cpc);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStringSet() {\r\n+        stringCollectionTest(_oid, true, true);\r\n+        stringCollectionTest(_coid, true, true);\r\n+    }\r\n+    \r\n+    public void testStringSetRetain() {\r\n+        stringCollectionTest(_oid, false, true);\r\n+        stringCollectionTest(_coid, false, true);\r\n+    }\r\n+    \r\n+    public void testStringCollection() {\r\n+        stringCollectionTest(_oid, true, false);\r\n+        stringCollectionTest(_coid, true, false);\r\n+    }\r\n+    \r\n+    public void testStringCollectionRetain() {\r\n+        stringCollectionTest(_oid, false, false);\r\n+        stringCollectionTest(_coid, false, false);\r\n+    }\r\n+    \r\n+    private void stringCollectionTest(Object oid, boolean close,\r\n+            boolean isSet) {\r\n+        //FIXME jthomas\r\n+        //PersistenceManager pm = getPM(!close, !close);\r\n+        OpenJPAEntityManager pm =null;\r\n+        startTx(pm);\r\n+        \r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Collection set = isSet ? pc.getStringSet() : pc.getStringCollection();\r\n+        assertEquals(3, set.size());\r\n+        assertTrue(set.contains(\"val1\"));\r\n+        assertTrue(set.contains(\"val2\"));\r\n+        assertTrue(set.contains(\"val3\"));\r\n+        if (!isSet) {\r\n+            Iterator itr = set.iterator();\r\n+            assertEquals(\"val1\", itr.next());\r\n+            assertEquals(\"val2\", itr.next());\r\n+            assertEquals(\"val3\", itr.next());\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+        }\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        set.remove(\"val1\");\r\n+        set.remove(\"val1\");\r\n+        set.add(\"val4\");\r\n+        set.remove(\"val4\");\r\n+        set.add(\"val5\");\r\n+        set.add(\"val6\");\r\n+        assertStringCollectionChanged(set, isSet);\r\n+        endTx(pm);\r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check set\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        set = isSet ? pc.getStringSet() : pc.getStringCollection();\r\n+        assertStringCollectionChanged(set, isSet);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertStringCollectionChanged(Collection set, boolean isSet) {\r\n+        assertEquals(4, set.size());\r\n+        assertTrue(!set.contains(\"val1\"));\r\n+        assertTrue(set.contains(\"val2\"));\r\n+        assertTrue(set.contains(\"val3\"));\r\n+        assertTrue(!set.contains(\"val4\"));\r\n+        assertTrue(set.contains(\"val5\"));\r\n+        assertTrue(set.contains(\"val6\"));\r\n+        if (!isSet) {\r\n+            Iterator itr = set.iterator();\r\n+            assertEquals(\"val2\", itr.next());\r\n+            assertEquals(\"val3\", itr.next());\r\n+            assertEquals(\"val5\", itr.next());\r\n+            assertEquals(\"val6\", itr.next());\r\n+            assertTrue(!itr.hasNext());\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+        }\r\n+    }\r\n+    \r\n+    public void testStringMap() {\r\n+        stringMapTest(_oid, true);\r\n+        stringMapTest(_coid, true);\r\n+    }\r\n+    \r\n+    public void testStringMapRetain() {\r\n+        stringMapTest(_oid, false);\r\n+        stringMapTest(_coid, false);\r\n+    }\r\n+    \r\n+    private void stringMapTest(Object oid, boolean close) {\r\n+        OpenJPAEntityManager pm = getEm(!close, !close);\r\n+        startTx(pm);\r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Map map = pc.getStringMap();\r\n+        assertEquals(3, map.size());\r\n+        assertEquals(\"1\", map.get(\"key1\"));\r\n+        assertEquals(\"2\", map.get(\"key2\"));\r\n+        assertEquals(\"3\", map.get(\"key3\"));\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        map.put(\"key1\", \"1a\");\r\n+        map.put(\"key1\", \"1b\");\r\n+        map.put(\"key2\", \"4\");\r\n+        map.remove(\"key2\");\r\n+        map.remove(\"foo\");\r\n+        map.put(\"key5\", \"5\");\r\n+        assertStringMapChanged(map);\r\n+        endTx(pm);\r\n+        \r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check map\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        map = pc.getStringMap();\r\n+        assertStringMapChanged(map);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertStringMapChanged(Map map) {\r\n+        assertEquals(3, map.size());\r\n+        assertEquals(\"1b\", map.get(\"key1\"));\r\n+        assertEquals(\"3\", map.get(\"key3\"));\r\n+        assertEquals(\"5\", map.get(\"key5\"));\r\n+        assertNull(map.get(\"key2\"));\r\n+        assertTrue(map.containsKey(\"key1\"));\r\n+        assertFalse(map.containsKey(\"key2\"));\r\n+        assertTrue(map.containsValue(\"5\"));\r\n+        assertFalse(map.containsValue(\"1\"));\r\n+        \r\n+        Iterator itr = map.entrySet().iterator();\r\n+        Map.Entry entry;\r\n+        int count = 0;\r\n+        for (; itr.hasNext(); count++) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            if (entry.getKey().equals(\"key1\"))\r\n+                assertEquals(\"1b\", entry.getValue());\r\n+            else if (entry.getKey().equals(\"key3\"))\r\n+                assertEquals(\"3\", entry.getValue());\r\n+            else if (entry.getKey().equals(\"key5\"))\r\n+                assertEquals(\"5\", entry.getValue());\r\n+            else\r\n+                fail(\"Bad key: \" + entry.getKey());\r\n+        }\r\n+        assertEquals(3, count);\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+    }\r\n+    \r\n+    public void testRelSet() {\r\n+        relCollectionTest(_oid, true, true);\r\n+        relCollectionTest(_coid, true, true);\r\n+    }\r\n+    \r\n+    public void testRelSetRetain() {\r\n+        relCollectionTest(_oid, false, true);\r\n+        relCollectionTest(_coid, false, true);\r\n+    }\r\n+    \r\n+    public void testRelCollection() {\r\n+        relCollectionTest(_oid, true, false);\r\n+        relCollectionTest(_coid, true, false);\r\n+    }\r\n+    \r\n+    public void testRelCollectionRetain() {\r\n+        relCollectionTest(_oid, false, false);\r\n+        relCollectionTest(_coid, false, false);\r\n+    }\r\n+    \r\n+    private void relCollectionTest(Object oid, boolean close, boolean isSet) {\r\n+        OpenJPAEntityManager pm = getEm(!close, !close);\r\n+        startTx(pm);\r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\r\n+        assertEquals(3, set.size());\r\n+        Collection ordered = new TreeSet();\r\n+        Iterator itr = set.iterator();\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+        itr = ordered.iterator();\r\n+        LRSPCIntf set1 = (LRSPCIntf) itr.next();\r\n+        if (!isSet) {\r\n+            LRSPCIntf set2 = (LRSPCIntf) itr.next();\r\n+            LRSPCIntf set3 = (LRSPCIntf) itr.next();\r\n+            assertEquals(\"set1\", set1.getStringField());\r\n+            assertEquals(\"set2\", set2.getStringField());\r\n+            assertEquals(\"set3\", set3.getStringField());\r\n+        }\r\n+        assertTrue(set.contains(set1));\r\n+        assertFalse(set.contains(pc));\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        set.remove(set1);\r\n+        set.remove(set1);\r\n+        LRSPCIntf set4 = pc.newInstance(\"set4\");\r\n+        set.add(set4);\r\n+        set.remove(set4);\r\n+        LRSPCIntf set5 = pc.newInstance(\"set5\");\r\n+        set.add(set5);\r\n+        assertRelCollectionChanged(pc, isSet);\r\n+        endTx(pm);\r\n+        \r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check set\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        assertRelCollectionChanged(pc, isSet);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertRelCollectionChanged(LRSPCIntf pc, boolean isSet) {\r\n+        Collection set = isSet ? pc.getRelSet() : pc.getRelCollection();\r\n+        assertEquals(3, set.size());\r\n+        Collection ordered = new TreeSet();\r\n+        Iterator itr = set.iterator();\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        ordered.add(itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+        itr = ordered.iterator();\r\n+        LRSPCIntf set2 = (LRSPCIntf) itr.next();\r\n+        if (!isSet) {\r\n+            LRSPCIntf set3 = (LRSPCIntf) itr.next();\r\n+            LRSPCIntf set5 = (LRSPCIntf) itr.next();\r\n+            assertEquals(\"set2\", set2.getStringField());\r\n+            assertEquals(\"set3\", set3.getStringField());\r\n+            assertEquals(\"set5\", set5.getStringField());\r\n+        }\r\n+        assertTrue(set.contains(set2));\r\n+        assertFalse(set.contains(pc));\r\n+    }\r\n+    \r\n+    public void testRelMap() {\r\n+        relMapTest(_oid, true);\r\n+        relMapTest(_coid, true);\r\n+    }\r\n+    \r\n+    public void testRelMapRetain() {\r\n+        relMapTest(_oid, false);\r\n+        relMapTest(_coid, false);\r\n+    }\r\n+    \r\n+    private void relMapTest(Object oid, boolean close) {\r\n+        OpenJPAEntityManager pm = getEm(!close, !close);\r\n+        startTx(pm);\r\n+        LRSPCIntf pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        \r\n+        // check that orig values are correct\r\n+        Map map = pc.getRelMap();\r\n+        assertEquals(3, map.size());\r\n+        LRSPCIntf map1 = (LRSPCIntf) map.get(\"key1\");\r\n+        LRSPCIntf map2 = (LRSPCIntf) map.get(\"key2\");\r\n+        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\r\n+        assertEquals(\"map1\", map1.getStringField());\r\n+        assertEquals(\"map2\", map2.getStringField());\r\n+        assertEquals(\"map3\", map3.getStringField());\r\n+        assertTrue(map.containsKey(\"key1\"));\r\n+        assertFalse(map.containsKey(\"key4\"));\r\n+        assertTrue(map.containsValue(map1));\r\n+        assertFalse(map.containsValue(pc));\r\n+        \r\n+        // do some mods to try to confuse the proxy\r\n+        LRSPCIntf map1a = pc.newInstance(\"map1a\");\r\n+        map.put(\"key1\", map1a);\r\n+        LRSPCIntf map1b = pc.newInstance(\"map1b\");\r\n+        map.put(\"key1\", map1b);\r\n+        map.remove(\"key2\");\r\n+        map.put(\"key4\", pc.newInstance(\"map4\"));\r\n+        map.remove(\"key4\");\r\n+        map.remove(\"foo\");\r\n+        map.put(\"key5\", pc.newInstance(\"map5\"));\r\n+        assertRelMapChanged(pc);\r\n+        endTx(pm);\r\n+        \r\n+        if (close) {\r\n+            pm.close();\r\n+            pm = getEm(false, false);\r\n+        }\r\n+        \r\n+        // re-retrieve and check map\r\n+        pc = (LRSPCIntf) pm.getObjectId(oid);\r\n+        assertRelMapChanged(pc);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void assertRelMapChanged(LRSPCIntf pc) {\r\n+        Map map = pc.getRelMap();\r\n+        assertEquals(3, map.size());\r\n+        LRSPCIntf map1b = (LRSPCIntf) map.get(\"key1\");\r\n+        LRSPCIntf map3 = (LRSPCIntf) map.get(\"key3\");\r\n+        LRSPCIntf map5 = (LRSPCIntf) map.get(\"key5\");\r\n+        assertEquals(\"map1b\", map1b.getStringField());\r\n+        assertEquals(\"map3\", map3.getStringField());\r\n+        assertEquals(\"map5\", map5.getStringField());\r\n+        assertTrue(map.containsKey(\"key1\"));\r\n+        assertFalse(map.containsKey(\"key2\"));\r\n+        assertTrue(map.containsValue(map1b));\r\n+        assertFalse(map.containsValue(pc));\r\n+        \r\n+        Iterator itr = map.entrySet().iterator();\r\n+        Map.Entry entry;\r\n+        int count = 0;\r\n+        for (; itr.hasNext(); count++) {\r\n+            entry = (Map.Entry) itr.next();\r\n+            if (entry.getKey().equals(\"key1\"))\r\n+                assertEquals(map1b, entry.getValue());\r\n+            else if (entry.getKey().equals(\"key3\"))\r\n+                assertEquals(map3, entry.getValue());\r\n+            else if (entry.getKey().equals(\"key5\"))\r\n+                assertEquals(map5, entry.getValue());\r\n+            else\r\n+                fail(\"Bad key: \" + entry.getKey());\r\n+        }\r\n+        assertEquals(3, count);\r\n+        //FIXME\r\n+        //KodoJDOHelper.close(itr);\r\n+    }\r\n+    \r\n+    public void testTransfer() {\r\n+        // cannot transfer an lrs from one field to another\r\n+        \r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n+        assertNotNull(map1);\r\n+        \r\n+        startTx(pm);\r\n+        Map map = pc.getRelMap();\r\n+        pc.setRelMap(null);\r\n+        map1.setRelMap(map);\r\n+        \r\n+        try {\r\n+            endTx(pm);\r\n+            fail(\"Allowed transfer of lrs field\");\r\n+        } catch (Exception jue) {\r\n+        }\r\n+        if (pm.getTransaction().isActive())\r\n+            pm.getTransaction().rollback();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testShare() {\r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        LRSPC map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n+        assertNotNull(map1);\r\n+        \r\n+        startTx(pm);\r\n+        Map map = pc.getRelMap();\r\n+        map1.setRelMap(map);\r\n+        endTx(pm);\r\n+        assertTrue(pc.getRelMap() != map1.getRelMap());\r\n+        assertEquals(3, map1.getRelMap().size());\r\n+        assertTrue(map1.getRelMap().containsValue(map1));\r\n+        pm.close();\r\n+        \r\n+        // make sure it sticks\r\n+        pm = getEm(true, true);\r\n+        pc = (LRSPC) pm.getObjectId(_oid);\r\n+        map1 = (LRSPC) pc.getRelMap().get(\"key1\");\r\n+        assertEquals(map1, map1.getRelMap().get(\"key1\"));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testRollback() {\r\n+        //FIXME\r\n+        //PersistenceManagerFactory factory = getPMFactory(new String[]{\r\n+        //    \"openjpa.RestoreMutableValues\", \"true\",\r\n+        //});\r\n+        OpenJPAEntityManagerFactory factory =null;\r\n+        OpenJPAEntityManager pm = factory.createEntityManager();\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        startTx(pm);\r\n+        pc.getStringCollection().remove(\"val2\");\r\n+        pc.getStringCollection().add(\"val4\");\r\n+        rollbackTx(pm);\r\n+        assertTrue(pc.getStringCollection().contains(\"val2\"));\r\n+        assertFalse(pc.getStringCollection().contains(\"val4\"));\r\n+        pm.close();\r\n+        factory.close();\r\n+    }\r\n+    \r\n+    public void testReplace() {\r\n+        OpenJPAEntityManager pm = getEm(false, false);\r\n+        startTx(pm);\r\n+        LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+        \r\n+        // totally replace set\r\n+        Collection set = new HashSet();\r\n+        set.add(\"new\");\r\n+        pc.setStringCollection(set);\r\n+        \r\n+        endTx(pm);\r\n+        pm.close();\r\n+        \r\n+        // re-retrieve and check set\r\n+        pm = getEm(false, false);\r\n+        pc = (LRSPC) pm.getObjectId(_oid);\r\n+        \r\n+        set = pc.getStringCollection();\r\n+        assertEquals(1, set.size());\r\n+        assertTrue(set.contains(\"new\"));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testAdd()\r\n+    throws Exception {\r\n+/*\r\n+        //FIXME\r\n+        //KodoPersistenceManagerFactory pmf = getPMFactory(new String []{\r\n+        //    \"openjpa.jdbc.JDBCListeners\", Listener.class.getName(),\r\n+        //});\r\n+        OpenJPAEntityManagerFactory pmf =null;\r\n+        JDBCConfiguration conf = (JDBCConfiguration) pmf.getConfiguration();\r\n+        //FIXME need to fix inner class\r\n+        //Listener l = (Listener) conf.getJDBCListenerInstances()[0];\r\n+        OpenJPAEntityManager pm = pmf.createEntityManager();\r\n+        try {\r\n+            startTx(pm);\r\n+            LRSPC pc = (LRSPC) pm.getObjectId(_oid);\r\n+            l.count = 0;\r\n+            pc.getStringCollection().add(\"testAddStringValue\");\r\n+            endTx(pm);\r\n+            assertEquals(3, l.count);\r\n+        } catch (Exception e) {\r\n+            if (pm.getTransaction().isActive())\r\n+                pm.getTransaction().rollback();\r\n+            throw e;\r\n+        } finally {\r\n+            pm.close();\r\n+        }\r\n+ */\r\n+    }\r\n+    \r\n+    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }\r\n+    \r\n+    //FIXME - could not find AbstractJDBCListener because of package imports in source file\r\n+/*\r\n+    public static class Listener extends AbstractJDBCListener {\r\n+ \r\n+        public int count = 0;\r\n+ \r\n+        public void afterExecuteStatement(JDBCEvent ev) {\r\n+            count++;\r\n+        }\r\n+    }\r\n+ */\r\n+}\r"},{"sha":"1b8eedca6c82dec51a0c6bb6958a5dae937c1c3a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestLocators.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,229 @@\n+/*\r\n+ * TestLocators.java\r\n+ *\r\n+ * Created on October 3, 2006, 4:37 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.OracleDictionary;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestLocators extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    private OpenJPAEntityManagerFactory pmf;\r\n+\r\n+    public TestLocators(String name) {\r\n+        super(name);\r\n+    }    \r\n+    \r\n+    /** Creates a new instance of TestLocators */\r\n+    public TestLocators() {\r\n+    }\r\n+    public void setUp() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        \r\n+        Extent e = pm.createExtent(LocatorTestObject.class, true);\r\n+        for (Iterator i = e.iterator(); i.hasNext();) {\r\n+            pm.remove(i.next());\r\n+            \r\n+        }\r\n+        endTx(pm);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        super.tearDown();\r\n+\r\n+       deleteAll(LocatorTestObject.class);\r\n+    }\r\n+\r\n+    public void testBLOBs() {\r\n+        doBlobTest(50000);\r\n+    }\r\n+\r\n+    public void testSmallBLOBs() {\r\n+        doBlobTest(50);\r\n+\r\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\r\n+            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+            JDBCConfiguration conf = (JDBCConfiguration)\r\n+                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n+            OracleDictionary dict = (OracleDictionary)\r\n+                conf.getDBDictionaryInstance();\r\n+\r\n+            int t = dict.maxEmbeddedBlobSize;\r\n+            doBlobTest(t - 1);\r\n+            doBlobTest(t);\r\n+            doBlobTest(t + 1);\r\n+        }\r\n+    }\r\n+\r\n+    public void doBlobTest(int size) {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        byte[] bytes = new byte[size];\r\n+        Arrays.fill(bytes, (byte) 'b');\r\n+        o.setBytes(bytes);\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        byte[] newbytes = o.getBytes();\r\n+        assertNotNull(newbytes);\r\n+        assertEquals(bytes.length, newbytes.length);\r\n+        for (int i = 0; i < bytes.length; i++) {\r\n+            assertEquals(bytes[i], newbytes[i]);\r\n+        }\r\n+    }\r\n+\r\n+    public void testShrinkBLOB() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        byte[] bytes = new byte[50000];\r\n+        Arrays.fill(bytes, (byte) 'b');\r\n+        o.setBytes(bytes);\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+\r\n+        startTx(pm);\r\n+        bytes = new byte[40000];\r\n+        Arrays.fill(bytes, (byte) 'c');\r\n+        o.setBytes(bytes);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        byte[] newbytes = o.getBytes();\r\n+        assertEquals(bytes.length, newbytes.length);\r\n+        for (int i = 0; i < bytes.length; i++) {\r\n+            assertEquals(bytes[i], newbytes[i]);\r\n+        }\r\n+    }\r\n+\r\n+    public void testCLOBs() {\r\n+        doClobTest(50000);\r\n+    }\r\n+\r\n+    public void testSmallCLOBs() {\r\n+        doClobTest(50);\r\n+\r\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.ORACLE) {\r\n+            OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+            JDBCConfiguration conf = (JDBCConfiguration)\r\n+                ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n+            OracleDictionary dict = (OracleDictionary)\r\n+                conf.getDBDictionaryInstance();\r\n+\r\n+            int t = dict.maxEmbeddedClobSize;\r\n+            doClobTest(t - 1);\r\n+            doClobTest(t);\r\n+            doClobTest(t + 1);\r\n+        }\r\n+    }\r\n+\r\n+    public void doClobTest(int size) {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        char[] chars = new char[size];\r\n+        Arrays.fill(chars, (char) 'c');\r\n+        o.setClobString(new String(chars));\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        char[] newchars = o.getClobString().toCharArray();\r\n+\r\n+        assertNotNull(newchars);\r\n+        assertEquals(chars.length, newchars.length);\r\n+        for (int i = 0; i < chars.length; i++) {\r\n+            assertEquals(chars[i], newchars[i]);\r\n+        }\r\n+    }\r\n+\r\n+    public void testShrinkCLOB() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);\r\n+        LocatorTestObject o = new LocatorTestObject();\r\n+        char[] chars = new char[50000];\r\n+        Arrays.fill(chars, (char) 'c');\r\n+        o.setClobString(new String(chars));\r\n+        pm.persist(o);\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+\r\n+        startTx(pm);\r\n+        chars = new char[40000];\r\n+        Arrays.fill(chars, (char) 'd');\r\n+        o.setClobString(new String(chars));\r\n+        endTx(pm);\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        o = (LocatorTestObject) pm.getObjectId(oid);\r\n+        char[] newchars = o.getClobString().toCharArray();\r\n+        assertEquals(chars.length, newchars.length);\r\n+        for (int i = 0; i < chars.length; i++) {\r\n+            assertEquals(chars[i], newchars[i]);\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"eca0fb46de8d3b76a8c432b7d2f44b79a1cfeb8f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMappedByKeyMaps.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,268 @@\n+/*\r\n+ * TestMappedByKeyMaps.java\r\n+ *\r\n+ * Created on October 4, 2006, 9:26 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapInverseKeyFieldStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationMapTableFieldStrategy;\r\n+import org.apache.openjpa.util.AbstractLRSProxyMap;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+\r\n+public class TestMappedByKeyMaps extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+    \r\n+    /** Creates a new instance of TestMappedByKeyMaps */\r\n+    public TestMappedByKeyMaps(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void testInverseKeyMapMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\r\n+                (InverseKeyMapPC.class, null, true);\r\n+        FieldMapping map = pc.getFieldMapping(\"helpers\");\r\n+        \r\n+        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\r\n+                (HelperPC.class, null, true);\r\n+        FieldMapping str = helper.getFieldMapping(\"stringField\");\r\n+        \r\n+        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\r\n+        assertEquals(str, map.getKey().getValueMappedByMetaData());\r\n+        assertTrue(map.getStrategy() instanceof\r\n+                RelationMapInverseKeyFieldStrategy);\r\n+        assertEquals(1, map.getKeyMapping().getColumns().length);\r\n+        assertEquals(map.getKeyMapping().getColumns()[0],\r\n+                str.getColumns()[0]);\r\n+    }\r\n+    \r\n+    public void testJoinTableMapMapping() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        ClassMapping pc = conf.getMappingRepositoryInstance().getMapping\r\n+                (JoinTableMapPC.class, null, true);\r\n+        FieldMapping map = pc.getFieldMapping(\"helpers\");\r\n+        \r\n+        ClassMapping helper = conf.getMappingRepositoryInstance().getMapping\r\n+                (HelperPC.class, null, true);\r\n+        FieldMapping str = helper.getFieldMapping(\"stringField\");\r\n+        \r\n+        assertEquals(\"stringField\", map.getKey().getValueMappedBy());\r\n+        assertEquals(str, map.getKey().getValueMappedByMetaData());\r\n+        assertTrue(map.getStrategy() instanceof RelationMapTableFieldStrategy);\r\n+        assertEquals(1, map.getKeyMapping().getColumns().length);\r\n+        assertEquals(map.getKeyMapping().getColumns()[0],\r\n+                str.getColumns()[0]);\r\n+    }\r\n+    \r\n+    public void testInverseKeyMap() {\r\n+        mappedByMap(new InverseKeyMapPC(), false);\r\n+        queryMap(new InverseKeyMapPC());\r\n+    }\r\n+    \r\n+    public void testInverseKeyLRSMap() {\r\n+        mappedByMap(new InverseKeyMapPC(), true);\r\n+    }\r\n+    \r\n+    public void testJoinTableMap() {\r\n+        mappedByMap(new JoinTableMapPC(), false);\r\n+        queryMap(new JoinTableMapPC());\r\n+    }\r\n+    \r\n+    public void testJoinTableLRSMap() {\r\n+        mappedByMap(new JoinTableMapPC(), true);\r\n+    }\r\n+    \r\n+    private void mappedByMap(MappedByMapPC pc, boolean lrs) {\r\n+       deleteAll(HelperPC.class);\r\n+       deleteAll(pc.getClass());\r\n+        \r\n+        HelperPC h1 = new HelperPC();\r\n+        h1.setStringField(\"h1\");\r\n+        pc.getHelpers().put(h1.getStringField(), h1);\r\n+        HelperPC h2 = new HelperPC();\r\n+        h2.setStringField(\"h2\");\r\n+        pc.getHelpers().put(h2.getStringField(), h2);\r\n+        HelperPC h3 = new HelperPC();\r\n+        h3.setStringField(\"h3\");\r\n+        pc.getHelpers().put(h3.getStringField(), h3);\r\n+        \r\n+        setLRS(pc.getClass(), lrs);\r\n+        try {\r\n+            OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+            startTx(pm);;\r\n+            pm.persist(pc);\r\n+            endTx(pm);;\r\n+            Object oid = pm.getObjectId(pc);\r\n+            \r\n+            assertFalse(pc.getHelpers().containsKey(\"foo\"));\r\n+            assertNull(pc.getHelpers().get(\"foo\"));\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertEquals(h1, pc.getHelpers().get(\"h1\"));\r\n+            assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n+            pm.close();\r\n+            \r\n+            pm = (OpenJPAEntityManager)currentEntityManager();;\r\n+            pc = (MappedByMapPC) pm.getObjectId(oid);\r\n+            if (lrs)\r\n+                assertTrue(pc.getHelpers() instanceof AbstractLRSProxyMap);\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"foo\"));\r\n+            assertNull(pc.getHelpers().get(\"foo\"));\r\n+            assertEquals(\"h1\", ((HelperPC) pc.getHelpers().get(\"h1\")).\r\n+                    getStringField());\r\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n+                    getStringField());\r\n+            \r\n+            pm.begin();\r\n+            pc.getHelpers().remove(\"h1\");\r\n+            assertEquals(2, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n+            assertNull(pc.getHelpers().get(\"h1\"));\r\n+            HelperPC h4 = new HelperPC();\r\n+            h4.setStringField(\"h4\");\r\n+            pc.getHelpers().put(\"h4\", h4);\r\n+            assertTrue(pc.getHelpers().containsKey(\"h4\"));\r\n+            assertEquals(h4, pc.getHelpers().get(\"h4\"));\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            pm.commit();\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n+            assertNull(pc.getHelpers().get(\"h1\"));\r\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n+                    getStringField());\r\n+            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\r\n+                    getStringField());\r\n+            pm.close();\r\n+            \r\n+            pm = (OpenJPAEntityManager)currentEntityManager();;\r\n+            pc = (MappedByMapPC) pm.getObjectId(oid);\r\n+            assertEquals(3, pc.getHelpers().size());\r\n+            assertFalse(pc.getHelpers().containsKey(\"h1\"));\r\n+            assertNull(pc.getHelpers().get(\"h1\"));\r\n+            assertEquals(\"h2\", ((HelperPC) pc.getHelpers().get(\"h2\")).\r\n+                    getStringField());\r\n+            assertEquals(\"h4\", ((HelperPC) pc.getHelpers().get(\"h4\")).\r\n+                    getStringField());\r\n+            \r\n+            // to test lrs functions\r\n+            assertTrue(pc.getHelpers().containsValue\r\n+                    (pc.getHelpers().get(\"h2\")));\r\n+            \r\n+            Set keySet = pc.getHelpers().keySet();\r\n+            Set ordered = new TreeSet();\r\n+            assertEquals(3, keySet.size());\r\n+            Iterator itr = keySet.iterator();\r\n+            while (itr.hasNext())\r\n+                ordered.add(itr.next());\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+            assertEquals(3, ordered.size());\r\n+            assertTrue(ordered.contains(\"h2\"));\r\n+            assertTrue(ordered.contains(\"h3\"));\r\n+            assertTrue(ordered.contains(\"h4\"));\r\n+            ordered.clear();\r\n+            \r\n+            Collection values = pc.getHelpers().values();\r\n+            assertEquals(3, values.size());\r\n+            itr = values.iterator();\r\n+            while (itr.hasNext()) {\r\n+                Object next = itr.next();\r\n+                assertTrue(next instanceof HelperPC);\r\n+                ordered.add(((HelperPC) next).getStringField());\r\n+            }\r\n+            //FIXME jthomas\r\n+            //KodoJDOHelper.close(itr);\r\n+            assertEquals(3, ordered.size());\r\n+            assertTrue(ordered.contains(\"h2\"));\r\n+            assertTrue(ordered.contains(\"h3\"));\r\n+            assertTrue(ordered.contains(\"h4\"));\r\n+            pm.close();\r\n+        } finally {\r\n+            unsetLRS(pc.getClass());\r\n+        }\r\n+    }\r\n+    \r\n+    private void queryMap(MappedByMapPC pc) {\r\n+        HelperPC h5 = new HelperPC();\r\n+        h5.setStringField(\"h5\");\r\n+        pc.getHelpers().put(\"h5\", h5);\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.begin();\r\n+        pm.persist(pc);\r\n+        pm.commit();\r\n+        pm.close();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();;\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"stringField == 'h2'\",HelperPC.class);\r\n+        //FIXME jthomas\r\n+        //q.setUnique(true);\r\n+        HelperPC h2 = (HelperPC) q.getSingleResult();\r\n+        \r\n+        q = pm.createNativeQuery(\"helpers.containsKey ('h2')\",pc.getClass());\r\n+        //FIXME jthomas\r\n+        //q.setUnique(true);\r\n+        pc = (MappedByMapPC) q.getSingleResult();\r\n+        assertEquals(3, pc.getHelpers().size());\r\n+        assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n+        \r\n+        q = pm.createNativeQuery(\"helpers.containsValue (:h2)\",pc.getClass());\r\n+        //FIXME  jthomas\r\n+        //q.setUnique(true);\r\n+        pc = (MappedByMapPC) q.getSingleResult();\r\n+        assertEquals(3, pc.getHelpers().size());\r\n+        assertEquals(h2, pc.getHelpers().get(\"h2\"));\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void setLRS(Class cls, boolean lrs) {\r\n+        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\r\n+                getMappingRepositoryInstance().getMapping(cls, null, true);\r\n+        cm.getFieldMapping(\"helpers\").setLRS(lrs);\r\n+    }\r\n+    \r\n+    private void unsetLRS(Class cls) {\r\n+        ClassMapping cm = ((JDBCConfiguration) getConfiguration()).\r\n+                getMappingRepositoryInstance().getMapping(cls, null, true);\r\n+        cm.getFieldMapping(\"helpers\").setLRS(false);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"a1b7db1e67bf1f937a336d3a6976bcf391decafd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMetaDataValueIndicator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,141 @@\n+/*\r\n+ * TestMetaDataValueIndicator.java\r\n+ *\r\n+ * Created on October 4, 2006, 1:35 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.SuperclassDiscriminatorStrategy;\r\n+import org.apache.openjpa.jdbc.meta.strats.ValueMapDiscriminatorStrategy;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestMetaDataValueIndicator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{    \r\n+    private OpenJPAEntityManager pm;\r\n+    \r\n+    private ClassMapping eMapping;\r\n+    private ClassMapping fMapping;\r\n+    \r\n+    public TestMetaDataValueIndicator(String str) {\r\n+        super(str);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestMetaDataValueIndicator */\r\n+    public TestMetaDataValueIndicator() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        // ### I hate that we have to do this\r\n+        Class c = MultiE.class;\r\n+        c = MultiF.class;\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        eMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n+                getMetaDataRepositoryInstance().getMetaData(MultiE.class,\r\n+                pm.getClassLoader(), true);\r\n+        fMapping = (ClassMapping) ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n+                getMetaDataRepositoryInstance().getMetaData(MultiF.class,\r\n+                pm.getClassLoader(), true);\r\n+    }\r\n+    \r\n+    public void tearDown()\r\n+    throws Exception {\r\n+        if (pm.getTransaction().isActive())\r\n+            pm.getTransaction().rollback();\r\n+        pm.close();\r\n+        super.tearDown();\r\n+    }\r\n+    \r\n+    public void testMetaData() {\r\n+        assertEquals(ValueMapDiscriminatorStrategy.class,\r\n+                eMapping.getDiscriminator().getStrategy().getClass());\r\n+        assertEquals(SuperclassDiscriminatorStrategy.class,\r\n+                fMapping.getDiscriminator().getStrategy().getClass());\r\n+    }\r\n+    \r\n+    public void testOperations() {\r\n+       deleteAll(MultiE.class);\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        \r\n+        MultiE e = new MultiE();\r\n+        e.setString0(\"foo\");\r\n+        pm.persist(e);\r\n+        \r\n+        MultiF f = new MultiF();\r\n+        f.setString0(\"bar\");\r\n+        pm.persist(f);\r\n+        \r\n+        pm.getTransaction().commit();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        /* Cant find equivalent of getExtent()\r\n+        assertEquals(2, countExtent(pm.getExtent(MultiE.class, true)));\r\n+        assertEquals(1, countExtent(pm.getExtent(MultiE.class, false)));\r\n+        assertEquals(1, countExtent(pm.getExtent(MultiF.class, true)));\r\n+        assertEquals(1, countExtent(pm.getExtent(MultiF.class, false)));\r\n+         \r\n+        Object oid = pm.getObjectId\r\n+            (pm.getExtent(MultiE.class, true).iterator().next());\r\n+         */\r\n+        //FIXME remove the next line once the above block is fixed\r\n+        Object oid =null;\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        assertNotNull(pm.getObjectId(oid));\r\n+        pm.close();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        assertNotNull(pm.getObjectId(oid));\r\n+    }\r\n+    \r\n+    private int countExtent(Extent e) {\r\n+        int count = 0;\r\n+        for (Iterator iter = e.iterator(); iter.hasNext();) {\r\n+            iter.next();\r\n+            count++;\r\n+        }\r\n+        return count;\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"480533cd50d5a3fbb03018acef6efd36a7c1a5b0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiDFG.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * TestMultiDFG.java\r\n+ *\r\n+ * Created on October 4, 2006, 1:50 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.transaction.Transaction;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestMultiDFG extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{    \r\n+    private Object boid;\r\n+    \r\n+    public TestMultiDFG(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestMultiDFG */\r\n+    public TestMultiDFG() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+        \r\n+       deleteAll(MultiB.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        EntityTransaction t = pm.getTransaction();\r\n+        t.begin();\r\n+        MultiB b = new MultiB();\r\n+        pm.persist(b);\r\n+        t.commit();\r\n+        boid = pm.getObjectId(b);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testDFG() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        MultiB b = (MultiB) pm.getObjectId(boid);\r\n+        \r\n+        // check the non-dfg fields\r\n+        OpenJPAStateManager sm = getStateManager(b, pm);\r\n+        FieldMetaData fmd = sm.getMetaData().getField(\"bString\");\r\n+        assertTrue(\"bString should not be loaded\",\r\n+                !sm.getLoaded().get(fmd.getIndex()));\r\n+        \r\n+        fmd = sm.getMetaData().getField(\"bInt\");\r\n+        assertTrue(\"bInt should not be loaded\",\r\n+                !sm.getLoaded().get(fmd.getIndex()));\r\n+        \r\n+        System.out.println(\"### getting values\");\r\n+        b.getBString();\r\n+        \r\n+        System.out.println(\"### getting values again\");\r\n+        b.getString0();\r\n+        b.getBString();\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"11b30d458bbb8373927561b00461e60eb61b1f01","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","status":"added","additions":237,"deletions":0,"changes":237,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableMappings.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,237 @@\n+/*\r\n+ * TestMultiTableMappings.java\r\n+ *\r\n+ * Created on October 4, 2006, 4:09 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.transaction.Transaction;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.jdbc.JDBCFetchPlan;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestMultiTableMappings extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n+    \r\n+\r\n+    private Object aoid;\r\n+    private Object boid;\r\n+    private Object coid;\r\n+    private Object doid;\r\n+    \r\n+    public TestMultiTableMappings(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestMultiTableMappings */\r\n+    public TestMultiTableMappings() {\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+       deleteAll(MultiA.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Collection os = new ArrayList();\r\n+        MultiA a = new MultiA();\r\n+        MultiB b = new MultiB();\r\n+        MultiC c = new MultiC();\r\n+        MultiD d = new MultiD();\r\n+        os.add(a);\r\n+        os.add(b);\r\n+        os.add(c);\r\n+        os.add(d);\r\n+        d.setA(new MultiA());\r\n+        os.add(new MultiD());\r\n+        d.setDString1(\"d string 1\");\r\n+        \r\n+        EntityTransaction t = pm.getTransaction();\r\n+        t.begin();\r\n+        pm.persistAll(os);\r\n+        t.commit();\r\n+        aoid = pm.getObjectId(a);\r\n+        boid = pm.getObjectId(b);\r\n+        coid = pm.getObjectId(c);\r\n+        doid = pm.getObjectId(d);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void XXXtestUpdates() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        Transaction t = pm.currentTransaction();\r\n+        try {\r\n+            for (int i = 0; i < 2; i++) {\r\n+                t.begin();\r\n+                changeA((MultiA) pm.getObjectById(aoid, i == 0));\r\n+                changeB((MultiB) pm.getObjectById(boid, i == 0));\r\n+                changeC((MultiC) pm.getObjectById(coid, i == 0));\r\n+                changeD((MultiD) pm.getObjectById(doid, i == 0));\r\n+                t.commit();\r\n+            }\r\n+        } finally {\r\n+            if (t.isActive()) {\r\n+                t.rollback();\r\n+            }\r\n+            pm.close();\r\n+        }\r\n+         */\r\n+    }\r\n+    \r\n+    public void XXXtestInserts() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        assertEquals(2,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiA.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(4,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiB.class, true)).execute()).size());\r\n+         \r\n+        assertEquals(1,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiB.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(1,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiC.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(2,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiD.class, false)).execute()).size());\r\n+         \r\n+        assertEquals(6,\r\n+                ((Collection) pm.newQuery\r\n+                (pm.getExtent(MultiA.class, true)).execute()).size());\r\n+         \r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+    public void XXXtestOneToOne() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        MultiD d = (MultiD) pm.getObjectById(doid, true);\r\n+        assertNotNull(d.getA());\r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+    public void XXXtestQueries() {\r\n+        //TEST DISABLED ... not converted\r\n+        /*\r\n+        PersistenceManager pm = getPM();\r\n+        Query q = pm.newQuery(pm.getExtent(MultiD.class, false),\r\n+                \"dString1 == \\\"d string 1\\\"\");\r\n+        //### this behaves like '\"\"': \"d string 1\");\r\n+        Collection c = (Collection) q.execute();\r\n+        assertEquals(1, c.size());\r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+    // ### more tests:\r\n+    // ### - horizontal with extent with subclass=false\r\n+    // ### - aggregates with horizontal, interface, this stuff,\r\n+    // ### - base A, vertical B extends A, virtual C extends B,\r\n+    // ###   vertical D extends C, vertical E extends C, flat F extends C\r\n+    \r\n+    public void testVerticalQueryModeQueries() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",MultiA.class);\r\n+        ((JDBCFetchPlan) q.getFetchPlan()).\r\n+                setSubclassFetchMode(JDBCFetchPlan.EAGER_PARALLEL);\r\n+        // we need ordering; otherwise kodo is smart enough to only run first\r\n+        // select until its results are exhausted\r\n+        \r\n+        //FIXME jthomas\r\n+        //q.setOrdering(\"string0 ascending\");\r\n+        sql.clear();\r\n+        assertEquals(sql.toString(), 0, sql.size());\r\n+        \r\n+        Collection c = (Collection) q.getCandidateCollection();\r\n+        \r\n+        // account for the select distinct\r\n+        if (((String) sql.get(0)).startsWith(\"SELECT DISTINCT\"))\r\n+            assertEquals(sql.toString(), 5, sql.size());\r\n+        else\r\n+            assertEquals(sql.toString(), 4, sql.size());\r\n+        sql.clear();\r\n+        \r\n+        assertEquals(6, c.size());\r\n+        \r\n+        // only check for counts sql if any was executed (some databases\r\n+        // might eagerly instantiate all the rows, such as pointbase)\r\n+        if (sql.size() != 0)\r\n+            assertEquals(sql.toString(), 4, sql.size()); // select counts\r\n+        sql.clear();\r\n+        \r\n+        // walk through the results. This will cause individual\r\n+        // objects to be loaded, and therefore the dfgs to be loaded,\r\n+        // and therefore any additional SQL to be executed.\r\n+        for (Iterator iter = c.iterator(); iter.hasNext();)\r\n+            iter.next();\r\n+        \r\n+        assertEquals(sql.toString(), 0, sql.size());\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    private void changeA(MultiA a) {\r\n+        a.setString0(a.getString0() + \" changed\");\r\n+        a.setInt0(a.getInt0() + 1);\r\n+    }\r\n+    \r\n+    private void changeB(MultiB b) {\r\n+        changeA(b);\r\n+        b.setBString(b.getBString() + \" changed\");\r\n+    }\r\n+    \r\n+    private void changeC(MultiC c) {\r\n+        changeB(c);\r\n+        c.setCString0(c.getCString0() + \" changed\");\r\n+    }\r\n+    \r\n+    private void changeD(MultiD d) {\r\n+        changeB(d);\r\n+        d.setDString0(d.getDString0() + \" changed\");\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"428f9f706f6a9fc4ff9d36898d7c1f13b26c9410","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestMultiTableSelfCollection.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,209 @@\n+/*\r\n+ * TestMultiTableSelfCollection.java\r\n+ *\r\n+ * Created on October 4, 2006, 2:35 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestMultiTableSelfCollection extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{    \r\n+    private Object a1oid;\r\n+    private Object a2oid;\r\n+    private Object a3oid;\r\n+    private Object a4oid;\r\n+    \r\n+    private Object c1oid;\r\n+    private Object c2oid;\r\n+    private Object c3oid;\r\n+    private Object c4oid;\r\n+    \r\n+    public TestMultiTableSelfCollection(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    /** Creates a new instance of TestMultiTableSelfCollection */\r\n+    public TestMultiTableSelfCollection() {\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(MultiA.class);\r\n+        \r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        \r\n+        Collection os = new ArrayList();\r\n+        MultiA a1 = new MultiA();\r\n+        MultiA a2 = new MultiA();\r\n+        MultiA a3 = new MultiA();\r\n+        MultiA a4 = new MultiA();\r\n+        MultiC c1 = new MultiC();\r\n+        MultiC c2 = new MultiC();\r\n+        MultiC c3 = new MultiC();\r\n+        MultiC c4 = new MultiC();\r\n+        os.add(a1);\r\n+        os.add(a2);\r\n+        os.add(a3);\r\n+        os.add(a4);\r\n+        os.add(c1);\r\n+        os.add(c2);\r\n+        os.add(c3);\r\n+        os.add(c4);\r\n+        \r\n+        c1.getMultiAs().add(a1);\r\n+        c1.getMultiAs().add(a2);\r\n+        a1.getMultiCs().add(c1);\r\n+        a2.getMultiCs().add(c1);\r\n+        \r\n+        c2.getMultiAs().add(a1);\r\n+        c2.getMultiAs().add(a2);\r\n+        a1.getMultiCs().add(c2);\r\n+        a2.getMultiCs().add(c2);\r\n+        \r\n+        c3.getMultiAs().add(a3);\r\n+        c3.getMultiAs().add(a4);\r\n+        a3.getMultiCs().add(c3);\r\n+        a4.getMultiCs().add(c3);\r\n+        \r\n+        c4.getMultiAs().add(a3);\r\n+        c4.getMultiAs().add(a4);\r\n+        a3.getMultiCs().add(c4);\r\n+        a4.getMultiCs().add(c4);\r\n+        \r\n+        pm.persistAll(os);\r\n+        pm.getTransaction().commit();\r\n+        \r\n+        a1oid = pm.getObjectId(a1);\r\n+        a2oid = pm.getObjectId(a2);\r\n+        a3oid = pm.getObjectId(a3);\r\n+        a4oid = pm.getObjectId(a4);\r\n+        \r\n+        c1oid = pm.getObjectId(c1);\r\n+        c2oid = pm.getObjectId(c2);\r\n+        c3oid = pm.getObjectId(c3);\r\n+        c4oid = pm.getObjectId(c4);\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testSelfCollections() {\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        // check that all the sets are the right size, and equal where\r\n+        // they should be.\r\n+        \r\n+        MultiA a1 = (MultiA) pm.getObjectId(a1oid);\r\n+        assertEquals(2, a1.getMultiCs().size());\r\n+        \r\n+        MultiA a2 = (MultiA) pm.getObjectId(a2oid);\r\n+        assertEquals(2, a2.getMultiCs().size());\r\n+        \r\n+        assertEquals(a1.getMultiCs(), a2.getMultiCs());\r\n+        \r\n+        MultiA a3 = (MultiA) pm.getObjectId(a3oid);\r\n+        assertEquals(2, a3.getMultiCs().size());\r\n+        \r\n+        MultiA a4 = (MultiA) pm.getObjectId(a4oid);\r\n+        assertEquals(2, a4.getMultiCs().size());\r\n+        \r\n+        assertEquals(a3.getMultiCs(), a4.getMultiCs());\r\n+        \r\n+        MultiC c1 = (MultiC) pm.getObjectId(c1oid);\r\n+        assertEquals(2, c1.getMultiAs().size());\r\n+        \r\n+        MultiC c2 = (MultiC) pm.getObjectId(c2oid);\r\n+        assertEquals(2, c2.getMultiAs().size());\r\n+        \r\n+        assertEquals(c1.getMultiAs(), c2.getMultiAs());\r\n+        \r\n+        MultiC c3 = (MultiC) pm.getObjectId(c3oid);\r\n+        assertEquals(2, c3.getMultiAs().size());\r\n+        \r\n+        MultiC c4 = (MultiC) pm.getObjectId(c4oid);\r\n+        assertEquals(2, c4.getMultiAs().size());\r\n+        \r\n+        assertEquals(c3.getMultiAs(), c4.getMultiAs());\r\n+        \r\n+        // check that all the sets contain the correct values, and\r\n+        // don't contain the wrong values. Probably don't need to do\r\n+        // the above check as well.\r\n+        \r\n+        assertTrue(a1.getMultiCs().contains(c1));\r\n+        assertTrue(a1.getMultiCs().contains(c2));\r\n+        assertTrue(!a1.getMultiCs().contains(c3));\r\n+        assertTrue(!a1.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(a2.getMultiCs().contains(c1));\r\n+        assertTrue(a2.getMultiCs().contains(c2));\r\n+        assertTrue(!a2.getMultiCs().contains(c3));\r\n+        assertTrue(!a2.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(!a3.getMultiCs().contains(c1));\r\n+        assertTrue(!a3.getMultiCs().contains(c2));\r\n+        assertTrue(a3.getMultiCs().contains(c3));\r\n+        assertTrue(a3.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(!a4.getMultiCs().contains(c1));\r\n+        assertTrue(!a4.getMultiCs().contains(c2));\r\n+        assertTrue(a4.getMultiCs().contains(c3));\r\n+        assertTrue(a4.getMultiCs().contains(c4));\r\n+        \r\n+        assertTrue(c1.getMultiAs().contains(a1));\r\n+        assertTrue(c1.getMultiAs().contains(a2));\r\n+        assertTrue(!c1.getMultiAs().contains(a3));\r\n+        assertTrue(!c1.getMultiAs().contains(a4));\r\n+        \r\n+        assertTrue(c2.getMultiAs().contains(a1));\r\n+        assertTrue(c2.getMultiAs().contains(a2));\r\n+        assertTrue(!c2.getMultiAs().contains(a3));\r\n+        assertTrue(!c2.getMultiAs().contains(a4));\r\n+        \r\n+        assertTrue(!c3.getMultiAs().contains(a1));\r\n+        assertTrue(!c3.getMultiAs().contains(a2));\r\n+        assertTrue(c3.getMultiAs().contains(a3));\r\n+        assertTrue(c3.getMultiAs().contains(a4));\r\n+        \r\n+        assertTrue(!c4.getMultiAs().contains(a1));\r\n+        assertTrue(!c4.getMultiAs().contains(a2));\r\n+        assertTrue(c4.getMultiAs().contains(a3));\r\n+        assertTrue(c4.getMultiAs().contains(a4));\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"14b412d21aa584ea20a9e31b0ecab549e6a1d946","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestNoClassColumn.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,68 @@\n+/*\r\n+ * TestNoClassColumn.java\r\n+ *\r\n+ * Created on October 4, 2006, 2:44 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestNoClassColumn extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    /** Creates a new instance of TestNoClassColumn */\r\n+    public TestNoClassColumn() {\r\n+    }\r\n+\r\n+    public TestNoClassColumn(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",NoClassColumn.class);\r\n+        //FIXME jthomas\r\n+        //q.declareParameters(\"java.lang.String input\");\r\n+        //q.setFilter(\"test==input\");\r\n+        Map params = new HashMap();\r\n+        params.put(\"input\", \"blah\");\r\n+        //FIXME jthomas\r\n+        //Collection c = (Collection) q.executeWithMap(params);\r\n+        pm.close();\r\n+    }    \r\n+    \r\n+}\r"},{"sha":"bfc6a7d2690b75b6ace7d9e5f4b68af03064f62a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestRawField.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * TestRawField.java\r\n+ *\r\n+ * Created on October 4, 2006, 2:57 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestRawField extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    /** Creates a new instance of TestRawField */\r\n+    public TestRawField(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(RawField.class);\r\n+    }\r\n+\r\n+    public void testRaw() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        RawField pc = new RawField();\r\n+        pc.setString(\"BAR\");\r\n+        pm.persist(pc);\r\n+        Object oid = pm.getObjectId(pc);\r\n+\r\n+        // batching?\r\n+        pc = new RawField();\r\n+        pc.setString(\"GOO\");\r\n+        pm.persist(pc);\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (RawField) pm.getObjectId(oid);\r\n+        assertEquals(pc.getString(), \"BARFOO\", pc.getString());\r\n+        pm.close();\r\n+    }    \r\n+}\r"},{"sha":"3e3a0e301bd12c954c1fd30901dfa961a2087df0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","status":"added","additions":241,"deletions":0,"changes":241,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/TestStateImage.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,241 @@\n+/*\r\n+ * TestStateImage.java\r\n+ *\r\n+ * Created on October 4, 2006, 3:09 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestStateImage extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n+    private Object _oid = null;\r\n+    \r\n+    /** Creates a new instance of TestStateImage */\r\n+    public TestStateImage() {\r\n+    }\r\n+    public TestStateImage(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    \r\n+    public void setUpTestCase() {\r\n+       deleteAll(StateImagePC2.class);\r\n+       deleteAll(StateImagePC3.class);\r\n+        \r\n+        StateImagePC2 pc = new StateImagePC2();\r\n+        pc.setStringField(\"string1\");\r\n+        pc.setIntField(1);\r\n+        StateImagePC2 pc2 = new StateImagePC2();\r\n+        pc2.setStringField(\"string2\");\r\n+        pc2.setIntField(2);\r\n+        pc.setStateImage(pc2);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        pm.persist(pc);\r\n+        _oid = pm.getObjectId(pc);\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testOptLock() {\r\n+        OpenJPAEntityManager pm1 = getEm(true, true);\r\n+        OpenJPAEntityManager pm2 = getEm(true, true);\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pm2.getTransaction().begin();\r\n+        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\r\n+        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\r\n+        \r\n+        pc1.setIntField(3);\r\n+        pc1.setStateImage(null);\r\n+        \r\n+        pc2.setIntField(4);\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pc2.setIntField(4);\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+        \r\n+        // make sure the next transaction works too\r\n+        pm2.getTransaction().begin();\r\n+        pc2.setIntField(5);\r\n+        pm2.getTransaction().commit();\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pm1.refresh(pc1);\r\n+        pc1.setIntField(6);\r\n+        \r\n+        pm2.getTransaction().begin();\r\n+        pc2.setIntField(7);\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pc2.setIntField(7);\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+        pm1.close();\r\n+        pm2.close();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\r\n+        assertNull(pc.getStateImage());\r\n+        assertEquals(7, pc.getIntField());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * This currently isn't working: state-image locking will not\r\n+     * detect when someone else updated the row before deleting.\r\n+     */\r\n+    public void NOTWORKINGtestOptLockWithDelete() {\r\n+        OpenJPAEntityManager pm1 = getEm(true, true);\r\n+        StateImagePC2 pc1 = (StateImagePC2) pm1.getObjectId(_oid);\r\n+        \r\n+        OpenJPAEntityManager pm2 = getEm(true, true);\r\n+        StateImagePC2 pc2 = (StateImagePC2) pm2.getObjectId(_oid);\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pc1.setIntField(3);\r\n+        \r\n+        pm2.getTransaction().begin();\r\n+        pm2.remove(pc2);\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pm2.remove(pc2);\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+    }\r\n+    \r\n+    public void testOptLockOnVerticalClass() {\r\n+        OpenJPAEntityManager pm1 = getEm(true, true);\r\n+        OpenJPAEntityManager pm2 = getEm(true, true);\r\n+        \r\n+        // have to load via query or extent where we're selecting the vertical\r\n+        // field in the initial SELECT\r\n+        OpenJPAQuery q1 = pm1.createNativeQuery(\"\",StateImagePC2.class);\r\n+        //FIXME  jthomas\r\n+        //q1.setOrdering(\"intField ascending\");\r\n+        StateImagePC2 pc1 = (StateImagePC2) ((Collection) q1.getCandidateCollection()).\r\n+                iterator().next();\r\n+        q1.closeAll();\r\n+        \r\n+        OpenJPAQuery q2 = pm2.createNativeQuery(\"\",StateImagePC2.class);\r\n+        //FIXME jthomas\r\n+        //q2.setOrdering(\"intField ascending\");\r\n+        StateImagePC2 pc2 = (StateImagePC2) ((Collection) q2.getCandidateCollection()).\r\n+                iterator().next();\r\n+        q2.closeAll();\r\n+        \r\n+        pm1.getTransaction().begin();\r\n+        pc1.setStringField(\"changed1\");\r\n+        pc1.setStateImage(null);\r\n+        \r\n+        pm2.getTransaction().begin();\r\n+        pc2.setStringField(\"changed2\");\r\n+        \r\n+        pm1.getTransaction().commit();\r\n+        \r\n+        try {\r\n+            pm2.getTransaction().commit();\r\n+            fail(\"Should have caused OL exception.\");\r\n+        } catch (Exception jfe) {\r\n+            pm2.getTransaction().begin();\r\n+            pm2.refresh(pc2);\r\n+            pc2.setStringField(\"changed2\");\r\n+            pm2.getTransaction().commit();\r\n+        }\r\n+        pm1.close();\r\n+        pm2.close();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        StateImagePC2 pc = (StateImagePC2) pm.getObjectId(_oid);\r\n+        assertNull(pc.getStateImage());\r\n+        assertEquals(\"changed2\", pc.getStringField());\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testLockGroup()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        pm.getTransaction().begin();\r\n+        StateImagePC3 pc = new StateImagePC3();\r\n+        pc.setLockField(4);\r\n+        pc.setNoLockField(6);\r\n+        pm.persist(pc);\r\n+        pm.getTransaction().commit();\r\n+        \r\n+        pm.getTransaction().begin();\r\n+        pc.setLockField(6);\r\n+        sql.clear();\r\n+        pm.getTransaction().commit();\r\n+        assertNotSQL(\"* WHERE * NOLOCK*\");\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        \r\n+        //FIXME\r\n+        //main(TestStateImage.class);\r\n+    }\r\n+    private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues){\r\n+        OpenJPAEntityManager em = currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }\r\n+}\r"},{"sha":"fd19552fb53ecf512af4b5464d69eb82fff842e5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestLockGroupsWithHorizontalBaseType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.horizontal;\r\n+\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestLockGroupsWithHorizontalBaseType extends AbstractTestCase\r\n+{   \r\n+    /** Creates a new instance of TestLockGroupsWithHorizontalBaseType */\r\n+    public TestLockGroupsWithHorizontalBaseType(String name) \r\n+    {\r\n+    \tsuper(name, \"jdbccactusapp\");\r\n+    }\r\n+\r\n+\r\n+    public void setUp() {\r\n+       deleteAll(LockGroupSubclass.class);\r\n+    }\r\n+\r\n+    public void testHorizontalLockGroup() {\r\n+        LockGroupSubclass pc = new LockGroupSubclass();\r\n+        pc.setDefaultLockGroupField(\"foo\");\r\n+        pc.setNonDefaultLockGroupField(\"bar\");\r\n+        OpenJPAEntityManager pm = getEm(true, true);\r\n+        pm.getTransaction().begin();\r\n+        pm.persist(pc);\r\n+        pm.getTransaction().commit();\r\n+        pm.getTransaction().begin();\r\n+\r\n+        Object oid = pm.getObjectId(pc);\r\n+\r\n+        OpenJPAEntityManager  pm2 = getEm(true, true);\r\n+        LockGroupSubclass pc2 = (LockGroupSubclass) pm2.getObjectId(oid);\r\n+        pm2.getTransaction().begin();\r\n+        pc2.setNonDefaultLockGroupField(\"baz\");\r\n+        pm2.getTransaction().commit();\r\n+\r\n+        pc.setDefaultLockGroupField(\"wookie\");\r\n+        pm.getTransaction().commit();\r\n+    }    \r\n+    \r\n+   private OpenJPAEntityManager getEm(boolean optimistic,boolean retainValues) {\r\n+        OpenJPAEntityManager em = (OpenJPAEntityManager)currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }    \r\n+    \r\n+}\r"},{"sha":"40ec5d3c85cb3354945db6fc2460329fe02fbd35","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/horizontal/TestQueryAgainstEntireMappedHierarchy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * TestQueryAgainstEntireMappedHierarchy.java\r\n+ *\r\n+ * Created on October 5, 2006, 10:46 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.horizontal;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestQueryAgainstEntireMappedHierarchy extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase\r\n+{\r\n+\t\r\n+    /** Creates a new instance of TestQueryAgainstEntireMappedHierarchy */\r\n+    public TestQueryAgainstEntireMappedHierarchy(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void setUpTestCase() \r\n+    {        \r\n+        // this test depends on this fact\r\n+        assertTrue(HorizJ.class.getSuperclass() == HorizD.class);\r\n+        assertTrue(HorizK.class.getSuperclass() == HorizJ.class);\r\n+\r\n+       deleteAll(HorizD.class);\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+\r\n+        HorizD d = new HorizD();\r\n+        d.setStringA(\"stringa-d\");\r\n+        d.setStringC(\"stringc-d\");\r\n+        pm.persist(d);\r\n+\r\n+        HorizJ j = new HorizJ();\r\n+        j.setStringA(\"stringa-j\");\r\n+        j.setStringC(\"stringc-j\");\r\n+        pm.persist(j);\r\n+\r\n+        HorizK k = new HorizK();\r\n+        k.setStringA(\"stringa-k\");\r\n+        k.setStringC(\"stringc-k\");\r\n+        pm.persist(k);\r\n+\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testQueryAgainstEntireMappedHierarchy() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        sql.clear();\r\n+        //FIXME jthomas\r\n+        //pm.newQuery(HorizD.class).execute();\r\n+        String lastStatement = (String) sql.get(sql.size() - 1);\r\n+        assertTrue(lastStatement.toLowerCase().indexOf(\"in (\") == -1);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"fe547e0a45c74959664cb2fa8d91e25370e644d8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/tableperclass/TestUnionPlaceholderTypes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,123 @@\n+/*\r\n+ * TestUnionPlaceholderTypes.java\r\n+ *\r\n+ * Created on October 5, 2006, 2:04 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.tableperclass;\r\n+\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.SQLFactory;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestUnionPlaceholderTypes extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase {\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestUnionPlaceholderTypes */\r\n+    public TestUnionPlaceholderTypes(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+\r\n+    private boolean _union = false;\r\n+\r\n+    public void setUpTestCase() {\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        //FIXME jthomas\r\n+        //_union = ((SQLFactory) conf.getSQLFactoryInstance()).getAdvancedSQL().getSupportsUnion();\r\n+    }\r\n+\r\n+    public void testUnion()\r\n+        throws Exception {\r\n+       deleteAll(PlaceholderTypesA.class);\r\n+\r\n+        PlaceholderTypesA pta = new PlaceholderTypesA();\r\n+        pta.setIntA(1);\r\n+        PlaceholderTypesB ptb = new PlaceholderTypesB();\r\n+        ptb.setIntA(2);\r\n+        ptb.setIntB(3);\r\n+        ptb.setBooleanB(true);\r\n+        ptb.setByteB((byte) 64);\r\n+        ptb.setCharB('a');\r\n+        ptb.setFloatB(99.9F);\r\n+        ptb.setStringB(\"stringB\");\r\n+        ptb.setClobB(\"clobB\");\r\n+        ptb.setBlobB(\"blobB\");\r\n+\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        broker.persist(pta, null);\r\n+        broker.persist(ptb, null);\r\n+        broker.commit();\r\n+        Object oida = broker.getObjectId(pta);\r\n+        long idb = ((Id) broker.getObjectId(ptb)).getId();\r\n+        broker.close();\r\n+\r\n+        broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        sql.clear();\r\n+        pta = (PlaceholderTypesA) broker.find(oida, true, null);\r\n+        assertEquals(1, pta.getIntA());\r\n+        if (_union)\r\n+            assertEquals(1, sql.size());\r\n+        else\r\n+            assertNotSQL(\"UNION\");\r\n+        broker.close();\r\n+\r\n+        broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        sql.clear();\r\n+        ptb = (PlaceholderTypesB) broker.find(broker.newObjectId\r\n+            (PlaceholderTypesB.class, new Long(idb)), true, null);\r\n+        assertEquals(2, ptb.getIntA());\r\n+        assertEquals(3, ptb.getIntB());\r\n+        assertTrue(ptb.getBooleanB());\r\n+        assertEquals(64, ptb.getByteB());\r\n+        assertEquals('a', ptb.getCharB());\r\n+        assertEquals(99.9F, ptb.getFloatB(), .001);\r\n+        assertEquals(\"stringB\", ptb.getStringB());\r\n+        assertEquals(\"clobB\", ptb.getClobB());\r\n+        assertEquals(\"blobB\", ptb.getBlobB());\r\n+        if (_union)\r\n+            assertEquals(1, sql.size());\r\n+        else\r\n+            assertNotSQL(\"UNION\");\r\n+        broker.close();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"02c4312ee5da9a0d0a8e0ca8171b0fbdab5dc429","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","status":"added","additions":221,"deletions":0,"changes":221,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestJoinSubclasses.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,221 @@\n+/*\r\n+ * TestJoinSubclasses.java\r\n+ *\r\n+ * Created on October 5, 2006, 2:17 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestJoinSubclasses\r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+     \r\n+    /** Creates a new instance of TestJoinSubclasses */\r\n+    public TestJoinSubclasses(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    \r\n+    private String _outer = \"OUTER\";\r\n+    private Object _base = null;\r\n+    private Object _baseSubFlat = null;\r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME\r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+                joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+        \r\n+       deleteAll(JoinSubclassBase.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        JoinSubclassBase base = new JoinSubclassBase();\r\n+        base.setBaseField(1);\r\n+        pm.persist(base);\r\n+        \r\n+        JoinSubclassBaseSubVert sub1 = new JoinSubclassBaseSubVert();\r\n+        sub1.setBaseField(2);\r\n+        sub1.setBaseSubVertField(3);\r\n+        pm.persist(sub1);\r\n+        \r\n+        JoinSubclassBaseSubFlat sub2 = new JoinSubclassBaseSubFlat();\r\n+        sub2.setBaseField(3);\r\n+        sub2.setBaseSubVertField(4);\r\n+        sub2.setBaseSubFlatField(5);\r\n+        pm.persist(sub2);\r\n+        \r\n+        endTx(pm);;\r\n+        _base = pm.getObjectId(base);\r\n+        _baseSubFlat = pm.getObjectId(sub2);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testBaseExtentNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(JoinSubclassBase.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        JoinSubclassBase pc = (JoinSubclassBase) itr.next();\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(JoinSubclassBase.class, pc.getClass());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBaseExtentWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(JoinSubclassBase.class, true);\r\n+        Collection pcs = new TreeSet(((Extent) extent).list());\r\n+        assertEquals(3, pcs.size());\r\n+        Iterator itr = pcs.iterator();\r\n+        for (int i = 0; i < 2; i++) {\r\n+            JoinSubclassBase pc = (JoinSubclassBase) itr.next();\r\n+            assertEquals(i + 1, pc.getBaseField());\r\n+            switch (i) {\r\n+                case 0:\r\n+                    assertEquals(JoinSubclassBase.class, pc.getClass());\r\n+                    break;\r\n+                case 1:\r\n+                    assertEquals(JoinSubclassBaseSubVert.class, pc.getClass());\r\n+                    assertEquals(i + 2, ((JoinSubclassBaseSubVert) pc).\r\n+                            getBaseSubVertField());\r\n+                    break;\r\n+                case 2:\r\n+                    assertEquals(JoinSubclassBaseSubFlat.class, pc.getClass());\r\n+                    assertEquals(i + 2, ((JoinSubclassBaseSubFlat) pc).\r\n+                            getBaseSubVertField());\r\n+                    assertEquals(i + 3, ((JoinSubclassBaseSubFlat) pc).\r\n+                            getBaseSubFlatField());\r\n+                    break;\r\n+            }\r\n+        }\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafExtent()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(JoinSubclassBaseSubFlat.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat) itr.next();\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSubVertField());\r\n+        assertEquals(5, pc.getBaseSubFlatField());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBaseGetById()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        JoinSubclassBase pc = (JoinSubclassBase) pm.getObjectId(_base);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(JoinSubclassBase.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with non-exact id\r\n+        Id oid = new Id(JoinSubclassBase.class, ((Id) _base).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (JoinSubclassBase) pm.getObjectId(oid);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafGetById()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        JoinSubclassBaseSubFlat pc = (JoinSubclassBaseSubFlat)\r\n+        pm.getObjectId(_baseSubFlat);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSubVertField());\r\n+        assertEquals(5, pc.getBaseSubFlatField());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with non-exact id\r\n+        Id oid = new Id(JoinSubclassBase.class, ((Id) _baseSubFlat).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (JoinSubclassBaseSubFlat) pm.getObjectId(oid);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSubVertField());\r\n+        assertEquals(5, pc.getBaseSubFlatField());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"efb25ce4bb74f42bf4b47e18c2d17a186058a718","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","status":"added","additions":287,"deletions":0,"changes":287,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinExtent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,287 @@\n+/*\r\n+ * TestSubclassJoinExtent.java\r\n+ *\r\n+ * Created on October 5, 2006, 3:41 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+import java.util.*;\r\n+\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSubclassJoinExtent\r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+   \r\n+    private String _outer = \"OUTER\";\r\n+    \r\n+    /** Creates a new instance of TestSubclassJoinExtent */\r\n+    public TestSubclassJoinExtent(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME\r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+        // make sure all classes are registered\r\n+        Class[] reg = new Class[]{\r\n+            Base.class, BaseSub1.class, BaseSub2.class,\r\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n+        };\r\n+        \r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+                joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+        \r\n+       deleteAll(Base.class);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        Base base = new Base();\r\n+        base.setBaseField(1);\r\n+        pm.persist(base);\r\n+        \r\n+        BaseSub1 sub1 = new BaseSub1();\r\n+        sub1.setBaseField(2);\r\n+        sub1.setBaseSub1Field(3);\r\n+        pm.persist(sub1);\r\n+        \r\n+        BaseSub2 sub2 = new BaseSub2();\r\n+        sub2.setBaseField(3);\r\n+        sub2.setBaseSub2Field(4);\r\n+        pm.persist(sub2);\r\n+        \r\n+        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\r\n+        sub1sub2.setBaseField(4);\r\n+        sub1sub2.setBaseSub1Field(5);\r\n+        sub1sub2.setBaseSub1Sub2Field(6);\r\n+        pm.persist(sub1sub2);\r\n+        \r\n+        endTx(pm);;\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testBaseNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(Base.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Base pc = (Base) itr.next();\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(Base.class, pc.getClass());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBaseWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(Base.class, true);\r\n+        Collection pcs = new TreeSet(((Extent) extent).list());\r\n+        assertEquals(4, pcs.size());\r\n+        Iterator itr = pcs.iterator();\r\n+        for (int i = 0; i < 4; i++) {\r\n+            Base pc = (Base) itr.next();\r\n+            assertEquals(i + 1, pc.getBaseField());\r\n+            switch (i) {\r\n+                case 0:\r\n+                    assertEquals(Base.class, pc.getClass());\r\n+                    break;\r\n+                case 1:\r\n+                    assertEquals(BaseSub1.class, pc.getClass());\r\n+                    break;\r\n+                case 2:\r\n+                    assertEquals(BaseSub2.class, pc.getClass());\r\n+                    break;\r\n+                case 3:\r\n+                    assertEquals(BaseSub1Sub2.class, pc.getClass());\r\n+                    break;\r\n+            }\r\n+        }\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testEmptyNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub1.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testEmptyWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub1.class, true);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub2.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1Sub2.class, true);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub1Sub2 pc = (BaseSub1Sub2) itr.next();\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafNoSubs2()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub2.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub2 pc = (BaseSub2) itr.next();\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeafWithSubs2()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub2.class, true);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub2 pc = (BaseSub2) itr.next();\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testMidNoSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1.class, false);\r\n+        Iterator itr = extent.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        BaseSub1 pc = (BaseSub1) itr.next();\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        assertTrue(!itr.hasNext());\r\n+        extent.closeAll();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testMidWithSubs()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Extent extent = pm.createExtent(BaseSub1.class, true);\r\n+        Collection pcs = new TreeSet(((Extent) extent).list());\r\n+        assertEquals(2, pcs.size());\r\n+        Iterator itr = pcs.iterator();\r\n+        BaseSub1 pc = (BaseSub1) itr.next();\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        pc = (BaseSub1) itr.next();\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1Sub2.class, pc.getClass());\r\n+        assertEquals(6, ((BaseSub1Sub2) pc).getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"bdd2973fb17764067c9833cf3ba35dc67b94e158","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinGetObjectById.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,229 @@\n+/*\r\n+ * TestSubclassJoinGetObjectById.java\r\n+ *\r\n+ * Created on October 5, 2006, 3:55 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.util.Id;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSubclassJoinGetObjectById\r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+    \r\n+\r\n+    private String _outer = \"OUTER\";\r\n+    \r\n+    /** Creates a new instance of TestSubclassJoinGetObjectById */\r\n+    public TestSubclassJoinGetObjectById(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME\r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+    \r\n+    public void setUpTestCase() {\r\n+        // make sure all classes are registered\r\n+        Class[] reg = new Class[]{\r\n+            Base.class, BaseSub1.class, BaseSub2.class,\r\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n+        };\r\n+        \r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+                joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+        \r\n+       deleteAll(Base.class);\r\n+    }\r\n+    \r\n+    public void testBase()\r\n+    throws Exception {\r\n+        Base pc = new Base();\r\n+        pc.setBaseField(1);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        pc = (Base) pm.getObjectId(oid);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(Base.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with non-exact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (Base) pm.getObjectId(oid);\r\n+        assertEquals(1, pc.getBaseField());\r\n+        assertEquals(Base.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testBadId()\r\n+    throws Exception {\r\n+        Base pc = new Base();\r\n+        pc.setBaseField(1);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        Id id = new Id(Base.class, -1);\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        try {\r\n+            pm.getObjectId(id);\r\n+            fail(\"No exception on bad id.\");\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testLeaf()\r\n+    throws Exception {\r\n+        BaseSub1Sub2 pc = new BaseSub1Sub2();\r\n+        pc.setBaseField(4);\r\n+        pc.setBaseSub1Field(5);\r\n+        pc.setBaseSub1Sub2Field(6);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1Sub2) pm.getObjectId(oid);\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with inexact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1Sub2) pm.getObjectId(oid);\r\n+        assertEquals(4, pc.getBaseField());\r\n+        assertEquals(5, pc.getBaseSub1Field());\r\n+        assertEquals(6, pc.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testLeaf2()\r\n+    throws Exception {\r\n+        BaseSub2 pc = new BaseSub2();\r\n+        pc.setBaseField(3);\r\n+        pc.setBaseSub2Field(4);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub2) pm.getObjectId(oid);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with inexact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub2) pm.getObjectId(oid);\r\n+        assertEquals(3, pc.getBaseField());\r\n+        assertEquals(4, pc.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    public void testMid()\r\n+    throws Exception {\r\n+        BaseSub1 pc = new BaseSub1();\r\n+        pc.setBaseField(2);\r\n+        pc.setBaseSub1Field(3);\r\n+        Object oid = persist(pc);\r\n+        sql.clear();\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1) pm.getObjectId(oid);\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+        \r\n+        // should outer join with inexact oid\r\n+        oid = new Id(Base.class, ((Id) oid).getId());\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        pc = (BaseSub1) pm.getObjectId(oid);\r\n+        assertEquals(2, pc.getBaseField());\r\n+        assertEquals(3, pc.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, pc.getClass());\r\n+        pm.close();\r\n+        \r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+}\r"},{"sha":"cd9ca25e4a5beb13c8d30d5bb2d05d8fe94ad925","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","status":"added","additions":466,"deletions":0,"changes":466,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/meta/vertical/TestSubclassJoinRelations.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,466 @@\n+/*\r\n+ * TestSubclassJoinRelations.java\r\n+ *\r\n+ * Created on October 5, 2006, 4:28 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.meta.vertical;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.sql.Join;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSubclassJoinRelations extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase \r\n+{\r\n+    private String _outer = \"OUTER\";\r\n+    private Object _oid = null;\r\n+    \r\n+    /** Creates a new instance of TestSubclassJoinRelations */\r\n+    public TestSubclassJoinRelations(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public boolean skipTest() {\r\n+        //FIXME \r\n+        /*\r\n+        return super.skipTest()\r\n+            || ((JDBCConfiguration) getConfiguration()).\r\n+            getDBDictionaryInstance().joinSyntax == Join.SYNTAX_TRADITIONAL;\r\n+         */\r\n+        return false;\r\n+    }\r\n+\r\n+    public void setUpTestCase() {\r\n+        // make sure all classes are registered\r\n+        Class[] reg = new Class[]{\r\n+            Base.class, BaseSub1.class, BaseSub2.class,\r\n+            BaseSub1Sub1.class, BaseSub1Sub2.class,\r\n+        };\r\n+\r\n+        if (((JDBCConfiguration) getConfiguration()).getDBDictionaryInstance().\r\n+            joinSyntax == Join.SYNTAX_DATABASE)\r\n+            _outer = \"(+)\";\r\n+\r\n+       deleteAll(Relations.class);\r\n+       deleteAll(Base.class);\r\n+\r\n+        Relations rel = new Relations();\r\n+        BaseSub2 sub2 = new BaseSub2();\r\n+        sub2.setBaseField(3);\r\n+        sub2.setBaseSub2Field(4);\r\n+        rel.setBase(sub2);\r\n+\r\n+        BaseSub1 sub1 = new BaseSub1();\r\n+        sub1.setBaseField(2);\r\n+        sub1.setBaseSub1Field(3);\r\n+        rel.setBaseSub1(sub1);\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = new BaseSub1Sub2();\r\n+        sub1sub2.setBaseField(4);\r\n+        sub1sub2.setBaseSub1Field(5);\r\n+        sub1sub2.setBaseSub1Sub2Field(6);\r\n+        rel.setBaseSub1Sub2(sub1sub2);\r\n+\r\n+        Base base = new Base();\r\n+        base.setBaseField(1);\r\n+        rel.getBaseList().add(base);\r\n+        rel.getBaseList().add(sub2);\r\n+\r\n+        rel.getBaseSub1List().add(sub1);\r\n+        rel.getBaseSub1List().add(sub1sub2);\r\n+\r\n+        rel.getBaseSub1Sub2List().add(sub1sub2);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(rel);\r\n+        endTx(pm);;\r\n+        _oid = pm.getObjectId(rel);\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNullOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertNull(rel.getNullBase());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testEagerNullOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"nullBase\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertNull(rel.getNullBase());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testEmptyBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertEquals(0, rel.getEmptyBaseList().size());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerEmptyBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"emptyBaseList\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        assertEquals(0, rel.getEmptyBaseList().size());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testBaseOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub2 sub2 = (BaseSub2) rel.getBase();\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(sql.toString(), 1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerBaseOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"base\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub2 sub2 = (BaseSub2) rel.getBase();\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testLeafOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerLeafOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) rel.getBaseSub1Sub2();\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testMidOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerMidOneOne()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        BaseSub1 sub1 = (BaseSub1) rel.getBaseSub1();\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseList();\r\n+        assertEquals(2, list.size());\r\n+        Base base = (Base) list.get(0);\r\n+        assertEquals(1, base.getBaseField());\r\n+        assertEquals(Base.class, base.getClass());\r\n+        BaseSub2 sub2 = (BaseSub2) list.get(1);\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerBaseList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseList\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseList();\r\n+        assertEquals(2, list.size());\r\n+        Base base = (Base) list.get(0);\r\n+        assertEquals(1, base.getBaseField());\r\n+        assertEquals(Base.class, base.getClass());\r\n+        BaseSub2 sub2 = (BaseSub2) list.get(1);\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testLeafList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1Sub2List();\r\n+        assertEquals(1, list.size());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerLeafList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1Sub2List\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(2, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1Sub2List();\r\n+        assertEquals(1, list.size());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(0);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testMidList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertNotSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1List();\r\n+        assertEquals(2, list.size());\r\n+        BaseSub1 sub1 = (BaseSub1) list.get(0);\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }\r\n+\r\n+    public void testEagerMidList()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getFetchPlan().addFetchGroup(\"baseSub1List\");\r\n+        Relations rel = (Relations) pm.getObjectId(_oid);\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+        sql.clear();\r\n+\r\n+        List list = rel.getBaseSub1List();\r\n+        assertEquals(2, list.size());\r\n+        BaseSub1 sub1 = (BaseSub1) list.get(0);\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) list.get(1);\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(0, sql.size());\r\n+    }\r\n+\r\n+    public void testProjections()\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"\",Relations.class);\r\n+        //FIXME jthomas\r\n+        /*\r\n+        q.setResult(\"base, baseSub1, baseSub1Sub2\");\r\n+        q.setUnique(true);\r\n+        Object[] res = (Object[]) q.execute();\r\n+         */\r\n+        Object[] res=null;\r\n+        assertNotNull(res);\r\n+        assertEquals(3, res.length);\r\n+\r\n+        BaseSub2 sub2 = (BaseSub2) res[0];\r\n+        assertEquals(3, sub2.getBaseField());\r\n+        assertEquals(4, sub2.getBaseSub2Field());\r\n+        assertEquals(BaseSub2.class, sub2.getClass());\r\n+\r\n+        BaseSub1 sub1 = (BaseSub1) res[1];\r\n+        assertEquals(2, sub1.getBaseField());\r\n+        assertEquals(3, sub1.getBaseSub1Field());\r\n+        assertEquals(BaseSub1.class, sub1.getClass());\r\n+\r\n+        BaseSub1Sub2 sub1sub2 = (BaseSub1Sub2) res[2];\r\n+        assertEquals(4, sub1sub2.getBaseField());\r\n+        assertEquals(5, sub1sub2.getBaseSub1Field());\r\n+        assertEquals(6, sub1sub2.getBaseSub1Sub2Field());\r\n+        pm.close();\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        assertSQL(_outer);\r\n+    }    \r\n+}\r"},{"sha":"897b10af32c49e36d95908b6e7f95244e392cbbd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/JDBCTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,78 @@\n+/*\r\n+ * JDBCTestCase.java\r\n+ *\r\n+ * Created on October 6, 2006, 10:34 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.VerticalClassStrategy;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public abstract class JDBCTestCase extends AbstractTestCase {\r\n+    \r\n+    /** Creates a new instance of JDBCTestCase */\r\n+    public JDBCTestCase() {\r\n+    }\r\n+    \r\n+    \r\n+    public JDBCTestCase(String name) {\r\n+        super(name);\r\n+    }\r\n+    \r\n+    public Class getDefaultInheritanceStrategy() {\r\n+        return getClassMapping(RuntimeTest2.class).getStrategy().getClass();\r\n+    }\r\n+    \r\n+    public ClassMapping getClassMapping(Class c) {\r\n+        OpenJPAConfiguration jdoConf = getConfiguration();\r\n+        return ((JDBCConfiguration) jdoConf).getMappingRepositoryInstance().\r\n+                getMapping(c, getClass().getClassLoader(), true);\r\n+    }\r\n+    \r\n+    public FieldMapping getFieldMapping(Class c, String field) {\r\n+        return getClassMapping(c).getFieldMapping(field);\r\n+    }\r\n+    \r\n+    public boolean isInheritanceStrategyVertical() {\r\n+        return VerticalClassStrategy.class.\r\n+                isAssignableFrom(getDefaultInheritanceStrategy());\r\n+    }\r\n+    \r\n+}\r"},{"sha":"ba899eabf94400108fa9f4fe3edc25e6fb9e9820","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestEJBQLSelectNPlusOne.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,58 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.*;\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import junit.framework.*;\r\n+\r\n+public class TestEJBQLSelectNPlusOne extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+\tpublic TestEJBQLSelectNPlusOne(String name)\r\n+\t{\r\n+\t\tsuper(name);\r\n+\t}\r\n+\r\n+\tpublic void setUp()\r\n+\t{\r\n+\t\tdeleteAll (RuntimeTest1.class);\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\tpm.getTransaction ().begin ();\r\n+\t\tpm.persist(new RuntimeTest1(\"foo\", 3));\r\n+\t\tendTx(pm);\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+\tpublic void testSimpleEJBQLQuery() throws Exception\r\n+\t{\r\n+\t\tEntityManager pm = currentEntityManager();\r\n+\t\t// run a JDOQL query first to take care of any class-loading issues\r\n+\t\tList l = pm.createQuery(\"select object(o) from \" + RuntimeTest1.class.getSimpleName()+\" o\").getResultList();\r\n+\r\n+\t\t// now run the actual test.\r\n+\t\tassertEquals(1, l.size());\r\n+\t\tendEm(pm);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"0af73218cf944bed18753f4eebca16c14c541bae","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestGroupByQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,84 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.IndoorGame;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Scrabble;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Chess;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Game;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests GROUP BY in sub query does not get parsed by owning query.\r\n+ * \r\n+ * Further details can be found in <A\r\n+ * HREF=\"https://issues.apache.org/jira/browse/OPENJPA-28\">OPENJPA-28</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class TestGroupByQuery extends SingleEMFTestCase {\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp(DROP_TABLES, Game.class, IndoorGame.class, Scrabble.class,\r\n+\t\t\t\tChess.class);\r\n+\t\ttry {\r\n+\t\t\tcreateData();\r\n+\t\t} catch (Exception e) {\r\n+\t\t\tthrow new RuntimeException(e);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tvoid createData() throws Exception {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tClass[] classes = { Game.class, IndoorGame.class, Scrabble.class,\r\n+\t\t\t\tChess.class };\r\n+\t\tfor (Class cls : classes) {\r\n+\t\t\tfor (int i = 1; i <= 4; i++) {\r\n+\t\t\t\tGame p = (Game) cls.newInstance();\r\n+\t\t\t\tp.setName(cls.getSimpleName() + \"-\" + i);\r\n+\t\t\t\tem.persist(p);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+\r\n+\tpublic void testGroupBy() {\r\n+\t\tString jpql = \"SELECT g.name, g.nTile FROM Scrabble g WHERE \"\r\n+\t\t\t\t+ \"(g.name = ANY(SELECT g1.name FROM Scrabble g1 \"\r\n+\t\t\t\t+ \"GROUP BY g1.name )) ORDER BY g.name\";\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tList<IndoorGame> employees = em.createQuery(jpql).getResultList();\r\n+\r\n+\t}\r\n+}\r"},{"sha":"4d60de1ec1ec6ec0ecec8f976aa8b290762b80db","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestJDBCGrouping.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,30 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.query.GroupingTestCase;\r\n+\r\n+public class TestJDBCGrouping extends GroupingTestCase {\r\n+\r\n+    protected void prepareQuery(Query q) {\r\n+        // nothing to do for JDBC case\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"917f46cb865b8d07a441d407dbae56e7cb8a4ac5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNamedSQLQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,110 @@\n+/*\r\n+ * TestNamedSQLQueries.java\r\n+ *\r\n+ * Created on October 5, 2006, 5:26 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestNamedSQLQueries extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+     \r\n+    \r\n+    /** Creates a new instance of TestNamedSQLQueries */\r\n+    public TestNamedSQLQueries() {\r\n+    }\r\n+    \r\n+    public TestNamedSQLQueries(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+       deleteAll(NamedSQL.class);\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        NamedSQL pc;\r\n+        for (int i = 0; i < 10; i++) {\r\n+            pc = new NamedSQL();\r\n+            if (i < 5)\r\n+                pc.setNum(4);\r\n+            else\r\n+                pc.setNum(i + 10);\r\n+            pm.persist(pc);\r\n+        }\r\n+        endTx(pm);;\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testNamedQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createNativeQuery(\"cls\",NamedSQL.class);\r\n+\r\n+        assertEquals(\"javax.jdo.query.SQL\", ((OpenJPAQuery) q).getLanguage());\r\n+        Collection results = (Collection) q.getCandidateCollection();\r\n+        for (Iterator i = results.iterator(); i.hasNext();)\r\n+            assertEquals(4, ((NamedSQL) i.next()).getNum());\r\n+        assertEquals(5, results.size());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+\r\n+    public void testSystem() {\r\n+        // test top-level package.jdoquery\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        /*\r\n+        OpenJPAQuery query = pm.newNamedQuery(null, \"system2\");\r\n+        query.setUnique(true);\r\n+        query.setResultClass(int.class);\r\n+        Integer count = (Integer) query.execute();\r\n+        assertEquals(20, count.intValue());\r\n+        query.closeAll();\r\n+\r\n+        // test sql query in local package.jdoquery\r\n+        query = pm.newNamedQuery(NamedSQL.class, \"cls\");\r\n+        query.closeAll(); // force parsing of package query file\r\n+        query = pm.newNamedQuery(null, \"system\");\r\n+        query.setUnique(true);\r\n+        query.setResultClass(int.class);\r\n+        count = (Integer) query.execute();\r\n+        assertEquals(20, count.intValue());\r\n+        query.closeAll();\r\n+        pm.close();\r\n+         */\r\n+    }\r\n+    \r\n+}\r"},{"sha":"10b7319109411f9b23ef0fe7178fe9afe3084011","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryParameterBinding.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Application;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests that Native queries use only 1-based positional parameters and \r\n+ * disallows named parameters.\r\n+ * \r\n+ * Originally reported in \r\n+ * <A HRE=\"http://issues.apache.org/jira/browse/OPENJPA-112>OPENJPA-112</A>\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestNativeQueryParameterBinding extends SingleEMFTestCase {\r\n+\tprivate static Class NO_ERROR = null;\r\n+\t\r\n+\t@Override\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(CLEAR_TABLES);\r\n+\t}\r\n+\t\r\n+\tpublic void testNamedParameterInNativeQueryIsNotValid() {\r\n+\t\tString sql = \"SELECT * FROM Application WHERE id=:id\";\r\n+\t\tverifyParams(sql, IllegalArgumentException.class, \"id\", 10);\r\n+\t}\r\n+\t\r\n+\tpublic void testPositionalParameterInNativeQueryIsValid() {\r\n+\t\tString sql = \"SELECT * FROM Application WHERE id=?1\";\r\n+\t\tverifyParams(sql, NO_ERROR, 1, 10);\r\n+\t}\r\n+\t\r\n+\tpublic void testZeroPositionalParameterInNativeQueryIsNotValid() {\r\n+\t\tString sql = \"SELECT * FROM Application WHERE id=?1\";\r\n+\t\tverifyParams(sql, IllegalArgumentException.class, 0, 10);\r\n+\t}\r\n+\t\r\n+\tvoid verifyParams(String jpql, Class error, Object...params) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tQuery query = em.createNativeQuery(jpql);\r\n+\t\tfor (int i=0; params != null && i<params.length; i=+2) {\r\n+\t\t\ttry {\r\n+\t\t\t\tif (params[i] instanceof Number) {\r\n+\t\t\t\t\tquery.setParameter(((Number)params[i]).intValue(), params[i+1]);\r\n+\t\t\t\t} else { \r\n+\t\t\t\t\tquery.setParameter(params[i].toString(), params[i+1]);\r\n+\t\t\t\t}\r\n+\t\t\t\tif (error != null)\r\n+\t\t\t\t\tfail(\"Expected \" + error.getName());\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tif (error.isAssignableFrom(e.getClass())) {\r\n+\t\t\t\t\tSystem.err.println(e.getMessage());\r\n+\t\t\t\t} else {\r\n+\t\t\t\t\te.printStackTrace();\r\n+\t\t\t\t\tfail();\r\n+\t\t\t\t}\r\n+\t\t\t} \r\n+\t\t\t\t\r\n+\t\t}\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+}\r"},{"sha":"636f14afd0129814b50f991b78e1edc4dbd3ec02","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestNativeQueryProcedures.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.DerbyProcedureList;\n+import org.apache.openjpa.persistence.jdbc.query.procedure.ProcedureList;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that Native queries use only 1-based positional parameters and \n+ * disallows named parameters.\n+ * \n+ * Originally reported in \n+ * <A HRE=\"http://issues.apache.org/jira/browse/OPENJPA-112>OPENJPA-112</A>\n+ *  \n+ * @author B.J. Reed\n+ *\n+ */\n+public class TestNativeQueryProcedures extends SingleEMFTestCase {\n+    ProcedureList procedureList = null;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp(Applicant.class, CLEAR_TABLES);\n+\n+        // Figure out which DB we have and get the proper DB Procedure List\n+        OpenJPAEntityManagerFactorySPI ojpaEmf = \n+            (OpenJPAEntityManagerFactorySPI) emf;\n+        JDBCConfiguration conf = (JDBCConfiguration) ojpaEmf.getConfiguration();\n+        \n+        if (conf.getDBDictionaryInstance() instanceof DerbyDictionary) {\n+            procedureList = new DerbyProcedureList();\n+        }\n+\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> createList = procedureList.getCreateProcedureList();\n+            try {\n+                for (String createProcedure : createList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(createProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+    }\n+\n+    public void tearDown() throws Exception {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+            List<String> dropList = procedureList.getDropProcedureList();\n+            try {\n+                for (String dropProcedure : dropList) {\n+                    em.getTransaction().begin();\n+                    Query query = em.createNativeQuery(dropProcedure);\n+                    query.executeUpdate();\n+                    em.getTransaction().commit();\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                em.getTransaction().commit();\n+            }\n+            em.clear();\n+            em.close();\n+        }\n+        super.tearDown();\n+    }\n+    \n+    public void testNoReturnNoParamProcedure() {\n+        if (procedureList != null) {\n+            EntityManager em = emf.createEntityManager();\n+\n+            Applicant applicant1 = new Applicant();\n+            applicant1.setName(\"Charlie\");\n+            Applicant applicant2 = new Applicant();\n+            applicant2.setName(\"Snoopy\");\n+\n+            em.getTransaction().begin();\n+            em.persist(applicant1);\n+            em.persist(applicant2);\n+            em.getTransaction().commit();\n+\n+            String sql = procedureList.callAddXToCharlie();\n+\n+            // query.getSingleResult() and query.getResultList() both throw an\n+            // exception: Statement.executeQuery() cannot be called with a\n+            // statement that returns a row count\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getSingleResult();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getSingleResult() with no returns \"+ \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.getResultList();\n+                em.getTransaction().commit();\n+                fail(\"Expected exception. getResultList() with no returns \" + \n+                    \"should fail.\");\n+            } catch (Exception e) {\n+                //Expected exception\n+                em.getTransaction().rollback();\n+            }\n+\n+            // This one should work properly\n+            try {\n+                em.getTransaction().begin();\n+                Query query = em.createNativeQuery(sql);\n+                query.executeUpdate();\n+                em.getTransaction().commit();\n+            } catch (Exception e) {\n+                fail(\"Caught unexpected exception executing stored procedure: \"\n+                    + e.getMessage());\n+                em.getTransaction().commit();\n+            }\n+        \n+            em.clear();\n+            em.close();\n+            em = emf.createEntityManager();\n+            applicant1 = em.find(Applicant.class, applicant1.getId());\n+            applicant2 = em.find(Applicant.class, applicant2.getId());\n+\n+            // verify one changed and one didn't\n+            assertEquals(\"Charliex\", applicant1.getName());\n+            assertEquals(\"Snoopy\", applicant2.getName());\n+        \n+            em.clear();\n+            em.close();\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"40fad83a9a4abb11f58c9c183b26a927c9e46a3b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","status":"added","additions":464,"deletions":0,"changes":464,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestSQLQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,464 @@\n+/*\r\n+ * TestSQLQueries.java\r\n+ *\r\n+ * Created on October 5, 2006, 4:59 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.IOException;\r\n+import java.io.ObjectInputStream;\r\n+import java.io.ObjectOutputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestSQLQueries extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+     \r\n+    \r\n+    /** Creates a new instance of TestSQLQueries */\r\n+    public TestSQLQueries(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public TestSQLQueries() \r\n+    {}\r\n+    \r\n+    private String _tableName = null;\r\n+    private String _fullTableName = null;\r\n+    private String _pkColName = null;\r\n+    private String _intColName = null;\r\n+    private String _stringColName = null;\r\n+    private String _relColName = null;\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(RuntimeTest1.class);\r\n+        \r\n+        RuntimeTest1 pc1 = new RuntimeTest1(\"1\", 1);\r\n+        RuntimeTest1 pc2 = new RuntimeTest1(\"2\", 2);\r\n+        pc1.setSelfOneOne(pc2);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc1);\r\n+        endTx(pm);;\r\n+        \r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) pm).getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n+        ClassMapping mapping = repos.getMapping(RuntimeTest1.class,\r\n+                pm.getClassLoader(), true);\r\n+        \r\n+        _tableName = mapping.getTable().getName();\r\n+        _fullTableName = dict.getFullName(mapping.getTable(), false);\r\n+        _pkColName = mapping.getTable().getPrimaryKey().\r\n+                getColumns()[0].getName();\r\n+        _intColName = mapping.getFieldMapping(\"intField\").\r\n+                getColumns()[0].getName();\r\n+        _stringColName = mapping.getFieldMapping(\"stringField\").\r\n+                getColumns()[0].getName();\r\n+        _relColName = mapping.getFieldMapping(\"selfOneOne\").\r\n+                getColumns()[0].getName();\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testStarQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testCompiledQuery()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        \r\n+        //FIXME jthomas\r\n+        //q = pm.createQuery(roundtrips(q, false));\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testCompiledLanguageQuery()\r\n+    throws Exception {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        \r\n+        //FIXME jthomas\r\n+        //q = pm.createQuery(\"javax.jdo.query.SQL\", roundtrips(q, false));\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testTableStarQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _tableName + \".* from \" + _fullTableName + \" order by \"\r\n+                + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testColumnQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _pkColName + \", \" + _intColName + \", \" + _stringColName\r\n+                + \" from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testJoinQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select t0.* from \" + _fullTableName + \" t0, \"\r\n+                + _fullTableName + \" t1 where t0.\" + _relColName + \" = t1.\"\r\n+                + _pkColName + \" and t1.\" + _intColName + \" = 2\");\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testParameters() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" where 'foo' = ? and \"\r\n+                + _intColName + \" = ?\");\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        //FIXME jthomas\r\n+        /*Iterator itr = ((Collection) q.execute(\"foo\", new Integer(2))).\r\n+                iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+         */\r\n+        q.closeAll();\r\n+        \r\n+        Map params = new HashMap();\r\n+        params.put(new Integer(1), \"foo\");\r\n+        params.put(new Integer(2), new Integer(2));\r\n+        //FIXME jthomas\r\n+        /*itr = ((Collection) q.executeWithMap(params)).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", ((RuntimeTest1) itr.next()).getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+         */\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testOnlySelectedFieldsLoaded() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _pkColName + \", \" + _intColName + \", \" + _stringColName\r\n+                + \" from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        RuntimeTest1 pc = (RuntimeTest1) itr.next();\r\n+        OpenJPAStateManager sm = getStateManager(pc, pm);\r\n+        assertTrue(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"intField\").getIndex()));\r\n+        assertTrue(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"stringField\").getIndex()));\r\n+        assertFalse(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"longField\").getIndex()));\r\n+        assertEquals(\"1\", pc.getStringField());\r\n+        assertFalse(sm.getLoaded().get(sm.getMetaData().\r\n+                getField(\"longField\").getIndex()));\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testSingleColumnClasslessQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _stringColName + \" from \" + _fullTableName\r\n+                + \" order by \" + _stringColName);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"1\", itr.next());\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(\"2\", itr.next());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        \r\n+        q.setResultClass(Object[].class);\r\n+        itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Object[] vals = (Object[]) itr.next();\r\n+        assertEquals(1, vals.length);\r\n+        assertEquals(\"1\", vals[0]);\r\n+        assertTrue(itr.hasNext());\r\n+        vals = (Object[]) itr.next();\r\n+        assertEquals(1, vals.length);\r\n+        assertEquals(\"2\", vals[0]);\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        \r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testMultiColumnClasslessQuery() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _intColName + \", \" + _stringColName + \" from \"\r\n+                + _fullTableName + \" order by \" + _stringColName);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Object[] vals = (Object[]) itr.next();\r\n+        assertEquals(2, vals.length);\r\n+        assertEquals(1, ((Number) vals[0]).intValue());\r\n+        assertEquals(\"1\", vals[1]);\r\n+        assertTrue(itr.hasNext());\r\n+        vals = (Object[]) itr.next();\r\n+        assertEquals(2, vals.length);\r\n+        assertEquals(2, ((Number) vals[0]).intValue());\r\n+        assertEquals(\"2\", vals[1]);\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testResultClass() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select * from \" + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(RuntimeTest1.class);\r\n+        q.setResultClass(Holder.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Holder holder = (Holder) itr.next();\r\n+        assertEquals(0, holder.I);\r\n+        assertNull(holder.S);\r\n+        assertNotNull(holder.pc);\r\n+        assertEquals(\"1\", holder.pc.getStringField());\r\n+        assertTrue(itr.hasNext());\r\n+        holder = (Holder) itr.next();\r\n+        assertEquals(0, holder.I);\r\n+        assertNull(holder.S);\r\n+        assertNotNull(holder.pc);\r\n+        assertEquals(\"2\", holder.pc.getStringField());\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public void testClasslessProjection() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select \" + _intColName + \" as I, \" + _stringColName + \" as S from \"\r\n+                + _fullTableName + \" order by \" + _intColName);\r\n+        q.setResultClass(Holder.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        Holder holder = (Holder) itr.next();\r\n+        assertNull(holder.pc);\r\n+        assertEquals(1, holder.I);\r\n+        assertEquals(\"1\", holder.S);\r\n+        assertTrue(itr.hasNext());\r\n+        holder = (Holder) itr.next();\r\n+        assertNull(holder.pc);\r\n+        assertEquals(2, holder.I);\r\n+        assertEquals(\"2\", holder.S);\r\n+        assertFalse(itr.hasNext());\r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Manual test to see if a relation will be eagerly loaded when SQL\r\n+     * containing enough information is run. This is not run as part of\r\n+     * the unit tests since we don't know if this behavior should be\r\n+     * really expected to work or not.\r\n+     */\r\n+    public void relationLoadedTest() {\r\n+       deleteAll(AttachD.class);\r\n+       deleteAll(AttachA.class);\r\n+        \r\n+        AttachD d = new AttachD();\r\n+        AttachA a = new AttachA();\r\n+        d.setA(a);\r\n+        \r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        pm.persist(d);\r\n+        pm.getTransaction().commit();\r\n+        pm.close();\r\n+        \r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) pm).getConfiguration();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        MappingRepository repos = conf.getMappingRepositoryInstance();\r\n+        \r\n+        ClassMapping mappingA = repos.getMapping(AttachD.class,\r\n+                pm.getClassLoader(), true);\r\n+        String tableNameA = mappingA.getTable().getName();\r\n+        String fullTableNameA = dict.getFullName(mappingA.getTable(), false);\r\n+        String relColNameA = mappingA.getFieldMapping(\"a\").\r\n+                getColumns()[0].getName();\r\n+        \r\n+        ClassMapping mappingD = repos.getMapping(AttachA.class,\r\n+                pm.getClassLoader(), true);\r\n+        String tableNameD = mappingD.getTable().getName();\r\n+        String fullTableNameD = dict.getFullName(mappingD.getTable(), false);\r\n+        String pkColNameD = mappingD.getTable().getPrimaryKey().\r\n+                getColumns()[0].getName();\r\n+        \r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        OpenJPAQuery q = pm.createQuery(\"javax.jdo.query.SQL\",\r\n+                \"select t0.*, t1.* from \"\r\n+                + fullTableNameA + \" t0, \"\r\n+                + fullTableNameD + \" t1 \"\r\n+                + \"where t0.\" + relColNameA + \" = t1.\" + pkColNameD);\r\n+        \r\n+        // even the exact same SQL that Kodo generates will not\r\n+        // eagerly load the relation\r\n+        /*\r\n+          q = pm.newQuery (\"javax.jdo.query.SQL\",\r\n+              \"SELECT t1.ID, t1.TYP, t1.VERSN, t1.ADBL, t1.AINT, \"\r\n+              + \"t1.ASTR, t1.BDBL, t1.BINT, t1.BSTR, t1.CDBL, t1.CINT, \"\r\n+              + \"t1.CSTR, t0.DDBL, t0.DINT, t0.DSTR \"\r\n+              + \"FROM ATTACHD t0 LEFT OUTER JOIN ATTACHA t1 ON t0.A = t1.ID\");\r\n+         */\r\n+        \r\n+        q.setResultClass(AttachD.class);\r\n+        Iterator itr = ((Collection) q.getCandidateCollection()).iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        \r\n+        d = (AttachD) itr.next();\r\n+        // d.getDstr ();\r\n+        \r\n+        OpenJPAStateManager sm = getStateManager(d, pm);\r\n+        assertTrue(sm.getLoaded().\r\n+                get(sm.getMetaData().getField(\"a\").getIndex()));\r\n+        assertNotNull(d.getA());\r\n+        assertFalse(itr.hasNext());\r\n+        \r\n+        q.closeAll();\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public static class Holder {\r\n+        \r\n+        public RuntimeTest1 pc;\r\n+        public int I;\r\n+        public String S;\r\n+        \r\n+        public void setRuntimeTest1(RuntimeTest1 pc) {\r\n+            this.pc = pc;\r\n+        }\r\n+    }\r\n+    \r\n+    public static void main(String[] args)\r\n+    throws Exception {\r\n+        // main ();\r\n+        \r\n+        new TestSQLQueries().relationLoadedTest();\r\n+    }\r\n+    \r\n+    private static Object roundtrips(Object orig, boolean validateEquality)\r\n+    throws IOException, ClassNotFoundException {\r\n+        assertNotNull(orig);\r\n+        \r\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\r\n+        out.writeObject(orig);\r\n+        ByteArrayInputStream bin = new ByteArrayInputStream(\r\n+                bout.toByteArray());\r\n+        ObjectInputStream in = new ObjectInputStream(bin);\r\n+        Object result = in.readObject();\r\n+        \r\n+        if (validateEquality) {\r\n+            assertEquals(orig.hashCode(), result.hashCode());\r\n+            assertEquals(orig, result);\r\n+        }\r\n+        \r\n+        return result;\r\n+    }\r\n+    \r\n+}\r"},{"sha":"bef95c620918b552f278deb818384291e942560b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestStringFunctions.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,125 @@\n+/*\r\n+ * TestStringFunctions.java\r\n+ *\r\n+ * Created on October 5, 2006, 5:20 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestStringFunctions extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest\r\n+{\r\n+    private OpenJPAEntityManager _pm = null;\r\n+    private QueryTest1 _match = null;\r\n+    \r\n+    /** Creates a new instance of TestStringFunctions */\r\n+    public TestStringFunctions(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(QueryTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        pm.getTransaction().begin();\r\n+        QueryTest1 match = new QueryTest1();\r\n+        match.setString(\"foobarbiz\");\r\n+        pm.persist(match);\r\n+        QueryTest1 fail = new QueryTest1();\r\n+        fail.setString(\"barbizraz\");\r\n+        pm.persist(fail);\r\n+        pm.getTransaction().commit();\r\n+        Object oid = pm.getObjectId(match);\r\n+        pm.close();\r\n+\r\n+        _pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        _match = (QueryTest1) _pm.getObjectId(oid);\r\n+    }\r\n+\r\n+    public void tearDown()\r\n+        throws Exception {\r\n+        if (_pm != null)\r\n+            _pm.close();\r\n+\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    public void testSubstring() {\r\n+        assertMatch(\"string.substring (3) == 'barbiz'\");\r\n+        assertMatch(\"string.substring (3, 6) == 'bar'\");\r\n+    }\r\n+\r\n+    public void testIndexOf() {\r\n+        assertMatch(\"string.indexOf ('bar') == 3\");\r\n+        assertMatch(\"string.indexOf (\\\"b\\\", 4) == 6\");\r\n+        assertMatch(\"string.indexOf ('b', 4) == 6\");\r\n+    }\r\n+\r\n+    public void testToLowerCase() {\r\n+        assertMatch(\"string.toLowerCase () == 'foobarbiz'\");\r\n+        assertMatch(\"'FOOBARBIZ'.toLowerCase () == string\");\r\n+    }\r\n+\r\n+    public void testToUpperCase() {\r\n+        assertMatch(\"string.toUpperCase () == 'FOOBARBIZ'\");\r\n+    }\r\n+\r\n+    public void testStartsWith() {\r\n+        assertMatch(\"string.startsWith ('foobar')\");\r\n+        assertMatch(\"'foobarbizbaz'.startsWith (string)\");\r\n+    }\r\n+\r\n+    public void testEndsWith() {\r\n+        assertMatch(\"string.endsWith ('barbiz')\");\r\n+        assertMatch(\"'bazfoobarbiz'.endsWith (string)\");\r\n+    }\r\n+\r\n+    public void testMatches() {\r\n+        assertMatch(\"string.matches ('.oobar.*')\");\r\n+        assertMatch(\"string.matches ('FOO.AR.IZ(?i)')\");\r\n+    }\r\n+\r\n+    private void assertMatch(String filter) {\r\n+        OpenJPAQuery q = _pm.createNativeQuery(filter,QueryTest1.class);\r\n+        Collection res = (Collection) q.getCandidateCollection();\r\n+        assertEquals(1, res.size());\r\n+        assertEquals(_match, res.iterator().next());\r\n+        q.closeAll();\r\n+    }\r\n+    \r\n+}\r"},{"sha":"2b7053ad46a3ab0cf7217d251dacdae7f84f26c6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/TestUpdateSingleValuedAssociation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,137 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Application;\r\n+import org.apache.openjpa.persistence.jdbc.query.domain.Applicant;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests that update query can set single-valued association field to non-null\r\n+ * or null values.\r\n+ * \r\n+ * Originally reported in \r\n+ * <A HRE=\"http://issues.apache.org/jira/browse/OPENJPA-533>OPENJPA-533</A>\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestUpdateSingleValuedAssociation extends SingleEMFTestCase {\r\n+\tprivate static boolean MUST_BE_NULL = true;\r\n+\t\r\n+\t@Override\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Application.class, Applicant.class);\r\n+\t}\r\n+\t\r\n+\tpublic void testUpdateSingleValuedAssociationToNullViaParameter() {\r\n+\t\tcreateApplicationWithNonNullApplicant();\r\n+\t\tassertUserNullity(!MUST_BE_NULL);\r\n+\t\t\r\n+\t\tString jpql = \"UPDATE Application a SET a.user = :user\";\r\n+\t\tupdateByQuery(jpql, \"user\", null);\r\n+\t\t\r\n+\t\tassertUserNullity(MUST_BE_NULL);\r\n+\t}\r\n+\t\r\n+\tpublic void testUpdateSingleValuedAssociationToNullViaLiteral() {\r\n+\t\tcreateApplicationWithNonNullApplicant();\r\n+\t\tassertUserNullity(!MUST_BE_NULL);\r\n+\t\t\r\n+\t\tString jpql = \"UPDATE Application a SET a.user = NULL\";\r\n+\t\tupdateByQuery(jpql);\r\n+\t\t\r\n+\t\tassertUserNullity(MUST_BE_NULL);\r\n+\t}\r\n+\t\r\n+\tpublic void testUpdateSingleValuedAssociationToNonNullViaParameter() {\r\n+\t\tApplication pc = createApplicationWithNullApplicant();\r\n+\t\tassertNull(pc.getUser());\r\n+\t\t\r\n+\t\tString jpql = \"UPDATE Application a SET a.user = :user\";\r\n+\t\tApplicant newUser = createApplicant();\r\n+\t\tupdateByQuery(jpql, \"user\", newUser);\r\n+\t\t\r\n+\t\tassertUserNullity(!MUST_BE_NULL);\r\n+\t}\r\n+\t\r\n+\tvoid assertUserNullity(boolean shouldBeNull) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList<Application> result = \r\n+\t\t\tem.createQuery(\"SELECT a FROM Application a\").getResultList();\r\n+\t\tassertFalse(result.isEmpty());\r\n+\t\tfor (Application pc : result) {\r\n+\t\t\tApplicant user = pc.getUser();\r\n+\t\t\tif (shouldBeNull)\r\n+\t\t\t\tassertNull(user);\r\n+\t\t\telse\r\n+\t\t\t\tassertNotNull(user);\r\n+\t\t}\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\tApplication createApplicationWithNonNullApplicant() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tApplication app = new Application();\r\n+\t\tApplicant user = new Applicant();\r\n+\t\tuser.setName(\"Non-Null User\");\r\n+\t\tapp.setUser(user);\r\n+\t\tem.persist(app);\r\n+\t\tem.persist(user);\r\n+\t\tem.getTransaction().commit();\r\n+\t\treturn app;\r\n+\t}\r\n+\t\r\n+\tApplication createApplicationWithNullApplicant() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tApplication app = new Application();\r\n+\t\tem.persist(app);\r\n+\t\tem.getTransaction().commit();\r\n+\t\treturn app;\r\n+\t}\r\n+\t\r\n+\tApplicant createApplicant() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tApplicant user = new Applicant();\r\n+\t\tuser.setName(\"Non-Null User\");\r\n+\t\tem.persist(user);\r\n+\t\tem.getTransaction().commit();\r\n+\t\treturn user;\r\n+\t}\r\n+\t\r\n+\tpublic void updateByQuery(String jpql, Object...params) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tQuery query = em.createQuery(jpql);\r\n+\t\tfor (int i=0; params != null && i<params.length; i=+2) {\r\n+\t\t\tquery.setParameter(params[i].toString(), params[i+1]);\r\n+\t\t}\r\n+\t\tquery.executeUpdate();\r\n+\t\tem.getTransaction().commit();\r\n+\t}\r\n+}\r"},{"sha":"83100b569b0b92dcea93ce43a18dd2dd599f42dd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Department.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ElementClassCriteria;\r\n+\r\n+/**\r\n+ * Persistent entity with collection whose element type belongs to inheritance\r\n+ * hierarchy mapped to a SINGLE_TABLE. Hence relationship loading will require\r\n+ * \r\n+ */\r\n+@Entity\r\n+@Table(name = \"DEPT\")\r\n+@IdClass(DepartmentId.class)\r\n+public class Department {\r\n+\r\n+\t@Id\r\n+\tprivate String name;\r\n+\r\n+\t@OneToMany(mappedBy = \"dept\", cascade = CascadeType.PERSIST)\r\n+\t@ElementClassCriteria\r\n+\tprivate Collection<PartTimeEmployee> partTimeEmployees;\r\n+\r\n+\t@OneToMany(mappedBy = \"dept\", cascade = CascadeType.PERSIST)\r\n+\t@ElementClassCriteria\r\n+\tprivate Collection<FullTimeEmployee> fullTimeEmployees;\r\n+\r\n+\tpublic Collection<FullTimeEmployee> getFullTimeEmployees() {\r\n+\t\treturn fullTimeEmployees;\r\n+\t}\r\n+\r\n+\tpublic void addEmployee(FullTimeEmployee e) {\r\n+\t\tif (fullTimeEmployees == null)\r\n+\t\t\tfullTimeEmployees = new ArrayList<FullTimeEmployee>();\r\n+\t\tthis.fullTimeEmployees.add(e);\r\n+\t\te.setDept(this);\r\n+\t}\r\n+\r\n+\tpublic Collection<PartTimeEmployee> getPartTimeEmployees() {\r\n+\t\treturn partTimeEmployees;\r\n+\t}\r\n+\r\n+\tpublic void addEmployee(PartTimeEmployee e) {\r\n+\t\tif (partTimeEmployees == null)\r\n+\t\t\tpartTimeEmployees = new ArrayList<PartTimeEmployee>();\r\n+\t\tthis.partTimeEmployees.add(e);\r\n+\t\te.setDept(this);\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"a31e366421c3704824650ee5f622dbf83aad1142","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/DepartmentId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public class DepartmentId implements Serializable {\r\n+\tprivate String name;\r\n+\r\n+\tpublic DepartmentId() {\r\n+\t\tthis(null);\r\n+\t}\r\n+\r\n+\tpublic DepartmentId(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic int hashCode() {\r\n+\t\treturn name.hashCode();\r\n+\t}\r\n+\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj) {\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t\tif (!(obj instanceof DepartmentId)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\r\n+\t\tDepartmentId other = (DepartmentId) obj;\r\n+\t\tif (name == null) {\r\n+\t\t\tif (other.name != null) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t} else if (!name.equals(other.name)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\treturn true;\r\n+\t}\r\n+}\r"},{"sha":"0b78aee9684ec6d5024b1dfbb2a523e3af6aa1ce","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Employee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name = \"EMP\")\r\n+@IdClass(EmployeeId.class)\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name = \"TYPE\")\r\n+public abstract class Employee {\r\n+\r\n+\t@Id\r\n+\tprivate String ssn;\r\n+\r\n+\t@ManyToOne\r\n+\tprivate Department dept;\r\n+\r\n+\tpublic String getSsn() {\r\n+\t\treturn ssn;\r\n+\t}\r\n+\r\n+\tpublic void setSsn(String ssn) {\r\n+\t\tthis.ssn = ssn;\r\n+\t}\r\n+\r\n+\tpublic Department getDept() {\r\n+\t\treturn dept;\r\n+\t}\r\n+\r\n+\tpublic void setDept(Department dept) {\r\n+\t\tthis.dept = dept;\r\n+\t}\r\n+\r\n+}\n\\ No newline at end of file"},{"sha":"2dc5e2bb25824c72638f7349decfe92bc7af46ef","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/EmployeeId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public class EmployeeId implements Serializable {\r\n+\t\r\n+\tprivate String ssn;\r\n+\t\r\n+\tpublic EmployeeId(){\r\n+\t}\r\n+\tpublic EmployeeId(String ssn){\r\n+\t\tthis.ssn = ssn;\r\n+\t}\r\n+    public boolean equals (Object other)\r\n+    {\r\n+        if (other == this)\r\n+            return true;\r\n+        if (!(other instanceof EmployeeId))\r\n+            return false;\r\n+\r\n+        EmployeeId obj = (EmployeeId) other;\r\n+\t\tif (ssn == null) {\r\n+\t\t\tif (obj.ssn != null) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t} else if (!ssn.equals(obj.ssn)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\t\r\n+        return (true);\r\n+    }\r\n+     \r\n+   \r\n+    public int hashCode ()\r\n+    {\r\n+        return (ssn.hashCode());\r\n+    }\r\n+}\r"},{"sha":"df2fb39b11e59a94aaad84efaaeae2c187a4bde5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/FullTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"F\")\r\n+public class FullTimeEmployee extends Employee {\r\n+\t@Column(name = \"salary\")\r\n+\tprivate double salary;\r\n+\r\n+\tpublic double getSalary() {\r\n+\t\treturn salary;\r\n+\t}\r\n+\r\n+\tpublic void setSalary(double salary) {\r\n+\t\tthis.salary = salary;\r\n+\t}\r\n+}\r"},{"sha":"ba0cce7f3b0b7b513446fc4956f5847759c0832b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/Invoice.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.*;\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+@Entity\n+@IdClass(InvoiceKey.class)\n+public class Invoice {\n+\n+    @Id\n+    private int id;\n+    @Id\n+    private String brandName;\n+    \n+    private double price;\n+\n+    @OneToMany(cascade={CascadeType.ALL})\n+    private List<LineItem> lineItems = new ArrayList<LineItem>();\n+\n+    public Invoice() {\n+    }\n+\n+    public Invoice(int id, String brandName, double price) {\n+        this.id = id;\n+        this.brandName = brandName;\n+        this.price = price;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getBrandName() {\n+        return brandName;\n+    }\n+\n+    public void setBrandName(String brandName) {\n+        this.brandName = brandName;\n+    }\n+\n+    public double getPrice() {\n+        return price;\n+    }\n+\n+    public void setPrice(double price) {\n+        this.price = price;\n+    }\n+\n+    public List<LineItem> getLineItems() {\n+        return lineItems;\n+    }\n+\n+    public void setLineItems(List<LineItem> lineItems) {\n+        this.lineItems = lineItems;\n+    }\n+}"},{"sha":"0d49deb27a0bb235b9b4444b8037b24fa171a822","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/InvoiceKey.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+public class InvoiceKey {\n+\n+    private int id;\n+    private String brandName;\n+\n+    public InvoiceKey() {\n+    }\n+\n+    public InvoiceKey(int id, String brandName) {\n+        this.id = id;\n+        this.brandName = brandName;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        InvoiceKey invoiceKey = (InvoiceKey) o;\n+\n+        if (id != invoiceKey.id) return false;\n+        if (!brandName.equals(invoiceKey.brandName)) return false;\n+\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = id;\n+        result = 31 * result + brandName.hashCode();\n+        return result;\n+    }\n+}"},{"sha":"e3c6fff092c6330432be1713af7bd33e2531170f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/LineItem.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openjpa.persistence.jdbc.query.cache;\n+import javax.persistence.*;\n+\n+/**\n+ * @version $Revision$ $Date$\n+ */\n+@Entity\n+public class LineItem {\n+\n+    @Id\n+    private String id;\n+    private int quantity;\n+    \n+    @ManyToOne\n+    private Invoice invoice;\n+\n+    public LineItem() {\n+    }\n+\n+    public LineItem(String id, int quantity) {\n+        this.id = id;\n+        this.quantity = quantity;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public int getQuantity() {\n+        return quantity;\n+    }\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public Invoice getInvoice() {\n+        return invoice;\n+    }\n+\n+    public void setInvoice(Invoice invoice) {\n+        this.invoice = invoice;\n+    }\n+}\n+"},{"sha":"986a1896ec3bd53c5350709ee617229cb8a1cb8a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/PartTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"P\")\r\n+public class PartTimeEmployee extends Employee {\r\n+\t@Column(name = \"wage\")\r\n+\tprivate double hourlyWage;\r\n+\r\n+\tpublic double getHourlyWage() {\r\n+\t\treturn hourlyWage;\r\n+\t}\r\n+\r\n+\tpublic void setHourlyWage(double hourlyWage) {\r\n+\t\tthis.hourlyWage = hourlyWage;\r\n+\t}\r\n+}\r"},{"sha":"3808a49e149bbe48a1121d563f3124b048299c13","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/cache/TestNonPrimaryKeyQueryParameters.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,180 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.cache;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+/**\r\n+ * Tests that find() queries that use non-primary keys can be cached.\r\n+ * \r\n+ * SQL Query Cache caches SQL queries generated to select single entity.\r\n+ * However, single instance queries may also join to other relations. Hence,\r\n+ * primary key and foreign keys are normally the parameters to these queries\r\n+ * which cached query binds again when being reused.\r\n+ * \r\n+ * The test verifies the case where non-primary keys are used as query\r\n+ * parameters. The test employs a inheritance hierarchy mapped to SINGLE_TABLE.\r\n+ * When derived instances are used in relationship, the discriminator values\r\n+ * must be used in to join to the target type.\r\n+ * \r\n+ * For further details, refer <A\r\n+ * HREF=\"https://issues.apache.org/jira/browse/OPENJPA-660\">OPENJPA-660</A>\r\n+ * \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ * @author Vikram Bhatia\r\n+ * @author David Blevins\r\n+ */\r\n+public class TestNonPrimaryKeyQueryParameters extends SQLListenerTestCase {\r\n+\tprivate static final int FULLTIME_EMPLOYEE_COUNT = 3;\r\n+\tprivate static final int PARTTIME_EMPLOYEE_COUNT = 2;\r\n+    private static final int LINEITEM_PER_INVOICE = 1;\r\n+\tprivate static final String DEPT_NAME = \"ENGINEERING\";\r\n+\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Department.class, Employee.class,\r\n+\t\t\t\tFullTimeEmployee.class, PartTimeEmployee.class,\r\n+\t\t\t\tInvoice.class, LineItem.class,\r\n+\t\t\t\t\"openjpa.jdbc.QuerySQLCache\", \"true\");\r\n+\t\tcreateDepartment(DEPT_NAME);\r\n+\t\tcreateInvoice();\r\n+\t\tsql.clear();\r\n+\t}\r\n+\r\n+\tpublic void testSelectQueryWithPrimaryKeyParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em\r\n+\t\t\t\t.createQuery(\"SELECT d from Department d where d.name=?1\");\r\n+\t\tquery.setParameter(1, DEPT_NAME);\r\n+\t\tDepartment dept = (Department) query.getSingleResult();\r\n+\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, dept.getFullTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, dept.getPartTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\tpublic void testSelectQueryWithNoParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em.createQuery(\"SELECT d from Department d\");\r\n+\t\tquery.setParameter(1, DEPT_NAME);\r\n+\t\tDepartment dept = (Department) query.getSingleResult();\r\n+\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, dept.getFullTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, dept.getPartTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\r\n+\t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\tpublic void testFind() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tDepartment dept = em.find(Department.class, DEPT_NAME);\r\n+\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, dept.getFullTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, dept.getPartTimeEmployees()\r\n+\t\t\t\t.size());\r\n+\r\n+\t\tassertSQL(\".* AND t0.TYPE = .*\");\r\n+\t\t\r\n+        Invoice invoice = em.find(Invoice.class, new InvoiceKey(1, \"Red\"));\r\n+        List<LineItem> list = invoice.getLineItems();\r\n+        assertEquals(LINEITEM_PER_INVOICE, list.size());\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\tpublic void testSelectSubClass() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em.createQuery(\"SELECT e from FullTimeEmployee e\");\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT, query.getResultList().size());\r\n+\r\n+\t\tquery = em.createQuery(\"SELECT e from PartTimeEmployee e\");\r\n+\t\tassertEquals(PARTTIME_EMPLOYEE_COUNT, query.getResultList().size());\r\n+\r\n+\t\tassertSQL(\".* WHERE t0.TYPE = .*\");\r\n+\t}\r\n+\r\n+\tpublic void testSelectBaseClass() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\r\n+\t\tQuery query = em.createQuery(\"SELECT e from Employee e\");\r\n+\t\tassertEquals(FULLTIME_EMPLOYEE_COUNT + PARTTIME_EMPLOYEE_COUNT, query\r\n+\t\t\t\t.getResultList().size());\r\n+\t\tassertNotSQL(\".* WHERE t0.TYPE = .*\");\r\n+\t}\r\n+\r\n+\tprivate void createDepartment(String deptName) {\r\n+\t\tif (count(Department.class) > 0)\r\n+\t\t\treturn;\r\n+\r\n+\t\tDepartment dept = new Department();\r\n+\t\tdept.setName(deptName);\r\n+\r\n+\t\tfor (int i = 1; i <= FULLTIME_EMPLOYEE_COUNT; i++) {\r\n+\t\t\tFullTimeEmployee e = new FullTimeEmployee();\r\n+\t\t\te.setSsn(\"888-PP-001\" + i);\r\n+\t\t\te.setSalary(100000);\r\n+\t\t\tdept.addEmployee(e);\r\n+\t\t}\r\n+\t\tfor (int i = 1; i <= PARTTIME_EMPLOYEE_COUNT; i++) {\r\n+\t\t\tPartTimeEmployee e = new PartTimeEmployee();\r\n+\t\t\te.setSsn(\"999-PP-001\" + i);\r\n+\t\t\te.setHourlyWage(20);\r\n+\t\t\tdept.addEmployee(e);\r\n+\t\t}\r\n+\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.persist(dept);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\r\n+\t}\r\n+\t\r\n+    private void createInvoice() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        EntityTransaction tran = em.getTransaction();\r\n+        tran.begin();\r\n+        Invoice invoice = new Invoice(1, \"Red\", 1.30);\r\n+        for (int i = 1;  i <= LINEITEM_PER_INVOICE; i++) {\r\n+            LineItem item = new LineItem(String.valueOf(i), 10);\r\n+            item.setInvoice(invoice);\r\n+            invoice.getLineItems().add(item);\r\n+            em.persist(invoice);\r\n+        }\r\n+        em.flush();\r\n+        tran.commit();\r\n+        em.close();        \r\n+    }\t\r\n+}\r"},{"sha":"24d379a069a1a8be1f48397b51908e9e01ba3ec1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Applicant.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+/**\r\n+ * Simple persistent entity as a target of uni-directional one-to-one \r\n+ * association.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class Applicant {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\r\n+\tprivate String name;\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"cc0a103960eae07773a62378d55b7d9df58fc6b3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Application.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKeyAction;\r\n+\r\n+/**\r\n+ * Simple persistent entity as a source of uni-directional one-to-one \r\n+ * association.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class Application {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\r\n+\t@ManyToOne\r\n+\t@JoinColumn(nullable = true)\r\n+\t@ForeignKey(deleteAction = ForeignKeyAction.NULL)\r\n+\tprivate Applicant user;\r\n+\r\n+\tpublic Applicant getUser() {\r\n+\t\treturn user;\r\n+\t}\r\n+\r\n+\tpublic void setUser(Applicant user) {\r\n+\t\tthis.user = user;\r\n+\t}\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+}\r"},{"sha":"4d7a5bdff2a6314ae707b47a0ecb8bc23d2159e7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Chess.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class Chess extends IndoorGame {\r\n+\tprivate int nPiece;\r\n+\r\n+\tpublic int getPiece() {\r\n+\t\treturn nPiece;\r\n+\t}\r\n+\r\n+\tpublic void setPiece(int n) {\r\n+\t\tthis.nPiece = n;\r\n+\t}\r\n+}\r"},{"sha":"de133a07d82770c9680eaabde101fdb79bbdfecf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Game.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+/**\r\n+ * Simple unrelated persistent entity used to test logically union queries. \r\n+ * This class is root of an inheritance hierarchy using TABLE PER CLASS \r\n+ * strategy. Polymorphic queries on this class needs to run logical union\r\n+ * of queries on all known subclasses. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.TABLE_PER_CLASS)\r\n+public class Game {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+}\r"},{"sha":"ffe7384d67308f0e422951ed21aeca3f96943114","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/IndoorGame.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class IndoorGame extends Game {\r\n+\tprivate int nPlayer;\r\n+\r\n+\tpublic int getPlayer() {\r\n+\t\treturn nPlayer;\r\n+\t}\r\n+\r\n+\tpublic void setPlayer(int n) {\r\n+\t\tthis.nPlayer = n;\r\n+\t}\r\n+}\r"},{"sha":"fd03563726798005f4f321cd842e355812938a0b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/domain/Scrabble.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,44 @@\n+/*\r\n+ * TestLockGroupsWithHorizontalBaseType.java\r\n+ *\r\n+ * Created on October 4, 2006, 5:03 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.query.domain;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class Scrabble extends IndoorGame {\r\n+\tprivate int nTile;\r\n+\r\n+\tpublic int getTile() {\r\n+\t\treturn nTile;\r\n+\t}\r\n+\r\n+\tpublic void setTile(int n) {\r\n+\t\tthis.nTile = n;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"d3ad3c153f673864cdb77f788cf50c35242bfafc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/DerbyProcedureList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,66 @@\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.procedure;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/*\n+ * holds the stored procedures that will be used by test cases\n+ */\n+public class DerbyProcedureList extends ProcedureList {\n+\n+    public List<String> getCreateProcedureList () {\n+        ArrayList<String> retList = new ArrayList<String>();\n+\n+        retList.add (\"create procedure ADD_X_TO_CHARLIE () \" +\n+                     \"PARAMETER STYLE JAVA LANGUAGE JAVA MODIFIES SQL DATA \" +\n+                     \"EXTERNAL NAME 'org.apache.openjpa.persistence.jdbc.\" + \n+                     \"query.procedure.DerbyProcedureList.addXToCharlie'\");\n+        \n+\n+        return retList;\n+    }\n+\n+    public List<String> getDropProcedureList () {\n+        ArrayList<String> retList = new ArrayList<String>();\n+\n+        retList.add (\"drop procedure ADD_X_TO_CHARLIE\");\n+\n+        return retList;\n+    }\n+\n+    public String callAddXToCharlie () {\n+        return \"{ call ADD_X_TO_CHARLIE () }\";\n+    }\n+\n+    public static void addXToCharlie () throws Exception {\n+        Connection conn = DriverManager.getConnection(\n+            \"jdbc:default:connection\");\n+        PreparedStatement ps1 = conn.prepareStatement(\"update APPLICANT set \" + \n+            \"name = 'Charliex' where name = 'Charlie'\");\n+        ps1.executeUpdate();\n+\n+        conn.close();\n+    }\n+}"},{"sha":"e23b64816e5143bbf3a7e830a2f4eedae5da869c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/query/procedure/ProcedureList.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.query.procedure;\n+\n+import java.util.List;\n+\n+/*\n+ * holds the stored procedures that will be used by test cases\n+ */\n+public abstract class ProcedureList {\n+\n+    abstract public List<String> getCreateProcedureList ();\n+\n+    abstract public List<String> getDropProcedureList ();\n+\n+    abstract public String callAddXToCharlie ();\n+\n+    // This method should also be overriden, but it needs to be static so \n+    // that it can be called as a stored procedure\n+    public static void addXToCharlie () throws Exception {\n+        Exception e = new Exception (\"Method not implemented by inheriting \" + \n+            \"class\");\n+        throw e;\n+    }\n+}"},{"sha":"b1b19b26522de230f0f66d12eb1404035cbee750","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","status":"added","additions":237,"deletions":0,"changes":237,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassDBSequenceFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,237 @@\n+/*\r\n+ * TestClassDBSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 11:29 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestClassDBSequenceFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestClassDBSequenceFactory */\r\n+    public TestClassDBSequenceFactory() {\r\n+    }\r\n+    \r\n+    public TestClassDBSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    public void setUp() {\r\n+       deleteAll(SeqE.class);\r\n+    }\r\n+    \r\n+    boolean supportsPessimisticLocking() {\r\n+        OpenJPAConfiguration conf = getConfiguration();\r\n+        return conf instanceof JDBCConfiguration\r\n+                && ((JDBCConfiguration) conf).getDBDictionaryInstance().\r\n+                supportsSelectForUpdate;\r\n+    }\r\n+    \r\n+    public void testVirtualSuperclass() {\r\n+        \r\n+        OpenJPAEntityManagerFactory pmf =(OpenJPAEntityManagerFactory)\r\n+                getEmf(getProps());\r\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager) pmf.createEntityManager();\r\n+        //FIXME jthomas\r\n+        //Sequence gen = pm.getIdentitySequence(SeqF.class);\r\n+        Sequence gen=null;\r\n+        long next = ((Number) gen.getIncrement()).longValue();\r\n+        //FIXME jthomas\r\n+        //gen = pm.getIdentitySequence(SeqG.class);\r\n+        assertEquals(next + 1, ((Number) gen.getIncrement()).longValue());\r\n+        pm.close();\r\n+        pmf.close();\r\n+    }\r\n+    \r\n+    public void testIgnoreVirtualSuperclass() {\r\n+        \r\n+        Map props=new HashMap();\r\n+        props.put(\"TableName\", \"JDO_CLASS_SEQUENCE\");\r\n+        props.put(\"IgnoreVirtual\", \"true\");\r\n+        OpenJPAEntityManagerFactory pmf =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+        OpenJPAEntityManager pm = pmf.createEntityManager();\r\n+        //FIXME jthomas\r\n+        //Sequence gen = pm.getIdentitySequence(SeqF.class);\r\n+        Sequence gen =null;\r\n+        long next = ((Number) gen.getIncrement()).longValue();\r\n+        //FIXME jthomas\r\n+        //Sequence gen2 = pm.getIdentitySequence(SeqG.class);\r\n+        Sequence gen2 =null;\r\n+        long next2 = ((Number) gen2.getIncrement()).longValue();\r\n+        if (next2 != next + 1)\r\n+            return; // valid.\r\n+        assertTrue(((Number) gen.getIncrement()).longValue() != next2 + 1);\r\n+        \r\n+        pm.close();\r\n+        pmf.close();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Based on reported bug case.\r\n+     */\r\n+    public void testNoSequenceHolesOnAttach() {\r\n+        PerClassTestObject3 pc = new PerClassTestObject3();\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc);\r\n+        endTx(pm);;\r\n+        long id1 = pc.getId();\r\n+        \r\n+        pc = new PerClassTestObject3();\r\n+        startTx(pm);;\r\n+        pm.persist(pc);\r\n+        long id2 = pc.getId();\r\n+        endTx(pm);;\r\n+        pm.close();\r\n+        \r\n+        pc = new PerClassTestObject3();\r\n+        pm = (OpenJPAEntityManager)currentEntityManager();\r\n+        startTx(pm);;\r\n+        pm.persist(pc);\r\n+        endTx(pm);;\r\n+        long id3 = pc.getId();\r\n+        pm.close();\r\n+        \r\n+        assertEquals(id1 + 1, id2);\r\n+        assertEquals(id2 + 1, id3);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that all sequence numbers are unique and in order.\r\n+     * Will fail for dbs without pessimistic locking.\r\n+     */\r\n+    public void testSequence()\r\n+    throws Exception {\r\n+        if (!(supportsPessimisticLocking()))\r\n+            return;\r\n+        \r\n+        Set set = new HashSet();\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        \r\n+        \r\n+        UpdateThread t1 = new UpdateThread(set, broker);\r\n+        UpdateThread t2 = new UpdateThread(set, broker);\r\n+        \r\n+        t1.start();\r\n+        t2.start();\r\n+        t1.join();\r\n+        t2.join();\r\n+        \r\n+        if (t1.error != null)\r\n+            throw t1.error;\r\n+        if (t2.error != null)\r\n+            throw t2.error;\r\n+        \r\n+        assertEquals(102, set.size());\r\n+    }\r\n+    \r\n+    public void testSequenceGenerator() {\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        \r\n+        // make sure the sequence generator creates separate\r\n+        // instances.\r\n+        for (int i = 0; i < 100; i++) {\r\n+            //FIXME jthomas\r\n+            /*assertEquals(((Number) pm.getIdentitySequence(SeqD.class).\r\n+                    next()).longValue() + 1,\r\n+                    ((Number) pm.getIdentitySequence(SeqD.class).\r\n+                    getIncrement()).longValue());\r\n+             \r\n+             */\r\n+        }\r\n+        // make sure the sequence generate is not the same as is\r\n+        // used elsewhere\r\n+        \r\n+        for (int j = 0; j < 100; j++) {\r\n+            //FIXME\r\n+            /*\r\n+            assertNotEquals(new Long(((Number) pm.getIdentitySequence\r\n+                    (SeqA.class).getIncrement()).longValue() + 1),\r\n+                    pm.getIdentitySequence(SeqD.class).next());\r\n+             */\r\n+        }\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //main();\r\n+    }\r\n+    private Map getProps() {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.Sequence\", \"db-class(TableName=JDO_CLASS_SEQUENCE\");\r\n+        return props;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+    private static class UpdateThread\r\n+            extends Thread {\r\n+        \r\n+        private Set _set = null;\r\n+        private Broker _broker = null;\r\n+        public Exception error = null;\r\n+        \r\n+        public UpdateThread(Set set, Broker broker) {\r\n+            _set = set;\r\n+            _broker = broker;\r\n+        }\r\n+        \r\n+        public void run() {\r\n+            try {\r\n+                ClassMapping mapping =\r\n+                        ((JDBCConfiguration) _broker.getConfiguration()).\r\n+                        getMappingRepositoryInstance().\r\n+                        getMapping(SeqD.class, null, true);\r\n+                ClassTableJDBCSeq seq = (ClassTableJDBCSeq)\r\n+                _broker.getIdentitySequence(mapping);\r\n+                for (int i = 0; i < 51; i++)\r\n+                    _set.add(seq.next(_broker, mapping));\r\n+            } catch (Exception e) {\r\n+                error = e;\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"dcb726263df8881f37b43bcf1035c316934b2277","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestClassSequenceFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,208 @@\n+/*\r\n+ * TestClassSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 12:21 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+import java.util.*;\r\n+import javax.sql.DataSource;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest;\r\n+\r\n+\r\n+public class TestClassSequenceFactory extends BaseJDBCTest{\r\n+    \r\n+\r\n+    private static Map _sysprops = new HashMap();\r\n+    \r\n+    Broker _broker;\r\n+    \r\n+    /** Creates a new instance of TestClassSequenceFactory */\r\n+    public TestClassSequenceFactory() {\r\n+    }\r\n+    public TestClassSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    public void setUp()\r\n+    throws Exception {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.fromProperties(getProperties());\r\n+        if (!adjustConfiguration(conf))\r\n+            return;\r\n+        \r\n+        String driver = conf.getConnectionDriverName().toLowerCase();\r\n+        String [] sql = null;\r\n+        \r\n+        if (driver.indexOf(\"oracle\") >= 0) {\r\n+            sql = new String []{\r\n+                \"create sequence seqa_seq\",\r\n+                \"create sequence seqb_seq\"\r\n+            };\r\n+        }\r\n+        \r\n+        if (sql == null)\r\n+            return;\r\n+        \r\n+        DataSource ds = conf.getDataSource2(null);\r\n+        Connection c = ds.getConnection();\r\n+        Statement s = null;\r\n+        try {\r\n+            s = c.createStatement();\r\n+            for (int i = 0; i < sql.length; i++) {\r\n+                try {\r\n+                    s.execute(sql[i]);\r\n+                } catch (SQLException sqe) {\r\n+                }\r\n+            }\r\n+        } finally {\r\n+            if (s != null)\r\n+                try {\r\n+                    s.close();\r\n+                } catch (Exception e) {\r\n+                }\r\n+        }\r\n+        \r\n+        _broker = getBrokerFactory().newBroker();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Tests that all sequence numbers are unique and in order.\r\n+     */\r\n+    public void testSequence()\r\n+    throws Exception {\r\n+        Set set = new HashSet();\r\n+        \r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.fromProperties(getProperties());\r\n+        if (!adjustConfiguration(conf))\r\n+            return;\r\n+        Thread t1 = new UpdateThread(set, conf);\r\n+        Thread t2 = new UpdateThread(set, conf);\r\n+        \r\n+        t1.start();\r\n+        t2.start();\r\n+        t1.join();\r\n+        t2.join();\r\n+        \r\n+        assertEquals(102, set.size());\r\n+    }\r\n+    \r\n+    public void testExtensions()\r\n+    throws Exception {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.fromProperties(getProperties());\r\n+        if (!adjustConfiguration(conf))\r\n+            return;\r\n+        \r\n+        ClassMapping aMapping = conf.getMappingRepositoryInstance().\r\n+                getMapping(SeqA.class, null, true);\r\n+        ClassMapping bMapping = conf.getMappingRepositoryInstance().\r\n+                getMapping(SeqB.class, null, true);\r\n+        ClassMapping cMapping = conf.getMappingRepositoryInstance().\r\n+                getMapping(SeqC.class, null, true);\r\n+        DataSource ds = conf.getDataSource2(null);\r\n+        \r\n+        // hold a and c and start b\r\n+        \r\n+        Seq seq = conf.getSequenceInstance();\r\n+        long aid = ((Long) seq.next(_broker, aMapping)).longValue();\r\n+        for (int i = 0; i < 5; i++)\r\n+            seq.next(_broker, bMapping);\r\n+        \r\n+        assertEquals(new Long(aid + 1), seq.next(_broker, aMapping));\r\n+        assertEquals(new Long(aid + 2), seq.next(_broker, cMapping));\r\n+    }\r\n+    \r\n+    /**\r\n+     * Pass in a mutable configuration\r\n+     * <p/>\r\n+     * return true if useable.\r\n+     */\r\n+    private boolean adjustConfiguration(JDBCConfiguration conf) {\r\n+        String driver = conf.getConnectionDriverName();\r\n+        if (driver == null)\r\n+            return false;\r\n+        driver = driver.toLowerCase();\r\n+        if (driver.indexOf(\"oracle\") >= 0) {\r\n+            conf.setSequence(ClassTableJDBCSeq.class.getName());\r\n+            return true;\r\n+        }\r\n+        \r\n+        return false;\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+//        main();\r\n+    }\r\n+    \r\n+    \r\n+    private class UpdateThread\r\n+            extends Thread {\r\n+        \r\n+        private JDBCConfiguration _conf;\r\n+        private Set _set = null;\r\n+        \r\n+        public UpdateThread(Set set, JDBCConfiguration conf) {\r\n+            _set = set;\r\n+            _conf = conf;\r\n+        }\r\n+        \r\n+        public void run() {\r\n+            DataSource ds = _conf.getDataSource2(null);\r\n+            try {\r\n+                Seq seq = _conf.getSequenceInstance();\r\n+                ClassMapping mapping = _conf.getMappingRepositoryInstance().\r\n+                        getMapping(SeqA.class, null, true);\r\n+                for (int i = 0; i < 51; i++)\r\n+                    _set.add(seq.next(_broker, mapping));\r\n+            } catch (Exception e) {\r\n+                throw new RuntimeException(e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"96fbeabb26b0985eef47e5498f0277e81ed216fd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDBSequenceFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * TestDBSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:24 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import javax.sql.DataSource;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestDBSequenceFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    private Broker _broker;\r\n+    \r\n+    /** Creates a new instance of TestDBSequenceFactory */\r\n+    public TestDBSequenceFactory() {\r\n+    }\r\n+\r\n+    public TestDBSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that all sequence numbers are unique and in order.\r\n+     * Will fail for dbs without pessimistic locking.\r\n+     */\r\n+    public void testSequence()\r\n+        throws Exception {\r\n+        _broker = getBrokerFactory().newBroker();\r\n+\r\n+        Set set = Collections.synchronizedSet(new HashSet());\r\n+        Thread t1 = new UpdateThread(set);\r\n+        Thread t2 = new UpdateThread(set);\r\n+\r\n+        t1.start();\r\n+        t2.start();\r\n+        t1.join(5 * 60 * 1000);\r\n+        t2.join(5 * 60 * 1000);\r\n+\r\n+        assertFalse(t1.isAlive());\r\n+        assertFalse(t2.isAlive());\r\n+\r\n+        assertEquals(102, set.size());\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        //main();\r\n+    }\r\n+\r\n+    private class UpdateThread\r\n+        extends Thread {\r\n+\r\n+        private Set _set = null;\r\n+\r\n+        public UpdateThread(Set set) {\r\n+            _set = set;\r\n+        }\r\n+\r\n+        public void run() {\r\n+            try {\r\n+                JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+                TableJDBCSeq seq = new TableJDBCSeq();\r\n+                seq.setConfiguration(conf);\r\n+                seq.startConfiguration();\r\n+                seq.endConfiguration();\r\n+                DataSource ds = conf.getDataSource2(null);\r\n+                for (int i = 0; i < 51; i++)\r\n+                    _set.add(seq.next(_broker, \r\n+                        conf.getMetaDataRepositoryInstance().\r\n+                        getMetaData(RuntimeTest1.class, null, true)));\r\n+            } catch (Exception e) {\r\n+                throw new RuntimeException(e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"43653bd154480997983ea66df9a244d31bf4741f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestDynamicSchemaFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * TestDynamicSchemaFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:34 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.sql.Types;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.Discriminator;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.meta.Version;\r\n+import org.apache.openjpa.jdbc.schema.DynamicSchemaFactory;\r\n+import org.apache.openjpa.jdbc.schema.Schemas;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestDynamicSchemaFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    private ClassMapping _mapping = null;    \r\n+    \r\n+    /** Creates a new instance of TestDynamicSchemaFactory */\r\n+    public TestDynamicSchemaFactory() {\r\n+    }\r\n+    public TestDynamicSchemaFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        JDBCConfiguration conf = new JDBCConfigurationImpl();\r\n+        conf.setSchemaFactory(DynamicSchemaFactory.class.getName());\r\n+        MappingRepository repos = conf.newMappingRepositoryInstance();\r\n+        _mapping = repos.getMapping(MappingTest1.class, null, true);\r\n+    }\r\n+\r\n+    public void testClassMapping() {\r\n+        Table table = _mapping.getTable();\r\n+        assertEquals(\"MAPPINGTEST1\", table.getName().toUpperCase());\r\n+        assertEquals(1, table.getPrimaryKey().getColumns().length);\r\n+        int type = table.getPrimaryKey().getColumns()[0].getType();\r\n+        assertEquals(Schemas.getJDBCName(type), Types.INTEGER, type);\r\n+    }\r\n+\r\n+    public void testIndicators() {\r\n+        Version vers = _mapping.getVersion();\r\n+        assertNotNull(vers);\r\n+        assertEquals(\"MAPPINGTEST1\", vers.getColumns()[0].getTable().\r\n+            getName().toUpperCase());\r\n+        assertEquals(Types.INTEGER, vers.getColumns()[0].getType());\r\n+\r\n+        Discriminator cls = _mapping.getDiscriminator();\r\n+        assertNotNull(cls);\r\n+        assertEquals(\"MAPPINGTEST1\", cls.getColumns()[0].getTable().\r\n+            getName().toUpperCase());\r\n+        assertEquals(Types.VARCHAR, cls.getColumns()[0].getType());\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+       // main(TestDynamicSchemaFactory.class);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"4590a1df7b5a01928c9f0664a30e908367cbe9f3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestJDBCListener.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,83 @@\n+/*\r\n+ * TestJDBCListener.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:38 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.lib.jdbc.AbstractJDBCListener;\r\n+import org.apache.openjpa.lib.jdbc.JDBCEvent;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestJDBCListener extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    public static boolean commitOccurred;    \r\n+    \r\n+    /** Creates a new instance of TestJDBCListener */\r\n+    public TestJDBCListener() {\r\n+    }\r\n+\r\n+    public TestJDBCListener(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testJDBCListener() {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.jdbc.JDBCListeners\", Listener.class.getName());\r\n+        \r\n+        OpenJPAEntityManagerFactory factory =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+\r\n+        commitOccurred = false;\r\n+        OpenJPAEntityManager pm = factory.createEntityManager();     \r\n+        \r\n+        pm.getTransaction().begin();\r\n+        assertFalse(commitOccurred);\r\n+        pm.persist(new RuntimeTest1(\"Listener test\", 99));\r\n+        pm.getTransaction().commit();\r\n+        assertTrue(\"Commit event should have occurred, but did not\",\r\n+            commitOccurred);\r\n+        pm.close();\r\n+    }\r\n+    \r\n+    public static class Listener\r\n+        extends AbstractJDBCListener {\r\n+\r\n+        public void beforeCommit(JDBCEvent event) {\r\n+            commitOccurred = true;\r\n+        }\r\n+    }    \r\n+}\r"},{"sha":"91d5bc665948ec4222b716c8c200935bac1be452","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestLazySchemaFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * TestLazySchemaFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 1:47 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.schema.LazySchemaFactory;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestLazySchemaFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+       \r\n+    private SchemaGroup _group = null;\r\n+    private boolean _fks = true;\r\n+    \r\n+    /** Creates a new instance of TestLazySchemaFactory */\r\n+    public TestLazySchemaFactory() {\r\n+    }\r\n+\r\n+    public TestLazySchemaFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        // see if the dict supports foreign keys; mysql can support them, but\r\n+        // can't detect keys added through alter table commands, which is what\r\n+        // kodo uses\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        _fks = conf.getDBDictionaryInstance().supportsForeignKeys\r\n+            && getCurrentPlatform() != AbstractTestCase.Platform.MYSQL;\r\n+\r\n+        LazySchemaFactory factory = new LazySchemaFactory();\r\n+        factory.setConfiguration(conf);\r\n+        factory.setPrimaryKeys(true);\r\n+        factory.setIndexes(true);\r\n+        factory.setForeignKeys(true);\r\n+        _group = factory;\r\n+    }\r\n+\r\n+    public void testLazySchemaFactory() {\r\n+        // should read tables 1 and 2...\r\n+        Table table = _group.findTable(\"T1\");\r\n+        assertNotNull(table);\r\n+        Table table2 = _group.findTable(\"t1\");\r\n+        assertTrue(table == table2);\r\n+\r\n+        int expectedColumns = 2;\r\n+\r\n+        // Sybase has an extra \"UNQ_INDEX\" column.\r\n+        if (getCurrentPlatform() == AbstractTestCase.Platform.SYBASE)\r\n+            expectedColumns++;\r\n+\r\n+        assertEquals(expectedColumns, table.getColumns().length);\r\n+        if (_fks)\r\n+            assertEquals(1, table.getForeignKeys().length);\r\n+\r\n+        table2 = _group.findTable(\"T2\");\r\n+        assertNotNull(table2);\r\n+        if (_fks)\r\n+            assertTrue(table.getForeignKeys()[0].getPrimaryKeyColumns()[0].\r\n+                getTable() == table2);\r\n+\r\n+        assertNull(table.getSchema().getTable(\"T3\"));\r\n+\r\n+        // should read table 3 only...\r\n+        Table table3 = _group.findTable(\"T3\");\r\n+        assertNotNull(table3);\r\n+        assertTrue(table.getSchema().getTable(\"T3\") == table3);\r\n+        if (_fks)\r\n+            assertTrue(table3.getForeignKeys()[0].getPrimaryKeyColumns()[0].\r\n+                getTable() == table);\r\n+\r\n+        assertNull(table3.getSchema().getTable(\"T4\"));\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        //main(TestLazySchemaFactory.class);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"241dd8f7bdcc00ae851530aab7340c3fd4d98299","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestPerClassSequenceFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * TestPerClassSequenceFactory.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:25 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestPerClassSequenceFactory extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+   \r\n+    /** Creates a new instance of TestPerClassSequenceFactory */\r\n+    public TestPerClassSequenceFactory() {\r\n+    }\r\n+    public TestPerClassSequenceFactory(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testPerClassSequenceFactory()\r\n+        throws Exception {\r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.Sequence\", \"table\");\r\n+        \r\n+        OpenJPAEntityManagerFactory factory =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+\r\n+        JDBCConfiguration conf = (JDBCConfiguration)\r\n+            factory.getConfiguration();\r\n+        ClassMapping mapping1 = conf.getMappingRepositoryInstance().\r\n+            getMapping(RuntimeTest1.class, null, true);\r\n+        ClassMapping mapping2 = conf.getMappingRepositoryInstance().\r\n+            getMapping(PerClassTestObject.class, null, true);\r\n+        ClassMapping mapping3 = conf.getMappingRepositoryInstance().\r\n+            getMapping(PerClassTestObject2.class, null, true);\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        /*\r\n+        Sequence s1 = pm.getIdentitySequence(mapping1.getDescribedType());\r\n+        Sequence s2 = pm.getIdentitySequence(mapping2.getDescribedType());\r\n+        Sequence s3 = pm.getFieldSequence(mapping3.getDescribedType(), \"age\");\r\n+        assertTrue(((SequenceImpl) s1).getDelegate()\r\n+            instanceof TableJDBCSeq);\r\n+        assertTrue(((SequenceImpl) s2).getDelegate().toString(),\r\n+            ((SequenceImpl) s2).getDelegate()\r\n+                instanceof DummySequenceFactory);\r\n+        assertTrue(((SequenceImpl) s2).getDelegate().toString(),\r\n+            ((SequenceImpl) s3).getDelegate()\r\n+                instanceof DummySequenceFactory);\r\n+         */\r\n+    }\r\n+\r\n+    public static class DummySequenceFactory\r\n+        implements Seq {\r\n+\r\n+        private long _val = 1;\r\n+\r\n+        public void setType(int type) {\r\n+        }\r\n+\r\n+        public Object next(StoreContext ctx, ClassMetaData meta) {\r\n+            _val++;\r\n+            return current(ctx, meta);\r\n+        }\r\n+\r\n+        public Object current(StoreContext ctx, ClassMetaData meta) {\r\n+            return new Long(_val);\r\n+        }\r\n+\r\n+        public void allocate(int num, StoreContext ctx, ClassMetaData meta) {\r\n+        }\r\n+\r\n+        public void close() {\r\n+        }\r\n+    }\r\n+    \r\n+    \r\n+}\r"},{"sha":"e1698e456406fa619fde9abd5542acb01d0f1df9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","status":"added","additions":331,"deletions":0,"changes":331,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchema.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,331 @@\n+/*\r\n+ * TestSchema.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:36 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.schema.Index;\r\n+import org.apache.openjpa.jdbc.schema.PrimaryKey;\r\n+import org.apache.openjpa.jdbc.schema.Schema;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSchema extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+    \r\n+    private Schema _schema = new SchemaGroup().addSchema(\"schema\");\r\n+    \r\n+    /** Creates a new instance of TestSchema */\r\n+    public TestSchema() {\r\n+    }\r\n+    public TestSchema(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link Schema} class.\r\n+     */\r\n+    public void testSchema() {\r\n+        assertEquals(\"schema\", _schema.getName());\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"schema\"));\r\n+\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"table1\"));\r\n+        Table table1 = _schema.addTable(\"table1\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"table1\"));\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"table2\"));\r\n+\r\n+        Table[] tables = _schema.getTables();\r\n+        assertEquals(2, tables.length);\r\n+        assertEquals(table1, tables[0]);\r\n+        assertEquals(table2, tables[1]);\r\n+        assertEquals(table1, _schema.getTable(\"table1\"));\r\n+        assertEquals(table2, _schema.getTable(\"table2\"));\r\n+        assertNull(_schema.getTable(\"table3\"));\r\n+\r\n+        assertTrue(_schema.removeTable(table1));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"table1\"));\r\n+        assertNull(_schema.getTable(\"table1\"));\r\n+        assertEquals(table2, _schema.getTable(\"table2\"));\r\n+        assertTrue(_schema.removeTable(table2));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"table2\"));\r\n+        assertNull(_schema.getTable(\"table2\"));\r\n+        assertEquals(0, _schema.getTables().length);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link Table} class.\r\n+     */\r\n+    public void testTable() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        assertEquals(_schema, table.getSchema());\r\n+        assertEquals(\"table\", table.getName());\r\n+\r\n+        assertTrue(!table.isNameTaken(\"schema\"));\r\n+        assertTrue(table.isNameTaken(\"table\"));\r\n+\r\n+        // pk testing\r\n+        assertNull(table.getPrimaryKey());\r\n+        PrimaryKey pk = table.addPrimaryKey(\"pk\");\r\n+        assertEquals(table, pk.getTable());\r\n+        assertEquals(pk, table.getPrimaryKey());\r\n+        assertTrue(!table.isNameTaken(\"pk\"));\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"pk\"));\r\n+\r\n+        table.removePrimaryKey();\r\n+        assertNull(table.getPrimaryKey());\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"pk\"));\r\n+\r\n+        // column testing\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        assertTrue(table.isNameTaken(\"c1\"));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"c1\"));\r\n+        assertEquals(table, c1.getTable());\r\n+        Column[] cols = table.getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(c2, cols[0]);\r\n+        assertEquals(c1, cols[1]);\r\n+\r\n+        assertEquals(c1, table.getColumn(\"c1\"));\r\n+        assertEquals(c2, table.getColumn(\"c2\"));\r\n+\r\n+        assertTrue(table.removeColumn(c1));\r\n+        assertTrue(!table.isNameTaken(\"c1\"));\r\n+        assertNull(table.getColumn(\"c1\"));\r\n+\r\n+        // foreign key testing\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"fk\"));\r\n+        assertTrue(!table.isNameTaken(\"fk\"));\r\n+        assertEquals(table, fk.getTable());\r\n+        ForeignKey[] fks = table.getForeignKeys();\r\n+        assertEquals(1, fks.length);\r\n+        assertEquals(fk, fks[0]);\r\n+\r\n+        assertTrue(table.removeForeignKey(fk));\r\n+        assertTrue(!_schema.getSchemaGroup().isNameTaken(\"fk\"));\r\n+        assertEquals(0, table.getForeignKeys().length);\r\n+\r\n+        // index testing\r\n+        Index idx = table.addIndex(\"idx\");\r\n+        assertTrue(_schema.getSchemaGroup().isNameTaken(\"idx\"));\r\n+        assertTrue(!table.isNameTaken(\"idx\"));\r\n+        assertEquals(table, idx.getTable());\r\n+        Index[] idxs = table.getIndexes();\r\n+        assertEquals(1, idxs.length);\r\n+        assertEquals(idx, idxs[0]);\r\n+\r\n+        assertEquals(idx, table.getIndex(\"idx\"));\r\n+        assertTrue(table.removeIndex(idx));\r\n+        assertTrue(!table.isNameTaken(\"idx\"));\r\n+        assertNull(table.getIndex(\"idx\"));\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link Index} class.\r\n+     */\r\n+    public void testIndex() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+\r\n+        Index idx = table.addIndex(\"idx\");\r\n+        try {\r\n+            idx.addColumn(c3);\r\n+            fail(\"Allowed addition of column of another table.\");\r\n+        } catch (RuntimeException re) {\r\n+        }\r\n+\r\n+        Column[] cols = idx.getColumns();\r\n+        assertEquals(0, cols.length);\r\n+\r\n+        idx.addColumn(c1);\r\n+        idx.addColumn(c2);\r\n+        cols = idx.getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(c1, cols[0]);\r\n+        assertEquals(c2, cols[1]);\r\n+\r\n+        assertTrue(idx.removeColumn(c1));\r\n+        cols = idx.getColumns();\r\n+        assertEquals(1, cols.length);\r\n+        assertEquals(c2, cols[0]);\r\n+        assertTrue(idx.removeColumn(c2));\r\n+        cols = idx.getColumns();\r\n+        assertEquals(0, cols.length);\r\n+\r\n+        assertTrue(!idx.isUnique());\r\n+        idx.setUnique(true);\r\n+        assertTrue(idx.isUnique());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test the {@link ForeignKey} class.\r\n+     */\r\n+    public void testForeignKey() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+        Column c4 = table2.addColumn(\"c4\");\r\n+\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        try {\r\n+            fk.join(c4, c2);\r\n+            fail(\"Allowed addition of column of another table.\");\r\n+        } catch (RuntimeException re) {\r\n+        }\r\n+\r\n+        Column[] cols = fk.getColumns();\r\n+        Column[] pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(0, cols.length);\r\n+        assertEquals(0, pkCols.length);\r\n+        PrimaryKey pk = table2.addPrimaryKey(\"pk\");\r\n+        pk.addColumn(c3);\r\n+        fk.join(c1, c3);\r\n+        pk.addColumn(c4);\r\n+        fk.join(c2, c4);\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(c1, cols[0]);\r\n+        assertEquals(c2, cols[1]);\r\n+        assertEquals(c3, pkCols[0]);\r\n+        assertEquals(c4, pkCols[1]);\r\n+\r\n+        assertTrue(fk.removeJoin(c1));\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(1, cols.length);\r\n+        assertEquals(1, pkCols.length);\r\n+        assertEquals(c2, cols[0]);\r\n+        assertEquals(c4, pkCols[0]);\r\n+        assertTrue(fk.removeJoin(c2));\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(0, cols.length);\r\n+        assertEquals(0, pkCols.length);\r\n+\r\n+        assertEquals(ForeignKey.ACTION_NONE, fk.getDeleteAction());\r\n+        assertTrue(fk.isLogical());\r\n+        fk.setDeleteAction(ForeignKey.ACTION_RESTRICT);\r\n+        assertEquals(ForeignKey.ACTION_RESTRICT, fk.getDeleteAction());\r\n+        assertFalse(fk.isLogical());\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests the {@link SchemaGroup} class.\r\n+     */\r\n+    public void testSchemaGroup() {\r\n+        SchemaGroup group = _schema.getSchemaGroup();\r\n+        assertEquals(_schema, group.getSchema(\"schema\"));\r\n+        Table foo1 = _schema.addTable(\"foo\");\r\n+\r\n+        Schema schema2 = group.addSchema(\"schema2\");\r\n+        assertNull(schema2.getTable(\"foo\"));\r\n+        Table foo2 = schema2.addTable(\"foo\");\r\n+        assertEquals(foo2, schema2.getTable(\"foo\"));\r\n+        assertEquals(foo1, _schema.getTable(\"foo\"));\r\n+\r\n+        assertEquals(foo1, group.findTable(\"schema.foo\"));\r\n+        assertEquals(foo2, group.findTable(\"schema2.foo\"));\r\n+    }\r\n+\r\n+    /**\r\n+     * Test primary key removal.\r\n+     */\r\n+    public void testPrimaryKeyRemoval() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+        Column c4 = table2.addColumn(\"c4\");\r\n+        PrimaryKey pk = table2.addPrimaryKey(\"pk\");\r\n+        pk.addColumn(c3);\r\n+        pk.addColumn(c4);\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        fk.join(c1, c3);\r\n+        fk.join(c2, c4);\r\n+\r\n+        table2.removePrimaryKey();\r\n+        assertNull(pk.getTable());\r\n+        assertNull(table2.getPrimaryKey());\r\n+        assertEquals(0, table.getForeignKeys().length);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test column removal.\r\n+     */\r\n+    public void testColumnRemoval() {\r\n+        Table table = _schema.addTable(\"table\");\r\n+        Column c1 = table.addColumn(\"c1\");\r\n+        Column c2 = table.addColumn(\"c2\");\r\n+        PrimaryKey pk = table.addPrimaryKey(\"pk\");\r\n+        pk.addColumn(c1);\r\n+        Index idx1 = table.addIndex(\"idx1\");\r\n+        idx1.addColumn(c1);\r\n+        Index idx2 = table.addIndex(\"idx2\");\r\n+        idx2.addColumn(c1);\r\n+        idx2.addColumn(c2);\r\n+\r\n+        Table table2 = _schema.addTable(\"table2\");\r\n+        Column c3 = table2.addColumn(\"c3\");\r\n+        Column c4 = table2.addColumn(\"c4\");\r\n+        pk = table2.addPrimaryKey(\"pk2\");\r\n+        pk.addColumn(c3);\r\n+        ForeignKey fk = table.addForeignKey(\"fk\");\r\n+        fk.join(c1, c3);\r\n+\r\n+        table.removeColumn(c1);\r\n+        assertNull(table.getPrimaryKey());\r\n+        assertNull(table.getIndex(\"idx1\"));\r\n+        assertEquals(1, idx2.getColumns().length);\r\n+        assertEquals(0, table.getForeignKeys().length);\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        //main(TestSchema.class);\r\n+\t}\r\n+    \r\n+}\r"},{"sha":"f0c75ea595cad26baac7ec945544800150216a84","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaClone.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,65 @@\n+/*\r\n+ * TestSchemaClone.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:40 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSchemaClone extends TestXMLSchemaParser {\r\n+    \r\n+    /** Creates a new instance of TestSchemaClone */\r\n+    public TestSchemaClone() {\r\n+    }\r\n+    \r\n+    public TestSchemaClone(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    protected SchemaGroup getSchemaGroup()\r\n+    throws Exception {\r\n+        // parse in the schema group, then clone it, and test against clone\r\n+        SchemaGroup group = parseSchemaGroup();\r\n+        return (SchemaGroup) group.clone();\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //main(TestSchemaClone.class);\r\n+    }\r\n+    \r\n+}\r"},{"sha":"57bc6daa007bf92dd5c28ae7e6dc6cf922d67593","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSchemaGenerator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,131 @@\n+/*\r\n+ * TestSchemaGenerator.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:57 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.io.StringWriter;\r\n+import java.sql.Connection;\r\n+import java.sql.DatabaseMetaData;\r\n+import java.util.*;\r\n+import javax.sql.DataSource;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.MappingRepository;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.SchemaTool;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+\r\n+public class TestSchemaGenerator extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    /** Creates a new instance of TestSchemaGenerator */\r\n+    public TestSchemaGenerator(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+    \r\n+    public void DBMetadataTest()\r\n+    throws Exception {\r\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\r\n+        getEmf();\r\n+        //FIXME jthomas\r\n+        \r\n+        //ClassMapping cm = (ClassMapping) KodoJDOHelper.getMetaData\r\n+        //    (pmf, RuntimeTest1.class);\r\n+        ClassMapping cm =null;\r\n+        JDBCConfiguration conf = (JDBCConfiguration) getConfiguration();\r\n+        \r\n+        DataSource ds = (DataSource) conf.getDataSource2(null);\r\n+        Connection c = ds.getConnection();\r\n+        DatabaseMetaData meta = c.getMetaData();\r\n+        DBDictionary dict = conf.getDBDictionaryInstance();\r\n+        \r\n+        String schema = cm.getTable().getSchema().getName();\r\n+        Table[] tables = dict.getTables(meta, c.getCatalog(), schema,\r\n+                cm.getTable().getName(), c);\r\n+        assertEquals(1, tables.length);\r\n+        \r\n+        Column[] columns = dict.getColumns(meta, c.getCatalog(), schema,\r\n+                cm.getTable().getName(), null, c);\r\n+        for (int i = 0; i < columns.length; i++)\r\n+            System.out.println(\"### \" + columns[i].getName());\r\n+    }\r\n+    \r\n+    public void testSchemaGen()\r\n+    throws Exception {\r\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\r\n+        getEmf();\r\n+        OpenJPAEntityManager pm = pmf.createEntityManager();\r\n+        JDBCConfiguration con = (JDBCConfiguration) ((OpenJPAEntityManagerSPI) pm).getConfiguration();\r\n+        DBDictionary dict = con.getDBDictionaryInstance();\r\n+        MappingRepository repos = con.getMappingRepositoryInstance();\r\n+        ClassMapping cm = repos.getMapping(RuntimeTest1.class,\r\n+                pm.getClassLoader(), true);\r\n+        String schemas = cm.getTable().getSchema().getName();\r\n+        if (schemas == null)\r\n+            schemas = \"\";\r\n+        schemas += \".\" + cm.getTable().getName();\r\n+        \r\n+        Map props=new HashMap();\r\n+        props.put(\"openjpa.jdbc.Schemas\", schemas);\r\n+        \r\n+        OpenJPAEntityManagerFactory kpmf =(OpenJPAEntityManagerFactory)\r\n+                getEmf(props);\r\n+        JDBCConfiguration conf = (JDBCConfiguration) ((OpenJPAEntityManagerFactorySPI) kpmf).getConfiguration();\r\n+        \r\n+        StringWriter sw = new StringWriter();\r\n+        \r\n+        SchemaTool.Flags flags = new SchemaTool.Flags();\r\n+        flags.writer = sw;\r\n+        flags.primaryKeys = true;\r\n+        flags.foreignKeys = true;\r\n+        flags.indexes = true;\r\n+        flags.openjpaTables = true;\r\n+        flags.action = SchemaTool.ACTION_REFLECT;\r\n+        \r\n+        SchemaTool.run(conf, new String[0], flags,\r\n+                getClass().getClassLoader());\r\n+        \r\n+        sw.flush();\r\n+        String data = sw.toString();\r\n+        assertTrue(data.length() > 0);\r\n+    }\r\n+}\r"},{"sha":"3941581e0585de47b0b653ba96d667fc7b2af629","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestSequenceGeneratorEnsureCapacityCall.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.util.*;\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.jdbc.kernel.ClassTableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.kernel.TableJDBCSeq;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.kernel.Seq;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.meta.SequenceMetaData;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestSequenceGeneratorEnsureCapacityCall \r\n+        extends org.apache.openjpa.persistence.jdbc.kernel.TestSQLListenerTestCase{\r\n+   \r\n+    \r\n+    \r\n+    /** Creates a new instance of TestSequenceGeneratorEnsureCapacityCall */\r\n+    public TestSequenceGeneratorEnsureCapacityCall(String name) \r\n+    {\r\n+    \tsuper(name);\r\n+    }\r\n+\r\n+    // class SeqA uses the default sequence factory.\r\n+    public void testDBSequenceFactory() {\r\n+        TableJDBCSeq seq = (TableJDBCSeq) seqForClass(SeqA.class);\r\n+        incrementTest(SeqA.class, seq.getAllocate());\r\n+    }\r\n+\r\n+    // class SeqD uses the db-class sequence factory.\r\n+    public void testClassDBSequenceFactory() {\r\n+        ClassTableJDBCSeq seq = (ClassTableJDBCSeq) seqForClass(SeqD.class);\r\n+        incrementTest(SeqD.class, seq.getAllocate());\r\n+    }\r\n+\r\n+    private void incrementTest(Class cls, int generatorIncrement) {\r\n+        // guaranteed to be more than a single batch, so ensureCapacity should\r\n+        // do its thing.\r\n+        int amountToIncrement = generatorIncrement * 2;\r\n+\r\n+        OpenJPAEntityManager pm =(OpenJPAEntityManager)currentEntityManager();\r\n+        //FIXME jthomas\r\n+        //Sequence s = pm.getIdentitySequence(cls);\r\n+        Sequence s =null;\r\n+        s.setAllocate(amountToIncrement);\r\n+\r\n+        sql.clear();\r\n+        for (int i = 0; i < amountToIncrement; i++) {\r\n+            s.getIncrement();\r\n+            assertEquals(\"SQL list should have been empty on sequence\"\r\n+                + \" fetch #\" + i + \" of #\" + amountToIncrement\r\n+                + \", but contained: \" + sql, 0, sql.size());\r\n+        }\r\n+    }\r\n+\r\n+    private Seq seqForClass(Class cls) {\r\n+        OpenJPAConfiguration conf = getConfiguration();\r\n+        ClassMetaData meta = conf.getMetaDataRepositoryInstance().getMetaData\r\n+            (cls, null, true);\r\n+        SequenceMetaData smeta = meta.getIdentitySequenceMetaData();\r\n+        return (smeta == null) ? conf.getSequenceInstance()\r\n+            : smeta.getInstance(null);\r\n+    }\r\n+}\r"},{"sha":"c3cf9d49e04237d7f54fa2273d430293558a0f00","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","status":"added","additions":239,"deletions":0,"changes":239,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,239 @@\n+/*\r\n+ * TestXMLSchemaParser.java\r\n+ *\r\n+ * Created on October 6, 2006, 2:42 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.io.IOException;\r\n+import java.sql.Types;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n+import org.apache.openjpa.jdbc.schema.Column;\r\n+import org.apache.openjpa.jdbc.schema.ForeignKey;\r\n+import org.apache.openjpa.jdbc.schema.Index;\r\n+import org.apache.openjpa.jdbc.schema.PrimaryKey;\r\n+import org.apache.openjpa.jdbc.schema.Schema;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.Sequence;\r\n+import org.apache.openjpa.jdbc.schema.Table;\r\n+import org.apache.openjpa.jdbc.schema.XMLSchemaParser;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestXMLSchemaParser extends org.apache.openjpa.persistence.jdbc.kernel.BaseJDBCTest{\r\n+        \r\n+    protected JDBCConfiguration conf = null;\r\n+    private SchemaGroup _group = null;\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestXMLSchemaParser */\r\n+    public TestXMLSchemaParser() {\r\n+    }\r\n+    \r\n+    public TestXMLSchemaParser(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    public void setUp()\r\n+    throws Exception {\r\n+        this.conf = new JDBCConfigurationImpl();\r\n+        _group = getSchemaGroup();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Parses the schema group from the schema XML\r\n+     * resources in this package.\r\n+     */\r\n+    protected SchemaGroup parseSchemaGroup()\r\n+    throws IOException {\r\n+        XMLSchemaParser parser = new SCMSchemaParser(this.conf);\r\n+        parser.parse(TestXMLSchemaParser.class, false);\r\n+        parser.parse(TestSchema.class, false);    // will go up to package level\r\n+        return parser.getSchemaGroup();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Return the schema group to use in testing.  Returns\r\n+     * {@link #parseSchemaGroup} by default.\r\n+     */\r\n+    protected SchemaGroup getSchemaGroup()\r\n+    throws Exception {\r\n+        return parseSchemaGroup();\r\n+    }\r\n+    \r\n+    /**\r\n+     * Checks the generated schema group for accuracy.\r\n+     */\r\n+    public void testSchemaParsing() {\r\n+        assertEquals(2, _group.getSchemas().length);\r\n+        assertEquals(\"SCHEMA1\", _group.getSchema(\"SCHEMA1\").getName());\r\n+        assertEquals(\"SCHEMA2\", _group.getSchema(\"SCHEMA2\").getName());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Checks the pased sequences.\r\n+     */\r\n+    public void testSequenceParsing() {\r\n+        Schema schema = _group.getSchema(\"SCHEMA1\");\r\n+        assertEquals(2, schema.getSequences().length);\r\n+        assertEquals(0, _group.getSchema(\"SCHEMA2\").getSequences().length);\r\n+        \r\n+        Sequence seq1 = schema.getSequence(\"SEQ1\");\r\n+        assertNotNull(seq1);\r\n+        assertEquals(\"SEQ1\", seq1.getName());\r\n+        assertEquals(seq1, _group.findSequence(\"SEQ1\"));\r\n+        assertEquals(seq1, _group.findSequence(\"SCHEMA1.SEQ1\"));\r\n+        assertEquals(1, seq1.getInitialValue());\r\n+        assertEquals(1, seq1.getIncrement());\r\n+        assertEquals(0, seq1.getAllocate());\r\n+        \r\n+        Sequence seq2 = schema.getSequence(\"SEQ2\");\r\n+        assertNotNull(seq2);\r\n+        assertEquals(3, seq2.getInitialValue());\r\n+        assertEquals(5, seq2.getIncrement());\r\n+        assertEquals(50, seq2.getAllocate());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Checks table and column parsing.\r\n+     */\r\n+    public void testTableColumnParsing() {\r\n+        Schema schema1 = _group.getSchema(\"SCHEMA1\");\r\n+        Table[] tables = schema1.getTables();\r\n+        assertEquals(2, tables.length);\r\n+        assertEquals(\"TABLE1\", tables[0].getName());\r\n+        assertEquals(\"TABLE3\", tables[1].getName());\r\n+        \r\n+        Column[] cols = tables[0].getColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(\"COL1\", cols[0].getName());\r\n+        assertEquals(\"COL2\", cols[1].getName());\r\n+        assertEquals(Types.VARCHAR, cols[0].getType());\r\n+        assertEquals(Types.FLOAT, cols[1].getType());\r\n+        assertTrue(cols[0].isNotNull());\r\n+        assertTrue(!cols[1].isNotNull());\r\n+        assertEquals(\"def\", cols[0].getDefault());\r\n+        assertNull(cols[1].getDefault());\r\n+    }\r\n+    \r\n+    /**\r\n+     * Test that primary keys are resolved correctly.\r\n+     */\r\n+    public void testPrimaryKeyParsing() {\r\n+        Table table = _group.getSchema(\"SCHEMA1\").getTable(\"TABLE1\");\r\n+        PrimaryKey pk = table.getPrimaryKey();\r\n+        assertNotNull(pk);\r\n+        assertEquals(\"PK1\", pk.getName());\r\n+        assertTrue(pk.isLogical());\r\n+        assertEquals(1, pk.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL1\"), pk.getColumns()[0]);\r\n+        \r\n+        table = _group.getSchema(\"SCHEMA2\").getTable(\"TABLE2\");\r\n+        pk = table.getPrimaryKey();\r\n+        assertNotNull(pk);\r\n+        assertEquals(\"PK2\", pk.getName());\r\n+        assertTrue(!pk.isLogical());\r\n+        assertEquals(2, pk.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL1\"), pk.getColumns()[0]);\r\n+        assertEquals(table.getColumn(\"COL2\"), pk.getColumns()[1]);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Test that indexes are resolved correctly.\r\n+     */\r\n+    public void testIndexParsing() {\r\n+        Table table = _group.getSchema(\"SCHEMA1\").getTable(\"TABLE1\");\r\n+        Index idx = table.getIndex(\"IDX1\");\r\n+        assertNotNull(idx);\r\n+        assertTrue(idx.isUnique());\r\n+        assertEquals(1, idx.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL2\"), idx.getColumns()[0]);\r\n+        \r\n+        table = _group.getSchema(\"SCHEMA2\").getTable(\"TABLE2\");\r\n+        idx = table.getIndex(\"IDX2\");\r\n+        assertNotNull(idx);\r\n+        assertTrue(!idx.isUnique());\r\n+        assertEquals(2, idx.getColumns().length);\r\n+        assertEquals(table.getColumn(\"COL1\"), idx.getColumns()[0]);\r\n+        assertEquals(table.getColumn(\"COL2\"), idx.getColumns()[1]);\r\n+    }\r\n+    \r\n+    /**\r\n+     * Test that foreign keys are resolved correctly.\r\n+     */\r\n+    public void testForeignKeyParsing() {\r\n+        Table table1 = _group.getSchema(\"SCHEMA1\").getTable(\"TABLE1\");\r\n+        Table table2 = _group.getSchema(\"SCHEMA2\").getTable(\"TABLE2\");\r\n+        \r\n+        ForeignKey fk = table1.getForeignKeys()[0];\r\n+        assertEquals(\"FK1\", fk.getName());\r\n+        assertNotNull(fk);\r\n+        assertEquals(ForeignKey.ACTION_RESTRICT, fk.getDeleteAction());\r\n+        Column[] cols = fk.getColumns();\r\n+        Column[] pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(2, cols.length);\r\n+        assertEquals(2, pkCols.length);\r\n+        assertEquals(table1.getColumn(\"COL1\"), cols[0]);\r\n+        assertEquals(table2.getColumn(\"COL1\"), pkCols[0]);\r\n+        assertEquals(table1.getColumn(\"COL2\"), cols[1]);\r\n+        assertEquals(table2.getColumn(\"COL2\"), pkCols[1]);\r\n+        \r\n+        fk = table2.getForeignKeys()[0];\r\n+        assertEquals(\"FK2\", fk.getName());\r\n+        assertNotNull(fk);\r\n+        assertEquals(ForeignKey.ACTION_NONE, fk.getDeleteAction());\r\n+        cols = fk.getColumns();\r\n+        pkCols = fk.getPrimaryKeyColumns();\r\n+        assertEquals(1, cols.length);\r\n+        assertEquals(1, pkCols.length);\r\n+        assertEquals(table2.getColumn(\"COL2\"), cols[0]);\r\n+        assertEquals(table1.getColumn(\"COL1\"), pkCols[0]);\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //main(TestXMLSchemaParser.class);\r\n+    }\r\n+    \r\n+    public static class SCMSchemaParser\r\n+            extends XMLSchemaParser {\r\n+        \r\n+        public SCMSchemaParser(JDBCConfiguration conf) {\r\n+            super(conf);\r\n+            setSuffix(\".scm\");\r\n+        }\r\n+    }\r\n+    \r\n+}\r"},{"sha":"7c12fd9af41fdf4bee7a3afcb313c0fd0cbbca1c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/schema/TestXMLSchemaSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * TestXMLSchemaSerializer.java\r\n+ *\r\n+ * Created on October 6, 2006, 4:47 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.schema;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.ByteArrayOutputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.io.OutputStreamWriter;\r\n+import java.util.*;\r\n+import org.apache.openjpa.jdbc.schema.SchemaGroup;\r\n+import org.apache.openjpa.jdbc.schema.SchemaParser;\r\n+import org.apache.openjpa.jdbc.schema.SchemaSerializer;\r\n+import org.apache.openjpa.jdbc.schema.XMLSchemaParser;\r\n+import org.apache.openjpa.jdbc.schema.XMLSchemaSerializer;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.*;\r\n+\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public class TestXMLSchemaSerializer extends TestXMLSchemaParser{\r\n+    \r\n+    \r\n+    /** Creates a new instance of TestXMLSchemaSerializer */\r\n+    public TestXMLSchemaSerializer() {\r\n+    }\r\n+    \r\n+    \r\n+    public TestXMLSchemaSerializer(String test) {\r\n+        super(test);\r\n+    }\r\n+    \r\n+    protected SchemaGroup getSchemaGroup()\r\n+    throws Exception {\r\n+        // parse in the schema group, then serialize it to a buffer, then\r\n+        // recreate it and test againt that to make sure it's the same as the\r\n+        // original\r\n+        SchemaGroup group = parseSchemaGroup();\r\n+        SchemaSerializer ser = new XMLSchemaSerializer(this.conf);\r\n+        ser.addAll(group);\r\n+        \r\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+        ser.serialize(new OutputStreamWriter(out), ser.PRETTY);\r\n+        byte[] bytes = out.toByteArray();\r\n+        \r\n+        SchemaParser parser = new XMLSchemaParser(this.conf);\r\n+        parser.parse(new InputStreamReader\r\n+                (new ByteArrayInputStream(bytes)), \"bytes\");\r\n+        return parser.getSchemaGroup();\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        //   main(TestXMLSchemaSerializer.class);\r\n+    }\r\n+}\r"},{"sha":"c8a7aa77d8a8cfad53842b6f482dfe033476bbda","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraint.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,79 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.SQLSniffer;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+/**\r\n+ * Tests unique constraints specified via annotations for primary/secondary\r\n+ * table, sequence generator, join tables have been defined on database by\r\n+ * examining DDL statements.\r\n+ * \r\n+ * @see resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml defines\r\n+ * the ORM mapping.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestUniqueConstraint extends SQLListenerTestCase {\r\n+    @Override\r\n+    public void setUp(Object... props) {\r\n+    \tsuper.setUp(DROP_TABLES, UniqueA.class, UniqueB.class);    \t\t\t    \r\n+    }\r\n+    \r\n+\tpublic void testMapping() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\t\t// The above should trigger schema definition\r\n+\t\t\r\n+\t\tList<String> sqls = super.sql;\r\n+\t\t\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_A\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a1, a2\\\\)\", \r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a3, a4\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_B\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(b1, b2\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_SECONDARY\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(sa1\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_GENERATOR\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(GEN1, GEN2\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_JOINTABLE\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(FK_A, FK_B\\\\)\");\r\n+\t}\r\n+\t\r\n+\tvoid assertSQLFragnments(List<String> list, String... keys) {\r\n+\t\tif (SQLSniffer.matches(list, keys))\r\n+\t\t\treturn;\r\n+\t\tint i = 0;\r\n+\t\tfor (String sql : list) {\r\n+\t\t\ti++;\r\n+\t\t\tSystem.out.println(\"\" + i + \":\" + sql);\r\n+\t\t}\r\n+\t\tfail(\"None of the \" + sql.size() + \" SQL contains all keys \"\r\n+\t\t\t\t+ Arrays.toString(keys));\r\n+\t}\r\n+}\r"},{"sha":"c4a1f684e39a38debbc447c7947792b09318fca5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/TestUniqueConstraintWithXMLDescriptor.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.SQLSniffer;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+/**\r\n+ * Tests unique constraints specified via XML Descriptor for primary/secondary\r\n+ * table, sequence generator, join tables have been defined on database by\r\n+ * examining DDL statements.\r\n+ * \r\n+ * @see resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml \r\n+ * defines the ORM mapping. \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestUniqueConstraintWithXMLDescriptor extends SQLListenerTestCase {\r\n+\t@Override\r\n+\tpublic void setUp(Object... props) {\r\n+\t\tsuper.setUp(DROP_TABLES, UniqueA.class, UniqueB.class);\r\n+\t}\r\n+\r\n+\tprotected String getPersistenceUnitName() {\r\n+\t\treturn \"test-unique-constraint\";\r\n+\t}\r\n+\r\n+\tpublic void testMapping() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\t\t// The above should trigger schema definition\r\n+\r\n+\t\tList<String> sqls = super.sql;\r\n+\t\tassertFalse(\"No SQL DDL registered\", sqls.isEmpty());\r\n+\r\n+\t\t// Following verification techniques is fragile as databases DDL\r\n+\t\t// syntax vary greatly on UNIQUE CONSTRAINT\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_A_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a1x, a2x\\\\)\", \r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(a3x, a4x\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_B_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(b1x, b2x\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_SECONDARY_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(sa1x\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_GENERATOR_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(GEN1_XML, GEN2_XML\\\\)\");\r\n+\t\tassertSQLFragnments(sqls, \"CREATE TABLE UNIQUE_JOINTABLE_XML\",\r\n+\t\t\t\t\"UNIQUE \\\\w*\\\\(FK_A_XML, FK_B_XML\\\\)\");\r\n+\t}\r\n+\r\n+\tvoid assertSQLFragnments(List<String> list, String... keys) {\r\n+\t\tif (SQLSniffer.matches(list, keys))\r\n+\t\t\treturn;\r\n+\t\tint i = 0;\r\n+\t\tfor (String sql : list) {\r\n+\t\t\ti++;\r\n+\t\t\tSystem.out.println(\"\" + i + \":\" + sql);\r\n+\t\t}\r\n+\t\tfail(\"None of the \" + sql.size() + \" SQL contains all keys \"\r\n+\t\t\t\t+ Arrays.toString(keys));\r\n+\t}\r\n+}\r"},{"sha":"d6a5582450874a0981163f77b6cb31f2a7b17adc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.JoinTable;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.SecondaryTable;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.UniqueConstraint;\r\n+\r\n+/**\r\n+ * Data structures for testing unique constraint settings\r\n+ * on ORM Annotations.\r\n+ * @UniqueConstraint annotation is declared at class-level with @Table, \r\n+ * @SecondaryTable annotations and at field-level with @JoinTable annotation.\r\n+ * \r\n+ * The columns included in unique constraint must be non-nullable. This is \r\n+ * recommended that the non-nullability of the column is explictly set by the\r\n+ * user, though the implementation forces a column to non-nullable as a column\r\n+ * is included in a unique constraint.\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+@Table(name=\"UNIQUE_A\",\r\n+\t   uniqueConstraints={@UniqueConstraint(columnNames={\"a1\",\"a2\"}),\r\n+\t\t                  @UniqueConstraint(columnNames={\"a3\",\"a4\"})})\r\n+@SecondaryTable(name=\"UNIQUE_SECONDARY\",\r\n+\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"sa1\"}))\r\n+\r\n+public class UniqueA {\r\n+\t@Id\r\n+\tprivate int aid;\r\n+\r\n+\t@Column(unique=true, nullable=false)\r\n+\tprivate int a1;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int a2;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int a3;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int a4;\r\n+\t\r\n+\t\r\n+\tprivate int a5;\r\n+\tprivate int a6;\r\n+\t\r\n+\t@Column(table=\"UNIQUE_SECONDARY\", nullable=false)\r\n+\tprivate short sa1;\r\n+\t@Column(table=\"UNIQUE_SECONDARY\")\r\n+\tprivate short sa2;\r\n+\t\r\n+\t@ManyToMany\r\n+\t@JoinTable(name=\"UNIQUE_JOINTABLE\",\r\n+\t\t\tjoinColumns={@JoinColumn(name=\"FK_A\", nullable=false, \r\n+\t\t\t\t\treferencedColumnName=\"aid\")},\r\n+\t\t\tinverseJoinColumns={@JoinColumn(name=\"FK_B\", nullable=false, \r\n+\t\t\t\t\treferencedColumnName=\"bid\")},\r\n+\t\t\tuniqueConstraints=@UniqueConstraint(columnNames={\"FK_A\",\"FK_B\"}))\r\n+\tprivate Collection<UniqueB> bs;\r\n+}\r"},{"sha":"db39129af913dec44a696e96e111484626d8849c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/unique/UniqueB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jdbc.unique;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+@Entity\r\n+@Table(name=\"UNIQUE_B\",\r\n+\t   uniqueConstraints={@UniqueConstraint(columnNames={\"b1\",\"b2\"})})\r\n+public class UniqueB {\r\n+\t@Id\r\n+\t@GeneratedValue(strategy=GenerationType.TABLE, generator=\"testGenerator\")\r\n+\t@TableGenerator(name=\"testGenerator\", table=\"UNIQUE_GENERATOR\", \r\n+\t\t\tpkColumnName=\"GEN1\", valueColumnName=\"GEN2\",\r\n+\t\t\tuniqueConstraints={@UniqueConstraint(columnNames={\"GEN1\",\"GEN2\"})})\r\n+\tprivate int bid;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate int b1;\r\n+\t@Column(nullable=false)\r\n+\tprivate int b2;\r\n+}\r"},{"sha":"b67b47cb2a2cc7ff6985121df7aa5a5c75980f09","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestBulkUpdate extends AbstractTestCase {\r\n+\r\n+    public TestBulkUpdate(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+        deleteAll(Entity2.class);\r\n+    }\r\n+\r\n+    public void testSimpleBulkUpdate() {\r\n+        for (int i = 1; i < 5; i++)\r\n+            testSimpleBulkUpdate(i);\r\n+    }\r\n+\r\n+    public void testSimpleBulkUpdate(int num) {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        for (int i = 0; i < num; i++) {\r\n+            Entity1 e = new Entity1(i, \"value1\", i);\r\n+            em.persist(e);\r\n+        }\r\n+        endTx(em);\r\n+\r\n+        // test update\r\n+        startTx(em);\r\n+        Query updateQuery1 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = 'value2', e.intField = 2\"\r\n+            + \" where e.stringField = :val\").\r\n+            setParameter(\"val\", \"value1\");\r\n+        assertEquals(num, updateQuery1.executeUpdate());\r\n+        assertEquals(0, updateQuery1.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with parameter\r\n+        startTx(em);\r\n+        Query updateQuery2 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = :newval where e.stringField = :val\").\r\n+            setParameter(\"val\", \"value2\").\r\n+            setParameter(\"newval\", \"value3\");\r\n+        assertEquals(num, updateQuery2.executeUpdate());\r\n+        assertEquals(0, updateQuery2.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with 2 parameters\r\n+        startTx(em);\r\n+        Query updateQuery3 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = :newval, e.intField = 999\"\r\n+            + \" where e.stringField = :val\").\r\n+            setParameter(\"val\", \"value3\").\r\n+            setParameter(\"newval\", \"value4\");\r\n+        assertEquals(num, updateQuery3.executeUpdate());\r\n+        assertEquals(0, updateQuery3.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with null value\r\n+        startTx(em);\r\n+        Query updateQuery4 = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.stringField = :nullval, e.intField = :intval\"\r\n+            + \" where e.stringField = :val\"\r\n+            + \" and e.intField = 999\").\r\n+            setParameter(\"val\", \"value4\").\r\n+            setParameter(\"intval\", new Integer(987)).\r\n+            setParameter(\"nullval\", null);\r\n+        assertEquals(num, updateQuery4.executeUpdate());\r\n+        assertEquals(0, updateQuery4.executeUpdate()); // should be updated\r\n+        endTx(em);\r\n+\r\n+        // test update with field refernece in update value\r\n+        // ### this seems to not be working\r\n+        startTx(em);\r\n+        Query updateFieldValue = em.createQuery(\"update Entity1 e\"\r\n+            + \" set e.intField = e.intField + 1\");\r\n+        assertEquals(num, updateFieldValue.executeUpdate());\r\n+        endTx(em);\r\n+\r\n+        startTx(em);\r\n+        Query deleteQuery = em.createQuery\r\n+            (\"delete from Entity1 e where e.stringField = :val\").\r\n+            setParameter(\"val\", null);\r\n+        assertEquals(num, deleteQuery.executeUpdate());\r\n+        assertEquals(0, deleteQuery.executeUpdate());\r\n+        endTx(em);\r\n+\r\n+        endEm(em);\r\n+    }\r\n+}\r\n+\r"},{"sha":"72685e2f878293e767ee9388603a16dc502b7083","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,213 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.common.apps.Course;\r\n+import org.apache.openjpa.persistence.common.apps.ArtCourse;\r\n+import org.apache.openjpa.persistence.common.apps.Department;\r\n+import org.apache.openjpa.persistence.common.apps.Student;\r\n+\r\n+public class TestEJBClauses extends AbstractTestCase {\r\n+\r\n+    public TestEJBClauses(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Course.class);\r\n+        deleteAll(Student.class);\r\n+        deleteAll(Department.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String name = \"\";\r\n+        List<Course> clist = new ArrayList<Course>();\r\n+        List<Department> dlist = new ArrayList<Department>();\r\n+\r\n+        for (int i = 0; i < 5; i++) {\r\n+            Course curr = new Course(\"Math \" + i, i * 2, i);\r\n+            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\r\n+            Department durr = new Department(\"CompSci\" + i, null, i + 2);\r\n+            clist.add(curr);\r\n+            clist.add(acurr);\r\n+            dlist.add(durr);\r\n+        }\r\n+\r\n+        Student stud = new Student(\"Jonathan\", clist, dlist);\r\n+        Student stud2 = new Student(\"Stam\", null, dlist);\r\n+        Student stud3 = new Student(\"John\", clist, null);\r\n+        Student stud4 = new Student(\"Bill\", null, null);\r\n+\r\n+        em.persist(stud);\r\n+        em.persist(stud2);\r\n+        em.persist(stud3);\r\n+        em.persist(stud4);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFromClause1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT o.name FROM Student o\";\r\n+\r\n+        List result = em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(4, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFromClause2() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT NEW apps.ArtCourse(e.name)\" +\r\n+            \"FROM Student e\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(4, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFromClause3() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT o.name \" +\r\n+            \"FROM Student o, Course c \" +\r\n+            \"WHERE o.course IS NULL AND o.department IS NULL\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+        String uno = (String) ls.get(0);\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(1, ls.size());\r\n+        assertEquals(\"Bill\", uno);\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testWhereClause1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct s.name \" +\r\n+            \"FROM Student s, Course d \" +\r\n+            \"WHERE d.courseId >= 4 AND s.department IS NOT NULL\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testWhereClause2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct s.name \" +\r\n+            \"FROM Student s \" +\r\n+            \"WHERE\" +\r\n+            \" Exists(SELECT c FROM s.course c WHERE c.name LIKE 'Math%')\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+        assertTrue(ls.contains(\"Jonathan\"));\r\n+        assertTrue(ls.contains(\"John\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testClauseRangeVar() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT DISTINCT s FROM Student s, Student s2 \" +\r\n+            \"WHERE s.name = 'John' AND s2.name = 'Jonathan'\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(1, ls.size());\r\n+\r\n+        Student ret = (Student) ls.get(0);\r\n+        assertEquals(\"John\", ret.getName());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testClausePathExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String failure = \"SELECT DISTINCT s \" +\r\n+            \"FROM Student s WHERE\" +\r\n+            \" s.department.name = 'CompSci1'\";\r\n+        // Changes related to OPENJPA-485 allows this query to pass.\r\n+        // The query is not kosher as it does navigate through a \r\n+        // collection-valued-path-expression (s.department.name) where\r\n+        // department is a Collection. \r\n+        // But we allow this because of the convenience of the query expression \r\n+        List ls = em.createQuery(failure).getResultList();\r\n+        assertFalse(ls.isEmpty());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testClausePathExpr2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String success =\r\n+            \"SELECT DISTINCT d.name FROM Student AS s, IN(s.department) d \";\r\n+\r\n+        List ls2 = em.createQuery(success).getResultList();\r\n+\r\n+        assertNotNull(ls2);\r\n+        assertEquals(5, ls2.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testCollMemberDecl() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String colldec = \"SELECT DISTINCT s.name \" +\r\n+            \"FROM Student s,\" +\r\n+            \" IN(s.department) d\" +\r\n+            \" WHERE d.name = 'CompSci2'\";\r\n+\r\n+        List ls = em.createQuery(colldec).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+        assertTrue(ls.contains(\"Jonathan\"));\r\n+        assertTrue(ls.contains(\"Stam\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * GroupBy , OrderBy clause is tested by testejbqlfunction under\r\n+     * functional directory.\r\n+     */\r\n+}\r"},{"sha":"9695742a18526c87eb7f2e1d274a71a415531007","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,163 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBDeleteUpdateImpl extends AbstractTestCase {\r\n+\r\n+    public TestEJBDeleteUpdateImpl() {\r\n+    }\r\n+\r\n+    public TestEJBDeleteUpdateImpl(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 runt1 = new RuntimeTest1(1);\r\n+        runt1.setStringField(\"runt1\");\r\n+        runt1.setSelfOneOne(new RuntimeTest1(2));\r\n+        RuntimeTest2 runt2 = new RuntimeTest2(3);\r\n+        runt2.setStringField(\"runt2\");\r\n+\r\n+        em.persist(runt1);\r\n+        em.persist(runt2);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 ret = em.find(RuntimeTest1.class, 1);\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"runt1\", ret.getStringField());\r\n+        assertNotNull(ret.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate =\r\n+            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\r\n+        int updatedEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"runner13\")\r\n+            .setParameter(\"stdfield\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, updatedEntities);\r\n+\r\n+        endTx(em);\r\n+\r\n+        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, 1);\r\n+        em.refresh(ret2);\r\n+\r\n+        assertNotNull(ret2);\r\n+        assertEquals(\"runner13\", ret2.getStringField());\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testUpdate2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\r\n+            \"SET x.stringField = :strngfld \" +\r\n+            \"WHERE x.stringField = :field \" +\r\n+            \"AND x.selfOneOne \" +\r\n+            \"IS NOT NULL\";\r\n+\r\n+        int upEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"upd\")\r\n+            .setParameter(\"field\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, upEntities);\r\n+\r\n+        RuntimeTest1 inst = em.find(RuntimeTest1.class, 1);\r\n+        em.refresh(inst);\r\n+\r\n+        assertNotNull(inst);\r\n+//\t\tassertEquals(\"upd\", inst.getStringField());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate = \"DELETE FROM RuntimeTest1 s \" +\r\n+            \"WHERE s.stringField = :strngfld\";\r\n+        int delEntity = em.createQuery(ejbdelUpdate)\r\n+            .setParameter(\"strngfld\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, delEntity);\r\n+\r\n+        RuntimeTest1 del = em.find(RuntimeTest1.class, 1);\r\n+        assertNull(del);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate =\r\n+            \"DELETE FROM RuntimeTest1 r WHERE r.stringField = ?1\";\r\n+        Query query = em.createQuery(ejbdelUpdate);\r\n+\r\n+        query.setParameter(1, \"runt1\");\r\n+        int ok = query.executeUpdate();\r\n+\r\n+        assertEquals(1, ok);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"68601d39e5c3e385b45f10ab18e81ae709c5ee96","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBPolymorphicQuery extends AbstractTestCase {\r\n+\r\n+    public TestEJBPolymorphicQuery(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int run1 = 10;\r\n+        int run2 = 15;\r\n+\r\n+        for (int i = 0; i < run1; i++) {\r\n+            RuntimeTest1 rt = new RuntimeTest1(i);\r\n+            rt.setStringField(\"foo \" + i);\r\n+            em.persist(rt);\r\n+        }\r\n+\r\n+        for (int i = 10; i < run2; i++) {\r\n+            em.persist(new RuntimeTest2(i));\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * Ensures that when a select query is ran against an entity at the top of the hierarchy\r\n+     * that the result is its instances and that of all its subclass.\r\n+     */\r\n+    public void testPolymorphicSelect() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testPolymorphicDelete() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int l = em.createQuery(\"Delete from RuntimeTest1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"7c38762075b285db895983c3d68693b636ef071e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,152 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.clauses;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.common.apps.Entity2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+@NamedQuery(name = \"setParam1\",\r\n+    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+public class TestEJBQueryInterface extends AbstractTestCase {\r\n+\r\n+    public TestEJBQueryInterface(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        int instNum = 10;\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        //create and persist multiple entity1 instances\r\n+        for (int i = 0; i < instNum; i++) {\r\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n+            ent.setEntity2Field(ent2);\r\n+            em.persist(ent);\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testResultList() {\r\n+        EntityManager em = currentEntityManager();\r\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertEquals(10, list.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGetSingleList() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String curr = 2 + \"\";\r\n+\r\n+        Entity1 ret =\r\n+            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\r\n+                .getSingleResult();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"string2\", ret.getStringField());\r\n+        assertEquals(4, ret.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExecuteUpdate() {\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 2\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret, 1);\r\n+\r\n+        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 22\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret2, 0);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetMaxResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setMaxResults(5)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(5, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetFirstResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setFirstResult(3)\r\n+            .getResultList();\r\n+\r\n+        Entity1 ent = (Entity1) l.get(0);\r\n+\r\n+        assertNotNull(ent);\r\n+        assertEquals(\"string3\", ent.getStringField());\r\n+        assertEquals(5, ent.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    // Tests Binding an argument to a named parameter.\r\n+    // pk, the named parameter --Not working yet--\r\n+    public void xxxtestSetParameter1() {\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        String curr = 2 + \"\";\r\n+\r\n+        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        ret = em.createNamedQuery(\"setParam1\")\r\n+            .setParameter(\"pk\", curr)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        endTx(em);\r\n+    }\r\n+}\r"},{"sha":"4e71644f474655b0a556f74e3849467981f950a8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"added","additions":323,"deletions":0,"changes":323,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,323 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.expressions;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.*;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBQLCondExpression extends AbstractTestCase {\r\n+\r\n+    private int userid1, userid2, userid3, userid4, userid5;\r\n+\r\n+    public TestEJBQLCondExpression(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CompUser.class);\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Address[] add =\r\n+            new Address[]{ new Address(\"43 Sansome\", \"SF\", \"USA\", \"94104\"),\r\n+                new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\r\n+                new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\r\n+                new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\r\n+                new Address(\"23 Bellflower\", \"Ogui\", \"NIGERIA\", \"02000\") };\r\n+\r\n+        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 40, true);\r\n+        CompUser user2 = createUser(\"Shannon\", \"PC\", add[1], 36, false);\r\n+        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\r\n+        CompUser user4 = createUser(\"Jacob\", \"LINUX\", add[3], 10, true);\r\n+        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\r\n+\r\n+        em.persist(user1);\r\n+        userid1 = user1.getUserid();\r\n+        em.persist(user2);\r\n+        userid2 = user2.getUserid();\r\n+        em.persist(user3);\r\n+        userid3 = user3.getUserid();\r\n+        em.persist(user4);\r\n+        userid4 = user4.getUserid();\r\n+        em.persist(user5);\r\n+        userid5 = user5.getUserid();\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNothing() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT o FROM CompUser o\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"the size of the list is not 5\", 5, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testBetweenExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age BETWEEN 19 AND 40 AND o.computerName = 'PC'\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 2, result.size());\r\n+        assertTrue(\"result dont contain shannon\", result.contains(\"Shannon\"));\r\n+        assertTrue(\"result dont contain ugo\", result.contains(\"Ugo\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNotBetweenExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age NOT BETWEEN 19 AND 40 AND o.computerName= 'PC'\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age IN (29, 40, 10)\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(3, result.size());\r\n+        assertTrue(\"seetha is not in the list\", result.contains(\"Seetha\"));\r\n+        assertTrue(\"jacob is not in the list\", result.contains(\"Jacob\"));\r\n+        assertTrue(\"famzy is not in the list\", result.contains(\"Famzy\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNotInExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age NOT IN (29, 40, 10)\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(2, result.size());\r\n+        assertTrue(result.contains(\"Ugo\"));\r\n+        assertTrue(result.contains(\"Shannon\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLikeExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%' AND o.computerName NOT IN ('PC')\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n+        query =\r\n+            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%o_' AND o.computerName NOT IN ('UNIX')\";\r\n+\r\n+        result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+\r\n+        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE '_J%'\";\r\n+\r\n+        result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n+        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE ?1 ESCAPE '|'\";\r\n+\r\n+        result = em.createQuery(query).setParameter(1, \"%|_%\").getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNullExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.age IS NOT NULL AND o.computerName = 'PC' \";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"the list size is not 2\", 2, result.size());\r\n+        assertTrue(\"the result doesnt contain ugo\", result.contains(\"Ugo\"));\r\n+        assertTrue(\"the result doesnt contain shannon\",\r\n+            result.contains(\"Shannon\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNullExpr2() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.address.country IS NULL\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testIsEmptyExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS NOT EMPTY\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testIsEmptyExpr2() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS EMPTY\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 5, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * TO BE TESTED LATER WITH A DIFF DATABASE\r\n+     * public void testMemberOfExpr(){}\r\n+     */\r\n+\r\n+    public void testExistExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT DISTINCT o.name FROM CompUser o WHERE EXISTS\" +\r\n+            \" (SELECT c FROM Address c WHERE c = o.address )\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"the list is null\", result);\r\n+        assertEquals(\"they are not equal\", 5, result.size());\r\n+        assertTrue(\"Seetha is not list\", result.contains(\"Seetha\"));\r\n+        assertTrue(\"Shannon is not list\", result.contains(\"Shannon\"));\r\n+        assertTrue(\"jacob is not list\", result.contains(\"Jacob\"));\r\n+        assertTrue(\"ugo is not list\", result.contains(\"Ugo\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testNotExistExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT DISTINCT o.name FROM CompUser o WHERE NOT EXISTS\" +\r\n+                \" (SELECT s FROM CompUser s WHERE s.address.country = o.address.country)\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testAnyExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT o.name FROM CompUser o WHERE o.address.zipcode = ANY (\" +\r\n+                \" SELECT s.computerName FROM CompUser s WHERE s.address.country IS NOT NULL )\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(\"list is null\", result);\r\n+        assertEquals(\"they are not equal\", 0, result.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testConstructorExpr() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT NEW org.apache.openjpa.persistence.common.apps.MaleUser(c.name, c.computerName, c.address, c.age, c.userid)\" +\r\n+                \" FROM CompUser c WHERE c.name = 'Seetha'\";\r\n+\r\n+        MaleUser male = (MaleUser) em.createQuery(query).getSingleResult();\r\n+\r\n+        assertNotNull(\"the list is null\", male);\r\n+        assertEquals(\"the names dont match\", \"Seetha\", male.getName());\r\n+        assertEquals(\"computer names dont match\", \"MAC\",\r\n+            male.getComputerName());\r\n+        assertEquals(\"the ages dont match\", 40, male.getAge());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public CompUser createUser(String name, String cName, Address add, int age,\r\n+        boolean isMale) {\r\n+        CompUser user = null;\r\n+        if (isMale) {\r\n+            user = new MaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        } else {\r\n+            user = new FemaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        }\r\n+        return user;\r\n+\t}\r\n+}\r"},{"sha":"670e08fefcea851e9347729243a44b6648064e52","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"added","additions":397,"deletions":0,"changes":397,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,397 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.functions;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.Address;\r\n+import org.apache.openjpa.persistence.common.apps.CompUser;\r\n+import org.apache.openjpa.persistence.common.apps.FemaleUser;\r\n+import org.apache.openjpa.persistence.common.apps.MaleUser;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBQLFunction extends AbstractTestCase {\r\n+\r\n+    private int userid1, userid2, userid3, userid4, userid5, userid6;\r\n+\r\n+    public TestEJBQLFunction(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CompUser.class);\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Address[] add = new Address[]{\r\n+            new Address(\"43 Sansome\", \"SF\", \"United-Kingdom\", \"94104\"),\r\n+            new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\r\n+            new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\r\n+            new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\r\n+            new Address(\"23 Bellflower\", \"Ogui\", null, \"02000\"),\r\n+            new Address(\"22 Montgomery\", \"SF\", null, \"50054\") };\r\n+\r\n+        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 36, true);\r\n+        CompUser user2 = createUser(\"Shannon \", \"PC\", add[1], 36, false);\r\n+        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\r\n+        CompUser user4 = createUser(\"_Jacob\", \"LINUX\", add[3], 10, true);\r\n+        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\r\n+        CompUser user6 = createUser(\"Shade\", \"UNIX\", add[5], 23, false);\r\n+\r\n+        em.persist(user1);\r\n+        userid1 = user1.getUserid();\r\n+        em.persist(user2);\r\n+        userid2 = user2.getUserid();\r\n+        em.persist(user3);\r\n+        userid3 = user3.getUserid();\r\n+        em.persist(user4);\r\n+        userid4 = user4.getUserid();\r\n+        em.persist(user5);\r\n+        userid5 = user5.getUserid();\r\n+        em.persist(user6);\r\n+        userid6 = user6.getUserid();\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testConcatSubStringFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid1);\r\n+        assertNotNull(\"user is null\", user);\r\n+        assertEquals(\"the name is not seetha\", \"Seetha\", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET e.name = \" +\r\n+            \"CONCAT('Ablahum', SUBSTRING(e.name, LOCATE('e', e.name), 4)) \" +\r\n+            \"WHERE e.name='Seetha'\";\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertEquals(\"the result is not 1\", 1, result);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertNotNull(\"the user is null\", user);\r\n+        assertEquals(\"the users name is not AblahumSeet\", \"Ablahumeeth\",\r\n+            user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testConcatFunc2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid1);\r\n+        assertNotNull(\"the user is null\", user);\r\n+        assertEquals(\"the users name is not seetha\", user.getName(), \"Seetha\");\r\n+\r\n+        String query = \"UPDATE CompUser e \" +\r\n+            \"SET e.name = \" +\r\n+            \"CONCAT('', '') WHERE e.name='Seetha'\";\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertEquals(1, result);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testTrimFunc3() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid2);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Shannon \", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET \" +\r\n+            \"e.name = Trim(e.name) WHERE \" +\r\n+            \"e.name='Shannon '\";\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        user = em.find(CompUser.class, userid2);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Shannon\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLowerFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid3);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Ugo\", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET \" +\r\n+            \"e.name = LOWER(e.name) WHERE e.name='Ugo'\";\r\n+\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        user = em.find(CompUser.class, userid3);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"ugo\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpperFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid3);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Ugo\", user.getName());\r\n+\r\n+        String query = \"UPDATE CompUser e SET \" +\r\n+            \"e.name = UPPER(e.name) WHERE e.name='Ugo'\";\r\n+\r\n+        int result = em.createQuery(query).executeUpdate();\r\n+\r\n+        user = em.find(CompUser.class, userid3);\r\n+        em.refresh(user);\r\n+        assertNotNull(user);\r\n+        assertEquals(\"UGO\", user.getName());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLengthFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT o.name \" +\r\n+            \"FROM CompUser o \" +\r\n+            \"WHERE LENGTH(o.address.country) = 3\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(\"Shannon \"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testArithmFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        CompUser user = em.find(CompUser.class, userid1);\r\n+\r\n+        assertNotNull(user);\r\n+        assertEquals(\"Seetha\", user.getName());\r\n+        assertEquals(36, user.getAge());\r\n+\r\n+        String query =\r\n+            \"UPDATE CompUser e SET e.age = ABS(e.age) WHERE e.name='Seetha'\";\r\n+        int num = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertNotNull(num);\r\n+        assertEquals(1, num);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertEquals(36, user.getAge());\r\n+\r\n+        //----------------------ABS Tested\r\n+\r\n+        query =\r\n+            \"UPDATE CompUser e SET e.age = SQRT(e.age) WHERE e.name='Seetha'\";\r\n+        num = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertNotNull(num);\r\n+        assertEquals(1, num);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertEquals(6, user.getAge());\r\n+\r\n+        //-------------------------SQRT Tested\r\n+\r\n+        query =\r\n+            \"UPDATE CompUser e SET e.age = MOD(e.age, 4) WHERE e.name='Seetha'\";\r\n+        num = em.createQuery(query).executeUpdate();\r\n+\r\n+        assertNotNull(num);\r\n+        assertEquals(1, num);\r\n+\r\n+        user = em.find(CompUser.class, userid1);\r\n+        em.refresh(user);\r\n+\r\n+        assertEquals(2, user.getAge());\r\n+\r\n+        //-------------------------MOD Tested\r\n+\r\n+        query = \"SELECT e.name FROM CompUser e WHERE SIZE(e.nicknames) = 6\";\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(0, result.size());\r\n+\r\n+        //------------------------SIZE Tested\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGroupByHavingClause() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT c.name FROM CompUser c GROUP BY c.name HAVING c.name LIKE 'S%'\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(3, result.size());\r\n+        assertTrue(result.contains(\"Shannon \"));\r\n+        assertTrue(result.contains(\"Shade\"));\r\n+        assertTrue(result.contains(\"Seetha\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testOrderByClause() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query =\r\n+            \"SELECT c.name FROM CompUser c WHERE c.name LIKE 'S%' ORDER BY c.name\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(3, result.size());\r\n+        assertTrue(result.contains(\"Shannon \"));\r\n+        assertTrue(result.contains(\"Seetha\"));\r\n+        assertTrue(result.contains(\"Shade\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testAVGAggregFunc() {\r\n+        /**\r\n+         * To be Tested: AVG, COUNT, MAX, MIN, SUM\r\n+         */\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT AVG(e.age) FROM CompUser e\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(25));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testCOUNTAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT COUNT(c.name) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(6l));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMAXAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT DISTINCT MAX(c.age) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(36));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMINAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT DISTINCT MIN(c.age) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(10));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSUMAggregFunc() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT SUM(c.age) FROM CompUser c\";\r\n+\r\n+        List result = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(result);\r\n+        assertEquals(1, result.size());\r\n+        assertTrue(result.contains(153l));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public CompUser createUser(String name, String cName, Address add, int age,\r\n+        boolean isMale) {\r\n+        CompUser user = null;\r\n+        if (isMale) {\r\n+            user = new MaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        } else {\r\n+            user = new FemaleUser();\r\n+            user.setName(name);\r\n+            user.setComputerName(cName);\r\n+            user.setAddress(add);\r\n+            user.setAge(age);\r\n+        }\r\n+        return user;\r\n+    }\r\n+}\r"},{"sha":"a9cd7048bbc47bba6d91dde4ecfd8e8f04b48928","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,180 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.jpql.joins;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.common.apps.ArtCourse;\r\n+import org.apache.openjpa.persistence.common.apps.Course;\r\n+import org.apache.openjpa.persistence.common.apps.Department;\r\n+import org.apache.openjpa.persistence.common.apps.Student;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBJoins extends AbstractTestCase {\r\n+\r\n+    public TestEJBJoins(String name) {\r\n+        super(name, \"jpqlclausescactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Course.class);\r\n+        deleteAll(Student.class);\r\n+        deleteAll(Department.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String name = \"\";\r\n+        List<Course> clist = new ArrayList<Course>();\r\n+        List<Department> dlist = new ArrayList<Department>();\r\n+\r\n+        for (int i = 0; i < 5; i++) {\r\n+            Course curr = new Course(\"Math \" + i, i * 2, i);\r\n+            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\r\n+            Department durr = new Department(\"CompSci\" + i, null, i + 2);\r\n+            clist.add(curr);\r\n+            clist.add(acurr);\r\n+            dlist.add(durr);\r\n+        }\r\n+\r\n+        Student stud = new Student(\"Jonathan\", clist, dlist);\r\n+        Student stud2 = new Student(\"Stam\", null, dlist);\r\n+        Student stud3 = new Student(\"John\", clist, null);\r\n+        Student stud4 = new Student(\"Bill\", null, null);\r\n+\r\n+        em.persist(stud);\r\n+        em.persist(stud2);\r\n+        em.persist(stud3);\r\n+        em.persist(stud4);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInnerJoin() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct o.name from Student o JOIN \" +\r\n+            \"o.course d WHERE d.name\" +\r\n+            \"='Math 4'\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+\r\n+        if (ls != null) {\r\n+            assertEquals(2, ls.size());\r\n+        }\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testOuterJoin() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT distinct s.name FROM Student \" +\r\n+            \"s LEFT JOIN s.department d\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(4, ls.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFetchJoin1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT s FROM Student s JOIN FETCH s.name\";\r\n+\r\n+        List ls = em.createQuery(query).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(4, ls.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testFetchJoin2() {\r\n+        EntityManager em = currentEntityManager();\r\n+        String query = \"SELECT s \" +\r\n+            \"FROM Student s \" +\r\n+            \"JOIN FETCH s.name d\";\r\n+\r\n+        try {\r\n+            List ls = em.createQuery(query).getResultList();\r\n+            fail(\r\n+                \"Not permitted to specify an id variable for entities ref. by the right side of fetch join\");\r\n+        }\r\n+        catch (Exception e) {\r\n+            //suppose to throw an exception..should not pass\r\n+        }\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testLeftOuterJoin() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String ljoin =\r\n+            \"SELECT DISTINCT s.name FROM Student s LEFT OUTER JOIN s.department d \" +\r\n+                \"WHERE d.name = 'CompSci2'\";\r\n+\r\n+        List ls = em.createQuery(ljoin).getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+\r\n+        assertTrue(ls.contains(\"Jonathan\"));\r\n+        assertTrue(ls.contains(\"Stam\"));\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInnerJoinFetch() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT s FROM Student \" +\r\n+            \"s JOIN FETCH s.department\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(2, ls.size());\r\n+\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testLeftJoinFetch() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        String query = \"SELECT s FROM Student \" +\r\n+            \"s LEFT JOIN FETCH s.department\";\r\n+\r\n+        List ls = (List) em.createQuery(query)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ls);\r\n+        assertEquals(4, ls.size());\r\n+\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"d84d131f77f17523da01295cd415083632362a05","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","status":"added","additions":207,"deletions":0,"changes":207,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,207 @@\n+/*\r\n+ * BaseKernelTest.java\r\n+ *\r\n+ * Created on October 9, 2006, 12:56 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.beans.BeanInfo;\r\n+import java.beans.Introspector;\r\n+import java.beans.PropertyDescriptor;\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.lang.reflect.Method;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.*;\r\n+import javax.management.IntrospectionException;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n+import java.lang.annotation.Annotation;\r\n+import junit.framework.*;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+\r\n+public abstract class BaseKernelTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase\r\n+{    \r\n+    private static Map _sysprops = new HashMap();    \r\n+    \r\n+    /** Creates a new instance of BaseKernelTest */\r\n+    public BaseKernelTest() {\r\n+    }\r\n+    \r\n+    public BaseKernelTest(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+    \r\n+    protected OpenJPAEntityManager getPM() {\r\n+        return currentEntityManager();\r\n+    }\r\n+    \r\n+    protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues) \r\n+    {\r\n+        OpenJPAEntityManager em = currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        if(em.getTransaction().isActive())\r\n+        {\r\n+            em.getTransaction().commit();\r\n+            em.setOptimistic(optimistic);\r\n+        }\r\n+\r\n+        return em;\r\n+    }\r\n+    \r\n+    protected Object persist(Object ob) {\r\n+        //FIXME  - this is just a workaround \r\n+        //  Broker broker = .getBrokerFactory().newBroker();\r\n+        Broker broker = JPAFacadeHelper.toBroker(currentEntityManager());\r\n+        broker.begin();\r\n+        broker.persist(ob, null);\r\n+        Object id = broker.getObjectId(ob);\r\n+        broker.commit();\r\n+        broker.close();\r\n+        return id;\r\n+    }\r\n+    \r\n+\r\n+    protected Properties getProperties() {\r\n+        return getProperties(null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the runtime properties, optionally overriding or setting\r\n+     * some via the given array, which should be in the form\r\n+     * { key, val, key, val, ... }.\r\n+     */\r\n+    protected synchronized Properties getProperties(String[] props) {\r\n+        Properties p = new Properties(System.getProperties());\r\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n+        if (str != null && str.length() > 0) {\r\n+            // cache system properties to reduce load on file system\r\n+            Properties loaded = (Properties) _sysprops.get(str);\r\n+            if (loaded == null) {\r\n+                loaded = new Properties();\r\n+                ConfigurationProvider cp = (ConfigurationProvider) Configurations.getProperty(str, null);\r\n+\r\n+                if (cp != null)\r\n+                    loaded.putAll(cp.getProperties());\r\n+                _sysprops.put(str, loaded);\r\n+            }\r\n+            p.putAll(loaded);\r\n+        }\r\n+\r\n+        for (int i = 0; props != null && i < props.length; i += 2) {\r\n+            if (props[i + 1] != null) {\r\n+                // remove any duplicate kodo/openjpa property so we don't clash\r\n+                if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n+                else if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n+\r\n+                p.setProperty(props[i], props[i + 1]);\r\n+            } else {\r\n+                p.remove(props[i]);\r\n+            }\r\n+        }\r\n+        return p;\r\n+    }\r\n+//\r\n+//\r\n+//    /**\r\n+//     * Assert that the given List contain the exact same\r\n+//     * elements. This is different than the normal List contract, which\r\n+//     * states that list1.equals(list2) if each element e1.equals(e2).\r\n+//     * This method asserts that e1 == n2.\r\n+//     */\r\n+//    public static void assertIdentical(List c1, List c2) {\r\n+//        assertEquals(c1.size(), c2.size());\r\n+//        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\r\n+//            i1.hasNext() && i2.hasNext();)\r\n+//            assertTrue(i1.next() == i2.next());\r\n+//    }\r\n+//\r\n+//    /**\r\n+//     * Assert that the collection parameter is already ordered\r\n+//     * according to the specified comparator.\r\n+//     */\r\n+//    public void assertOrdered(Collection c, Comparator comp) {\r\n+//        List l1 = new LinkedList(c);\r\n+//        List l2 = new LinkedList(c);\r\n+//        assertEquals(l1, l2);\r\n+//        Collections.sort(l2, comp);\r\n+//        assertEquals(l1, l2);\r\n+//        Collections.sort(l1, comp);\r\n+//        assertEquals(l1, l2);\r\n+//    }\r\n+//\r\n+//    ////////////////////\r\n+//    // Assertion Helpers\r\n+//    ////////////////////\r\n+//\r\n+//    public void assertNotEquals(Object a, Object b) {\r\n+//        if (a == null && b != null)\r\n+//            return;\r\n+//        if (a != null && b == null)\r\n+//            return;\r\n+//        if (!(a.equals(b)))\r\n+//            return;\r\n+//        if (!(b.equals(a)))\r\n+//            return;\r\n+//\r\n+//        fail(\"expected !<\" + a + \">.equals(<\" + b + \">)\");\r\n+//    }\r\n+//\r\n+//    public void assertSize(int size, Object ob) {\r\n+//        if (ob == null) {\r\n+//            assertEquals(size, 0);\r\n+//            return;\r\n+//        }\r\n+//\r\n+//        if (ob instanceof Collection)\r\n+//            ob = ((Collection) ob).iterator();\r\n+//        if (ob instanceof Iterator) {\r\n+//            Iterator i = (Iterator) ob;\r\n+//            int count = 0;\r\n+//            while (i.hasNext()) {\r\n+//                count++;\r\n+//                i.next();\r\n+//            }\r\n+//\r\n+//            assertEquals(size, count);\r\n+//        } else\r\n+//            fail(\"assertSize: expected Collection, Iterator, \"\r\n+//                + \"Query, or Extent, but got \"\r\n+//                + ob.getClass().getName());\r\n+//    }\r\n+    \r\n+}\r"},{"sha":"8d81f7c9f6c53f569d73abfe37b202eb5a2f653c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,135 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class Test2EJBConcurrency extends AbstractTestCase {\r\n+\r\n+    private Object _id = null;\r\n+\r\n+    public Test2EJBConcurrency(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Entity1 b = new Entity1(3, \"STRING\", 10);\r\n+        em.persist(b);\r\n+        em.flush();\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test optimistic concurrency.\r\n+     */\r\n+    public void testOptConcurrency1()\r\n+        throws Exception {\r\n+        EntityManager em1 = currentEntityManager();\r\n+        startTx(em1);\r\n+\r\n+        EntityManager em2 = currentEntityManager();\r\n+        startTx(em2);\r\n+\r\n+        Entity1 b1 = (Entity1) em1.find(Entity1.class, 3);\r\n+        b1.setStringField(\"STRING2\");\r\n+        endTx(em1);\r\n+        assertEquals(\"b1.getstringField is not STRING2 as exp.\", \"STRING2\",\r\n+            b1.getStringField());\r\n+\r\n+        Entity1 b2 = (Entity1) em2.find(Entity1.class, 3);\r\n+        assertEquals(\"b2.getstringField is not STRING2 as exp.\", \"STRING2\",\r\n+            b2.getStringField());\r\n+        b2.setStringField(\"STRING3\");\r\n+        endTx(em2);\r\n+        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\r\n+            b2.getStringField());\r\n+\r\n+        startTx(em1);\r\n+        b1 = (Entity1) em1.find(Entity1.class, 3);\r\n+        em1.refresh(b1);\r\n+        assertEquals(\"b1.getstringField is not STRING3 as exp.\", \"STRING2\",\r\n+            b1.getStringField());\r\n+        b1.setStringField(\"STRING4\");\r\n+        endTx(em1);\r\n+\r\n+        b2 = (Entity1) em2.find(Entity1.class, 3);\r\n+        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\r\n+            b2.getStringField());\r\n+\r\n+        endEm(em1);\r\n+        endEm(em2);\r\n+    }\r\n+\r\n+    /**\r\n+     *\tTest optimistic concurrency.\r\n+     */\r\n+//\tpublic void testOptConcurrency2 ()\r\n+//\t\tthrows Exception\r\n+//\t{\r\n+//\t\tEntityManager em1 = currentEntityManager();\t\t\r\n+//\t\tstartTx(em1);\r\n+//\r\n+//\t\tEntityManager em2 = currentEntityManager();\t\t\r\n+//\t\tstartTx(em2);\r\n+//\r\n+//\t\tEntity1 b1 = (Entity1) em1.find (Entity1.class, 3);\r\n+//\t\tEntity1 b2 = (Entity1) em2.find (Entity1.class, 3);\r\n+//\r\n+//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING\", b1.getStringField ());\r\n+//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\r\n+//\r\n+//\t\tb1.setStringField (\"STRING2\");\r\n+//\t\tendTx(em1);\r\n+//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING2\", b1.getStringField ());\r\n+//\r\n+//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\r\n+//\t\tb2.setStringField (\"STRING3\");\r\n+//\r\n+//\t\ttry\r\n+//\t\t{\r\n+//\t\t\tendTx(em2);\r\n+//\t\t\tfail (\"OL Violation\");\r\n+//\t\t}\r\n+//\t\tcatch (Exception ole)\r\n+//\t\t{\r\n+//\t\t\t// expected\r\n+//\t\t}\r\n+//\t\t\r\n+//\t\trollbackTx(em2);\r\n+//\t\t\r\n+//\r\n+//    \tb2 = (Entity1) em2.find (Entity1.class, 3);\r\n+//\t\tassertEquals (\"b2.getstringField is not STRING2 as exp.\",\"STRING2\", b2.getStringField ());\r\n+//    \t\r\n+//\t\tendEm(em1);\r\n+//\t\tendEm(em2);\r\n+//\t}\r\n+}\r\n+\r"},{"sha":"176046a8e06fde1adc1bd79a8645ce3e9d6d90b8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,85 @@\n+/*\r\n+ * TestAbstractMappedAppIdSuper.java\r\n+ *\r\n+ * Created on October 16, 2006, 2:00 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+public class TestAbstractMappedAppIdSuper extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestAbstractMappedAppIdSuper\r\n+     */\r\n+    public TestAbstractMappedAppIdSuper(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /* Fix Me - aokeke - Takes so much time to run */\r\n+//    public void testQuerySubclassWithDifferentIdClass()\r\n+//    throws Exception {\r\n+//        ConcreteMappedAppIdSub pc = new ConcreteMappedAppIdSub();\r\n+//        String pk = String.valueOf(System.currentTimeMillis());\r\n+//        pc.setPk(pk);\r\n+//        pc.setName(\"name\");\r\n+//        \r\n+//        OpenJPAEntityManager pm = getPM();\r\n+//        pm.begin();\r\n+//        pm.persist(pc);\r\n+//        pm.commit();\r\n+//        String pkd = pc.getPk();\r\n+//        Object oid = pm.getObjectId(pc);\r\n+//        endEm(pm,());\r\n+//        \r\n+//        pm = getPM();\r\n+//        String query = \"SELECT DISTINCT o FROM ConcreteMappedAppIdSub o WHERE o.pk = :p \";\r\n+//        OpenJPAQuery q = pm.createQuery(query);\r\n+//        \r\n+////        OpenJPAQuery q = pm.createNativeQuery(\"pk == :p\", ConcreteMappedAppIdSub.class);\r\n+//        //FIXME jthomas\r\n+//        \r\n+//        try \r\n+//        {\r\n+//            pc = (ConcreteMappedAppIdSub) q.setParameter(\"p\", pkd).getSingleResult();\r\n+//        } \r\n+//        catch (RuntimeException re) \r\n+//        {\r\n+////            bug(1170, re, \"Cannot query subclass of abstract mapped \"\r\n+////                    + \"appid type.\");\r\n+////            return;\r\n+//        }\r\n+//         \r\n+//        assertNotNull(pc);\r\n+//        assertEquals(pk, pc.getPk());\r\n+//        \r\n+//        pm.begin();\r\n+//        pm.remove(pc);\r\n+//        pm.commit();\r\n+//        endEm(pm,());\r\n+//    }\r\n+}\r"},{"sha":"c488c072b0a15848ea33dd1f8504a72ccc2af80a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","status":"added","additions":466,"deletions":0,"changes":466,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,466 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.lang.reflect.Array;\r\n+import java.text.Collator;\r\n+import java.util.Arrays;\r\n+import java.util.Comparator;\r\n+import java.util.Date;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.ArraysTest;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import junit.framework.AssertionFailedError;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+/**\r\n+ * Test varying kinds of array values.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ * @author Abe White\r\n+ */\r\n+public class TestArrayValues2 extends BaseKernelTest {\r\n+\r\n+    private static double DOUBLE_PRECISION = 0.01D;\r\n+    public static float FLOAT_PRECISION = 0.01F;\r\n+\r\n+    public void testStringArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        String[] array = new String[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomString();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testLongArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Long[] array = new Long[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomLong();\r\n+        try {\r\n+            saveArray(array, false, false);\r\n+        } catch (AssertionFailedError afe) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testLongPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        long[] array = new long[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomLong().longValue();\r\n+        try {\r\n+            saveArray(array, true, false);\r\n+        } catch (AssertionFailedError afe) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testShortArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Short[] array = new Short[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomShort();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testShortPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        short[] array = new short[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomShort().shortValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testIntArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Integer[] array = new Integer[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomInt();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testIntPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        int[] array = new int[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomInt().intValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+// FixMe: Both tests hangs on Mysql\r\n+    /*public void testByteArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Byte[] array = new Byte[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomByte();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testBytePrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        byte[] array = new byte[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomByte().byteValue();\r\n+        saveArray(array, true, false);\r\n+    }*/\r\n+\r\n+    public void testBooleanArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Boolean[] array = new Boolean[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomBoolean();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testCharacterArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Character[] array = new Character[max];\r\n+        array[0] = new Character((char) 1);\r\n+        for (int i = 1; i < max; i++)\r\n+            array[i] = randomChar();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testCharacterPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        char[] array = new char[max];\r\n+        array[0] = 1;\r\n+        for (int i = 1; i < max; i++)\r\n+            array[i] = randomChar().charValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testCharacterPrimitiveClobArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        char[] array = new char[max];\r\n+        array[0] = 1;\r\n+        for (int i = 1; i < max; i++)\r\n+            array[i] = randomChar().charValue();\r\n+        saveArray(array, true, true);\r\n+    }\r\n+\r\n+    public void testBooleanPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        boolean[] array = new boolean[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomBoolean().booleanValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testFloatArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Float[] array = new Float[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomFloat();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testFloatPrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        float[] array = new float[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomFloat().floatValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testDoubleArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Double[] array = new Double[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomDouble();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    public void testDoublePrimitiveArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        double[] array = new double[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomDouble().doubleValue();\r\n+        saveArray(array, true, false);\r\n+    }\r\n+\r\n+    public void testDateArray()\r\n+        throws Exception {\r\n+        int max = ((int) (Math.random() * 20)) + 5;\r\n+        Date[] array = new Date[max];\r\n+        for (int i = 0; i < max; i++)\r\n+            array[i] = randomDate();\r\n+        saveArray(array, false, false);\r\n+    }\r\n+\r\n+    /*Fix Me aokeke - Takes a lot of time to run */\r\n+//    public void testFirstClassObjectArray()throws Exception \r\n+//    {\r\n+//        int max = ((int) (Math.random() * 20)) + 5;\r\n+//        ArraysTest[] array = new ArraysTest[max];\r\n+//        for (int i = 0; i < max; i++)\r\n+//            array[i] = new ArraysTest();\r\n+//        saveArray(array, false, false);\r\n+//    }\r\n+\r\n+    private void saveArray(Object array, boolean primitive, boolean lob)\r\n+        throws Exception {\r\n+        try {\r\n+            saveArrayInternal(array, primitive, lob);\r\n+        } catch (Exception e) {\r\n+            throw e;\r\n+        } catch (Error error) {\r\n+            throw error;\r\n+        } finally {\r\n+            //\r\n+        }\r\n+    }\r\n+\r\n+    private void saveArrayInternal(Object vals, boolean primitive, boolean lob)\r\n+        throws Exception {\r\n+        Object[] array;\r\n+        if (primitive)\r\n+            array = convertPrimitiveArray(vals);\r\n+        else\r\n+            array = (Object[]) vals;\r\n+        Arrays.sort(array, new TestArraySorter());\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        ArraysTest test = new ArraysTest();\r\n+        pm.persist(test);\r\n+        int testID = test.getId();\r\n+\r\n+        setGetTestArray(test, vals, primitive, lob, true);\r\n+        endTx(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        ArraysTest retrievedObject = pm.find(ArraysTest.class, testID);\r\n+\r\n+        Object retrievedVals = setGetTestArray(retrievedObject, vals,\r\n+            primitive, lob, false);\r\n+        Object[] retrievedArray;\r\n+        if (primitive)\r\n+            retrievedArray = convertPrimitiveArray(retrievedVals);\r\n+        else\r\n+            retrievedArray = (Object[]) retrievedVals;\r\n+\r\n+        assertNotNull(retrievedArray);\r\n+        assertTrue(array.length != 0);\r\n+        assertEquals(array.length, retrievedArray.length);\r\n+        assertNotNull(array[0]);\r\n+        assertNotNull(retrievedArray[0]);\r\n+\r\n+        // make sure the classes of the keys are the same.\r\n+        assertEquals(array[0].getClass(), retrievedArray[0].getClass());\r\n+        Arrays.sort(retrievedArray, new TestArraySorter());\r\n+        for (int i = 0; i < array.length; i++)\r\n+            assertClassAndValueEquals(array[i], retrievedArray[i]);\r\n+\r\n+        pm.remove(retrievedObject);\r\n+        endTx(pm);\r\n+    }\r\n+\r\n+    private Object[] convertPrimitiveArray(Object array) throws Exception {\r\n+        int length = Array.getLength(array);\r\n+        Class type = Array.get(array, 0).getClass();\r\n+\r\n+        Object[] copy = (Object[]) Array.newInstance(type, length);\r\n+        for (int i = 0; i < length; i++)\r\n+            copy[i] = Array.get(array, i);\r\n+\r\n+        return copy;\r\n+    }\r\n+\r\n+    private void assertClassAndValueEquals(Object o1, Object o2) {\r\n+        assertTrue(\"First object was null\", o1 != null);\r\n+        assertTrue(\"Second object was null\", o2 != null);\r\n+\r\n+        assertTrue(\"Types did not match (class1=\"\r\n+            + o1.getClass().getName() + \", class2=\"\r\n+            + o2.getClass().getName() + \")\",\r\n+            o1.getClass().isAssignableFrom(o2.getClass()));\r\n+\r\n+        // floats and doubles are a little special: we only\r\n+        // compare them to a certain precision, after which\r\n+        // we give up.\r\n+        if (o1 instanceof Double)\r\n+            assertEquals(((Double) o1).doubleValue(),\r\n+                ((Double) o2).doubleValue(),\r\n+                DOUBLE_PRECISION);\r\n+        else if (o1 instanceof Float)\r\n+            assertEquals(((Float) o1).floatValue(),\r\n+                ((Float) o2).floatValue(),\r\n+                FLOAT_PRECISION);\r\n+        else\r\n+            assertEquals(\"Object did not match (class1=\"\r\n+                + o1.getClass().getName() + \", class2=\"\r\n+                + o2.getClass().getName() + \")\",\r\n+                o1, o2);\r\n+    }\r\n+\r\n+    /**\r\n+     * Generic setter/getter for setting the array.\r\n+     */\r\n+    private Object setGetTestArray(ArraysTest test, Object array,\r\n+        boolean primitive, boolean lob, boolean doSet)\r\n+        throws Exception {\r\n+        if (array == null)\r\n+            return null;\r\n+\r\n+        Object first = Array.get(array, 0);\r\n+        if (first instanceof Date) {\r\n+            if (doSet)\r\n+                test.setDate((Date[]) array);\r\n+            return test.getDate();\r\n+        } else if (first instanceof String) {\r\n+            if (doSet)\r\n+                test.setString((String[]) array);\r\n+            return test.getString();\r\n+        } else if (first instanceof Character) {\r\n+            if (doSet && !primitive)\r\n+                test.setCharacter((Character[]) array);\r\n+            else if (doSet && !lob)\r\n+                test.setCharacterP((char[]) array);\r\n+            else if (doSet)\r\n+                test.setCharacterPClob((char[]) array);\r\n+            else if (!primitive)\r\n+                return test.getCharacter();\r\n+            else if (!lob)\r\n+                return test.getCharacterP();\r\n+            else\r\n+                return test.getCharacterPClob();\r\n+            return null;\r\n+        } else if (first instanceof Double) {\r\n+            if (doSet && !primitive)\r\n+                test.setDouble((Double[]) array);\r\n+            else if (doSet)\r\n+                test.setDoubleP((double[]) array);\r\n+            else if (!primitive)\r\n+                return test.getDouble();\r\n+            else\r\n+                return test.getDoubleP();\r\n+            return null;\r\n+        } else if (first instanceof Byte) {\r\n+            if (doSet && !primitive)\r\n+                test.setByte((Byte[]) array);\r\n+            else if (doSet)\r\n+                test.setByteP((byte[]) array);\r\n+            else if (!primitive)\r\n+                return test.getByte();\r\n+            else\r\n+                return test.getByteP();\r\n+            return null;\r\n+        } else if (first instanceof Float) {\r\n+            if (doSet && !primitive)\r\n+                test.setFloat((Float[]) array);\r\n+            else if (doSet)\r\n+                test.setFloatP((float[]) array);\r\n+            else if (!primitive)\r\n+                return test.getFloat();\r\n+            else\r\n+                return test.getFloatP();\r\n+            return null;\r\n+        } else if (first instanceof Long) {\r\n+            if (doSet && !primitive)\r\n+                test.setLong((Long[]) array);\r\n+            else if (doSet)\r\n+                test.setLongP((long[]) array);\r\n+            else if (!primitive)\r\n+                return test.getLong();\r\n+            else\r\n+                return test.getLongP();\r\n+            return null;\r\n+        } else if (first instanceof Integer) {\r\n+            if (doSet && !primitive)\r\n+                test.setInt((Integer[]) array);\r\n+            else if (doSet)\r\n+                test.setIntP((int[]) array);\r\n+            else if (!primitive)\r\n+                return test.getInt();\r\n+            else\r\n+                return test.getIntP();\r\n+            return null;\r\n+        } else if (first instanceof Short) {\r\n+            if (doSet && !primitive)\r\n+                test.setShort((Short[]) array);\r\n+            else if (doSet)\r\n+                test.setShortP((short[]) array);\r\n+            else if (!primitive)\r\n+                return test.getShort();\r\n+            else\r\n+                return test.getShortP();\r\n+            return null;\r\n+        } else if (first instanceof Boolean) {\r\n+            if (doSet && !primitive)\r\n+                test.setBoolean((Boolean[]) array);\r\n+            else if (doSet)\r\n+                test.setBooleanP((boolean[]) array);\r\n+            else if (!primitive)\r\n+                return test.getBoolean();\r\n+            else\r\n+                return test.getBooleanP();\r\n+            return null;\r\n+        } else if (first instanceof ArraysTest) {\r\n+            if (doSet)\r\n+                test.setArraysTest((ArraysTest[]) array);\r\n+            return test.getArraysTest();\r\n+        }\r\n+\r\n+        fail(\"Unknown array type\");\r\n+        return null;\r\n+    }\r\n+\r\n+    private static class TestArraySorter\r\n+        implements Comparator {\r\n+\r\n+        private Collator collator = Collator.getInstance();\r\n+\r\n+        public int compare(Object o1, Object o2) {\r\n+            if (o1.equals(o2))\r\n+                return 0;\r\n+\r\n+            if (o1 instanceof Number) {\r\n+                return ((Number) o1).doubleValue() >\r\n+                    ((Number) o2).doubleValue() ? 1 : -1;\r\n+            } else if (o1 instanceof Date) {\r\n+                return ((Date) o1).before((Date) o2) ? 1 : -1;\r\n+            } else if (o1 instanceof ArraysTest) {\r\n+                return ((ArraysTest) o1).compareTo(o2);\r\n+            }\r\n+            return collator.compare(o1.toString(), o2.toString());\r\n+        }\r\n+    }\r\n+}\r\n+\r"},{"sha":"c9b5d1406ef7effbe51840d13e11dfea582c0e82","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,125 @@\n+/*\r\n+ * TestBigDecimals.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:07 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.math.BigDecimal;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n+import junit.framework.AssertionFailedError;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestBigDecimals extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestBigDecimals\r\n+     */\r\n+    public TestBigDecimals() {\r\n+    }\r\n+\r\n+    public TestBigDecimals(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testBigDecimalDataIntegrity()\r\n+        throws Exception {\r\n+        try {\r\n+            BigDecimal bd = new BigDecimal(Math.random() * 10000000 + \"\");\r\n+            bd = bd.setScale(100);\r\n+            for (int i = 0; i < 50; i++) {\r\n+                bd = bd.movePointLeft(1);\r\n+                bigDecimalTest(bd);\r\n+            }\r\n+        }\r\n+        catch (AssertionFailedError e) {\r\n+            bug(3, e, \"Precision loss for BigDecimals\");\r\n+        }\r\n+    }\r\n+//    FixMe aokeke: Passes but takes a long time --commenting for resource sake\r\n+//    public void testBigBigDecimals()\r\n+//        throws Exception {\r\n+//        try {\r\n+//            BigDecimal bd = new BigDecimal(\"1234567890.\"\r\n+//                + \"12345678901234567890123456789012345678901234567890\"\r\n+//                + \"12345678901234567890123456789012345678901234567890\");\r\n+//\r\n+//            bigDecimalTest(bd);\r\n+//        } catch (AssertionFailedError e) {\r\n+//            bug(3, e, \"Precision loss for BigDecimals\");\r\n+//        }\r\n+//    }\r\n+\r\n+    public void bigDecimalTest(final BigDecimal bd) {\r\n+        OpenJPAEntityManager pm = null, pm2 = null;\r\n+\r\n+        try {\r\n+            pm = getPM();\r\n+            startTx(pm);\r\n+            AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n+            aftt.setTestBigDecimal(bd);\r\n+            pm.persist(aftt);\r\n+            endTx(pm);\r\n+            Object id = pm.getObjectId(aftt);\r\n+            pm.evict(aftt);\r\n+\r\n+            pm2 = getPM();\r\n+            startTx(pm);\r\n+            AllFieldTypesTest aftt2 = (AllFieldTypesTest) pm2.getObjectId(id);\r\n+\r\n+            // why wouldn't they be two different objects?\r\n+            assertTrue(\"identitcal field values\",\r\n+                bd != aftt2.getTestBigDecimal());\r\n+\r\n+            // this should always succeed\r\n+            assertEquals(bd,\r\n+                aftt2.getTestBigDecimal().setScale(bd.scale()));\r\n+\r\n+            // this will fail if we are losing scale\r\n+            assertEquals(bd, aftt2.getTestBigDecimal());\r\n+\r\n+            rollbackTx(pm);\r\n+        } catch (Throwable afe) {\r\n+            bug(3, afe, \"floating point precision loss\");\r\n+        } finally {\r\n+            if (pm != null) {\r\n+                //if (pm.getTransaction().isActive())\r\n+                //rollbackTx(pm,());\r\n+                endEm(pm);\r\n+            }\r\n+\r\n+            if (pm2 != null) {\r\n+                //if (pm2.getTransaction().isActive())\r\n+                //rollbackTx(pm2,());\r\n+                //pm2.close();\r\n+                endEm(pm2);\r\n+            }\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"be3815011e0f1a0341b8852f2b9b3102fe9fa7e2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * TestBrokerFactoryPooling.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:10 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.kernel.Bootstrap;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+\r\n+public class TestBrokerFactoryPooling extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestBrokerFactoryPooling\r\n+     */\r\n+    public TestBrokerFactoryPooling(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testPooling() {\r\n+        BrokerFactory bf0 = Bootstrap.getBrokerFactory();\r\n+        BrokerFactory bf1 = Bootstrap.getBrokerFactory();\r\n+        assertSame(bf0, bf1);\r\n+    }\r\n+}\r"},{"sha":"9dd214133e037f27b664c0cc76c9ec5ad1568282","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","status":"added","additions":242,"deletions":0,"changes":242,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,242 @@\n+/*\r\n+ * TestCalendarFields.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:12 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+import java.util.TimeZone;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.CalendarFields;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.lib.util.JavaVersions;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestCalendarFields extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestCalendarFields\r\n+     */\r\n+    public TestCalendarFields(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(CalendarFields.class);\r\n+    }\r\n+\r\n+    public void testFieldDefaultTimeZone() {\r\n+        CalendarFields cal = new CalendarFields();\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        cal.setSingapore(Calendar.\r\n+            getInstance(TimeZone.getTimeZone(\"America/New_York\")));\r\n+        pm.persist(cal);\r\n+        int id = cal.getId();\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        cal = (CalendarFields) pm.find(CalendarFields.class, id);\r\n+        assertEquals(TimeZone.getTimeZone(\"Asia/Singapore\"),\r\n+            cal.getSingapore().getTimeZone());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testTimeZoneEquals() {\r\n+        CalendarFields c1 = new CalendarFields();\r\n+        CalendarFields c2 = new CalendarFields();\r\n+        assertTimeZonesEquals(c1, c2);\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(c2);\r\n+        int id2 = c2.getId();\r\n+        assertTimeZonesEquals(c1, c2);\r\n+        endTx(pm);\r\n+        assertTimeZonesEquals(c1, c2);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        c2 = (CalendarFields) pm.find(CalendarFields.class, id2);\r\n+        assertTimeZonesEquals(c1, c2);\r\n+        assertTimeZonesEquals(c1, (CalendarFields) pm.detach(c2));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testCalendarQuery() {\r\n+        long time = 1136660560572L;\r\n+\r\n+        CalendarFields cal = new CalendarFields();\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        cal.getSingapore().setTime(new Date(time));\r\n+        pm.persist(cal);\r\n+        int id = cal.getId();\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+\r\n+        //FIXME jthomas       \r\n+        Date date = new Date(time + 100000);\r\n+        Calendar cals = Calendar.getInstance();\r\n+        cals.setTime(date);\r\n+\r\n+        String query =\r\n+            \"SELECT o FROM CalendarFields o WHERE o.singapore < :cal\";\r\n+        int size = pm.createQuery(query).setParameter(\"cal\", cals).\r\n+            getResultList().size();\r\n+\r\n+        assertEquals(1, size);\r\n+\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(new Date(time - 100000)));\r\n+//\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time + 100000)));\r\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time - 100000)));\r\n+//\r\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time + 100000), null)));\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time - 100000), null)));\r\n+//\r\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time + 100000), null)));\r\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time - 100000), null)));\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private static Calendar newCalendar(Date date, String tz) {\r\n+        Calendar cal = Calendar.getInstance(\r\n+            tz == null ? TimeZone.getDefault() : TimeZone.getTimeZone(tz));\r\n+        cal.setTime(date);\r\n+        return cal;\r\n+    }\r\n+\r\n+    public void testMutateCalendarDirties() {\r\n+        CalendarFields c1 = new CalendarFields();\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(c1);\r\n+        int id = c1.getId();\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        c1 = pm.find(CalendarFields.class, id);\r\n+\r\n+        startTx(pm);\r\n+\r\n+        OpenJPAStateManager sm = getStateManager(c1, pm);\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"gmt\").getIndex()));\r\n+\r\n+        // test setting to same value doesn't dirty the field\r\n+        /*\r\n+        setTimeInMillis(c1.getGmtc1.getGmt().getTime().getTime());\r\n+        c1.getGmt().setTime(c1.getGmt().getTime());\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"gmt\").getIndex()));\r\n+        */\r\n+\r\n+        // test changing time\r\n+        setTimeInMillis(c1.getGmt(), 12345);\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"gmt\").getIndex()));\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"newYork\").getIndex()));\r\n+        // test mutate via \"add()\" method\r\n+        c1.getNewYork().add(Calendar.SECOND, -1);\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"newYork\").getIndex()));\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"berlin\").getIndex()));\r\n+        // test mutate via \"setTimeZone()\" method\r\n+        c1.getBerlin().setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"berlin\").getIndex()));\r\n+\r\n+        // Calendar.set can only be subclassed in JDK 1.4+ (it is final in\r\n+        // 1.3), so we only run this test in JDK 1.4+\r\n+        if (JavaVersions.VERSION >= 4) {\r\n+            assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+                getField(\"singapore\").getIndex()));\r\n+            // test mutate via \"set()\" method\r\n+            c1.getSingapore().set(Calendar.YEAR, 1998);\r\n+            assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+                getField(\"singapore\").getIndex()));\r\n+        }\r\n+\r\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"pacific\").getIndex()));\r\n+        // test mutate via \"roll()\" method\r\n+        c1.getPacific().roll(Calendar.YEAR, 5);\r\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n+            getField(\"pacific\").getIndex()));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private static void setTimeInMillis(Calendar cal, long millis) {\r\n+        // \"setTimeInMillis\" is protected in JDK 1.3, put public in 1.4 & 1.5\r\n+        try {\r\n+            // Equivalent to: cal.setTimeInMillis (millis);\r\n+            cal.getClass().getMethod(\"setTimeInMillis\",\r\n+                new Class[]{ long.class }).invoke(cal,\r\n+                new Object[]{ new Long(millis) });\r\n+        } catch (Exception e) {\r\n+            cal.setTime(new Date(millis));\r\n+        }\r\n+    }\r\n+\r\n+    private void assertTimeZonesEquals(CalendarFields c1, CalendarFields c2) {\r\n+        for (int i = 0; i < c1.getCalendars().size(); i++) {\r\n+            Calendar cal1 = (Calendar) c1.getCalendars().get(i);\r\n+            Calendar cal2 = (Calendar) c2.getCalendars().get(i);\r\n+\r\n+            if (cal1 != null && cal2 != null)\r\n+                assertEquals(cal1.getTimeZone().getID(),\r\n+                    cal2.getTimeZone().getID());\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"b7fcf05f4c899bdd1a0079c1e08049fbdf1a16d2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","status":"added","additions":404,"deletions":0,"changes":404,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,404 @@\n+/*\r\n+ * TestCheckConsistency.java\r\n+ *\r\n+ * Created on October 9, 2006, 6:23 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestCheckConsistency extends BaseKernelTest {\r\n+\r\n+    private Object _oid = null;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestCheckConsistency\r\n+     */\r\n+    public TestCheckConsistency(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        RuntimeTest1 pc = new RuntimeTest1();\r\n+        pc.setIntField(1);\r\n+        pc.setIntField1(1);\r\n+        _oid = persist(pc);\r\n+    }\r\n+\r\n+    public void testConsistentDatastoreTransaction() {\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(false);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        npc.setIntField(2);\r\n+        npc.setIntField1(2);\r\n+        pm.persist(npc);\r\n+        pm.validateChanges();\r\n+\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(200, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+        assertEquals(300, npc.getIntField1());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testConsistentDatastoreTransactionWithRollback() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(false);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        pm.persist(npc);\r\n+        Object noid = pm.getObjectId(npc);\r\n+\r\n+        pm.validateChanges();\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        rollbackTx(pm);\r\n+\r\n+        assertEquals(1, pc.getIntField1());\r\n+        assertFalse(pm.isPersistent(npc));\r\n+        assertEquals(0, npc.getIntField1());\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        try {\r\n+            RuntimeTest1 temp =\r\n+                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\r\n+            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\r\n+                temp.getIntField1());\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    //FIXME jthomas\r\n+/*    \r\n+    public void testInconsistentDatastoreTransaction() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n+        pm.setOptimistic(false);\r\n+        pm.setRetainState(false);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        pm.begin();\r\n+  */\r\n+    //FIXME jthomas\r\n+    /*\r\n+   fetch.setReadLockLevel(pm.LOCK_NONE);\r\n+   fetch.setWriteLockLevel(pm.LOCK_NONE);\r\n+    */\r\n+    /*\r\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n+pc.setIntField(100);\r\n+\r\n+OpenJPAEntityManager pm2 = getPM();\r\n+pm2.begin();\r\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n+copy.setIntField(-1);\r\n+pm2.commit();\r\n+pm2.close();\r\n+\r\n+RuntimeTest1 npc = new RuntimeTest1();\r\n+pm.persist(npc);\r\n+\r\n+try {\r\n+   pm.validateChanges();\r\n+   fail(\"Didn't find inconsistency.\");\r\n+} catch (Exception jove) {\r\n+   //FIXME\r\n+   /*\r\n+   Throwable[] t = jove.getNestedExceptions();\r\n+   assertEquals(1, t.length);\r\n+   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+    */\r\n+//        }\r\n+\r\n+    /*        assertTrue(pm.getRollbackOnly());\r\n+           pm.rollback();\r\n+\r\n+           assertEquals(-1, pc.getIntField());\r\n+           assertFalse(pm.isPersistent(npc));\r\n+           endEm(pm,());\r\n+       }\r\n+    */\r\n+    public void testConsistentOptimisticTransaction() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(true);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+        boolean hasConn = hasConnection(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        npc.setIntField(2);\r\n+        npc.setIntField1(2);\r\n+        pm.persist(npc);\r\n+\r\n+        pm.validateChanges();\r\n+        if (!hasConn)\r\n+            assertFalse(hasConnection(pm));\r\n+\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(200, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+        assertEquals(300, npc.getIntField1());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private boolean hasConnection(OpenJPAEntityManager pm) {\r\n+        return JPAFacadeHelper.toBroker(pm).hasConnection();\r\n+    }\r\n+\r\n+    public void testConsistentOptimisticTransactionWithRollback() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(true);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        startTx(pm);\r\n+        boolean hasConn = hasConnection(pm);\r\n+\r\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n+        pc.setIntField1(100);\r\n+\r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        pm.persist(npc);\r\n+        Object noid = pm.getObjectId(npc);\r\n+\r\n+        pm.validateChanges();\r\n+        if (!hasConn)\r\n+            assertFalse(hasConnection(pm));\r\n+\r\n+        assertEquals(100, pc.getIntField1());\r\n+        assertTrue(pm.isPersistent(npc));\r\n+\r\n+        pc.setIntField1(200);\r\n+        npc.setIntField1(300);\r\n+        rollbackTx(pm);\r\n+\r\n+        assertEquals(1, pc.getIntField1());\r\n+        assertFalse(pm.isPersistent(npc));\r\n+        assertEquals(0, npc.getIntField1());\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        try {\r\n+            RuntimeTest1 temp =\r\n+                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\r\n+\r\n+            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\r\n+                temp.getIntField1());\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+    }\r\n+//FIXME \r\n+    /*\r\n+public void testInconsistentOptimisticTransactionWithoutRefresh() {\r\n+OpenJPAEntityManager pm = getPM();\r\n+pm.setRetainState(false);\r\n+pm.setOptimistic(true);\r\n+pm.validateChanges();        // no-op outside trans\r\n+pm.begin();\r\n+\r\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n+pc.setIntField(100);\r\n+\r\n+OpenJPAEntityManager pm2 = getPM();\r\n+pm2.begin();\r\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n+copy.setIntField(-1);\r\n+pm2.commit();\r\n+pm2.close();\r\n+\r\n+RuntimeTest1 npc = new RuntimeTest1();\r\n+pm.persist(npc);\r\n+Object noid = pm.getObjectId(npc);\r\n+\r\n+try {\r\n+   pm.validateChanges();\r\n+   fail(\"Didn't find inconsistency.\");\r\n+} catch (Exception jove) {\r\n+   //FIXME jthomas\r\n+   /*\r\n+   Throwable[] t = jove.getNestedExceptions();\r\n+   assertEquals(1, t.length);\r\n+   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+    */\r\n+    //     }\r\n+/*     assertFalse(pm.getRollbackOnly());\r\n+        \r\n+        try {\r\n+            pm.commit();\r\n+            fail(\"Committed inconsistent transaction.\");\r\n+        } catch (Exception je) {\r\n+        }\r\n+        \r\n+        assertEquals(-1, pc.getIntField());\r\n+        assertFalse(pm.isPersistent(npc));\r\n+        endEm(pm,());\r\n+        \r\n+        pm = getPM();\r\n+        try {\r\n+            pm.find(RuntimeTest1.class,noid);\r\n+            fail(\"Object should not exist.\");\r\n+        } catch (Exception jonfe) {\r\n+        }\r\n+        endEm(pm,());\r\n+    }\r\n+ */\r\n+\r\n+//FIXME \r\n+/*    \r\n+    public void testInconsistentOptimisticTransactionWithRefresh() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.setOptimistic(true);\r\n+        pm.validateChanges();        // no-op outside trans\r\n+        pm.begin();\r\n+        \r\n+        RuntimeTest1 pc = pm.find(RuntimeTest1.class,_oid);\r\n+        pc.setIntField(100);\r\n+        \r\n+        OpenJPAEntityManager pm2 = getPM();\r\n+        pm2.begin();\r\n+        RuntimeTest1 copy = pm2.find(RuntimeTest1.class,_oid);\r\n+        copy.setIntField(-1);\r\n+        pm2.commit();\r\n+        pm2.close();\r\n+        \r\n+        RuntimeTest1 npc = new RuntimeTest1();\r\n+        pm.persist(npc);\r\n+        try {\r\n+            pm.validateChanges();\r\n+            fail(\"Didn't find inconsistency.\");\r\n+        } catch (Exception jove) {\r\n+            //FIXME jthomas\r\n+            /*\r\n+            Throwable[] t = jove.getNestedExceptions();\r\n+            assertEquals(1, t.length);\r\n+            assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+             */\r\n+    //      }\r\n+    /*       assertFalse(pm.getRollbackOnly());\r\n+         pm.refresh(pc);\r\n+\r\n+         assertEquals(-1, pc.getIntField());\r\n+         assertTrue(pm.isPersistent(npc));\r\n+\r\n+         pc.setIntField(200);\r\n+         npc.setIntField(300);\r\n+         pm.commit();\r\n+\r\n+         assertEquals(200, pc.getIntField());\r\n+         assertTrue(pm.isPersistent(npc));\r\n+         assertEquals(300, npc.getIntField());\r\n+         endEm(pm,());\r\n+     }\r\n+    */\r\n+\r\n+//FIXME \r\n+\r\n+/*    \r\n+public void testInconsistentOptimisticTransactionWithRollback() {\r\n+OpenJPAEntityManager pm = getPM();\r\n+pm.setRetainState(false);\r\n+pm.setOptimistic(true);\r\n+pm.validateChanges();        // no-op outside trans\r\n+pm.begin();\r\n+\r\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n+pc.setIntField(100);\r\n+\r\n+OpenJPAEntityManager pm2 = getPM();\r\n+pm2.begin();\r\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n+copy.setIntField(-1);\r\n+pm2.commit();\r\n+pm2.close();\r\n+\r\n+RuntimeTest1 npc = new RuntimeTest1();\r\n+pm.persist(npc);\r\n+Object noid = pm.getObjectId(npc);\r\n+\r\n+try {\r\n+pm.validateChanges();\r\n+fail(\"Didn't find inconsistency.\");\r\n+} catch (Exception jove) {\r\n+//FIXME jthomas\r\n+/*\r\n+Throwable[] t = jove.getNestedExceptions();\r\n+assertEquals(1, t.length);\r\n+assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n+*/\r\n+    //      }\r\n+    /*       assertFalse(pm.getRollbackOnly());\r\n+          pm.rollback();\r\n+\r\n+          assertEquals(-1, pc.getIntField());\r\n+          assertFalse(pm.isPersistent(npc));\r\n+          endEm(pm,());\r\n+\r\n+          pm = getPM();\r\n+          try {\r\n+              pm.find(RuntimeTest1.class,_oid);\r\n+              fail(\"Object should not exist.\");\r\n+          } catch (Exception jonfe) {\r\n+          }\r\n+          endEm(pm,());\r\n+      }\r\n+\r\n+    */\r\n+}\r"},{"sha":"1cc5faf1ad97901844900f3dd92772a557ce5d7a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * TestClassStringConstructor.java\r\n+ *\r\n+ * Created on October 16, 2006, 2:48 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestClassStringConstructor extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestClassStringConstructor\r\n+     */\r\n+    public TestClassStringConstructor(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AppIdClassString.class);\r\n+    }\r\n+\r\n+    public void testConstructor() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        AppIdClassString pc = new AppIdClassString(5);\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        pc = pm.find(AppIdClassString.class, new AppIdClassString.Idkey(\"5\"));\r\n+        assertEquals(5, pc.getPk());\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"22542de2a5d071741e5e980880c6ce018244274e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,118 @@\n+/*\r\n+ * TestConnectionRetainMode.java\r\n+ *\r\n+ * Created on October 10, 2006, 1:09 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+public class TestConnectionRetainMode extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestConnectionRetainMode\r\n+     */\r\n+    public TestConnectionRetainMode() {\r\n+    }\r\n+\r\n+    public TestConnectionRetainMode(String str) {\r\n+        super(str);\r\n+    }\r\n+\r\n+    public void testOnDemand()\r\n+        throws Exception {\r\n+        doTest(\"on-demand\");\r\n+    }\r\n+\r\n+    public void testTransaction()\r\n+        throws Exception {\r\n+        doTest(\"transaction\");\r\n+    }\r\n+\r\n+    public void testPersistenceManager()\r\n+        throws Exception {\r\n+        doTest(\"persistence-manager\");\r\n+    }\r\n+\r\n+    public void doTest(String mode)\r\n+        throws Exception {\r\n+        Map props = new HashMap();\r\n+        props.put(\"openjpa.ConnectionRetainMode\", mode);\r\n+\r\n+        OpenJPAEntityManagerFactory factory = getEmf(props);\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) factory.createEntityManager();\r\n+        Object initialConnection = pm.getConnection();\r\n+\r\n+        try {\r\n+            checkPM(pm, initialConnection, mode);\r\n+\r\n+            pm.setOptimistic(true);\r\n+            startTx(pm);\r\n+\r\n+            Object optimisticConnection = pm.getConnection();\r\n+            checkPM(pm, initialConnection, mode);\r\n+            checkTransaction(pm, optimisticConnection, mode);\r\n+\r\n+            rollbackTx(pm);\r\n+            checkPM(pm, initialConnection, mode);\r\n+\r\n+            pm.setOptimistic(false);\r\n+            startTx(pm);\r\n+\r\n+            Object pessimisticConnection = pm.getConnection();\r\n+            checkPM(pm, initialConnection, mode);\r\n+            checkTransaction(pm, pessimisticConnection, mode);\r\n+\r\n+            rollbackTx(pm);\r\n+            checkPM(pm, initialConnection, mode);\r\n+        } finally {\r\n+\r\n+            rollbackTx(pm);\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    private void checkPM(OpenJPAEntityManager pm, Object c, String mode)\r\n+        throws Exception {\r\n+        if (\"persistence-manager\".equals(mode))\r\n+            assertEquals(c, pm.getConnection());\r\n+    }\r\n+\r\n+    private void checkTransaction(OpenJPAEntityManager pm, Object c,\r\n+        String mode)\r\n+        throws Exception {\r\n+        if (!\"on-demand\".equals(mode)\r\n+            || !pm.getOptimistic())\r\n+            assertEquals(c, pm.getConnection());\r\n+    }\r\n+}\r"},{"sha":"cb600f22d291ca5c8ed7e076e1e75b25f181d848","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,134 @@\n+/*\r\n+ * TestDateQueries.java\r\n+ *\r\n+ * Created on October 10, 2006, 1:28 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestDateQueries extends BaseKernelTest {\r\n+\r\n+    private OpenJPAEntityManager _pm = null;\r\n+    private Date _date = null;\r\n+    private Date _before = null;\r\n+    private Date _after = null;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestDateQueries\r\n+     */\r\n+    public TestDateQueries() {\r\n+    }\r\n+\r\n+    public TestDateQueries(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        super.setUp();\r\n+\r\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"MMMMM dd, yyyy\");\r\n+        _date = sdf.parse(\"April 26, 1978\");\r\n+        _before = sdf.parse(\"April 25, 1978\");\r\n+        _after = sdf.parse(\"April 27, 1978\");\r\n+        _pm = getPM();\r\n+\r\n+        // delete all existing instances\r\n+        deleteAll(AllFieldTypesTest.class);\r\n+\r\n+        // create some instances to query on\r\n+        startTx(_pm);\r\n+        AllFieldTypesTest test = new AllFieldTypesTest();\r\n+        test.setTestDate(_date);\r\n+        _pm.persist(test);\r\n+\r\n+        test = new AllFieldTypesTest();\r\n+        test.setTestDate(_before);\r\n+        _pm.persist(test);\r\n+\r\n+        test = new AllFieldTypesTest();\r\n+        test.setTestDate(_after);\r\n+        _pm.persist(test);\r\n+        endTx(_pm);\r\n+    }\r\n+\r\n+    public void testEquals() {\r\n+        Collection vals = executeQuery(\"testDate = :date\");\r\n+        assertEquals(1, vals.size());\r\n+        assertEquals(_date, ((AllFieldTypesTest) vals.iterator().next()).\r\n+            getTestDate());\r\n+    }\r\n+\r\n+    public void testNotEquals() {\r\n+        Collection vals = executeQuery(\"testDate <> :date\");\r\n+        assertEquals(2, vals.size());\r\n+    }\r\n+\r\n+    public void testBefore() {\r\n+        Collection vals = executeQuery(\"testDate < :date\");\r\n+        assertEquals(1, vals.size());\r\n+        assertEquals(_before, ((AllFieldTypesTest) vals.iterator().next()).\r\n+            getTestDate());\r\n+    }\r\n+\r\n+    public void testAfter() {\r\n+        Collection vals = executeQuery(\"testDate > :date\");\r\n+        assertEquals(1, vals.size());\r\n+        assertEquals(_after, ((AllFieldTypesTest) vals.iterator().next()).\r\n+            getTestDate());\r\n+    }\r\n+\r\n+    public void testOrderBy() {\r\n+        String query =\r\n+            \"SELECT o FROM AllFieldTypesTest o ORDER BY o.testDate ASC\";\r\n+        OpenJPAQuery q = _pm.createQuery(query);\r\n+        List vals = q.getResultList();\r\n+        assertEquals(3, vals.size());\r\n+\r\n+        Iterator i = vals.iterator();\r\n+        assertEquals(_before, ((AllFieldTypesTest) i.next()).getTestDate());\r\n+        assertEquals(_date, ((AllFieldTypesTest) i.next()).getTestDate());\r\n+        assertEquals(_after, ((AllFieldTypesTest) i.next()).getTestDate());\r\n+    }\r\n+\r\n+    private List executeQuery(String filter) {\r\n+        String query = \"SELECT o FROM AllFieldTypesTest o WHERE o.\" + filter;\r\n+        OpenJPAQuery q = _pm.createQuery(query);\r\n+        q.setParameter(\"date\", _date);\r\n+        return q.getResultList();\r\n+    }\r\n+}\r"},{"sha":"3b2f1e71de0b490c5d76fa4d9870568027611ea5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","status":"added","additions":566,"deletions":0,"changes":566,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,566 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+public class TestDependentFields2 extends BaseKernelTest {\r\n+\r\n+    private static final int COMMIT = 0;\r\n+    private static final int ROLLBACK = 1;\r\n+    private static final int PRESTORE = 2;\r\n+\r\n+    private Object _root = null;\r\n+    private Object _rel = null;\r\n+    private Object _depRel = null;\r\n+    private Object _deep = null;\r\n+    private Object _coll = null;\r\n+    private Object _depColl = null;\r\n+    private Object _map = null;\r\n+    private Object _depMap = null;\r\n+    private Object _repeat = null;\r\n+\r\n+    public TestDependentFields2(String casename) {\r\n+        super(casename);\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        deleteAll(DependentFieldsPC.class);\r\n+\r\n+        DependentFieldsPC root = new DependentFieldsPC();\r\n+        root.setRelation(new DependentFieldsPC());\r\n+        root.getList().add(new DependentFieldsPC());\r\n+        root.getMap().put(\"key\", new DependentFieldsPC());\r\n+        root.setDependentRelation(new DependentFieldsPC());\r\n+        root.getDependentRelation().setDependentRelation\r\n+            (new DependentFieldsPC());\r\n+        root.getDependentList().add(new DependentFieldsPC());\r\n+        root.getDependentMap().put(\"key\", new DependentFieldsPC());\r\n+\r\n+        DependentFieldsPC repeat = new DependentFieldsPC();\r\n+        root.getDependentList().add(repeat);\r\n+        root.getDependentMap().put(\"repeat\", repeat);\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(root);\r\n+        endTx(pm);\r\n+\r\n+        _root = pm.getObjectId(root);\r\n+        assertNotNull(_root);\r\n+        _rel = pm.getObjectId(root.getRelation());\r\n+        _depRel = pm.getObjectId(root.getDependentRelation());\r\n+        _deep = pm.getObjectId(root.getDependentRelation().\r\n+            getDependentRelation());\r\n+        _coll = pm.getObjectId(root.getList().iterator().next());\r\n+        Iterator itr = root.getDependentList().iterator();\r\n+        _depColl = pm.getObjectId(itr.next());\r\n+        _repeat = pm.getObjectId(itr.next());\r\n+        _map = pm.getObjectId(root.getMap().get(\"key\"));\r\n+        _depMap = pm.getObjectId(root.getDependentMap().get(\"key\"));\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testDependentFieldsLoaded() {\r\n+        delete(true, COMMIT);\r\n+        checkFields();\r\n+    }\r\n+\r\n+    public void testDependentFieldsLoadedWithRollback() {\r\n+        delete(true, ROLLBACK);\r\n+        checkFields();\r\n+    }\r\n+\r\n+    public void testDependentFieldsLoadedWithPreStore() {\r\n+        delete(true, PRESTORE);\r\n+        checkFields();\r\n+    }\r\n+\r\n+    public void testDependentFieldsUnloaded() {\r\n+        delete(false, COMMIT);\r\n+        checkFields();\r\n+    }\r\n+\r\n+    public void testDependentFieldsUnloadedWithRollback() {\r\n+        delete(false, ROLLBACK);\r\n+        checkFields();\r\n+    }\r\n+\r\n+    public void testDependentFieldsUnloadedWithPreStore() {\r\n+        delete(false, PRESTORE);\r\n+        checkFields();\r\n+    }\r\n+\r\n+    private void delete(boolean load, int action) {\r\n+        OpenJPAEntityManager pm = getPM(true, true);\r\n+        DependentFieldsPC root;\r\n+        Object rel = null;\r\n+        Object depRel = null;\r\n+        Object coll = null;\r\n+        Object depColl = null;\r\n+        Object map = null;\r\n+        Object depMap = null;\r\n+        Object repeat = null;\r\n+        Object deep = null;\r\n+        while (true) {\r\n+            startTx(pm);\r\n+            root = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n+            if (load) {\r\n+                rel = root.getRelation();\r\n+                assertNotNull(rel);\r\n+                depRel = root.getDependentRelation();\r\n+                assertNotNull(depRel);\r\n+                deep = ((DependentFieldsPC) depRel).getDependentRelation();\r\n+                assertNotNull(deep);\r\n+                coll = root.getList().iterator().next();\r\n+                assertNotNull(coll);\r\n+                Iterator itr = root.getDependentList().iterator();\r\n+                depColl = itr.next();\r\n+                repeat = itr.next();\r\n+                assertNotNull(depColl);\r\n+                assertNotNull(repeat);\r\n+                map = root.getMap().get(\"key\");\r\n+                assertNotNull(map);\r\n+                depMap = root.getDependentMap().get(\"key\");\r\n+                assertNotNull(depMap);\r\n+\r\n+                // pcl: test both depColl and repeat, since they might\r\n+                // have been out of order above.\r\n+                Object o = root.getDependentMap().get(\"repeat\");\r\n+                if (o != repeat)\r\n+                    fail(\"dependent map does not contain 'repeat'\");\r\n+            }\r\n+            pm.remove(root);\r\n+\r\n+            if (action == ROLLBACK) {\r\n+                rollbackTx(pm);\r\n+                action = COMMIT;\r\n+            } else if (action == COMMIT) {\r\n+                endTx(pm);\r\n+                break;\r\n+            } else {\r\n+                pm.preFlush();\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        if (load) {\r\n+            if (action == PRESTORE) {\r\n+                assertFalse(pm.isRemoved(rel));\r\n+                assertFalse(pm.isRemoved(coll));\r\n+                assertFalse(pm.isRemoved(map));\r\n+                assertTrue(pm.isRemoved(depRel));\r\n+                assertTrue(pm.isRemoved(deep));\r\n+                assertTrue(pm.isRemoved(depColl));\r\n+                assertTrue(pm.isRemoved(depMap));\r\n+                assertTrue(pm.isRemoved(repeat));\r\n+            } else {\r\n+                assertNotNull(OpenJPAPersistence.getEntityManager(rel));\r\n+                assertNotNull(OpenJPAPersistence.getEntityManager(coll));\r\n+                assertNotNull(OpenJPAPersistence.getEntityManager(map));\r\n+                assertNull(OpenJPAPersistence.getEntityManager(depRel));\r\n+                assertNull(OpenJPAPersistence.getEntityManager(deep));\r\n+                assertNull(OpenJPAPersistence.getEntityManager(depColl));\r\n+                assertNull(OpenJPAPersistence.getEntityManager(depMap));\r\n+                assertNull(OpenJPAPersistence.getEntityManager(repeat));\r\n+            }\r\n+        }\r\n+\r\n+        if (action == PRESTORE)\r\n+            endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private void checkFields() {\r\n+        OpenJPAEntityManager pm = getPM(true, true);\r\n+        assertNotNull(pm.find(DependentFieldsPC.class, _rel));\r\n+        assertNotNull(pm.find(DependentFieldsPC.class, _coll));\r\n+        assertNotNull(pm.find(DependentFieldsPC.class, _map));\r\n+        assertNull(pm.find(DependentFieldsPC.class, _depRel));\r\n+        assertNull(pm.find(DependentFieldsPC.class, _deep));\r\n+        assertNull(pm.find(DependentFieldsPC.class, _depColl));\r\n+        assertNull(pm.find(DependentFieldsPC.class, _depMap));\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNullDeletesDependent() {\r\n+        nullDeletesDependent(COMMIT);\r\n+    }\r\n+\r\n+    public void testNullDeletesDependentWithRollback() {\r\n+        nullDeletesDependent(ROLLBACK);\r\n+    }\r\n+\r\n+    public void testNullDeletesDependentWithPreStore() {\r\n+        nullDeletesDependent(PRESTORE);\r\n+    }\r\n+\r\n+    private void nullDeletesDependent(int action) {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        DependentFieldsPC pc;\r\n+        DependentFieldsPC depRel;\r\n+        while (true) {\r\n+            startTx(pm);\r\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n+            depRel = pc.getDependentRelation();\r\n+            assertEquals(_depRel, pm.getObjectId(depRel));\r\n+            pc.setDependentRelation(null);\r\n+            if (action == ROLLBACK) {\r\n+                rollbackTx(pm);\r\n+                action = COMMIT;\r\n+            } else if (action == COMMIT) {\r\n+                endTx(pm);\r\n+                break;\r\n+            } else {\r\n+                pm.preFlush();\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        if (action == PRESTORE) {\r\n+            assertTrue(pm.isRemoved(depRel));\r\n+            endTx(pm);\r\n+        }\r\n+\r\n+        assertTrue(!pm.isPersistent(depRel));\r\n+        assertNull(pm.find(DependentFieldsPC.class, _depRel));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testRemoveDeletesDependent() {\r\n+        removeDeletesDependent(COMMIT);\r\n+    }\r\n+\r\n+    public void testRemoveDeletesDependentWithRollback() {\r\n+        removeDeletesDependent(ROLLBACK);\r\n+    }\r\n+\r\n+    public void testRemoveDeletesDependentWithPreStore() {\r\n+        removeDeletesDependent(PRESTORE);\r\n+    }\r\n+\r\n+    private void removeDeletesDependent(int action) {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        DependentFieldsPC pc;\r\n+        DependentFieldsPC depColl;\r\n+        DependentFieldsPC depMap;\r\n+        List list;\r\n+        Map map;\r\n+        while (true) {\r\n+            startTx(pm);\r\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n+            list = pc.getDependentList();\r\n+            assertEquals(\"list size =! 2\", 2, list.size());\r\n+            depColl = (DependentFieldsPC) list.remove(0);\r\n+            assertEquals(\"_depColl is not pm.getObjectId(depColl)\", _depColl,\r\n+                pm.getObjectId(depColl));\r\n+\r\n+            map = pc.getDependentMap();\r\n+            assertEquals(\"map size =! 2\", 2, map.size());\r\n+            depMap = (DependentFieldsPC) map.remove(\"key\");\r\n+            assertEquals(\"_depMap is not pm.getObjectId(depMap)\", _depMap,\r\n+                pm.getObjectId(depMap));\r\n+\r\n+            if (action == ROLLBACK) {\r\n+                rollbackTx(pm);\r\n+                action = COMMIT;\r\n+            } else if (action == COMMIT) {\r\n+                endTx(pm);\r\n+                break;\r\n+            } else {\r\n+                pm.preFlush();\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        if (action == PRESTORE) {\r\n+            assertTrue(pm.isRemoved(depColl));\r\n+            assertTrue(pm.isRemoved(depMap));\r\n+            endTx(pm);\r\n+        }\r\n+\r\n+//        assertTrue(\"depcoll is persistence\", !pm.isPersistent(depColl));\r\n+        assertNull(pm.find(DependentFieldsPC.class, _depColl));\r\n+\r\n+//        assertTrue(\"depMap is persistence\", !pm.isPersistent(depMap));\r\n+        assertNull(pm.find(DependentFieldsPC.class, _depMap));\r\n+\r\n+        assertNotNull(\"repeat is null\",\r\n+            pm.find(DependentFieldsPC.class, _repeat));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testMoveDependentInContainer() {\r\n+        moveDependentInContainer(COMMIT);\r\n+    }\r\n+\r\n+    public void testMoveDependentInContainerWithRollback() {\r\n+        moveDependentInContainer(ROLLBACK);\r\n+    }\r\n+\r\n+    public void testMoveDependentInContainerWithPreStore() {\r\n+        moveDependentInContainer(PRESTORE);\r\n+    }\r\n+\r\n+    private void moveDependentInContainer(int action) {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        DependentFieldsPC pc;\r\n+        DependentFieldsPC depColl;\r\n+        DependentFieldsPC depMap;\r\n+        List list;\r\n+        Map map;\r\n+        while (true) {\r\n+            startTx(pm);\r\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n+            list = pc.getDependentList();\r\n+            assertEquals(2, list.size());\r\n+            depColl = (DependentFieldsPC) list.get(0);\r\n+            assertEquals(_depColl, pm.getObjectId(depColl));\r\n+            list.remove(0);\r\n+            list.add(depColl);\r\n+\r\n+            map = pc.getDependentMap();\r\n+            assertEquals(2, map.size());\r\n+            depMap = (DependentFieldsPC) map.get(\"key\");\r\n+            assertEquals(_depMap, pm.getObjectId(depMap));\r\n+            map.remove(\"key\");\r\n+            map.put(\"newkey\", depMap);\r\n+\r\n+            if (action == ROLLBACK) {\r\n+                rollbackTx(pm);\r\n+                action = COMMIT;\r\n+            } else if (action == COMMIT) {\r\n+                endTx(pm);\r\n+                break;\r\n+            } else {\r\n+                pm.preFlush();\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        if (action == PRESTORE) {\r\n+            assertFalse(pm.isRemoved(depColl));\r\n+            assertFalse(pm.isRemoved(depMap));\r\n+            endTx(pm);\r\n+        }\r\n+\r\n+        assertTrue(pm.isPersistent(depColl));\r\n+        assertNotNull(pm.find(DependentFieldsPC.class, _depColl));\r\n+        assertTrue(pm.isPersistent(depMap));\r\n+        assertNotNull(pm.find(DependentFieldsPC.class, _depMap));\r\n+        assertNotNull(pm.find(DependentFieldsPC.class, _repeat));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testRefedDependentNotDeleted() {\r\n+        refedDependentNotDeleted(COMMIT);\r\n+    }\r\n+\r\n+    public void testRefedDependentNotDeletedWithRollback() {\r\n+        refedDependentNotDeleted(ROLLBACK);\r\n+    }\r\n+\r\n+    public void testRefedDependentNotDeletedWithPreStore() {\r\n+        refedDependentNotDeleted(PRESTORE);\r\n+    }\r\n+\r\n+    private void refedDependentNotDeleted(int action) {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        DependentFieldsPC pc;\r\n+        DependentFieldsPC newPC = null;\r\n+        DependentFieldsPC depRel;\r\n+        while (true) {\r\n+            startTx(pm);\r\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n+            if (newPC == null)\r\n+                newPC = new DependentFieldsPC();\r\n+            depRel = pc.getDependentRelation();\r\n+            newPC.setDependentRelation(depRel);\r\n+            pc.setDependentRelation(null);\r\n+            pm.persist(newPC);\r\n+\r\n+            if (action == ROLLBACK) {\r\n+                rollbackTx(pm);\r\n+                action = COMMIT;\r\n+            } else if (action == COMMIT) {\r\n+                endTx(pm);\r\n+                break;\r\n+            } else {\r\n+                pm.preFlush();\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        if (action == PRESTORE) {\r\n+            assertFalse(pm.isRemoved(depRel));\r\n+            endTx(pm);\r\n+        }\r\n+\r\n+        assertTrue(pm.isPersistent(depRel));\r\n+        assertNotNull(pm.find(DependentFieldsPC.class, _depRel));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNullSharedDependent() {\r\n+        nullSharedDependent(COMMIT);\r\n+    }\r\n+\r\n+    public void testNullSharedDependentWithRollback() {\r\n+        nullSharedDependent(ROLLBACK);\r\n+    }\r\n+\r\n+    public void testNullSharedDependentWithPreStore() {\r\n+        nullSharedDependent(PRESTORE);\r\n+    }\r\n+\r\n+    private void nullSharedDependent(int action) {\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        DependentFieldsPC pc;\r\n+        DependentFieldsPC repeat;\r\n+        List list;\r\n+        Map map;\r\n+        while (true) {\r\n+            startTx(pm);\r\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n+            list = pc.getDependentList();\r\n+            assertEquals(2, list.size());\r\n+            repeat = (DependentFieldsPC) list.get(1);\r\n+            assertEquals(_repeat, pm.getObjectId(repeat));\r\n+            list.remove(1);\r\n+\r\n+            map = pc.getDependentMap();\r\n+            assertEquals(2, map.size());\r\n+            assertEquals(repeat, (DependentFieldsPC) map.remove(\"repeat\"));\r\n+\r\n+            if (action == PRESTORE)\r\n+                pm.preFlush();\r\n+            else\r\n+                pm.flush();\r\n+            assertTrue(pm.isRemoved(repeat));\r\n+\r\n+            // now after deleting on flush, assigning to another field and\r\n+            // attempting to commit should throw an error -- can't undelete an\r\n+            // object\r\n+            pc.getList().add(repeat);\r\n+\r\n+            if (action == ROLLBACK) {\r\n+                rollbackTx(pm);\r\n+                action = COMMIT;\r\n+            } else {\r\n+                try {\r\n+                    pm.getTransaction().commit();\r\n+                    fail(\"Committed with ref to deleted dependent object\");\r\n+                } catch (Exception je) {\r\n+                    rollbackTx(pm);\r\n+                } finally {\r\n+                }\r\n+                break;\r\n+            }\r\n+        }\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testClearMappedDependentOfDetached() {\r\n+        clearDependentOfDetachedTest(true);\r\n+    }\r\n+\r\n+    public void testClearInverseKeyDependentOfDetached() {\r\n+        clearDependentOfDetachedTest(false);\r\n+    }\r\n+\r\n+    private void clearDependentOfDetachedTest(boolean mapped) {\r\n+        deleteAll(DependentFieldsPC.class);\r\n+\r\n+        DependentFieldsPC owner = new DependentFieldsPC();\r\n+        for (int i = 0; i < 2; i++) {\r\n+            DependentFieldsPC child = new DependentFieldsPC();\r\n+            if (mapped) {\r\n+                owner.getDependentMappedList().add(child);\r\n+                child.setOwner(owner);\r\n+            } else\r\n+                owner.getDependentInverseKeyList().add(child);\r\n+        }\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(owner);\r\n+        endTx(pm);\r\n+        Object oid = pm.getObjectId(owner);\r\n+        assertEquals(3,\r\n+            ((Extent) pm.createExtent(DependentFieldsPC.class, true))\r\n+                .list().size());\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        owner = (DependentFieldsPC) pm.find(DependentFieldsPC.class, oid);\r\n+        if (mapped)\r\n+            assertEquals(2, owner.getDependentMappedList().size());\r\n+        else\r\n+            assertEquals(2, owner.getDependentInverseKeyList().size());\r\n+        DependentFieldsPC detached = (DependentFieldsPC) pm.detach(owner);\r\n+        endEm(pm);\r\n+\r\n+        if (mapped) {\r\n+            assertEquals(2, detached.getDependentMappedList().size());\r\n+            detached.getDependentMappedList().clear();\r\n+        } else {\r\n+            assertEquals(2, detached.getDependentInverseKeyList().size());\r\n+            detached.getDependentInverseKeyList().clear();\r\n+        }\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(pm);\r\n+        owner = (DependentFieldsPC) pm.merge(detached);\r\n+        if (mapped)\r\n+            assertEquals(0, owner.getDependentMappedList().size());\r\n+        else\r\n+            assertEquals(0, owner.getDependentInverseKeyList().size());\r\n+        endTx(pm);\r\n+        assertEquals(1,\r\n+            ((Extent) pm.createExtent(DependentFieldsPC.class, true)).\r\n+                list().size());\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) currentEntityManager();\r\n+        owner = (DependentFieldsPC) pm.find(DependentFieldsPC.class, oid);\r\n+        if (mapped)\r\n+            assertEquals(0, owner.getDependentMappedList().size());\r\n+        else\r\n+            assertEquals(0, owner.getDependentInverseKeyList().size());\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"5a1f9031e06b3580a8bd9d1243c08605c5f7eeeb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","status":"added","additions":542,"deletions":0,"changes":542,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,542 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+import java.util.TreeMap;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachA;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachB;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachD;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachE;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n+import org.apache.openjpa.enhance.PCEnhancer;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.kernel.DetachedStateManager;\r\n+import org.apache.openjpa.lib.util.Options;\r\n+import org.apache.openjpa.persistence.DetachStateType;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+public class TestDetachedStateManager extends BaseKernelTest {\r\n+\r\n+    private static boolean enhanced = false;\r\n+\r\n+    private int oid;\r\n+    private int doid;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestDetachedStateManager\r\n+     */\r\n+    public TestDetachedStateManager(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    private void deleteAll() {\r\n+        deleteAll(AttachA.class);\r\n+        deleteAll(AttachD.class);\r\n+    }\r\n+\r\n+    public OpenJPAEntityManager getPM() {\r\n+        OpenJPAEntityManager pm = super.getPM();\r\n+        //FIXME jthomas\r\n+        //pm.currentTransaction().setRestoreValues(false);\r\n+        return pm;\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        super.setUp();\r\n+\r\n+        deleteAll();\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        AttachB b = new AttachB();\r\n+        pm.persist(b);\r\n+        b.setAint(5);\r\n+        b.setBstr(\"5\");\r\n+        b.getStringIntMap().put(\"5\", new Integer(5));\r\n+\r\n+        AttachE e = new AttachE();\r\n+        e.setEstr(\"E\");\r\n+        e.setEint(5);\r\n+\r\n+        AttachD d = new AttachD();\r\n+        d.setDint(5);\r\n+        d.setEmbeddedE(e);\r\n+        b.getDs().add(d);\r\n+\r\n+        pm.persist(d);\r\n+\r\n+        oid = b.getId();\r\n+        doid = d.getId();\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testDetach() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachB b = pm.find(AttachB.class, oid);\r\n+\r\n+        assertNotNull(\"b is null in testDetach\", b);\r\n+\r\n+        b = (AttachB) pm.detach(b);\r\n+        endEm(pm);\r\n+\r\n+        assertTrue(pm.isDetached(b));\r\n+        assertEquals(5, b.getAint());\r\n+        assertEquals(\"5\", b.getBstr());\r\n+        assertNull(b.getStringIntMap());\r\n+\r\n+        b.setAint(12);\r\n+        b.setBstr(\"12\");\r\n+        TreeMap map = new TreeMap();\r\n+        map.put(\"12\", new Integer(12));\r\n+        b.setStringIntMap(map);\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachB attached = (AttachB) pm.merge(b);\r\n+        assertEquals(12, attached.getAint());\r\n+        assertEquals(\"12\", attached.getBstr());\r\n+        assertNull(attached.getStringIntMap().get(\"12\"));\r\n+        assertEquals(new Integer(5), attached.getStringIntMap().get(\"5\"));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        b = pm.find(AttachB.class, oid);\r\n+        assertEquals(12, b.getAint());\r\n+        assertEquals(\"12\", b.getBstr());\r\n+        assertNull(b.getStringIntMap().get(\"12\"));\r\n+        assertEquals(new Integer(5), b.getStringIntMap().get(\"5\"));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testDetachWithGroups() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        //FIXME jthomas\r\n+//        pm.getFetchPlan().setDetachmentOptions(FetchPlanImpl.DETACH_LOAD_FIELDS | FetchPlanImpl.DETACH_UNLOAD_FIELDS);\r\n+        pm.setDetachState(DetachStateType.FETCH_GROUPS);\r\n+        pm.getFetchPlan().addFetchGroup(\"all\");\r\n+        AttachB b = pm.find(AttachB.class, oid);\r\n+\r\n+        assertNotNull(\"b is null in testDetachWithGroups\", b);\r\n+\r\n+        b = (AttachB) pm.detach(b);\r\n+        endEm(pm);\r\n+\r\n+        assertTrue(pm.isDetached(b));\r\n+        assertEquals(\"b.getAint() not 5\", 5, b.getAint());\r\n+        assertEquals(\"b.getAint() not 5str\", \"5\", b.getBstr());\r\n+        assertEquals(\"b.getStringIntMap().size() not equal to 1\", 1,\r\n+            b.getStringIntMap().size());\r\n+\r\n+        b.setAint(12);\r\n+        b.setBstr(\"12\");\r\n+        b.getStringIntMap().put(\"12\", new Integer(12));\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachB attached = (AttachB) pm.merge(b);\r\n+        assertEquals(\"not 12\", 12, attached.getAint());\r\n+        assertEquals(\"not 12str\", \"12\", attached.getBstr());\r\n+        assertEquals(\"not newInteger(12)\", new Integer(12),\r\n+            attached.getStringIntMap().get(\"12\"));\r\n+        assertEquals(\"not newInteger(5)\", new Integer(5),\r\n+            attached.getStringIntMap().get(\"5\"));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        b = (AttachB) pm.find(AttachB.class, oid);\r\n+        assertEquals(\"not equal 12\", 12, b.getAint());\r\n+        assertEquals(\"not equal 12str\", \"12\", b.getBstr());\r\n+        assertEquals(\"not equal newinteger(12)\", new Integer(12),\r\n+            b.getStringIntMap().get(\"12\"));\r\n+        assertEquals(\"not equal newInteger(5)\", new Integer(5),\r\n+            b.getStringIntMap().get(\"5\"));\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testDetachNoOverwrite() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n+        b = (AttachB) pm.detach(b);\r\n+        endEm(pm);\r\n+\r\n+        b.setBstr(\"12\");\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachB orig = pm.find(AttachB.class, oid);\r\n+        orig.setAint(50);\r\n+\r\n+        AttachB attached = (AttachB) pm.merge(b);\r\n+        assertEquals(attached, orig);\r\n+        assertEquals(50, attached.getAint());\r\n+        assertEquals(\"12\", attached.getBstr());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        b = (AttachB) pm.find(AttachB.class, oid);\r\n+        assertEquals(50, b.getAint());\r\n+        assertEquals(\"12\", b.getBstr());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testOptimisticLock() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n+\r\n+        assertNotNull(\"b is null in testOptimisticLock\", b);\r\n+\r\n+        b = (AttachB) pm.detach(b);\r\n+        endEm(pm);\r\n+\r\n+        b.setAint(12);\r\n+        b.setBstr(\"12\");\r\n+        TreeMap map = new TreeMap();\r\n+        map.put(\"12\", new Integer(12));\r\n+        b.setStringIntMap(map);\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachB b2 = (AttachB) pm.find(AttachB.class, oid);\r\n+        b2.setAint(15);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        try {\r\n+            pm.merge(b);\r\n+            endTx(pm);\r\n+            fail(\"OL expected.\");\r\n+        } catch (Exception jove) {\r\n+            rollbackTx(pm);\r\n+        }\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testEmbedded() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachD d = pm.find(AttachD.class, doid);\r\n+\r\n+        assertNotNull(\"d is null in testEmbedded\", d);\r\n+\r\n+        d.getEmbeddedE().getEstr();\r\n+        d = (AttachD) pm.detach(d);\r\n+        endEm(pm);\r\n+\r\n+        d.getEmbeddedE().setEstr(\"E12\");\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachD d2 = (AttachD) pm.merge(d);\r\n+        assertNotEquals(d.getEmbeddedE(), d2.getEmbeddedE());\r\n+        assertEquals(\"E12\", d2.getEmbeddedE().getEstr());\r\n+        assertEquals(5, d2.getEmbeddedE().getEint());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        d2 = (AttachD) pm.find(AttachD.class, doid);\r\n+\r\n+        assertNotNull(\"d2 is null in testEmbedded\", d2);\r\n+\r\n+        assertEquals(\"E12\", d2.getEmbeddedE().getEstr());\r\n+        assertEquals(5, d2.getEmbeddedE().getEint());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNullEmbedded() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachD d = (AttachD) pm.find(AttachD.class, doid);\r\n+\r\n+        assertNotNull(\"d is null in testNullEmbedded\", d);\r\n+        d.getEmbeddedE().getEstr();\r\n+        d = (AttachD) pm.detach(d);\r\n+        endEm(pm);\r\n+\r\n+        d.setEmbeddedE(null);\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachD d2 = (AttachD) pm.merge(d);\r\n+        assertNull(d2.getEmbeddedE());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        d2 = (AttachD) pm.find(AttachD.class, doid);\r\n+\r\n+        assertNotNull(\"d2 is null in testNullEmbedded\", d2);\r\n+        // no null ind\r\n+        if (d2.getEmbeddedE() != null) {\r\n+            assertNull(d2.getEmbeddedE().getEstr());\r\n+            assertEquals(0, d2.getEmbeddedE().getEint());\r\n+        }\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNullEmbeddedRelated() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachD d = (AttachD) pm.find(AttachD.class, doid);\r\n+\r\n+        assertNotNull(\"d is null in testNullEmbeddedRelated\", d);\r\n+\r\n+        d.getEmbeddedE().getEstr();\r\n+        d = (AttachD) pm.detach(d);\r\n+        endEm(pm);\r\n+\r\n+        d.getEmbeddedE().setEstr(null);\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachD d2 = (AttachD) pm.merge(d);\r\n+        assertNull(\"d2.getEmbeddedE().getEstr() is not null\",\r\n+            d2.getEmbeddedE().getEstr());\r\n+        assertEquals(\"d2.getEmbeddedE().getEint() is not equal to 5\", 5,\r\n+            d2.getEmbeddedE().getEint());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        d2 = (AttachD) pm.find(AttachD.class, doid);\r\n+        assertNull(\"d2.getEmbeddedE().getEstr() is not null\",\r\n+            d2.getEmbeddedE().getEstr());\r\n+        assertEquals(\"d2.getEmbeddedE().getEint() is not 5\", 5,\r\n+            d2.getEmbeddedE().getEint());\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNullCollection() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n+        b.getDs();\r\n+        b = (AttachB) pm.detach(b);\r\n+        endEm(pm);\r\n+\r\n+        assertEquals(1, b.getDs().size());\r\n+        b.setDs(null);\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        b = (AttachB) pm.merge(b);\r\n+        assertNull(b.getDs());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        b = (AttachB) pm.find(AttachB.class, oid);\r\n+        assertTrue(b.getDs() == null || b.getDs().size() == 0);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testCollectionAdd() {\r\n+        doCollectionTest(false);\r\n+    }\r\n+\r\n+    public void testCollectionChanges() {\r\n+        doCollectionTest(true);\r\n+    }\r\n+\r\n+    private void doCollectionTest(boolean remove) {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n+\r\n+        assertNotNull(\"b is null in doCollectionTest\", b);\r\n+        b.getDs();\r\n+        b = (AttachB) pm.detach(b);\r\n+        endEm(pm);\r\n+\r\n+        assertEquals(\"b is null in doCollectionTest\", 1, b.getDs().size());\r\n+        if (remove) {\r\n+            for (Iterator it = b.getDs().iterator(); it.hasNext();) {\r\n+                it.next();\r\n+                it.remove();\r\n+            }\r\n+        }\r\n+        AttachD d = new AttachD();\r\n+        d.setDint(12);\r\n+        b.getDs().add(d);\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        b = (AttachB) pm.merge(b);\r\n+        assertSize(remove ? 1 : 2, b.getDs());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        b = (AttachB) pm.find(AttachB.class, oid);\r\n+        assertSize(remove ? 1 : 2, b.getDs());\r\n+        boolean found1 = false;\r\n+        boolean found2 = false;\r\n+        for (Iterator it = b.getDs().iterator(); it.hasNext();) {\r\n+            d = (AttachD) it.next();\r\n+            switch (d.getDint()) {\r\n+                case 5:\r\n+                    if (found1)\r\n+                        fail(\"Refound.\");\r\n+                    found1 = true;\r\n+                    break;\r\n+                case 12:\r\n+                    if (found2)\r\n+                        fail(\"Refound.\");\r\n+                    found2 = true;\r\n+                    break;\r\n+                default:\r\n+                    fail(\"Unknown d:\" + d.getDint());\r\n+            }\r\n+        }\r\n+\r\n+        if (remove)\r\n+            assertFalse(found1);\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    /*\r\n+   //###\r\n+   // No time to get these working right now.  Have to figure out how to\r\n+   // enhance certain classes with different DetachState settings in autobuild.\r\n+   public void testSerialization ()\r\n+       throws Exception\r\n+   {\r\n+       doSerializationTest (false);\r\n+   }\r\n+\r\n+\r\n+   public void testSerializationAuto ()\r\n+       throws Exception\r\n+   {\r\n+       doSerializationTest (true);\r\n+   }\r\n+    */\r\n+\r\n+    private void doSerializationTest(boolean auto) throws Exception {\r\n+        enhance();\r\n+        Map props = new HashMap();\r\n+        props.put(\"openjpa.DetachState\", \"DetachedStateField=true\");\r\n+\r\n+        OpenJPAEntityManagerFactory factory =\r\n+            (OpenJPAEntityManagerFactory) getEmf(props);\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) factory.createEntityManager();\r\n+\r\n+        startTx(pm);\r\n+        DetachSMPC pc = new DetachSMPC();\r\n+        pc.setIntField(1);\r\n+        DetachSMPC rel = new DetachSMPC();\r\n+        rel.setIntField(2);\r\n+        pc.getRelSet().add(rel);\r\n+        pc.getStringIntMap().put(\"a\", new Integer(99));\r\n+        pm.persist(pc);\r\n+        endTx(pm);\r\n+        Object pcoid = pm.getObjectId(pc);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        pc = (DetachSMPC) pm.find(DetachSMPC.class, pcoid);\r\n+        pc.getRelSet();\r\n+        pc.getStringIntMap();\r\n+        if (!auto) {\r\n+            pc = (DetachSMPC) pm.detach(pc);\r\n+            assertDetachedSM(pc);\r\n+        }\r\n+        pc = (DetachSMPC) roundtrip(pc, false);\r\n+        assertDetachedSM(pc);\r\n+        endEm(pm);\r\n+\r\n+        assertDetachedSM(pc);\r\n+        assertSize(1, pc.getRelSet());\r\n+        assertEquals(1, pc.getStringIntMap().size());\r\n+\r\n+        pc.setIntField(3);\r\n+        ((DetachSMPC) pc.getRelSet().iterator().next()).setIntField(4);\r\n+        pc.getStringIntMap().put(\"b\", new Integer(100));\r\n+\r\n+        pc = (DetachSMPC) roundtrip(pc, false);\r\n+\r\n+        assertDetachedSM(pc);\r\n+        assertEquals(3, pc.getIntField());\r\n+        assertSize(1, pc.getRelSet());\r\n+        //assertDetachedSM (b.getDs ().iterator ().next ());\r\n+        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\r\n+            .getIntField());\r\n+        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\r\n+\r\n+        pm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        startTx(pm);\r\n+        pc = (DetachSMPC) pm.merge(pc);\r\n+        assertEquals(3, pc.getIntField());\r\n+        assertSize(1, pc.getRelSet());\r\n+        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\r\n+            .getIntField());\r\n+        assertEquals(2, pc.getStringIntMap().size());\r\n+        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = (OpenJPAEntityManager) factory.createEntityManager();\r\n+        pc = (DetachSMPC) pm.find(DetachSMPC.class, pcoid);\r\n+        assertEquals(3, pc.getIntField());\r\n+        assertSize(1, pc.getRelSet());\r\n+        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\r\n+            .getIntField());\r\n+        assertEquals(2, pc.getStringIntMap().size());\r\n+        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\r\n+\r\n+        startTx(pm);\r\n+        deleteAll(DetachSMPC.class, pm);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+        factory.close();\r\n+    }\r\n+\r\n+    private void enhance() throws Exception {\r\n+        Properties props = getProperties(new String[]{\r\n+            \"openjpa.DetachState\", \"DetachedStateField=true\",\r\n+        });\r\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl(true, false);\r\n+        conf.fromProperties(props);\r\n+\r\n+        Options opts = new Options();\r\n+        opts.put(\"jdo\", \"true\");\r\n+        PCEnhancer.run(conf, new String[]{\r\n+            \"org.apache.openjpa.persistence.kernel.noenhance.DetachSMPC\" }, opts);\r\n+    }\r\n+\r\n+    private void assertDetachedSM(Object obj) {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        assertTrue(pm.isDetached(obj));\r\n+        PersistenceCapable pc = (PersistenceCapable) obj;\r\n+        assertEquals(DetachedStateManager.class,\r\n+            pc.pcGetStateManager().getClass());\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"e6ef66842253616f2c1d445e92d74e920ac944e3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","status":"added","additions":246,"deletions":0,"changes":246,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,246 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC;\r\n+\r\n+public class TestEJBEmbedded extends BaseKernelTest {\r\n+\r\n+    private Object _oid1 = null;\r\n+    private Object _oid2 = null;\r\n+\r\n+    EmbeddedOwnerPC.EmbKey id1;\r\n+    EmbeddedOwnerPC.EmbKey id2;\r\n+\r\n+    public TestEJBEmbedded(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public void setUp() {\r\n+        deleteAll(EmbeddedOwnerPC.class);\r\n+        deleteAll(EmbeddedPC.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        EmbeddedOwnerPC pc1 = new EmbeddedOwnerPC(1, 2);\r\n+        pc1.setStringField(\"string1\");\r\n+        EmbeddedPC embed1 = new EmbeddedPC();\r\n+        embed1.setStringField(\"embedString1\");\r\n+        embed1.setIntField(1);\r\n+        pc1.setEmbedded(embed1);\r\n+\r\n+        EmbeddedPC embed2 = new EmbeddedPC();\r\n+        embed2.setStringField(\"embedString2\");\r\n+        embed2.setIntField(2);\r\n+\r\n+        EmbeddedOwnerPC pc2 = new EmbeddedOwnerPC(3, 4);\r\n+\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+\r\n+        endTx(em);\r\n+\r\n+        id1 = new EmbeddedOwnerPC.EmbKey(\"1:2\");\r\n+\r\n+        id2 = new EmbeddedOwnerPC.EmbKey();\r\n+        id2.id1 = 3;\r\n+        id2.id2 = 4;\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testInsert() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        EmbeddedOwnerPC pc = pm.find(EmbeddedOwnerPC.class, id1);\r\n+        EmbeddedOwnerPC pc2 = pm.find(EmbeddedOwnerPC.class, id2);\r\n+        assertNotNull(\"pc is null in testInsert\", pc);\r\n+        assertNotNull(\"p2 is null in testInsert\", pc2);\r\n+\r\n+        assertEquals(\"string1\", pc.getStringField());\r\n+        assertNotNull(pc.getEmbedded());\r\n+        assertEquals(\"embedString1\", pc.getEmbedded().getStringField());\r\n+        assertEquals(1, pc.getEmbedded().getIntField());\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testDelete() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        EmbeddedOwnerPC pc =\r\n+            (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\r\n+\r\n+        assertNotNull(\"pc is null in testDelete\", pc);\r\n+\r\n+        EmbeddedPC embed = pc.getEmbedded();\r\n+\r\n+        pc.setEmbedded(null);\r\n+\r\n+        endTx(pm);\r\n+\r\n+        endEm(pm);\r\n+\r\n+        pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        pc = (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\r\n+\r\n+        assertEquals(\"the expt strng is not string1\", \"string1\",\r\n+            pc.getStringField());\r\n+        assertNull(\"pc's embedded is null\", pc.getEmbedded());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testUpdateRetain() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        EmbeddedOwnerPC pc =\r\n+            (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\r\n+\r\n+        assertNotNull(\"pc is null testUpdateRetain\", pc);\r\n+\r\n+        pc.setStringField(\"string2\");\r\n+        pc.getEmbedded().setStringField(\"embedString2\");\r\n+\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(\"string2\", pc.getStringField());\r\n+        assertNotNull(pc.getEmbedded());\r\n+        assertEquals(\"embedString2\", pc.getEmbedded().getStringField());\r\n+        assertEquals(1, pc.getEmbedded().getIntField());\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testReplace() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        EmbeddedOwnerPC pc = pm.find(EmbeddedOwnerPC.class, id1);\r\n+\r\n+        EmbeddedPC newEmbed = new EmbeddedPC();\r\n+        newEmbed.setStringField(\"embedString2\");\r\n+        pc.setEmbedded(newEmbed);\r\n+\r\n+        ComplexEmbeddedPC newComplexEmbed = new ComplexEmbeddedPC();\r\n+        newEmbed = new EmbeddedPC();\r\n+        newEmbed.setStringField(\"embedString3\");\r\n+        newComplexEmbed.setStringField(\"complexEmbedString3\");\r\n+        newComplexEmbed.setOwnerField(new EmbeddedOwnerPC(5, 6));\r\n+        pc.setComplexEmbedded(newComplexEmbed);\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        pc = pm.find(EmbeddedOwnerPC.class, id1);\r\n+        assertEquals(\"string1\", pc.getStringField());\r\n+        assertNotNull(pc.getEmbedded());\r\n+        assertEquals(\"the exp strng is not embedString1\", \"embedString1\",\r\n+            pc.getEmbedded().getStringField());\r\n+        assertEquals(\"intfield is not 1\", 1, pc.getEmbedded().getIntField());\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testShare() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        EmbeddedOwnerPC pc1 = pm.find(EmbeddedOwnerPC.class, id1);\r\n+        assertNotNull(\"pc1 is null in testshare\", pc1);\r\n+\r\n+        EmbeddedOwnerPC pc2 = pm.find(EmbeddedOwnerPC.class, id2);\r\n+        assertNotNull(\"pc2 is null in testshare\", pc2);\r\n+\r\n+        EmbeddedPC embed1 = pc1.getEmbedded();\r\n+\r\n+        pm.persist(embed1);\r\n+        Integer oid = new Integer(1);\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(\"embedString1\", embed1.getStringField());\r\n+        assertEquals(\"embedString1\", pc1.getEmbedded().getStringField());\r\n+\r\n+        endEm(pm);\r\n+\r\n+        // make sure the changes stick\r\n+        pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        pc1 = pm.find(EmbeddedOwnerPC.class, id1);\r\n+        assertNotNull(\"pc1 is null in testshare 2nd find\", pc1);\r\n+        pc2 = pm.find(EmbeddedOwnerPC.class, id2);\r\n+        assertNotNull(\"pc2 is null in testshare 2nd find\", pc2);\r\n+        embed1 = pm.find(EmbeddedPC.class, oid.intValue());\r\n+\r\n+        if (embed1 != null) {\r\n+            assertEquals(\"embedString1\", embed1.getStringField());\r\n+            assertEquals(\"embedString1\", pc1.getEmbedded().getStringField());\r\n+        }\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testOptimisticLocking2() {\r\n+        EntityManager pm1 = getPM(true, false);\r\n+        startTx(pm1);\r\n+\r\n+        EmbeddedOwnerPC pc1 = pm1.find(EmbeddedOwnerPC.class, id1);\r\n+        assertNotNull(\"pc1 is null in testoptlock2\", pc1);\r\n+\r\n+        EntityManager pm2 = currentEntityManager();\r\n+\r\n+        startTx(pm2);\r\n+        EmbeddedOwnerPC pc2 = pm1.find(EmbeddedOwnerPC.class, id1);\r\n+\r\n+        assertNotNull(\"pc2 is null in testoptlock2\", pc2);\r\n+\r\n+        EmbeddedPC embed2 = pc2.getEmbedded();\r\n+        embed2.setStringField(\"xxxx\");\r\n+\r\n+        endTx(pm2);\r\n+        endEm(pm2);\r\n+\r\n+        EmbeddedPC embed1 = pc1.getEmbedded();\r\n+        embed1.setStringField(\"yyyy\");\r\n+        try {\r\n+            endTx(pm1);\r\n+            fail(\"Should have thrown an OL exception.\");\r\n+        }\r\n+        catch (Exception ove) {\r\n+        }\r\n+        finally {\r\n+            endEm(pm1);\r\n+        }\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"1dd5cd51e2f97d287b178ee10572361d5f252665","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,142 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBEntityManager extends AbstractTestCase {\r\n+\r\n+    private Object _id = null;\r\n+\r\n+    private Object _id2 = null;\r\n+\r\n+    public TestEJBEntityManager(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 a = new RuntimeTest1(\"STRING\", 10);\r\n+        RuntimeTest2 b = new RuntimeTest2(\"STRING2\", 11);\r\n+        em.persist(a);\r\n+        em.persist(b);\r\n+        _id = a.getIntField();\r\n+        _id2 = b.getIntField();\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that the PM throws Exceptions on usage attempts after it has been\r\n+     * closed.\r\n+     */\r\n+    /* Fix Me - aokeke - takes a lot of time to run */\r\n+    // public void testClosed ()\r\n+    // {\r\n+    // EntityManager em = currentEntityManager();\r\n+    // startTx(em);\r\n+    // endEm(em);\r\n+    //\r\n+    // try\r\n+    // {\r\n+    // // this is the only method that should succeed\r\n+    // if(em.isOpen ())\r\n+    // fail(\"Supposed to be closed...but cannot be closed inside\r\n+    // container..closed at the end of funct\");\r\n+    // }\r\n+    // catch (RuntimeException re)\r\n+    // {\r\n+    // fail (\"isClosed\");\r\n+    // }\r\n+    // try\r\n+    // {\r\n+    // em.find(RuntimeTest1.class, _id);\r\n+    // fail (\"find\");\r\n+    // }\r\n+    // catch (RuntimeException re)\r\n+    // {\r\n+    // }\r\n+    // }\r\n+    public void testMultipleCloseThreaded() throws Throwable {\r\n+        final EntityManager em = currentEntityManager();\r\n+        final List result = new ArrayList();\r\n+        // EntityTransaction t = em.getTransaction();\r\n+        // t.begin ();\r\n+\r\n+        em.close();\r\n+\r\n+        new Thread() {\r\n+            @SuppressWarnings(\"unchecked\")\r\n+            public void run() {\r\n+                try {\r\n+                    em.close();\r\n+                    result.add(new Integer(0));\r\n+                }\r\n+                catch (Exception jdoe) {\r\n+                    result.add(jdoe);\r\n+                }\r\n+                catch (Throwable t) {\r\n+                    result.add(t);\r\n+                }\r\n+            }\r\n+        }.start();\r\n+\r\n+        while (result.size() == 0)\r\n+            Thread.currentThread().yield(); // wait for results\r\n+        Object ret = result.get(0);\r\n+\r\n+        if (ret instanceof Exception)\r\n+            return; // good\r\n+\r\n+        if (ret instanceof Throwable)\r\n+            throw (Throwable) ret;\r\n+    }\r\n+\r\n+    /**\r\n+     * This method tries to perform operations that should lead to illegal\r\n+     * states, such as persisting instances outside of transactions, etc.\r\n+     */\r\n+    public void testIllegalState() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        RuntimeTest1 a = new RuntimeTest1(\"foo\", 10);\r\n+        RuntimeTest1 a2 = (RuntimeTest1) em.find(RuntimeTest1.class, _id);\r\n+\r\n+        try {\r\n+            em.persist(a);\r\n+            fail(\"persist...\");\r\n+        }\r\n+        catch (Exception ise) {\r\n+        }\r\n+\r\n+        endEm(em);\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"c7303c147becc4034cc1568c521ea9e095589d3f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AImplB;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBGetObjectByIdValue extends AbstractTestCase {\r\n+\r\n+    private Object[] oids;\r\n+\r\n+    public TestEJBGetObjectByIdValue(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(AImplB.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        em.flush();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDatastore() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 pc = new RuntimeTest1(1);\r\n+        pc.setStringField(\"foo\");\r\n+        em.persist(pc);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        pc = (RuntimeTest1) em.find(RuntimeTest1.class, 1);\r\n+        assertEquals(\"foo\", pc.getStringField());\r\n+        em.close();\r\n+\r\n+        em = currentEntityManager();\r\n+        pc = (RuntimeTest1) em.find(RuntimeTest1.class, pc.getIntField());\r\n+        assertEquals(\"foo\", pc.getStringField());\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testAppId() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        AImplB pc = new AImplB(\"foo\", 1, \"pk\");\r\n+        em.persist(pc);\r\n+        AImplB.Idkey oid = new AImplB.Idkey();\r\n+        oid.pk1 = 1;\r\n+        oid.pk2 = \"pk\";\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        pc = (AImplB) em.find(AImplB.class, oid);\r\n+        assertEquals(\"foo\", pc.getName());\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        pc = (AImplB) em.find(AImplB.class, oid.toString());\r\n+        assertEquals(\"foo\", pc.getName());\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"ada5cb6dc35a3dfbb478c8eaeab3e388fddb15bc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,99 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBIncrementalFlushes extends AbstractTestCase {\r\n+\r\n+    public TestEJBIncrementalFlushes(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+//\tpublic void testBasicJdoPreStore ()\r\n+//\t{\r\n+//\t\tEntityManager em = getEm ();\r\n+//\t\tem.getTransaction ().begin ();\r\n+//\t\tInstanceCallbacksTest a = new InstanceCallbacksTest (\"foo\", 10);\r\n+//\t\tem.persist(a);\r\n+//\t\tem.flush ();\r\n+//\t\tassertTrue (a.preStoreCalled);\r\n+//\t\tem.getTransaction ().commit ();\r\n+//\t}\r\n+\r\n+    public void testFlushNoChange() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        InstanceCallbacksTest a = new InstanceCallbacksTest(\"foo\", 10);\r\n+        em.persist(a);\r\n+        em.flush();\r\n+        endTx(em);\r\n+        //assertTrue (a.preStoreCalled);\r\n+        assertEquals(10, a.getIntField());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testOptimisticLockGivesCorrectError() {\r\n+        EntityManager pm1 = currentEntityManager();\r\n+        EntityManager pm2 = currentEntityManager();\r\n+\r\n+        RuntimeTest1 a1 = new RuntimeTest1(\"foo\", 10);\r\n+        startTx(pm1);\r\n+        pm1.persist(a1);\r\n+        endTx(pm1);\r\n+\r\n+        RuntimeTest1 a2 = (RuntimeTest1) pm2.find(RuntimeTest1.class, 10);\r\n+        startTx(pm2);\r\n+        a2.setStringField(\"foobar\");\r\n+        startTx(pm2);\r\n+\r\n+        startTx(pm1);\r\n+        a1.setStringField(\"foobarbaz\");\r\n+        try {\r\n+            endTx(pm1);\r\n+        }\r\n+        catch (Exception ole) {\r\n+            // expected case\r\n+        }\r\n+        finally {\r\n+            if (pm1.getTransaction().isActive())\r\n+                pm1.getTransaction().rollback();\r\n+\r\n+            endEm(pm1);\r\n+            endEm(pm2);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"1fa4fbff4aa5cd5acb5e686e90155195258a38d6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,121 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+/**\r\n+ * Test for persistent interfaces.\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public class TestEJBInterfaces extends AbstractTestCase {\r\n+\r\n+    public TestEJBInterfaces(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public void testInterfaceField() {\r\n+        try {\r\n+            deleteAll(InterfaceTestImpl1.class);\r\n+            deleteAll(InterfaceTestImpl2.class);\r\n+            deleteAll(InterfaceHolder.class);\r\n+        }\r\n+        catch (Exception e) {\r\n+        }\r\n+\r\n+        EntityManager em2 = currentEntityManager();\r\n+        startTx(em2);\r\n+\r\n+        em2.flush();\r\n+        endTx(em2);\r\n+        endEm(em2);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        InterfaceHolder holder = new InterfaceHolder(1);\r\n+        em.persist(holder);\r\n+        holder.setIntf(new InterfaceTestImpl1(\"intf-1-field\"));\r\n+        assertEquals(\"intf-1-field\", holder.getIntf().getStringField());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        startTx(em);\r\n+        InterfaceHolder hold =\r\n+            (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n+        assertNotNull(hold.getIntf());\r\n+        assertEquals(\"intf-1-field\", hold.getIntf().getStringField());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        startTx(em);\r\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n+        hold.setIntf(null);\r\n+        assertNull(hold.getIntf());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        startTx(em);\r\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n+        assertNull(hold.getIntf());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        startTx(em);\r\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n+        hold.setIntf(new InterfaceTestImpl2(\"intf-2-field\"));\r\n+        assertEquals(\"intf-2-field\", hold.getIntf().getStringField());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        startTx(em);\r\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n+        assertNotNull(hold.getIntf());\r\n+        assertEquals(\"intf-2-field\", hold.getIntf().getStringField());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = currentEntityManager();\r\n+        startTx(em);\r\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n+        hold.getIntfs().add(new InterfaceTestImpl1(\"intf-1-set\"));\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+//\t\tem = currentEntityManager();\r\n+//\t\tstartTx(em);\r\n+//\t\thold = (InterfaceHolder)em.find(InterfaceHolder.class, 1);\r\n+//\t\tassertEquals (1, hold.getIntfs ().size ());\r\n+//\t\tassertEquals (\"intf-1-set\", ((InterfaceTest) hold.getIntfs ().iterator ().next ()).getStringField ());\r\n+//\t\tendTx(em);\r\n+//\t\tendEm(em);\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"00942c500599efadf31d3cd99a05162c2acb8236","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,176 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBLobs extends AbstractTestCase {\r\n+\r\n+    private EntityManager _pm = null;\r\n+    private Inner _inner = null;\r\n+\r\n+    public TestEJBLobs(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        deleteAll(Inner.class);\r\n+        deleteAll(Inner2.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        Inner inner = new Inner();\r\n+        inner.setString(\"string\");\r\n+        inner.setClob(\"clobField\");\r\n+        inner.setEBlob(\"eblob\");\r\n+\r\n+        Inner2 inner2 = new Inner2();\r\n+        inner2.string = \"inner2\";\r\n+        inner.setBlob(inner2);\r\n+\r\n+        _pm = currentEntityManager();\r\n+        startTx(_pm);\r\n+        _pm.persist(inner);\r\n+        try {\r\n+            endTx(_pm);\r\n+        }\r\n+        catch (Exception jdoe) {\r\n+            System.out.println(\r\n+                \"An exception was thrown while persisting the entity : \\n\" +\r\n+                    getStackTrace(jdoe));\r\n+        }\r\n+        endEm(_pm);\r\n+\r\n+        _pm = currentEntityManager();\r\n+        _inner = (Inner) _pm.find(Inner.class, \"string\");\r\n+    }\r\n+\r\n+    public void testOtherFields() {\r\n+        assertEquals(\"string\", _inner.getString());\r\n+    }\r\n+\r\n+    public void testClob() {\r\n+        assertEquals(\"clobField\", _inner.getClob());\r\n+    }\r\n+\r\n+    public void testBlob() {\r\n+        assertNotNull(_inner.getBlob());\r\n+        assertEquals(\"inner2\", _inner.getBlob().string);\r\n+    }\r\n+\r\n+    public void testSetNull() {\r\n+        startTx(_pm);\r\n+        _inner.setClob(null);\r\n+        _inner.setBlob(null);\r\n+        endTx(_pm);\r\n+\r\n+        assertEquals(null, _inner.getBlob());\r\n+        assertEquals(null, _inner.getClob());\r\n+    }\r\n+\r\n+    public void testDelete() {\r\n+        deleteAll(Inner.class);\r\n+    }\r\n+\r\n+    public void testUpdate() {\r\n+        startTx(_pm);\r\n+        _inner.setClob(\"newvalue\");\r\n+        Inner2 inner2 = new Inner2();\r\n+        inner2.string = \"newinner2\";\r\n+        _inner.setBlob(inner2);\r\n+        endTx(_pm);\r\n+\r\n+        assertEquals(\"newvalue\", _inner.getClob());\r\n+        assertEquals(\"newinner2\", _inner.getBlob().string);\r\n+    }\r\n+\r\n+    @Entity\r\n+    @Table(name = \"inntable\")\r\n+    public static class Inner {\r\n+\r\n+        @Id\r\n+        private String string = null;\r\n+        private String clobField = null;\r\n+        private Object eblob = null;\r\n+\r\n+        @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+        private Inner2 blobField = null;\r\n+\r\n+        public String getString() {\r\n+            return string;\r\n+        }\r\n+\r\n+        public void setString(String val) {\r\n+            string = val;\r\n+        }\r\n+\r\n+        public String getClob() {\r\n+            return clobField;\r\n+        }\r\n+\r\n+        public void setClob(String val) {\r\n+            clobField = val;\r\n+        }\r\n+\r\n+        public String getEBlob() {\r\n+            return ((String) eblob);\r\n+        }\r\n+\r\n+        public void setEBlob(String val) {\r\n+            eblob = val;\r\n+        }\r\n+\r\n+        public Inner2 getBlob() {\r\n+            return blobField;\r\n+        }\r\n+\r\n+        public void setBlob(Inner2 val) {\r\n+            blobField = val;\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"serial\")\r\n+    @Entity\r\n+    @Table(name=\"Inner2\")\r\n+    public static class Inner2 implements Serializable {\r\n+\r\n+        @Id\r\n+        public String string = null;\r\n+\r\n+        public String getString() {\r\n+            return string;\r\n+        }\r\n+\r\n+        public void setString(String string) {\r\n+            this.string = string;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"ba8b0734b6f71cc44061a8442dc1431565882eb3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Locale;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBLocales extends AbstractTestCase {\r\n+\r\n+    public TestEJBLocales(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+    }\r\n+\r\n+    public void testLocales() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        RuntimeTest1 t1 = new RuntimeTest1(1);\r\n+        t1.setLocaleField(new Locale(Locale.FRANCE.getCountry(),\r\n+            Locale.FRENCH.getLanguage()));\r\n+        pm.persist(t1);\r\n+        pm.persist(new RuntimeTest1(2));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = currentEntityManager();\r\n+        List c = findAll(RuntimeTest1.class, pm);\r\n+        assertEquals(2, c.size());\r\n+\r\n+        boolean foundNull = false;\r\n+        boolean foundFrance = false;\r\n+        Locale locale;\r\n+\r\n+        for (Iterator iter = c.iterator(); iter.hasNext();) {\r\n+            t1 = (RuntimeTest1) iter.next();\r\n+            locale = t1.getLocaleField();\r\n+            if (locale == null)\r\n+                foundNull = true;\r\n+            else if (\r\n+                (locale.getCountry().equals(Locale.FRANCE.getCountry())) &&\r\n+                    (locale.getLanguage().equals(Locale.FRANCE.getLanguage())))\r\n+                foundFrance = true;\r\n+        }\r\n+\r\n+        assertTrue(foundNull);\r\n+        assertTrue(foundFrance);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public List findAll(Class c, EntityManager em) {\r\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n+            .getResultList();\r\n+        return l;\r\n+    }\r\n+}\r"},{"sha":"3d29870e9163654119601dddd47bd8177304338b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,93 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.InverseA;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.InverseB;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBManagedInverses extends AbstractTestCase {\r\n+\r\n+    public TestEJBManagedInverses(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(InverseA.class);\r\n+        deleteAll(InverseB.class);\r\n+    }\r\n+\r\n+    public void testOneOne() {\r\n+        oneOneTest(true);\r\n+    }\r\n+\r\n+    public void testOneOneWithPreStore() {\r\n+        oneOneTest(false);\r\n+    }\r\n+\r\n+    private void oneOneTest(boolean flush) {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        InverseA a = new InverseA();\r\n+        InverseA a2 = new InverseA();\r\n+        InverseA a3 = new InverseA();\r\n+        a.setOneOne(a2);\r\n+        a.setOneOneOwner(a2);\r\n+        pm.persist(a);\r\n+        pm.persist(a3);\r\n+\r\n+//\t\tassertEquals (a, a2.getOneOne ());\r\n+//\t\tassertEquals (a, a2.getOneOneOwner ());\r\n+        assertEquals(\"a.getOneOne is not a2\", a2, a.getOneOne());\r\n+        assertEquals(\"a.getOneOneOwner is not a2\", a2, a.getOneOneOwner());\r\n+        endTx(pm);\r\n+\r\n+        startTx(pm);\r\n+        a2.setOneOne(a3);\r\n+        a2.setOneOneOwner(a3);\r\n+\r\n+//\t\tassertEquals (a2, a3.getOneOne ());\r\n+//\t\tassertEquals (a2, a3.getOneOneOwner ());\r\n+        assertEquals(a3, a2.getOneOne());\r\n+        assertEquals(a3, a2.getOneOneOwner());\r\n+        endTx(pm);\r\n+\r\n+        // make sure commit doesn't retrigger changes\r\n+//\t\tassertEquals (a2, a3.getOneOne ());\r\n+//\t\tassertEquals (a2, a3.getOneOneOwner ());\r\n+        assertEquals(a3, a2.getOneOne());\r\n+        assertEquals(a3, a2.getOneOneOwner());\r\n+\r\n+        // test persistent -> dirty\r\n+        startTx(pm);\r\n+        a2.setOneOne(null);\r\n+        a2.setOneOneOwner(null);\r\n+//\t\tif (flush)\r\n+//\t\t\tpm.flush ();\r\n+//\t\telse\r\n+//\t\t\tpm.setFlushMode(FlushModeType.AUTO);\r\n+//\t\tassertNull (a3.getOneOne ());\r\n+//\t\tassertNull (a3.getOneOneOwner ());\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"e32a2df40ca16eea952acd2f46801afa7926f4ed","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBNoPersistentFields extends AbstractTestCase {\r\n+\r\n+    private Nholder holder;\r\n+\r\n+    public TestEJBNoPersistentFields(String test) {\r\n+        super(test, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() throws Exception {\r\n+        deleteAll(Nholder.class);\r\n+    }\r\n+\r\n+    public void testNoPersistentFields() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        holder = new Nholder();\r\n+        holder.setNpf(new NoPersistentFieldsPC());\r\n+        holder.setIdKey(1);\r\n+\r\n+        em.persist(holder);\r\n+        endTx(em);\r\n+\r\n+        Nholder holder2 = em.find(Nholder.class, 1);\r\n+        assertEquals(1, holder2.getIdKey());\r\n+        assertNotNull(holder2);\r\n+        assertNotNull(holder2.getNpf());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"serial\")\r\n+    @Entity\r\n+    @Table(name = \"nholder2\")\r\n+    public static class Nholder implements Serializable {\r\n+\r\n+        @Id\r\n+        private int idkey;\r\n+\r\n+        @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+        private NoPersistentFieldsPC npf;\r\n+\r\n+        public Nholder() {\r\n+        }\r\n+\r\n+        public Nholder(NoPersistentFieldsPC npf, int idkey) {\r\n+            this.npf = npf;\r\n+            this.idkey = idkey;\r\n+        }\r\n+\r\n+        public void setNpf(NoPersistentFieldsPC npf) {\r\n+            this.npf = npf;\r\n+        }\r\n+\r\n+        public NoPersistentFieldsPC getNpf() {\r\n+            return this.npf;\r\n+        }\r\n+\r\n+        public int getIdKey() {\r\n+            return idkey;\r\n+        }\r\n+\r\n+        public void setIdKey(int idkey) {\r\n+            this.idkey = idkey;\r\n+        }\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"serial\")\r\n+    @Entity\r\n+    @Table(name = \"npfp\")\r\n+    public static class NoPersistentFieldsPC implements Serializable {\r\n+\r\n+        public transient int blankInt;\r\n+        public transient String blankString;\r\n+    }\r\n+}\r"},{"sha":"0d957e886ed8b26d20aae9fc73130b57bae81ff3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.Inner;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBNullValues extends AbstractTestCase {\r\n+\r\n+    public TestEJBNullValues(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Inner.class);\r\n+    }\r\n+\r\n+    public void testException() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(new Inner());\r\n+        try {\r\n+            endTx(pm);\r\n+            fail(\"Null value allowed\");\r\n+        }\r\n+        catch (Exception jfe) {\r\n+            System.out\r\n+                .println(\"Exception expected...Null value not allowed...\");\r\n+        }\r\n+        endEm(pm);\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"2f6fbc97d556de360a45b028eddfba4655630e4f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashSet;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+/**\r\n+ * Tests that Collections of type {@link Object} can hold all\r\n+ * sorts of stuff (heterogeneous classes, persistent classes).\r\n+ *\r\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n+ */\r\n+public class TestEJBObjectCollections extends AbstractTestCase {\r\n+\r\n+    public TestEJBObjectCollections(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void testHashSet() {\r\n+        assertEquals(1, add(new Object[]{ \"Foo\" }, 1).getHashSet().size());\r\n+        assertEquals(1, add(new Object[]{ \"Foo\" }, 2).getHashSet().size());\r\n+\r\n+        assertEquals(2, add(\r\n+            new Object[]{ \"Foo\", new AllFieldsTypeTest() }, 3)\r\n+            .getHashSet().size());\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(ObjectCollectionHolder.class);\r\n+        deleteAll(AllFieldsTypeTest.class);\r\n+    }\r\n+\r\n+    public void tearDown() throws Exception {\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public ObjectCollectionHolder add(Object[] objects, int id) {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        ObjectCollectionHolder holder = new ObjectCollectionHolder();\r\n+        holder.setId(id);\r\n+        pm.persist(holder);\r\n+        holder.setHashSet(new HashSet(Arrays.asList(objects)));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        return (ObjectCollectionHolder) pm\r\n+            .find(ObjectCollectionHolder.class, id);\r\n+    }\r\n+}\r"},{"sha":"e68aa14f5e28ef8f0cbc88f86d9b7734e46d9e4e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBRetainValues extends AbstractTestCase {\r\n+\r\n+    public TestEJBRetainValues(String testName) {\r\n+        super(testName, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * tests the behavior of the same object being viewed from\r\n+     * different PersistenceManagers with RetainValues set to true\r\n+     */\r\n+    public void testRetainValues() {\r\n+        // persist the object with field == \"x\"\r\n+        RuntimeTest1 test = new RuntimeTest1();\r\n+        test.setStringField(\"x\");\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        pm.persist(test);\r\n+        endTx(pm);\r\n+\r\n+        //\tfind the object in a different PM\r\n+        EntityManager pm2 = currentEntityManager();\r\n+        List l = (buildSelectQuery(pm2, \"x\"));\r\n+        assertNotNull(\"l is null in testRetainValues\", l);\r\n+        RuntimeTest1 sameThing = (RuntimeTest1) l.iterator().next();\r\n+\r\n+        assertEquals(\"x\", sameThing.getStringField());\r\n+        assertEquals(\"x\", test.getStringField());\r\n+\r\n+        //\tset the second object field to \"y\"\r\n+        startTx(pm2);\r\n+        sameThing.setStringField(\"y\");\r\n+        endTx(pm2);\r\n+        assertEquals(\"y\", sameThing.getStringField());\r\n+        assertEquals(\"x\", test.getStringField());\r\n+\r\n+        //\tdo some searching in the first PM\r\n+        List l2 = buildSelectQuery(pm, \"x\");\r\n+        assertEquals(0,\r\n+            l2.size());  //should be zero if retainvalue is set to true but that is kodo specific.\r\n+\r\n+        List l3 = buildSelectQuery(pm, \"y\");\r\n+        assertEquals(1, l3.size());\r\n+        assertEquals(test, l3.iterator().next());\r\n+        assertEquals(\"x\", test.getStringField());\r\n+\r\n+        endEm(pm2);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public static List buildSelectQuery(EntityManager em, String param) {\r\n+        return em.createQuery(\r\n+            \"SELECT c FROM RuntimeTest1 c where c.stringField = :username\")\r\n+            .setParameter(\"username\", param)\r\n+            .getResultList();\r\n+\t}\r\n+}\r"},{"sha":"3ad9479125f2c2ef0ddba9077787411e4abd1ce7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.math.BigDecimal;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBState extends AbstractTestCase {\r\n+\r\n+    private static final int INSERT_COUNT = 20;\r\n+\r\n+    public TestEJBState(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(AllFieldsTypeTest.class);\r\n+    }\r\n+\r\n+    public void testBigDecimalsLoseTrailingZeros() {\r\n+        EntityManager pm1 = currentEntityManager();\r\n+        startTx(pm1);\r\n+        AllFieldsTypeTest aftt = new AllFieldsTypeTest();\r\n+        aftt.setId(1);\r\n+        aftt.setTestBigDecimal(new BigDecimal(\"5.760000\"));\r\n+        pm1.persist(aftt);\r\n+\r\n+        endTx(pm1);\r\n+\r\n+        EntityManager pm2 = currentEntityManager();\r\n+        startTx(pm2);\r\n+\r\n+        Object retrieved = pm2.find(AllFieldsTypeTest.class, 1);\r\n+        assertEquals(aftt, retrieved);\r\n+        endTx(pm2);\r\n+        endEm(pm2);\r\n+        endEm(pm1);\r\n+    }\r\n+}\r"},{"sha":"54296128dae9e6578b5f3f03479470bfc3efd2c9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.TransactionalClassPC;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBTransactionalClass extends AbstractTestCase {\r\n+\r\n+    public TestEJBTransactionalClass(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void testTransactional() {\r\n+        TransactionalClassPC pc = new TransactionalClassPC();\r\n+        pc.setIntField(1);\r\n+\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+        //pm.makeTransactional (pc);\r\n+        pc.setIntField(2);\r\n+        endTx(pm);\r\n+\r\n+        assertEquals(2, pc.getIntField());\r\n+\r\n+        startTx(pm);\r\n+        pc.setIntField(3);\r\n+        pm.getTransaction().rollback();\r\n+\r\n+        assertEquals(3, pc.getIntField());\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"b3e1cdaa924a834a6dbc3e7d559a0e5fb09e3b78","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,119 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.ArrayList;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityTransaction;\r\n+\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+\r\n+public class TestEJBTransactions extends AbstractTestCase {\r\n+\r\n+    public TestEJBTransactions(String name) {\r\n+        super(name, \"kernelcactusapp\");\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+    }\r\n+\r\n+    public void testTxCannotBeCommittedTwiceInDiffThreads() throws Throwable {\r\n+        final ArrayList list = new ArrayList();\r\n+\r\n+        final EntityManager em = currentEntityManager();\r\n+        final EntityTransaction tx;\r\n+\r\n+        tx = em.getTransaction();\r\n+        if (tx.isActive())\r\n+            tx.rollback();\r\n+        tx.begin();\r\n+        endTx(em);\r\n+\r\n+        Thread thread = new Thread() {\r\n+            @SuppressWarnings(\"unchecked\")\r\n+            public void run() {\r\n+                try {\r\n+                    endTx(em);\r\n+                    list.add(new Integer(0));\r\n+                }\r\n+                catch (Exception e) {\r\n+                    list.add(e);\r\n+                }\r\n+                catch (Throwable t) {\r\n+                    list.add(t);\r\n+                }\r\n+            }\r\n+        };\r\n+\r\n+        thread.start();\r\n+\r\n+        while (list.size() == 0) ;\r\n+\r\n+        Object result = list.get(0);\r\n+\r\n+        if (!(result instanceof Exception)) {\r\n+            if (result instanceof Throwable)\r\n+                throw (Throwable) result;\r\n+        }\r\n+        thread.join();\r\n+    }\r\n+\r\n+    public void testTransactionsCannotBeCommittedTwice() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        rollbackTx(pm);\r\n+\r\n+        startTx(pm);\r\n+        endTx(pm);\r\n+\r\n+        try {\r\n+            // second commit\r\n+            endTx(pm);\r\n+        }\r\n+        catch (Exception e) {\r\n+            // good: we should be throwing an exception here\r\n+            System.out.println(\"Exception should be thrown here...\" +\r\n+                \"Transactions cannot be committed twice...\");\r\n+        }\r\n+    }\r\n+\r\n+    public void testTransactionsCannotBeRolledBackTwice() {\r\n+        EntityManager pm = currentEntityManager();\r\n+        startTx(pm);\r\n+\r\n+        EntityTransaction t;\r\n+        t = pm.getTransaction();\r\n+\r\n+        if (t.isActive()) {\r\n+            t.rollback();\r\n+        } else {\r\n+            t.begin();\r\n+            t.rollback();\r\n+        }\r\n+\r\n+        try {\r\n+            // second rollback\r\n+            t.rollback();\r\n+        }\r\n+        catch (Exception e) {\r\n+            // good: we should be throwing an exception here\r\n+            System.out.println(\"Exception should be thrown here...\" +\r\n+                \"Transactions cannot be rolled back twice...\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"7e21c073753ae4b353425380c284145bcb17f9fa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,125 @@\n+/*\r\n+ * TestExtents.java\r\n+ *\r\n+ * Created on October 10, 2006, 4:34 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\r\n+\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestExtents extends BaseKernelTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestExtents\r\n+     */\r\n+    public TestExtents() {\r\n+    }\r\n+\r\n+    public TestExtents(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        RuntimeTest1 b = new RuntimeTest1(\"STRING\", 10);\r\n+        RuntimeTest2 c = new RuntimeTest2(\"STRING2\", 11);\r\n+        pm.persist(b);\r\n+        pm.persist(c);\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testExtent1() {\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n+\r\n+        assertEquals(pm, ext.getEntityManager());\r\n+\r\n+        assertEquals(RuntimeTest1.class, ext.getElementClass());\r\n+        assertTrue(!ext.hasSubclasses());\r\n+    }\r\n+\r\n+    public void testExtent2() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n+\r\n+        boolean found = false;\r\n+        for (Iterator i = ext.iterator(); i.hasNext(); found = true)\r\n+            assertEquals(RuntimeTest1.class, i.next().getClass());\r\n+        assertTrue(found);\r\n+    }\r\n+\r\n+    public void testExtent3() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        Extent ext = pm.createExtent(RuntimeTest1.class, true);\r\n+\r\n+        boolean foundB = false;\r\n+        for (Iterator i = ext.iterator(); i.hasNext();)\r\n+            if (i.next().getClass().equals(RuntimeTest2.class))\r\n+                foundB = true;\r\n+        assertTrue(foundB);\r\n+    }\r\n+\r\n+    public void testExtent4() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        Extent ext = (Extent) pm.createExtent(RuntimeTest1.class, true);\r\n+\r\n+        List all = new LinkedList();\r\n+        for (Iterator i = ext.iterator(); i.hasNext();)\r\n+            all.add(i.next());\r\n+\r\n+        List aList = ext.list();\r\n+        assertEquals(all.size(), aList.size());\r\n+        assertContainsSame(all, aList);\r\n+    }\r\n+\r\n+    private void assertContainsSame(List l, Collection c) {\r\n+        int size = 0;\r\n+        for (Iterator iter = c.iterator(); iter.hasNext(); iter.next())\r\n+            size++;\r\n+\r\n+        assertEquals(l.size(), size);\r\n+\r\n+        for (Iterator iter = l.iterator(); iter.hasNext();)\r\n+            assertTrue(c.contains(iter.next()));\r\n+    }\r\n+}\r"},{"sha":"f3dd415d16488b5b3ce423f055a00a092e2b52bd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,199 @@\n+/*\r\n+ * TestExtents2.java\r\n+ *\r\n+ * Created on October 10, 2006, 5:30 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Iterator;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3;\r\n+\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestExtents2 extends BaseKernelTest {\r\n+\r\n+    private Object _oid1 = null;\r\n+    private Object _oid2 = null;\r\n+    private Object _oid3 = null;\r\n+\r\n+    public TestExtents2(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestExtents2\r\n+     */\r\n+    public TestExtents2() {\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        RuntimeTest1 test1 = new RuntimeTest1();\r\n+        test1.setIntField(1);\r\n+        RuntimeTest2 test2 = new RuntimeTest2();\r\n+        test2.setIntField(2);\r\n+        test2.setIntField2(2);\r\n+        RuntimeTest3 test3 = new RuntimeTest3();\r\n+        test3.setIntField(3);\r\n+        test3.setIntField3(3);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(test1);\r\n+        pm.persist(test2);\r\n+        pm.persist(test3);\r\n+        _oid1 = pm.getObjectId(test1);\r\n+        _oid2 = pm.getObjectId(test2);\r\n+        _oid3 = pm.getObjectId(test3);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testProperties() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        Extent ext = pm.createExtent(RuntimeTest2.class, false);\r\n+        assertEquals(pm, ext.getEntityManager());\r\n+        assertEquals(RuntimeTest2.class, ext.getElementClass());\r\n+        assertTrue(!ext.hasSubclasses());\r\n+\r\n+        ext = pm.createExtent(RuntimeTest1.class, true);\r\n+        assertEquals(pm, ext.getEntityManager());\r\n+        assertEquals(RuntimeTest1.class, ext.getElementClass());\r\n+        assertTrue(ext.hasSubclasses());\r\n+    }\r\n+\r\n+    public void testNoSubclasses() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n+        Iterator itr = ext.iterator();\r\n+        assertTrue(itr.hasNext());\r\n+        assertEquals(_oid1, pm.getObjectId(itr.next()));\r\n+        assertTrue(!itr.hasNext());\r\n+        ext.closeAll();\r\n+    }\r\n+\r\n+    public void testSubclasses() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        Extent ext = pm.createExtent(RuntimeTest1.class, true);\r\n+\r\n+        int test1Count = 0;\r\n+        int test2Count = 0;\r\n+        int test3Count = 0;\r\n+        Object next;\r\n+        for (Iterator itr = ext.iterator(); itr.hasNext();) {\r\n+            next = pm.getObjectId(itr.next());\r\n+            if (_oid1.equals(next))\r\n+                test1Count++;\r\n+            else if (_oid2.equals(next))\r\n+                test2Count++;\r\n+            else if (_oid3.equals(next))\r\n+                test3Count++;\r\n+        }\r\n+        ext.closeAll();\r\n+        assertEquals(1, test1Count);\r\n+        assertEquals(1, test2Count);\r\n+        assertEquals(1, test3Count);\r\n+    }\r\n+\r\n+    public void testContainsNewlyPersisted() {\r\n+        RuntimeTest1 test1 = new RuntimeTest1();\r\n+        RuntimeTest1 test2 = new RuntimeTest2();\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        // pcl: 14 Oct 2003: default in 3.0 is now true, but this test\r\n+        // assumes false somewhere.\r\n+\r\n+        pm.setIgnoreChanges(false);\r\n+        startTx(pm);\r\n+        try {\r\n+            pm.persist(test1);\r\n+            pm.persist(test2);\r\n+            Object newOid = pm.getObjectId(test1);\r\n+\r\n+            Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n+            boolean foundOid1 = false;\r\n+            boolean foundNew = false;\r\n+            Object next;\r\n+            for (Iterator itr = ext.iterator(); itr.hasNext();) {\r\n+                next = pm.getObjectId(itr.next());\r\n+                if (_oid1.equals(next))\r\n+                    foundOid1 = true;\r\n+                else if (newOid.equals(next))\r\n+                    foundNew = true;\r\n+                else\r\n+                    fail(\"Bad object in extent.\");\r\n+            }\r\n+            ext.closeAll();\r\n+            assertTrue(foundOid1);\r\n+            assertTrue(foundNew);\r\n+        } finally {\r\n+            rollbackTx(pm);\r\n+        }\r\n+    }\r\n+\r\n+    public void testNotContainsNewlyDeleted() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        // pcl: 14 Oct 2003: default in 3.0 is now true, but this test\r\n+        // assumes false somewhere.\r\n+        pm.setIgnoreChanges(false);\r\n+        startTx(pm);\r\n+        try {\r\n+            RuntimeTest2 test2 =\r\n+                (RuntimeTest2) pm.find(RuntimeTest2.class, _oid2);\r\n+            pm.remove(test2);\r\n+            RuntimeTest1 test1 = new RuntimeTest1();\r\n+            pm.persist(test1);\r\n+            pm.remove(test1);\r\n+\r\n+            Extent ext = pm.createExtent(RuntimeTest1.class, true);\r\n+            boolean foundOid1 = false;\r\n+            boolean foundOid3 = false;\r\n+            Object next;\r\n+            for (Iterator itr = ext.iterator(); itr.hasNext();) {\r\n+                next = pm.getObjectId(itr.next());\r\n+                if (_oid1.equals(next))\r\n+                    foundOid1 = true;\r\n+                else if (_oid3.equals(next))\r\n+                    foundOid3 = true;\r\n+                else\r\n+                    fail(\"Bad object in extent.\");\r\n+            }\r\n+            ext.closeAll();\r\n+            assertTrue(foundOid1);\r\n+            assertTrue(foundOid3);\r\n+        } finally {\r\n+            rollbackTx(pm);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"3b58ec63ac083462b1def2d38ed5cda50db06d77","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","status":"added","additions":403,"deletions":0,"changes":403,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,403 @@\n+/*\r\n+ * TestFetchGroups.java\r\n+ *\r\n+ * Created on October 10, 2006, 5:46 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.BitSet;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachA;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachB;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachC;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachD;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachE;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachF;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.persistence.FetchPlan;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n+\r\n+public class TestFetchGroups extends BaseKernelTest {\r\n+\r\n+    private int oid1;\r\n+    private int oid2;\r\n+    private int oidc1;\r\n+\r\n+    public TestFetchGroups(String s) {\r\n+        super(s);\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestFetchGroups\r\n+     */\r\n+    public TestFetchGroups() {\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(FetchGroupTestObject.class);\r\n+\r\n+        FetchGroupTestObject o1 = new FetchGroupTestObject();\r\n+        // the value that 'a' is set to is important -- TestFetchGroupsExtent\r\n+        // and TestFetchGroupsQuery rely on this\r\n+        o1.setA(5);\r\n+        o1.setB(\"foo\");\r\n+        //o1.setC (new BigInteger (89));\r\n+        o1.setD(new Date());\r\n+        o1.setE(\"e-foo\");\r\n+        o1.setF(\"f-foo\");\r\n+\r\n+        FetchGroupTestObject o2 = new FetchGroupTestObject();\r\n+        // the value that 'a' is set to is important -- TestFetchGroupsExtent\r\n+        // and TestFetchGroupsQuery rely on this\r\n+        o2.setA(3);\r\n+        o2.setB(\"bar\");\r\n+        //o2.setC (new BigInteger (13));\r\n+        o2.setD(new Date());\r\n+        o2.setE(\"e-bar\");\r\n+        o2.setF(\"f-bar\");\r\n+        o2.setG(o1);\r\n+        o2.setH(o1);\r\n+\r\n+        FetchGroupTestObjectChild c1 = new FetchGroupTestObjectChild();\r\n+        // the value that 'a' is set to is important -- TestFetchGroupsExtent\r\n+        // and TestFetchGroupsQuery rely on this\r\n+        c1.setA(4);\r\n+        c1.setB(\"child\");\r\n+        c1.setD(new Date());\r\n+        c1.setE(\"e-baz\");\r\n+        c1.setF(\"f-baz\");\r\n+        c1.setG(o1);\r\n+        c1.setH(o1);\r\n+        c1.setChildA(1);\r\n+        c1.setChildB(2);\r\n+        c1.setChildC(3);\r\n+        c1.setChildD(4);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        pm.persist(o1);\r\n+        pm.persist(o2);\r\n+        pm.persist(c1);\r\n+        endTx(pm);\r\n+\r\n+        oid1 = o1.getId();\r\n+        oid2 = o2.getId();\r\n+        oidc1 = c1.getId();\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testFetchGroupsFromConfiguration() {\r\n+        Map props = new HashMap();\r\n+        props.put(\"openjpa.FetchGroups\", \"default,fg1,fg2\");\r\n+        OpenJPAEntityManagerFactory factory = getEmf(props);\r\n+\r\n+        OpenJPAEntityManager pm =\r\n+            (OpenJPAEntityManager) factory.createEntityManager();\r\n+        checkGroups(pm, new String[]{ \"fg1\", \"fg2\" });\r\n+        factory.close();\r\n+    }\r\n+\r\n+    public void testFetchGroupsNoConfiguration() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        FetchGroupTestObject o1 = getO1(pm);\r\n+        FetchGroupTestObject o2 = getO2(pm);\r\n+\r\n+        // only field a should be loaded.\r\n+        checkObject(pm, o1, true, false, false, false, false, false);\r\n+\r\n+        // upon loading field b, fields c and d should also be loaded,\r\n+        // but e and f should not.\r\n+        o1.getB();\r\n+        checkObject(pm, o1, true, true, true, true, false, false);\r\n+\r\n+        // loading field h should not cause any of the others to be loaded.\r\n+        assertEquals(o1, o2.getH());\r\n+        checkObject(pm, o2, true, false, false, false, false, false);\r\n+\r\n+        // loading field g should cause e and f to be loaded.\r\n+        assertEquals(o1, o2.getG());\r\n+        checkObject(pm, o2, true, false, false, false, true, true);\r\n+    }\r\n+\r\n+    public void testRetrieveAll() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        FetchGroupTestObject o1 = getO1(pm);\r\n+        FetchGroupTestObject o2 = getO2(pm);\r\n+\r\n+        // only field a should be loaded.\r\n+        checkObject(pm, o1, true, false, false, false, false, false);\r\n+        checkObject(pm, o2, true, false, false, false, false, false);\r\n+\r\n+        // only field a should be loaded.\r\n+        pm.retrieve(o1);\r\n+        checkObject(pm, o1, true, false, false, false, false, false);\r\n+\r\n+        // Add groups 1 and 3 to the default fetch configuration.\r\n+        pm.getFetchPlan().addFetchGroup(\"g1\");\r\n+        pm.getFetchPlan().addFetchGroup(\"g3\");\r\n+\r\n+        // Retrieve o1's \"DFG\" which will actually do all configured\r\n+        // fetch groups.\r\n+        // DFG fields and fields in groups 1 and 3 should be loaded\r\n+        pm.retrieve(o1);\r\n+        checkObject(pm, o1, true, true, true, true, false, false);\r\n+    }\r\n+\r\n+    public void testFetchGroupConfiguration() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        FetchPlan fetch = pm.getFetchPlan();\r\n+\r\n+        checkGroups(pm, new String[0]);\r\n+\r\n+        fetch.addFetchGroup(\"foo\");\r\n+        checkGroups(pm, new String[]{ \"foo\" });\r\n+\r\n+        fetch.addFetchGroup(\"bar\");\r\n+        fetch.addFetchGroup(\"baz\");\r\n+        checkGroups(pm, new String[]{ \"foo\", \"bar\", \"baz\" });\r\n+\r\n+        fetch.addFetchGroup(\"a\");\r\n+        fetch.addFetchGroup(\"b\");\r\n+        fetch.addFetchGroup(\"c\");\r\n+        fetch.addFetchGroup(\"d\");\r\n+        checkGroups(pm, new String[]\r\n+            { \"foo\", \"bar\", \"baz\", \"a\", \"b\", \"c\", \"d\" });\r\n+\r\n+        fetch.removeFetchGroup(\"bar\");\r\n+        checkGroups(pm, new String[]{ \"foo\", \"baz\", \"a\", \"b\", \"c\", \"d\" });\r\n+\r\n+        fetch.removeFetchGroup(\"baz\");\r\n+        fetch.removeFetchGroup(\"c\");\r\n+        checkGroups(pm, new String[]{ \"foo\", \"a\", \"b\", \"d\" });\r\n+\r\n+        fetch.clearFetchGroups().addFetchGroup(FetchPlan.GROUP_DEFAULT);\r\n+        checkGroups(pm, new String[0]);\r\n+    }\r\n+\r\n+    private void checkGroups(OpenJPAEntityManager pm, String[] groups) {\r\n+        HashSet groupSet = new HashSet(Arrays.asList(groups));\r\n+        groupSet.add(FetchPlan.GROUP_DEFAULT);\r\n+        assertEquals(\"groupSet dont match\", groupSet,\r\n+            new HashSet(pm.getFetchPlan().getFetchGroups()));\r\n+    }\r\n+\r\n+    public void testFetchGroupsChildWithConfiguration() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.getFetchPlan().addFetchGroup(\"g1\");\r\n+        pm.getFetchPlan().addFetchGroup(\"g3\");\r\n+\r\n+        // get this so that h's value is loaded into cache.\r\n+        FetchGroupTestObject o1 = getO1(pm);\r\n+\r\n+        FetchGroupTestObjectChild c1 = getC1(pm);\r\n+\r\n+        // DFG fields and fields in groups 1 and 3 should be loaded\r\n+        checkChildObject(pm, c1, true, true, true, true, false, false,\r\n+            true, true, false, true);\r\n+\r\n+        // upon accessing field b, nothing should change.\r\n+        c1.getB();\r\n+        checkChildObject(pm, c1, true, true, true, true, false, false,\r\n+            true, true, false, true);\r\n+\r\n+        c1.getH();\r\n+    }\r\n+\r\n+    public void testFetchGroupsWithConfiguration() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        pm.getFetchPlan().addFetchGroup(\"g1\");\r\n+        pm.getFetchPlan().addFetchGroup(\"g3\");\r\n+\r\n+        FetchGroupTestObject o1 = getO1(pm);\r\n+        FetchGroupTestObject o2 = getO2(pm);\r\n+\r\n+        // DFG fields and fields in groups 1 and 3 should be loaded\r\n+        checkObject(pm, o1, true, true, true, true, false, false);\r\n+\r\n+        // upon accessing field b, nothing should change.\r\n+        o1.getB();\r\n+        checkObject(pm, o1, true, true, true, true, false, false);\r\n+\r\n+        // loading field h should not cause any of the others to be loaded.\r\n+        assertEquals(o1, o2.getH());\r\n+        checkObject(pm, o2, true, true, true, true, false, false);\r\n+\r\n+        // loading field g should cause e and f to be loaded.\r\n+        assertEquals(o1, o2.getG());\r\n+        checkObject(pm, o2, true, true, true, true, true, true);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that relation fields are loaded immediately when\r\n+     * they are in one of the PM's configured fetch groups.\r\n+     */\r\n+    public void testRelationsLoaded() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.getFetchPlan().addFetchGroup(\"g2\");\r\n+\r\n+        // note: important the o1 is *not* in pm's cache at this point, so that\r\n+        // we know it takes another datastore trip to get o1\r\n+\r\n+        // load o2 and retrieve its state manager\r\n+        OpenJPAStateManager sm = getStateManager(getO2(pm), pm);\r\n+        assertNotNull(\"SM is NULL\", sm);\r\n+\r\n+        // 'g' is the name of a 1-1 relation field to o1 in configured\r\n+        // fetch group 'g2'; make sure it is loaded\r\n+        int field = sm.getMetaData().getField(\"g\").getIndex();\r\n+        try {\r\n+            assertTrue(sm.getLoaded().get(field));\r\n+            assertEquals(oid1,\r\n+                ((FetchGroupTestObject) sm.fetchObjectField(field)).getId());\r\n+        } catch (junit.framework.AssertionFailedError afe) {\r\n+            bug(623, afe, \"One to one mappings do not work with custom \"\r\n+                + \"fetch groups\");\r\n+        }\r\n+    }\r\n+\r\n+    protected void checkObject(OpenJPAEntityManager pm,\r\n+        FetchGroupTestObject o, boolean a, boolean b,\r\n+        boolean c, boolean d, boolean e, boolean f) {\r\n+        OpenJPAStateManager sm = getStateManager(o, pm);\r\n+        BitSet loaded = sm.getLoaded();\r\n+\r\n+        FieldMetaData[] fmds = sm.getMetaData().getFields();\r\n+        int i = 0;\r\n+        for (; i < fmds.length; i++) {\r\n+            if (fmds[i].getName().equals(\"a\"))\r\n+                assertEquals(a, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"b\"))\r\n+                assertEquals(b, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"c\"))\r\n+                assertEquals(c, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"d\"))\r\n+                assertEquals(d, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"e\"))\r\n+                assertEquals(e, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"f\"))\r\n+                assertEquals(f, loaded.get(i));\r\n+        }\r\n+    }\r\n+\r\n+    protected void checkChildObject(OpenJPAEntityManager pm,\r\n+        FetchGroupTestObjectChild o, boolean a, boolean b,\r\n+        boolean c, boolean d, boolean e, boolean f, boolean childA,\r\n+        boolean childB, boolean childC, boolean childD) {\r\n+        checkObject(pm, o, a, b, c, d, e, f);\r\n+\r\n+        OpenJPAStateManager sm = getStateManager(o, pm);\r\n+        BitSet loaded = sm.getLoaded();\r\n+\r\n+        FieldMetaData[] fmds = sm.getMetaData().getFields();\r\n+        int i = 0;\r\n+        for (; i < fmds.length; i++) {\r\n+            if (fmds[i].getName().equals(\"childA\"))\r\n+                assertEquals(childA, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"childB\"))\r\n+                assertEquals(childB, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"childC\"))\r\n+                assertEquals(childC, loaded.get(i));\r\n+            else if (fmds[i].getName().equals(\"childD\"))\r\n+                assertEquals(childD, loaded.get(i));\r\n+        }\r\n+    }\r\n+\r\n+    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\r\n+        return pm.find(FetchGroupTestObject.class, oid1);\r\n+    }\r\n+\r\n+    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\r\n+        return pm.find(FetchGroupTestObject.class, oid2);\r\n+    }\r\n+\r\n+    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\r\n+        return pm.find(FetchGroupTestObjectChild.class, oidc1);\r\n+    }\r\n+\r\n+    /**\r\n+     * Tests that named fetch groups actually bring in the\r\n+     * managed object.\r\n+     */\r\n+    public void testFetchGroupInstantiated() {\r\n+        deleteAll(AttachA.class);\r\n+        deleteAll(AttachB.class);\r\n+        deleteAll(AttachC.class);\r\n+        deleteAll(AttachD.class);\r\n+        deleteAll(AttachE.class);\r\n+        deleteAll(AttachF.class);\r\n+\r\n+        OpenJPAEntityManager pm;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        AttachE e = new AttachE();\r\n+        AttachB b = new AttachB();\r\n+        e.setB(b);\r\n+        pm.persist(e);\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        Object ob;\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        assertSize(0, pm.getManagedObjects());\r\n+        ob = pm.createExtent(AttachE.class, true).iterator().next();\r\n+        // make sure relation is not loaded\r\n+        assertSize(1, pm.getManagedObjects());\r\n+        rollbackTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        pm = getPM();\r\n+        startTx(pm);\r\n+        // now make sure we load relations\r\n+        pm.getFetchPlan().addFetchGroup(\"all\");\r\n+        assertSize(0, pm.getManagedObjects());\r\n+        ob = pm.createExtent(AttachE.class, true).iterator().next();\r\n+        // make sure relation is loaded\r\n+        assertSize(2, pm.getManagedObjects());\r\n+        rollbackTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+}\r\n+ \n\\ No newline at end of file"},{"sha":"b3694d40a39e577430c086e36ad26592e9245f47","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * TestFetchGroupsExtent.java\r\n+ *\r\n+ * Created on October 12, 2006, 9:54 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\r\n+\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestFetchGroupsExtent extends TestFetchGroups {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestFetchGroupsExtent\r\n+     */\r\n+    public TestFetchGroupsExtent() {\r\n+    }\r\n+\r\n+    public TestFetchGroupsExtent(String s) {\r\n+        super(s);\r\n+    }\r\n+\r\n+    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\r\n+        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\r\n+            true);\r\n+        List l = e.list();\r\n+\r\n+        OpenJPAQuery q = pm.createQuery(\r\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 5\");\r\n+        q.setCandidateCollection(l);\r\n+\r\n+        return (FetchGroupTestObject)\r\n+            ((Collection) q.getResultList()).iterator().next();\r\n+    }\r\n+\r\n+    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\r\n+        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\r\n+            true);\r\n+        List l = e.list();\r\n+\r\n+        OpenJPAQuery q = pm.createQuery(\r\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 3\");\r\n+        q.setCandidateCollection(l);\r\n+\r\n+        return (FetchGroupTestObject)\r\n+            ((Collection) q.getResultList()).iterator().next();\r\n+    }\r\n+\r\n+    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\r\n+        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\r\n+            true);\r\n+        List l = e.list();\r\n+\r\n+        OpenJPAQuery q = pm.createQuery(\r\n+            \"SELECT o FROM FetchGroupTestObjectChild o WHERE o.a = 4\");\r\n+        q.setCandidateCollection(l);\r\n+\r\n+        return (FetchGroupTestObjectChild)\r\n+            ((Collection) q.getResultList()).iterator().next();\r\n+    }\r\n+}\r"},{"sha":"ecb040971a993081968b66f4ea1d27e821f20e66","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * TestFetchGroupsQuery.java\r\n+ *\r\n+ * Created on October 12, 2006, 10:09 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.List;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestFetchGroupsQuery extends TestFetchGroups {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestFetchGroupsQuery\r\n+     */\r\n+    public TestFetchGroupsQuery() {\r\n+    }\r\n+\r\n+    public TestFetchGroupsQuery(String s) {\r\n+        super(s);\r\n+    }\r\n+\r\n+    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\r\n+//        OpenJPAQuery q = pm.createNativeQuery(\"a == 5\",FetchGroupTestObject.class);\r\n+//        return (FetchGroupTestObject)\r\n+//        ((Collection) q.getResultList()).iterator().next();\r\n+\r\n+        OpenJPAQuery q = pm.createQuery(\r\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 5\");\r\n+        List l = q.getResultList();\r\n+\r\n+        return (FetchGroupTestObject) (l.iterator().next());\r\n+    }\r\n+\r\n+    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\r\n+//        OpenJPAQuery q = pm.createNativeQuery(\"a == 3\",FetchGroupTestObject.class);\r\n+//        return (FetchGroupTestObject)\r\n+//        ((Collection) q.getResultList()).iterator().next();\r\n+\r\n+        OpenJPAQuery q = pm.createQuery(\r\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 3\");\r\n+        List l = q.getResultList();\r\n+\r\n+        return (FetchGroupTestObject) (l.iterator().next());\r\n+    }\r\n+\r\n+    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\r\n+//        OpenJPAQuery q = pm.createNativeQuery(\"a == 4\",FetchGroupTestObjectChild.class);\r\n+//        return (FetchGroupTestObjectChild)\r\n+//        ((Collection) q.getResultList()).iterator().next();\r\n+\r\n+        OpenJPAQuery q = pm.createQuery(\r\n+            \"SELECT o FROM FetchGroupTestObjectChild o WHERE o.a = 4\");\r\n+        List l = q.getResultList();\r\n+\r\n+        return (FetchGroupTestObjectChild) (l.iterator().next());\r\n+    }\r\n+}\r"},{"sha":"84eb02d42ab497ba9f4ed895e06de45a3e51a745","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","status":"added","additions":526,"deletions":0,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,526 @@\n+/*\r\n+ * TestFetchPlan.java\r\n+ *\r\n+ * Created on October 16, 2006, 3:02 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCAddress;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCCompany;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCCountry;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCDepartment;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCDirectory;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCEmployee;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCFile;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.PCPerson;\r\n+\r\n+import org.apache.openjpa.persistence.FetchPlan;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestFetchPlan extends BaseKernelTest {\r\n+\r\n+    static Object _rootDirId;\r\n+    static Object _rootCompanyId;\r\n+\r\n+    static final int MAX_DEPTH = 5; // Maximum depth of the directories\r\n+    static final int MAX_CHILD = 3; // Maximum number of files/directory\r\n+    static final String quote = \"\\\"\";\r\n+    private static boolean firstTime = true;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestFetchPlan\r\n+     */\r\n+    public TestFetchPlan() {\r\n+    }\r\n+\r\n+    public TestFetchPlan(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /**\r\n+     * Clears past data and creates new data for test.\r\n+     * Clear test data before and not <em>after</em> such that one can analyze\r\n+     * the database for test failures.\r\n+     */\r\n+    public void setUp() throws Exception {\r\n+        if (firstTime) {\r\n+            firstTime = false;\r\n+            clearTestData();\r\n+            createTestData();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a directory tree of MAX_DEPTH with each directory having a single\r\n+     * directory and MAX_CHILD files.\r\n+     * Creates typical Employee-Department-Company-Address instances.\r\n+     *\r\n+     * @return the persitent identifier of the root directory.\r\n+     */\r\n+    void createTestData() {\r\n+        // create a tree of directories with files in them\r\n+        PCDirectory rootDir = new PCDirectory(getDirectoryName(0));\r\n+        PCDirectory parent = rootDir;\r\n+        for (int i = 1; i <= MAX_DEPTH; i++) {\r\n+            PCDirectory dir = new PCDirectory(getDirectoryName(i));\r\n+            parent.add(dir);\r\n+\r\n+            for (int j = 0; j < MAX_CHILD; j++)\r\n+                parent.add(getFileName(j));\r\n+\r\n+            parent = dir;\r\n+        }\r\n+\r\n+        // create a graph\r\n+        //      | ---address-country\r\n+        //      |\r\n+        //  company-dept-employee-address-country\r\n+        //\r\n+        PCCountry country1 = new PCCountry(\"100\", \"Employee 1 Country\");\r\n+        PCCountry country2 = new PCCountry(\"200\", \"Employee 2 Country\");\r\n+        PCCountry ccountry = new PCCountry(\"300\", \"Company Country\");\r\n+\r\n+        PCCompany company = new PCCompany(\"Company\");\r\n+\r\n+        PCDepartment dept1 = new PCDepartment(\"Department1\");\r\n+        PCDepartment dept2 = new PCDepartment(\"Department2\");\r\n+\r\n+        PCEmployee emp1 = new PCEmployee(\"Employee1\");\r\n+        PCEmployee emp2 = new PCEmployee(\"Employee2\");\r\n+\r\n+        PCAddress addr1 = new PCAddress(\"Street1\", \"city1\", country1);\r\n+        PCAddress addr2 = new PCAddress(\"Street2\", \"city2\", country2);\r\n+        PCAddress caddr = new PCAddress(\"Street3\", \"city3\", ccountry);\r\n+\r\n+        dept1.addEmployee(emp1);\r\n+        dept2.addEmployee(emp2);\r\n+\r\n+        company.addDepartment(dept1);\r\n+        company.addDepartment(dept2);\r\n+\r\n+        company.setAddress(caddr);\r\n+\r\n+        emp1.setAddress(addr1);\r\n+        emp2.setAddress(addr2);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(rootDir);\r\n+        pm.persist(company);\r\n+//        _rootDirId     = pm.getObjectId(rootDir);\r\n+        _rootDirId = rootDir.getId();\r\n+        assertNotNull(_rootDirId);\r\n+//        _rootCompanyId = pm.getObjectId(company);\r\n+        _rootCompanyId = company.getId();\r\n+        assertNotNull(_rootCompanyId);\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that the single valued field (_parent) is not traversed when the\r\n+     * fecth group selects only the _name field.\r\n+     */\r\n+    public void testZeroRecursionDepthSingleValuedField() {\r\n+        genericTestForSingleValuedRecursiveField(\"name\", 4, 0);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that the single valued field (_parent) is traversed once and only\r\n+     * once when the fecth group selects the _parent field with recursion depth\r\n+     * of 1 (default).\r\n+     */\r\n+    public void testOneRecursionDepthSingleValuedField() {\r\n+        genericTestForSingleValuedRecursiveField(\"name+parent\", 4, 1);\r\n+    }\r\n+\r\n+    /**\r\n+     * Test that the single valued field (_parent) is traversed twice and only\r\n+     * twice when the fecth group selects the _parent field with recursion depth\r\n+     * of 2.\r\n+     */\r\n+    public void testTwoRecursionDepthSingleValuedField() {\r\n+        genericTestForSingleValuedRecursiveField(\"name+parent+grandparent\",\r\n+            4, 2);\r\n+    }\r\n+\r\n+    public void testThreeRecursionDepthSingleValuedField() {\r\n+        genericTestForSingleValuedRecursiveField\r\n+            (\"name+parent+grandparent+greatgrandparent\", 4, 3);\r\n+    }\r\n+\r\n+    public void testInfiniteRecursionDepthSingleValuedField() {\r\n+        genericTestForSingleValuedRecursiveField(\"allparents\", 4, -1);\r\n+    }\r\n+\r\n+    /**\r\n+     * Generically tests recursive traversal of single-valued parent field.\r\n+     *\r\n+     * @param plan a plan that fetches L parents and no children\r\n+     * @param rd the recursion depth of directory from the root\r\n+     * @param fd the fetch depth = number of parents fetched\r\n+     */\r\n+    public void genericTestForSingleValuedRecursiveField(String plan, int rd,\r\n+        int fd) {\r\n+        PCDirectory result = queryDirectoryWithPlan(plan, rd, fd);\r\n+\r\n+        checkParents(result, rd, fd);\r\n+\r\n+        Object children = PCDirectory.reflect(result, \"_children\");\r\n+        assertNull(children);\r\n+    }\r\n+\r\n+    /**\r\n+     * Query to obtain a single directory at the given depth.\r\n+     * The directory name is constructed by the depth it occurs (d0 for root,\r\n+     * d1 for depth 1 and so on).<BR>\r\n+     * Checks the result for for matching name and size of the result (must\r\n+     * be one).\r\n+     *\r\n+     * @param plan name of a fetch plan\r\n+     * @param depth depth of the directory to be queried\r\n+     * @return the selected directory.\r\n+     */\r\n+    PCDirectory queryDirectoryWithPlan(String plan, int rd, int fd) {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        pm.getFetchPlan().addFetchGroup(plan);\r\n+        if (fd != 0)\r\n+            pm.getFetchPlan().setMaxFetchDepth(fd);\r\n+\r\n+//        String filter = \"_name == \" + quoted(getDirectoryName(rd));        \r\n+//        OpenJPAQuery query = pm.createNativeQuery(filter,PCDirectory.class);\r\n+//        List result = (List) query.getResultList();\r\n+\r\n+        String query = \"SELECT o FROM PCDirectory o WHERE o._name = '\" +\r\n+            getDirectoryName(rd) + \"'\";\r\n+        List fresult = ((OpenJPAQuery) pm.createQuery(query)).getResultList();\r\n+\r\n+        assertEquals(1, fresult.size());\r\n+        PCDirectory dir = (PCDirectory) fresult.get(0);\r\n+\r\n+        return dir;\r\n+    }\r\n+\r\n+    /**\r\n+     * Asserts that\r\n+     * <LI> the given directory name matches the directory name at depth D.\r\n+     * <LI> the parents upto L recursion is not null and beyond is\r\n+     * null.\r\n+     *\r\n+     * @param result a directory to test\r\n+     * @param D depth at which this directory appears\r\n+     * @param L the number of live (fetched) parents. -1 denotes infinite\r\n+     */\r\n+    void checkParents(PCDirectory result, int D, int L) {\r\n+\r\n+        assertEquals(\"ge\", getDirectoryName(D),\r\n+            PCDirectory.reflect(result, \"_name\"));\r\n+        PCDirectory[] parents = getParents(result, D);\r\n+        int N = (L == -1) ? D : L;\r\n+        for (int i = 0; i < N; i++) {\r\n+            assertNotNull(i + \"-th parent at depth \" + D + \" is null\",\r\n+                parents[i]);\r\n+            assertEquals(getDirectoryName(D - i - 1),\r\n+                PCDirectory.reflect(parents[i], \"_name\"));\r\n+        }\r\n+        for (int i = N; i < D; i++)\r\n+            assertNull(i + \"-th parent at depth \" + D + \" is not null \" +\r\n+                parents[i], parents[i]);\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets an array of parents of the given directory. The zeroth element\r\n+     * is the parent of the given directory and (i+1)-th element is the\r\n+     * parent of the i-th element. Uses reflection to ensure that the\r\n+     * side-effect does not cause a database access for the field.\r\n+     *\r\n+     * @param dir a starting directory\r\n+     * @param depth depth to recurse. must be positive.\r\n+     * @return\r\n+     */\r\n+    PCDirectory[] getParents(PCDirectory dir, int depth) {\r\n+        PCDirectory[] result = new PCDirectory[depth];\r\n+        PCDirectory current = dir;\r\n+        for (int i = 0; i < depth; i++) {\r\n+            result[i] = (PCDirectory) PCDirectory.reflect(current, \"_parent\");\r\n+            current = result[i];\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks that the first L elements of the given array is non-null and\r\n+     * the rest are null.\r\n+     *\r\n+     * @param depth\r\n+     */\r\n+    void assertNullParent(PCDirectory[] parents, int L) {\r\n+        for (int i = 0; i < L; i++)\r\n+            assertNotNull(parents[i]);\r\n+        for (int i = L; i < parents.length; i++)\r\n+            assertNull(parents[i]);\r\n+    }\r\n+\r\n+    String getDirectoryName(int depth) {\r\n+        return \"d\" + depth;\r\n+    }\r\n+\r\n+    String getFileName(int depth) {\r\n+        return \"f\" + depth;\r\n+    }\r\n+\r\n+    String quoted(String s) {\r\n+        return quote + s + quote;\r\n+    }\r\n+\r\n+    /**\r\n+     * Defines a fetch plan that has several fetch groups to traverse a chain\r\n+     * of relationships.\r\n+     * After getting the root by an extent query, checks (by reflection) that\r\n+     * all the relations in the chain are fetched.\r\n+     * The fetch depth is kept infinite, so what would be fetched is essentially\r\n+     * controlled by the fetch groups.\r\n+     */\r\n+    public void testRelationTraversal() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        FetchPlan plan = pm.getFetchPlan();\r\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n+        plan.addFetchGroup(\"employee.department\");\r\n+        plan.addFetchGroup(\"department.company\");\r\n+        plan.addFetchGroup(\"company.address\");\r\n+        plan.addFetchGroup(\"address.country\");\r\n+\r\n+        Iterator employees = pm.createExtent(PCEmployee.class, true).iterator();\r\n+        while (employees.hasNext()) {\r\n+            PCEmployee emp = (PCEmployee) employees.next();\r\n+\r\n+            PCDepartment dept = (PCDepartment) PCEmployee.reflect(emp,\r\n+                \"department\");\r\n+            assertNotNull(dept);\r\n+\r\n+            PCCompany company = (PCCompany) PCDepartment.reflect(dept,\r\n+                \"company\");\r\n+            assertNotNull(company);\r\n+\r\n+            PCAddress addr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n+            assertNotNull(addr);\r\n+\r\n+            PCCountry country = (PCCountry) PCAddress.reflect(addr, \"country\");\r\n+            assertNotNull(country);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Defines a fetch plan that has several fetch groups to traverse a chain\r\n+     * of relationships but truncated at the last relation.\r\n+     * After getting the root by an extent query, checks (by reflection) that\r\n+     * all but the last relation in the chain are fetched.\r\n+     * The fetch depth is kept infinite, so what would be fetched is essentially\r\n+     * controlled by the fetch groups.\r\n+     */\r\n+    public void testRelationTraversalTruncated() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        FetchPlan plan = pm.getFetchPlan();\r\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n+        plan.addFetchGroup(\"employee.department\");\r\n+        plan.addFetchGroup(\"department.company\");\r\n+        plan.addFetchGroup(\"company.address\");\r\n+\r\n+        Iterator employees = pm.createExtent(PCEmployee.class, true).iterator();\r\n+        while (employees.hasNext()) {\r\n+            PCEmployee emp = (PCEmployee) employees.next();\r\n+\r\n+            PCDepartment dept = (PCDepartment) PCEmployee.reflect(emp,\r\n+                \"department\");\r\n+            assertNotNull(dept);\r\n+\r\n+            PCCompany company = (PCCompany) PCDepartment.reflect(dept,\r\n+                \"company\");\r\n+            assertNotNull(company);\r\n+\r\n+            PCAddress addr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n+            assertNotNull(addr);\r\n+\r\n+            PCCountry country = (PCCountry) PCAddress.reflect(addr, \"country\");\r\n+            assertNull(country);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets a Compnay object by getObjectById() method as opposed to query.\r\n+     * The active fetch groups should bring in the multi-valued relationships.\r\n+     * The address->country relationship can be reached in two alternate\r\n+     * paths -- one as company->address->country and the other is\r\n+     * company->department->employee->address->country.\r\n+     * Though active fetch groups allow both the paths -- the max fetch depth\r\n+     * is set such that the shorter path is taken but not the longer one.\r\n+     * Hence the company's address->country should be loaded but not the\r\n+     * employee's.\r\n+     */\r\n+    public void testRelationTraversalWithCompanyAsRoot() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        FetchPlan plan = pm.getFetchPlan();\r\n+\r\n+        plan.setMaxFetchDepth(2);\r\n+        plan.addFetchGroup(\"company.departments\");\r\n+        plan.addFetchGroup(\"company.address\");\r\n+        plan.addFetchGroup(\"department.employees\");\r\n+        plan.addFetchGroup(\"person.address\");\r\n+        plan.addFetchGroup(\"address.country\");\r\n+\r\n+        PCCompany company =\r\n+            (PCCompany) pm.find(PCCompany.class, _rootCompanyId);\r\n+        Set departments = (Set) PCCompany.reflect(company, \"departments\");\r\n+        assertNotNull(\"department is null\", departments);\r\n+        assertEquals(\"exp. depart size is not 2\", 2, departments.size());\r\n+        PCDepartment dept = (PCDepartment) departments.iterator().next();\r\n+        assertNotNull(\"dept is null\", dept);\r\n+        Set employees = (Set) PCDepartment.reflect(dept, \"employees\");\r\n+        assertNotNull(\"employees is null\", employees);\r\n+        assertEquals(1, employees.size());\r\n+        PCEmployee emp = (PCEmployee) employees.iterator().next();\r\n+        assertNotNull(\"emp is not null\", emp);\r\n+        PCAddress eaddr = (PCAddress) PCPerson.reflect(emp, \"address\");\r\n+        PCAddress caddr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n+        assertNull(\"eaddr is not null\", eaddr);\r\n+        assertNotNull(\"caddr is null\", caddr);\r\n+        PCCountry country = (PCCountry) PCAddress.reflect(caddr, \"country\");\r\n+        assertNotNull(\"country is null\", country);\r\n+    }\r\n+\r\n+    /**\r\n+     * Same as above but the root compnay instance is detached.\r\n+     */\r\n+    public void testDetachedRelationTraversalWithCompanyAsRoot() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        FetchPlan plan = pm.getFetchPlan();\r\n+        pm.getFetchPlan().setMaxFetchDepth(2);\r\n+        plan.addFetchGroup(\"company.departments\");\r\n+        plan.addFetchGroup(\"company.address\");\r\n+        plan.addFetchGroup(\"department.employees\");\r\n+        plan.addFetchGroup(\"person.address\");\r\n+        plan.addFetchGroup(\"address.country\");\r\n+\r\n+        PCCompany company1 =\r\n+            (PCCompany) pm.find(PCCompany.class, _rootCompanyId);\r\n+\r\n+        PCCompany company = (PCCompany) pm.detach(company1);\r\n+        assertTrue(\"company is equal company1\", company != company1);\r\n+        Set departments = (Set) PCCompany.reflect(company, \"departments\");\r\n+        assertNotNull(\"department is null\", departments);\r\n+        assertEquals(\"department size is not 2\", 2, departments.size());\r\n+        PCDepartment dept = (PCDepartment) departments.iterator().next();\r\n+        assertNotNull(\"dept is null\", dept);\r\n+        Set employees = (Set) PCDepartment.reflect(dept, \"employees\");\r\n+        assertNotNull(\"employee is null\", employees);\r\n+        assertEquals(\"employees size not 1\", 1, employees.size());\r\n+        PCEmployee emp = (PCEmployee) employees.iterator().next();\r\n+        assertNotNull(\"emp is null\", emp);\r\n+        PCAddress eaddr = (PCAddress) PCPerson.reflect(emp, \"address\");\r\n+        PCAddress caddr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n+        assertNull(\"eaddr is not null\", eaddr);\r\n+        assertNotNull(\"caddr is null\", caddr);\r\n+        PCCountry country = (PCCountry) PCAddress.reflect(caddr, \"country\");\r\n+        assertNotNull(\"country is null\", country);\r\n+    }\r\n+\r\n+    public void testDefaultFetchGroup() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+\r\n+        String squery =\r\n+            \"SELECT DISTINCT o FROM PCEmployee o WHERE o.name = 'Employee1'\";\r\n+        OpenJPAQuery q = pm.createQuery(squery);\r\n+\r\n+        //FIXME jthomas\r\n+        PCEmployee person = (PCEmployee) q.getSingleResult();\r\n+        assertEquals(\"Exp. String is not employee1\", \"Employee1\",\r\n+            PCPerson.reflect(person, \"name\"));\r\n+    }\r\n+\r\n+    public void testDefaultFetchGroupExistsByDefault() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        assertTrue(\"pm does not contain default fetchplan\",\r\n+            pm.getFetchPlan().getFetchGroups().contains(\r\n+                FetchPlan.GROUP_DEFAULT));\r\n+    }\r\n+\r\n+    public void testDefaultFetchGroupCanBeRemoved() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        assertTrue(\"does not contain default fetchplan\",\r\n+            pm.getFetchPlan().getFetchGroups().contains(\r\n+                FetchPlan.GROUP_DEFAULT));\r\n+\r\n+        pm.getFetchPlan().removeFetchGroup(FetchPlan.GROUP_DEFAULT);\r\n+        assertFalse(\"does contain default fetchplan\",\r\n+            pm.getFetchPlan().getFetchGroups().contains(\r\n+                FetchPlan.GROUP_DEFAULT));\r\n+\r\n+        OpenJPAEntityManager pm2 = getPM();\r\n+        assertTrue(\"pm2 does not contain default fetchplan\",\r\n+            pm2.getFetchPlan().getFetchGroups().contains(\r\n+                FetchPlan.GROUP_DEFAULT));\r\n+    }\r\n+\r\n+    public void tearDown() throws Exception {\r\n+        super.tearDown();\r\n+    }\r\n+\r\n+    private void clearTestData() throws Exception {\r\n+//        OpenJPAEntityManagerFactory pmf =(OpenJPAEntityManagerFactory) getEmf();\r\n+//        OpenJPAConfiguration conf=pmf.getConfiguration();\r\n+//        \r\n+//        Class.forName(pmf.getConfiguration().getConnection2DriverName());\r\n+//        String url=conf.getConnection2URL();\r\n+//        String user=conf.getConnection2UserName();\r\n+//        String pass=conf.getConnection2Password();\r\n+//        \r\n+//        Connection con = DriverManager.getConnection(\r\n+//                url,\r\n+//                user,\r\n+//                pass);\r\n+//        con.setAutoCommit(true);\r\n+//        con.prepareStatement(\"DELETE FROM PCDIRECTORY\").executeUpdate();\r\n+//        con.prepareStatement(\"DELETE FROM PCFILE\").executeUpdate();\r\n+//        con.prepareStatement(\"DELETE FROM PCPERSON\").executeUpdate();\r\n+//        con.prepareStatement(\"DELETE FROM PCDEPARTMENT\").executeUpdate();\r\n+//        con.prepareStatement(\"DELETE FROM PCCOMPANY\").executeUpdate();\r\n+//        con.prepareStatement(\"DELETE FROM PCADDRESS\").executeUpdate();\r\n+//        con.prepareStatement(\"DELETE FROM PCCOUNTRY\").executeUpdate();\r\n+\r\n+        deleteAll(PCDirectory.class);\r\n+        deleteAll(PCFile.class);\r\n+        deleteAll(PCPerson.class);\r\n+        deleteAll(PCDepartment.class);\r\n+        deleteAll(PCCompany.class);\r\n+        deleteAll(PCAddress.class);\r\n+        deleteAll(PCCountry.class);\r\n+        deleteAll(PCEmployee.class);\r\n+    }\r\n+}\r"},{"sha":"876936f42be9dde72d13ee7e105036265467845f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","status":"added","additions":383,"deletions":0,"changes":383,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,383 @@\n+/*\r\n+ * TestFieldRange.java\r\n+ *\r\n+ * Created on October 12, 2006, 10:14 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.Date;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import junit.framework.Assert;\r\n+import junit.framework.AssertionFailedError;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestFieldRange extends BaseKernelTest {\r\n+\r\n+    protected static String RANDOM_STRING =\r\n+        \"This is my test String with all \"\r\n+            + \"kinds of wierd characters: \"\r\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|\\\"\\\"\\\"\\\"\\\"+_/?.>,<~`\"\r\n+            + \"'''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n+            + \"''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|+_/?.>,<~`\";\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestFieldRange\r\n+     */\r\n+    public TestFieldRange() {\r\n+    }\r\n+\r\n+    public TestFieldRange(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        super.setUp();\r\n+        deleteAll(AllFieldTypesTest.class);\r\n+    }\r\n+\r\n+    public void testSaveState()\r\n+        throws Exception {\r\n+        allFieldSaveState(\r\n+            (int) 259645,\r\n+            (short) 50849,\r\n+            (long) 2349847982L,\r\n+            (float) 43273423.0234723F,\r\n+            (double) 34678.02384723D,\r\n+            (byte) -120,\r\n+            (boolean) true,\r\n+            (char) '%',\r\n+            (Date) new Date(),\r\n+            (Serializable) new StringBuffer(5000),\r\n+            (String) RANDOM_STRING,\r\n+            randomBigInteger(),\r\n+            randomBigDecimal());\r\n+    }\r\n+\r\n+    /**\r\n+     * Test to make sure all the numeric fields can accept the maximum\r\n+     * values for their data size. Note that we subtract one from\r\n+     * each of the values because some databases (like InstantDB)\r\n+     * may consider them to be equivalent to NULL.\r\n+     * FixMe: Hangs for some mysterious reason. aokeke\r\n+     */\r\n+\r\n+//    public void testLargeNumbers()\r\n+//    throws Exception {\r\n+//        try {\r\n+//            allFieldSaveState(\r\n+//                    (int) (Integer.MAX_VALUE - 1),\r\n+//                    (short) (Short.MAX_VALUE - 1),\r\n+//                    (long) (Long.MAX_VALUE - 1l),\r\n+//                    (float) (Float.MAX_VALUE - 1.0f),\r\n+//                    (double) (Double.MAX_VALUE - 1.0d),\r\n+//                    (byte) (Byte.MAX_VALUE),\r\n+//                    (boolean) true,\r\n+//                    (char) 'q',\r\n+//                    (Date) new Date(),\r\n+//                    (Serializable) new StringBuffer(5000),\r\n+//                    (String) RANDOM_STRING,\r\n+//                    randomBigInteger(),\r\n+//                    randomBigDecimal());\r\n+//        } catch (Throwable e) {\r\n+//            bug(3, e, \"doubles and floats\");\r\n+//        }\r\n+//    }\r\n+\r\n+    /**\r\n+     * Test to make sure all the numeric fields can be set to\r\n+     * very low values. We add one to the minimim value because\r\n+     * some databases (such as InstantDB) consider the MIN_VALUE\r\n+     * to be equivalent to null. This is arguably a bug, but\r\n+     * not a killer one.\r\n+     */\r\n+    public void testLargeNumbersNegative()\r\n+        throws Exception {\r\n+        allFieldSaveState(\r\n+            (int) (Integer.MIN_VALUE + 1),\r\n+            (short) (Short.MIN_VALUE + 1),\r\n+            (long) (Long.MIN_VALUE + 1l),\r\n+            (float) (Float.MIN_VALUE + 1.0f),\r\n+            (double) (Double.MIN_VALUE + 1.0d),\r\n+            (byte) (Byte.MIN_VALUE + 1),\r\n+            (boolean) true,\r\n+            (char) 'q',\r\n+            (Date) new Date(),\r\n+            (Serializable) new StringBuffer(5000),\r\n+            (String) RANDOM_STRING,\r\n+            randomBigInteger(),\r\n+            randomBigDecimal());\r\n+    }\r\n+\r\n+    public void testDoubleAndFloatPrecision()\r\n+        throws Exception {\r\n+        allFieldSaveState(\r\n+            (int) (0),\r\n+            (short) (0),\r\n+            (long) (0l),\r\n+            (float) (10.0f / 3.0f),\r\n+            (double) (100.0d / 3.0d),\r\n+            (byte) (0),\r\n+            (boolean) true,\r\n+            (char) 'q',\r\n+            (Date) new Date(),\r\n+            (Serializable) new StringBuffer(5000),\r\n+            (String) RANDOM_STRING,\r\n+            randomBigInteger(),\r\n+            randomBigDecimal());\r\n+    }\r\n+\r\n+    public void testZeroNumbers()\r\n+        throws Exception {\r\n+        allFieldSaveState(\r\n+            (int) (0),\r\n+            (short) (0),\r\n+            (long) (0l),\r\n+            (float) (0.0f),\r\n+            (double) (0.0d),\r\n+            (byte) (0),\r\n+            (boolean) true,\r\n+            (char) 'q',\r\n+            (Date) new Date(),\r\n+            (Serializable) new StringBuffer(5000),\r\n+            (String) RANDOM_STRING,\r\n+            new BigInteger(\"0\"),\r\n+            new BigDecimal(\"0.0\"));\r\n+    }\r\n+\r\n+    public void testLowDate()\r\n+        throws Exception {\r\n+        dateTest(0);\r\n+    }\r\n+\r\n+    public void testCurDate()\r\n+        throws Exception {\r\n+        dateTest(System.currentTimeMillis());\r\n+    }\r\n+\r\n+    public void testHighDate()\r\n+        throws Exception {\r\n+        try {\r\n+            // postgres will sometimes store the String \"invalid\" if the\r\n+            // date is too high, which will prevent us from even reading\r\n+            // the records that contain this corrupt value (thus breaking\r\n+            // any subsequent attempts to read instances of AllFieldTypesTest).\r\n+            // An Example of a date like this is:\r\n+            //   (Timestamp) 2038-02-08 22:20:07.65\r\n+            if (getCurrentPlatform() ==\r\n+                AbstractTestCase.Platform.POSTGRESQL)\r\n+                fail(\"Postgres can't even try to store a high date\");\r\n+\r\n+            dateTest(System.currentTimeMillis() * 2);\r\n+        } catch (AssertionFailedError e) {\r\n+            bug(6, e, \"Some data stores cannot deal \"\r\n+                + \"with very high dates\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Some date instances that have been known to have problems.\r\n+     */\r\n+    public void testProblematicDates()\r\n+        throws Exception {\r\n+        dateTest(1047744639);        // pointbase had probs with this\r\n+    }\r\n+\r\n+    private void dateTest(long l)\r\n+        throws Exception {\r\n+        Date d = new Date(l);\r\n+\r\n+        allFieldSaveState(\r\n+            (int) 10,\r\n+            (short) 10,\r\n+            (long) 10,\r\n+            (float) 0,\r\n+            (double) 0,\r\n+            (byte) 10,\r\n+            (boolean) true,\r\n+            (char) 'x',\r\n+            (Date) d,\r\n+            (Serializable) new StringBuffer(10),\r\n+            (String) RANDOM_STRING,\r\n+            new BigInteger(\"0\"),\r\n+            new BigDecimal(\"0\"));\r\n+    }\r\n+\r\n+    public void allFieldSaveState(int testint, short testshort, long testlong,\r\n+        float testfloat, double testdouble, byte testbyte,\r\n+        boolean testboolean, char testchar, Date testDate,\r\n+        Serializable testObject, String testString,\r\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n+        throws Exception {\r\n+        try {\r\n+            allFieldSaveStateInternal(testint, testshort, testlong,\r\n+                testfloat, testdouble, testbyte,\r\n+                testboolean, testchar, testDate,\r\n+                testObject, testString, testBigInteger, testBigDecimal);\r\n+        } finally {\r\n+            try {\r\n+                // make *sure* we do not leave a transaction open\r\n+                rollbackTx(getPM(true, false));\r\n+            } catch (Throwable t) {\r\n+\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void allFieldSaveStateInternal(\r\n+        int testint, short testshort, long testlong,\r\n+        float testfloat, double testdouble, byte testbyte,\r\n+        boolean testboolean, char testchar, Date testDate,\r\n+        Serializable testObject, String testString,\r\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+\r\n+        AllFieldTypesTest test = new AllFieldTypesTest();\r\n+        pm.persist(test);\r\n+        Object testID = pm.getObjectId(test);\r\n+\r\n+        test.setTestint(testint);\r\n+        test.setTestlong(testlong);\r\n+        test.setTestdouble(testdouble);\r\n+        test.setTestshort(testshort);\r\n+        test.setTestfloat(testfloat);\r\n+        test.setTestbyte(testbyte);\r\n+        test.setTestboolean(testboolean);\r\n+        test.setTestchar(testchar);\r\n+        test.setTestString(testString);\r\n+        test.setTestDate(testDate);\r\n+        test.setTestObject(testObject);\r\n+        test.setTestBigInteger(testBigInteger);\r\n+        test.setTestBigDecimal(testBigDecimal);\r\n+\r\n+        try {\r\n+            endTx(pm);\r\n+        } catch (Exception e) {\r\n+            if (e instanceof Exception &&\r\n+                ((Exception) e).getMessage().indexOf\r\n+                    (\"Maximum length is 8000\") != -1) {\r\n+                bug(AbstractTestCase.Platform.SQLSERVER, 5, e,\r\n+                    \"SQLServer cannot deal\"\r\n+                        + \" with numbers with more than 8000 digits\");\r\n+            } else {\r\n+                throw e;\r\n+            }\r\n+        }\r\n+\r\n+        endEm(pm);\r\n+\r\n+        //assertPersistent (test, true, false, false, false);\r\n+\r\n+        pm = getPM(true, false);\r\n+        startTx(pm);\r\n+\r\n+        AllFieldTypesTest retrievedObject =\r\n+            (AllFieldTypesTest) pm.find(AllFieldTypesTest.class, testID);\r\n+\r\n+        assertEquals(\"Field type int\", testint,\r\n+            retrievedObject.getTestint());\r\n+        assertEquals(\"Field type short\", testshort,\r\n+            retrievedObject.getTestshort());\r\n+        assertEquals(\"Field type boolean\", testboolean,\r\n+            retrievedObject.getTestboolean());\r\n+        assertEquals(\"Field type char\", testchar,\r\n+            retrievedObject.getTestchar());\r\n+        assertEquals(\"Field type long\", testlong,\r\n+            retrievedObject.getTestlong());\r\n+\r\n+        assertEquals(\"Field type byte\", testbyte,\r\n+            retrievedObject.getTestbyte());\r\n+        assertEquals(\"Field type String\", testString,\r\n+            retrievedObject.getTestString());\r\n+\r\n+        int i1 = (int) (testDate.getTime() / 1000);\r\n+        int i2 = (int) (retrievedObject.getTestDate().getTime() / 1000);\r\n+\r\n+        int testDateDay = testDate.getDay();\r\n+        int testDateMonth = testDate.getMonth();\r\n+        int testDateYear = testDate.getYear();\r\n+\r\n+        int retrievedObjectDay = retrievedObject.getTestDate().getDay();\r\n+        int retrievedObjectMonth = retrievedObject.getTestDate().getMonth();\r\n+        int retrievedObjectYear = retrievedObject.getTestDate().getYear();\r\n+\r\n+        System.out.println(\"i1 : \" + i1 + \"\\ni2 : \" + i2);\r\n+\r\n+        //CR346162. In this CR, it was stated that @Temporal(DATE) fields will be equal for year, month, day but not for hours, \r\n+        //minutes, seconds. So, we removed the time check and checked only for the equality of day, month and year\r\n+\r\n+        /* assertEquals(\"Field type Date: \"\r\n+     + testDate.getTime() + \"!=\"\r\n+     + retrievedObject.getTestDate().getTime()\r\n+     + \"[\" + new Date(testDate.getTime()) + \" != \"\r\n+     + new Date(retrievedObject.getTestDate().getTime()) + \"]\",\r\n+     (int) (testDate.getTime() / 1000),\r\n+     (int) (retrievedObject.getTestDate().getTime() / 1000));*/\r\n+\r\n+        if ((testDateDay != retrievedObjectDay) ||\r\n+            (testDateMonth != retrievedObjectMonth) ||\r\n+            (testDateYear != retrievedObjectYear)) {\r\n+            Assert.fail(\r\n+                \"Field type Date not stored properly. One or more of the components of the date (day, month or year) do not match. \\n\" +\r\n+                    \" Value that should be stored : \" + testDate.toGMTString() +\r\n+                    \". \\nValue that is actually\" +\r\n+                    \"stored : \" + retrievedObject.getTestDate().toGMTString());\r\n+        }\r\n+        //assertEquals (\"Field type Object\", testObject,\r\n+        //retrievedObject.getTestObject ());\r\n+        assertEquals(\"Field type BigInteger\", testBigInteger,\r\n+            retrievedObject.getTestBigInteger());\r\n+\r\n+        try {\r\n+            assertEquals(\"Field type BigDecimal (BigInteger part)\",\r\n+                testBigDecimal.toBigInteger(),\r\n+                retrievedObject.getTestBigDecimal().toBigInteger());\r\n+\r\n+            assertEquals(\"Field type BigDecimal\",\r\n+                testBigDecimal,\r\n+                retrievedObject.getTestBigDecimal());\r\n+\r\n+            assertEquals(\"Field type float\", testfloat,\r\n+                retrievedObject.getTestfloat(), 0.01f);\r\n+            assertEquals(\"Field type double\", testdouble,\r\n+                retrievedObject.getTestdouble(), 0.01d);\r\n+        } catch (AssertionFailedError afe) {\r\n+            bug(3, afe,\r\n+                \"Doubles and Floats lose precision in some data stores\");\r\n+        }\r\n+\r\n+        rollbackTx(pm);\r\n+    }\r\n+}\r"},{"sha":"45a2f579f4e60379a1ecf328a5a9c78511694b70","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","status":"added","additions":232,"deletions":0,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,232 @@\n+/*\r\n+ * TestFieldRange.java\r\n+ *\r\n+ * Created on October 12, 2006, 10:14 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.Date;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n+import junit.framework.AssertionFailedError;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestFieldRange2 extends BaseKernelTest {\r\n+\r\n+    protected static String RANDOM_STRING =\r\n+        \"This is my test String with all \"\r\n+            + \"kinds of wierd characters: \"\r\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|\\\"\\\"\\\"\\\"\\\"+_/?.>,<~`\"\r\n+            + \"'''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n+            + \"''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|+_/?.>,<~`\";\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestFieldRange\r\n+     */\r\n+    public TestFieldRange2() {\r\n+    }\r\n+\r\n+    public TestFieldRange2(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp()\r\n+        throws Exception {\r\n+        super.setUp();\r\n+        deleteAll(AllFieldTypesTest.class);\r\n+    }\r\n+\r\n+    public void testSaveState()\r\n+        throws Exception {\r\n+        allFieldSaveState(\r\n+            (int) 259645,\r\n+            (short) 50849,\r\n+            (long) 2349847982L,\r\n+            (float) 43273423.0234723F,\r\n+            (double) 34678.02384723D,\r\n+            (byte) -120,\r\n+            (boolean) true,\r\n+            (char) '%',\r\n+            (Date) new Date(),\r\n+            (Serializable) new StringBuffer(5000),\r\n+            (String) RANDOM_STRING,\r\n+            randomBigInteger(),\r\n+            randomBigDecimal());\r\n+    }\r\n+\r\n+    private void dateTest(long l)\r\n+        throws Exception {\r\n+        Date d = new Date(l);\r\n+\r\n+        allFieldSaveState(\r\n+            (int) 10,\r\n+            (short) 10,\r\n+            (long) 10,\r\n+            (float) 0,\r\n+            (double) 0,\r\n+            (byte) 10,\r\n+            (boolean) true,\r\n+            (char) 'x',\r\n+            (Date) d,\r\n+            (Serializable) new StringBuffer(10),\r\n+            (String) RANDOM_STRING,\r\n+            new BigInteger(\"0\"),\r\n+            new BigDecimal(\"0\"));\r\n+    }\r\n+\r\n+    public void allFieldSaveState(int testint, short testshort, long testlong,\r\n+        float testfloat, double testdouble, byte testbyte,\r\n+        boolean testboolean, char testchar, Date testDate,\r\n+        Serializable testObject, String testString,\r\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n+        throws Exception {\r\n+        try {\r\n+            allFieldSaveStateInternal(testint, testshort, testlong,\r\n+                testfloat, testdouble, testbyte,\r\n+                testboolean, testchar, testDate,\r\n+                testObject, testString, testBigInteger, testBigDecimal);\r\n+        } finally {\r\n+            try {\r\n+                // make *sure* we do not leave a transaction open\r\n+                rollbackTx(getPM(true, false));\r\n+            } catch (Throwable t) {\r\n+\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void allFieldSaveStateInternal(\r\n+        int testint, short testshort, long testlong,\r\n+        float testfloat, double testdouble, byte testbyte,\r\n+        boolean testboolean, char testchar, Date testDate,\r\n+        Serializable testObject, String testString,\r\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n+        throws Exception {\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+\r\n+        AllFieldTypesTest test = new AllFieldTypesTest();\r\n+        //pm.persist(test);\r\n+        //Object testID = pm.getObjectId(test);\r\n+\r\n+        test.setTestint(testint);\r\n+        test.setTestlong(testlong);\r\n+        test.setTestdouble(testdouble);\r\n+        test.setTestshort(testshort);\r\n+        test.setTestfloat(testfloat);\r\n+        test.setTestbyte(testbyte);\r\n+        test.setTestboolean(testboolean);\r\n+        test.setTestchar(testchar);\r\n+        test.setTestString(testString);\r\n+        test.setTestDate(testDate);\r\n+        test.setTestObject(testObject);\r\n+        test.setTestBigInteger(testBigInteger);\r\n+        test.setTestBigDecimal(testBigDecimal);\r\n+\r\n+        pm.persist(test);\r\n+        Object testID = pm.getObjectId(test);\r\n+\r\n+        try {\r\n+            endTx(pm);\r\n+        } catch (Exception e) {\r\n+            if (e instanceof Exception &&\r\n+                ((Exception) e).getMessage().indexOf\r\n+                    (\"Maximum length is 8000\") != -1) {\r\n+                bug(5, e, \"SQLServer cannot deal\"\r\n+                        + \" with numbers with more than 8000 digits\");\r\n+            } else {\r\n+                throw e;\r\n+            }\r\n+        }\r\n+\r\n+        endEm(pm);\r\n+\r\n+        //assertPersistent (test, true, false, false, false);\r\n+\r\n+        pm = getPM(true, false);\r\n+        startTx(pm);\r\n+\r\n+        AllFieldTypesTest retrievedObject =\r\n+            (AllFieldTypesTest) pm.find(AllFieldTypesTest.class, testID);\r\n+\r\n+        assertEquals(\"Field type int\", testint,\r\n+            retrievedObject.getTestint());\r\n+        assertEquals(\"Field type short\", testshort,\r\n+            retrievedObject.getTestshort());\r\n+        assertEquals(\"Field type boolean\", testboolean,\r\n+            retrievedObject.getTestboolean());\r\n+        assertEquals(\"Field type char\", testchar,\r\n+            retrievedObject.getTestchar());\r\n+        assertEquals(\"Field type long\", testlong,\r\n+            retrievedObject.getTestlong());\r\n+\r\n+        assertEquals(\"Field type byte\", testbyte,\r\n+            retrievedObject.getTestbyte());\r\n+        assertEquals(\"Field type String\", testString,\r\n+            retrievedObject.getTestString());\r\n+\r\n+        int i1 = (int) (testDate.getTime() / 1000);\r\n+        int i2 = (int) (retrievedObject.getTestDate().getTime() / 1000);\r\n+\r\n+        System.out.println(\"i1 : \" + i1 + \"\\ni2 : \" + i2);\r\n+        assertEquals(\"Field type Date: \"\r\n+            + testDate.getTime() + \"!=\"\r\n+            + retrievedObject.getTestDate().getTime()\r\n+            + \"[\" + new Date(testDate.getTime()) + \" != \"\r\n+            + new Date(retrievedObject.getTestDate().getTime()) + \"]\",\r\n+            (int) (testDate.getTime() / 1000),\r\n+            (int) (retrievedObject.getTestDate().getTime() / 1000));\r\n+        //assertEquals (\"Field type Object\", testObject,\r\n+        //retrievedObject.getTestObject ());\r\n+        assertEquals(\"Field type BigInteger\", testBigInteger,\r\n+            retrievedObject.getTestBigInteger());\r\n+\r\n+        try {\r\n+            assertEquals(\"Field type BigDecimal (BigInteger part)\",\r\n+                testBigDecimal.toBigInteger(),\r\n+                retrievedObject.getTestBigDecimal().toBigInteger());\r\n+\r\n+            assertEquals(\"Field type BigDecimal\",\r\n+                testBigDecimal,\r\n+                retrievedObject.getTestBigDecimal());\r\n+\r\n+            assertEquals(\"Field type float\", testfloat,\r\n+                retrievedObject.getTestfloat(), 0.01f);\r\n+            assertEquals(\"Field type double\", testdouble,\r\n+                retrievedObject.getTestdouble(), 0.01d);\r\n+        } catch (AssertionFailedError afe) {\r\n+            bug(3, afe,\r\n+                \"Doubles and Floats lose precision in some data stores\");\r\n+        }\r\n+\r\n+        rollbackTx(pm);\r\n+    }\r\n+}\r"},{"sha":"6c34c140e825264749d4d7f5807963d2677b106a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * TestFieldState.java\r\n+ *\r\n+ * Created on October 12, 2006, 10:22 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n+\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.meta.FieldMetaData;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestFieldState extends BaseKernelTest {\r\n+\r\n+    private Object oid;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestFieldState\r\n+     */\r\n+    public TestFieldState() {\r\n+    }\r\n+\r\n+    public TestFieldState(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        // create a test object\r\n+        RuntimeTest1 a = new RuntimeTest1(\"foo\", 3);\r\n+        pm.persist(a);\r\n+\r\n+        endTx(pm);\r\n+\r\n+        oid = pm.getObjectId(a);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNotDirtyAfterSameChange() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+\r\n+        RuntimeTest1 a = (RuntimeTest1) pm.find(RuntimeTest1.class, oid);\r\n+        a.setStringField(a.getStringField());\r\n+        OpenJPAStateManager sm = getStateManager(a, pm);\r\n+        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\r\n+        assertTrue(sm.getDirty().get(fmd.getIndex()) == false);\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"3cccc5af5777b2cf0f9a2e57bcea67faa1f62a72","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * TestGetObjectsById.java\r\n+ *\r\n+ * Created on October 12, 2006, 10:49 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestGetObjectsById extends BaseKernelTest {\r\n+\r\n+    private Object[] oids;\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestGetObjectsById\r\n+     */\r\n+    public TestGetObjectsById(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest5.class);\r\n+        deleteAll(RuntimeTest4.class);\r\n+\r\n+        RuntimeTest4 rt4 = new RuntimeTest4(\"foo\");\r\n+\r\n+        RuntimeTest5 related0 = new RuntimeTest5(\"bar\");\r\n+        related0.setRuntimeTest4(rt4);\r\n+        rt4.getRuntimeTest5s().add(related0);\r\n+\r\n+        RuntimeTest5 related1 = new RuntimeTest5(\"baz\");\r\n+        related1.setRuntimeTest4(rt4);\r\n+        rt4.getRuntimeTest5s().add(related1);\r\n+\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        startTx(pm);\r\n+        pm.persist(rt4);\r\n+        endTx(pm);\r\n+        oids = new Object[]\r\n+            {\r\n+                pm.getObjectId(rt4),\r\n+                pm.getObjectId(related0),\r\n+                pm.getObjectId(related1),\r\n+            };\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testGetObjectsByIdInvocation() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        try {\r\n+            Object[] pcs = pm.findAll(Object.class, oids);\r\n+            assertEquals(oids.length, pcs.length);\r\n+            for (int i = 0; i < oids.length; i++)\r\n+                assertEquals(oids[i], pm.getObjectId(pcs[i]));\r\n+        } catch (Exception e) {\r\n+            bug(1017, e, \"getObjectsById() bug\");\r\n+        } finally {\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"1dd391385afbfac69aac152ba805a33bb3a24105","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","status":"added","additions":448,"deletions":0,"changes":448,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,448 @@\n+/*\r\n+ * TestIncrementalFlushes.java\r\n+ *\r\n+ * Created on October 12, 2006, 11:24 AM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.kernel;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests;\r\n+import org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1;\r\n+\r\n+import org.apache.openjpa.event.AbstractTransactionListener;\r\n+import org.apache.openjpa.event.TransactionEvent;\r\n+import org.apache.openjpa.kernel.PCState;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+\r\n+public class TestIncrementalFlushes extends BaseKernelTest {\r\n+\r\n+    public TestIncrementalFlushes(String str) {\r\n+        super(str);\r\n+    }\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestIncrementalFlushes\r\n+     */\r\n+    public TestIncrementalFlushes() {\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(ModRuntimeTest1.class);\r\n+//        deleteAll(ModInstanceCallbackTests.class);\r\n+    }\r\n+\r\n+    public void testBasicJdoPreStore() {\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n+        pm.persist(a);\r\n+        pm.flush();\r\n+        assertTrue(a.preStoreCalled);\r\n+        endTx(pm);\r\n+    }\r\n+\r\n+    public void testNoFlush() {\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n+        pm.persist(a);\r\n+        endTx(pm);\r\n+        assertTrue(a.preStoreCalled);\r\n+    }\r\n+\r\n+    public void testFlushNoChange() {\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n+        pm.persist(a);\r\n+        pm.flush();\r\n+        endTx(pm);\r\n+        assertTrue(a.preStoreCalled);\r\n+        assertEquals(10, a.getIntField());\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper method for some common test cases. See utilizations of\r\n+     * this below.\r\n+     */\r\n+    private void basicHelper(boolean update, boolean multi, boolean dfg,\r\n+        boolean nonDFG) {\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+\r\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n+        pm.persist(a);\r\n+        if (update) {\r\n+            endTx(pm);\r\n+            Object oid = pm.getObjectId(a);\r\n+            endEm(pm);\r\n+            pm = getPM(true, false);\r\n+            startTx(pm);\r\n+            a = (ModInstanceCallbackTests) pm\r\n+                .find(ModInstanceCallbackTests.class, oid);\r\n+        } else {\r\n+            pm.flush();\r\n+        }\r\n+\r\n+        if (dfg)\r\n+            a.setIntField(11);\r\n+        if (nonDFG)\r\n+            a.setNonDFGField(11);\r\n+\r\n+        if (multi) {\r\n+            pm.flush();\r\n+\r\n+            if (dfg)\r\n+                a.setIntField(12);\r\n+            if (nonDFG)\r\n+                a.setNonDFGField(12);\r\n+        }\r\n+\r\n+        endTx(pm);\r\n+\r\n+        // if no changes were made and we're in update mode, then this\r\n+        // object won't have had jdoPreStore() called.\r\n+//        if (!(update && (!dfg && !nonDFG)))\r\n+//            assertTrue(\"a.prestoreCalled is false\", a.preStoreCalled);\r\n+\r\n+        if (multi) {\r\n+            if (dfg)\r\n+                assertEquals(\"a.getIntField is not 12\", 12, a.getIntField());\r\n+            if (nonDFG)\r\n+                assertEquals(\"a.getNonDFGField is not 12\", 12,\r\n+                    a.getNonDFGField());\r\n+        } else {\r\n+            if (dfg)\r\n+                assertEquals(\"a.getIntField is not 12\", 11, a.getIntField());\r\n+            if (nonDFG)\r\n+                assertEquals(\"a.getNonDFGField is not 12\", 11,\r\n+                    a.getNonDFGField());\r\n+        }\r\n+    }\r\n+\r\n+    public void testFlushStorePrimaryDFGChange() {\r\n+        basicHelper(false, false, true, false);\r\n+        basicHelper(false, true, true, false);\r\n+        basicHelper(true, false, true, false);\r\n+        basicHelper(true, true, true, false);\r\n+    }\r\n+\r\n+    public void testFlushStorePrimaryNonDFGChange() {\r\n+        basicHelper(false, false, false, true);\r\n+        basicHelper(false, true, false, true);\r\n+        basicHelper(true, false, false, true);\r\n+        basicHelper(true, true, false, true);\r\n+    }\r\n+\r\n+    public void testFlushStorePrimaryNonDFGAndDFGChange() {\r\n+        basicHelper(false, false, true, true);\r\n+        basicHelper(false, true, true, true);\r\n+        basicHelper(true, false, true, true);\r\n+        basicHelper(true, true, true, true);\r\n+    }\r\n+\r\n+    public void testFlushStorePrimaryNoChanges() {\r\n+        basicHelper(false, false, false, false);\r\n+        basicHelper(false, true, false, false);\r\n+        basicHelper(true, false, false, false);\r\n+        basicHelper(true, true, false, false);\r\n+    }\r\n+\r\n+    public void testJdoPreStoreWithModificationBeforeFlush() {\r\n+        tjpswmHelper(true);\r\n+    }\r\n+\r\n+    public void testJdoPreStoreWithModificationAfterFlush() {\r\n+        tjpswmHelper(false);\r\n+    }\r\n+\r\n+    private void tjpswmHelper(boolean before) {\r\n+        // set retainvalues to false so that we can ensure that the\r\n+        // data in the database is correct, and that we're not just\r\n+        // testing that the JVM data is correct.\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n+        pm.persist(a);\r\n+\r\n+        // by setting the name to 'bar', the jdoPreStore() invocation\r\n+        // will set the parent to a new object. This ensures that new\r\n+        // objects created in jdoPreStore() make their way into the DB\r\n+        // during commit.\r\n+        if (before) {\r\n+            a.setStringField(\"bar\");\r\n+            pm.flush();\r\n+        } else {\r\n+            pm.flush();\r\n+            a.setStringField(\"bar\");\r\n+        }\r\n+        endTx(pm);\r\n+        assertTrue(\"a.preStoreCalled is false\", a.preStoreCalled);\r\n+        assertNotNull(\"a.getOneOne is null\", a.getOneOne());\r\n+        assertTrue(\"getOneOne().getstrngfld.equals(jdoPrestore) is false\",\r\n+            a.getOneOne().getStringField().equals(\"jdoPreStore\"));\r\n+    }\r\n+\r\n+    public void testOneToOneBefore() {\r\n+        totoHelper(true, true, false);\r\n+        totoHelper(true, false, false);\r\n+        totoHelper(true, true, true);\r\n+        totoHelper(true, false, true);\r\n+    }\r\n+\r\n+    public void testOneToOneAfter() {\r\n+        totoHelper(false, true, false);\r\n+        totoHelper(false, false, false);\r\n+        totoHelper(false, true, true);\r\n+        totoHelper(false, false, true);\r\n+    }\r\n+\r\n+    private void totoHelper(boolean before, boolean persist,\r\n+        boolean multi) {\r\n+        // set retainvalues to false so that we can ensure that the\r\n+        // data in the database is correct, and that we're not just\r\n+        // testing that the JVM data is correct.\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n+        pm.persist(a);\r\n+\r\n+        ModRuntimeTest1 parent = new ModRuntimeTest1(\"baz\", 11);\r\n+        if (!before)\r\n+            pm.flush();\r\n+\r\n+        if (persist)\r\n+            pm.persist(parent);\r\n+\r\n+        a.setOneOne(parent);\r\n+\r\n+        if (before)\r\n+            pm.flush();\r\n+\r\n+        ModRuntimeTest1 oldParent = null;\r\n+        if (multi) {\r\n+            oldParent = parent;\r\n+            parent = new ModRuntimeTest1(\"newParent\", 12);\r\n+\r\n+            if (!before)\r\n+                pm.flush();\r\n+\r\n+            if (persist)\r\n+                pm.persist(parent);\r\n+\r\n+            a.setOneOne(parent);\r\n+\r\n+            if (before)\r\n+                pm.flush();\r\n+        }\r\n+\r\n+        endTx(pm);\r\n+        assertTrue(\"a.preStoreCalled is false\", a.preStoreCalled);\r\n+        assertNotNull(\"a.getOneOne is null\", a.getOneOne());\r\n+        if (!multi)\r\n+            assertTrue(\"a.getOneOne().getStringField().equals(baz) is false\",\r\n+                a.getOneOne().getStringField().equals(\"baz\"));\r\n+        else {\r\n+            assertTrue(\r\n+                \"a.getOneOne().getStringField().equals(newParent) is false\",\r\n+                a.getOneOne().getStringField().equals(\"newParent\"));\r\n+\r\n+            // if multi, then we really should delete the baz\r\n+            // parent. This isn't happening right now.\r\n+            // ### should be a bug\r\n+            //assertTrue (JDOHelper.isDeleted (oldParent));\r\n+        }\r\n+    }\r\n+\r\n+    private void assertState(Object o, PCState state, OpenJPAEntityManager pm) {\r\n+        assertEquals(state, getStateManager(o, pm).getPCState());\r\n+    }\r\n+\r\n+    private void commitAndTestDelete(OpenJPAEntityManager pm, Object o) {\r\n+        Object oid = pm.getObjectId(o);\r\n+        endTx(pm);\r\n+\r\n+        pm = getPM();\r\n+        try {\r\n+            pm.find(Object.class, oid);\r\n+            fail(\"should not be able to load deleted object\");\r\n+        } catch (Exception e) {\r\n+            // expected case\r\n+        }\r\n+    }\r\n+\r\n+    public void testDeleteNew() {\r\n+        OpenJPAEntityManager pm = getPM(true, false);\r\n+        startTx(pm);\r\n+        ModRuntimeTest1 a = new ModRuntimeTest1(\"foo\", 10);\r\n+        pm.persist(a);\r\n+        pm.remove(a);\r\n+        assertState(a, PCState.PNEWDELETED, pm);\r\n+    }\r\n+\r\n+    public void testOptimisticLockGivesCorrectError() {\r\n+        OpenJPAEntityManager pm1 = getPM(true, false);\r\n+        OpenJPAEntityManager pm2 = getPM(true, false);\r\n+\r\n+        ModRuntimeTest1 a1 = new ModRuntimeTest1(\"foo\", 10);\r\n+        startTx(pm1);\r\n+        pm1.persist(a1);\r\n+        endTx(pm1);\r\n+\r\n+        ModRuntimeTest1 a2 = (ModRuntimeTest1)\r\n+            pm2.find(ModRuntimeTest1.class, pm2.getObjectId(a1));\r\n+        startTx(pm2);\r\n+        a2.setStringField(\"foobar\");\r\n+        endTx(pm2);\r\n+\r\n+        startTx(pm1);\r\n+        a1.setStringField(\"foobarbaz\");\r\n+        try {\r\n+            endTx(pm1);\r\n+        } catch (Exception ole) {\r\n+            // expected case\r\n+        } finally {\r\n+            rollbackTx(pm1);\r\n+\r\n+            pm1.close();\r\n+            pm2.close();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Verify that flushes to the datastore are isolated from other\r\n+     * PersistenceManagers. This is mostly a test of the underlying\r\n+     * datastore's transactional isolation capabilities.\r\n+     * <p/>\r\n+     * Disabled: this hangs on Sybase.\r\n+     */\r\n+    public void XXXtestFlushesAreIsolated() {\r\n+        final String name = \"testFlushesAreIsolated\";\r\n+\r\n+        deleteAll(ModRuntimeTest1.class);\r\n+\r\n+        OpenJPAEntityManager flushPM = getPM(true, false);\r\n+        startTx(flushPM);\r\n+\r\n+        OpenJPAEntityManager readPM = getPM(true, false);\r\n+        startTx(readPM);\r\n+\r\n+        assertSize(0, flushPM.createNativeQuery(\"stringField == '\" + name + \"'\",\r\n+            ModRuntimeTest1.class));\r\n+        assertSize(0, readPM.createNativeQuery(\"stringField == '\" + name + \"'\",\r\n+            ModRuntimeTest1.class));\r\n+\r\n+        ModRuntimeTest1 a = new ModRuntimeTest1(name, randomInt().intValue());\r\n+\r\n+        flushPM.persist(a);\r\n+\r\n+        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n+            ModRuntimeTest1.class));\r\n+\r\n+        flushPM.flush();\r\n+\r\n+        // make sure the other pm doesn't see the flushed object\r\n+        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n+            ModRuntimeTest1.class));\r\n+\r\n+        flushPM.remove(a);\r\n+\r\n+        assertSize(0, flushPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n+            ModRuntimeTest1.class));\r\n+        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n+            ModRuntimeTest1.class));\r\n+\r\n+        endTx(flushPM);\r\n+        endEm(flushPM);\r\n+\r\n+        endTx(readPM);\r\n+        endEm(readPM);\r\n+    }\r\n+\r\n+    public void testEmptyFlush() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        TListener listener = new TListener();\r\n+        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\r\n+        startTx(pm);\r\n+        ModRuntimeTest1 pc = new ModRuntimeTest1();\r\n+        pm.persist(pc);\r\n+        pm.flush();\r\n+        assertEquals(1, listener.flushes);\r\n+        assertEquals(0, listener.commits);\r\n+\r\n+        pm.flush();\r\n+        assertEquals(1, listener.flushes);\r\n+        assertEquals(0, listener.commits);\r\n+\r\n+        pc.setIntField(3);\r\n+        pm.flush();\r\n+        assertEquals(2, listener.flushes);\r\n+        assertEquals(0, listener.commits);\r\n+\r\n+        endTx(pm);\r\n+        assertEquals(2, listener.flushes);\r\n+        assertEquals(1, listener.commits);\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testEmptyRollback() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        TListener listener = new TListener();\r\n+        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\r\n+        startTx(pm);\r\n+        pm.flush();\r\n+        rollbackTx(pm);\r\n+        assertEquals(0, listener.flushes);\r\n+        assertEquals(0, listener.commits);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testEmptyCommit() {\r\n+        OpenJPAEntityManager pm = getPM();\r\n+        TListener listener = new TListener();\r\n+        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\r\n+        startTx(pm);\r\n+        endTx(pm);\r\n+        assertEquals(0, listener.flushes);\r\n+        assertEquals(1, listener.commits);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    private static class TListener\r\n+        extends AbstractTransactionListener {\r\n+\r\n+        public int flushes = 0;\r\n+        public int commits = 0;\r\n+\r\n+        protected void eventOccurred(TransactionEvent event) {\r\n+            if (event.getType() == event.BEFORE_FLUSH)\r\n+                flushes++;\r\n+            else if (event.getType() == event.BEFORE_COMMIT)\r\n+                commits++;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"973f1c667d8fa66d92b14e64a3266ee37b880e9f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7bf2c0c0da64dd43e076dad3a4cf809a20b1fb11","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1c1bc63041eb5d94fd6df2680d857ae0c9e07175","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","status":"added","additions":181,"deletions":0,"changes":181,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fc8ec1bed9fe50bcc1846c5d4b52afc6879f9697","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","status":"added","additions":291,"deletions":0,"changes":291,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1081310cf8a41b73e1a3625c69497590ba7d79a5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ad3ac29075f4885a05697e19c1c87400d2b8c379","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fa8cf90b18cd26956e7f2d15e7452248b81b25ed","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7030bf5268e25c5246e734b1af425357d411fa0a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d2a725c657ef272055233f607e47eec7e34dd44a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","status":"added","additions":358,"deletions":0,"changes":358,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8f0016cd2bbc1f2d865b81b66f6b7a7a00d35a8c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"52757c30422daa7828e27aa960257ec63442a73d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","status":"added","additions":296,"deletions":0,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e24fa40819f6809ff6109b0ee6b907eceaadccf5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","status":"added","additions":431,"deletions":0,"changes":431,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"42838ef67fff61935d391720086cd410518e5ed9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","status":"added","additions":229,"deletions":0,"changes":229,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"217ed9909d4c89f41cb9affceb03e380964c8464","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","status":"added","additions":352,"deletions":0,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ab7dcc2f3f0bcdf045975a283463078b32e2cc71","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","status":"added","additions":274,"deletions":0,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a0d6cfd74c8965191280d91a8cb80f0171a11198","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9640b73b4cd675cca2b5536270f612c1bdf63fca","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","status":"added","additions":526,"deletions":0,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f1530abc0afa2deab4dd59d45a6c451b81bc1eb3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","status":"added","additions":224,"deletions":0,"changes":224,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"eed98c213f67bf5537b1a7b66218525502fbb8c8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0b11839a75522843e8196aa9c91210974b09ca6d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"34ec684e2412acc330e6f9ca393063c7b0ddde15","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","status":"added","additions":300,"deletions":0,"changes":300,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a75f7b7f95374c65c85b082221d69f7995103537","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bebd85980fe8fa724846310d54255ace8a73ff7c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e8d0bd6d42021d87520d4ce522569c945162f676","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","status":"added","additions":509,"deletions":0,"changes":509,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"96ede50ea7398bce241cd63157cac157238c3064","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","status":"added","additions":780,"deletions":0,"changes":780,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9ba15d052b908010f7cac09ac5bf8bfda608fd2f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","status":"added","additions":286,"deletions":0,"changes":286,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"de6d2c173d282bfe589c48906307d476be4a40c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"48b1baf86aeee0f1d2b6c2abc852b6702588e933","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"364ac2c5540a3c8cd857a34f8d2c579bbc63d9b7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","status":"added","additions":136,"deletions":0,"changes":136,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5ba87df4c68a5b152197114b9416f60a8ae51eac","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","status":"added","additions":315,"deletions":0,"changes":315,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ad72d7096c5e4714ed7b670e5c91e704908520f2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","status":"added","additions":285,"deletions":0,"changes":285,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"99891b33d2891a78b9ddf5ccb07b21e5ee7d5c89","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2759b883f238dead554a7ce0c34e9cabf41eb752","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"dadf444a91ab6683986f750ec509daf03add0101","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2ac792e6b7d5a0b60db873c65dec81d009c2306b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","status":"added","additions":994,"deletions":0,"changes":994,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f0a6b677cdc8443284c3baa7c4018290b6e47e9a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4db730cb429b13eef8cbcfab2f1d6731efaf5348","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8b6bc670c556d59e9e8877d2851a6272c254dd32","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c518695a893c7c8b045cbcff41627015c17796d8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","status":"added","additions":303,"deletions":0,"changes":303,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9dfa48c4b182c718d9ebdc7f24fcc019b2a9a227","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","status":"added","additions":269,"deletions":0,"changes":269,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8fa4b71c0cbb4c8743c2edf6ea0cfe2b7e130cbe","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cba4b84b1267744b9ffa1d147cd9d8f4b8ccff4a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3ea709582d4ef6fe85b771397a283f5271b0e860","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"06e1caa354fb6da13b59a55bc9ec4b7240e77180","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"306fb24afc81f4e9b44bde78d77415ca573ec90a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"03985a0ae6abd84da077004fdf8839265c0d880d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"52888111ea90db3eec889bb990adf68827e07fde","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ae72e74cc4e9a54e3ed175f8c5c079f918023834","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"785c5b2434075f585a000d8b45306d3bbffdd16a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5f7cc54fac34460721f53ed993be87e4259b5ace","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","status":"added","additions":277,"deletions":0,"changes":277,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9d9160c4ef7de03ca581f256f931c4b803fbeb06","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9eed34c0f9bdf2689287ef22d52af3e8f4681425","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e40231a8540677a7d4b63caed40f20a17a0fad40","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3f00d0b290d760c48f7236becfc0a81df9810d24","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d2df17774e283e193adb6697f018f0f59e2f087b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"89a13b05a9b927ddc118f49cfa46885be8502605","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d80e3cb72bd06c0e6db361aa666c9792fb658cd9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f8f3cbaaf0eeef1e0cf4397221b1cad517160b69","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3e39acd015a3346ab4bf78cba05652e6bb67517f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0e14d1d85d260c15c27da20d8ae1bebbee3be3c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"049fbbdccdcc2c2d1bb87b57a1d8061a4e233f8c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c60fe71fd85b97e090840bb07ec2ba386452bacd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"65d8ab79903eb596453e4a42a16e3045c099b18e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f6876eff3e0cc98f3ca1d070fde6102d59c837c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"aceda12ec8f7281d81a6db4beb401ba0daabf179","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3b07331aa5fcddc640b9644a4a713b06bf9641f7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1329034c50535c7b17b07478601b3e10871c0ab1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4de76f87d2f4b16f94b93b22c2ce25f44e99b203","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"921f36338f625bb6921a2409a5f5c5ace1411b71","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b3c5c589810c322644fe903c9236529d81adf17d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b78871db380149a5c8c3761668087f167aa7eee0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"09b6437441310a3a4a8f4024eb2e5c317cf48253","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"61521be35b75bdd1bb7a447ec427fbf17ed29255","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b2cf940cf6a90d1bdbe03811131da793d132d0b5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"76fdb8d9d9580bde24aeb8b621c4e41ff58ca44f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9e1636f390ef3e37091f4e48cdf30f0b5a66c899","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"32a05dc24e209f1c9358640c09dc51cbd107605f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7a2706dc8fad98acb41126a12a5a5a48ada4676d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e68eb4564360c59687d7db73637c015fb1ac41a4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e8dcaeca77167b086eb0c4c49d0fb0d2c982b3d5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9423e945cb05bffdec0d6648ec6f01bf4fa8d8e5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"76a6b094af3e6eb6db5ee467095b6857c83b4672","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b5d427fb17b9f4664c926069a009d44ccebbbb6c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"758deeb5a9ee0f35ac972af1c031d876fccc214e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"14247d40279385d0548ea589359bc40c880a640e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"560a64db4498d57928b63279ad639a2ff5efea04","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"88da6c720dc3ad3bcfd774510e00c09b17ef4357","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"adf8f7474a42904ba9d7234753903cd700fe9109","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f1b6a3020b8b3e9b4ebdf1cc4460803fea147fff","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"47dfb154e2d70cd5e6d15f54c53d23644c1206a7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3be85ef49636aa196c01285ed90f07774f9cee79","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9e83e4e8863748f92b5e3bf37a345c41bf798c5e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c1324dee33cbdee39568f770ca5cab14a3bfbdd2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c673ca87c2ff32593e2d13b187aed879f31a16d9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"731052b5f2ec1e2a696ef06bbebbc3582d393371","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"79ae0c8f55960637dfbe8242dce26fa578d20432","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"910f1820cd7ea78823d8b4945fc7c65c44164a3d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9e29bd703a395caebe0d13a5d9128fb68c2122c2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"07b1f81a5e1a8441a5beb426427312a2cf6db44e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"682c40b40e9fa2b40103589309de70082ddca9e5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9738e23c4101e1083ed9f3bf70db1b8b11ef67a0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e482cfa450532637a0ae9f50ac8f697c99e114b3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8549a8d59e7850d2fa21c2dc00087ba7f8aa0374","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"701c8bfc7f7c31231c8981027ade78aa6b732b79","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1f7c91027bf59d6edc8f823ef689ad8bc474ade7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e112338a4b5bfa3d51e97323a8807500eae07a59","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d7b1014eb8b59fbe1c07fab8b790b4a04ab4e6ca","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2a93b1f136376ea89c1dea973b5ffea067a91792","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ca4a3dd0d92b3956706a09a3ac4d90ccd923c9f3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e0286c852481ccdfe76d67c3a940c6248418e86c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8e8e9d2a11de099e44313fc29cfb82d776fb398c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"79bd50179a17f0c73b2e04ed81ffa3665d268f06","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9c48120d4e63b889c5b3c6b288dca50218b4059c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fc372068d9105d2b5cd56dd7b491845c3dd4eeb8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a114a3034c55c784a26d8e9ec84b1e9f66a37cd5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a61f7ddf084500113aba59a2bbe990b0892833fa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","status":"added","additions":178,"deletions":0,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"afacb7af114e565375339090e14d2e860decf0d7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b1258edaf1cf39d2d99c8d0c9d029890dd1fd401","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d21c0eb85bdbf4ac582c9222089a2372c845460b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c5d567562ab53f317859d8c99c7f7e7688629226","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cb17b720d0462bc9962461005bc1c678db079c65","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c77f1776143dfd4f07cd3faf3ac84328d8a58af9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","status":"added","additions":179,"deletions":0,"changes":179,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a30900e6e48439740c6af03c8f9ac2d6a8223709","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7b0f22873da4a2a1a7f332a8dcad8a57f0fd86b8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"12519351f061c739767b2627b6809551e09ea5be","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"953c80d03c78209ce6c6e9f7c7f0bbe824bae1e5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b3d1dae0a4ac4e13fc1d5ece437b50f41daac4f7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8ebb73fa66a893056fb83a6ca3d220a5b47f75b9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0c9e9e281f21808678e5339587784e85f822b6d8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","status":"added","additions":291,"deletions":0,"changes":291,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4c18b9bf7ae4968535528a41efc12389f2022de4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"84e09f583e5451abe62fd77145b00698c3c87380","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1e5368101776da53fbbc3975270cf13aa89b20f9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"789f854404860c802520a6a409fb903de7d77280","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"17f9f78856303477f2efc2cd12ec0f45620ee6dc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"834d44f28326a171e636800162264c8e4fb442e8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"88399278cb047af6d20a79ed0e3262e956c918aa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"753de7eff62a63c6703a7b3874fa750a8bb03e11","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"43a6df6c63509387db998ad74903e34385831043","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7006162d6c8fa1f168dd926fb08581c812b16e7b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"50b3d4e565fac69652d4554ddea5f6e85e74adc0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e3aed6b4bf6e301bfdd94ff49cf0d2e783c45d79","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f49abadacb0cc47fe6b8e0eb52bd5e393b897a14","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b3598df62857116ae80a79e4beddc0d263e9a148","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8d67c0fe86e29ad642e273992740afece74e6075","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2248964a27ea9184b7403c3d1de6591ff0561466","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"684e6b02eec8829c1fbcefcdb2ba5f96e03218d0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4103128d1c1207745b6c65e25d0ed0d4e1f664ff","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7da20f45db341d8629a0f910e7d22045d316939a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d13080b7c89eb548cfc292522ebcfcd5ee188883","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4f530114afcf987a64ebbdd85ad45565b958869b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4e5b244be8ade416b407118b6f843ae5328d7f88","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3bb12838153b59db81b091c890c1fb2d206e5c5e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d235c7a6d327967e50978025a0ebfaccdf3026b6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"183b672788fdc7811df6067cb04a0d2e1bd8ae34","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2a4af537f7584ef879900143d1e00036bcfe2d96","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5c0db50c9f1f861a5df12e18528c8bcdad7a02d4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","status":"added","additions":463,"deletions":0,"changes":463,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"da567bb1f5d15e148278d87ccf3357e2e458754e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"830091259e2f3542b38f254b7a1c4703792077d1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","status":"added","additions":309,"deletions":0,"changes":309,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c6db1d288a05f05a591e64274d3a85fefb8237b0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1c1c6f4fcf5802ea8a2a48e02dfde5f61f10fd23","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f9360143dbc8994044f15415e131eb3da8f08c2d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"737d1e795848d6ae7810879ee5b2e3a52f6f3139","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","status":"added","additions":283,"deletions":0,"changes":283,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5a5ad547ccda6bed0e9be50674f35b48464df7dc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7834539336241f886ec69446c450deee7a8b348c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0e4bd761b1817a7b86d21532c83e1eb4506e08c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","status":"added","additions":404,"deletions":0,"changes":404,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4fc2d7c662acf77e1a0c2589bb63a20bde025bf6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2c2920d835d413432d50d04d150eb012fb5f47c9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d91d58c8ff3fae6d7eeb0a7b7bea17d2b0c41a55","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f08fed3b0cf7a79574e14894c4ef6d268d2d5c75","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6f6e0247dac7fd9ee61360245b7ce7a93b319a5c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"356e392732528d08d7241f84d9ea0f29e12e0998","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a01c4bc92ca16517ee20ee4385177863b2f2a72a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"dd3f58e6a1cfa501c65fb161da0a0e008333f5cf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f8506d7440a99cc38b36af45a76bafb3ac6284f2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5f4c05cb3091b4b063e9d42fff48672f9a87deba","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"44b7c49a92937849b2140cff1f247b0e7b3c530b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a64237b6c39f1231e1e061d7e2602bda5fab83d2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b416bb52f02a965e9536c444938003e0958faabd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b3786cbd84e168cc88dd6a48a69a3a1f381844b1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"205b9a06b9f3c63d5178293697b352ca4875b21e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"}]}

