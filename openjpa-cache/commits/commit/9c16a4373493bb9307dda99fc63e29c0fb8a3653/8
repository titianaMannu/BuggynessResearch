{"sha":"9c16a4373493bb9307dda99fc63e29c0fb8a3653","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMTZhNDM3MzQ5M2JiOTMwN2RkYTk5ZmM2M2UyOWMwZmI4YTM2NTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"message":"Creating 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f50e9a665eb242e4b05e0364c41f777a18914e9f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f50e9a665eb242e4b05e0364c41f777a18914e9f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","html_url":"https://github.com/apache/openjpa/commit/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f153a4ea37a2ea16247fd773756fa5da27f075ff","url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","html_url":"https://github.com/apache/openjpa/commit/f153a4ea37a2ea16247fd773756fa5da27f075ff"}],"stats":{"total":447552,"additions":447552,"deletions":0},"files":[{"sha":"4a87cd801283ba719e7a1078cc758f6fa591e2e7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class RuntimeTest2\r\n+    extends RuntimeTest1 {\r\n+\r\n+    private int intField2;\r\n+\r\n+    public RuntimeTest2() {\r\n+    }\r\n+\r\n+    public RuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+}\r"},{"sha":"8b24fcbc8ba3965ca37161dede4ac57bf0550995","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class RuntimeTest3\r\n+    extends RuntimeTest2 {\r\n+\r\n+    private int intField3;\r\n+\r\n+    public RuntimeTest3() {\r\n+    }\r\n+\r\n+    public RuntimeTest3(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField3() {\r\n+        return this.intField3;\r\n+    }\r\n+\r\n+    public void setIntField3(int intField3) {\r\n+        this.intField3 = intField3;\r\n+    }\r\n+}\r"},{"sha":"ae57fabb0c963bcde709bc871ce74970b698f7ae","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,70 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class SequenceAssigned {\r\n+\r\n+    private long pk;\r\n+    private SequenceAssigned other;\r\n+\r\n+    public void setPK(long l) {\r\n+        pk = l;\r\n+    }\r\n+\r\n+    public long getPK() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setOther(SequenceAssigned other) {\r\n+        this.other = other;\r\n+    }\r\n+\r\n+    public SequenceAssigned getOther() {\r\n+        return other;\r\n+    }\r\n+\r\n+    public static class Id implements java.io.Serializable {\r\n+\r\n+        public long pk;\r\n+\r\n+        public Id() {\r\n+        }\r\n+\r\n+        public Id(String str) {\r\n+            pk = Long.parseLong(str);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (int) (pk % (long) Integer.MAX_VALUE);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \"\";\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == null || !(o instanceof Id))\r\n+                return false;\r\n+            return pk == ((Id) o).pk;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"603ebe355722b868ff0539180d51da4457cdd818","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,27 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class SequenceAssigned2 extends SequenceAssigned {\r\n+\r\n+    private int foo;\r\n+}\r"},{"sha":"bc0073195a643208d34a060fe837835a8b7874e5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class SequenceAssigned3 {\r\n+\r\n+    private Long pk;\r\n+\r\n+    public void setPK(Long l) {\r\n+        pk = l;\r\n+    }\r\n+\r\n+    public Long getPK() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public static class Id implements java.io.Serializable {\r\n+\r\n+        public Long pk;\r\n+\r\n+        public Id() {\r\n+        }\r\n+\r\n+        public Id(String str) {\r\n+            pk = Long.valueOf(str);\r\n+        }\r\n+\r\n+        public int hashCode() {\r\n+            return (int) (pk == null ? 0 : pk.longValue()\r\n+                % (long) Integer.MAX_VALUE);\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk + \"\";\r\n+        }\r\n+\r\n+        public boolean equals(Object o) {\r\n+            if (o == null || !(o instanceof Id))\r\n+                return false;\r\n+            return pk == ((Id) o).pk;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"de75a337b8dff48fe6000776610a802bd629d440","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+public class TransactionalClassPC {\r\n+\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"70940708fd40b54c8744a98b83ad1ae2aaadea3a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,89 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.meta.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ValueStrategyPC {\r\n+\r\n+    private String uuid;\r\n+    private String uuidHex;\r\n+    private String name;\r\n+    private int ignoreUpdate;\r\n+    private int restrictUpdate;\r\n+    private int version;\r\n+    private int sequence;\r\n+\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getIgnoreUpdate() {\r\n+        return this.ignoreUpdate;\r\n+    }\r\n+\r\n+    public void setIgnoreUpdate(int ignoreUpdate) {\r\n+        this.ignoreUpdate = ignoreUpdate;\r\n+    }\r\n+\r\n+    public int getRestrictUpdate() {\r\n+        return this.restrictUpdate;\r\n+    }\r\n+\r\n+    public void setRestrictUpdate(int restrictUpdate) {\r\n+        this.restrictUpdate = restrictUpdate;\r\n+    }\r\n+\r\n+    public String getUUID() {\r\n+        return this.uuid;\r\n+    }\r\n+\r\n+    public void setUUID(String uuid) {\r\n+        this.uuid = uuid;\r\n+    }\r\n+\r\n+    public String getUUIDHex() {\r\n+        return this.uuidHex;\r\n+    }\r\n+\r\n+    public void setUUIDHex(String uuidHex) {\r\n+        this.uuidHex = uuidHex;\r\n+    }\r\n+\r\n+    public int getVersion() {\r\n+        return this.version;\r\n+    }\r\n+\r\n+    public void setVersion(int version) {\r\n+        this.version = version;\r\n+    }\r\n+\r\n+    public int getSequence() {\r\n+        return this.sequence;\r\n+    }\r\n+\r\n+    public void setSequence(int sequence) {\r\n+        this.sequence = sequence;\r\n+    }\r\n+}\r"},{"sha":"04bc94f8d280ef8341b6de8d7f15f0fda7fa549e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","status":"added","additions":262,"deletions":0,"changes":262,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/CompanyModelTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,262 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+import java.beans.*;\n+import java.io.*;\n+import java.util.*;\n+import javax.persistence.*;\n+import junit.framework.*;\n+import org.apache.openjpa.persistence.test.*;\n+\n+/** \n+ * Generic test case that will be extended by a concrete company\n+ * featureSelection subclass.\n+ *  \n+ * @author  Marc Prud'hommeaux\n+ */\n+public abstract class CompanyModelTest \n+    extends SingleEMTestCase {\n+\n+    private static Map<Class,Class> factoryClasses;\n+    private Map<Class,Class> impls;\n+\n+    public void setUp() {\n+        // make a map of the implementations based on the class names in\n+        // the current package of the test subclass\n+        impls = new HashMap<Class,Class>();\n+        impls.put(IAddress.class, localClass(\"Address\"));\n+        impls.put(ICompany.class, localClass(\"Company\"));\n+        impls.put(ICustomer.class, localClass(\"Customer\"));\n+        impls.put(IPerson.class, localClass(\"Person\"));\n+        impls.put(IEmployee.class, localClass(\"Employee\"));\n+        impls.put(IFullTimeEmployee.class, localClass(\"FullTimeEmployee\"));\n+        impls.put(ILineItem.class, localClass(\"LineItem\"));\n+        impls.put(IProductOrder.class, localClass(\"ProductOrder\"));\n+        impls.put(IPartTimeEmployee.class, localClass(\"PartTimeEmployee\"));\n+        impls.put(IProduct.class, localClass(\"Product\"));\n+\n+        setUp(impls.values().toArray(new Class[impls.size()]));\n+        checkModel();\n+    }\n+\n+    private Class localClass(String name) {\n+        String pkg = getClass().getPackage().getName();\n+        try {\n+            return Class.forName(pkg + \".\" + name);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    /** \n+     * Runs through basic queries against all of the properties of all\n+     * of the known persistent classes. We're just checking here to\n+     * make sure the queries can be executed without problem. Queries\n+     * should always return all known instances in the database.\n+     */\n+    public void testBasicQueries() throws Exception {\n+        for (Class c : impls.values()) {\n+            for (PropertyDescriptor pd :\n+                Introspector.getBeanInfo(c).getPropertyDescriptors()) {\n+\n+                if (pd.getWriteMethod() == null) // ignore read-only\n+                    continue;\n+\n+                Set<String> queries = new TreeSet<String>();\n+                getBasicQueries(queries, pd, \"x.\");\n+\n+                StringBuilder str = new StringBuilder();\n+\n+                // execute the individual queries\n+                for (String query : queries) {\n+                    find(c, \"where \" + query);\n+                    str.append(str.length() > 0 ? \" or \" : \"\").append(query);\n+                }\n+\n+                // now execute all the queries combined\n+                find(c, \"where \" + str);\n+            }\n+        }\n+    }\n+\n+    void getBasicQueries(Set<String> queries, PropertyDescriptor pd,\n+        String prefix) throws Exception {\n+\n+        // max level of field traversal: 3\n+        // ### if (prefix.split(\"\\\\.\").length > 3)\n+        if (prefix.split(\"\\\\.\").length > 2)\n+            return;\n+\n+        Class type = pd.getPropertyType();\n+\n+        String name = prefix + pd.getName();\n+\n+        if (!queries.add(name + \" is not null\"))\n+            return;\n+\n+        queries.add(name + \" is null\");\n+\n+        if (type.isAssignableFrom(Number.class) || type == int.class ||\n+            type == double.class || type == float.class ||\n+            type == long.class || type == short.class) {\n+            queries.add(name + \" = 0\");\n+            queries.add(name + \" <> 0\");\n+            queries.add(name + \" > 0\");\n+            queries.add(name + \" < 0\");\n+            queries.add(name + \" >= 0\");\n+            queries.add(name + \" <= 0\");\n+            queries.add(\"sqrt(\" + name + \") <> 0\");\n+            queries.add(\"abs(\" + name + \") <> 0\");\n+            // queries.add(\"mod(\" + name + \", 5) <> 0\");\n+        }\n+\n+        if (type.isAssignableFrom(Collection.class)) {\n+            queries.add(name + \" IS EMPTY\");\n+            queries.add(name + \" IS NOT EMPTY\");\n+            queries.add(\"size(\" + name + \") <> 0\");\n+        }\n+\n+        if (type.isAssignableFrom(String.class)) {\n+            queries.add(\"lower(\" + name + \") = 'x'\");\n+            queries.add(\"upper(\" + name + \") = 'x'\");\n+            queries.add(\"concat(\" + name + \", \" + name + \") = 'x'\");\n+            queries.add(\"substring(\" + name + \", 1, 2) = 'x'\");\n+            queries.add(\"length(\" + name + \") > 0\");\n+            queries.add(\"locate(\" + name + \", 'x', 1) > 0\");\n+            queries.add(\"trim(leading ' ' from \" + name + \") = 'x'\");\n+        }\n+\n+        if (type.isAssignableFrom(Date.class)) {\n+            queries.add(name + \" <> CURRENT_TIMESTAMP\");\n+        }\n+\n+        // relation is an entity ... add all the relations\n+        if (impls.containsKey(type) || impls.containsValue(type)) {\n+            for (PropertyDescriptor desc :\n+                Introspector.getBeanInfo(type).getPropertyDescriptors()) {\n+\n+                if (desc.getWriteMethod() == null) // ignore read-only\n+                    continue;\n+\n+                // prevent recursion\n+                if (name.endsWith(\".\" + desc.getName() + \".\"))\n+                    continue;\n+\n+                getBasicQueries(queries, desc, name + \".\");\n+            }\n+        }\n+    }\n+\n+    void checkModel() {\n+        try {\n+            verifyModel();\n+        } catch (AssertionFailedError e) {\n+            // clear all existing instances\n+            clear(emf, impls.values().toArray(new Class[impls.size()]));\n+\n+            // since the factory method needs to be static, we need to store\n+            // the classes statically\n+            factoryClasses = impls;\n+            try {\n+                final List<Exception> exceptions = new LinkedList<Exception>();\n+                XMLDecoder decoder = new XMLDecoder(CompanyModelTest.class.\n+                    getResourceAsStream(\"companies.xml\"));\n+                decoder.setExceptionListener(new ExceptionListener() {\n+                    public void exceptionThrown(Exception e) {\n+                        exceptions.add(e);\n+                    }\n+                });\n+                Collection obs = (Collection) decoder.readObject();\n+\n+                if (exceptions.size() > 0) {\n+                    throw new IllegalStateException(exceptions.get(0));\n+                }\n+\n+                assertNotNull(obs);\n+\n+                persist(obs.toArray());\n+            } finally {\n+                factoryClasses = null;\n+            }\n+        }\n+\n+        verifyModel();\n+    }\n+\n+    int queryCount(Class c, String query, Object... params) {\n+        return find(c, query, params).size();\n+    }\n+\n+    int queryCount(Class c) {\n+        return find(c, null).size();\n+    }\n+\n+    Class impl(Class c) {\n+        return impls.get(c);\n+    }\n+\n+    void verifyModel() {\n+        assertEquals(2, queryCount(impl(ICompany.class)));\n+        assertEquals(11, queryCount(impl(IAddress.class)));\n+        assertEquals(3, queryCount(impl(IProduct.class)));\n+        assertEquals(2, queryCount(impl(IProductOrder.class)));\n+        assertEquals(3, queryCount(impl(ILineItem.class)));\n+        assertEquals(1, queryCount(impl(IPartTimeEmployee.class)));\n+        assertEquals(3, queryCount(impl(IFullTimeEmployee.class)));\n+        assertEquals(4, queryCount(impl(ICustomer.class)));\n+\n+        assertEquals(3, queryCount(impl(IAddress.class),\n+            \"where x.state = 'CA'\"));\n+\n+        assertEquals(1, queryCount(impl(ICompany.class),\n+            \"where size(x.employees) = 4\"));\n+        assertEquals(1, queryCount(impl(ICompany.class),\n+            \"where size(x.employees) = 0\"));\n+\n+        assertEquals(2, queryCount(impl(ICustomer.class),\n+            \"where size(x.orders) = 1\"));\n+\n+        assertEquals(1, queryCount(impl(IProductOrder.class),\n+            \"where x.shippedDate is null\"));\n+        assertEquals(1, queryCount(impl(IProductOrder.class),\n+            \"where x.shippedDate is not null\"));\n+\n+        assertEquals(1, queryCount(impl(IEmployee.class),\n+            \"where x.manager is null\"));\n+        assertEquals(2, queryCount(impl(IEmployee.class),\n+            \"where x.manager.manager is null\"));\n+        assertEquals(1, queryCount(impl(IEmployee.class),\n+            \"where x.manager.manager.manager is null\"));\n+\n+        assertEquals(2, queryCount(impl(IPerson.class),\n+            \"where x.firstName like ?1 and x.lastName like ?1\", \"M%\"));\n+        assertEquals(1, queryCount(impl(IPerson.class),\n+            \"where x.homeAddress.state = 'CA'\"));\n+    }\n+\n+    /** \n+     * Factory method that is called from the serialized XML. \n+     */\n+    public static Object create(Class intf)\n+        throws InstantiationException, IllegalAccessException {\n+        return factoryClasses.get(intf).newInstance();\n+    }\n+}\n+"},{"sha":"eea824c596613988bb011ea9599c2e7ee306ef78","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IAddress.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IAddress.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+public interface IAddress {\n+\n+    public void setStreetAddress(String streetAddress);\n+    public String getStreetAddress();\n+\n+    public void setCity(String city);\n+    public String getCity();\n+\n+    public void setState(String state);\n+    public String getState();\n+\n+    public void setPostalCode(String postalCode);\n+    public String getPostalCode();\n+\n+    public void setPhoneNumber(String phoneNumber);\n+    public String getPhoneNumber();\n+}"},{"sha":"4277baed85fb2ced64432a04f1a9a1f946c8f72b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICompany.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICompany.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICompany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICompany.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+import java.util.*;\n+\n+public interface ICompany {\n+\n+    public void setName(String name);\n+    public String getName();\n+\n+    public void setAddress(IAddress address);\n+    public IAddress getAddress();\n+\n+    public void setEmployees(Set<? extends IEmployee> employees);\n+    public Set<? extends IEmployee> getEmployees();\n+\n+    public void setProducts(Set<? extends IProduct> products);\n+    public Set<? extends IProduct> getProducts();\n+}"},{"sha":"84b5832e2d408d03441195f99edf466d458a07d2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICustomer.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICustomer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICustomer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ICustomer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+import java.util.*;\n+\n+public interface ICustomer extends IPerson {\n+\n+    public void setOrders(Collection<? extends IProductOrder> orders);\n+    public Collection<? extends IProductOrder> getOrders();\n+\n+    public void setShippingAddress(IAddress shippingAddress);\n+    public IAddress getShippingAddress();\n+\n+    public void setBillingAddress(IAddress billingAddress);\n+    public IAddress getBillingAddress();\n+}"},{"sha":"dded1f2a5f352d6866a482773ee88d18b86156f6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IEmployee.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+import java.util.*;\n+\n+public interface IEmployee extends IPerson {\n+\n+    public void setManager(IFullTimeEmployee manager);\n+    public IFullTimeEmployee getManager();\n+\n+    public void setCompany(ICompany company);\n+    public ICompany getCompany();\n+\n+    public void setTitle(String title);\n+    public String getTitle();\n+\n+    public void setHireDate(Date hireDate);\n+    public Date getHireDate();\n+}"},{"sha":"4d894b59687af06835a899f790c57ed7383769c0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IFullTimeEmployee.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IFullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IFullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IFullTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+public interface IFullTimeEmployee extends IEmployee {\n+\n+    public void setSalary(float salary);\n+    public float getSalary();\n+}"},{"sha":"820fde98158242e92240284e0b2749312089c71d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ILineItem.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ILineItem.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ILineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/ILineItem.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+public interface ILineItem {\n+\n+    public void setQuantity(int quantity);\n+    public int getQuantity();\n+\n+    public void setProduct(IProduct product);\n+    public IProduct getProduct();\n+}"},{"sha":"73d6525f789cd0ef2a4c6367631d04c8237455d8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPartTimeEmployee.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPartTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+public interface IPartTimeEmployee extends IEmployee {\n+\n+    public void setWage(float wage);\n+    public float getWage();\n+\n+    public void setWeeklyHours(int weeklyHours);\n+    public int getWeeklyHours();\n+}"},{"sha":"e5ec6c2faeaf4157c8508e9aa0b36cd220a52784","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPerson.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPerson.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IPerson.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+public interface IPerson {\n+\n+    public void setFirstName(String firstName);\n+    public String getFirstName();\n+\n+    public void setLastName(String lastName);\n+    public String getLastName();\n+\n+    public void setHomeAddress(IAddress homeAddress);\n+    public IAddress getHomeAddress();\n+}"},{"sha":"85b16fbbcd9b8de7fcd77fdfe08711836a7013b8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProduct.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProduct.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProduct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProduct.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+import java.util.*;\n+\n+public interface IProduct {\n+\n+    public void setName(String name);\n+    public String getName();\n+\n+    public void setImage(byte[] image);\n+    public byte[] getImage();\n+\n+    public void setPrice(float price);\n+    public float getPrice();\n+\n+    public void setDistributors(Set<? extends ICompany> distributors);\n+    public Set<? extends ICompany> getDistributors();\n+}"},{"sha":"dcb44ca826a7d0ad4c77148e8c8fbd8528e2b027","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProductOrder.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProductOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProductOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/IProductOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company;\n+\n+import java.util.*;\n+\n+public interface IProductOrder {\n+\n+    public void setItems(List<? extends ILineItem> items);\n+    public List<? extends ILineItem> getItems();\n+\n+    public void setOrderDate(Date orderDate);\n+    public Date getOrderDate();\n+\n+    public void setShippedDate(Date shippedDate);\n+    public Date getShippedDate();\n+\n+    public void setCustomer(ICustomer customer);\n+    public ICustomer getCustomer();\n+}"},{"sha":"9b93c84b8566c06b633ee35a2c5d867beb11fda7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Address.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Address.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Address.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_Address\")\n+public class Address implements IAddress {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String streetAddress;\n+\n+    @Basic\n+    private String city;\n+\n+    @Basic\n+    private String state;\n+\n+    @Basic\n+    private String postalCode;\n+\n+    @Basic\n+    private String phoneNumber;\n+\n+    public void setStreetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+    }\n+\n+    public String getStreetAddress() {\n+        return this.streetAddress;\n+    }\n+\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getCity() {\n+        return this.city;\n+    }\n+\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getState() {\n+        return this.state;\n+    }\n+\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getPostalCode() {\n+        return this.postalCode;\n+    }\n+\n+\n+    public void setPhoneNumber(String phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public String getPhoneNumber() {\n+        return this.phoneNumber;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+}"},{"sha":"922afb4861d46a7c69120ba1499839257f062e47","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Company.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Company.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Company.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_Company\")\n+public class Company implements ICompany {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String name;\n+\n+    @OneToOne\n+    private Address address;\n+\n+    @OneToMany(mappedBy=\"company\")\n+    private Set<Employee> employees = new HashSet<Employee>();\n+\n+    @ManyToMany(mappedBy=\"distributors\")\n+    private Set<Product> products = new HashSet<Product>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setAddress(IAddress address) {\n+        this.address = (Address) address;\n+    }\n+\n+    public IAddress getAddress() {\n+        return this.address;\n+    }\n+\n+\n+    public void setEmployees(Set<? extends IEmployee> employees) {\n+        this.employees = (Set<Employee>) employees;\n+    }\n+\n+    public Set<Employee> getEmployees() {\n+        return this.employees;\n+    }\n+\n+\n+    public void setProducts(Set<? extends IProduct> products) {\n+        this.products = (Set<Product>) products;\n+    }\n+\n+    public Set<Product> getProducts() {\n+        return this.products;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"831f33d7a7ce792808e897ba448c3a56b0162ad8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Customer.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Customer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_Customer\")\n+public class Customer extends Person implements ICustomer {\n+    @OneToMany(mappedBy=\"customer\")\n+    private Collection<ProductOrder> orders = new ArrayList<ProductOrder>();\n+\n+    @OneToOne\n+    private Address shippingAddress;\n+\n+    @OneToOne\n+    private Address billingAddress;\n+\n+    public void setOrders(Collection<? extends IProductOrder> orders) {\n+        this.orders = (Collection<ProductOrder>) orders;\n+    }\n+\n+    public Collection<ProductOrder> getOrders() {\n+        return this.orders;\n+    }\n+\n+\n+    public void setShippingAddress(IAddress shippingAddress) {\n+        this.shippingAddress = (Address) shippingAddress;\n+    }\n+\n+    public IAddress getShippingAddress() {\n+        return this.shippingAddress;\n+    }\n+\n+\n+    public void setBillingAddress(IAddress billingAddress) {\n+        this.billingAddress = (Address) billingAddress;\n+    }\n+\n+    public IAddress getBillingAddress() {\n+        return this.billingAddress;\n+    }\n+}"},{"sha":"ca1f570856b1041c8a6befb4ddce1bf769062087","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Employee.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Employee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_Employee\")\n+public abstract class Employee extends Person implements IEmployee {\n+    @OneToOne\n+    private FullTimeEmployee manager;\n+\n+    @OneToOne\n+    private Company company;\n+\n+    @Basic\n+    private String title;\n+\n+    @Basic\n+    private Date hireDate;\n+\n+    public void setManager(IFullTimeEmployee manager) {\n+        this.manager = (FullTimeEmployee) manager;\n+    }\n+\n+    public IFullTimeEmployee getManager() {\n+        return this.manager;\n+    }\n+\n+\n+    public void setCompany(ICompany company) {\n+        this.company = (Company) company;\n+    }\n+\n+    public ICompany getCompany() {\n+        return this.company;\n+    }\n+\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getTitle() {\n+        return this.title;\n+    }\n+\n+\n+    public void setHireDate(Date hireDate) {\n+        this.hireDate = hireDate;\n+    }\n+\n+    public Date getHireDate() {\n+        return this.hireDate;\n+    }\n+}"},{"sha":"7e4a1b7787b792b569c6af9e8dd20a6279449c27","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/FullTimeEmployee.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/FullTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_FullTimeEmployee\")\n+public class FullTimeEmployee extends Employee\n+    implements IFullTimeEmployee {\n+    @Basic\n+    private float salary;\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    public float getSalary() {\n+        return this.salary;\n+    }\n+}"},{"sha":"de1c59428b655d59a1c6832b7370262948efbbf8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/LineItem.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/LineItem.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_LineItem\")\n+public class LineItem implements ILineItem {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private int quantity;\n+\n+    @OneToOne\n+    private Product product;\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public int getQuantity() {\n+        return this.quantity;\n+    }\n+\n+\n+    public void setProduct(IProduct product) {\n+        this.product = (Product) product;\n+    }\n+\n+    public IProduct getProduct() {\n+        return this.product;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"b7f7f26692e96219cd4be978bc35a0ec9cf0b4c9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/PartTimeEmployee.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/PartTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_PartTimeEmployee\")\n+public class PartTimeEmployee extends Employee\n+    implements IPartTimeEmployee {\n+    @Basic\n+    private float wage;\n+\n+    @Basic\n+    private int weeklyHours;\n+\n+    public void setWage(float wage) {\n+        this.wage = wage;\n+    }\n+\n+    public float getWage() {\n+        return this.wage;\n+    }\n+\n+\n+    public void setWeeklyHours(int weeklyHours) {\n+        this.weeklyHours = weeklyHours;\n+    }\n+\n+    public int getWeeklyHours() {\n+        return this.weeklyHours;\n+    }\n+}"},{"sha":"e912103c2552019f25dd84904f39a07c83e74f79","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Person.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Person.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_Person\")\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public abstract class Person implements IPerson {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String firstName;\n+\n+    @Basic\n+    private String lastName;\n+\n+    @OneToOne\n+    private Address homeAddress;\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getFirstName() {\n+        return this.firstName;\n+    }\n+\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getLastName() {\n+        return this.lastName;\n+    }\n+\n+\n+    public void setHomeAddress(IAddress homeAddress) {\n+        this.homeAddress = (Address) homeAddress;\n+    }\n+\n+    public IAddress getHomeAddress() {\n+        return this.homeAddress;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"a88535cfb6b63cba7694ca950e3eb54e4953301f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Product.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Product.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Product.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/Product.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_Product\")\n+public class Product implements IProduct {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String name;\n+\n+    @Basic\n+    private byte[] image;\n+\n+    @Basic\n+    private float price;\n+\n+    @ManyToMany\n+    private Set<Company> distributors = new HashSet<Company>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setImage(byte[] image) {\n+        this.image = image;\n+    }\n+\n+    public byte[] getImage() {\n+        return this.image;\n+    }\n+\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public float getPrice() {\n+        return this.price;\n+    }\n+\n+\n+    public void setDistributors(Set<? extends ICompany> distributors) {\n+        this.distributors = (Set<Company>) distributors;\n+    }\n+\n+    public Set<Company> getDistributors() {\n+        return this.distributors;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"4055f1a34603f2568fe3ef6bfba0dc8927ecad94","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/ProductOrder.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/ProductOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/ProductOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/ProductOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"BAS_ProductOrder\")\n+public class ProductOrder implements IProductOrder {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @OneToMany\n+    private List<LineItem> items = new LinkedList<LineItem>();\n+\n+    @Basic\n+    private Date orderDate;\n+\n+    @Basic\n+    private Date shippedDate;\n+\n+    @OneToOne\n+    private Customer customer;\n+\n+    public void setItems(List<? extends ILineItem> items) {\n+        this.items = (List<LineItem>) items;\n+    }\n+\n+    public List<LineItem> getItems() {\n+        return this.items;\n+    }\n+\n+\n+    public void setOrderDate(Date orderDate) {\n+        this.orderDate = orderDate;\n+    }\n+\n+    public Date getOrderDate() {\n+        return this.orderDate;\n+    }\n+\n+\n+    public void setShippedDate(Date shippedDate) {\n+        this.shippedDate = shippedDate;\n+    }\n+\n+    public Date getShippedDate() {\n+        return this.shippedDate;\n+    }\n+\n+\n+    public void setCustomer(ICustomer customer) {\n+        this.customer = (Customer) customer;\n+    }\n+\n+    public ICustomer getCustomer() {\n+        return this.customer;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"0580d6e150ddd37992e28a448ea9b252038b209b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/TestBasicCompanyModel.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/TestBasicCompanyModel.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/TestBasicCompanyModel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/basic/TestBasicCompanyModel.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.basic;\n+\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+public class TestBasicCompanyModel extends CompanyModelTest {\n+}\n+"},{"sha":"d9360c91f03d6898f4ed44847ff8f3e55199e40b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Address.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Address.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Address.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_Address\")\n+public class Address implements IAddress {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String streetAddress;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String city;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String state;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String postalCode;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String phoneNumber;\n+\n+    public void setStreetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+    }\n+\n+    public String getStreetAddress() {\n+        return this.streetAddress;\n+    }\n+\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getCity() {\n+        return this.city;\n+    }\n+\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getState() {\n+        return this.state;\n+    }\n+\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getPostalCode() {\n+        return this.postalCode;\n+    }\n+\n+\n+    public void setPhoneNumber(String phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public String getPhoneNumber() {\n+        return this.phoneNumber;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"a5bb175501bbc70241ae359c59d09c8f2e21a6c4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Company.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Company.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Company.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_Company\")\n+public class Company implements ICompany {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String name;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Address address;\n+\n+    @OneToMany(mappedBy=\"company\", fetch=FetchType.LAZY)\n+    private Set<Employee> employees = new HashSet<Employee>();\n+\n+    @ManyToMany(mappedBy=\"distributors\", fetch=FetchType.LAZY)\n+    private Set<Product> products = new HashSet<Product>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setAddress(IAddress address) {\n+        this.address = (Address) address;\n+    }\n+\n+    public IAddress getAddress() {\n+        return this.address;\n+    }\n+\n+\n+    public void setEmployees(Set<? extends IEmployee> employees) {\n+        this.employees = (Set<Employee>) employees;\n+    }\n+\n+    public Set<Employee> getEmployees() {\n+        return this.employees;\n+    }\n+\n+\n+    public void setProducts(Set<? extends IProduct> products) {\n+        this.products = (Set<Product>) products;\n+    }\n+\n+    public Set<Product> getProducts() {\n+        return this.products;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"0fdfb70fe6225493cfacb1563f46b55d1b9d2310","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Customer.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Customer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_Customer\")\n+public class Customer extends Person implements ICustomer {\n+    @OneToMany(mappedBy=\"customer\",fetch=FetchType.LAZY)\n+    private Collection<ProductOrder> orders = new ArrayList<ProductOrder>();\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Address shippingAddress;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Address billingAddress;\n+\n+    public void setOrders(Collection<? extends IProductOrder> orders) {\n+        this.orders = (Collection<ProductOrder>) orders;\n+    }\n+\n+    public Collection<ProductOrder> getOrders() {\n+        return this.orders;\n+    }\n+\n+\n+    public void setShippingAddress(IAddress shippingAddress) {\n+        this.shippingAddress = (Address) shippingAddress;\n+    }\n+\n+    public IAddress getShippingAddress() {\n+        return this.shippingAddress;\n+    }\n+\n+\n+    public void setBillingAddress(IAddress billingAddress) {\n+        this.billingAddress = (Address) billingAddress;\n+    }\n+\n+    public IAddress getBillingAddress() {\n+        return this.billingAddress;\n+    }\n+}"},{"sha":"65230d1f563ad580c1f9cf548083e30eff14a4c7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Employee.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Employee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_Employee\")\n+public abstract class Employee extends Person implements IEmployee {\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private FullTimeEmployee manager;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Company company;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String title;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private Date hireDate;\n+\n+    public void setManager(IFullTimeEmployee manager) {\n+        this.manager = (FullTimeEmployee) manager;\n+    }\n+\n+    public IFullTimeEmployee getManager() {\n+        return this.manager;\n+    }\n+\n+\n+    public void setCompany(ICompany company) {\n+        this.company = (Company) company;\n+    }\n+\n+    public ICompany getCompany() {\n+        return this.company;\n+    }\n+\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getTitle() {\n+        return this.title;\n+    }\n+\n+\n+    public void setHireDate(Date hireDate) {\n+        this.hireDate = hireDate;\n+    }\n+\n+    public Date getHireDate() {\n+        return this.hireDate;\n+    }\n+}"},{"sha":"5305fe00461e2c4751c34c79f752932f937b2e9c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/FullTimeEmployee.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/FullTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_FullTimeEmployee\")\n+public class FullTimeEmployee extends Employee\n+    implements IFullTimeEmployee {\n+    @Basic(fetch=FetchType.LAZY)\n+    private float salary;\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    public float getSalary() {\n+        return this.salary;\n+    }\n+}"},{"sha":"2e17e59bf5262660ec52d71768422943dfd7e336","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/LineItem.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/LineItem.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_LineItem\")\n+public class LineItem implements ILineItem {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private int quantity;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Product product;\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public int getQuantity() {\n+        return this.quantity;\n+    }\n+\n+\n+    public void setProduct(IProduct product) {\n+        this.product = (Product) product;\n+    }\n+\n+    public IProduct getProduct() {\n+        return this.product;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"8e90c267b3d463a4b8bb245ffad78372b468b7ac","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/PartTimeEmployee.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/PartTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_PartTimeEmployee\")\n+public class PartTimeEmployee extends Employee\n+    implements IPartTimeEmployee {\n+    @Basic(fetch=FetchType.LAZY)\n+    private float wage;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private int weeklyHours;\n+\n+    public void setWage(float wage) {\n+        this.wage = wage;\n+    }\n+\n+    public float getWage() {\n+        return this.wage;\n+    }\n+\n+\n+    public void setWeeklyHours(int weeklyHours) {\n+        this.weeklyHours = weeklyHours;\n+    }\n+\n+    public int getWeeklyHours() {\n+        return this.weeklyHours;\n+    }\n+}"},{"sha":"96363f91bdba774fb12eb0a9da553ac124539f44","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Person.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Person.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_Person\")\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public abstract class Person implements IPerson {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String firstName;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String lastName;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Address homeAddress;\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getFirstName() {\n+        return this.firstName;\n+    }\n+\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getLastName() {\n+        return this.lastName;\n+    }\n+\n+\n+    public void setHomeAddress(IAddress homeAddress) {\n+        this.homeAddress = (Address) homeAddress;\n+    }\n+\n+    public IAddress getHomeAddress() {\n+        return this.homeAddress;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"d90ff0396105765317455ee441d53be4ecca1e6e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Product.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Product.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Product.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/Product.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_Product\")\n+public class Product implements IProduct {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private String name;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private byte[] image;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private float price;\n+\n+    @ManyToMany(fetch=FetchType.LAZY)\n+    private Set<Company> distributors = new HashSet<Company>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setImage(byte[] image) {\n+        this.image = image;\n+    }\n+\n+    public byte[] getImage() {\n+        return this.image;\n+    }\n+\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public float getPrice() {\n+        return this.price;\n+    }\n+\n+\n+    public void setDistributors(Set<? extends ICompany> distributors) {\n+        this.distributors = (Set<Company>) distributors;\n+    }\n+\n+    public Set<Company> getDistributors() {\n+        return this.distributors;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"ee117270a48ea3e6d303ed12e84d6397e6d4e26f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/ProductOrder.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/ProductOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/ProductOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/ProductOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"LAZ_ProductOrder\")\n+public class ProductOrder implements IProductOrder {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @OneToMany(fetch=FetchType.LAZY)\n+    private List<LineItem> items = new LinkedList<LineItem>();\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private Date orderDate;\n+\n+    @Basic(fetch=FetchType.LAZY)\n+    private Date shippedDate;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private Customer customer;\n+\n+    public void setItems(List<? extends ILineItem> items) {\n+        this.items = (List<LineItem>) items;\n+    }\n+\n+    public List<LineItem> getItems() {\n+        return this.items;\n+    }\n+\n+\n+    public void setOrderDate(Date orderDate) {\n+        this.orderDate = orderDate;\n+    }\n+\n+    public Date getOrderDate() {\n+        return this.orderDate;\n+    }\n+\n+\n+    public void setShippedDate(Date shippedDate) {\n+        this.shippedDate = shippedDate;\n+    }\n+\n+    public Date getShippedDate() {\n+        return this.shippedDate;\n+    }\n+\n+\n+    public void setCustomer(ICustomer customer) {\n+        this.customer = (Customer) customer;\n+    }\n+\n+    public ICustomer getCustomer() {\n+        return this.customer;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"e31430986bdc4cc5d6958f0f8a3bac063bcb1ac8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/TestLazyCompanyModel.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/TestLazyCompanyModel.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/TestLazyCompanyModel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/fetchlazy/TestLazyCompanyModel.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.fetchlazy;\n+\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+public class TestLazyCompanyModel extends CompanyModelTest {\n+}\n+"},{"sha":"585fdb81bbc14eb5b44359e038b91972758b450e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Address.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Address.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Address.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_Address\")\n+public class Address implements IAddress {\n+    private static int ids = 1;\n+\n+    @Id\n+    private int id = ++ids;\n+\n+    @Basic\n+    private String streetAddress;\n+\n+    @Basic\n+    private String city;\n+\n+    @Basic\n+    private String state;\n+\n+    @Basic\n+    private String postalCode;\n+\n+    @Basic\n+    private String phoneNumber;\n+\n+    public void setStreetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+    }\n+\n+    public String getStreetAddress() {\n+        return this.streetAddress;\n+    }\n+\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getCity() {\n+        return this.city;\n+    }\n+\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getState() {\n+        return this.state;\n+    }\n+\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getPostalCode() {\n+        return this.postalCode;\n+    }\n+\n+\n+    public void setPhoneNumber(String phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public String getPhoneNumber() {\n+        return this.phoneNumber;\n+    }\n+}"},{"sha":"4333b2c863e86aefb0dd668fa778d0b97f89b2f9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Company.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Company.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Company.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_Company\")\n+public class Company implements ICompany {\n+    private static int ids = 1;\n+\n+    @Id\n+    private int id = ++ids;\n+\n+    @Basic\n+    private String name;\n+\n+    @OneToOne\n+    private Address address;\n+\n+    @OneToMany(mappedBy=\"company\")\n+    private Set<Employee> employees = new HashSet<Employee>();\n+\n+    @ManyToMany(mappedBy=\"distributors\")\n+    private Set<Product> products = new HashSet<Product>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setAddress(IAddress address) {\n+        this.address = (Address) address;\n+    }\n+\n+    public IAddress getAddress() {\n+        return this.address;\n+    }\n+\n+\n+    public void setEmployees(Set<? extends IEmployee> employees) {\n+        this.employees = (Set<Employee>) employees;\n+    }\n+\n+    public Set<Employee> getEmployees() {\n+        return this.employees;\n+    }\n+\n+\n+    public void setProducts(Set<? extends IProduct> products) {\n+        this.products = (Set<Product>) products;\n+    }\n+\n+    public Set<Product> getProducts() {\n+        return this.products;\n+    }\n+}"},{"sha":"e4c802ae9ad9e98b6080430fc6f6033530e92da0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Customer.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Customer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_Customer\")\n+public class Customer extends Person implements ICustomer {\n+\n+    @OneToMany(mappedBy=\"customer\")\n+    private Collection<ProductOrder> orders = new ArrayList<ProductOrder>();\n+\n+    @OneToOne\n+    private Address shippingAddress;\n+\n+    @OneToOne\n+    private Address billingAddress;\n+\n+    public void setOrders(Collection<? extends IProductOrder> orders) {\n+        this.orders = (Collection<ProductOrder>) orders;\n+    }\n+\n+    public Collection<ProductOrder> getOrders() {\n+        return this.orders;\n+    }\n+\n+\n+    public void setShippingAddress(IAddress shippingAddress) {\n+        this.shippingAddress = (Address) shippingAddress;\n+    }\n+\n+    public IAddress getShippingAddress() {\n+        return this.shippingAddress;\n+    }\n+\n+\n+    public void setBillingAddress(IAddress billingAddress) {\n+        this.billingAddress = (Address) billingAddress;\n+    }\n+\n+    public IAddress getBillingAddress() {\n+        return this.billingAddress;\n+    }\n+}"},{"sha":"27982a23024daa6753a209dca590eb93b15913b7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Employee.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Employee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_Employee\")\n+public abstract class Employee extends Person implements IEmployee {\n+\n+    @OneToOne\n+    private FullTimeEmployee manager;\n+\n+    @OneToOne\n+    private Company company;\n+\n+    @Basic\n+    private String title;\n+\n+    @Basic\n+    private Date hireDate;\n+\n+    public void setManager(IFullTimeEmployee manager) {\n+        this.manager = (FullTimeEmployee) manager;\n+    }\n+\n+    public IFullTimeEmployee getManager() {\n+        return this.manager;\n+    }\n+\n+\n+    public void setCompany(ICompany company) {\n+        this.company = (Company) company;\n+    }\n+\n+    public ICompany getCompany() {\n+        return this.company;\n+    }\n+\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getTitle() {\n+        return this.title;\n+    }\n+\n+\n+    public void setHireDate(Date hireDate) {\n+        this.hireDate = hireDate;\n+    }\n+\n+    public Date getHireDate() {\n+        return this.hireDate;\n+    }\n+}"},{"sha":"8d68beb503aadef054924547b0479223d2ec2786","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/FullTimeEmployee.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/FullTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_FullTimeEmployee\")\n+public class FullTimeEmployee extends Employee\n+    implements IFullTimeEmployee {\n+\n+    @Basic\n+    private float salary;\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    public float getSalary() {\n+        return this.salary;\n+    }\n+}"},{"sha":"0e3a0c7d2ef63c0f4f64c8cbc175e8424813eb37","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/LineItem.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/LineItem.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_LineItem\")\n+public class LineItem implements ILineItem {\n+    private static int ids = 1;\n+\n+    @Id\n+    private int id = ++ids;\n+\n+    @Basic\n+    private int quantity;\n+\n+    @OneToOne\n+    private Product product;\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public int getQuantity() {\n+        return this.quantity;\n+    }\n+\n+\n+    public void setProduct(IProduct product) {\n+        this.product = (Product) product;\n+    }\n+\n+    public IProduct getProduct() {\n+        return this.product;\n+    }\n+}"},{"sha":"589846ea848e414864309d69a010ba92f1183c1c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/PartTimeEmployee.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/PartTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_PartTimeEmployee\")\n+public class PartTimeEmployee extends Employee\n+    implements IPartTimeEmployee {\n+    @Basic\n+    private float wage;\n+\n+    @Basic\n+    private int weeklyHours;\n+\n+    public void setWage(float wage) {\n+        this.wage = wage;\n+    }\n+\n+    public float getWage() {\n+        return this.wage;\n+    }\n+\n+\n+    public void setWeeklyHours(int weeklyHours) {\n+        this.weeklyHours = weeklyHours;\n+    }\n+\n+    public int getWeeklyHours() {\n+        return this.weeklyHours;\n+    }\n+}"},{"sha":"e00b89ad688802d046bb8473a781449bb2cf3ae0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Person.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Person.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_Person\")\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+public abstract class Person implements IPerson {\n+    private static int ids = 1;\n+\n+    @Id\n+    private int id = ++ids;\n+\n+    @Basic\n+    private String firstName;\n+\n+    @Basic\n+    private String lastName;\n+\n+    @OneToOne\n+    private Address homeAddress;\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getFirstName() {\n+        return this.firstName;\n+    }\n+\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getLastName() {\n+        return this.lastName;\n+    }\n+\n+\n+    public void setHomeAddress(IAddress homeAddress) {\n+        this.homeAddress = (Address) homeAddress;\n+    }\n+\n+    public IAddress getHomeAddress() {\n+        return this.homeAddress;\n+    }\n+}"},{"sha":"1cd2f686b886f49a693d18989d4f82187f5426ea","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Product.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Product.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Product.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/Product.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_Product\")\n+public class Product implements IProduct {\n+    private static int ids = 1;\n+\n+    @Id\n+    private int id = ++ids;\n+\n+    @Basic\n+    private String name;\n+\n+    @Basic\n+    private byte[] image;\n+\n+    @Basic\n+    private float price;\n+\n+    @ManyToMany\n+    private Set<Company> distributors = new HashSet<Company>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setImage(byte[] image) {\n+        this.image = image;\n+    }\n+\n+    public byte[] getImage() {\n+        return this.image;\n+    }\n+\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public float getPrice() {\n+        return this.price;\n+    }\n+\n+\n+    public void setDistributors(Set<? extends ICompany> distributors) {\n+        this.distributors = (Set<Company>) distributors;\n+    }\n+\n+    public Set<Company> getDistributors() {\n+        return this.distributors;\n+    }\n+}"},{"sha":"23f858a53fa2e642a617c925b97a8040423e1577","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/ProductOrder.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/ProductOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/ProductOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/ProductOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"IDC_ProductOrder\")\n+public class ProductOrder implements IProductOrder {\n+    private static int ids = 1;\n+\n+    @Id\n+    private int id = ++ids;\n+\n+    @OneToMany\n+    private List<LineItem> items = new LinkedList<LineItem>();\n+\n+    @Basic\n+    private Date orderDate;\n+\n+    @Basic\n+    private Date shippedDate;\n+\n+    @OneToOne\n+    private Customer customer;\n+\n+    public void setItems(List<? extends ILineItem> items) {\n+        this.items = (List<LineItem>) items;\n+    }\n+\n+    public List<LineItem> getItems() {\n+        return this.items;\n+    }\n+\n+\n+    public void setOrderDate(Date orderDate) {\n+        this.orderDate = orderDate;\n+    }\n+\n+    public Date getOrderDate() {\n+        return this.orderDate;\n+    }\n+\n+\n+    public void setShippedDate(Date shippedDate) {\n+        this.shippedDate = shippedDate;\n+    }\n+\n+    public Date getShippedDate() {\n+        return this.shippedDate;\n+    }\n+\n+\n+    public void setCustomer(ICustomer customer) {\n+        this.customer = (Customer) customer;\n+    }\n+\n+    public ICustomer getCustomer() {\n+        return this.customer;\n+    }\n+}"},{"sha":"e2a7a4398551eb7373dbf20eed8868ad7666328f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/TestIdClassCompanyModel.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/TestIdClassCompanyModel.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/TestIdClassCompanyModel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/idclass/TestIdClassCompanyModel.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.idclass;\n+\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+public class TestIdClassCompanyModel extends CompanyModelTest {\n+}\n+"},{"sha":"3bae3d4cd73c24f52f48b732e5ea641f57b6e8f5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Address.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Address.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Address.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_Address\")\n+public class Address implements IAddress {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String streetAddress;\n+\n+    @Basic\n+    private String city;\n+\n+    @Basic\n+    private String state;\n+\n+    @Basic\n+    private String postalCode;\n+\n+    @Basic\n+    private String phoneNumber;\n+\n+    public void setStreetAddress(String streetAddress) {\n+        this.streetAddress = streetAddress;\n+    }\n+\n+    public String getStreetAddress() {\n+        return this.streetAddress;\n+    }\n+\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getCity() {\n+        return this.city;\n+    }\n+\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getState() {\n+        return this.state;\n+    }\n+\n+\n+    public void setPostalCode(String postalCode) {\n+        this.postalCode = postalCode;\n+    }\n+\n+    public String getPostalCode() {\n+        return this.postalCode;\n+    }\n+\n+\n+    public void setPhoneNumber(String phoneNumber) {\n+        this.phoneNumber = phoneNumber;\n+    }\n+\n+    public String getPhoneNumber() {\n+        return this.phoneNumber;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"c916ade90f7c5c3a0e07c180790cd477f735dd7b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Company.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Company.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Company.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Company.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_Company\")\n+public class Company implements ICompany {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String name;\n+\n+    @OneToOne\n+    private Address address;\n+\n+    @OneToMany(mappedBy=\"company\")\n+    private Set<Employee> employees = new HashSet<Employee>();\n+\n+    @ManyToMany(mappedBy=\"distributors\")\n+    private Set<Product> products = new HashSet<Product>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setAddress(IAddress address) {\n+        this.address = (Address) address;\n+    }\n+\n+    public IAddress getAddress() {\n+        return this.address;\n+    }\n+\n+\n+    public void setEmployees(Set<? extends IEmployee> employees) {\n+        this.employees = (Set<Employee>) employees;\n+    }\n+\n+    public Set<Employee> getEmployees() {\n+        return this.employees;\n+    }\n+\n+\n+    public void setProducts(Set<? extends IProduct> products) {\n+        this.products = (Set<Product>) products;\n+    }\n+\n+    public Set<Product> getProducts() {\n+        return this.products;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"b72f8fefd48a39d9a9337a2e4014a1746d8bb871","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Customer.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Customer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_Customer\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public class Customer extends Person implements ICustomer {\n+    @OneToMany(mappedBy=\"customer\")\n+    private Collection<ProductOrder> orders = new ArrayList<ProductOrder>();\n+\n+    @OneToOne\n+    private Address shippingAddress;\n+\n+    @OneToOne\n+    private Address billingAddress;\n+\n+    public void setOrders(Collection<? extends IProductOrder> orders) {\n+        this.orders = (Collection<ProductOrder>) orders;\n+    }\n+\n+    public Collection<ProductOrder> getOrders() {\n+        return this.orders;\n+    }\n+\n+\n+    public void setShippingAddress(IAddress shippingAddress) {\n+        this.shippingAddress = (Address) shippingAddress;\n+    }\n+\n+    public IAddress getShippingAddress() {\n+        return this.shippingAddress;\n+    }\n+\n+\n+    public void setBillingAddress(IAddress billingAddress) {\n+        this.billingAddress = (Address) billingAddress;\n+    }\n+\n+    public IAddress getBillingAddress() {\n+        return this.billingAddress;\n+    }\n+}"},{"sha":"64cee3277ffe02e02f93af72dfe3cd1406018110","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Employee.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Employee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_Employee\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class Employee extends Person implements IEmployee {\n+    @OneToOne\n+    private FullTimeEmployee manager;\n+\n+    @OneToOne\n+    private Company company;\n+\n+    @Basic\n+    private String title;\n+\n+    @Basic\n+    private Date hireDate;\n+\n+    public void setManager(IFullTimeEmployee manager) {\n+        this.manager = (FullTimeEmployee) manager;\n+    }\n+\n+    public IFullTimeEmployee getManager() {\n+        return this.manager;\n+    }\n+\n+\n+    public void setCompany(ICompany company) {\n+        this.company = (Company) company;\n+    }\n+\n+    public ICompany getCompany() {\n+        return this.company;\n+    }\n+\n+\n+    public void setTitle(String title) {\n+        this.title = title;\n+    }\n+\n+    public String getTitle() {\n+        return this.title;\n+    }\n+\n+\n+    public void setHireDate(Date hireDate) {\n+        this.hireDate = hireDate;\n+    }\n+\n+    public Date getHireDate() {\n+        return this.hireDate;\n+    }\n+}"},{"sha":"df4561d4dc5c1391263a5a5cdb6b89f78ba8a9f2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/FullTimeEmployee.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/FullTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/FullTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/FullTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_FullTimeEmployee\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public class FullTimeEmployee extends Employee\n+    implements IFullTimeEmployee {\n+    @Basic\n+    private float salary;\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    public float getSalary() {\n+        return this.salary;\n+    }\n+}"},{"sha":"7541dd562ad6fef92f592a1ac76f787803e6d00f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/LineItem.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/LineItem.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/LineItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/LineItem.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_LineItem\")\n+public class LineItem implements ILineItem {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private int quantity;\n+\n+    @OneToOne\n+    private Product product;\n+\n+    public void setQuantity(int quantity) {\n+        this.quantity = quantity;\n+    }\n+\n+    public int getQuantity() {\n+        return this.quantity;\n+    }\n+\n+\n+    public void setProduct(IProduct product) {\n+        this.product = (Product) product;\n+    }\n+\n+    public IProduct getProduct() {\n+        return this.product;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"fac3ab5c34c609f041a1548148527a082057dd2d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/PartTimeEmployee.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/PartTimeEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/PartTimeEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/PartTimeEmployee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_PartTimeEmployee\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public class PartTimeEmployee extends Employee\n+    implements IPartTimeEmployee {\n+    @Basic\n+    private float wage;\n+\n+    @Basic\n+    private int weeklyHours;\n+\n+    public void setWage(float wage) {\n+        this.wage = wage;\n+    }\n+\n+    public float getWage() {\n+        return this.wage;\n+    }\n+\n+\n+    public void setWeeklyHours(int weeklyHours) {\n+        this.weeklyHours = weeklyHours;\n+    }\n+\n+    public int getWeeklyHours() {\n+        return this.weeklyHours;\n+    }\n+}"},{"sha":"bbb9156d46a85718b7bd38c5d21cf5b095652ee1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Person.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Person.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_Person\")\n+@Inheritance(strategy=InheritanceType.JOINED)\n+public abstract class Person implements IPerson {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String firstName;\n+\n+    @Basic\n+    private String lastName;\n+\n+    @OneToOne\n+    private Address homeAddress;\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getFirstName() {\n+        return this.firstName;\n+    }\n+\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public String getLastName() {\n+        return this.lastName;\n+    }\n+\n+\n+    public void setHomeAddress(IAddress homeAddress) {\n+        this.homeAddress = (Address) homeAddress;\n+    }\n+\n+    public IAddress getHomeAddress() {\n+        return this.homeAddress;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"75dc9dae207f7fcabe316f243bcd08a56d81d0d3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Product.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Product.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Product.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/Product.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_Product\")\n+public class Product implements IProduct {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @Basic\n+    private String name;\n+\n+    @Basic\n+    private byte[] image;\n+\n+    @Basic\n+    private float price;\n+\n+    @ManyToMany\n+    private Set<Company> distributors = new HashSet<Company>();\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+\n+    public void setImage(byte[] image) {\n+        this.image = image;\n+    }\n+\n+    public byte[] getImage() {\n+        return this.image;\n+    }\n+\n+\n+    public void setPrice(float price) {\n+        this.price = price;\n+    }\n+\n+    public float getPrice() {\n+        return this.price;\n+    }\n+\n+\n+    public void setDistributors(Set<? extends ICompany> distributors) {\n+        this.distributors = (Set<Company>) distributors;\n+    }\n+\n+    public Set<Company> getDistributors() {\n+        return this.distributors;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"f4391025cc59c2e0f40fa020d90fbf10254400d0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/ProductOrder.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/ProductOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/ProductOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/ProductOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import java.util.*;\n+import javax.persistence.*;\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+@Entity(name=\"JI_ProductOrder\")\n+public class ProductOrder implements IProductOrder {\n+    private static long idCounter = System.currentTimeMillis();\n+\n+    @Id\n+    private long id = idCounter++;\n+\n+    @OneToMany\n+    private List<LineItem> items = new LinkedList<LineItem>();\n+\n+    @Basic\n+    private Date orderDate;\n+\n+    @Basic\n+    private Date shippedDate;\n+\n+    @OneToOne\n+    private Customer customer;\n+\n+    public void setItems(List<? extends ILineItem> items) {\n+        this.items = (List<LineItem>) items;\n+    }\n+\n+    public List<LineItem> getItems() {\n+        return this.items;\n+    }\n+\n+\n+    public void setOrderDate(Date orderDate) {\n+        this.orderDate = orderDate;\n+    }\n+\n+    public Date getOrderDate() {\n+        return this.orderDate;\n+    }\n+\n+\n+    public void setShippedDate(Date shippedDate) {\n+        this.shippedDate = shippedDate;\n+    }\n+\n+    public Date getShippedDate() {\n+        return this.shippedDate;\n+    }\n+\n+\n+    public void setCustomer(ICustomer customer) {\n+        this.customer = (Customer) customer;\n+    }\n+\n+    public ICustomer getCustomer() {\n+        return this.customer;\n+    }\n+\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public long getId() {\n+        return this.id;\n+    }\n+\n+}"},{"sha":"d6d783b1fa3aca4c0bb2dfe84451d4fcfbf1e09f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/TestJoinedCompanyModel.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/TestJoinedCompanyModel.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/TestJoinedCompanyModel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/models/company/joined/TestJoinedCompanyModel.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.models.company.joined;\n+\n+import org.apache.openjpa.persistence.models.company.*;\n+\n+public class TestJoinedCompanyModel extends CompanyModelTest {\n+}\n+"},{"sha":"91ef920112e76d7d94bf409dae392734e00c8b76","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/AbstractNullityTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public abstract class AbstractNullityTestCase extends SingleEMFTestCase {\n+    protected static boolean NEW = true;\n+    \n+    /**\n+     * Asserts that the given instance can not be committed.\n+     */\n+    void assertCommitFails(Object pc, boolean isNew,\n+        Class<? extends Exception> expected) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        if (isNew) {\n+            em.persist(pc);\n+        }\n+        else {\n+            em.merge(pc);\n+        }\n+        try {\n+            em.getTransaction().commit();\n+            fail();\n+        } catch (Exception e) {\n+            if (!expected.isAssignableFrom(e.getClass())) {\n+                e.printStackTrace();\n+                fail(\"Expected \" + expected.getName());\n+            } \n+        }\n+    }\n+    \n+    void assertCommitSucceeds(Object pc, boolean isNew) {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        if (isNew)\n+            em.persist(pc);\n+        else \n+            em.merge(pc);\n+        try {\n+            em.getTransaction().commit();\n+        } catch (RuntimeException e) {\n+            e.printStackTrace();\n+            fail();\n+        }\n+    }\n+}"},{"sha":"4105983867eefec3807d1874f11f3e80a19b2a18","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/BlobValue.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Simple serializable entity for testing null constraint on field values.\n+ * \n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class BlobValue implements Serializable {\n+    private String  strVal;\n+    private int     intVal;\n+    private byte[]  bytes;\n+    \n+    public String getStrVal() {\n+        return strVal;\n+    }\n+    public void setStrVal(String strVal) {\n+        this.strVal = strVal;\n+    }\n+    public int getIntVal() {\n+        return intVal;\n+    }\n+    public void setIntVal(int intVal) {\n+        this.intVal = intVal;\n+    }\n+    public byte[] getBytes() {\n+        return bytes;\n+    }\n+    public void setBytes(byte[] bytes) {\n+        this.bytes = bytes;\n+    }\n+}"},{"sha":"4487c807169f74317002a2a7d6a91476a9e39c3e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,154 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.nullity;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+/**\r\n+ * Persistent entity used to test behavior of null constraint on basic fields.\r\n+ *  \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+@Entity\r\n+public class NullValues {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\t@Column(nullable=true)\r\n+\tprivate Integer nullable;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate Integer notNullable;\r\n+\t\r\n+\t@Basic(optional=true)\r\n+\tprivate Integer optional;\r\n+\t\r\n+\t@Basic(optional=false)\r\n+\tprivate Integer notOptional;\r\n+\t\r\n+\t@Column(nullable=true)\r\n+\tprivate BlobValue nullableBlob;\r\n+\t\r\n+\t@Column(nullable=false)\r\n+\tprivate BlobValue notNullableBlob;\r\n+\t\r\n+\t@Basic(optional=true)\r\n+\tprivate BlobValue optionalBlob;\r\n+\t\r\n+\t@Basic(optional=false)\r\n+\tprivate BlobValue notOptionalBlob;\r\n+\t\r\n+\t@Version\r\n+\tprivate int version;\r\n+\t\r\n+\t\r\n+\t/**\r\n+\t * Construct with all fields set to non-null values.\r\n+\t */\r\n+\tpublic NullValues() {\r\n+\t\tsetOptional(42);\r\n+\t\tsetNotOptional(42);\r\n+\t\tsetNotNullable(42);\r\n+\t\tsetNullable(42);\r\n+\t\t\r\n+\t\tsetNullableBlob(new BlobValue());\r\n+\t\tsetNotNullableBlob(new BlobValue());\r\n+\t\tsetOptionalBlob(new BlobValue());\r\n+\t\tsetNotOptionalBlob(new BlobValue());\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getNullable() {\r\n+\t\treturn nullable;\r\n+\t}\r\n+\t\r\n+\tpublic void setNullable(Integer nullable) {\r\n+\t\tthis.nullable = nullable;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getNotNullable() {\r\n+\t\treturn notNullable;\r\n+\t}\r\n+\t\r\n+\tpublic void setNotNullable(Integer notNullable) {\r\n+\t\tthis.notNullable = notNullable;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getOptional() {\r\n+\t\treturn optional;\r\n+\t}\r\n+\t\r\n+\tpublic void setOptional(Integer optional) {\r\n+\t\tthis.optional = optional;\r\n+\t}\r\n+\t\r\n+\tpublic Integer getNotOptional() {\r\n+\t\treturn notOptional;\r\n+\t}\r\n+\t\r\n+\tpublic void setNotOptional(Integer notOptional) {\r\n+\t\tthis.notOptional = notOptional;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getNullableBlob() {\r\n+\t\treturn nullableBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNullableBlob(BlobValue nullableBlob) {\r\n+\t\tthis.nullableBlob = nullableBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getNotNullableBlob() {\r\n+\t\treturn notNullableBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNotNullableBlob(BlobValue notNullableBlob) {\r\n+\t\tthis.notNullableBlob = notNullableBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getOptionalBlob() {\r\n+\t\treturn optionalBlob;\r\n+\t}\r\n+\r\n+\tpublic void setOptionalBlob(BlobValue optionalBlob) {\r\n+\t\tthis.optionalBlob = optionalBlob;\r\n+\t}\r\n+\r\n+\tpublic BlobValue getNotOptionalBlob() {\r\n+\t\treturn notOptionalBlob;\r\n+\t}\r\n+\r\n+\tpublic void setNotOptionalBlob(BlobValue notOptionalBlob) {\r\n+\t\tthis.notOptionalBlob = notOptionalBlob;\r\n+\t}\r\n+\t\r\n+\tpublic int getVersion() { \r\n+\t    return version;\r\n+\t}\r\n+}\r"},{"sha":"f1ef9da4aa92cbc53031fdaa2a344b51f18449ff","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,117 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.nullity;\r\n+\r\n+import javax.persistence.RollbackException;\r\n+\r\n+import org.apache.openjpa.persistence.InvalidStateException;\r\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n+\r\n+/**\r\n+ * Test @Basic(optional=true|false) and @Column(nullable=true|false) \r\n+ * specification is honored. \r\n+ * Note: null constraint violation manifests as different exception types\r\n+ * for option and nullable condition.\r\n+ *\r\n+ * @author Pinaki Poddar\r\n+ */\r\n+public class TestBasicFieldNullity extends AbstractNullityTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES, NullValues.class);\r\n+    }\r\n+\r\n+    public void testNullOnOptionalFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setOptional(null); \r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonOptionalFieldIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotOptional(null);\r\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n+    }\r\n+    \r\n+    public void testNotNullOnOptionalFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNotNullOnNonOptionalFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNullableColumnAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNullable(null);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonNullableColumnIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotNullable(null);\r\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n+    }\r\n+    \r\n+    public void testNotNullOnNullableColumnIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNotNullOnNonNullableColumnIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnOptionalBlobFieldIsAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setOptionalBlob(null);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonOptionalBlobFieldIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotOptionalBlob(null);\r\n+    \tassertCommitFails(pc, NEW, InvalidStateException.class);\r\n+    }\r\n+    \r\n+    public void testNullOnNullableBlobColumnAllowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNullableBlob(null);\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    }\r\n+    \r\n+    public void testNullOnNonNullableBlobColumnIsDisallowed() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tpc.setNotNullableBlob(null);\r\n+    \tassertCommitFails(pc, NEW, RollbackException.class);\r\n+    }\r\n+    \r\n+    public void testX() {\r\n+    \tNullValues pc = new NullValues();\r\n+    \tassertCommitSucceeds(pc, NEW);\r\n+    \tOpenJPAPersistence.getEntityManager(pc).close();\r\n+    \t\r\n+    \tpc.setNotNullableBlob(null);\r\n+    \tassertCommitFails(pc, !NEW, RollbackException.class);\r\n+    }\r\n+}\r\n+\r"},{"sha":"2623fa148766b336a2203b09ba61a946fd6b57ed","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestReadOnlyNullity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.AbstractDB2Dictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+\n+/**\n+ * Testcase that verifies that null checking is omitted for \"read only\" fields.\n+ * An example use case is a Date field that is set by the database (although in\n+ * that case the field would be updateable=false and insertable=false).  \n+ */\n+public class TestReadOnlyNullity extends AbstractNullityTestCase {\n+\n+    private boolean skip = false;\n+\n+    public void setUp() {\n+        OpenJPAEntityManagerFactorySPI emf = createEMF(new Object[] {});\n+        if (((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance() instanceof AbstractDB2Dictionary) {\n+\n+            setUp(CLEAR_TABLES, TimestampedEntity.class);\n+        } else {\n+            skip = true;\n+        }\n+    }\n+\n+    /**\n+     * Test that a non-insertable field may be set to null. This test is skipped\n+     * for non-db2 databases. \n+     */\n+    public void testNonInsertableBlobDoesNotFail() {\n+        if (!skip) {\n+            TimestampedEntity pc = new TimestampedEntity();\n+            pc.setNonInsertableNonNullableDate(null);\n+            assertCommitSucceeds(pc, NEW);\n+        }\n+        // else no-op\n+    }\n+\n+    /**\n+     * Test that a non-updatable field may be set to null. This test is skipped\n+     * for non-db2 databases. \n+     */\n+    public void testNonUpdatableBlobDoesNotFail() {\n+        if (!skip) {\n+            TimestampedEntity pc = new TimestampedEntity();\n+            EntityManager em = emf.createEntityManager();\n+            em.getTransaction().begin();\n+            em.persist(pc);\n+            em.getTransaction().commit();\n+            em.clear();\n+\n+            pc.setNonUpdatableNonNullableDate(null);\n+            assertCommitSucceeds(pc, !NEW);\n+        }\n+        // else no-op\n+    }\n+}"},{"sha":"84d9a2f77e3bea86669d9ba58c9080c912b310f3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","status":"added","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TimestampedEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.nullity;\n+\n+import java.sql.Date;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+/**\n+ * This Entity contains two date fields which are updated by the database. The\n+ * fields are non-insertable and non-updatable respectively making them read\n+ * only in many situations. The fields should be ignored when persisting or\n+ * updating an entity (again respectively).\n+ * \n+ * <P>\n+ * <b>The syntax used for the database to generate the date column is specific\n+ * to Derby and DB2. Any testcase which uses this entity must ensure that one of\n+ * those databases is used, or use pre-existing tables</b>\n+ * </P>\n+ */\n+@Entity\n+public class TimestampedEntity {\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @Version\n+    private int version;\n+\n+    @Column(nullable = false, insertable = false, \n+        columnDefinition = \"DATE default '2008-01-01'\")\n+    private Date nonInsertableNonNullableDate;\n+\n+    @Column(nullable = false, updatable = false, \n+        columnDefinition = \"DATE default '2008-01-01'\")\n+    private Date nonUpdatableNonNullableDate;\n+\n+    public TimestampedEntity() { \n+        setNonUpdatableNonNullableDate(new Date(52349606));\n+    }\n+    \n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public Date getNonInsertableNonNullableDate() {\n+        return nonInsertableNonNullableDate;\n+    }\n+\n+    public void setNonInsertableNonNullableDate(\n+        Date nonInsertableNonNullableDate) {\n+        this.nonInsertableNonNullableDate = nonInsertableNonNullableDate;\n+    }\n+\n+    public Date getNonUpdatableNonNullableDate() {\n+        return nonUpdatableNonNullableDate;\n+    }\n+\n+    public void setNonUpdatableNonNullableDate(\n+        Date nonUpdatableNonNullableDate) {\n+        this.nonUpdatableNonNullableDate = nonUpdatableNonNullableDate;\n+    }\n+}"},{"sha":"350ed33f8d10d8dacc29ccb668881e8b7cd69c62","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,146 @@\n+/*\r\n+ * BaseKernelTest.java\r\n+ *\r\n+ * Created on October 9, 2006, 12:56 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Properties;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n+import org.apache.openjpa.lib.conf.Configurations;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public abstract class BaseQueryTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase {\r\n+\r\n+    private static Map _sysprops = new HashMap();\r\n+\r\n+    /**\r\n+     * Creates a new instance of BaseQueryTest\r\n+     */\r\n+    public BaseQueryTest(String name) {\r\n+        super(name, \"querycactusapp\");\r\n+    }\r\n+\r\n+    protected OpenJPAEntityManager getEM() {\r\n+        return (OpenJPAEntityManager) currentEntityManager();\r\n+    }\r\n+\r\n+    protected OpenJPAEntityManager getEM(boolean optimistic,\r\n+        boolean retainValues) {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        em.setNontransactionalRead(true);\r\n+        em.setRetainState(retainValues);\r\n+        em.setOptimistic(optimistic);\r\n+        return em;\r\n+    }\r\n+\r\n+    /**\r\n+     * Delete all instances of the given class.\r\n+     */\r\n+    protected int deleteAll(Broker broker, Class clazz,\r\n+        boolean subclasses) {\r\n+        final boolean useDeleteByQuery = false;\r\n+\r\n+        if (useDeleteByQuery) {\r\n+            org.apache.openjpa.kernel.Query query = broker.newQuery(\r\n+                JPQLParser.LANG_JPQL, clazz, \"\");\r\n+            query.setCandidateType(clazz, subclasses);\r\n+            return (int) query.deleteAll();\r\n+        } else {\r\n+            org.apache.openjpa.kernel.Extent extent =\r\n+                broker.newExtent(clazz, subclasses);\r\n+            List list = extent.list();\r\n+            int size = list.size();\r\n+            broker.deleteAll(list, null);\r\n+            return size;\r\n+        }\r\n+    }\r\n+\r\n+    protected Object persist(Object ob) {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        broker.persist(ob, null);\r\n+        Object id = broker.getObjectId(ob);\r\n+        broker.commit();\r\n+        broker.close();\r\n+        return id;\r\n+    }\r\n+\r\n+    protected Properties getProperties() {\r\n+        return getProperties(null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the runtime properties, optionally overriding or setting\r\n+     * some via the given array, which should be in the form\r\n+     * { key, val, key, val, ... }.\r\n+     */\r\n+    protected synchronized Properties getProperties(String[] props) {\r\n+        Properties p = new Properties(System.getProperties());\r\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n+        if (str != null && str.length() > 0) {\r\n+            // cache system properties to reduce load on file system\r\n+            Properties loaded = (Properties) _sysprops.get(str);\r\n+            if (loaded == null) {\r\n+                loaded = new Properties();\r\n+                ConfigurationProvider cp =\r\n+                    (ConfigurationProvider) Configurations\r\n+                        .getProperty(str, null);\r\n+                if (cp != null)\r\n+                    loaded.putAll(cp.getProperties());\r\n+                _sysprops.put(str, loaded);\r\n+            }\r\n+            p.putAll(loaded);\r\n+        }\r\n+\r\n+        for (int i = 0; props != null && i < props.length; i += 2) {\r\n+            if (props[i + 1] != null) {\r\n+                // remove any duplicate kodo/openjpa property so we don't clash\r\n+                if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n+                else if (props[i].startsWith(\"openjpa.\"))\r\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n+\r\n+                p.setProperty(props[i], props[i + 1]);\r\n+            } else {\r\n+                p.remove(props[i]);\r\n+            }\r\n+        }\r\n+        return p;\r\n+    }\r\n+}\r"},{"sha":"ade69625387c5463853de2a6e49e0d1ca2912e4d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Customer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.*;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.ArrayList;\n+\n+@Entity\n+@Table(name=\"TCUSTOMER\")\n+public class Customer {\n+\n+    @Embeddable\n+\tpublic static class CustomerKey implements Serializable {\n+\t\tpublic String countryCode;\n+\t\tpublic int id;\n+\t\t\n+\t\tpublic CustomerKey(){}\n+\t\t\n+\t\tpublic  CustomerKey(String cc, int id){\n+\t\t\tcountryCode=cc;\n+\t\t\tthis.id=id;\n+\t\t}\n+\t\t\n+\t\tpublic String toString() {\n+\t\t\treturn countryCode+\"/\"+id;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj){\n+\t\t\tif (obj==this) return true;\n+\t\t\tif ( ! (obj instanceof CustomerKey) ) return false;\n+\t\t\tCustomerKey key = (CustomerKey)obj;\n+\t\t\tif (key.countryCode.equals(this.countryCode) && \n+\t\t\t\t\tkey.id==this.id) return true;\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn this.countryCode.hashCode()\n+\t\t\t\t^ this.id;\n+\t\t}\n+\t}\n+\t\n+\tpublic enum CreditRating { POOR, GOOD, EXCELLENT };\n+\t\n+\t@EmbeddedId\n+\t CustomerKey cid;\n+\t@Column(length=30)\n+    @Basic\n+\t String name;\n+\t@Enumerated\n+    @Basic\n+\t CreditRating creditRating;\n+\t@Version\n+\t long version;\n+\t\n+    @OneToMany(fetch=FetchType.EAGER, mappedBy=\"customer\")\n+    private Collection<Order> orders = new ArrayList<Order>();\n+\t\n+\tpublic Customer() {}\n+\t\n+\tpublic Customer(CustomerKey cid, String name, CreditRating rating){\n+\t\tthis.cid=cid;\n+\t\tthis.name=name;\n+\t\tthis.creditRating=rating;\n+\t}\n+\t\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\tpublic CreditRating getRating() {\n+\t\treturn creditRating;\n+\t}\n+\tpublic void setRating(CreditRating rating) {\n+\t\tthis.creditRating = rating;\n+\t}\n+\n+\tpublic Collection<Order> getOrders() {\n+\t\treturn orders;\n+\t}\n+\tpublic void setOrders(Collection<Order> orders) {\n+\t\tthis.orders = orders;\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn \"Customer:\"+cid+\" name:\"+name; \n+\t}\n+\n+\tpublic CustomerKey getCid() {\n+\t\treturn cid;\n+\t}\n+\n+\tpublic void setCid(CustomerKey cid) {\n+\t\tthis.cid = cid;\n+\t}\n+}\n+"},{"sha":"b465a61170b7ea6b3cfb596360c456a094709d4a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Dependent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+@Table(name=\"SUBQ_DEPENDENT\")\n+public class Dependent {\n+    @EmbeddedId\n+    private DependentId id;\n+\n+    @OneToOne\n+    private Employee emp;\n+    \n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date endDate;\n+    \n+    private int curStatusId;\n+\n+    public int getCurStatusId() {\n+        return curStatusId;\n+    }\n+\n+    public void setCurStatusId(int curStatusId) {\n+        this.curStatusId = curStatusId;\n+    }\n+\n+    public DependentId getId() {\n+        return id;\n+    }\n+\n+    public void setId(DependentId id) {\n+        this.id = id;\n+    }\n+\n+    public Employee getEmp() {\n+        return emp;\n+    }\n+\n+    public void setEmp(Employee emp) {\n+        this.emp = emp;\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate;\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        this.endDate = endDate;\n+    }\n+\n+}"},{"sha":"24c0a7ec5f64df1c3d3e5999b09c7b048bbbf27e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/DependentId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class DependentId {\n+    private String name;\n+    private long empid; \n+    private Date effDate;\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getEmpid() {\n+        return empid;\n+    }\n+\n+    public void setEmpid(long empid) {\n+        this.empid = empid;\n+    }\n+\n+    public Date getEffDate() {\n+        return effDate;\n+    }\n+\n+    public void setEffDate(Date effDate) {\n+        this.effDate = effDate;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((effDate == null) ? 0 : effDate.hashCode());\n+        result = prime * result + (int) (empid ^ (empid >>> 32));\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        DependentId other = (DependentId) obj;\n+        if (effDate == null) {\n+            if (other.effDate != null)\n+                return false;\n+        } else if (!effDate.equals(other.effDate))\n+            return false;\n+        if (empid != other.empid)\n+            return false;\n+        if (name == null) {\n+            if (other.name != null)\n+                return false;\n+        } else if (!name.equals(other.name))\n+            return false;\n+        return true;\n+    }\n+}"},{"sha":"e8321a100318ab8e3032ce24b567b9db4642bfd4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"SUBQ_EMPLOYEE\")\n+public class Employee {\n+\n+    @Id \n+    private long empId;\n+    private String name;\n+    \n+    private long someLong;\n+\n+    private int statusId; \n+\n+    public int getStatusId() {\n+        return statusId;\n+    }\n+\n+    public void setStatusId(int statusId) {\n+        this.statusId = statusId;\n+    }\n+\n+    public long getEmpId() {\n+        return empId;\n+    }\n+\n+    public void setEmpId(long empId) {\n+        this.empId = empId;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public long getSomeLong() {\n+        return someLong;\n+    }\n+\n+    public void setSomeLong(long someLong) {\n+        this.someLong = someLong;\n+    }\n+\n+    \n+}\n\\ No newline at end of file"},{"sha":"988ea3a38e41b34545e9ccfa3910c64830d16ef7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","status":"added","additions":296,"deletions":0,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,296 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.*;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+\r\n+/**\r\n+ * <p>Tests grouping and having capabilities.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+public abstract class GroupingTestCase\r\n+    extends SingleEMTestCase {\r\n+\r\n+    protected abstract void prepareQuery(Query q);\r\n+\r\n+    public void setUp() {\r\n+        super.setUp(AllFieldTypes.class, CLEAR_TABLES,\r\n+            \"openjpa.Compatibility\", \"JPQL=warn\");\r\n+\r\n+        AllFieldTypes pc1 = new AllFieldTypes();\r\n+        AllFieldTypes pc2 = new AllFieldTypes();\r\n+        AllFieldTypes pc3 = new AllFieldTypes();\r\n+        AllFieldTypes pc4 = new AllFieldTypes();\r\n+\r\n+        // pc1 and pc2, pc3 and pc4 grouped on intField, shortField\r\n+        pc1.setIntField(1);\r\n+        pc1.setShortField((short) -1);\r\n+        pc2.setIntField(1);\r\n+        pc2.setShortField((short) -1);\r\n+        pc3.setIntField(2);\r\n+        pc3.setShortField((short) -2);\r\n+        pc4.setIntField(2);\r\n+        pc4.setShortField((short) -2);\r\n+\r\n+        // pc1 and pc2 grouped on stringField\r\n+        pc1.setStringField(\"abc\");\r\n+        pc2.setStringField(\"acd\");\r\n+        pc3.setStringField(\"def\");\r\n+        pc4.setStringField(\"efg\");\r\n+\r\n+        // pc2 and pc3 grouped on byteField\r\n+        pc2.setByteField((byte) 1);\r\n+        pc3.setByteField((byte) 1);\r\n+        pc1.setByteField((byte) 0);\r\n+        pc4.setByteField((byte) 2);\r\n+\r\n+        // longField is unique id\r\n+        pc1.setLongField(1L);\r\n+        pc2.setLongField(2L);\r\n+        pc3.setLongField(3L);\r\n+        pc4.setLongField(4L);\r\n+\r\n+        // set up some relations\r\n+        pc1.setSelfOneOne(pc4);\r\n+        pc2.setSelfOneOne(pc3);\r\n+        pc3.setSelfOneOne(pc2);\r\n+        pc4.setSelfOneOne(pc1);\r\n+\r\n+        // if variable testing, set up some 1-Ms instead of the 1-1s above\r\n+        if (getName().startsWith(\"testVariable\")) {\r\n+            pc1.setSelfOneOne(pc1);\r\n+            pc2.setSelfOneOne(pc1);\r\n+            pc1.getSelfOneMany().add(pc1);\r\n+            pc1.getSelfOneMany().add(pc2);\r\n+\r\n+            pc3.setSelfOneOne(pc3);\r\n+            pc4.setSelfOneOne(pc3);\r\n+            pc3.getSelfOneMany().add(pc3);\r\n+            pc3.getSelfOneMany().add(pc4);\r\n+        }\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(pc1);\r\n+        em.persist(pc2);\r\n+        em.persist(pc3);\r\n+        em.persist(pc4);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSimpleGroup() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField order by o.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testOrderByAggregate() {\r\n+        // this is an extension of JPQL\r\n+        Query q = em.createQuery(\"select sum(o.shortField) \" +\r\n+            \"from AllFieldTypes o\"\r\n+            + \" group by o.intField order by sum(o.shortField) asc\");\r\n+        prepareQuery(q);\r\n+        // this might fail in MySQL\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Long(-4), itr.next());\r\n+        assertEquals(new Long(-2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testCompoundGroupSame() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField, o.shortField order by o.shortField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testCompoundGroupDifferent() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField, o.byteField order by o.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(4, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testDifferentGroupLengths() {\r\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o\"\r\n+            + \" group by o.byteField order by o.byteField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals((byte) 0, itr.next());\r\n+        assertEquals((byte) 1, itr.next());\r\n+        assertEquals((byte) 2, itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testGroupRelationField() {\r\n+        Query q = em.createQuery(\"select o.selfOneOne.intField \" +\r\n+            \"from AllFieldTypes o group by o.selfOneOne.intField \" +\r\n+            \"order by o.selfOneOne.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Integer(1), itr.next());\r\n+        assertEquals(new Integer(2), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testSubstringInGroupBy() {\r\n+        // this is an extension of JPQL\r\n+        Query q = em.createQuery(\"select substring(o.stringField, 1, 1), \" +\r\n+            \"count(o) from AllFieldTypes o \" +\r\n+            \"group by substring(o.stringField, 1, 1)\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+\r\n+        q = em.createQuery(\"select substring(o.stringField, 1, 2), count(o) \" +\r\n+            \"from AllFieldTypes o group by substring(o.stringField, 1, 2)\");\r\n+        prepareQuery(q);\r\n+        res = q.getResultList();\r\n+        assertEquals(4, res.size());\r\n+    }\r\n+\r\n+    public void testGroupedAggregate() {\r\n+        Query q = em.createQuery(\"select count(o) from AllFieldTypes o \" +\r\n+            \"group by o.byteField order by o.byteField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Long(1), itr.next());\r\n+        assertEquals(new Long(2), itr.next());\r\n+        assertEquals(new Long(1), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testGroupedRelationAggregate() {\r\n+        Query q = em.createQuery(\"select count(o), max(o.selfOneOne.longField)\"\r\n+            + \" from AllFieldTypes o group by o.intField\"\r\n+            + \" order by o.intField asc\");\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        Object[] o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Long(4), o[1]);\r\n+        o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Long(2), o[1]);\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testGroupedMixedProjection() {\r\n+        Query q = em.createQuery(\"select count(o), o.shortField \" +\r\n+            \"from AllFieldTypes o group by o.intField, o.shortField \" +\r\n+            \"order by o.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        Object[] o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Short((short) -1), o[1]);\r\n+        o = (Object[]) itr.next();\r\n+        assertEquals(new Long(2), o[0]);\r\n+        assertEquals(new Short((short) -2), o[1]);\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testSimpleHaving() {\r\n+        Query q = em.createQuery(\"select o.intField from AllFieldTypes o \" +\r\n+            \"group by o.intField having o.intField < 2\");\r\n+        prepareQuery(q);\r\n+        assertEquals(new Integer(1), q.getSingleResult());\r\n+    }\r\n+\r\n+    public void testAggregateHaving() {\r\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\r\n+            \"group by o.byteField having count(o) > 1\");\r\n+        prepareQuery(q);\r\n+        assertEquals(new Byte((byte) 1), q.getSingleResult());\r\n+    }\r\n+\r\n+    public void testMixedHaving() {\r\n+        Query q = em.createQuery(\"select o.byteField from AllFieldTypes o \" +\r\n+            \"group by o.byteField having count(o) > 1 or o.byteField = 0 \" +\r\n+            \"order by o.byteField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Byte((byte) 0), itr.next());\r\n+        assertEquals(new Byte((byte) 1), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testVariableGroup() {\r\n+        Query q = em.createQuery(\"select max(other.longField) \" +\r\n+            \"from AllFieldTypes o, AllFieldTypes other \" +\r\n+            \"where other member of o.selfOneMany \" +\r\n+            \"group by other.intField order by other.intField asc\");\r\n+        prepareQuery(q);\r\n+        List res = q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        Iterator itr = res.iterator();\r\n+        assertEquals(new Long(2), itr.next());\r\n+        assertEquals(new Long(4), itr.next());\r\n+        assertTrue(!itr.hasNext());\r\n+    }\r\n+\r\n+    public void testVariableHaving() {\r\n+        Query q = em.createQuery(\"select max(o.longField), other.byteField \" +\r\n+            \"from AllFieldTypes o, AllFieldTypes other \" +\r\n+            \"where other member of o.selfOneMany \" +\r\n+            \"group by other.byteField having sum(other.intField) = 2\");\r\n+        prepareQuery(q);\r\n+        assertEquals(new Long(3), ((Object[])q.getSingleResult())[0]);\r\n+    }\r\n+}\r"},{"sha":"664bae729d13c43f77c8dac2200d878b8fa31a44","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Magazine.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.FetchType;\n+import java.sql.Date;\n+\n+@Entity\n+public class Magazine implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+    \n+    @Column(name=\"date_published\")\n+    private Date datePublished;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"id_publisher\")\n+    private Publisher idPublisher;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Publisher getIdPublisher() {\n+        return this.idPublisher;\n+    }\n+\n+    public void setIdPublisher(Publisher idPublisher) {\n+        this.idPublisher = idPublisher;\n+    }\n+    \n+    public Date getDatePublished() {\n+        return datePublished;\n+    }\n+\n+    public void setDatePublished(Date datePublished) {\n+        this.datePublished = datePublished;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"0eb18327fc2d697e7f71f264f60b3dadf4836947","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+public class ManyOneEntity implements Serializable {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(cascade=CascadeType.ALL)\r\n+    private ManyOneEntity rel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public ManyOneEntity getRel() {\r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(ManyOneEntity rel) {\r\n+        this.rel = rel;\r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"6c414d1bbe9682692d798bd9b0d2bde6e7f7daed","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,36 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class ManyOneEntitySub \r\n+    extends ManyOneEntity {\r\n+\r\n+    private int subInt;\r\n+\r\n+    public int getSubInt() { \r\n+        return subInt; \r\n+    }\r\n+\r\n+    public void setSubInt(int subInt) { \r\n+        this.subInt = subInt; \r\n+    }\r\n+}\r"},{"sha":"f9a97c5bc22a366f50e48446293a582a61b7926c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,42 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+@Entity\r\n+@NamedQuery(name=\"NamedQueryEntity.namedQuery\",\r\n+    query=\"select o from NamedQueryEntity o where o.stringField = 'foo'\")\r\n+public class NamedQueryEntity {\r\n+    @Id @GeneratedValue\r\n+    private Integer id;\r\n+\r\n+    private String stringField;\r\n+\r\n+    public NamedQueryEntity(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public NamedQueryEntity() {\r\n+        // for JPA\r\n+    }\r\n+}\r"},{"sha":"3b2238aa214ce0ecb905b07e11365b6dc390cda4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Order.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.*;\n+\n+import java.util.Collection;\n+import java.util.ArrayList;\n+\n+@Entity\n+@Table(name=\"TORDER\")\n+public class Order {\n+\t@Id \n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\t int oid;\n+\t\n+\t double amount;\n+\t boolean delivered;\n+\t \n+\t@ManyToOne (fetch=FetchType.EAGER)\n+\t Customer customer;\n+\t\n+\t@OneToMany (fetch=FetchType.EAGER , mappedBy=\"order\")\n+\t Collection<OrderItem> lineitems = new ArrayList<OrderItem>();\n+\t@Version\n+\tlong version;\n+\t\n+\tpublic Order(){}\n+\t\n+\tpublic Order(  double amt, boolean delivered, Customer c){\n+\t\tamount=amt;\n+\t\tthis.delivered=delivered;\n+\t\tcustomer=c;\n+\t\tif (c!=null) c.getOrders().add(this);\n+\t}\n+\t\n+\tpublic double getAmount() {\n+\t\treturn amount;\n+\t}\n+\tpublic void setAmount(double amount) {\n+\t\tthis.amount = amount;\n+\t}\n+\tpublic Customer getCustomer() {\n+\t\treturn customer;\n+\t}\n+\tpublic void setCustomer(Customer customer) {\n+\t\tthis.customer = customer;\n+\t}\n+\tpublic boolean isDelivered() {\n+\t\treturn delivered;\n+\t}\n+\tpublic void setDelivered(boolean delivered) {\n+\t\tthis.delivered = delivered;\n+\t}\n+\tpublic int getOid() {\n+\t\treturn oid;\n+\t}\n+\t\n+\tpublic String toString(){\n+\t\treturn \"Order:\"+oid+\" amount:\"+amount+\" delivered:\"+delivered+\" customer:\"+\n+\t\t ( customer!=null ? customer.getCid()  :  -1 );\n+\t}\n+\n+\tpublic Collection<OrderItem> getLineitems() {\n+\t\treturn lineitems;\n+\t}\n+\n+\tpublic void setLineitems(Collection<OrderItem> lineitems) {\n+\t\tthis.lineitems = lineitems;\n+\t}\n+}"},{"sha":"8d4ab1f7b0f9918bca8e5fdad867c53fb0f3ae5b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/OrderItem.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+import javax.persistence.*;\n+@Entity\n+@Table(name=\"TORDERITEM\")\n+public class OrderItem {\n+\t@Id \n+\t@GeneratedValue(strategy=GenerationType.IDENTITY)\n+\tint lid;\n+\t\n+\tint quantity;\n+\tdouble cost;\n+\t \n+\t@ManyToOne (fetch=FetchType.EAGER)\n+\tOrder order;\n+\t\n+\t@Version\n+\tlong version;\n+\t\n+\tpublic OrderItem(){}\n+\n+    public OrderItem( int quantity, double cost, Order o){\n+        this.quantity=quantity;\n+        this.cost=cost;\n+        order = o;\n+    }\n+\n+\tpublic double getCost() {\n+\t\treturn cost;\n+\t}\n+\n+\tpublic void setCost(double cost) {\n+\t\tthis.cost = cost;\n+\t}\n+\n+\tpublic int getLid() {\n+\t\treturn lid;\n+\t}\n+\n+\tpublic void setLid(int lid) {\n+\t\tthis.lid = lid;\n+\t}\n+\n+\tpublic int getQuantity() {\n+\t\treturn quantity;\n+\t}\n+\n+\tpublic void setQuantity(int quantity) {\n+\t\tthis.quantity = quantity;\n+\t}\n+\n+\tpublic Order getOrder() {\n+\t\treturn order;\n+\t}\n+\n+\tpublic void setOrder(Order order) {\n+\t\tthis.order = order;\n+\t}\n+}"},{"sha":"ea0f51d8fde0e536156494a07a287aa572139084","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Publisher.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.io.Serializable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.OneToMany;\n+import java.util.Set;\n+\n+@Entity\n+public class Publisher implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    @Column(name=\"id\")\n+    private int id;\n+\n+    @Column(name=\"name\")\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"idPublisher\",  fetch=FetchType.EAGER)\n+    private Set<Magazine> magazineCollection;\n+\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public int getId() {\n+        return this.id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return this.name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Set<Magazine> getMagazineCollection() {\n+        return this.magazineCollection;\n+    }\n+\n+    public void setMagazineCollection(Set<Magazine> magazineCollection) {\n+        this.magazineCollection = magazineCollection;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+}"},{"sha":"81b85f558e0d7110a15cbd9f5ead711230c7b1ea","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.FieldResult;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.NamedNativeQueries;\r\n+import javax.persistence.NamedNativeQuery;\r\n+import javax.persistence.NamedQueries;\r\n+import javax.persistence.NamedQuery;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+\r\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple s where s.name = :fname\")\r\n+\r\n+@NamedQueries( {\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"FindAll\", query=\"select s from simple s\")\r\n+})\r\n+\r\n+@NamedNativeQueries( { \r\n+    @NamedNativeQuery(name = \"findSimpleEntitites\",\r\n+        query = \"SELECT ID, NAME, VALUE FROM SIMPLE_ENTITY\", \r\n+        resultSetMapping = \"simpleEntitiesResult\") })\r\n+\r\n+@SqlResultSetMapping(name = \"simpleEntitiesResult\",\r\n+    entities = @EntityResult(\r\n+    entityClass = org.apache.openjpa.persistence.query.SimpleEntity.class, \r\n+    fields = {@FieldResult(name = \"id\", column = \"ID\"),\r\n+        @FieldResult(name = \"name\", column = \"NAME\"),\r\n+        @FieldResult(name = \"value\", column = \"VALUE\") }))\r\n+@Entity(name = \"simple\")\r\n+@Table(name = \"SIMPLE_ENTITY\")\r\n+public class SimpleEntity implements Serializable {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    @Column(name = \"ID\")\r\n+    private long id;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"NAME\")\r\n+    private String name;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"VALUE\")\r\n+    private String value;\r\n+\r\n+    public SimpleEntity() {\r\n+    }\r\n+\r\n+    public SimpleEntity(String name, String value) {\r\n+        this();\r\n+        this.name = name;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r"},{"sha":"920fd2a0103fe1e5bdef4ebd2264d70df24de866","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.NamedQueries;\r\n+import javax.persistence.NamedQuery;\r\n+import javax.persistence.Table;\r\n+\r\n+@NamedQuery(name=\"FindXTwo\", query=\"select s from simple2 s where s.name = :fname\")\r\n+\r\n+@NamedQueries( {\r\n+    @NamedQuery(name=\"FindOne\", query=\"select s from simple2 s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"Find2One\", query=\"select s from simple2 s where s.name = :fname\"),\r\n+    @NamedQuery(name=\"Find2All\", query=\"select s from simple2 s\")\r\n+})\r\n+\r\n+@Entity(name = \"simple2\")\r\n+@Table(name = \"SIMPLE_ENTITY2\")\r\n+public class SimpleEntity2 {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    @Column(name = \"ID\")\r\n+    private long id;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"NAME\")\r\n+    private String name;\r\n+\r\n+    @Basic\r\n+    @Column(name = \"VALUE\")\r\n+    private String value;\r\n+\r\n+    public SimpleEntity2() {\r\n+    }\r\n+\r\n+    public SimpleEntity2(String name, String value) {\r\n+        this();\r\n+        this.name = name;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return this.id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r"},{"sha":"3d28bdbe0b9abdce96c0b25b8fa9450f2af308b3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAbstractSchemaName.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.simple.NamedEntity;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that we can query by an entity's abstract schema name.\n+ *\n+ * @author Abe White\n+ */\n+public class TestAbstractSchemaName\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(NamedEntity.class);\n+\n+        NamedEntity e = new NamedEntity();\n+        e.setName(\"e\"); \n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from named e\");\n+        NamedEntity e = (NamedEntity) q.getSingleResult();\n+        assertNotNull(e);\n+        assertEquals(\"e\", e.getName());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestAbstractSchemaName.class);\n+    }\n+}\n+"},{"sha":"0e1027a4b27106785e69f1334283535c76479076","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,90 @@\n+/*\r\n+ * TestAccessPathsOfSubqueries.java\r\n+ *\r\n+ * Created on October 17, 2006, 2:51 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest4;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest5;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.Query;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+\r\n+public class TestAccessPathsOfSubqueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestAccessPathsOfSubqueries\r\n+     */\r\n+\r\n+    public TestAccessPathsOfSubqueries(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void testSimpleSubqueryAccessPath() {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\r\n+        ClassMetaData[] metas = q.getAccessPathMetaDatas();\r\n+        Collection c = Arrays.asList(metas);\r\n+        ClassMetaData rt1 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\r\n+            broker.getClassLoader(), true);\r\n+        ClassMetaData rt5 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\r\n+            broker.getClassLoader(), true);\r\n+        assertTrue(c.contains(rt1));\r\n+        assertTrue(c.contains(rt5));\r\n+        assertEquals(2, c.size());\r\n+    }\r\n+\r\n+    public void testRelationTraversalSubqueryAccessPath() {\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        Query q = broker.newQuery(JPQLParser.LANG_JPQL,\r\n+            \"SELECT o FROM RuntimeTest1 o WHERE EXISTS (SELECT rt5.runtimeTest4.name FROM RuntimeTest5 rt5 WHERE rt5.name IS NOT NULL)\");\r\n+\r\n+        ClassMetaData[] metas = q.getAccessPathMetaDatas();\r\n+        Collection c = Arrays.asList(metas);\r\n+        ClassMetaData rt1 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest1.class,\r\n+            broker.getClassLoader(), true);\r\n+        ClassMetaData rt4 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest4.class,\r\n+            broker.getClassLoader(), true);\r\n+        ClassMetaData rt5 = broker.getConfiguration().\r\n+            getMetaDataRepositoryInstance().getMetaData(RuntimeTest5.class,\r\n+            broker.getClassLoader(), true);\r\n+        assertTrue(c.contains(rt1));\r\n+        assertTrue(c.contains(rt4));\r\n+        assertTrue(c.contains(rt5));\r\n+        assertEquals(3, c.size());\r\n+    }\r\n+}\r"},{"sha":"a935b8bcf5514d2dd8e3a7307f2942de70e9fffb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","status":"added","additions":292,"deletions":0,"changes":292,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,292 @@\n+/*\r\n+ * TestComplexQueries.java\r\n+ *\r\n+ * Created on October 17, 2006, 2:59 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexA;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexB;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexC;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexD;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexE;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexF;\r\n+import org.apache.openjpa.persistence.query.common.apps.ComplexG;\r\n+import junit.framework.AssertionFailedError;\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestComplexQueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestComplexQueries\r\n+     */\r\n+\r\n+    public TestComplexQueries(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        clear();\r\n+    }\r\n+\r\n+    public void clear() {\r\n+        deleteAll(ComplexA.class);\r\n+        deleteAll(ComplexB.class);\r\n+        deleteAll(ComplexC.class);\r\n+        deleteAll(ComplexD.class);\r\n+        deleteAll(ComplexE.class);\r\n+        deleteAll(ComplexF.class);\r\n+        deleteAll(ComplexG.class);\r\n+    }\r\n+\r\n+    public void complexQuery(int size, Object ob, String filter, Class c) {\r\n+\r\n+//        PersistenceManager pm = getPM();\r\n+        Broker broker = getBrokerFactory().newBroker();\r\n+        broker.setIgnoreChanges(false);\r\n+        broker.begin();\r\n+\r\n+        broker.persist(ob, null);\r\n+        // test in-memory\r\n+        // assertSize (size, pm.newQuery (c, filter));\r\n+        broker.commit();\r\n+\r\n+        broker.begin();\r\n+        // test against database\r\n+//        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM \"+c.getSimpleName()+\"o WHERE o.\"+filter);\r\n+        String qstrng =\r\n+            \"SELECT o FROM \" + c.getSimpleName() + \" o WHERE o.\" + filter;\r\n+        assertSize(size,\r\n+            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\r\n+\r\n+        broker.commit();\r\n+        broker.close();\r\n+\r\n+        broker = getBrokerFactory().newBroker();\r\n+        broker.begin();\r\n+        // test again against a new PM, for good measure\r\n+        assertSize(size,\r\n+            (List) broker.newQuery(JPQLParser.LANG_JPQL, c, qstrng).execute());\r\n+        broker.rollback();\r\n+\r\n+        broker.close();\r\n+    }\r\n+\r\n+    public void testComplex1() {\r\n+        complexQuery(1,\r\n+            new ComplexA(\"test\", 0, null, null),\r\n+            \"stringA = \\'test\\'\",\r\n+            ComplexA.class);\r\n+    }\r\n+\r\n+    public void testComplex2() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"stringG = \\'testg\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex3() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex4() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex5() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex6() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex7() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n+                + \" AND o.f.e.stringE = \\'teste\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex8() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n+                + \" AND o.f.e.stringE = \\'teste\\'\"\r\n+                + \" AND o.f.stringF = \\'testf\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex9() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.e.d.c.b.a.stringA = \\'testa\\'\"\r\n+                + \" AND o.f.e.d.c.b.stringB = \\'testb\\'\"\r\n+                + \" AND o.f.e.d.c.stringC = \\'testc\\'\"\r\n+                + \" AND o.f.e.d.stringD = \\'testd\\'\"\r\n+                + \" AND o.f.e.stringE = \\'teste\\'\"\r\n+                + \" AND o.f.stringF = \\'testf\\'\"\r\n+                + \" AND o.f.e.d.intD < 1\"\r\n+                + \" AND o.f.e.d.intD > -1\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex10() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.stringF = \\'testf\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex11() {\r\n+        complexQuery(1,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.stringF = \\'testf\\' AND o.stringG = \\'testg\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+\r\n+    public void testComplex12() {\r\n+        try {\r\n+            complexQuery(1,\r\n+                new ComplexG(\"testg\", 0, null,\r\n+                    new ComplexF(\"testf\", 0, null, null,\r\n+                        new ComplexE(\"teste\", 0, null, null,\r\n+                            new ComplexD(\"testd\", 0, null, null,\r\n+                                new ComplexC(\"testc\", 0, null, null,\r\n+                                    new ComplexB(\"testb\", 0, null, null,\r\n+                                        new ComplexA(\"testa\", 0, null,\r\n+                                            null))))))),\r\n+                \"f.stringF = \\'testf\\'OR o.stringG = \\'testg\\'\",\r\n+                ComplexG.class);\r\n+        } catch (junit.framework.AssertionFailedError afe) {\r\n+            bug(449, afe, \"ORs and relational queries\");\r\n+        }\r\n+    }\r\n+\r\n+    public void testComplex13() {\r\n+        complexQuery(0,\r\n+            new ComplexG(\"testg\", 0, null,\r\n+                new ComplexF(\"testf\", 0, null, null,\r\n+                    new ComplexE(\"teste\", 0, null, null,\r\n+                        new ComplexD(\"testd\", 0, null, null,\r\n+                            new ComplexC(\"testc\", 0, null, null,\r\n+                                new ComplexB(\"testb\", 0, null, null,\r\n+                                    new ComplexA(\"testa\", 0, null, null))))))),\r\n+            \"f.stringF = \\'testfXXX\\'\",\r\n+            ComplexG.class);\r\n+    }\r\n+}\r"},{"sha":"5b603edd5f99b3ff5bb6935d8dfc195e53f39faa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+\r\n+public class TestDataStoreActions\r\n+    extends SingleEMTestCase {\r\n+\r\n+    @Override\r\n+    public void setUp() {\r\n+        setUp(AllFieldTypes.class);\r\n+    }\r\n+\r\n+    public void testDataStoreActions() {\r\n+        OpenJPAQuery q = em.createQuery(\"select o from AllFieldTypes o\");\r\n+        String[] sql = q.getDataStoreActions(null);\r\n+        assertEquals(1, sql.length);\r\n+        assertTrue(sql[0].startsWith(\"SELECT\"));\r\n+    }\r\n+}\r"},{"sha":"2f8bcb5625f7d20fffb0e17d8ec2a2b5ea39b20e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.ProductOrder;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.LineItem;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Product;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Customer;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Address;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Company;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Employee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.PartTimeEmployee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.FullTimeEmployee;\r\n+import org.apache.openjpa.persistence.models.company.fetchlazy.Person;\r\n+\r\n+public class TestDistinctQueries extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Address.class, Company.class, Customer.class, Employee.class,\r\n+            FullTimeEmployee.class, LineItem.class, PartTimeEmployee.class,\r\n+            Person.class, Product.class, ProductOrder.class, CLEAR_TABLES);\r\n+\r\n+        ProductOrder order = new ProductOrder();\r\n+        LineItem item0 = new LineItem();\r\n+        LineItem item1 = new LineItem();\r\n+        LineItem item2 = new LineItem();\r\n+        order.getItems().add(item0);\r\n+        order.getItems().add(item1);\r\n+        order.getItems().add(item2);\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(order);\r\n+        em.persist(item0);\r\n+        em.persist(item1);\r\n+        em.persist(item2);\r\n+        em.getTransaction().commit();\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctJoinFetchQuery() {\r\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n+            \"left join fetch o.items\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctJoinQuery() {\r\n+        List l = em.createQuery(\"select o from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testNoDuplicateResultsInDistinctQuery() {\r\n+        List l = em.createQuery(\"select distinct o from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(1, l.size());\r\n+    }\r\n+\r\n+    public void testDuplicateResultsInNonDistinctConstructorJoinQuery() {\r\n+        List l = em.createQuery(\"select new \" +\r\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n+            \"o.id) from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(3, l.size());\r\n+    }\r\n+\r\n+    public void testNoDuplicateResultsInDistinctConstructorQuery()\r\n+        throws NoSuchMethodException {\r\n+        List l = em.createQuery(\"select distinct new \" +\r\n+            \"org.apache.openjpa.persistence.query.TestDistinctQueries$Holder(\" +\r\n+            \"o.id) from LAZ_ProductOrder o \" +\r\n+            \"left join o.items item\").getResultList();\r\n+        assertEquals(1, l.size());\r\n+    }\r\n+\r\n+    public static class Holder {\r\n+        public Holder(long id) {\r\n+            // we don't actually do anything with the returned data\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"630a61878ad48054b7943f4a203c4cf3af443fc4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDupNamedQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestDupNamedQuery extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleEntity.class, SimpleEntity2.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"Name One\", \"Value One\"));\n+        em.persist(new SimpleEntity(\"Name Two\", \"Value Two\"));\n+        em.persist(new SimpleEntity2(\"Name2 One\", \"Value2 One\"));\n+        em.persist(new SimpleEntity2(\"Name2 Two\", \"Value2 Two\"));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testSimpleQuery() {\n+        simpleQuery(false, \"FindOne\", \"FindAll\", \"Name One\", \"Value One\",\n+            \"Name Two\", \"Value Two\");\n+        simpleQuery(true, \"Find2One\", \"Find2All\", \"Name2 One\", \"Value2 One\",\n+            \"Name2 Two\", \"Value2 Two\");\n+\n+        simpleQuery(false, \"FindXTwo\", null, \"Name Two\", \"Value Two\", null,\n+            null);\n+    }\n+\n+    private void simpleQuery(boolean simple2, String findOneQName,\n+        String findAllQName, String nameOne, String ValueOne, String nameTwo,\n+        String ValueTwo) {\n+        EntityManager em = emf.createEntityManager();\n+\n+        List list = em.createNamedQuery(findOneQName).setParameter(1, nameOne)\n+            .getResultList();\n+        assertNotNull(list);\n+        assertEquals(list.size(), 1);\n+        Object o = list.get(0);\n+        assertSame(o.getClass(), simple2 ? SimpleEntity2.class\n+            : SimpleEntity.class);\n+        assertEquals(simple2 ? ((SimpleEntity2) o).getValue()\n+            : ((SimpleEntity) o).getValue(), ValueOne);\n+\n+        if (findAllQName != null) {\n+            list = em.createNamedQuery(findAllQName).getResultList();\n+            assertNotNull(list);\n+            assertEquals(list.size(), 2);\n+            for (Iterator resultIter = list.iterator(); resultIter.hasNext();) {\n+                o = resultIter.next();\n+                assertSame(o.getClass(), simple2 ? SimpleEntity2.class\n+                    : SimpleEntity.class);\n+                String n = null;\n+                String v = null;\n+                if (simple2) {\n+                    n = ((SimpleEntity2) o).getName();\n+                    v = ((SimpleEntity2) o).getValue();\n+                } else {\n+                    n = ((SimpleEntity) o).getName();\n+                    v = ((SimpleEntity) o).getValue();\n+                }\n+                if (n.equals(nameOne)) {\n+                    assertTrue(v.equals(ValueOne));\n+                } else if (n.equals(nameTwo)) {\n+                    assertTrue(v.equals(ValueTwo));\n+                } else {\n+                    assertTrue(false);\n+                }\n+            }\n+        }\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestDupNamedQuery.class);\n+    }\n+}"},{"sha":"fd1702470af48f709fa256d1a796bb478c69dc3c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,197 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+\r\n+public class TestEJBDeleteUpdateImpl extends BaseQueryTest {\r\n+\r\n+    RuntimeTest1 runt1;\r\n+    RuntimeTest2 runt2;\r\n+    Entity1 ent;\r\n+\r\n+    public TestEJBDeleteUpdateImpl(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        runt1 = new RuntimeTest1(1);\r\n+        runt1.setStringField(\"runt1\");\r\n+        runt1.setSelfOneOne(new RuntimeTest1(2));\r\n+        runt2 = new RuntimeTest2(3);\r\n+        runt2.setStringField(\"runt2\");\r\n+\r\n+        ent = new Entity1(23, \"UPDATEST\", 100);\r\n+\r\n+        em.persist(runt1);\r\n+        em.persist(runt2);\r\n+        em.persist(ent);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate1() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 ret = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"runt1\", ret.getStringField());\r\n+        assertNotNull(ret.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate =\r\n+            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\r\n+        int updatedEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"runner13\")\r\n+            .setParameter(\"stdfield\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, updatedEntities);\r\n+\r\n+        endTx(em);\r\n+\r\n+        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        em.refresh(ret2);\r\n+\r\n+        assertNotNull(ret2);\r\n+        assertEquals(\"runner13\", ret2.getStringField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate2() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\r\n+            \"SET x.stringField = :strngfld \" +\r\n+            \"WHERE x.stringField = :field\";\r\n+        int upEntities = em.createQuery(ejbqlUpdate)\r\n+            .setParameter(\"strngfld\", \"upd\")\r\n+            .setParameter(\"field\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, upEntities);\r\n+\r\n+        endTx(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 inst = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        em.refresh(inst);\r\n+\r\n+        assertNotNull(inst);\r\n+        assertEquals(\"upd\", inst.getStringField());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete1() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate = \"DELETE  FROM RuntimeTest1 s \" +\r\n+            \"WHERE s.stringField = :strngfld\";\r\n+        int delEntity = em.createQuery(ejbdelUpdate)\r\n+            .setParameter(\"strngfld\", \"runt1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(1, delEntity);\r\n+\r\n+        RuntimeTest1 del = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNull(del);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testDelete2() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, em.getObjectId(runt1));\r\n+        assertNotNull(run);\r\n+        assertEquals(\"runt1\", run.getStringField());\r\n+        assertNotNull(run.getSelfOneOne());\r\n+\r\n+        String ejbdelUpdate =\r\n+            \"DELETE  FROM RuntimeTest1 r WHERE r.stringField = ?1\";\r\n+        Query query = em.createQuery(ejbdelUpdate);\r\n+\r\n+        query.setParameter(1, \"runt1\");\r\n+        int ok = query.executeUpdate();\r\n+\r\n+        assertEquals(1, ok);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUpdate3() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Entity1 ent = em.find(Entity1.class, 23);\r\n+\r\n+        assertNotNull(ent);\r\n+        assertEquals(\"UPDATEST\", ent.getStringField());\r\n+\r\n+        int upd = em.createQuery(\r\n+            \"UPDATE Entity1 e SET e.stringField = \\'UPDATEFAILED\\' WHERE \" +\r\n+                \"e.pk = 23\").executeUpdate();\r\n+\r\n+        assertEquals(1, upd);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"c7020e6eda83eb6a1b02c145b9a47032287829fc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n+\r\n+public class TestEJBPolymorphicQuery extends BaseQueryTest {\r\n+\r\n+    public TestEJBPolymorphicQuery(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        deleteAll(RuntimeTest2.class);\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int run1 = 10;\r\n+        int run2 = 15;\r\n+\r\n+        for (int i = 0; i < run1; i++) {\r\n+            RuntimeTest1 rt = new RuntimeTest1(i);\r\n+            rt.setStringField(\"foo \" + i);\r\n+            em.persist(rt);\r\n+        }\r\n+\r\n+        for (int i = 10; i < run2; i++) {\r\n+            em.persist(new RuntimeTest2(i));\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /**\r\n+     * Ensures that when a select query is ran against an entity at the top of the hierarchy\r\n+     * that the result is its instances and that of all its subclass.\r\n+     */\r\n+    public void testPolymorphicSelect() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testPolymorphicDelete() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        int l = em.createQuery(\"Delete from RuntimeTest1\")\r\n+            .executeUpdate();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(15, l);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r"},{"sha":"1c5fc579579f0e60d135a367257cac5d5bb53cca","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,151 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity2;\r\n+\r\n+public class TestEJBQueryInterface extends BaseQueryTest {\r\n+\r\n+    public TestEJBQueryInterface(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+\r\n+        int instNum = 10;\r\n+\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        //create and persist multiple entity1 instances\r\n+        for (int i = 0; i < instNum; i++) {\r\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n+            ent.setEntity2Field(ent2);\r\n+            em.persist(ent);\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testResultList() {\r\n+        EntityManager em = currentEntityManager();\r\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .getResultList();\r\n+\r\n+        assertEquals(10, list.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testGetSingleList() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        Entity1 ret =\r\n+            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\r\n+                .getSingleResult();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(\"string2\", ret.getStringField());\r\n+        assertEquals(4, ret.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExecuteUpdate() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+        int ret = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 2\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret, 1);\r\n+\r\n+        int ret2 = em.createQuery(\"DELETE FROM Entity1 o WHERE o.pk = 22\")\r\n+            .executeUpdate();\r\n+\r\n+        assertEquals(ret2, 0);\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetMaxResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n+            .setMaxResults(5)\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(l);\r\n+        assertEquals(5, l.size());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSetFirstResults() {\r\n+        EntityManager em = currentEntityManager();\r\n+\r\n+        List l = em.createQuery(\"Select object(o) from Entity1 o order by o.pk\")\r\n+            .setFirstResult(3)\r\n+            .getResultList();\r\n+\r\n+        Entity1 ent = (Entity1) l.get(0);\r\n+\r\n+        assertNotNull(ent);\r\n+        assertEquals(\"string3\", ent.getStringField());\r\n+        assertEquals(5, ent.getIntField());\r\n+\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    // Tests Binding an argument to a named parameter.\r\n+    // pk, the named parameter --Not working yet--\r\n+    public void testSetParameter1() {\r\n+        EntityManager em = currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        List ret =\r\n+            em.createQuery(\"SELECT o FROM Entity1 o WHERE o.stringField = :fld\")\r\n+                .setParameter(\"fld\", \"string1\")\r\n+                .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        ret = em.createNamedQuery(\"setParam1\")\r\n+            .setParameter(\"fld\", \"string1\")\r\n+            .getResultList();\r\n+\r\n+        assertNotNull(ret);\r\n+        assertEquals(1, ret.size());\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    //rest of the interface is tested by the CTS\r\n+}\r"},{"sha":"2aff9359d68281c802bc284c6c949a65bf759d3d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,55 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Collection;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestEscapedSingleQuotesInJPQL\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AllFieldTypes.class, CLEAR_TABLES);\r\n+\r\n+        AllFieldTypes aft = new AllFieldTypes();\r\n+        aft.setStringField(\"foo'bar\");\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(aft);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testEscapedSingleQuotesInJPQL() {\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        OpenJPAQuery q = em.createQuery(\"select count(o) \" +\r\n+            \"from AllFieldTypes o where o.stringField = 'foo''bar'\");\r\n+        assertEquals(1, ((Number) q.getSingleResult()).longValue());\r\n+\r\n+        Collection all = em.createQuery(\"select o from AllFieldTypes o\")\r\n+            .getResultList();\r\n+        q.setCandidateCollection(all);\r\n+        assertEquals(1, ((Number) q.getSingleResult()).longValue());\r\n+    }\r\n+}\r"},{"sha":"7263bedb724a7a12f36d0f7457aac23dde97df44","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.FlushModeType;\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+public class TestInMemoryQueryMatchEscapes\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AllFieldTypes.class);\r\n+    }\r\n+    \r\n+    public void testDatabaseEscape() {\r\n+        OpenJPAQuery q = escapeHelper(false);\r\n+        q.setFlushMode(FlushModeType.AUTO);\r\n+        q.getEntityManager().flush();\r\n+        AllFieldTypes aft = (AllFieldTypes) q.getSingleResult();\r\n+        assertEquals(\"foo_bar\", aft.getStringField());\r\n+        q.getEntityManager().getTransaction().rollback();\r\n+    }\r\n+    \r\n+    public void testInMemoryEscape() {\r\n+        OpenJPAQuery q = escapeHelper(true);\r\n+        q.setFlushMode(FlushModeType.COMMIT);\r\n+        try {\r\n+            q.getSingleResult();\r\n+            fail(\"OpenJPA doesn't support escape syntax for in-mem queries\");\r\n+        } catch (Exception e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+    \r\n+    private OpenJPAQuery escapeHelper(boolean inMem) {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AllFieldTypes aft = new AllFieldTypes();\r\n+        aft.setStringField(\"foo_bar\");\r\n+        em.persist(aft);\r\n+        aft = new AllFieldTypes();\r\n+        aft.setStringField(\"foozbar\");\r\n+        em.persist(aft);\r\n+\r\n+        return (OpenJPAQuery) em.createQuery(\r\n+            \"select e from AllFieldTypes e where e.stringField \" +\r\n+            \"like 'foox_bar' escape 'x'\");\r\n+    }\r\n+}\r"},{"sha":"9f545dc1b92aef93e8cf38bb46a36989d04c7ebe","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,91 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest3;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestJPAQuerySubclassFunc extends BaseQueryTest {\r\n+\r\n+    public TestJPAQuerySubclassFunc(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm = getEM();\r\n+        startTx(pm);\r\n+\r\n+        pm.persist(new RuntimeTest1(\"TestQueryResults1\", 10));\r\n+        pm.persist(new RuntimeTest1(\"TestQueryResults3\", 10));\r\n+        pm.persist(new RuntimeTest1(\"TestQueryResults5\", 10));\r\n+\r\n+        pm.persist(new RuntimeTest3(\"TestQueryResults2\", 10));\r\n+        pm.persist(new RuntimeTest3(\"TestQueryResults4\", 10));\r\n+        pm.persist(new RuntimeTest3(\"TestQueryResults6\", 10));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testSubClassIsTrueFunction() {\r\n+        OpenJPAEntityManager pm = getEM();\r\n+        startTx(pm);\r\n+\r\n+        OpenJPAQuery query =\r\n+            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\r\n+        query.setSubclasses(true);\r\n+\r\n+        List list = query.getResultList();\r\n+\r\n+        assertEquals(\"I expect size to be 6 since subclasses are included\", 6,\r\n+            list.size());\r\n+        assertTrue(list.contains(\"TestQueryResults1\"));\r\n+        assertTrue(list.contains(\"TestQueryResults2\"));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testSubClassIsFalseFunction() {\r\n+        OpenJPAEntityManager pm = getEM();\r\n+        startTx(pm);\r\n+\r\n+        OpenJPAQuery query =\r\n+            pm.createQuery(\"SELECT r.stringField FROM RuntimeTest1 r\");\r\n+        query.setSubclasses(false);\r\n+\r\n+        List list = query.getResultList();\r\n+\r\n+        assertEquals(\"I expect size to be 3 since subclasses are not included\",\r\n+            3, list.size());\r\n+        assertTrue(list.contains(\"TestQueryResults1\"));\r\n+        assertTrue(list.contains(\"TestQueryResults3\"));\r\n+        assertTrue(list.contains(\"TestQueryResults5\"));\r\n+\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"ff3f3064bc8e8786f05c9b68859f59755e1332b5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestJPQLWithoutIdentificationVariable extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(ManyOneEntity.class, ManyOneEntitySub.class);\r\n+    }\r\n+\r\n+    public void testJPQLWithoutIdentificationVariable() {\r\n+        try {\r\n+            em.createQuery(\"select o from ManyOneEntity o \" +\r\n+                \"where rel.name = :name\").compile();\r\n+        } catch (RuntimeException e) {\r\n+            assertTrue(e.getMessage().contains(\r\n+                \"Perhaps you forgot to prefix the path\"));\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"0eadbb560a18dcf7483ac942c5ac67215f48e608","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * TestMathQueries.java\r\n+ *\r\n+ * Created on October 18, 2006, 1:06 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestMathQueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestMathQueries\r\n+     */\r\n+\r\n+    public TestMathQueries(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(QueryTest1.class);\r\n+        OpenJPAEntityManager pm = getEM();\r\n+        startTx(pm);\r\n+\r\n+        for (int i = 0; i <= 100; i++) {\r\n+            QueryTest1 ob = new QueryTest1();\r\n+            ob.setNum(i);\r\n+            pm.persist(ob);\r\n+        }\r\n+        endTx(pm);\r\n+\r\n+        for (long i = 0; i < 100; i++) {\r\n+            OpenJPAQuery q =\r\n+                pm.createQuery(\"SELECT q FROM QueryTest1 q WHERE q.numb = :ind\")\r\n+                    .setParameter(\"ind\", i);\r\n+            List l = q.getResultList();\r\n+            assertSize(1, l);\r\n+        }\r\n+    }\r\n+\r\n+    public void testMultipleQuery() {\r\n+        try {\r\n+\r\n+            OpenJPAQuery q1, q2;\r\n+            q1 = getEM().createQuery(\r\n+                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb = 25\");\r\n+            q2 = getEM().createQuery(\r\n+                \"SELECT q FROM QueryTest1 q WHERE q.numb * q.numb > 25\");\r\n+\r\n+            assertSize(95, q2.getResultList());\r\n+            assertSize(1, q1.getResultList());\r\n+        }\r\n+        catch (Exception e) {\r\n+            bug(AbstractTestCase.Platform.EMPRESS, 890, e,\r\n+                \"Empress cannot handle certain \"\r\n+                    + \"aggregate functions\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"f47412b34618e44cd407b7fbbb9c289472f7b283","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Map;\r\n+import java.util.ArrayList;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.QueryImpl;\r\n+import org.apache.openjpa.persistence.ArgumentException;\r\n+import org.apache.openjpa.kernel.QueryLanguages;\r\n+import org.apache.openjpa.kernel.StoreContext;\r\n+import org.apache.openjpa.kernel.FetchConfiguration;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.lib.rop.ResultObjectProvider;\r\n+import org.apache.openjpa.lib.rop.ListResultObjectProvider;\r\n+\r\n+public class TestMethodQLQuery\r\n+    extends SingleEMTestCase {\r\n+\r\n+    @Override\r\n+    public void setUp() {\r\n+        setUp(SimpleEntity.class);\r\n+    }\r\n+\r\n+    public void testMethodQLWithoutParametersDeclared() {\r\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n+            getClass().getName() + \".echo\");\r\n+        ((QueryImpl) q).getDelegate().setCandidateType(\r\n+            SimpleEntity.class, true);\r\n+        q.setParameter(\"param\", 5);\r\n+        ((QueryImpl) q).getDelegate().declareParameters(\"Integer param\");\r\n+        assertEquals(5, q.getResultList().get(0));\r\n+    }\r\n+\r\n+    public void testInvalidMethodReturnType() {\r\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n+            getClass().getName() + \".invalidReturnMeth\");\r\n+        ((QueryImpl) q).getDelegate().setCandidateType(\r\n+            SimpleEntity.class, true);\r\n+        try {\r\n+            q.getResultList().get(0);\r\n+            fail(\"should have gotten an exception since method is invalid\");\r\n+        } catch (ArgumentException ae) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+\r\n+    public void testVoidMethodReturnType() {\r\n+        OpenJPAQuery q = em.createQuery(QueryLanguages.LANG_METHODQL,\r\n+            getClass().getName() + \".voidMeth\");\r\n+        ((QueryImpl) q).getDelegate().setCandidateType(\r\n+            SimpleEntity.class, true);\r\n+        try {\r\n+            q.getResultList().get(0);\r\n+            fail(\"should have gotten an exception since method is invalid\");\r\n+        } catch (ArgumentException ae) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+\r\n+    public static ResultObjectProvider echo(StoreContext ctx,\r\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n+        return new ListResultObjectProvider(new ArrayList(params.values()));\r\n+    }\r\n+\r\n+    public static void voidMeth(StoreContext ctx,\r\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n+    }\r\n+\r\n+    public static Object invalidReturnMeth(StoreContext ctx,\r\n+        ClassMetaData meta, boolean subs, Map params, FetchConfiguration conf) {\r\n+        return null;\r\n+    }\r\n+}\r"},{"sha":"0b1263393542c09c4b156089c07bba66f7238cd0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,114 @@\n+/*\r\n+ * TestNamedQueries.java\r\n+ *\r\n+ * Created on October 18, 2006, 1:17 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.QueryTest1;\r\n+\r\n+import org.apache.openjpa.meta.QueryMetaData;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestNamedQueries extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestNamedQueries\r\n+     */\r\n+\r\n+    public TestNamedQueries(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(QueryTest1.class);\r\n+\r\n+        OpenJPAEntityManager pm = getEM();\r\n+        startTx(pm);\r\n+        QueryTest1 pc = null;\r\n+        for (int i = 0; i < 10; i++) {\r\n+            pc = new QueryTest1();\r\n+            if (i < 5)\r\n+                pc.setNum(4);\r\n+            else\r\n+                pc.setNum(i + 10);\r\n+            pm.persist(pc);\r\n+        }\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNamedClassQuery() {\r\n+        OpenJPAEntityManager pm = getEM();\r\n+\r\n+        OpenJPAQuery query = pm.createQuery(\"SELECT o FROM QueryTest1 o\");\r\n+        query.setResultClass(QueryTest1.class);\r\n+\r\n+        assertEquals(QueryTest1.class, query.getResultClass());\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n+        assertEquals(QueryTest1.class, query.getResultClass());\r\n+        //FIXME jthomas\r\n+        /*\r\n+        assertEquals(\"import java.util.*\", query.getImports());\r\n+        assertEquals(\"int pnum\", query.getParameters());\r\n+        assertEquals(\"QueryTest4 v4\", query.getVariables());\r\n+        assertEquals(\"sum(num)\", query.getResult());\r\n+        assertEquals(\"num\", query.getGrouping());\r\n+        */\r\n+        QueryMetaData meta = ((OpenJPAEntityManagerSPI) pm).getConfiguration().\r\n+            getMetaDataRepositoryInstance().getQueryMetaData(null,\r\n+            \"named\", pm.getClassLoader(), true);\r\n+        assertNotNull(meta);\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", meta.getQueryString());\r\n+        assertEquals(null, meta.getResultType());\r\n+\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testNamespace() {\r\n+        OpenJPAEntityManager pm = getEM();\r\n+        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n+        query.closeAll();\r\n+        endEm(pm);\r\n+    }\r\n+\r\n+    public void testSystemJDOQL() {\r\n+        // make sure local query metadata is parsed\r\n+        OpenJPAEntityManager pm = getEM();\r\n+\r\n+        OpenJPAQuery query = (OpenJPAQuery) pm.createNamedQuery(\"named\");\r\n+        assertEquals(\"SELECT o FROM QueryTest1 o\", query.getQueryString());\r\n+        assertEquals(QueryTest1.class, query.getResultClass());\r\n+        assertEquals(10, ((Collection) query.getResultList()).size());\r\n+        query.closeAll();\r\n+        endEm(pm);\r\n+    }\r\n+}\r"},{"sha":"def0a03001285d8c29cb9e8d2f2c1bfc18b9faa0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,133 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Osoba;\r\n+import org.apache.openjpa.persistence.query.common.apps.Projekt;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests that managed, unmanaged or even transient Entity can be used as a \r\n+ * query parameter.\r\n+ * \r\n+ * Originally raised as a JIRA Issue\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-187\">OPENJPA-187</A>\r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ *\r\n+ */\r\n+public class TestNewEntityAsQueryParameter extends SingleEMFTestCase {\r\n+\t\r\n+\tpublic static final String ID_PROJEKT1 = \"OpenJPA\";\r\n+\tpublic static final String ID_PROJEKT2 = \"Tomcat\";\r\n+\t\r\n+\tpublic static final int MEMBER_COUNT_PROJEKT1 = 6;\r\n+\tpublic static final int MEMBER_COUNT_PROJEKT2 = 4;\r\n+\tpublic static final int MEMBER_COUNT_TOTAL    = 8;\r\n+\t\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Osoba.class, Projekt.class,\r\n+\t\t\t\t\"openjpa.Log\", \"SQL=TRACE\");\r\n+\t\tcreateData();\r\n+\t}\r\n+\t\r\n+\tprivate void createData() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\t\r\n+\t\tOsoba[] osoby = new Osoba[MEMBER_COUNT_TOTAL];\r\n+\t\tfor (int i=0; i<MEMBER_COUNT_TOTAL; i++) {\r\n+\t\t\tosoby[i] = new Osoba(\"Osoba-\"+(i+1), 20+i);\r\n+\t\t\tem.persist(osoby[i]);\r\n+\t\t}\r\n+\t\t\r\n+\t\t\r\n+\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\r\n+\t\tem.persist(projekt1);\r\n+\t\tem.persist(projekt2);\r\n+\t\t\r\n+\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT1; i++)\r\n+\t\t\tlink(osoby[i], projekt1);\r\n+\t\tfor (int i=0; i<MEMBER_COUNT_PROJEKT2; i++)\r\n+\t\t\tlink(osoby[osoby.length-i-1], projekt2);\r\n+\t\t\t\t\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.clear();\r\n+\t}\r\n+\r\n+\tpublic void tearDown() throws Exception {\r\n+\t\tsuper.tearDown();\r\n+\t}\r\n+\t\r\n+\tpublic void testQueryWithTransientInstanceAsParameter() {\r\n+\t\tProjekt projekt1 = new Projekt(ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = new Projekt(ID_PROJEKT2);\r\n+\t\t\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tqueryWithParameter(em, projekt1, projekt2);\r\n+\t}\r\n+\t\r\n+\tpublic void testQueryWithUnmanagedPersistentInstanceAsParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\r\n+\t\tem.clear();\r\n+\t\tassertFalse(em.contains(projekt1));\r\n+\t\tassertFalse(em.contains(projekt2));\r\n+\t\t\r\n+\t\tqueryWithParameter(em, projekt1, projekt2);\r\n+\t}\r\n+\r\n+\tpublic void testQueryWithManagedPersistentInstanceAsParameter() {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tProjekt projekt1 = em.find(Projekt.class, ID_PROJEKT1);\r\n+\t\tProjekt projekt2 = em.find(Projekt.class, ID_PROJEKT2);\r\n+\t\tassertTrue(em.contains(projekt1));\r\n+\t\tassertTrue(em.contains(projekt2));\r\n+\t\t\r\n+\t\tqueryWithParameter(em, projekt1, projekt2);\r\n+\t}\r\n+\t\r\n+\tvoid queryWithParameter(EntityManager em, Projekt projekt1, Projekt projekt2) {\r\n+\t\tString jpql = \"SELECT DISTINCT o FROM Osoba o WHERE :projekt MEMBER OF o.projekty\";\r\n+\t\tem.getTransaction().begin();\r\n+\t\tQuery query = em.createQuery(jpql);\r\n+\t\t\r\n+\t\tquery.setParameter(\"projekt\", projekt1);\r\n+\t\tList<Osoba> osoby = query.getResultList();\r\n+\t\tassertEquals(MEMBER_COUNT_PROJEKT1, osoby.size()); \r\n+\t\t\r\n+\t\tquery.setParameter(\"projekt\", projekt2);\r\n+\t\tosoby = query.getResultList();\r\n+\t\tassertEquals(MEMBER_COUNT_PROJEKT2, osoby.size());\r\n+\t\tem.getTransaction().rollback();\r\n+\t}\r\n+\t\r\n+\tvoid link(Osoba o, Projekt p) {\r\n+\t\to.addProjekty(p);\r\n+\t\tp.addOsoba(o);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"435ace1b8f2c87900c88713c9c0dd5b3b589bba2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewlinesInQueries.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewlinesInQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewlinesInQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewlinesInQueries.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that our parser handles newlines in queries\n+ */\n+public class TestNewlinesInQueries\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleEntity.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"foo\", \"bar\"));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e \\n from simple e\");\n+        SimpleEntity e = (SimpleEntity) q.getSingleResult();\n+        assertEquals(\"foo\", e.getName());\n+        em.close();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"c305aeeb4424cb7ae4f4f81104b55fc5af28c065","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,109 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwned;\r\n+import org.apache.openjpa.persistence.jdbc.common.apps.UnidirectionalOneToOneOwner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+\r\n+/**\r\n+ * The query uses projection and result contains the same instance once as\r\n+ * a direct projection and again as a fetch group of the other projection.\r\n+ * Does the query return two separate instances or one identical instance?\r\n+ * \r\n+ * Originally reported as two different failures:\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-209\">OPENJPA-209</A>\r\n+ * <A HREF=\"https://issues.apache.org/jira/browse/OPENJPA-210\">OPENJPA-210</A> \r\n+ * \r\n+ * @author Pinaki Poddar\r\n+ */\r\n+public class TestProjectionQueryWithIdenticalResult extends SingleEMFTestCase {\r\n+\tprivate static boolean USE_TXN = true; \r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES,\r\n+        \t  UnidirectionalOneToOneOwned.class, \r\n+        \t  UnidirectionalOneToOneOwner.class);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        UnidirectionalOneToOneOwner owner = new UnidirectionalOneToOneOwner();\r\n+        owner.setMarker(\"Owner\");\r\n+        UnidirectionalOneToOneOwned owned = new UnidirectionalOneToOneOwned();\r\n+        owned.setMarker(\"Owned\");\r\n+        owner.setOwned(owned);\r\n+        em.persist(owner);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+    \r\n+\tpublic void testDuplicateResultInProjection1() {\r\n+\t\tString jpql = \"SELECT p.owned, p FROM UnidirectionalOneToOneOwner p\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDuplicateResultInProjection2() {\r\n+\t\tString jpql = \"SELECT p, p.owned FROM UnidirectionalOneToOneOwner p\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDuplicateResultInProjection3() {\r\n+\t\tString jpql = \"SELECT p, q FROM UnidirectionalOneToOneOwner p, \" +\r\n+\t\t\t\t\t\t\"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[0]).getOwned() == row[1]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tpublic void testDuplicateResultInProjection4() {\r\n+\t\tString jpql = \"SELECT q, p FROM UnidirectionalOneToOneOwner p, \" +\r\n+\t\t\t\t\t    \"UnidirectionalOneToOneOwned q WHERE p.owned = q\";\r\n+\t\tList<Object[]> result = executeQuery(jpql, USE_TXN);\r\n+\t\tfor (Object[] row : result) {\r\n+\t\t\tassertTrue(row[0] instanceof UnidirectionalOneToOneOwned);\r\n+\t\t\tassertTrue(row[1] instanceof UnidirectionalOneToOneOwner);\r\n+\t\t\tassertTrue(((UnidirectionalOneToOneOwner)row[1]).getOwned() == row[0]);\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\tprivate List executeQuery(String jpql, boolean useTxn) {\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tList result = em.createQuery(jpql).getResultList();\r\n+\t\tem.getTransaction().rollback();\r\n+\t\treturn result;\r\n+\t}\r\n+}\r"},{"sha":"dc6409993e9124e79681a126729a159ca4a0cb97","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","status":"added","additions":100,"deletions":0,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExcludingSubclasses.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that we can exclude subclass instances from query results.\n+ *\n+ * @author Abe White\n+ */\n+public class TestQueryExcludingSubclasses\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(ManyOneEntity.class, ManyOneEntitySub.class);\n+\n+        ManyOneEntity e1 = new ManyOneEntity();\n+        e1.setName(\"e1\"); \n+        ManyOneEntity e2 = new ManyOneEntity();\n+        e2.setName(\"e2\"); \n+        ManyOneEntity invalid = new ManyOneEntity();\n+        invalid.setName(\"invalid\"); \n+        ManyOneEntitySub esub1 = new ManyOneEntitySub();\n+        esub1.setName(\"esub1\"); \n+        ManyOneEntitySub esub2 = new ManyOneEntitySub();\n+        esub2.setName(\"esub2\"); \n+        ManyOneEntitySub invalidsub = new ManyOneEntitySub();\n+        invalidsub.setName(\"invalidsub\"); \n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e1);\n+        em.persist(e2);\n+        em.persist(invalid);\n+        em.persist(esub1);\n+        em.persist(esub2);\n+        em.persist(invalidsub);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneEntity e \"\n+            + \"where e.name like 'e%' order by e.name asc\");\n+        List<ManyOneEntity> res = (List<ManyOneEntity>) q.getResultList();\n+        assertEquals(4, res.size());\n+        for (int i = 0; i < 2; i++) {\n+            assertEquals(ManyOneEntity.class, res.get(i).getClass());\n+            assertEquals(\"e\" + (i + 1), res.get(i).getName());\n+        }\n+        for (int i = 0; i < 2; i++) {\n+            assertEquals(ManyOneEntitySub.class, res.get(i + 2).getClass());\n+            assertEquals(\"esub\" + (i + 1), res.get(i + 2).getName());\n+        }\n+        em.close();\n+    }\n+\n+    public void testQueryExcludingSubclasses() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneEntity e \"\n+            + \"where e.name like 'e%' order by e.name asc\");\n+        ((OpenJPAQuery) q).setSubclasses(false);\n+        List<ManyOneEntity> res = (List<ManyOneEntity>) q.getResultList();\n+        assertEquals(2, res.size());\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(ManyOneEntity.class, res.get(i).getClass());\n+            assertEquals(\"e\" + (i + 1), res.get(i).getName());\n+        }\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestQueryExcludingSubclasses.class);\n+    }\n+}\n+"},{"sha":"c9471a78455ee418c4a8da6e597414b06b18326c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * TestQueryExpressionSplit.java\r\n+ *\r\n+ * Created on October 18, 2006, 1:57 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+\r\n+\r\n+\r\n+import org.apache.openjpa.kernel.Filters;\r\n+\r\n+public class TestQueryExpressionSplit extends BaseQueryTest {\r\n+\r\n+    /**\r\n+     * Creates a new instance of TestQueryExpressionSplit\r\n+     */\r\n+\r\n+    public TestQueryExpressionSplit(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void testSimple() {\r\n+        assertEquals(new String[]{ \"foo() bar(boo)\" },\r\n+            Filters.splitExpressions(\"foo() bar(boo)\", ',', 3));\r\n+        assertEquals(new String[]{ \"foo() bar(boo)\", \"biz()\", \"baz(boo)\" },\r\n+            Filters.splitExpressions(\"foo() bar(boo), biz(), baz(boo)\",\r\n+                ',', 3));\r\n+    }\r\n+\r\n+    public void testCommaInString() {\r\n+        assertEquals(new String[]{ \"foo \\\"bar(),biz)\\\"\" },\r\n+            Filters.splitExpressions(\"foo \\\"bar(),biz)\\\"\", ',', 3));\r\n+        assertEquals(new String[]{ \"foo 'bar(),\\\"biz)'\", \"boo\" },\r\n+            Filters.splitExpressions(\"foo 'bar(),\\\"biz)', boo\", ',', 3));\r\n+    }\r\n+\r\n+    public void testCommaInFunction() {\r\n+        assertEquals(new String[]{ \"(foo(bar, biz))\",\r\n+            \"boo(biz, baz('xxx,yyy'))\" },\r\n+            Filters.splitExpressions(\"(foo(bar, biz)), \"\r\n+                + \"boo(biz, baz('xxx,yyy'))\", ',', 3));\r\n+    }\r\n+\r\n+    public void testEscapedString() {\r\n+        assertEquals(new String[]{ \"foo \\\"bar\\\\\\\", biz(\\\"\",\r\n+            \"\\\"baz\\\\\\\", boo\\\"\" },\r\n+            Filters.splitExpressions(\"foo \\\"bar\\\\\\\", biz(\\\", \"\r\n+                + \"\\\"baz\\\\\\\", boo\\\"\", ',', 3));\r\n+    }\r\n+\r\n+    private void assertEquals(String[] ans, List test) {\r\n+        List l = Arrays.asList(ans);\r\n+        assertEquals(l + \" != \" + test, l, test);\r\n+    }\r\n+}\r"},{"sha":"b4c53b8a086143bd0c368c8fd84789616949900f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryIdOfRelationDoesNotJoin.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that querying the id of a related many-one (or one-one) does not create\n+ * a join across the tables.\n+ *\n+ * @author Abe White\n+ */\n+public class TestQueryIdOfRelationDoesNotJoin\n+    extends SingleEMFTestCase {\n+\n+    private long e3Id;\n+\n+    public void setUp() {\n+        setUp(ManyOneEntity.class, ManyOneEntitySub.class);\n+\n+        ManyOneEntity e1 = new ManyOneEntity();\n+        e1.setName(\"e1\");\n+        ManyOneEntity e2 = new ManyOneEntity();\n+        e2.setName(\"e2\");\n+        ManyOneEntity e3 = new ManyOneEntity();\n+        e3.setName(\"e3\");\n+        e1.setRel(e3);\n+        e2.setRel(e1);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(e1);\n+        em.getTransaction().commit();\n+        e3Id = e3.getId();\n+\n+        // we intentionally create an orphaned reference on e1.rel\n+        em.getTransaction().begin();\n+        em.remove(e3);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneEntity e \"\n+            + \"where e.rel.id = :id\").setParameter(\"id\", e3Id);\n+        List res = q.getResultList();\n+        assertEquals(1, res.size());\n+\n+        ManyOneEntity e = (ManyOneEntity) res.get(0);\n+        assertEquals(\"e1\", e.getName());\n+        assertNull(e.getRel());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestQueryIdOfRelationDoesNotJoin.class);\n+    }\n+}\n+"},{"sha":"ee68659c01aa92dac81d195abb22096aaf5acfe7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryPagination.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test that query pagination works properly.\n+ */\n+public class TestQueryPagination\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleEntity.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 0));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 1));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 2));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 3));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 4));\n+        em.persist(new SimpleEntity(\"foo\", \"bar\" + 5));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testFirstThenMax() {\n+        helper(true, 2, 3, 3);\n+    }\n+\n+    public void testMaxThenFirst() {\n+        helper(false, 2, 3, 3);\n+    }\n+\n+    public void testNoResultsFirstFirst() {\n+        helper(true, 10, 3, 0);\n+    }\n+\n+    public void testNoResultsFirstLast() {\n+        helper(false, 10, 3, 0);\n+    }\n+\n+    public void testAllResultsFirstFirst() {\n+        helper(true, 0, 10, 6);\n+    }\n+\n+    public void testAllResultsFirstLast() {\n+        helper(false, 0, 10, 6);\n+    }\n+\n+    private void helper(boolean firstFirst, int first, int max, int expected) {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from simple e order by e.value\");\n+        sql.clear();\n+        List<SimpleEntity> fullList = q.getResultList();\n+        if (firstFirst)\n+            q.setFirstResult(first).setMaxResults(max);\n+        else\n+            q.setMaxResults(max).setFirstResult(first);\n+        List<SimpleEntity> list = q.getResultList();\n+        checkSQL();\n+        assertEquals(expected, list.size());\n+        for (int i = 0; i < list.size(); i++) {\n+            assertEquals(\"bar\" + (first + i), list.get(i).getValue());\n+        }\n+        em.close();\n+    }\n+\n+    private void checkSQL() {\n+        assertEquals(2, sql.size());\n+        String noRange = this.sql.get(0);\n+        String withRange = this.sql.get(1);\n+        DBDictionary dict = ((JDBCConfiguration) emf.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (dict.supportsSelectStartIndex || dict.supportsSelectEndIndex)\n+            assertNotEquals(noRange, withRange);\n+        else\n+            assertEquals(noRange, withRange);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"6e7095f87d4f3db526e079171d0a790715935e7b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","status":"added","additions":625,"deletions":0,"changes":625,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,625 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest2;\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest3;\r\n+import org.apache.openjpa.persistence.Extent;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.jdbc.FetchMode;\r\n+import org.apache.openjpa.persistence.jdbc.JDBCFetchPlan;\r\n+\r\n+/**\r\n+ * Test that ResultList objects behaver correctly.\r\n+ *\r\n+ * @author Marc Prud'hommeaux\r\n+ */\r\n+public class TestQueryResults extends BaseQueryTest {\r\n+\r\n+    public TestQueryResults(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        em.persist(new RuntimeTest1(\"TestQueryResults1\", 10));\r\n+        em.persist(new RuntimeTest1(\"TestQueryResults3\", 10));\r\n+        em.persist(new RuntimeTest1(\"TestQueryResults5\", 10));\r\n+        em.persist(new RuntimeTest3(\"TestQueryResults2\", 10));\r\n+        em.persist(new RuntimeTest3(\"TestQueryResults4\", 10));\r\n+        em.persist(new RuntimeTest3(\"TestQueryResults6\", 10));\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testQueryIteratorsReturnFalseForClosedQuery() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM RuntimeTest1 o\");\r\n+        List c = q.getResultList();\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Iterator obtained from Query should return false \"\r\n+                + \"for hasNext() after Query has been closed\");\r\n+    }\r\n+\r\n+    public void testQueryIteratorsThrowExceptionForClosedQuery() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM RuntimeTest1 o\");\r\n+        List c = q.getResultList();\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        try {\r\n+            i.next();\r\n+            fail(\"Iterator.next() should have thrown Exception \"\r\n+                + \"after query.closeAll() was called\");\r\n+        }\r\n+        catch (Exception e) {\r\n+            //\r\n+        }\r\n+    }\r\n+\r\n+    public void testLazyQueryIteratorsReturnFalseForClosedem() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query = \"SELECT o FROM RuntimeTest1 o\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        q.getFetchPlan().setFetchBatchSize(5);\r\n+        List c = q.getResultList();\r\n+\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Lazy result iterator obtained from Query should return \"\r\n+                + \"false for hasNext() after em has been closed\");\r\n+    }\r\n+\r\n+    public void testEagerQueryIteratorsWorkForClosedem() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query = \"SELECT o FROM RuntimeTest1 o\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        q.getFetchPlan().setFetchBatchSize(-1);\r\n+\r\n+        List c = q.getResultList();\r\n+\r\n+        Iterator i = c.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (!i.hasNext())\r\n+            fail(\"Eager result iterator obtained from Query should return \"\r\n+                + \"true for hasNext() after em has been closed\");\r\n+    }\r\n+\r\n+    public void testQueryResultIsList() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query = \"SELECT o FROM RuntimeTest1 o\";\r\n+\r\n+        Collection c = (Collection) em.createQuery(query).getResultList();\r\n+        if (!(c instanceof List))\r\n+            fail(\"Collection (\" + c.getClass() + \") should have \"\r\n+                + \"been a List instance\");\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testQueryResultSizeIsCorrect() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        em.persist(new RuntimeTest2(\"TestQueryResults1\", 10));\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        em = (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query =\r\n+            \"SELECT r FROM RuntimeTest2 r WHERE r.stringField = \\'TestQueryResults1\\'\";\r\n+        List c = em.createQuery(query).getResultList();\r\n+\r\n+        assertEquals(1, c.size());\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExtentIteratorsReturnFalseForClosedExtent() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        Extent extent = em.createExtent(RuntimeTest1.class, true);\r\n+\r\n+        Iterator i = extent.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        extent.closeAll();\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Iterator obtained from Extent should return false \"\r\n+                + \"for hasNext() after Extent has been closed\");\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExtentIteratorsThrowExceptionForClosedExtent() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Extent extent = em.createExtent(RuntimeTest1.class, true);\r\n+\r\n+        Iterator i = extent.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        extent.closeAll();\r\n+\r\n+        try {\r\n+            i.next();\r\n+            fail(\"Iterator.next() should have thrown Exception \"\r\n+                + \"after Extent.closeAll() was called\");\r\n+        } catch (Exception e) {\r\n+            // this is a *good* thing.\r\n+        }\r\n+\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testExtentIteratorsReturnFalseForClosedem() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        Extent extent = em.createExtent(RuntimeTest1.class, true);\r\n+        Iterator i = extent.iterator();\r\n+        if (!(i.hasNext()))\r\n+            fail(\"Iterator should have had next()\");\r\n+        endTx(em);\r\n+        endEm(em);\r\n+\r\n+        if (i.hasNext())\r\n+            fail(\"Iterator obtained from Extent should return false \"\r\n+                + \"for hasNext() after em has been closed\");\r\n+    }\r\n+\r\n+    public void testUniqueReturnsSingleResult() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        String query =\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'TestQueryResults1\\'\";\r\n+        Object obj = em.createQuery(query).getSingleResult();\r\n+\r\n+        assertTrue(obj instanceof RuntimeTest1);\r\n+\r\n+        query =\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'xxxx\\'\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        List l = q.getResultList();\r\n+        assertNotNull(\r\n+            \"expecting l to be null since there is no RuntimeTest1 instance with stringfield=xxxx\",\r\n+            l);\r\n+\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testUniqueThrowsExceptionIfMultipleResults() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        String query = \"SELECT DISTINCT r FROM RuntimeTest1 r\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+\r\n+        try {\r\n+            Object l = q.getSingleResult();\r\n+            fail(\"Unique query matched multiple results.\");\r\n+        }\r\n+        catch (Exception jue) {\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testImpossibleRangeReturnsEmptyList() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+        String query = \"SELECT r FROM RuntimeTest1 r\";\r\n+        OpenJPAQuery q = em.createQuery(query);\r\n+        q.setFirstResult(2);\r\n+        q.setMaxResults(0);\r\n+\r\n+        List results = q.getResultList();\r\n+\r\n+        assertEquals(0, results.size());\r\n+        assertFalse(results.iterator().hasNext());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testImpossibleUniqueRangeReturnsNull() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'TestQueryResults1\\'\");\r\n+        q.setFirstResult(2);\r\n+        q.setMaxResults(0);\r\n+        assertTrue(\r\n+            \"resultlist is not null its size is: \" + q.getResultList().size(),\r\n+            q.getResultList().isEmpty());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testSingleResultUniqueRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r WHERE r.stringField = \\'TestQueryResults1\\'\");\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(1000000);\r\n+\r\n+        assertTrue(\"resultlist is not empty\", (q.getResultList()).isEmpty());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMultiResultUniqueRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT DISTINCT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(2);\r\n+\r\n+        assertEquals(\"TestQueryResults2\",\r\n+            ((RuntimeTest1) q.getResultList().get(0)).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    /* This test is being commented because it was supposed to be a converted test complementing the original JDO test\r\n+      * which uses the setUnique() method available in JDO Query. OpenJPAQuery does not have such a method and hence this test\r\n+      * does not make sense.\r\n+      public void testUniqueThrowsExceptionIfNonUniqueRange()\r\n+     {\r\n+         OpenJPAEntityManager em = (OpenJPAEntityManager) currentEntityManager();\r\n+         startTx(em);\r\n+\r\n+         OpenJPAQuery q = em.createQuery(\"SELECT DISTINCT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+         q.setFirstResult(1);\r\n+         q.setMaxResults(3);\r\n+\r\n+         try\r\n+         {\r\n+             q.getResultList();\r\n+             fail(\"Unique allowed non-unique range.\");\r\n+         }\r\n+         catch (Exception jue)\r\n+         {\r\n+         }\r\n+         q.closeAll();\r\n+         endTx(em);\r\n+         endEm(em);\r\n+     }\r\n+     */\r\n+    public void testFullRange() {\r\n+        try {\r\n+            OpenJPAEntityManager em =\r\n+                (OpenJPAEntityManager) currentEntityManager();\r\n+            startTx(em);\r\n+\r\n+            OpenJPAQuery q = em.createQuery(\r\n+                \"SELECT r FROM RuntimeTest1 ORDER BY r.stringField ASC\");\r\n+            q.setSubclasses(false);\r\n+            q.setFirstResult(0);\r\n+            Long l = new Long(Long.MAX_VALUE);\r\n+            q.setMaxResults(l.intValue());\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(3, res.size());\r\n+            for (int i = 0; i < res.size(); i++)\r\n+                assertEquals(\"TestQueryResults\" + (i * 2 + 1),\r\n+                    ((RuntimeTest1) res.get(i)).getStringField());\r\n+            q.closeAll();\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+        catch (Exception uoe) {\r\n+            //FIXME:AFAM -- Figure out JPA Equivalence of createExtent(class, false) ie how to restrict the query result to the base entity and\r\n+            //not the subclasses\r\n+        }\r\n+    }\r\n+\r\n+    public void testFullRangeSubs() {\r\n+        try {\r\n+            OpenJPAEntityManager em =\r\n+                (OpenJPAEntityManager) currentEntityManager();\r\n+            startTx(em);\r\n+\r\n+            OpenJPAQuery q = em.createQuery(\r\n+                \"SELECT r FROM RuntimeTest1 ORDER BY r.stringField ASC\");\r\n+            q.setFirstResult(0);\r\n+            Long l = new Long(Long.MAX_VALUE);\r\n+            q.setMaxResults(l.intValue());\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(6, res.size());\r\n+            for (int i = 0; i < res.size(); i++)\r\n+                assertEquals(\"TestQueryResults\" + (i + 1),\r\n+                    ((RuntimeTest1) res.get(i)).getStringField());\r\n+            q.closeAll();\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+        catch (Exception uoe) {\r\n+        }\r\n+    }\r\n+\r\n+    public void testBeginRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+        for (int i = 0; i < 4; i++) {\r\n+            q.setFirstResult(i);\r\n+            q.setMaxResults(100000);\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(\"they are not equal\", 3 - i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j * 2 + 1 + i * 2),\r\n+                    (((RuntimeTest1) res.get(j)).getStringField()));\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx * 2 + 1 + i * 2),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testBeginRangeSubs() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+\r\n+        for (int i = 0; i < 7; i++) {\r\n+            q.setFirstResult(i);\r\n+            Long l = new Long(Long.MAX_VALUE);\r\n+            q.setMaxResults(100000);\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(6 - i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j + 1 + i),\r\n+                    ((RuntimeTest1) res.get(j)).getStringField());\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx + 1 + i),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testEndRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+\r\n+        for (int i = 0; i < 4; i++) {\r\n+            q.setFirstResult(0);\r\n+            q.setMaxResults(i);\r\n+\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j * 2 + 1),\r\n+                    ((RuntimeTest1) res.get(j)).getStringField());\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx * 2 + 1),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testEndRangeSubs() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+\r\n+        for (int i = 0; i < 7; i++) {\r\n+            q.setFirstResult(0);\r\n+            q.setMaxResults(i);\r\n+            List res = (List) q.getResultList();\r\n+            assertEquals(i, res.size());\r\n+            int idx = 0;\r\n+\r\n+            // try both random acess and iteration\r\n+            for (int j = 0; j < res.size(); j++)\r\n+                assertEquals(\"TestQueryResults\" + (j + 1),\r\n+                    ((RuntimeTest1) res.get(j)).getStringField());\r\n+            for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+                assertEquals(\"TestQueryResults\" + (idx + 1),\r\n+                    ((RuntimeTest1) itr.next()).getStringField());\r\n+        }\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMidRange() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(3);\r\n+        List res = (List) q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        for (int i = 0; i < res.size(); i++)\r\n+            assertEquals(\"TestQueryResults\" + (i * 2 + 1 + 2),\r\n+                ((RuntimeTest1) res.get(i)).getStringField());\r\n+        int idx = 0;\r\n+        for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+            assertEquals(\"TestQueryResults\" + (idx * 2 + 1 + 2),\r\n+                ((RuntimeTest1) itr.next()).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testMidRangeSubs() {\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setFirstResult(1);\r\n+        q.setMaxResults(3);\r\n+\r\n+        List res = (List) q.getResultList();\r\n+        assertEquals(3, res.size());\r\n+        for (int i = 0; i < res.size(); i++)\r\n+            assertEquals(\"TestQueryResults\" + (i + 1 + 1),\r\n+                ((RuntimeTest1) res.get(i)).getStringField());\r\n+        int idx = 0;\r\n+        for (Iterator itr = res.iterator(); itr.hasNext(); idx++)\r\n+            assertEquals(\"TestQueryResults\" + (idx + 1 + 1),\r\n+                ((RuntimeTest1) itr.next()).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+\r\n+    public void testPessimisticOrderedRange() {\r\n+        // test to make sure whatever machinations we do to get a range doesn't\r\n+        // interfere with FOR UPDATE\r\n+        OpenJPAEntityManager em =\r\n+            (OpenJPAEntityManager) currentEntityManager();\r\n+        startTx(em);\r\n+\r\n+        OpenJPAQuery q = em.createQuery(\r\n+            \"SELECT r FROM RuntimeTest1 r ORDER BY r.stringField ASC\");\r\n+        q.setSubclasses(false);\r\n+        q.setFirstResult(0);\r\n+        q.setMaxResults(2);\r\n+\r\n+        ((JDBCFetchPlan) q.getFetchPlan()).setEagerFetchMode(FetchMode.NONE);\r\n+\r\n+        List res = (List) q.getResultList();\r\n+        assertEquals(2, res.size());\r\n+        assertEquals(\"TestQueryResults1\",\r\n+            ((RuntimeTest1) res.get(0)).getStringField());\r\n+        assertEquals(\"TestQueryResults3\",\r\n+            ((RuntimeTest1) res.get(1)).getStringField());\r\n+        q.closeAll();\r\n+        endTx(em);\r\n+        endEm(em);\r\n+    }\r\n+}\r\n+\r"},{"sha":"4b151e4463d566e4474a9d7219055ae8a5d971c6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,198 @@\n+/*\r\n+ * TestQuotedNumbersInFilters.java\r\n+ *\r\n+ * Created on October 18, 2006, 2:29 PM\r\n+ *\r\n+ * To change this template, choose Tools | Template Manager\r\n+ * and open the template in the editor.\r\n+ */\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.Query;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.RuntimeTest1;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+\r\n+public class TestQuotedNumbersInFilters2 extends BaseQueryTest {\r\n+\r\n+    public TestQuotedNumbersInFilters2(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(RuntimeTest1.class);\r\n+        OpenJPAEntityManager pm = getEM();\r\n+        startTx(pm);\r\n+        pm.persist(new RuntimeTest1(\"foo\", 3));\r\n+        pm.persist(new RuntimeTest1(\"bar\", 15));\r\n+        pm.persist(new RuntimeTest1(\"baz\", -8));\r\n+        pm.persist(new RuntimeTest1(\"baz2\", 45)); // 45 is '-'\r\n+        pm.persist(new RuntimeTest1(\"3\", (int) '4'));\r\n+        endTx(pm);\r\n+        endEm(pm);\r\n+\r\n+        // make sure everything is working as expected for the base case.\r\n+        assertEquals(1, helper(\"intField = -8\"));\r\n+        assertEquals(1, helper(\"intField = 15\"));\r\n+        assertEquals(1, helper(\"intField = 3\"));\r\n+        assertEquals(0, helper(\"intField = 51\")); // the int value of '3'\r\n+        assertEquals(0, helper(\"intField = 4\"));\r\n+        assertEquals(1, helper(\"intField = 52\")); // the int value of '4'\r\n+        assertEquals(1, helper(\"stringField = \\'foo\\'\"));\r\n+        assertEquals(1, helper(\"stringField = \\'bar\\'\"));\r\n+    }\r\n+\r\n+    public void testUnquotedNumbersWithExtraPrecision() {\r\n+        assertEquals(1, helper(\"intField = 15\"));\r\n+        assertEquals(1, helper(\"intField = -8\"));\r\n+        assertEquals(1, helper(\"intField = 3\"));\r\n+        assertEquals(1, helper(\"intField = 45\"));\r\n+\r\n+//    try {\r\n+//        // test without casting ... some DBs don't like this\r\n+////        assertEquals(1, helper(\"intField = 15.0\"));\r\n+////        assertEquals(1, helper(\"intField = -8.0\"));\r\n+//        assertEquals(1, helper(\"intField = 3.0\"));\r\n+//        assertEquals(1, helper(\"intField = 45.0\"));\r\n+//    } catch (Exception jdoe) {\r\n+//        bug(AbstractTestCase.Platform.HYPERSONIC, 414, jdoe,\r\n+//            \"Some databases require explicit casts\");\r\n+//    }\r\n+    }\r\n+\r\n+    public void testSingleQuotedStrings() {\r\n+        assertEquals(1, helper(\"stringField = 'foo'\"));\r\n+        assertEquals(1, helper(\"stringField = '3'\"));\r\n+    }\r\n+\r\n+    public void testDoubleQuotedStrings() {\r\n+        assertEquals(1, helper(\"stringField = \\'foo\\'\"));\r\n+        assertEquals(1, helper(\"stringField = \\'3\\'\"));\r\n+    }\r\n+\r\n+    /**\r\n+     * Kodo 3.1 and prior treated single-quoted numbers as character literals,\r\n+     * to the degree that prepared statement setInt() calls were made.\r\n+     * Only the first digit of multiple-digit single-quoted numbers was used.\r\n+     * FIX ME: aokeke - commenting this --> applies to kodo 3.1 and prior\r\n+     */\r\n+    public void testKodo31SingleQuotedMultipleCharacterBehavior() {\r\n+        assertEquals(0, helper31(\"intField = '15'\", true)); // looks like '1'\r\n+        assertEquals(0, helper31(\"intField = '52'\", true)); // looks like '5'\r\n+        assertEquals(1, helper31(\"intField = '49'\", true)); // looks like '4'\r\n+        assertEquals(1, helper31(\"intField = '-8'\", true)); // looks like '-'\r\n+\r\n+        assertEquals(0, helper31(\"intField = '15'\", false));\r\n+        assertEquals(0, helper31(\"intField = '52'\", false));\r\n+    }\r\n+\r\n+    /**\r\n+     * Kodo 3.1 and prior did not match negative numbers of different types\r\n+     * in in-mem queries.\r\n+     */\r\n+    public void testKodo31UnquotedInMemBehavior() {\r\n+        assertEquals(1, helper31(\"intField = 3\", false));\r\n+        assertEquals(1, helper31(\"intField = -8\", false));\r\n+        assertEquals(1, helper31(\"intField = 15\", false));\r\n+        assertEquals(1, helper31(\"intField = 45\", false));\r\n+    }\r\n+\r\n+    public void testKodo31UnquotedDatastoreBehavior() {\r\n+        assertEquals(1, helper31(\"intField = 3\", false));\r\n+        assertEquals(1, helper31(\"intField = -8\", false));\r\n+        assertEquals(1, helper31(\"intField = 15\", false));\r\n+        assertEquals(1, helper31(\"intField = 45\", false));\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the # of matches to the query.\r\n+     */\r\n+    private long helper(String filter) {\r\n+        return helper(filter, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the # of matches to the query. Returns -1 if shouldFail\r\n+     * is true and the query raised an exception in both in-mem and datastore\r\n+     * queries.\r\n+     */\r\n+    private long helper(String filter, boolean shouldFail) {\r\n+        OpenJPAEntityManager pm = getEM();\r\n+\r\n+        OpenJPAQuery q =\r\n+            pm.createQuery(\"SELECT r FROM RuntimeTest1 r WHERE r.\" + filter);\r\n+\r\n+        long datastore = getResults(q, shouldFail);\r\n+\r\n+        q.setCandidateCollection((Collection) q.getResultList());\r\n+        long inmem = getResults(q, shouldFail);\r\n+\r\n+        if (datastore != inmem)\r\n+            fail(\"datastore query returned \" + datastore + \" values; \" +\r\n+                \"inmem query returned \" + inmem);\r\n+\r\n+        endEm(pm);\r\n+        return datastore;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the # of matches to the query. Performs the query in datastore\r\n+     * or memory as appropriate.\r\n+     */\r\n+    private long helper31(String filter, boolean datastore) {\r\n+        Map props = new HashMap();\r\n+        props.put(\"openjpa.Compatibility\", \"QuotedNumbersInQueries=true\");\r\n+        OpenJPAEntityManager pm = getEmf(props).createEntityManager();\r\n+\r\n+        try {\r\n+            OpenJPAQuery q = pm.createQuery(\r\n+                \"SELECT r FROM RuntimeTest1 r WHERE r.\" + filter);\r\n+\r\n+            if (!datastore)\r\n+                q.setCandidateCollection((Collection) q.getResultList());\r\n+            return getResults(q, false);\r\n+        }\r\n+        finally {\r\n+            endEm(pm);\r\n+        }\r\n+    }\r\n+\r\n+    private long getResults(Query q, boolean shouldFail) {\r\n+        try {\r\n+\r\n+            Integer result = new Integer(q.getResultList().size());\r\n+            if (shouldFail) {\r\n+                fail(\"should have failed\");\r\n+            }\r\n+\r\n+            return ((Number) result).longValue();\r\n+        } catch (IllegalArgumentException e) {\r\n+            if (!shouldFail)\r\n+                throw e;\r\n+            return -1;\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"14d6685e3700c96084cb159ab020fbe0252a79de","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestResultSetMapping.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestResultSetMapping \n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(SimpleEntity.class);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new SimpleEntity(\"tName\", \"tValue\"));\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testSimpleQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createNamedQuery(\"findSimpleEntitites\");\n+        List res = q.getResultList();\n+        assertNotNull(res);\n+        for (Iterator resultIter = res.iterator(); resultIter.hasNext();) {\n+            assertSame(resultIter.next().getClass(), SimpleEntity.class);\n+        }\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestResultSetMapping.class);\n+    }\n+}"},{"sha":"d0a90c3b548aad0f328f33cdf058cffe1342df82","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,102 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import java.util.List;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+\r\n+import org.apache.openjpa.persistence.query.common.apps.Entity1;\r\n+\r\n+public class TestSimple extends BaseQueryTest {\r\n+\r\n+    private Query q = null;\r\n+\r\n+    public TestSimple(String test) {\r\n+        super(test);\r\n+    }\r\n+\r\n+    public void setUp() {\r\n+        deleteAll(Entity1.class);\r\n+    }\r\n+\r\n+    public void testSimple() throws java.io.IOException {\r\n+        // test create\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            em.persist(new Entity1(0, \"testSimple\", 12));\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // test Query\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            List l = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple'\").getResultList();\r\n+            assertSize(1, l);\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // test Update\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            ((Entity1) em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple'\").getSingleResult())\r\n+                .setStringField(\"testSimple2\");\r\n+            endTx(em);\r\n+            endEm(em);\r\n+\r\n+            em = currentEntityManager();\r\n+            startTx(em);\r\n+            q = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple'\");\r\n+            assertSize(0, q);\r\n+            q = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple2'\");\r\n+            assertSize(1, q);\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+\r\n+        // test delete\r\n+        {\r\n+            EntityManager em = currentEntityManager();\r\n+            startTx(em);\r\n+            em.remove(em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple2'\").getSingleResult());\r\n+            endTx(em);\r\n+            endEm(em);\r\n+\r\n+            em = currentEntityManager();\r\n+            startTx(em);\r\n+\r\n+            q = em.createQuery(\"SELECT o FROM Entity1 o \"\r\n+                + \"WHERE o.stringField = 'testSimple2'\");\r\n+            assertSize(0, q);\r\n+            endTx(em);\r\n+            endEm(em);\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"528efaaadccf1a4c2a41c465226a422ac5bb4b0a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubquery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.query;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test JPQL subquery\n+ */\n+public class TestSubquery\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class,\n+            OrderItem.class, Magazine.class, Publisher.class, Employee.class,\n+            Dependent.class, DependentId.class, CLEAR_TABLES);\n+    }\n+\n+    static String[]  querys = new String[] {\n+        \"select o1.oid from Order o1 where o1.oid in \" +\n+            \" (select distinct o.oid from OrderItem i, Order o\" +\n+            \" where i.quantity > 10 and o.amount > 1000 and i.lid = o.oid)\" ,\n+        \"select o.oid from Order o where o.customer.name =\" +\n+            \" (select max(o2.customer.name) from Order o2\" +\n+            \" where o.customer.cid.id = o2.customer.cid.id)\",\n+        \"select o from Order o where o.customer.name =\" +\n+            \" (select max(o2.customer.name) from Order o2\" +\n+            \" where o.customer.cid.id = o2.customer.cid.id)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select count(i) from o.lineitems i)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select count(o.amount) from Order o)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select count(o.oid) from Order o)\",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select avg(o.amount) from Order o)\",\n+        \"select c.name from Customer c where exists\" +\n+            \" (select o from c.orders o where o.oid = 1) or exists\" +\n+            \" (select o from c.orders o where o.oid = 2)\",\n+        \"select c.name from Customer c, in(c.orders) o where o.amount between\" +\n+            \" (select max(o.amount) from Order o) and\" +\n+            \" (select avg(o.amount) from Order o) \",\n+        \"select o.oid from Order o where o.amount >\" +\n+            \" (select sum(o2.amount) from Customer c, in(c.orders) o2) \",   \n+        \"select o.oid from Order o where o.amount between\" +\n+            \" (select avg(o2.amount) from Customer c, in(c.orders) o2)\" +\n+            \" and (select min(o2.amount) from Customer c, in(c.orders) o2)\",\n+        \"select o.oid from Customer c, in(c.orders)o where o.amount >\" +\n+            \" (select sum(o2.amount) from c.orders o2)\",\n+        \"select o1.oid, c.name from Order o1, Customer c where o1.amount = \" +\n+            \" any(select o2.amount from in(c.orders) o2)\",\n+        \"SELECT p, m \"+\n+            \"FROM Publisher p \"+\n+            \"LEFT OUTER JOIN p.magazineCollection m \"+\n+            \"WHERE m.id = (SELECT MAX(m2.id) \"+\n+            \"FROM Magazine m2 \"+\n+            \"WHERE m2.idPublisher.id = p.id \"+\n+            \"AND m2.datePublished = \"+\n+            \"(SELECT MAX(m3.datePublished) \"+\n+            \"FROM Magazine m3 \"+\n+            \"WHERE m3.idPublisher.id = p.id)) \", \n+    // outstanding problem subqueries:\n+    //\"select o from Order o where o.amount > (select count(o) from Order o)\",\n+    //\"select o from Order o where o.amount > (select count(o2) from Order o2)\",\n+    // \"select c from Customer c left join c.orders p where not exists\"\n+    //   + \" (select o2 from c.orders o2 where o2 = o\",\n+    };\n+\n+\n+    static String[] updates = new String[] {\n+        \"update Order o set o.amount = 1000 where o.customer.name = \" +\n+            \" (select max(o2.customer.name) from Order o2 \" + \n+            \" where o.customer.cid.id = o2.customer.cid.id)\",  \n+    };\n+\n+\n+    public void testSubquery() {\n+        EntityManager em = emf.createEntityManager();\n+        for (int i = 0; i < querys.length; i++) {\n+            String q = querys[i];\n+            List rs = em.createQuery(q).getResultList();\n+            assertEquals(0, rs.size());\n+        }\n+\n+        em.getTransaction().begin();\n+        for (int i = 0; i < updates.length; i++) {\n+            int updateCount = em.createQuery(updates[i]).executeUpdate();\n+            assertEquals(0, updateCount);\n+        }\n+\n+        em.getTransaction().rollback();\n+        em.close();\n+    }\n+    \n+    /**\n+     * Verify a sub query can contain MAX and additional date comparisons \n+     * without losing the correct alias information. This sort of query \n+     * originally caused problems for DBDictionaries which used DATABASE syntax. \n+     */\n+    public void testSubSelectMaxDateRange() {        \n+        String query =\n+            \"SELECT e,d from Employee e, Dependent d \"\n+                + \"WHERE e.empId = :empid \"\n+                + \"AND d.id.empid = (SELECT MAX (e2.empId) FROM Employee e2) \"\n+                + \"AND d.id.effDate > :minDate \"\n+                + \"AND d.id.effDate < :maxDate \";\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(query);\n+        q.setParameter(\"empid\", (long) 101);\n+        q.setParameter(\"minDate\", new Date(100));\n+        q.setParameter(\"maxDate\", new Date(100000));\n+        q.getResultList();\n+        em.close();\n+    }\n+}"},{"sha":"d643ae573eef418a42dc2558697b37f50b269440","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.query;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestSubstring extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        super.setUp(SimpleEntity.class, CLEAR_TABLES,\r\n+            \"openjpa.Compatibility\", \"JPQL=extended\");\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        em.persist(new SimpleEntity(\"foo\", \"bar\"));\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testSingleCharacterSubstringInWhere() {\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 1, 1) = 'b'\").getSingleResult());\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 2, 1) = 'a'\").getSingleResult());\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 3, 1) = 'r'\").getSingleResult());\r\n+    }\r\n+\r\n+    public void testMultiCharacterSubstringInWhere() {\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 1, 2) = 'ba'\").getSingleResult());\r\n+        assertEquals((long) 1, em.createQuery(\"select count(o) from simple o \" +\r\n+            \"where substring(o.value, 2, 2) = 'ar'\").getSingleResult());\r\n+    }\r\n+\r\n+    public void testSubstringInSelect() {\r\n+        assertEquals(\"b\", em.createQuery(\"select substring(o.value, 1, 1) \" +\r\n+            \"from simple o\").getSingleResult());\r\n+        assertEquals(\"a\", em.createQuery(\"select substring(o.value, 2, 1) \" +\r\n+            \"from simple o\").getSingleResult());\r\n+        assertEquals(\"r\", em.createQuery(\"select substring(o.value, 3, 1) \" +\r\n+            \"from simple o\").getSingleResult());\r\n+    }\r\n+}\r"},{"sha":"60ae06b2242a26e94f29f829489383b35be268ad","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class CircularFKPC {\r\n+\r\n+    private String stringField;\r\n+    private CircularFKPC2 fkField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public CircularFKPC2 getFKField() {\r\n+        return this.fkField;\r\n+    }\r\n+\r\n+    public void setFKField(CircularFKPC2 fkField) {\r\n+        this.fkField = fkField;\r\n+    }\r\n+}\r"},{"sha":"16bc6730a11f1111fcfaa18acc7c94e73f29ca5f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+/**\r\n+ * <p>Persistent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class CircularFKPC2 {\r\n+\r\n+    private String stringField;\r\n+    private CircularFKPC fkField;\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public CircularFKPC getFKField() {\r\n+        return this.fkField;\r\n+    }\r\n+\r\n+    public void setFKField(CircularFKPC fkField) {\r\n+        this.fkField = fkField;\r\n+    }\r\n+}\r"},{"sha":"ad57a9edcabe09ebc3bb875bea1e47875b3afbd6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.LinkedList;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexA {\r\n+\r\n+    private String stringA;\r\n+    private int intA;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateA;\r\n+    private Collection bs = new LinkedList();\r\n+\r\n+    public ComplexA() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexA(String stringA, int intA, Date dateA, ComplexB[] bs) {\r\n+        this.stringA = stringA;\r\n+        this.intA = intA;\r\n+        this.dateA = dateA;\r\n+        if (bs != null)\r\n+            this.bs.addAll(Arrays.asList(bs));\r\n+    }\r\n+\r\n+    public void setStringA(String stringA) {\r\n+        this.stringA = stringA;\r\n+    }\r\n+\r\n+    public String getStringA() {\r\n+        return this.stringA;\r\n+    }\r\n+\r\n+    public void setIntA(int intA) {\r\n+        this.intA = intA;\r\n+    }\r\n+\r\n+    public int getIntA() {\r\n+        return this.intA;\r\n+    }\r\n+\r\n+    public void setDateA(Date dateA) {\r\n+        this.dateA = dateA;\r\n+    }\r\n+\r\n+    public Date getDateA() {\r\n+        return this.dateA;\r\n+    }\r\n+\r\n+    public void setBs(Collection bs) {\r\n+        this.bs = bs;\r\n+    }\r\n+\r\n+    public Collection getBs() {\r\n+        return this.bs;\r\n+    }\r\n+}\r"},{"sha":"5fd79308b2135063dcec00b5aeef7268f88f223d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexB\r\n+    extends ComplexA {\r\n+\r\n+    private String stringB;\r\n+    private int intB;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateB;\r\n+    private Collection cs = new ArrayList();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexA a;\r\n+\r\n+    public ComplexB() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexB(String stringB, int intB, Date dateB, ComplexC[] cs,\r\n+        ComplexA a) {\r\n+        this.stringB = stringB;\r\n+        this.intB = intB;\r\n+        this.dateB = dateB;\r\n+        if (cs != null)\r\n+            this.cs.addAll(Arrays.asList(cs));\r\n+        this.a = a;\r\n+    }\r\n+\r\n+    public void setStringB(String stringB) {\r\n+        this.stringB = stringB;\r\n+    }\r\n+\r\n+    public String getStringB() {\r\n+        return this.stringB;\r\n+    }\r\n+\r\n+    public void setIntB(int intB) {\r\n+        this.intB = intB;\r\n+    }\r\n+\r\n+    public int getIntB() {\r\n+        return this.intB;\r\n+    }\r\n+\r\n+    public void setDateB(Date dateB) {\r\n+        this.dateB = dateB;\r\n+    }\r\n+\r\n+    public Date getDateB() {\r\n+        return this.dateB;\r\n+    }\r\n+\r\n+    public void setCs(Collection cs) {\r\n+        this.cs = cs;\r\n+    }\r\n+\r\n+    public Collection getCs() {\r\n+        return this.cs;\r\n+    }\r\n+\r\n+    public void setA(ComplexA a) {\r\n+        this.a = a;\r\n+    }\r\n+\r\n+    public ComplexA getA() {\r\n+        return this.a;\r\n+    }\r\n+}\r\n+\r"},{"sha":"ab5f5199fe6c4900105459d98fc762f68dc81e22","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexC\r\n+    extends ComplexB {\r\n+\r\n+    private String stringC;\r\n+    private int intC;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateC;\r\n+    private Set ds = new HashSet();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexB b;\r\n+\r\n+    public ComplexC() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexC(String stringC, int intC, Date dateC, ComplexD[] ds,\r\n+        ComplexB b) {\r\n+        this.stringC = stringC;\r\n+        this.intC = intC;\r\n+        this.dateC = dateC;\r\n+        if (ds != null)\r\n+            this.ds.addAll(Arrays.asList(ds));\r\n+        this.b = b;\r\n+    }\r\n+\r\n+    public void setStringC(String stringC) {\r\n+        this.stringC = stringC;\r\n+    }\r\n+\r\n+    public String getStringC() {\r\n+        return this.stringC;\r\n+    }\r\n+\r\n+    public void setIntC(int intC) {\r\n+        this.intC = intC;\r\n+    }\r\n+\r\n+    public int getIntC() {\r\n+        return this.intC;\r\n+    }\r\n+\r\n+    public void setDateC(Date dateC) {\r\n+        this.dateC = dateC;\r\n+    }\r\n+\r\n+    public Date getDateC() {\r\n+        return this.dateC;\r\n+    }\r\n+\r\n+    public void setDs(Set ds) {\r\n+        this.ds = ds;\r\n+    }\r\n+\r\n+    public Set getDs() {\r\n+        return this.ds;\r\n+    }\r\n+\r\n+    public void setB(ComplexB b) {\r\n+        this.b = b;\r\n+    }\r\n+\r\n+    public ComplexB getB() {\r\n+        return this.b;\r\n+    }\r\n+}\r\n+\r"},{"sha":"1ac2e0384f5194a061cf022cc2e5669bdc4cdd98","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,96 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Date;\r\n+import java.util.Set;\r\n+import java.util.TreeSet;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexD {\r\n+\r\n+    private String stringD;\r\n+    private int intD;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateD;\r\n+    private Set es = new TreeSet();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexC c;\r\n+\r\n+    public ComplexD() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexD(String stringD, int intD, Date dateD, ComplexE[] es,\r\n+        ComplexC c) {\r\n+        this.stringD = stringD;\r\n+        this.intD = intD;\r\n+        this.dateD = dateD;\r\n+        if (es != null)\r\n+            this.es.addAll(Arrays.asList(es));\r\n+        this.c = c;\r\n+    }\r\n+\r\n+    public void setStringD(String stringD) {\r\n+        this.stringD = stringD;\r\n+    }\r\n+\r\n+    public String getStringD() {\r\n+        return this.stringD;\r\n+    }\r\n+\r\n+    public void setIntD(int intD) {\r\n+        this.intD = intD;\r\n+    }\r\n+\r\n+    public int getIntD() {\r\n+        return this.intD;\r\n+    }\r\n+\r\n+    public void setDateD(Date dateD) {\r\n+        this.dateD = dateD;\r\n+    }\r\n+\r\n+    public Date getDateD() {\r\n+        return this.dateD;\r\n+    }\r\n+\r\n+    public void setEs(Set es) {\r\n+        this.es = es;\r\n+    }\r\n+\r\n+    public Set getEs() {\r\n+        return this.es;\r\n+    }\r\n+\r\n+    public void setC(ComplexC c) {\r\n+        this.c = c;\r\n+    }\r\n+\r\n+    public ComplexC getC() {\r\n+        return this.c;\r\n+    }\r\n+}\r\n+\r"},{"sha":"61e964c307baee35ce4b62b79efe84a66b814e40","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.LinkedList;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexE\r\n+    extends ComplexD {\r\n+\r\n+    private String stringE;\r\n+    private int intE;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateE;\r\n+    private Collection fs = new LinkedList();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexD d;\r\n+\r\n+    public ComplexE() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexE(String stringE, int intE, Date dateE, ComplexF[] fs,\r\n+        ComplexD d) {\r\n+        this.stringE = stringE;\r\n+        this.intE = intE;\r\n+        this.dateE = dateE;\r\n+        if (fs != null)\r\n+            this.fs.addAll(Arrays.asList(fs));\r\n+        this.d = d;\r\n+    }\r\n+\r\n+    public void setStringE(String stringE) {\r\n+        this.stringE = stringE;\r\n+    }\r\n+\r\n+    public String getStringE() {\r\n+        return this.stringE;\r\n+    }\r\n+\r\n+    public void setIntE(int intE) {\r\n+        this.intE = intE;\r\n+    }\r\n+\r\n+    public int getIntE() {\r\n+        return this.intE;\r\n+    }\r\n+\r\n+    public void setDateE(Date dateE) {\r\n+        this.dateE = dateE;\r\n+    }\r\n+\r\n+    public Date getDateE() {\r\n+        return this.dateE;\r\n+    }\r\n+\r\n+    public void setFs(Collection fs) {\r\n+        this.fs = fs;\r\n+    }\r\n+\r\n+    public Collection getFs() {\r\n+        return this.fs;\r\n+    }\r\n+\r\n+    public void setD(ComplexD d) {\r\n+        this.d = d;\r\n+    }\r\n+\r\n+    public ComplexD getD() {\r\n+        return this.d;\r\n+    }\r\n+}\r\n+\r"},{"sha":"0c50bbcd54eb5343cff0dccd434ff9efd7a28a90","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,97 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexF\r\n+    extends ComplexE {\r\n+\r\n+    private String stringF;\r\n+    private int intF;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateF;\r\n+    private Collection gs = new HashSet();\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexE e;\r\n+\r\n+    public ComplexF() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexF(String stringF, int intF, Date dateF, ComplexG[] gs,\r\n+        ComplexE e) {\r\n+        this.stringF = stringF;\r\n+        this.intF = intF;\r\n+        this.dateF = dateF;\r\n+        if (gs != null)\r\n+            this.gs.addAll(Arrays.asList(gs));\r\n+        this.e = e;\r\n+    }\r\n+\r\n+    public void setStringF(String stringF) {\r\n+        this.stringF = stringF;\r\n+    }\r\n+\r\n+    public String getStringF() {\r\n+        return this.stringF;\r\n+    }\r\n+\r\n+    public void setIntF(int intF) {\r\n+        this.intF = intF;\r\n+    }\r\n+\r\n+    public int getIntF() {\r\n+        return this.intF;\r\n+    }\r\n+\r\n+    public void setDateF(Date dateF) {\r\n+        this.dateF = dateF;\r\n+    }\r\n+\r\n+    public Date getDateF() {\r\n+        return this.dateF;\r\n+    }\r\n+\r\n+    public void setGs(Collection gs) {\r\n+        this.gs = gs;\r\n+    }\r\n+\r\n+    public Collection getGs() {\r\n+        return this.gs;\r\n+    }\r\n+\r\n+    public void setE(ComplexE e) {\r\n+        this.e = e;\r\n+    }\r\n+\r\n+    public ComplexE getE() {\r\n+        return this.e;\r\n+    }\r\n+}\r\n+\r"},{"sha":"98eac8cee166cd0f03c415c75a8d547923ffb00e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,82 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Date;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Temporal;\r\n+import javax.persistence.TemporalType;\r\n+\r\n+@Entity\r\n+public class ComplexG\r\n+    extends ComplexE {\r\n+\r\n+    private String stringG;\r\n+    private int intG;\r\n+    @Temporal(TemporalType.DATE)\r\n+    private Date dateG;\r\n+    @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ComplexF f;\r\n+\r\n+    public ComplexG() {\r\n+\r\n+    }\r\n+\r\n+    public ComplexG(String stringG, int intG, Date dateG, ComplexF f) {\r\n+        this.stringG = stringG;\r\n+        this.intG = intG;\r\n+        this.dateG = dateG;\r\n+        this.f = f;\r\n+    }\r\n+\r\n+    public void setStringG(String stringG) {\r\n+        this.stringG = stringG;\r\n+    }\r\n+\r\n+    public String getStringG() {\r\n+        return this.stringG;\r\n+    }\r\n+\r\n+    public void setIntG(int intG) {\r\n+        this.intG = intG;\r\n+    }\r\n+\r\n+    public int getIntG() {\r\n+        return this.intG;\r\n+    }\r\n+\r\n+    public void setDateG(Date dateG) {\r\n+        this.dateG = dateG;\r\n+    }\r\n+\r\n+    public Date getDateG() {\r\n+        return this.dateG;\r\n+    }\r\n+\r\n+    public void setF(ComplexF f) {\r\n+        this.f = f;\r\n+    }\r\n+\r\n+    public ComplexF getF() {\r\n+        return this.f;\r\n+    }\r\n+}\r\n+\r"},{"sha":"96592f0be55ed52fa06d67190955382b7ad11f00","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,111 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+\r\n+/**\r\n+ * <p>Application identity type with a compound primary key.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+\r\n+@Entity\r\n+@IdClass(CompoundAppIdPC.Idkey.class)\r\n+public class CompoundAppIdPC {\r\n+\r\n+    @Id\r\n+    private String pk1;\r\n+\r\n+    @Id\r\n+    private int pk2;\r\n+\r\n+    private int intField;\r\n+\r\n+    public String getPk1() {\r\n+        return this.pk1;\r\n+    }\r\n+\r\n+    public void setPk1(String pk1) {\r\n+        this.pk1 = pk1;\r\n+    }\r\n+\r\n+    public int getPk2() {\r\n+        return this.pk2;\r\n+    }\r\n+\r\n+    public void setPk2(int pk2) {\r\n+        this.pk2 = pk2;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public static class Idkey implements Serializable {\r\n+\r\n+        public String pk1;\r\n+        public int pk2;\r\n+\r\n+        public Idkey() {\r\n+        }\r\n+\r\n+        public Idkey(String str) {\r\n+            int index = str.indexOf(\"/\");\r\n+            if (index != -1) {\r\n+                pk2 = Integer.parseInt(str.substring(0, index));\r\n+                pk1 = str.substring(index + 1);\r\n+            }\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return pk2 + \"/\" + pk1;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean equals(Object other) {\r\n+            if (!(other instanceof Idkey))\r\n+                return false;\r\n+\r\n+            Idkey id = (Idkey) other;\r\n+            if (pk1 == null && id.pk1 != null)\r\n+                return false;\r\n+            if (pk1 != null && id.pk1 == null)\r\n+                return false;\r\n+            if (!(pk1 == id.pk1))\r\n+                return false;\r\n+            if (!(pk1.equals(id.pk1)))\r\n+                return false;\r\n+\r\n+            return true;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int hashCode() {\r\n+            return (pk2 + pk1).hashCode();\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"b14ce316dd159c7fab1d36afa57560e9676d8a13","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,104 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.EntityResult;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.NamedQuery;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.SqlResultSetMapping;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name = \"entity_1\")\r\n+@Inheritance(strategy = InheritanceType.JOINED)\r\n+@SqlResultSetMapping(name = \"NativeTestResult\",\r\n+    entities = @EntityResult(entityClass = Entity1.class))\r\n+@NamedQuery(name = \"setParam1\",\r\n+    query = \"SELECT o FROM Entity1 o WHERE o.stringField = :fld\")\r\n+public class Entity1 implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 2882935803066041165L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\r\n+    protected Entity2 entity2Field;\r\n+\r\n+    @Version\r\n+    protected int versionField;\r\n+\r\n+    public Entity1() {\r\n+    }\r\n+\r\n+    public Entity1(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public void setEntity2Field(Entity2 val) {\r\n+        entity2Field = val;\r\n+    }\r\n+\r\n+    public Entity2 getEntity2Field() {\r\n+        return entity2Field;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"a92e7b14f1248f87d709abb37b88212c1a32e929","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+//@Entity(name=\"entity2ExplicitName\")\r\n+\r\n+//@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+/**\r\n+ * FIX-ME\r\n+ * <p/>\r\n+ * It should complain if i uncomment the above strategies...but it does\r\n+ */\r\n+@Entity\r\n+public class Entity2 implements Serializable {\r\n+\r\n+    /**\r\n+     *\r\n+     */\r\n+    private static final long serialVersionUID = 4723739219953167343L;\r\n+\r\n+    @Id\r\n+    protected long pk;\r\n+\r\n+    @Basic\r\n+    @Column(length = 35)\r\n+    protected String stringField;\r\n+\r\n+    @Basic\r\n+    protected int intField;\r\n+\r\n+    public Entity2() {\r\n+    }\r\n+\r\n+    public Entity2(long pk, String stringField, int intField) {\r\n+        this.pk = pk;\r\n+        this.stringField = stringField;\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getPk() {\r\n+        return pk;\r\n+    }\r\n+\r\n+    public void setStringField(String val) {\r\n+        stringField = val;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setIntField(int val) {\r\n+        intField = val;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return intField;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return (\"PK: \" + pk + \" StringField: \" + stringField + \" IntField: \" +\r\n+            intField);\r\n+    }\r\n+}\r"},{"sha":"0f81c3e55b9f2bc3e09d6c4324b499506625a6b2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,124 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.HashSet;\r\n+import java.util.Locale;\r\n+import java.util.Set;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Transient;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@Table(name = \"mrtest1\")\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+public class ModRuntimeTest1 implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+\r\n+    @Transient\r\n+    public static final String someStaticField = \"someField\";\r\n+\r\n+    private Locale localeField;\r\n+\r\n+    @Id\r\n+    private int intField;\r\n+\r\n+    @Column(length = 35)\r\n+    private String stringField;\r\n+\r\n+    @Column(length = 35)\r\n+    public String transString;\r\n+\r\n+    @OneToOne(fetch = FetchType.LAZY,\r\n+        cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n+    private ModRuntimeTest1 selfOneOne;\r\n+\r\n+    @Transient\r\n+    private Set selfOneMany = new HashSet();\r\n+\r\n+    public ModRuntimeTest1() {\r\n+    }\r\n+\r\n+    public ModRuntimeTest1(int key) {\r\n+        this.intField = key;\r\n+    }\r\n+\r\n+    public ModRuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public ModRuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(ModRuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+\r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+\r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"IntField: \" + intField + \", StringField: \" + stringField + \" .\";\r\n+    }\r\n+\r\n+    public Locale getLocaleField() {\r\n+        return localeField;\r\n+    }\r\n+\r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+}\r"},{"sha":"4683463dbbdb1c7cf2a84df307e5c01d699224c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,56 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"mRT2\")\r\n+public class ModRuntimeTest2 extends ModRuntimeTest1 {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    private int intField2;\r\n+\r\n+    public ModRuntimeTest2(int key) {\r\n+        super(key);\r\n+    }\r\n+\r\n+    public ModRuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"IntField: \" + intField2 + \", StringField: \" +\r\n+            super.getStringField() + \" .\";\r\n+    }\r\n+}\r"},{"sha":"14710cc02c7630d2b0799c5fb420718d7b00acd1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,80 @@\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+@Entity\r\n+public class Osoba {\r\n+\t@Id\r\n+\t@GeneratedValue\r\n+\tprivate long id;\r\n+\t\r\n+\tprivate String name;\r\n+\tprivate int age;\r\n+\t\r\n+\tprotected Osoba() {\r\n+\t\tthis(\"?\", 0);\r\n+\t}\r\n+\t\r\n+\tpublic Osoba(String name, int age) {\r\n+\t\tsuper();\r\n+\t\tthis.name = name;\r\n+\t\tthis.age = age;\r\n+\t}\r\n+\t\r\n+\t@ManyToMany\r\n+\tprivate List<Projekt> projekty;\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic long getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+\tpublic List<Projekt> getProjekty() {\r\n+\t\treturn projekty;\r\n+\t}\r\n+\t\r\n+\tpublic void addProjekty(Projekt projekt) {\r\n+\t\tif (projekty == null)\r\n+\t\t\tprojekty = new ArrayList<Projekt>();\r\n+\t\tprojekty.add(projekt);\r\n+\t}\r\n+\t\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic int getAge() {\r\n+\t\treturn age;\r\n+\t}\r\n+\t\r\n+\tpublic void setAge(int age) {\r\n+\t\tthis.age = age;\r\n+\t}\r\n+}\r"},{"sha":"ae5edf61735b4c58e97a7069f186fde767291e22","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,62 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+@Entity\r\n+public class Projekt {\r\n+\t@Id\r\n+\tprivate String name;\r\n+\t\r\n+\t@ManyToMany\r\n+\tprivate List<Osoba> osoby;\r\n+\r\n+\tprotected Projekt() {\r\n+\t\tthis(\"?\");\r\n+\t}\r\n+\t\r\n+\tpublic Projekt(String name) {\r\n+\t\tsuper();\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic List<Osoba> getOsoby() {\r\n+\t\treturn osoby;\r\n+\t}\r\n+\r\n+\tpublic void addOsoba(Osoba osoba) {\r\n+\t\tif (osoby ==null)\r\n+\t\t\tosoby = new ArrayList<Osoba>();\r\n+\t\tosoby.add(osoba);\r\n+\t}\t\r\n+}\r"},{"sha":"ccdeb19f5fe2616de756e88e40f03333d3b1e7a8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,149 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.NamedQueries;\r\n+import javax.persistence.NamedQuery;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@NamedQueries({\r\n+@NamedQuery(name = \"named\",\r\n+    query = \"SELECT o FROM QueryTest1 o\"),\r\n+@NamedQuery(name = \"sql\",\r\n+    query = \"select * from foo\"),\r\n+@NamedQuery(name = \"systemsql\",\r\n+    query = \"select * from foo\"),\r\n+@NamedQuery(name = \"systemjdoql\",\r\n+    query = \"select o FROM QueryTest1 where o.numb == 4\")\r\n+    })\r\n+public class QueryTest1 {\r\n+\r\n+    /*\r\n+      * Changed Variable names : Afam Okeke\r\n+      * Reason: The old var names are reserved my some DB's namely MYSQL.\r\n+      */\r\n+    @Id\r\n+    @GeneratedValue(strategy = GenerationType.AUTO)\r\n+    public int id;\r\n+\r\n+    public static final long FIVE = 5L;\r\n+\r\n+    private long numb = 0L;\r\n+    private String strong = null;\r\n+\r\n+    @Column(length = -1)\r\n+    private String cField = null;\r\n+    private boolean boolt = false;\r\n+    private float decar = 1.0f;\r\n+    private char chart = ' ';\r\n+    private Date datum = null;\r\n+\r\n+    @ManyToMany(mappedBy = \"manyToMany3\")\r\n+    private List<QueryTest4> manyToMany = null;\r\n+\r\n+    public QueryTest1() {\r\n+        decar = 1.0f;\r\n+    }\r\n+\r\n+    public QueryTest1(int id) {\r\n+        decar = 1.0f;\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public long getNum() {\r\n+        return numb;\r\n+    }\r\n+\r\n+    public void setNum(long val) {\r\n+        numb = val;\r\n+    }\r\n+\r\n+    public String getString() {\r\n+        return strong;\r\n+    }\r\n+\r\n+    public void setString(String val) {\r\n+        strong = val;\r\n+    }\r\n+\r\n+    public String getClob() {\r\n+        return cField;\r\n+    }\r\n+\r\n+    public void setClob(String val) {\r\n+        cField = val;\r\n+    }\r\n+\r\n+    public boolean getBool() {\r\n+        return boolt;\r\n+    }\r\n+\r\n+    public void setBool(boolean val) {\r\n+        boolt = val;\r\n+    }\r\n+\r\n+    public float getDecimal() {\r\n+        return decar;\r\n+    }\r\n+\r\n+    public void setDecimal(float val) {\r\n+        decar = val;\r\n+    }\r\n+\r\n+    public char getCharacter() {\r\n+        return chart;\r\n+    }\r\n+\r\n+    public void setCharacter(char val) {\r\n+        chart = val;\r\n+    }\r\n+\r\n+    public void setDate(Date val) {\r\n+        datum = val;\r\n+    }\r\n+\r\n+    public Date getDate() {\r\n+        return datum;\r\n+    }\r\n+\r\n+    public List<QueryTest4> getManyToMany() {\r\n+        return manyToMany;\r\n+    }\r\n+\r\n+    public void setManyToMany(List<QueryTest4> val) {\r\n+        manyToMany = val;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return this.id;\r\n+    }\r\n+}\r"},{"sha":"50e33e30d4943ee255625dcfe9ec2b4e2300e523","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+import org.apache.openjpa.persistence.PersistentMap;\r\n+import org.apache.openjpa.persistence.jdbc.KeyColumn;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"query2\")\r\n+public class QueryTest2 extends QueryTest1 {\r\n+\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    private QueryTest2 oneToOne = null;\r\n+\r\n+    @PersistentCollection\r\n+    private List<String> stringCollection = null;\r\n+\r\n+    @OneToMany(cascade = { CascadeType.ALL })\r\n+    private List<QueryTest2> oneToMany = null;\r\n+\r\n+    @PersistentMap\r\n+    @KeyColumn(name = \"SMAP\")\r\n+    private Map<String, String> stringMap = null;\r\n+\r\n+    @OneToMany(cascade = { CascadeType.ALL })\r\n+    @KeyColumn(name = \"QT2\")\r\n+    private Map<String, QueryTest2> stringToManyMap = null;\r\n+\r\n+    public QueryTest2() {\r\n+    }\r\n+\r\n+    public QueryTest2(int id) {\r\n+        super(id);\r\n+    }\r\n+\r\n+    public QueryTest2 getOneToOne() {\r\n+        return oneToOne;\r\n+    }\r\n+\r\n+    public void setOneToOne(QueryTest2 val) {\r\n+        oneToOne = val;\r\n+    }\r\n+\r\n+    public Collection getStringCollection() {\r\n+        return stringCollection;\r\n+    }\r\n+\r\n+    public void setStringCollection(List<String> val) {\r\n+        stringCollection = val;\r\n+    }\r\n+\r\n+    public Collection getOneToMany() {\r\n+        return oneToMany;\r\n+    }\r\n+\r\n+    public void setOneToMany(List<QueryTest2> val) {\r\n+        oneToMany = val;\r\n+    }\r\n+\r\n+    public Map getStringMap() {\r\n+        return stringMap;\r\n+    }\r\n+\r\n+    public void setStringMap(Map val) {\r\n+        stringMap = val;\r\n+    }\r\n+\r\n+    public Map getStringToManyMap() {\r\n+        return stringToManyMap;\r\n+    }\r\n+\r\n+    public void setStringToManyMap(Map val) {\r\n+        stringToManyMap = val;\r\n+    }\r\n+}\r"},{"sha":"0eaeb05788b2a80a56b01d2139e0b1fa410168b9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class QueryTest3 extends QueryTest2 {\r\n+\r\n+    private int num2 = 0;\r\n+\r\n+    public QueryTest3() {\r\n+    }\r\n+\r\n+    public QueryTest3(int id) {\r\n+        super(id);\r\n+    }\r\n+\r\n+    public void setNum2(int val) {\r\n+        num2 = val;\r\n+    }\r\n+}\r"},{"sha":"e7a6a383187471b452ad95a9f8226c8977d4c5dd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.Collection;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToMany;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+/**\r\n+ * <p>Used in testing; should be enhanced.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class QueryTest4 {\r\n+\r\n+    public int num3 = 0;\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    public QueryTest2 oneToOne2 = null;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    public QueryTest2 oneToOne3 = null;\r\n+\r\n+    @ManyToMany(cascade = { CascadeType.ALL })\r\n+    public Collection<QueryTest2> manyToMany3 = null;\r\n+\r\n+    public int getNum3() {\r\n+        return num3;\r\n+    }\r\n+\r\n+    public void setNum3(int val) {\r\n+        num3 = val;\r\n+    }\r\n+\r\n+    public void setOneToOne2(QueryTest2 qt2) {\r\n+        oneToOne2 = qt2;\r\n+    }\r\n+\r\n+    public void setOneToOne3(QueryTest2 qt2) {\r\n+        oneToOne3 = qt2;\r\n+    }\r\n+\r\n+    public void setManyToMany3(Collection<QueryTest2> val) {\r\n+        manyToMany3 = val;\r\n+    }\r\n+}\r"},{"sha":"8eaaa5ac3969e908adc04adee91e27ac878c49dc","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","status":"added","additions":283,"deletions":0,"changes":283,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,283 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.io.Serializable;\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.Date;\r\n+import java.util.HashSet;\r\n+import java.util.Locale;\r\n+import java.util.Set;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"RT1\")\r\n+public class RuntimeTest1 implements Serializable {\r\n+\r\n+    public static final String someStaticField = \"someField\";\r\n+\r\n+    private byte byteField;\r\n+    private boolean booleanField;\r\n+    private char charField;\r\n+    private double doubleField;\r\n+    private float floatField;\r\n+    private int intField;\r\n+    private long longField;\r\n+    private short shortField;\r\n+    private String stringField;\r\n+    private BigInteger bigIntegerField;\r\n+    private BigDecimal bigDecimalField;\r\n+    private Date dateField;\r\n+    private Locale localeField;\r\n+    private Byte byteObjfield;\r\n+    private Boolean booleanObjField;\r\n+    private Character charObjField;\r\n+    private Double doubleObjField;\r\n+    private Float floatObjField;\r\n+    private Integer intObjField;\r\n+    private Long longObjField;\r\n+    private Short shortObjField;\r\n+\r\n+    // transactional only\r\n+    private TransactionalClassPC transField;\r\n+    public String transString;\r\n+\r\n+    // relations\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    private RuntimeTest1 selfOneOne;\r\n+    @PersistentCollection\r\n+    private Set selfOneMany = new HashSet();\r\n+\r\n+    public RuntimeTest1() {\r\n+    }\r\n+\r\n+    public RuntimeTest1(int key) {\r\n+        this.intField = key;\r\n+        floatField = 1.0f;\r\n+    }\r\n+\r\n+    public RuntimeTest1(String str, int i) {\r\n+        stringField = str;\r\n+        intField = i;\r\n+        floatField = 1.0f;\r\n+    }\r\n+\r\n+    public byte getByteField() {\r\n+        return this.byteField;\r\n+    }\r\n+\r\n+    public void setByteField(byte byteField) {\r\n+        this.byteField = byteField;\r\n+    }\r\n+\r\n+    public boolean getBooleanField() {\r\n+        return this.booleanField;\r\n+    }\r\n+\r\n+    public void setBooleanField(boolean booleanField) {\r\n+        this.booleanField = booleanField;\r\n+    }\r\n+\r\n+    public char getCharField() {\r\n+        return this.charField;\r\n+    }\r\n+\r\n+    public void setCharField(char charField) {\r\n+        this.charField = charField;\r\n+    }\r\n+\r\n+    public double getDoubleField() {\r\n+        return this.doubleField;\r\n+    }\r\n+\r\n+    public void setDoubleField(double doubleField) {\r\n+        this.doubleField = doubleField;\r\n+    }\r\n+\r\n+    public float getFloatField() {\r\n+        return this.floatField;\r\n+    }\r\n+\r\n+    public void setFloatField(float floatField) {\r\n+        this.floatField = floatField;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+\r\n+    public long getLongField() {\r\n+        return this.longField;\r\n+    }\r\n+\r\n+    public void setLongField(long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public short getShortField() {\r\n+        return this.shortField;\r\n+    }\r\n+\r\n+    public void setShortField(short shortField) {\r\n+        this.shortField = shortField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return this.stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public BigInteger getBigIntegerField() {\r\n+        return this.bigIntegerField;\r\n+    }\r\n+\r\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\r\n+        this.bigIntegerField = bigIntegerField;\r\n+    }\r\n+\r\n+    public BigDecimal getBigDecimalField() {\r\n+        return this.bigDecimalField;\r\n+    }\r\n+\r\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\r\n+        this.bigDecimalField = bigDecimalField;\r\n+    }\r\n+\r\n+    public Date getDateField() {\r\n+        return this.dateField;\r\n+    }\r\n+\r\n+    public void setDateField(Date dateField) {\r\n+        this.dateField = dateField;\r\n+    }\r\n+\r\n+    public Locale getLocaleField() {\r\n+        return this.localeField;\r\n+    }\r\n+\r\n+    public void setLocaleField(Locale localeField) {\r\n+        this.localeField = localeField;\r\n+    }\r\n+\r\n+    public Byte getByteObjfield() {\r\n+        return this.byteObjfield;\r\n+    }\r\n+\r\n+    public void setByteObjfield(Byte byteObjfield) {\r\n+        this.byteObjfield = byteObjfield;\r\n+    }\r\n+\r\n+    public Boolean getBooleanObjField() {\r\n+        return this.booleanObjField;\r\n+    }\r\n+\r\n+    public void setBooleanObjField(Boolean booleanObjField) {\r\n+        this.booleanObjField = booleanObjField;\r\n+    }\r\n+\r\n+    public Character getCharObjField() {\r\n+        return this.charObjField;\r\n+    }\r\n+\r\n+    public void setCharObjField(Character charObjField) {\r\n+        this.charObjField = charObjField;\r\n+    }\r\n+\r\n+    public Double getDoubleObjField() {\r\n+        return this.doubleObjField;\r\n+    }\r\n+\r\n+    public void setDoubleObjField(Double doubleObjField) {\r\n+        this.doubleObjField = doubleObjField;\r\n+    }\r\n+\r\n+    public Float getFloatObjField() {\r\n+        return this.floatObjField;\r\n+    }\r\n+\r\n+    public void setFloatObjField(Float floatObjField) {\r\n+        this.floatObjField = floatObjField;\r\n+    }\r\n+\r\n+    public Integer getIntObjField() {\r\n+        return this.intObjField;\r\n+    }\r\n+\r\n+    public void setIntObjField(Integer intObjField) {\r\n+        this.intObjField = intObjField;\r\n+    }\r\n+\r\n+    public Long getLongObjField() {\r\n+        return this.longObjField;\r\n+    }\r\n+\r\n+    public void setLongObjField(Long longObjField) {\r\n+        this.longObjField = longObjField;\r\n+    }\r\n+\r\n+    public Short getShortObjField() {\r\n+        return this.shortObjField;\r\n+    }\r\n+\r\n+    public void setShortObjField(Short shortObjField) {\r\n+        this.shortObjField = shortObjField;\r\n+    }\r\n+\r\n+    public TransactionalClassPC getTransField() {\r\n+        return this.transField;\r\n+    }\r\n+\r\n+    public void setTransField(TransactionalClassPC transField) {\r\n+        this.transField = transField;\r\n+    }\r\n+\r\n+    public RuntimeTest1 getSelfOneOne() {\r\n+        return this.selfOneOne;\r\n+    }\r\n+\r\n+    public void setSelfOneOne(RuntimeTest1 selfOneOne) {\r\n+        this.selfOneOne = selfOneOne;\r\n+    }\r\n+\r\n+    public Set getSelfOneMany() {\r\n+        return this.selfOneMany;\r\n+    }\r\n+\r\n+    public void setSelfOneMany(Set selfOneMany) {\r\n+        this.selfOneMany = selfOneMany;\r\n+    }\r\n+}\r"},{"sha":"93c1d16dbf1c506222a2a4766365edeb4ecda8e6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"RT2\")\r\n+public class RuntimeTest2 extends RuntimeTest1 {\r\n+\r\n+    private static final long serialVersionUID = 1L;\r\n+    private int intField2;\r\n+\r\n+    public RuntimeTest2() {\r\n+    }\r\n+\r\n+    public RuntimeTest2(int key) {\r\n+        super(key);\r\n+    }\r\n+\r\n+    public RuntimeTest2(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField2() {\r\n+        return this.intField2;\r\n+    }\r\n+\r\n+    public void setIntField2(int intField2) {\r\n+        this.intField2 = intField2;\r\n+    }\r\n+\r\n+    public String toString() {\r\n+        return \"IntField: \" + intField2 + \", StringField: \" +\r\n+            super.getStringField() + \" .\";\r\n+    }\r\n+}\r"},{"sha":"35c633ff4778a56ab6cbf0da78d5fa100198ac38","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+\r\n+/**\r\n+ * <p>Persitent type used in testing.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+@DiscriminatorValue(\"RT3\")\r\n+public class RuntimeTest3 extends RuntimeTest2 {\r\n+\r\n+    private int intField3;\r\n+\r\n+    public RuntimeTest3() {\r\n+    }\r\n+\r\n+    public RuntimeTest3(String str, int i) {\r\n+        super(str, i);\r\n+    }\r\n+\r\n+    public int getIntField3() {\r\n+        return this.intField3;\r\n+    }\r\n+\r\n+    public void setIntField3(int intField3) {\r\n+        this.intField3 = intField3;\r\n+    }\r\n+}\r"},{"sha":"353f2834166d89188b33c81f0735834ec4abce6d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class RuntimeTest4 {\r\n+\r\n+    private String name;\r\n+    private Collection runtimeTest5s = new ArrayList();\r\n+\r\n+    public RuntimeTest4(String str) {\r\n+        name = str;\r\n+    }\r\n+\r\n+    public void setName(String val) {\r\n+        name = val;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public Collection getRuntimeTest5s() {\r\n+        return runtimeTest5s;\r\n+    }\r\n+\r\n+    public void setRuntimeTest5s(Collection c) {\r\n+        runtimeTest5s = c;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"ac0a6abb3f34bd06af5f631075efd581cf2bd491","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+public class RuntimeTest5 {\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToOne(cascade = { CascadeType.ALL })\r\n+    private RuntimeTest4 runtimeTest4;\r\n+\r\n+    public RuntimeTest5(String str) {\r\n+        name = str;\r\n+    }\r\n+\r\n+    public void setName(String val) {\r\n+        name = val;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setRuntimeTest4(RuntimeTest4 val) {\r\n+        runtimeTest4 = val;\r\n+    }\r\n+\r\n+    public RuntimeTest4 getRuntimeTest4() {\r\n+        return runtimeTest4;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"7cd82b43532bb39ce81bdda6f3a1c9385bf6b66c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+/**\r\n+ * <p>Single-field application identity class.</p>\r\n+ *\r\n+ * @author Abe White\r\n+ */\r\n+@Entity\r\n+public class SimpleAppIdPC {\r\n+\r\n+    @Id\r\n+    private String pk;\r\n+\r\n+    private int intField;\r\n+\r\n+    public String getPk() {\r\n+        return this.pk;\r\n+    }\r\n+\r\n+    public void setPk(String pk) {\r\n+        this.pk = pk;\r\n+    }\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"eb59d5f23a6600ae510e1a7c4edc691d52b40d19","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,35 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.query.common.apps;\r\n+\r\n+import javax.persistence.Entity;\r\n+\r\n+@Entity\r\n+public class TransactionalClassPC {\r\n+\r\n+    private int intField;\r\n+\r\n+    public int getIntField() {\r\n+        return this.intField;\r\n+    }\r\n+\r\n+    public void setIntField(int intField) {\r\n+        this.intField = intField;\r\n+    }\r\n+}\r"},{"sha":"2d2211d0eb98b0010282bcefaf7374f263ee0232","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/Node.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.recursive;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class Node {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+    @Version\n+    private int version;\n+\n+    @OneToMany\n+    private List<Node> nodes = new ArrayList<Node>();\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public int getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(int version) {\n+        this.version = version;\n+    }\n+\n+    public List<Node> getNodes() {\n+        return nodes;\n+    }\n+\n+    public void setNodes(List<Node> nodes) {\n+        this.nodes = nodes;\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"4db37279a96e69ed0a7cf88706d11acc6ee74945","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/recursive/TestRecursiveRelationships.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.recursive;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestRecursiveRelationships extends SingleEMFTestCase {\n+    private int _l1Nodes = 3;\n+    private int _l2Nodes = 3;\n+\n+    public void setUp() {\n+        setUp(Node.class);\n+    }\n+\n+    public void testRecursiveNodes() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        // set up initial tree\n+        em.getTransaction().begin();\n+        Node root = new Node();\n+        for (int i = 0; i < _l1Nodes; i++) {\n+            Node n1 = new Node();\n+            root.getNodes().add(n1);\n+            em.persist(n1);\n+        }\n+        em.persist(root);\n+        em.getTransaction().commit();\n+\n+        // clear PC\n+        em.refresh(root);\n+        int rootId = root.getId();\n+        em.clear();\n+        em.close();\n+        em = emf.createEntityManager();\n+\n+        // add new nodes\n+        em.getTransaction().begin();\n+        root = em.getReference(Node.class, rootId);\n+        assertNotNull(root);\n+        assertNotNull(root.getNodes());\n+        for (Node n : root.getNodes()) {\n+            for (int j = 0; j < _l2Nodes; j++) {\n+                Node n2 = new Node();\n+                n.getNodes().add(n.getNodes().size(), n2);\n+                em.persist(n2);\n+            }\n+        }\n+        em.getTransaction().commit();\n+        em.clear();\n+        em.close();\n+        em = emf.createEntityManager();\n+\n+        // ensure count is correct.\n+        root = em.getReference(Node.class, rootId);\n+        assertNotNull(root);\n+        assertNotNull(root.getNodes());\n+        assertEquals(_l1Nodes, root.getNodes().size());\n+        for (Node n : root.getNodes()) {\n+            assertEquals(_l2Nodes, n.getNodes().size());\n+        }\n+        em.close();\n+    }\n+}"},{"sha":"c988f07ca4243dd31a2c14ed503999c1d32725c9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,61 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class BasicEntity {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private BasicEntity rel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public BasicEntity getRel() { \r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(BasicEntity rel) { \r\n+        this.rel = rel; \r\n+    }\r\n+}\r"},{"sha":"828f7e79955e2b2e793b8f029bbda767ce8b1f9f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+public class BidiChild implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    private BidiParent oneToManyParent;\n+\n+    @OneToOne(fetch=FetchType.LAZY)\n+    private BidiParent oneToOneParent;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public BidiParent getOneToOneParent() { \n+        return oneToOneParent; \n+    }\n+\n+    public void setOneToOneParent(BidiParent parent) { \n+        oneToOneParent = parent; \n+    }\n+\n+    public BidiParent getOneToManyParent() { \n+        return oneToManyParent; \n+    }\n+\n+    public void setOneToManyParent(BidiParent parent) { \n+        oneToManyParent = parent; \n+    }\n+}"},{"sha":"3b2be5e4d2bce5eb7bb3ff5f43404f1a855cca01","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BidiParent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.OrderBy;\n+\n+@Entity\n+public class BidiParent implements Serializable {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"oneToManyParent\")\n+    @OrderBy(\"name ASC\")\n+    private List<BidiChild> oneToManyChildren = new ArrayList<BidiChild>();\n+\n+    @OneToOne(fetch=FetchType.LAZY, mappedBy=\"oneToOneParent\")\n+    private BidiChild oneToOneChild;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public BidiChild getOneToOneChild() { \n+        return oneToOneChild; \n+    }\n+\n+    public void setOneToOneChild(BidiChild child) { \n+        oneToOneChild = child; \n+    }\n+\n+    public List<BidiChild> getOneToManyChildren() { \n+        return oneToManyChildren; \n+    }\n+}"},{"sha":"6f785cd647c178698b94acde6a172b39b222d248","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/C.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@IdClass(C.CId.class)\n+@Table(name=\"C4\")\n+public class C {\n+\t\n+\t@Id\n+\tprivate String cId;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+    private CM cm;\n+\n+\t@OneToMany(mappedBy=\"c\")\n+\tprivate Set<D> ds = new HashSet<D>();\n+\n+    public C() {\n+    }\n+    \n+    public String getCId() {\n+        return cId;\n+    }\n+\n+    public void setCId(String cId) {\n+        this.cId = cId;\n+    }\n+\n+    public CM getCm() {\n+\t\treturn cm;\n+\t}\n+\n+\tpublic void setCm(CM cm) {\n+\t\tthis.cm = cm;\n+\t}\n+\n+\tpublic Set<D> getDs() {\n+\t\treturn ds;\n+\t}\n+\n+\tpublic void setDs(Set<D> ds) {\n+\t\tthis.ds = ds;\n+\t}\n+    \n+    public static class CId{\n+    \tString cId;\n+    \tCM.CMId  cm;\n+    \t\n+\t\tpublic String getCId() {\n+\t\t\treturn cId;\n+\t\t}\n+\t\tpublic void setCId(String id) {\n+\t\t\tcId = id;\n+\t\t}\n+    \t\n+\t\t\n+\t\tpublic CM.CMId getCm() {\n+\t\t\treturn cm;\n+\t\t}\n+\t\tpublic void setCm(CM.CMId cm) {\n+\t\t\tthis.cm = cm;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj) return true;\n+\t\t\tif (obj == null || !(obj instanceof CId))\n+\t\t\t\treturn false;\n+\t\t\t\n+\t\t\tCId id = (CId) obj;\n+\t\t\t\n+\t\t\treturn (this.getCId() == id.getCId() || (this.getCId() != null &&\n+                this.getCId().equals(id.getCId())))\n+\t\t\t\t&& (this.getCm() == id.getCm() || (this.getCm() != null &&\n+                this.getCm().equals(id.getCm())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn ((this.getCId() != null) ? this.getCId().hashCode():0)\n+\t\t\t\t ^ ((this.getCm() != null)? this.getCm().hashCode():0);\n+\t\t}\n+    }\n+}"},{"sha":"7af46e7c0c0ac6ef8e3d6842817f4cab13a60802","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CM.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@IdClass(CM.CMId.class)\n+@Table(name=\"CM4\")\n+public class CM {\n+\t\n+\t@Id\n+    private String cmId;\n+\n+    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy=\"cm\")\n+    private Set<C> cs = new HashSet<C>();\n+\n+    @ManyToOne\n+    @ForeignKey\n+    @Id\n+    private E e;\n+    \n+    public CM() {\n+    }\n+\n+    public String getCmId() {\n+        return cmId;\n+    }\n+\n+    public void setCmId(String cmId) {\n+        this.cmId = cmId;\n+    }\n+\n+\tpublic Set<C> getCs() {\n+\t\treturn cs;\n+\t}\n+\n+\tpublic void setCs(Set<C> cs) {\n+\t\tthis.cs = cs;\n+\t}\n+\t\n+\tpublic void addC(C c){\n+\t\tcs.add(c);\n+\t\tc.setCm(this);\n+\t}\n+\n+\tpublic E getE() {\n+\t\treturn e;\n+\t}\n+\n+\tpublic void setE(E e) {\n+\t\tthis.e = e;\n+\t}\n+\n+\tpublic static class CMId{\n+\t\tprivate String cmId;\n+\t\tprivate String e;\n+\t\t\n+\t\tpublic String getCmId() {\n+\t\t\treturn cmId;\n+\t\t}\n+\t\tpublic void setCmId(String id) {\n+\t\t\tcmId = id;\n+\t\t}\n+\t\t\n+\t\tpublic String getE() {\n+\t\t\treturn e;\n+\t\t}\n+\t\tpublic void setE(String e) {\n+\t\t\tthis.e = e;\n+\t\t}\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\t\t\t\n+\t\t\tif (obj == null && ! (obj instanceof CMId))\n+\t\t\t\treturn false;\n+\t\t\tCMId id = (CMId) obj;\n+\t\t\treturn ( this.getCmId() == id.getCmId() ||\n+                (this.getCmId() != null && this.getCmId().equals(id.getCmId())))\n+\t\t\t\t&& ( this.getE() == id.getE() || (this.getE() != null &&\n+                this.getE().equals(id.getE())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getCmId() != null? this.getCmId().hashCode():0) \n+\t\t\t\t ^ (this.getE()!= null ? this.getE().hashCode():0);\n+\t\t}\n+\t}\n+\n+}"},{"sha":"1365b8fc754c36877e215a00330b5706a90f1a9c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,66 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\r\n+\r\n+@Entity\r\n+public class CascadingOneManyChild {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(optional=false)\r\n+    @JoinColumn(name=\"PARENT_ID\", nullable=false)\r\n+    @ForeignKey\r\n+    private CascadingOneManyParent parent;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public CascadingOneManyParent getParent() { \r\n+        return parent; \r\n+    }\r\n+\r\n+    public void setParent(CascadingOneManyParent parent) { \r\n+        this.parent = parent; \r\n+    }\r\n+}\r"},{"sha":"4fd52138dcc17cce846290dde6cd16272ea4e0ed","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,69 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.OrderBy;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class CascadingOneManyParent {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @OneToMany(mappedBy=\"parent\", cascade=CascadeType.ALL)\r\n+    @OrderBy(\"name ASC\")\r\n+    private List<CascadingOneManyChild> children = \r\n+        new ArrayList<CascadingOneManyChild>();\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public List<CascadingOneManyChild> getChildren() { \r\n+        return children; \r\n+    }\r\n+\r\n+    public void addChild(CascadingOneManyChild child) {\r\n+        child.setParent(this);\r\n+        children.add(child);\r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"17b318d58c2c5c1921c877bb219d6ef505d70c67","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityA {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long aId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)\n+\tprotected Set<ChainEntityB> chainEntityBSet;\n+\n+\tpublic ChainEntityA () {\n+\t\tsuper ();\n+\t}\n+\n+\tpublic void addChildEntityB (ChainEntityB bean) {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\tchainEntityBSet.add (bean);\n+\t}\n+\n+\tpublic Collection<ChainEntityB> getChildren () {\n+\t\tif (null == chainEntityBSet)\n+\t\t\tchainEntityBSet = new LinkedHashSet<ChainEntityB> ();\n+\t\treturn chainEntityBSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn aId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.aId = id;\n+\t}\n+}"},{"sha":"5722823e6c30d045a298b7fcc5dd5e2d9efcad97","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityB.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityB {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long bId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t//cascade = CascadeType.ALL, \n+\t@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"chainEntityB\")\n+\tprotected Set<ChainEntityC> chainEntityCSet = null;\n+\n+\tpublic void addChainEntityC (ChainEntityC bean) {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\tchainEntityCSet.add (bean);\n+\t\tbean.setChainEntityB (this);\n+\t}\n+\n+\tpublic Collection<ChainEntityC> getChainEntityCSet () {\n+\t\tif (null == chainEntityCSet)\n+\t\t\tchainEntityCSet = new LinkedHashSet<ChainEntityC> ();\n+\t\treturn chainEntityCSet;\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn bId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.bId = id;\n+\t}\n+\n+}"},{"sha":"334ed5c76b9363219615f4d5e1b6ea4f9f02964e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ChainEntityC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ChainEntityC {\n+\n+\t@Id\n+\t@GeneratedValue\n+\tprivate long cId;\n+\n+\t@Version\n+\tprivate Integer optLock;\n+\n+\t@ManyToOne(fetch = FetchType.EAGER, cascade=CascadeType.ALL)\n+\tprotected ChainEntityB chainEntityB;\n+\n+\t@Basic\n+\tprotected long chainEntityBId;\n+\n+\tpublic void setChainEntityB (ChainEntityB b) {\n+\t\tthis.chainEntityB = b;\n+//\t\tthis.chainEntityBId = null == b ? 0 : b.getId ();\n+\t}\n+\n+\tprivate String name;\n+\n+\tpublic String getName () {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName (String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic long getId () {\n+\t\treturn cId;\n+\t}\n+\n+\tpublic void setId (long id) {\n+\t\tthis.cId = id;\n+\t}\n+\n+}"},{"sha":"e7a1f2117216a39df57c53b269f64bf8c415ccd7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,122 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.*;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.Collection;\r\n+import java.util.ArrayList;\r\n+@Entity\r\n+public class Customer {\r\n+\r\n+    @Embeddable\r\n+    public static class CustomerKey implements Serializable {\r\n+        public String countryCode;\r\n+        public int id;\r\n+\r\n+        public CustomerKey(){}\r\n+\r\n+        public  CustomerKey(String cc, int id){\r\n+            countryCode=cc;\r\n+            this.id=id;\r\n+        }\r\n+\r\n+        public String toString() {\r\n+            return countryCode+\"/\"+id;\r\n+        }\r\n+        \r\n+        @Override\r\n+        public boolean equals(Object obj){\r\n+            if (obj==this) return true;\r\n+            if ( ! (obj instanceof CustomerKey) ) return false;\r\n+            CustomerKey key = (CustomerKey)obj;\r\n+            if (key.countryCode.equals(this.countryCode) && \r\n+                    key.id==this.id) return true;\r\n+            return false;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int hashCode() {\r\n+            return this.countryCode.hashCode()\r\n+            ^ this.id;\r\n+        }\r\n+    }\r\n+\r\n+    public enum CreditRating { POOR, GOOD, EXCELLENT };\r\n+\r\n+    @EmbeddedId\r\n+    CustomerKey cid;\r\n+    @Column(length=30)\r\n+    @Basic(fetch=FetchType.LAZY)\r\n+    String name;\r\n+    @Enumerated\r\n+    @Basic(fetch=FetchType.LAZY)\r\n+    CreditRating creditRating;\r\n+    @Version\r\n+    long version;\r\n+\r\n+    @OneToMany(fetch=FetchType.LAZY, mappedBy=\"customer\")\r\n+    private Collection<Order> orders = new ArrayList<Order>();\r\n+\r\n+    public Customer() {}\r\n+\r\n+    public Customer(CustomerKey cid, String name, CreditRating rating){\r\n+        this.cid=cid;\r\n+        this.name=name;\r\n+        this.creditRating=rating;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public CreditRating getRating() {\r\n+        return creditRating;\r\n+    }\r\n+\r\n+    public void setRating(CreditRating rating) {\r\n+        this.creditRating = rating;\r\n+    }\r\n+\r\n+    public Collection<Order> getOrders() {\r\n+        return orders;\r\n+    }\r\n+    \r\n+    public void setOrders(Collection<Order> orders) {\r\n+        this.orders = orders;\r\n+    }\r\n+    \r\n+    public String toString() {\r\n+        return \"Customer:\"+cid+\" name:\"+name; \r\n+    }\r\n+\r\n+    public CustomerKey getCid() {\r\n+        return cid;\r\n+    }\r\n+\r\n+    public void setCid(CustomerKey cid) {\r\n+        this.cid = cid;\r\n+    }\r\n+}\r\n+\r"},{"sha":"6c6129b6a2d434c12e6607d8dd546eb2b0fa985f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/D.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+\n+@Entity\n+@Table(name=\"D4\")\n+@IdClass(D.CId.class)\n+public class D {\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\tprivate C c;\n+\n+\t@Id\n+\tprivate String id;\n+\t\n+\tprivate String a;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate VC vc;\n+\n+\tpublic D() {\n+\t}\n+\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\tpublic void setId(String id) {\n+\t\tthis.id = id;\n+\t}\n+\t\n+\tpublic String getA() {\n+\t\treturn a;\n+\t}\n+\n+\tpublic void setA(String a) {\n+\t\tthis.a = a;\n+\t}\n+\n+\tpublic C getC() {\n+\t\treturn c;\n+\t}\n+\n+\tpublic void setC(C c) {\n+\t\tthis.c = c;\n+\t}\n+\n+\tpublic VC getVc() {\n+\t\treturn vc;\n+\t}\n+\n+\tpublic void setVc(VC vc) {\n+\t\tthis.vc = vc;\n+\t}\n+\t\n+\t\n+\tpublic static class CId{\n+\t\tprivate String id;\n+\t\t\n+\t\tprivate VC.VCId vc;\n+\t\t\n+\t\tpublic VC.VCId getVc() {\n+\t\t\treturn vc;\n+\t\t}\n+\t\tpublic void setVc(VC.VCId vc) {\n+\t\t\tthis.vc = vc;\n+\t\t}\n+\t\t\n+\t\tpublic String getId() {\n+\t\t\treturn id;\n+\t\t}\n+\t\tpublic void setId(String id) {\n+\t\t\tthis.id = id;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null ||  ! (obj instanceof CId))\n+\t\t\t\treturn false;\n+\t\t\tCId id = (CId) obj;\n+\t\t\treturn (this.getId() == id.getId() || (this.getId() != null &&\n+                this.getId().equals(id.getId())))\n+\t\t\t\t&& (this.getVc() == id.getVc() || (this.getVc() != null &&\n+                this.getVc().equals(id.getVc())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getId() != null ? this.getId().hashCode():0)\n+\t\t\t     ^ (this.getVc() != null ? this.getVc().hashCode():0);\n+\t\t}\n+\t\t\t\t\n+\t}\n+\n+}"},{"sha":"d28ec627f9a2cf0003bf73fdf2e0b495a580910a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+import org.apache.openjpa.persistence.DataStoreId;\r\n+\r\n+@Entity\r\n+@DataStoreId\r\n+public class DataStoreBasicEntity {\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private BasicEntity rel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public BasicEntity getRel() { \r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(BasicEntity rel) { \r\n+        this.rel = rel; \r\n+    }\r\n+}\r"},{"sha":"260ec3580dc4be1bab7deadc1e57266cc25a9156","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class DataStoreManyOneIdOwner {\r\n+\r\n+    @Id\r\n+    @ManyToOne\r\n+    private DataStoreBasicEntity id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private DataStoreManyOneIdOwner selfRel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public DataStoreBasicEntity getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public void setId(DataStoreBasicEntity id) { \r\n+        this.id = id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public DataStoreManyOneIdOwner getSelfRel() { \r\n+        return selfRel; \r\n+    }\r\n+\r\n+    public void setSelfRel(DataStoreManyOneIdOwner selfRel) { \r\n+        this.selfRel = selfRel; \r\n+    }\r\n+}\r"},{"sha":"2e0bb1fd2194b602d829b11e1810e24c31f92f9e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/E.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name=\"E4\")\n+public class E {\n+\n+\t@Id\n+\tprivate String eId;\n+\n+\tprivate String name;\n+\n+\t@OneToMany(cascade = CascadeType.ALL, mappedBy = \"e\")\n+\tprivate Set<VCS> vcss = new HashSet<VCS>();\n+\n+\t@OneToMany(cascade = CascadeType.ALL, mappedBy = \"e\")\n+\tprivate Set<CM> cms = new HashSet<CM>();\n+\n+\tpublic E() {\n+\t}\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic Set<CM> getCms() {\n+\t\treturn cms;\n+\t}\n+\n+\tpublic void setCms(Set<CM> cms) {\n+\t\tthis.cms = cms;\n+\t}\n+\n+\tpublic String getEId() {\n+\t\treturn eId;\n+\t}\n+\n+\tpublic void setEId(String id) {\n+\t\teId = id;\n+\t}\n+\n+\tpublic Set<VCS> getVcss() {\n+\t\treturn vcss;\n+\t}\n+\n+\tpublic void setVcss(Set<VCS> vcss) {\n+\t\tthis.vcss = vcss;\n+\t}\n+}"},{"sha":"61935c9a78d9fe3c926d891f92023f514b099167","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Embeddable\r\n+public class EmbeddableWithRelation {\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(cascade=CascadeType.ALL)\r\n+    private MultipleSameTypedEmbedded rel;\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public MultipleSameTypedEmbedded getRel() { \r\n+        return rel; \r\n+    }\r\n+\r\n+    public void setRel(MultipleSameTypedEmbedded rel) { \r\n+        this.rel = rel; \r\n+    }\r\n+}\r"},{"sha":"b0d5c370cd046acbc091f4ac090043f6977cd2ba","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"A1\")\r\n+public class EntityA1InverseEager extends EntityAInverseEager {\r\n+    private String name1;\r\n+\r\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n+\t\r\n+\tpublic EntityA1InverseEager() {}\r\n+\t\r\n+\tpublic EntityA1InverseEager(String name) {\r\n+\t    super(name);\r\n+\t    this.name1 = name;\r\n+\t}\r\n+\r\n+\tpublic String getName1() {\r\n+        return name1;\r\n+    }\r\n+    \r\n+    public void setName1(String name1) {\r\n+        this.name1 = name1;\r\n+    }\r\n+}\r"},{"sha":"14b0c544599b1881d405977467a1082dbec499f6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"A2\")\r\n+public class EntityA2InverseEager extends EntityAInverseEager {\r\n+    private String name2;\r\n+\r\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n+\t\r\n+\tpublic EntityA2InverseEager() {}\r\n+\t\r\n+\tpublic EntityA2InverseEager(String name) {\r\n+\t    super(name);\r\n+\t    this.name2 = name;\r\n+\t}\r\n+\r\n+\tpublic String getName2() {\r\n+        return name2;\r\n+    }\r\n+    \r\n+    public void setName2(String name2) {\r\n+        this.name2 = name2;\r\n+    }\r\n+}\r"},{"sha":"3fac446dc892ee919b8fe16e6f078dc9bd392266","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.DiscriminatorColumn;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n+@DiscriminatorColumn(name=\"TYPE\")\r\n+public class EntityAInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+\r\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n+\t\r\n+\tpublic EntityAInverseEager() {}\r\n+\t\r\n+\tpublic EntityAInverseEager(String name) {\r\n+\t    this.name = name;\r\n+\t}\r\n+\t\r\n+\tpublic List<EntityBInverseEager> getListB() {\r\n+\t\treturn listB;\r\n+\t}\r\n+\t\r\n+\tpublic List addB(EntityBInverseEager entityB) {\r\n+\t\tlistB.add(entityB);\r\n+\t\treturn listB;\r\n+\t}\r\n+\t\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"01c303f73f30e34afc332fae78806f24dbf747fd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,67 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+@Entity\r\n+public class EntityBInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+\r\n+\t@ManyToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)\r\n+\tprivate EntityAInverseEager entityA;\r\n+\t\r\n+    public EntityBInverseEager() {}\r\n+    \r\n+    public EntityBInverseEager(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    public EntityAInverseEager getA() {\r\n+\t\treturn entityA;\r\n+\t}\r\n+\t\r\n+\tpublic void setA(EntityAInverseEager entityA) {\r\n+\t\tthis.entityA = entityA;\r\n+\t}\r\n+\t\r\n+    public int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+    \r\n+    \r\n+\t\r\n+}\r"},{"sha":"6ff39663590d80a1052f34e503044023df33670e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,88 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+\r\n+public class EntityCInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+    \r\n+    private int age;\r\n+    \r\n+    private int balance;\r\n+    \r\n+\t@OneToOne(fetch=FetchType.EAGER, mappedBy=\"entityC\")\r\n+\tprivate EntityDInverseEager entityD = null;\r\n+\t\r\n+\tpublic EntityCInverseEager() {}\r\n+\t\r\n+\tpublic EntityCInverseEager(String name, int age, int balance) {\r\n+\t    this.name = name;\r\n+\t    this.age = age;\r\n+\t    this.balance = balance;\r\n+\t}\r\n+\t\r\n+\tpublic EntityDInverseEager getD() {\r\n+\t\treturn entityD;\r\n+\t}\r\n+\t\r\n+\tpublic void setD(EntityDInverseEager entityD) {\r\n+\t\tthis.entityD = entityD;\r\n+\t}\r\n+\t\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public int getAge() {\r\n+        return age;\r\n+    }\r\n+    \r\n+    public void setAge(int age) {\r\n+        this.age = age;\r\n+    }\r\n+\r\n+    public int getBalance() {\r\n+        return balance;\r\n+    }\r\n+    \r\n+    public void setBalance(int balance) {\r\n+        this.balance = balance;\r\n+    }\r\n+    \r\n+    \r\n+    \r\n+\r\n+}\r"},{"sha":"609fab0eec75518f43e7c7915ba9a54e7225ff21","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,98 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.OneToOne;\r\n+\r\n+@Entity\r\n+\r\n+public class EntityDInverseEager  {\r\n+\t@GeneratedValue\r\n+\t@Id private int id;\r\n+    \r\n+    private String name;\r\n+    \r\n+    private int loginCount;\r\n+    \r\n+    private int logoutCount;\r\n+    \r\n+    private String email;\r\n+    \r\n+\r\n+\t@OneToOne(fetch=FetchType.EAGER)\r\n+\tprivate EntityCInverseEager entityC = null;\r\n+\t\r\n+\tpublic EntityDInverseEager() {}\r\n+\t\r\n+\tpublic EntityDInverseEager(String name, String email, int loginCount, \r\n+\t    int logoutCount) {\r\n+\t    this.name = name;\r\n+\t    this.email = email;\r\n+\t    this.loginCount = loginCount;\r\n+\t    this.logoutCount = logoutCount;\r\n+    \r\n+\t}\r\n+\t\r\n+\tpublic EntityCInverseEager getC() {\r\n+\t\treturn entityC;\r\n+\t}\r\n+\t\r\n+\tpublic void setC(EntityCInverseEager entityC) {\r\n+\t\tthis.entityC = entityC;\r\n+\t}\r\n+\t\r\n+\tpublic int getId() {\r\n+\t\treturn id;\r\n+\t}\r\n+\t\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+    \r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public String getEmail() {\r\n+        return email;\r\n+    }\r\n+    \r\n+    public void setEmail(String email) {\r\n+        this.email = email;\r\n+    }\r\n+\r\n+    public int getLoginCount() {\r\n+        return loginCount;\r\n+    }\r\n+    \r\n+    public void setLoginCount(int loginCount) {\r\n+        this.loginCount = loginCount;\r\n+    }\r\n+\r\n+    public int getLogoutCount() {\r\n+        return logoutCount;\r\n+    }\r\n+    \r\n+    public void setLogoutCount(int logoutCount) {\r\n+        this.logoutCount = logoutCount;\r\n+    }}\r"},{"sha":"b5482d69f04da6264c3f00496bb917391f42ec81","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentCollection;\r\n+\r\n+@Entity\r\n+public class HandlerCollectionInstance {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @PersistentCollection\r\n+    private Collection<String> collection = new HashSet<String>();\r\n+\r\n+    public Collection<String> getCollection() {\r\n+        return collection;\r\n+    }\r\n+}\r"},{"sha":"602a3431060efd8b0bb9964c7949d42ea3c41ee3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentMap;\r\n+import org.apache.openjpa.persistence.jdbc.ContainerTable;\r\n+\r\n+@Entity\r\n+public class HandlerToHandlerMapInstance {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @PersistentMap\r\n+    @ContainerTable(name=\"NONSTD_MAPPING_MAP\")\r\n+    private Map<String,String> map = new HashMap<String,String>();\r\n+\r\n+    public Map<String,String> getMap() {\r\n+        return map;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"6a7febc743a47726c5cb6ecf5b34edd46b0bb7c3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,41 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentMap;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+\r\n+@Entity\r\n+public class HandlerToRelationMapInstance {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @PersistentMap(elementCascade = CascadeType.PERSIST)\r\n+    private Map<String,AllFieldTypes> map = new HashMap<String,AllFieldTypes>();\r\n+\r\n+    public Map<String,AllFieldTypes> getMap() {\r\n+        return map;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"e235a99f4c4a72e98293f5b821787ed1961ce6f6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IFace.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IFace.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IFace.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IFace.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+public interface IFace {\n+\n+    public String getName();\n+}"},{"sha":"3bdb2e761f5af02b1360c152c9d202f0c12a0964","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class IdOrderedOneManyChild {\n+\n+    @Id\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private IdOrderedOneManyParent explicitParent;\n+\n+    @ManyToOne\n+    private IdOrderedOneManyParent implicitParent;\n+\n+    @Version\n+    private int optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public void setId(long id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public IdOrderedOneManyParent getExplicitParent() { \n+        return explicitParent; \n+    }\n+\n+    public void setExplicitParent(IdOrderedOneManyParent explicitParent) { \n+        this.explicitParent = explicitParent; \n+    }\n+\n+    public IdOrderedOneManyParent getImplicitParent() { \n+        return implicitParent; \n+    }\n+\n+    public void setImplicitParent(IdOrderedOneManyParent implicitParent) { \n+        this.implicitParent = implicitParent; \n+    }\n+}"},{"sha":"fa86c8b4dfe92aaacf47419ac9bd6b9a85e83f1a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/IdOrderedOneManyParent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class IdOrderedOneManyParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"explicitParent\")\n+    @OrderBy(\"id ASC\")\n+    private List<IdOrderedOneManyChild> explicitChildren = \n+        new ArrayList<IdOrderedOneManyChild>();\n+\n+    @OneToMany(mappedBy=\"implicitParent\")\n+    @OrderBy\n+    private List<IdOrderedOneManyChild> implicitChildren = \n+        new ArrayList<IdOrderedOneManyChild>();\n+\n+    @Version\n+    private int optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<IdOrderedOneManyChild> getExplicitChildren() { \n+        return explicitChildren; \n+    }\n+\n+    public List<IdOrderedOneManyChild> getImplicitChildren() { \n+        return implicitChildren; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"04c1598bf25a0bda3dc0b2752f3ad0d77d3119fa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/LRSEntity.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/LRSEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/LRSEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/LRSEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OrderBy;\n+\n+import org.apache.openjpa.persistence.LRS;\n+\n+@Entity\n+public class LRSEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToMany\n+    @OrderBy(\"name ASC\")\n+    @LRS\n+    private Collection<BasicEntity> lrsList = new ArrayList<BasicEntity>();\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public Collection<BasicEntity> getLRSList() { \n+        return lrsList; \n+    }\n+}"},{"sha":"2da605744fea339484429b2c121f41a17e2b293e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,75 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.IdClass;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@IdClass(ManyOneCompoundIdOwnerId.class)\r\n+public class ManyOneCompoundIdOwner {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long longId;\r\n+\r\n+    @Id\r\n+    @ManyToOne\r\n+    private BasicEntity entityId;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private ManyOneCompoundIdOwner selfRel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getLongId() {\r\n+        return longId;\r\n+    }\r\n+\r\n+    public BasicEntity getEntityId() { \r\n+        return entityId; \r\n+    }\r\n+\r\n+    public void setEntityId(BasicEntity entityId) { \r\n+        this.entityId = entityId; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public ManyOneCompoundIdOwner getSelfRel() { \r\n+        return selfRel; \r\n+    }\r\n+\r\n+    public void setSelfRel(ManyOneCompoundIdOwner selfRel) { \r\n+        this.selfRel = selfRel; \r\n+    }\r\n+}\r"},{"sha":"c4e53ade1de818da7b0c10a6b328545070e841f6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwnerId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.io.*;\n+\n+/**\n+ * Application identity class for: org.apache.openjpa.persistence.relations.ManyOneCompoundIdOwner\n+ *\n+ * Auto-generated by:\n+ * org.apache.openjpa.enhance.ApplicationIdTool\n+ */\n+public class ManyOneCompoundIdOwnerId implements Serializable {\n+\tstatic {\n+\t\t// register persistent class in JVM\n+\t\ttry { Class.forName(\"org.apache.openjpa.persistence.relations.ManyOneCompoundIdOwner\"); }\n+\t\tcatch (Exception e) {}\n+\t}\n+\n+\tpublic long entityId;\n+\tpublic long longId;\n+\n+\tpublic ManyOneCompoundIdOwnerId() {\n+\t}\n+\n+\tpublic ManyOneCompoundIdOwnerId(String str) {\n+\t\tfromString(str);\n+\t}\n+\n+\tpublic String toString() {\n+\t\treturn String.valueOf(entityId)\n+\t\t\t+ \"::\" + String.valueOf(longId);\n+\t}\n+\n+\tpublic int hashCode() {\n+\t\tint rs = 17;\n+\t\trs = rs * 37 + (int) (entityId ^ (entityId >>> 32));\n+\t\trs = rs * 37 + (int) (longId ^ (longId >>> 32));\n+\t\treturn rs;\n+\t}\n+\n+\tpublic boolean equals(Object obj) {\n+\t\tif(this == obj)\n+\t\t\treturn true;\n+\t\tif(obj == null || obj.getClass() != getClass())\n+\t\t\treturn false;\n+\n+\t\tManyOneCompoundIdOwnerId other = (ManyOneCompoundIdOwnerId) obj;\n+\t\treturn (entityId == other.entityId)\n+\t\t\t&& (longId == other.longId);\n+\t}\n+\n+\tprivate void fromString(String str) {\n+\t\tTokenizer toke = new Tokenizer(str);\n+\t\tstr = toke.nextToken();\n+\t\tentityId = Long.parseLong(str);\n+\t\tstr = toke.nextToken();\n+\t\tlongId = Long.parseLong(str);\n+\t}\n+\n+\tprotected static class Tokenizer {\n+\t\tprivate final String str;\n+\t\tprivate int last;\n+\n+\t\tpublic Tokenizer (String str) {\n+\t\t\tthis.str = str;\n+\t\t}\n+\n+\t\tpublic String nextToken () {\n+\t\t\tint next = str.indexOf(\"::\", last);\n+\t\t\tString part;\n+\t\t\tif(next == -1) {\n+\t\t\t\tpart = str.substring(last);\n+\t\t\t\tlast = str.length();\n+\t\t\t} else {\n+\t\t\t\tpart = str.substring(last, next);\n+\t\t\t\tlast = next + 2;\n+\t\t\t}\n+\t\t\treturn part;\n+\t\t}\n+\t}\n+}"},{"sha":"eafc557db8c478ab6c8c717807d1f57afc5521bf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class ManyOneIdOwner {\r\n+\r\n+    @Id\r\n+    @ManyToOne\r\n+    private BasicEntity id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne\r\n+    private ManyOneIdOwner selfRel;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public BasicEntity getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public void setId(BasicEntity id) { \r\n+        this.id = id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+\r\n+    public ManyOneIdOwner getSelfRel() { \r\n+        return selfRel; \r\n+    }\r\n+\r\n+    public void setSelfRel(ManyOneIdOwner selfRel) { \r\n+        this.selfRel = selfRel; \r\n+    }\r\n+}\r"},{"sha":"1ff48f7ad7eb1b9696a94efb5b11633ef2f4ec77","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,80 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.AttributeOverride;\r\n+import javax.persistence.AssociationOverride;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Embedded;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class MultipleSameTypedEmbedded { \r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @Embedded\r\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E1_NAME\"))\r\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E1_REL\"))\r\n+    private EmbeddableWithRelation embed1;\r\n+\r\n+    @Embedded\r\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E2_NAME\"))\r\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E2_REL\"))\r\n+    private EmbeddableWithRelation embed2;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public EmbeddableWithRelation getEmbed1() {\r\n+        return embed1; \r\n+    }\r\n+\r\n+    public void setEmbed1(EmbeddableWithRelation embed1) {\r\n+        this.embed1 = embed1; \r\n+    }\r\n+\r\n+    public EmbeddableWithRelation getEmbed2() {\r\n+        return embed2; \r\n+    }\r\n+\r\n+    public void setEmbed2(EmbeddableWithRelation embed2) {\r\n+        this.embed2 = embed2; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"ec9e484577f9e2dca7aefab62d5abee786648f16","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyEagerChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.EAGER)\n+    @JoinColumn(name=\"PARENT_ID\")\n+    private OneManyEagerParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneManyEagerParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneManyEagerParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"672691ac18eb748ca8907dd29bca089be7418571","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyEagerParent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OrderBy;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyEagerParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n+    @OrderBy(\"name ASC\")\n+    private List<OneManyLazyChild> lazychildren = \n+        new ArrayList<OneManyLazyChild>();\n+\n+    @OneToMany(mappedBy=\"parent\", fetch=FetchType.EAGER)\n+    @OrderBy(\"name ASC\")\n+    private List<OneManyEagerChild> eagerchildren = \n+        new ArrayList<OneManyEagerChild>();\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public List<OneManyLazyChild> getLazyChildren() { \n+        return lazychildren; \n+    }\n+\n+    public void addLazyChild(OneManyLazyChild child) {\n+        child.setParent(this);\n+        lazychildren.add(child);\n+    }\n+\n+    public List<OneManyEagerChild> getEagerChildren() { \n+        return eagerchildren; \n+    }\n+\n+    public void addEagerChild(OneManyEagerChild child) {\n+        child.setParent(this);\n+        eagerchildren.add(child);\n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"62ff6addaf907cb99e310c7406c7671d8f4fd343","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneManyLazyChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneManyLazyChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(fetch=FetchType.LAZY)\n+    @JoinColumn(name=\"PARENT_ID\")\n+    private OneManyEagerParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneManyEagerParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneManyEagerParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"c88f0fef1207c0334d8ece9b41f7f67ad89ba45a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneOneChild {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne\n+    private OneOneParent parent;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneOneParent getParent() { \n+        return parent; \n+    }\n+\n+    public void setParent(OneOneParent parent) { \n+        this.parent = parent; \n+    }\n+}"},{"sha":"311b62a9b685eb28ea1725578ba9e0bb314a412e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/OneOneParent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class OneOneParent {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @OneToOne(mappedBy=\"parent\")\n+    private OneOneChild child;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public OneOneChild getChild() { \n+        return child; \n+    }\n+\n+    public void setChild(OneOneChild child) { \n+        this.child = child; \n+    }\n+}"},{"sha":"af40e86162531135bc25565067f15ae034eb7bd0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+@Table(name=\"OrderTbl\")\r\n+public class Order {\r\n+    @Id \r\n+    @GeneratedValue\r\n+    int oid;\r\n+\r\n+    double amount;\r\n+    boolean delivered;\r\n+\r\n+    @ManyToOne (fetch=FetchType.EAGER)\r\n+    Customer customer;\r\n+\r\n+    @Version\r\n+    long version;\r\n+\r\n+    public Order(){}\r\n+\r\n+    public Order(  double amt, boolean delivered, Customer c){\r\n+        amount=amt;\r\n+        this.delivered=delivered;\r\n+        customer=c;\r\n+        if (c!=null) c.getOrders().add(this);\r\n+    }\r\n+\r\n+    public double getAmount() {\r\n+        return amount;\r\n+    }\r\n+    \r\n+    public void setAmount(double amount) {\r\n+        this.amount = amount;\r\n+    }\r\n+    \r\n+    public Customer getCustomer() {\r\n+        return customer;\r\n+    }\r\n+    \r\n+    public void setCustomer(Customer customer) {\r\n+        this.customer = customer;\r\n+    }\r\n+    \r\n+    public boolean isDelivered() {\r\n+        return delivered;\r\n+    }\r\n+    \r\n+    public void setDelivered(boolean delivered) {\r\n+        this.delivered = delivered;\r\n+    }\r\n+    \r\n+    public int getOid() {\r\n+        return oid;\r\n+    }\r\n+\r\n+    public String toString(){\r\n+        return \"Order:\"+oid+\" amount:\"+amount+\" delivered:\"+delivered+\" customer:\"+\r\n+        ( customer!=null ? customer.getCid()  :  -1 );\r\n+    }\r\n+}\r"},{"sha":"1e6be1c0be50fbd8ed5e03ca3148357a1e4e8da7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentMap;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+\r\n+@Entity\r\n+public class RelationToHandlerMapInstance {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @PersistentMap(keyCascade = CascadeType.PERSIST)\r\n+\r\n+    private Map<AllFieldTypes,String> aftMap =\r\n+        new HashMap<AllFieldTypes,String>();\r\n+\r\n+    public Map<AllFieldTypes,String> getMap() {\r\n+        return aftMap;\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"58196d2052435765dd377791f2413392ca21c718","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+import org.apache.openjpa.persistence.PersistentMap;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+\r\n+@Entity\r\n+public class RelationToRelationMapInstance {\r\n+    @Id\r\n+    private int id;\r\n+\r\n+    @PersistentMap(keyCascade = CascadeType.PERSIST,\r\n+        elementCascade = CascadeType.PERSIST)\r\n+    private Map<AllFieldTypes,AllFieldTypes> map =\r\n+        new HashMap<AllFieldTypes,AllFieldTypes>();\r\n+\r\n+    public Map<AllFieldTypes,AllFieldTypes> getMap() {\r\n+        return map;\r\n+    }\r\n+}\r"},{"sha":"b699d10ca792e14d8e094cbf2abae9bac26a08e0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,34 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.Embeddable;\r\n+\r\n+@Embeddable\r\n+public class SimpleEmbeddable {\r\n+    private String embeddedString;\r\n+\r\n+    protected SimpleEmbeddable() {\r\n+        // for JPA\r\n+    }\r\n+\r\n+    public SimpleEmbeddable(String s) {\r\n+        embeddedString = s;\r\n+    }\r\n+}\r"},{"sha":"0331f014002c2a999d5606f45a62c8abd9969a23","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity\r\n+public class TargetedIFaceRelationParent \r\n+    implements IFace {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @ManyToOne(targetEntity=TargetedIFaceRelationParent.class,\r\n+        cascade=CascadeType.ALL)\r\n+    private IFace iface;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public IFace getIFace() {\r\n+        return iface; \r\n+    }\r\n+\r\n+    public void setIFace(IFace iface) {\r\n+        this.iface = iface; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"7b8bced0530305804cbd934f1f770f585b18337a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+public class TblChild {\n+\n+\t@Id\n+\t@Column(name = \"CHILD_ID\",nullable=false)\n+\tprivate Integer childId;   \n+\n+\t@Version\n+\t@Column(name = \"VRS_NBR\")\n+\tprivate Integer vrsNbr;   \n+\n+\t@OneToMany(mappedBy=\"tblChild\",fetch = FetchType.EAGER,\n+\t\t\tcascade = {CascadeType.PERSIST,CascadeType.MERGE})\n+\tprivate Collection<TblGrandChild> tblGrandChildren = \n+        new ArrayList<TblGrandChild>();\n+\n+\t@ManyToOne(fetch = FetchType.LAZY,\n+\t\t\tcascade = {CascadeType.PERSIST,CascadeType.MERGE })\n+\t@JoinColumns({@JoinColumn(name =\n+\t\t\"PARENT_ID\",referencedColumnName=\"PARENT_ID\")})   \n+\t@ForeignKey\n+\tprivate TblParent tblParent;\n+\n+\tpublic Integer getChildId() {\n+\t\treturn childId;\n+\t}\n+\t\n+\tpublic void setChildId(Integer childId) {\n+\t\tthis.childId = childId;\n+\t}\n+\t\n+\tpublic Integer getVrsNbr() {\n+\t\treturn vrsNbr;\n+\t}\n+\t\n+\tpublic void setVrsNbr(Integer vrsNbr) {\n+\t\tthis.vrsNbr = vrsNbr;\n+\t}\n+\n+\tpublic Collection<TblGrandChild> getTblGrandChildren() {\n+\t\treturn tblGrandChildren;\n+\t}\n+\t\n+\tpublic void setTblGrandChildren(Collection<TblGrandChild>\n+        tblGrandChildren) {\n+\t\tthis.tblGrandChildren = tblGrandChildren;\n+\t}\n+\t\n+\tpublic void addTblGrandChild(TblGrandChild tblGrandChild) {\n+\t\ttblGrandChild.setTblChild(this);\n+\t\ttblGrandChildren.add(tblGrandChild);\n+\t}\n+\t\n+\tpublic void removeTblGrandChild(TblGrandChild tblGrandChild) {\n+\t\ttblGrandChild.setTblChild(null);\n+\t\ttblGrandChildren.remove(tblGrandChild);\n+\t}\n+\t\n+\tpublic TblParent getTblParent() {\n+\t\treturn tblParent;\n+\t}\n+\n+\tpublic void setTblParent(TblParent tblParent) {\n+\t\tthis.tblParent = tblParent;\n+\t}\n+}"},{"sha":"aa064f20483d31dadec4233cf5905cc0ed72a9e6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblGrandChild.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinColumns;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+public class TblGrandChild {\n+\n+\t@Id\n+\t@Column(name = \"GC_ID\",nullable=false)\n+\tprivate Integer grandChildId;   \n+\n+\t@Version\n+\t@Column(name = \"VRS_NBR\")\n+\tprivate Integer vrsNbr;   \n+\n+\t@ManyToOne(fetch = FetchType.LAZY,\n+\t\tcascade = {CascadeType.PERSIST,CascadeType.MERGE })\n+\t@JoinColumns({@JoinColumn(name =\n+\t\t\"CHILD_ID\",referencedColumnName=\"CHILD_ID\")})   \n+\t@ForeignKey\n+\tprivate TblChild tblChild;\n+\t\n+\tpublic Integer getGrandChildId() {\n+\t\treturn grandChildId;\n+\t}\n+\t\n+\tpublic void setGrandChildId(Integer grandChildId) {\n+\t\tthis.grandChildId = grandChildId;\n+\t}\n+\t\n+\tpublic Integer getVrsNbr() {\n+\t\treturn vrsNbr;\n+\t}\n+\t\n+\tpublic void setVrsNbr(Integer vrsNbr) {\n+\t\tthis.vrsNbr = vrsNbr;\n+\t}\n+\n+\tpublic TblChild getTblChild() {\n+\t\treturn tblChild;\n+\t}\n+\t\n+\tpublic void setTblChild(TblChild tblChild) {\n+\t\tthis.tblChild = tblChild;\n+\t}\n+}\n+\n+"},{"sha":"f4f64ab64571ac9af82b26d1c732e7721b5a0290","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TblParent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+@Entity\n+public class TblParent {\n+\n+\t@Id\n+\t@Column(name = \"PARENT_ID\")\n+\tprivate Integer parentId;\n+\t\n+\t@OneToMany(mappedBy=\"tblParent\",fetch = FetchType.LAZY,cascade = {\n+\t\tCascadeType.PERSIST,CascadeType.MERGE })\n+\tprivate Collection<TblChild> tblChildren = new ArrayList<TblChild>();\t\n+\t\n+\tpublic Integer getParentId() {\n+\t\treturn parentId;\n+\t}\n+\t\n+\tpublic void setParentId(Integer parentId) {\n+\t\tthis.parentId = parentId;\n+\t}\n+\n+\tpublic Collection<TblChild> getTblChildren() {\n+\t\treturn tblChildren;\n+\t}\n+\t\n+\tpublic void setTblChildren(Collection<TblChild> tblChildren) {\n+\t\tthis.tblChildren = tblChildren;\n+\t}\n+\t\n+\tpublic void addTblChild(TblChild tblChild) {\n+\t\ttblChildren.add(tblChild);\n+\t} \n+}"},{"sha":"a5d96d8dc46fcf34c95cdc1086227a6dea1f58e2","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+/**\r\n+ * Tests OPENJPA-199\r\n+ */\r\n+public class TestBulkUpdatesAndEmbeddedFields\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(MultipleSameTypedEmbedded.class, EmbeddableWithRelation.class,\r\n+            CLEAR_TABLES);\r\n+\r\n+        em.getTransaction().begin();\r\n+        MultipleSameTypedEmbedded pc = new MultipleSameTypedEmbedded();\r\n+        pc.setEmbed1(new EmbeddableWithRelation());\r\n+        pc.getEmbed1().setName(\"foo\");\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+    }\r\n+\r\n+    public void testBulkUpdateOfEmbeddedField() {\r\n+        em.getTransaction().begin();\r\n+        assertEquals(1, em.createQuery(\r\n+            \"UPDATE MultipleSameTypedEmbedded o SET o.embed1.name = 'bar'\")\r\n+            .executeUpdate());\r\n+        em.getTransaction().commit();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"1a14045865dc4baad50c2982810b1b06dff1a7b9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestCascadingOneManyWithForeignKey.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests a cascading one-many backed by a foreign key.\n+ *\n+ * @author Abe White\n+ */\n+public class TestCascadingOneManyWithForeignKey\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CascadingOneManyParent.class, CascadingOneManyChild.class);\n+    }\n+\n+    public void testPersist() {\n+        CascadingOneManyParent parent = new CascadingOneManyParent();\n+        parent.setName(\"parent\");\n+        for (int i = 0; i < 2; i++) {\n+            CascadingOneManyChild child = new CascadingOneManyChild();\n+            child.setName(\"child\" + i);\n+            parent.addChild(child);\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        assertEquals(2, parent.getChildren().size());\n+        assertEquals(\"child0\", parent.getChildren().get(0).getName());\n+        assertEquals(\"child1\", parent.getChildren().get(1).getName());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(CascadingOneManyParent.class, id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertEquals(2, parent.getChildren().size());\n+        assertEquals(\"child0\", parent.getChildren().get(0).getName());\n+        assertEquals(\"child1\", parent.getChildren().get(1).getName());\n+        em.close();\n+    }\n+\n+    public void testDelete() {\n+        CascadingOneManyParent parent = new CascadingOneManyParent();\n+        parent.setName(\"parent\");\n+        for (int i = 0; i < 2; i++) {\n+            CascadingOneManyChild child = new CascadingOneManyChild();\n+            child.setName(\"child\" + i);\n+            parent.addChild(child);\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(CascadingOneManyParent.class, id);\n+        assertNotNull(parent);\n+        assertEquals(2, parent.getChildren().size());\n+        em.getTransaction().begin();\n+        em.remove(parent);\n+        em.getTransaction().commit();\n+        assertRemoved(em, id);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        assertRemoved(em, id);\n+        em.close();\n+    }\n+\n+    private void assertRemoved(EntityManager em, long id) {\n+        assertNull(em.find(CascadingOneManyParent.class, id));\n+        List res = em.createQuery(\"select c from CascadingOneManyChild c\").\n+            getResultList();\n+        assertEquals(0, res.size());\n+    }\n+\n+    public void testForeignKey() {\n+        JDBCConfiguration conf = (JDBCConfiguration) emf.getConfiguration();\n+        if (!conf.getDBDictionaryInstance().supportsForeignKeys)\n+            return;\n+\n+        CascadingOneManyParent parent = new CascadingOneManyParent();\n+        parent.setName(\"parent\");\n+        CascadingOneManyChild child;\n+        for (int i = 0; i < 2; i++) {\n+            child = new CascadingOneManyChild();\n+            child.setName(\"child\" + i);\n+            parent.addChild(child);\n+        }\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        em.close();\n+\n+        OpenJPAEntityManager oem = (OpenJPAEntityManager) emf.\n+            createEntityManager();\n+        parent = oem.find(CascadingOneManyParent.class, id);\n+        assertNotNull(parent);\n+        assertEquals(2, parent.getChildren().size());\n+        child = parent.getChildren().get(0); \n+        oem.getTransaction().begin();\n+        oem.remove(parent);\n+        // undelete one child\n+        assertTrue(oem.isRemoved(child));\n+        oem.persist(child);\n+        assertFalse(oem.isRemoved(child));\n+        assertEquals(parent, child.getParent());\n+        try {\n+            oem.getTransaction().commit();\n+            fail(\"Commit should have failed due to FK constraint violation.\");\n+        } catch (Exception e) {\n+        }\n+        oem.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestCascadingOneManyWithForeignKey.class);\n+    }\n+}\n+"},{"sha":"2b32fff481a900d5735762757502f25971dae713","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestChainEntities.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestChainEntities extends SingleEMFTestCase {\n+\n+\t/*\n+\t * Set this magical number to 3 or less to avoid the error.\n+\t */\n+\tprivate static final int MAGICAL_NUMBER = 50;\n+\t\n+\tlong aid;\n+\n+\tpublic void setUp () {\n+\t\tsetUp (DROP_TABLES,\n+\t\t    ChainEntityA.class, ChainEntityB.class, ChainEntityC.class);\n+\t\t// Create A\n+\t\tChainEntityA a = new ChainEntityA ();\n+\t\ta.setName (\"TEST_A\");\n+\t\t// Persist A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\tem.persist (a);\n+\t\taid = a.getId ();\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\tSystem.out.println (\"ChainEntityA id = \" + aid);\n+\t}\n+\n+\tpublic void testChainEntities () {\n+\t\tchainUpdate ();\n+\t}\n+\t\n+\tprotected void chainUpdate () {\n+\t\t// Get A\n+\t\tChainEntityA a = getA ();\n+\t\t// Create B\n+\t\tChainEntityB b = new ChainEntityB ();\n+\t\tb.setName (\"Test_B_\");\n+\t\tChainEntityC c;\n+\t\t/*\n+\t\t * Create and add C to B. Increasing the number of iterations (number of\n+\t\t * ChainEntityC) increases the probability to get the unique key\n+\t\t * constraint violation error.\n+\t\t */\n+\t\tfor (int i = 1; i <= MAGICAL_NUMBER; i++) {\n+\t\t\tc = new ChainEntityC ();\n+\t\t\tc.setName (\"Test_C_\" + i);\n+\t\t\tb.addChainEntityC (c);\n+\t\t}\n+\t\ta.addChildEntityB (b);\n+\t\t// dump (a);  // debug\n+\t\t// Merge A\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tem.getTransaction ().begin ();\n+\t\ta = em.merge (a);\n+\t\t/*\n+\t\t * workaround: Uncommenting following line is a workaround. If we\n+\t\t * retrive Ids of ChainEntityC objects after merge but before commit we\n+\t\t * don't get the error.\n+\t\t */\n+\t\t//dump (a);\n+\t\tem.getTransaction ().commit ();\n+\t\tem.close ();\n+\t\t// dump (getA ());  // debug\n+\t}\n+\n+\t/**\n+\t * Get created ChainEntityA using aid field.\n+\t * \n+\t * @return\n+\t */\n+\tprotected ChainEntityA getA () {\n+\t\tEntityManager em = emf.createEntityManager ();\n+\t\tChainEntityA a = em.find (ChainEntityA.class, aid);\n+\t\tem.close ();\n+\t\treturn a;\n+\t}\n+\n+\t/**\n+\t * Print the object graph of given ChainEntityA to System.out\n+\t * \n+\t * @param testA\n+\t */\n+\tprotected void dump (ChainEntityA testA) {\n+\t\tSystem.out.println (\"-------\");\n+\t\tSystem.out.println (testA.getName () + \"[\" + testA.getId () + \"]\");\n+\t\tfor (ChainEntityB testB : testA.getChildren ()) {\n+\t\t\tSystem.out.println (testB.getName () + \"[\" + testB.getId () + \"]\");\n+\t\t\tfor (ChainEntityC testC : testB.getChainEntityCSet ()) {\n+\t\t\t\tSystem.out.println (testC.getName () + \"[\" + testC.getId ()\n+\t\t\t\t\t\t+ \"]\");\n+\t\t\t}\n+\t\t}\n+\t\tSystem.out.println (\"-------\");\n+\t}\n+\n+}"},{"sha":"bdee6bf99d055af2f895740c965e29b5beb0d90c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestEagerBidiSQL.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * Test that when both sides of a mapped-by relation are eager fetched, \n+ * traversing from the mapped-by side to the mapping side cuts off -- that\n+ * we don't traverse in a loop back to the mapped-by side in the generated\n+ * SQL.\n+ *\n+ * @author Abe White\n+ */\n+public class TestEagerBidiSQL\n+    extends SQLListenerTestCase {\n+\n+    private long id1;\n+    private long id2;\n+\n+    public void setUp() {\n+        setUp(BidiParent.class, BidiChild.class);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        for (int i = 1; i <= 2; i++) {\n+            BidiParent parent = new BidiParent();\n+            parent.setName(\"parent\" + i);\n+            em.persist(parent);\n+\n+            BidiChild oneOneChild = new BidiChild();\n+            oneOneChild.setName(\"oneToOneChild\" + i);\n+            oneOneChild.setOneToOneParent(parent);\n+            parent.setOneToOneChild(oneOneChild);\n+            em.persist(oneOneChild);\n+\n+            for (int j = 1; j <= 3; j++) {\n+                BidiChild oneManyChild = new BidiChild();\n+                oneManyChild.setName(\"oneToManyChild\" + i + \"::\" + j);\n+                oneManyChild.setOneToManyParent(parent);\n+                parent.getOneToManyChildren().add(oneManyChild);\n+                em.persist(oneManyChild);\n+            }\n+\n+            if (i == 1)\n+                id1 = parent.getId();\n+            else\n+                id2 = parent.getId();\n+        }\n+\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToManyFind() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getFetchPlan().addField(BidiParent.class, \"oneToManyChildren\");\n+        em.getFetchPlan().addField(BidiChild.class, \"oneToManyParent\");\n+        BidiParent parent = em.find(BidiParent.class, id1);\n+        assertEquals(1, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+        assertEquals(\"parent1\", parent.getName());\n+        assertEquals(3, parent.getOneToManyChildren().size());\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(\"oneToManyChild1::\" + (i + 1), \n+                parent.getOneToManyChildren().get(i).getName());\n+            assertEquals(parent,\n+                parent.getOneToManyChildren().get(i).getOneToManyParent());\n+        }\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToOneFind() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        em.getFetchPlan().addField(BidiParent.class, \"oneToOneChild\");\n+        em.getFetchPlan().addField(BidiChild.class, \"oneToOneParent\");\n+        BidiParent parent = em.find(BidiParent.class, id1);\n+        assertEquals(1, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+        assertEquals(\"parent1\", parent.getName());\n+        assertNotNull(parent.getOneToOneChild());\n+        assertEquals(\"oneToOneChild1\", parent.getOneToOneChild().getName());\n+        assertEquals(parent, parent.getOneToOneChild().getOneToOneParent());\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToManyQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM BidiParent o \"\n+            + \"ORDER BY o.name ASC\");\n+        q.getFetchPlan().addField(BidiParent.class, \"oneToManyChildren\");\n+        q.getFetchPlan().addField(BidiChild.class, \"oneToManyParent\");\n+        List<BidiParent> res = (List<BidiParent>) q.getResultList(); \n+\n+        assertEquals(2, res.size());\n+        assertEquals(sql.toString(), 2, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(\"parent\" + (i + 1), res.get(i).getName());\n+            assertEquals(3, res.get(i).getOneToManyChildren().size());\n+            for (int j = 0; j < 3; j++) {\n+                assertEquals(\"oneToManyChild\" + (i + 1) + \"::\" + (j + 1), \n+                    res.get(i).getOneToManyChildren().get(j).getName());\n+                assertEquals(res.get(i), res.get(i).getOneToManyChildren().\n+                    get(j).getOneToManyParent());\n+            }\n+        }\n+        assertEquals(2, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerOwnerOneToOneQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM BidiParent o \"\n+            + \"ORDER BY o.name ASC\");\n+        q.getFetchPlan().addField(BidiParent.class, \"oneToOneChild\");\n+        q.getFetchPlan().addField(BidiChild.class, \"oneToOneParent\");\n+        List<BidiParent> res = (List<BidiParent>) q.getResultList(); \n+\n+        assertEquals(2, res.size());\n+        assertEquals(1, sql.size());\n+        assertNotSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(\"parent\" + (i + 1), res.get(i).getName());\n+            assertNotNull(res.get(i).getOneToOneChild());\n+            assertEquals(\"oneToOneChild\" + (i + 1),\n+                res.get(i).getOneToOneChild().getName());\n+            assertEquals(res.get(i), \n+                res.get(i).getOneToOneChild().getOneToOneParent());\n+        }\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public void testEagerNonOwnerOneToOneQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"SELECT o FROM BidiParent o \"\n+            + \"ORDER BY o.name ASC\");\n+        q.getFetchPlan().addField(BidiParent.class, \"oneToOneChild\");\n+        q.getFetchPlan().addField(BidiChild.class, \"oneToManyParent\");\n+        List<BidiParent> res = (List<BidiParent>) q.getResultList(); \n+\n+        assertEquals(2, res.size());\n+        assertEquals(1, sql.size());\n+        assertSQL(\".* LEFT OUTER JOIN BidiParent .*\");\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            assertEquals(\"parent\" + (i + 1), res.get(i).getName());\n+            assertNotNull(res.get(i).getOneToOneChild());\n+            assertEquals(\"oneToOneChild\" + (i + 1),\n+                res.get(i).getOneToOneChild().getName());\n+            assertNull(res.get(i).getOneToOneChild().getOneToManyParent());\n+        }\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestEagerBidiSQL.class);\n+    }\n+}\n+"},{"sha":"fbeec2ced805f150009789431975de491b624e02","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.HandlerCollectionTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestHandlerCollections\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(HandlerCollectionInstance.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testHandlerCollections() {\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n+            HandlerCollectionInstance.class);\r\n+        assertEquals(HandlerCollectionTableFieldStrategy.class,\r\n+            cm.getFieldMapping(\"collection\").getStrategy().getClass());\r\n+\r\n+        HandlerCollectionInstance o = new HandlerCollectionInstance();\r\n+        o.getCollection().add(\"foo\");\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"f1f78b6effd86d0c6d5d229c65566c8a0486504e","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.HandlerHandlerMapTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestHandlerToHandlerMaps\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(HandlerToHandlerMapInstance.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testHandlerToHandlerMaps() {\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n+            HandlerToHandlerMapInstance.class);\r\n+        FieldMapping fm = cm.getFieldMapping(\"map\");\r\n+        assertEquals(HandlerHandlerMapTableFieldStrategy.class,\r\n+            fm.getStrategy().getClass());\r\n+        assertEquals(\"NONSTD_MAPPING_MAP\", fm.getTable().getName());\r\n+\r\n+        HandlerToHandlerMapInstance o = new HandlerToHandlerMapInstance();\r\n+        o.getMap().put(\"foo\", \"bar\");\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"9798089b94388bca3ff96b2fb5ac1979d8bdeaf0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestHandlerToRelationMaps\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(HandlerToRelationMapInstance.class, AllFieldTypes.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testHandlerToRelationMaps() {\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n+            HandlerToRelationMapInstance.class);\r\n+        assertEquals(HandlerRelationMapTableFieldStrategy.class,\r\n+            cm.getFieldMapping(\"map\").getStrategy().getClass());\r\n+\r\n+        HandlerToRelationMapInstance o = new HandlerToRelationMapInstance();\r\n+        o.getMap().put(\"foo\", new AllFieldTypes());\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"cabda4d15262199e23a15b904807a299c3d9863f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestIdOrderedOneMany.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test ordering a one-many field on the primary key of the related entity.\n+ *\n+ * @author Abe White\n+ */\n+public class TestIdOrderedOneMany\n+    extends SingleEMFTestCase {\n+\n+    private long id;\n+\n+    public void setUp() {\n+        setUp(IdOrderedOneManyParent.class, IdOrderedOneManyChild.class);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        IdOrderedOneManyParent parent = new IdOrderedOneManyParent();\n+        parent.setName(\"parent\");\n+        em.persist(parent);\n+\n+        for (int i = 0; i < 3; i++) {\n+            IdOrderedOneManyChild explicit = new IdOrderedOneManyChild();\n+            explicit.setId(3 - i);\n+            explicit.setName(\"explicit\" + explicit.getId());\n+            explicit.setExplicitParent(parent);\n+            parent.getExplicitChildren().add(explicit);\n+            em.persist(explicit);\n+\n+            IdOrderedOneManyChild implicit = new IdOrderedOneManyChild();\n+            implicit.setId(100 - i);\n+            implicit.setName(\"implicit\" + implicit.getId());\n+            implicit.setImplicitParent(parent);\n+            parent.getImplicitChildren().add(implicit);\n+            em.persist(implicit);\n+        }\n+\n+        em.getTransaction().commit();\n+        id = parent.getId();\n+        em.close();\n+    }\n+\n+    public void testExplicitOrdering() {\n+        EntityManager em = emf.createEntityManager();\n+        IdOrderedOneManyParent parent = em.find(IdOrderedOneManyParent.class, \n+            id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertEquals(3, parent.getExplicitChildren().size());\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(i + 1, parent.getExplicitChildren().get(i).getId());\n+            assertEquals(\"explicit\" + (i + 1), parent.getExplicitChildren().\n+                get(i).getName());\n+        }\n+        em.close();\n+    }\n+\n+    public void testImplicitOrdering() {\n+        EntityManager em = emf.createEntityManager();\n+        IdOrderedOneManyParent parent = em.find(IdOrderedOneManyParent.class, \n+            id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertEquals(3, parent.getExplicitChildren().size());\n+        for (int i = 0; i < 3; i++) {\n+            assertEquals(i + 98, parent.getImplicitChildren().get(i).getId());\n+            assertEquals(\"implicit\" + (i + 98), parent.getImplicitChildren().\n+                get(i).getName());\n+        }\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestIdOrderedOneMany.class);\n+    }\n+}\n+"},{"sha":"d4be3634cd884256e95fdeddeac6b779ebf50d1f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"added","additions":258,"deletions":0,"changes":258,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,258 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n+import org.apache.openjpa.persistence.OpenJPAQuery;\r\n+import org.apache.openjpa.persistence.query.Magazine;\r\n+import org.apache.openjpa.persistence.query.Publisher;\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+\r\n+public class TestInverseEagerSQL\r\n+    extends SQLListenerTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class, \r\n+        \tEntityAInverseEager.class, EntityA1InverseEager.class, EntityA2InverseEager.class, \r\n+        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class,\r\n+            Publisher.class, Magazine.class);\r\n+        \r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+\r\n+        Customer.CustomerKey ck = new Customer.CustomerKey(\"USA\", 1);\r\n+        Customer c = new Customer();\r\n+        c.setCid(ck);\r\n+        c.setName(\"customer1\");\r\n+        em.persist(c);\r\n+        \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Order order = new Order();\r\n+            order.setCustomer(c);\r\n+            em.persist(order);\r\n+        }\r\n+\r\n+        EntityAInverseEager a = new EntityAInverseEager(\"a\");\r\n+        em.persist(a);\r\n+        \r\n+        EntityA1InverseEager a1 = new EntityA1InverseEager(\"a1\");\r\n+        em.persist(a1);\r\n+        \r\n+        EntityA2InverseEager a2 = new EntityA2InverseEager(\"a2\");\r\n+        em.persist(a2);\r\n+\r\n+        for (int i = 0; i < 4; i++) {\r\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n+            a.addB(b);\r\n+            b.setA(a);\r\n+            em.persist(b);\r\n+        }\r\n+        \r\n+        for (int i = 4; i < 8; i++) {\r\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n+            a1.addB(b);\r\n+            b.setA(a1);\r\n+            em.persist(b);\r\n+        }\r\n+\r\n+        for (int i = 8; i < 12; i++) {\r\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n+            a2.addB(b);\r\n+            b.setA(a2);\r\n+            em.persist(b);\r\n+        }\r\n+        \r\n+        for (int i = 0; i < 4; i++) {\r\n+            EntityCInverseEager c1 = new EntityCInverseEager(\"c\"+i, i, i);\r\n+            em.persist(c1);\r\n+\r\n+            EntityDInverseEager d1 = new EntityDInverseEager(\"d\"+i, \"d\"+i, i, i);\r\n+            em.persist(d1);\r\n+\r\n+            c1.setD(d1);\r\n+            d1.setC(c1);\r\n+        }\r\n+\r\n+        Publisher p1 = new Publisher();\r\n+        p1.setName(\"publisher1\");\r\n+        em.persist(p1);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p1);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p1.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n+        Publisher p2 = new Publisher();\r\n+        p2.setName(\"publisher2\");\r\n+        em.persist(p2);\r\n+   \r\n+        for (int i = 0; i < 4; i++) {\r\n+            Magazine magazine = new Magazine();\r\n+            magazine.setIdPublisher(p2);\r\n+            magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\r\n+            em.persist(magazine);\r\n+        }\r\n+\r\n+        em.flush();\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToManyInverseEagerQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        OpenJPAQuery q = em.createQuery(\"SELECT c FROM Customer c \");\r\n+        List<Customer> res = q.getResultList(); \r\n+\r\n+        assertEquals(1, res.size());\r\n+\r\n+        for (int i = 0; i < res.size(); i++) {\r\n+            Customer c = (Customer)res.get(i);\r\n+            Collection<Order> orders = c.getOrders();\r\n+            for (Iterator<Order> iter=orders.iterator(); iter.hasNext();) {\r\n+                Order order = (Order)iter.next();\r\n+                assertEquals(order.getCustomer(), c);\r\n+            }\r\n+        }\r\n+        \r\n+        assertEquals(2, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToOneInverseEagerQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select c FROM EntityCInverseEager c\";\r\n+        Query q = em.createQuery(query);\r\n+        List<EntityCInverseEager> res = q.getResultList();\r\n+        assertEquals(4, res.size());\r\n+\r\n+        for (int i = 0; i < res.size(); i++) {\r\n+            EntityCInverseEager c = (EntityCInverseEager)res.get(i);\r\n+            EntityDInverseEager d = c.getD();\r\n+            assertEquals(c, d.getC());\r\n+        }\r\n+\r\n+        assertEquals(1, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToManyInheritanceQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select a FROM EntityA1InverseEager a\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(1, list.size());\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            EntityA1InverseEager a1 = (EntityA1InverseEager)list.get(i);\r\n+            Collection<EntityBInverseEager> listB = a1.getListB();\r\n+            assertEquals(4, listB.size());\r\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n+                EntityAInverseEager a = b.getA();\r\n+                assertEquals(a1, a);\r\n+            }\r\n+        }\r\n+        assertEquals(3, sql.size());\r\n+        sql.clear();\r\n+\r\n+        query = \"select a FROM EntityA2InverseEager a\";\r\n+        q = em.createQuery(query);\r\n+        list = q.getResultList();\r\n+        assertEquals(1, list.size());\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            EntityA2InverseEager a2 = (EntityA2InverseEager)list.get(i);\r\n+            Collection listB = a2.getListB();\r\n+            assertEquals(4, listB.size());\r\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n+                EntityAInverseEager a = b.getA();\r\n+                assertEquals(a2, a);\r\n+            }\r\n+        }\r\n+        assertEquals(3, sql.size());\r\n+        sql.clear();\r\n+        \r\n+        query = \"select a FROM EntityAInverseEager a\";\r\n+        q = em.createQuery(query);\r\n+        list = q.getResultList();\r\n+        assertEquals(3, list.size());\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            EntityAInverseEager a0 = (EntityAInverseEager)list.get(i);\r\n+            Collection listB = a0.getListB();\r\n+            assertEquals(4, listB.size());\r\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n+                EntityAInverseEager a = b.getA();\r\n+                assertEquals(a0, a);\r\n+            }\r\n+        }\r\n+        \r\n+        assertEquals(2, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testOneToManyEagerInverseLazyQuery() {\r\n+        sql.clear();\r\n+\r\n+        OpenJPAEntityManager em = emf.createEntityManager();\r\n+        String query = \"select p FROM Publisher p\";\r\n+        Query q = em.createQuery(query);\r\n+        List list = q.getResultList();\r\n+        assertEquals(2, list.size());\r\n+        assertEquals(2, sql.size());\r\n+\r\n+        sql.clear();\r\n+        em.clear();\r\n+        for (int i = 0; i < list.size(); i++) {\r\n+            Publisher p = (Publisher) list.get(i);\r\n+            Set<Magazine> magazines = p.getMagazineCollection();\r\n+            assertEquals(4, magazines.size());\r\n+            for (Iterator iter = magazines.iterator(); iter.hasNext();) {\r\n+                Magazine m = (Magazine) iter.next();\r\n+                Publisher mp = m.getIdPublisher();\r\n+                assertEquals(p, mp);\r\n+            }\r\n+        }\r\n+\r\n+        assertEquals(0, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestInverseEagerSQL.class);\r\n+    }\r\n+}\r\n+\r"},{"sha":"7221c995fb67527600d6b182934557c2450bfd19","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLRS.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLRS.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLRS.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLRS.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Iterator;\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test LRS relations.\n+ *\n+ * @author Abe White\n+ */\n+public class TestLRS\n+    extends SingleEMFTestCase {\n+\n+    private long id;\n+\n+    public void setUp() {\n+        setUp(LRSEntity.class, BasicEntity.class, CLEAR_TABLES);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        LRSEntity lrs = new LRSEntity();\n+        lrs.setName(\"lrs\"); \n+        for (int i = 1; i <= 3; i++) {\n+            BasicEntity basic = new BasicEntity();\n+            basic.setName(\"basic\" + i);\n+            em.persist(basic);\n+            lrs.getLRSList().add(basic);\n+        }\n+        em.persist(lrs);\n+        em.getTransaction().commit();\n+        id = lrs.getId();\n+        em.close();\n+    }\n+\n+    public void testEMClear() {\n+        EntityManager em = emf.createEntityManager();\n+        LRSEntity lrs = em.find(LRSEntity.class, id);\n+        assertLRS(lrs, \"lrs\");\n+        em.clear();\n+        assertNull(lrs.getLRSList());\n+        assertMerge(lrs);\n+        em.close();\n+    }\n+\n+    public void testEMClose() {\n+        EntityManager em = emf.createEntityManager();\n+        LRSEntity lrs = em.find(LRSEntity.class, id);\n+        assertLRS(lrs, \"lrs\");\n+        em.close();\n+        assertNull(lrs.getLRSList());\n+        assertMerge(lrs);\n+    }\n+\n+    public void testDetachCopy() {\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        LRSEntity lrs = em.find(LRSEntity.class, id);\n+        assertLRS(lrs, \"lrs\");\n+        lrs = em.detach(lrs); \n+        assertEquals(\"lrs\", lrs.getName());\n+        assertNull(lrs.getLRSList());\n+        em.close();\n+        assertMerge(lrs);\n+    }\n+\n+    private void assertLRS(LRSEntity lrs, String name) {\n+        assertNotNull(lrs);\n+        assertEquals(name, lrs.getName());\n+        assertEquals(3, lrs.getLRSList().size());\n+        Iterator itr = lrs.getLRSList().iterator();\n+        for (int i = 1; itr.hasNext(); i++) {\n+            BasicEntity basic = (BasicEntity) itr.next();\n+            assertEquals(\"basic\" + i, basic.getName());\n+        }\n+        OpenJPAPersistence.close(itr);\n+    }\n+\n+    private void assertMerge(LRSEntity lrs) {\n+        lrs.setName(\"changed\");\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertLRS(em.merge(lrs), \"changed\");\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        assertLRS(em.find(LRSEntity.class, id), \"changed\");\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestLRS.class);\n+    }\n+}\n+"},{"sha":"5b36e0c2f13f26582bc2dd5a9d97c6926696e643","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+import org.apache.openjpa.enhance.PersistenceCapable;\r\n+import org.apache.openjpa.enhance.DynamicPersistenceCapable;\r\n+\r\n+public class TestLazyManyToOne extends SQLListenerTestCase {\r\n+\r\n+    private int id;\r\n+\r\n+    public void setUp() {\r\n+        setUp(BasicEntity.class, UnidirectionalManyToOne.class, CLEAR_TABLES);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        UnidirectionalManyToOne pc = new UnidirectionalManyToOne();\r\n+        pc.setRelated(new BasicEntity());\r\n+        pc.getRelated().setName(\"foo\");\r\n+        em.persist(pc);\r\n+        em.getTransaction().commit();\r\n+        id = pc.getId();\r\n+        em.close();\r\n+\r\n+        sql.clear();\r\n+    }\r\n+\r\n+    public void testLazyManyToOne() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        UnidirectionalManyToOne pc = em.find(UnidirectionalManyToOne.class, id);\r\n+        if (pc instanceof PersistenceCapable // unenhanced has inefficiencies\r\n+            && !(pc instanceof DynamicPersistenceCapable))\r\n+            assertEquals(1, sql.size());\r\n+        assertNotNull(pc.getRelated());\r\n+        if (pc instanceof PersistenceCapable // unenhanced has inefficiencies\r\n+            && !(pc instanceof DynamicPersistenceCapable))\r\n+            assertEquals(2, sql.size());\r\n+        em.close();\r\n+    }\r\n+\r\n+}\r"},{"sha":"2de819e446cf481e952e9b07bcf350821ceb075b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyEagerSQL.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,263 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+\n+public class TestManyEagerSQL\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(DROP_TABLES,\n+            OneManyEagerParent.class, OneManyEagerChild.class,\n+            OneManyLazyChild.class, OneOneParent.class, \n+            OneOneChild.class);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        for (int j = 0; j < 2; j++) {\n+            OneManyEagerParent parent = new OneManyEagerParent();\n+            parent.setName(\"parent\"+j);\n+            for (int i = 0; i < 2; i++) {\n+                OneManyEagerChild child = new OneManyEagerChild();\n+                child.setName(\"eagerchild\" + i);\n+                parent.addEagerChild(child);\n+                em.persist(child);\n+                OneManyLazyChild lazychild = new OneManyLazyChild();\n+                lazychild.setName(\"lazychild\" + i);\n+                parent.addLazyChild(lazychild);\n+                em.persist(lazychild);\n+            }\n+            em.persist(parent);\n+        }\n+\n+        for (int i = 0; i < 3; i++) {\n+            OneOneParent parent = new OneOneParent();\n+            parent.setName(\"parent\" + i);\n+            OneOneChild child = new OneOneChild();\n+            child.setName(\"child\" + i);\n+            parent.setChild(child);\n+            child.setParent(parent);\n+            em.persist(child);\n+            em.persist(parent);\n+        }\n+\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testManyToOneEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneManyEagerChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(4, list.size());\n+        \n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t0.name, t1.id, t1.optLock, t1.name\n+        //       FROM OneManyEagerChild t0\n+        //       LEFT OUTER JOIN OneManyEagerParent t1 ON t0.PARENT_ID = t1.id\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerChild t0\n+        //       WHERE t0.PARENT_ID = ? ORDER BY t0.name ASC [params=(long) 2]\n+        //   SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //       FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //       ORDER BY t0.name ASC [params=(long) 2]\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerChild t0\n+        //       WHERE t0.PARENT_ID = ? ORDER BY t0.name ASC [params=(long) 1]\n+        //   SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID \n+        //       FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //       ORDER BY t0.name ASC [params=(long) 1]\n+\n+        assertEquals(5, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyEagerChild child = (OneManyEagerChild) list.get(i);\n+            assertEquals(2, child.getParent().getLazyChildren().size());\n+            assertEquals(2, child.getParent().getEagerChildren().size());\n+        }\n+        assertEquals(0, sql.size());\n+\n+        em.close();\n+    }\n+\n+    public void testManyToOneLazyQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneManyLazyChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(4, list.size());\n+\n+        // Expected SQL:\n+        // SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //     FROM OneManyLazyChild t0\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyLazyChild child = (OneManyLazyChild) list.get(i);\n+            assertEquals(2, child.getParent().getLazyChildren().size());\n+            assertEquals(2, child.getParent().getEagerChildren().size());\n+        }\n+\n+        // Expected SQLs: (fired on child.getParent())\n+        //  SELECT t0.optLock, t0.name, t1.PARENT_ID, t1.id, t1.optLock, t1.name\n+        //      FROM OneManyEagerParent t0\n+        //      LEFT OUTER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //      WHERE t0.id = ? \n+        //      ORDER BY t1.PARENT_ID ASC, t1.name ASC [params=(long) 252]\n+        //  SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //      FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //      ORDER BY t0.name ASC [params=(long) 252]\n+        //  SELECT t0.optLock, t0.name, t1.PARENT_ID, t1.id, t1.optLock, t1.name\n+        //      FROM OneManyEagerParent t0\n+        //      LEFT OUTER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //      WHERE t0.id = ? \n+        //      ORDER BY t1.PARENT_ID ASC, t1.name ASC [params=(long) 251]\n+        //  SELECT t0.id, t0.optLock, t0.name, t0.PARENT_ID\n+        //      FROM OneManyLazyChild t0 WHERE t0.PARENT_ID = ?\n+        //      ORDER BY t0.name ASC [params=(long) 251]\n+\n+        assertEquals(4, sql.size());\n+\n+        em.close();\n+    }\n+\n+    public void testOneToManyEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM OneManyEagerParent p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(2, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t0.name FROM OneManyEagerParent t0\n+        //   SELECT t0.id, t1.id, t1.optLock, t1.name FROM OneManyEagerParent t0\n+        //       INNER JOIN OneManyEagerChild t1 ON t0.id = t1.PARENT_ID\n+        //       ORDER BY t0.id ASC, t1.name ASC\n+        //   SELECT t0.id, t1.id, t1.optLock, t1.name, t1.PARENT_ID\n+        //       FROM OneManyEagerParent t0\n+        //       INNER JOIN OneManyLazyChild t1 ON t0.id = t1.PARENT_ID\n+        //       ORDER BY t0.id ASC, t1.name ASC\n+\n+        assertEquals(3, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneManyEagerParent p = (OneManyEagerParent) list.get(i);\n+            long id = p.getId();\n+            assertEquals(2, p.getEagerChildren().size());\n+            assertEquals(p, p.getEagerChildren().get(0).getParent());\n+            assertEquals(p, p.getEagerChildren().get(1).getParent());\n+            assertEquals(id, p.getEagerChildren().get(0).getParent().getId());\n+            assertEquals(id, p.getEagerChildren().get(1).getParent().getId());\n+            assertEquals(\"eagerchild0\", p.getEagerChildren().get(0).getName());\n+            assertEquals(\"eagerchild1\", p.getEagerChildren().get(1).getName());\n+            assertEquals(2, p.getLazyChildren().size());\n+            assertEquals(p, p.getLazyChildren().get(0).getParent());\n+            assertEquals(p, p.getLazyChildren().get(1).getParent());\n+            assertEquals(id, p.getLazyChildren().get(0).getParent().getId());\n+            assertEquals(id, p.getLazyChildren().get(1).getParent().getId());\n+            assertEquals(\"lazychild0\", p.getLazyChildren().get(0).getName());\n+            assertEquals(\"lazychild1\", p.getLazyChildren().get(1).getName());            \n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToOneParentQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM OneOneParent p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(3, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t1.id, t1.optLock, t1.name, t0.name\n+        //   FROM OneOneParent t0 \n+        //   LEFT OUTER JOIN OneOneChild t1 ON t0.id = t1.PARENT_ID\n+\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneOneParent p = (OneOneParent) list.get(i);\n+            assertEquals(p, p.getChild().getParent());\n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToOneChildQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM OneOneChild c\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(3, list.size());\n+\n+        // Expected SQLs:\n+        //   SELECT t0.id, t0.optLock, t1.id, t1.optLock, t1.name, t0.name \n+        //   FROM OneOneParent t0 \n+        //   LEFT OUTER JOIN OneOneChild t1 ON t0.id = t1.PARENT_ID\n+\n+        assertEquals(1, sql.size());\n+\n+        sql.clear();\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            OneOneChild c = (OneOneChild) list.get(i);\n+            assertEquals(c, c.getParent().getChild());\n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestManyEagerSQL.class);\n+    }\n+}\n+"},{"sha":"23c4b959de2118f9eba387d63f874cc4aebcb596","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","status":"added","additions":370,"deletions":0,"changes":370,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestManyOneAsId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,370 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Perform basic operations on an entity with a many-one relation as its id\n+ * field.\n+ *\n+ * @author Abe White\n+ */\n+public class TestManyOneAsId\n+    extends SingleEMFTestCase {\n+\n+    private long id;\n+    private long dsid;\n+    private long cid;\n+\n+    public void setUp() {\n+        setUp(BasicEntity.class, DataStoreBasicEntity.class,\n+            ManyOneIdOwner.class, DataStoreManyOneIdOwner.class,\n+            ManyOneCompoundIdOwner.class);\n+\n+        BasicEntity id1 = new BasicEntity();\n+        id1.setName(\"id1\");\n+        BasicEntity id2 = new BasicEntity();\n+        id2.setName(\"id2\");\n+        id1.setRel(id2);\n+        id2.setRel(id1);\n+        DataStoreBasicEntity dsid1 = new DataStoreBasicEntity();\n+        dsid1.setName(\"dsid1\");\n+        dsid1.setRel(id1);\n+        DataStoreBasicEntity dsid2 = new DataStoreBasicEntity();\n+        dsid2.setName(\"dsid2\");\n+        dsid2.setRel(id2);\n+\n+        ManyOneIdOwner parent = new ManyOneIdOwner();\n+        parent.setId(id1);\n+        parent.setName(\"parent\");\n+        ManyOneIdOwner child = new ManyOneIdOwner();\n+        child.setId(id2);\n+        child.setName(\"child\");\n+        parent.setSelfRel(child);\n+        DataStoreManyOneIdOwner dsparent = new DataStoreManyOneIdOwner();\n+        dsparent.setId(dsid1);\n+        dsparent.setName(\"dsparent\");\n+        DataStoreManyOneIdOwner dschild = new DataStoreManyOneIdOwner();\n+        dschild.setId(dsid2);\n+        dschild.setName(\"dschild\");\n+        dsparent.setSelfRel(dschild);\n+        ManyOneCompoundIdOwner cparent = new ManyOneCompoundIdOwner();\n+        cparent.setEntityId(id1);\n+        cparent.setName(\"cparent\");\n+        ManyOneCompoundIdOwner cchild = new ManyOneCompoundIdOwner();\n+        cchild.setEntityId(id2);\n+        cchild.setName(\"cchild\");\n+        cparent.setSelfRel(cchild);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(id1);\n+        em.persist(id2);\n+        em.persist(dsid1);\n+        em.persist(dsid2);\n+        em.persist(parent);\n+        em.persist(child);\n+        em.persist(dsparent);\n+        em.persist(dschild);\n+        em.persist(cparent);\n+        em.persist(cchild);\n+        em.getTransaction().commit();\n+        id = id1.getId();\n+        assertRelations(em, parent);\n+        OpenJPAEntityManager oem = (OpenJPAEntityManager) em;\n+        dsid = (Long) oem.getObjectId(dsid1);\n+        assertDataStoreRelations(oem, dsparent);\n+        cid = cparent.getLongId();\n+        assertCompoundRelations(oem, cparent);\n+        em.close();\n+    }\n+\n+    private void assertRelations(EntityManager em, ManyOneIdOwner parent) {\n+        assertEquals(\"parent\", parent.getName());\n+        BasicEntity id1 = parent.getId();\n+        assertNotNull(id1);\n+        assertEquals(id, id1.getId());\n+        assertEquals(\"id1\", id1.getName());\n+        assertTrue(id1 == em.find(BasicEntity.class, id));\n+        ManyOneIdOwner child = parent.getSelfRel();\n+        assertNotNull(child);\n+        assertEquals(\"child\", child.getName());\n+        BasicEntity id2 = child.getId();\n+        assertNotNull(id2);\n+        assertEquals(\"id2\", id2.getName());\n+        assertTrue(id2 == em.find(BasicEntity.class, id2.getId()));\n+        assertTrue(id2 == id1.getRel());\n+        assertTrue(id1 == id2.getRel());\n+        assertNull(child.getSelfRel());\n+    }\n+\n+    private void assertDataStoreRelations(OpenJPAEntityManager em, \n+        DataStoreManyOneIdOwner dsparent) {\n+        assertEquals(\"dsparent\", dsparent.getName());\n+        DataStoreBasicEntity dsid1 = dsparent.getId();\n+        assertNotNull(dsid1);\n+        assertEquals(dsid, ((Long) em.getObjectId(dsid1)).longValue());\n+        assertEquals(\"dsid1\", dsid1.getName());\n+        assertTrue(dsid1 == em.find(DataStoreBasicEntity.class, dsid));\n+        DataStoreManyOneIdOwner dschild = dsparent.getSelfRel();\n+        assertNotNull(dschild);\n+        assertEquals(\"dschild\", dschild.getName());\n+        DataStoreBasicEntity dsid2 = dschild.getId();\n+        assertNotNull(dsid2);\n+        assertEquals(\"dsid2\", dsid2.getName());\n+        assertTrue(dsid2 == em.find(DataStoreBasicEntity.class, \n+            em.getObjectId(dsid2)));\n+        assertNull(dschild.getSelfRel());\n+    }\n+\n+    private void assertCompoundRelations(OpenJPAEntityManager em, \n+        ManyOneCompoundIdOwner cparent) {\n+        assertEquals(\"cparent\", cparent.getName());\n+        BasicEntity id1 = cparent.getEntityId();\n+        assertNotNull(id1);\n+        assertEquals(id, id1.getId());\n+        assertEquals(\"id1\", id1.getName());\n+        assertTrue(id1 == em.find(BasicEntity.class, id));\n+        ManyOneCompoundIdOwner cchild = cparent.getSelfRel();\n+        assertNotNull(cchild);\n+        assertEquals(\"cchild\", cchild.getName());\n+        BasicEntity id2 = cchild.getEntityId();\n+        assertNotNull(id2);\n+        assertEquals(\"id2\", id2.getName());\n+        assertTrue(id2 == em.find(BasicEntity.class, id2.getId()));\n+        assertNull(cchild.getSelfRel());\n+        ManyOneCompoundIdOwnerId oid = (ManyOneCompoundIdOwnerId) \n+            em.getObjectId(cparent);\n+        assertEquals(id, oid.entityId);\n+    }\n+\n+    public void testRetrieveWithManyOneId() {\n+        EntityManager em = emf.createEntityManager();\n+        ManyOneIdOwner parent = em.find(ManyOneIdOwner.class, id);\n+        assertNotNull(parent);\n+        assertRelations(em, parent);\n+        em.close();\n+    }\n+\n+    public void testRetrieveWithDataStoreManyOneId() {\n+        EntityManager em = emf.createEntityManager();\n+        DataStoreManyOneIdOwner dsparent = \n+            em.find(DataStoreManyOneIdOwner.class, dsid);\n+        assertNotNull(dsparent);\n+        assertDataStoreRelations((OpenJPAEntityManager) em, dsparent);\n+        em.close();\n+    }\n+\n+    public void testRetrieveWithCompoundManyOneId() {\n+        EntityManager em = emf.createEntityManager();\n+        ManyOneCompoundIdOwnerId oid = new ManyOneCompoundIdOwnerId();\n+        oid.entityId = id;\n+        oid.longId = cid;\n+        ManyOneCompoundIdOwner cparent = \n+            em.find(ManyOneCompoundIdOwner.class, oid);\n+        assertNotNull(cparent);\n+        assertCompoundRelations((OpenJPAEntityManager) em, cparent);\n+        em.close();\n+    }\n+\n+    public void testAttemptToChangeManyOne() {\n+        EntityManager em = emf.createEntityManager();\n+        ManyOneIdOwner parent = em.find(ManyOneIdOwner.class, id);\n+        assertNotNull(parent);\n+        assertNotNull(parent.getSelfRel());\n+        em.getTransaction().begin();\n+        try {\n+            parent.setId(parent.getSelfRel().getId()); \n+            em.getTransaction().commit();\n+            fail(\"Successfully changed id relation.\");\n+        } catch (Exception e) {\n+            // expected\n+            if (em.getTransaction().isActive())\n+                em.getTransaction().rollback();\n+        }\n+        em.close();\n+    }\n+\n+    public void testChangeRelationToManyOneOwner() {\n+        BasicEntity id3 = new BasicEntity();\n+        id3.setName(\"id3\");\n+        ManyOneIdOwner child2 = new ManyOneIdOwner();\n+        child2.setName(\"child2\");\n+        child2.setId(id3);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(id3);\n+        em.persist(child2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        ManyOneIdOwner parent = em.find(ManyOneIdOwner.class, id);\n+        assertNotNull(parent);\n+        em.getTransaction().begin();\n+        parent.setSelfRel(child2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(ManyOneIdOwner.class, id);\n+        child2 = parent.getSelfRel();\n+        assertEquals(\"child2\", child2.getName());\n+        assertEquals(id3.getId(), child2.getId().getId());\n+        em.close();\n+    }\n+\n+    public void testChangeRelationToDataStoreManyOneOwner() {\n+        DataStoreBasicEntity dsid3 = new DataStoreBasicEntity();\n+        dsid3.setName(\"dsid3\");\n+        DataStoreManyOneIdOwner dschild2 = new DataStoreManyOneIdOwner();\n+        dschild2.setName(\"dschild2\");\n+        dschild2.setId(dsid3);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(dsid3);\n+        em.persist(dschild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        DataStoreManyOneIdOwner dsparent = \n+            em.find(DataStoreManyOneIdOwner.class, dsid);\n+        assertNotNull(dsparent);\n+        em.getTransaction().begin();\n+        dsparent.setSelfRel(dschild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        dsparent = em.find(DataStoreManyOneIdOwner.class, dsid);\n+        dschild2 = dsparent.getSelfRel();\n+        assertEquals(\"dschild2\", dschild2.getName());\n+        OpenJPAEntityManager oem = (OpenJPAEntityManager) em;\n+        assertEquals(oem.getObjectId(dsid3), oem.getObjectId(dschild2.getId()));\n+        em.close();\n+    }\n+\n+    public void testChangeRelationToCompoundManyOneOwner() {\n+        BasicEntity id3 = new BasicEntity();\n+        id3.setName(\"id3\");\n+        ManyOneCompoundIdOwner cchild2 = new ManyOneCompoundIdOwner();\n+        cchild2.setName(\"cchild2\");\n+        cchild2.setEntityId(id3);\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(id3);\n+        em.persist(cchild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        ManyOneCompoundIdOwnerId oid = new ManyOneCompoundIdOwnerId();\n+        oid.entityId = id;\n+        oid.longId = cid; \n+        ManyOneCompoundIdOwner cparent = em.find(ManyOneCompoundIdOwner.class, \n+            oid);\n+        assertNotNull(cparent);\n+        em.getTransaction().begin();\n+        cparent.setSelfRel(cchild2);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        cparent = em.find(ManyOneCompoundIdOwner.class, oid);\n+        cchild2 = cparent.getSelfRel();\n+        assertEquals(\"cchild2\", cchild2.getName());\n+        assertEquals(id3.getId(), cchild2.getEntityId().getId());\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneIdOwner e \"\n+            + \"where e.id.id = :id\");\n+        q.setParameter(\"id\", id);\n+        ManyOneIdOwner pc = (ManyOneIdOwner) q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"parent\", pc.getName());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        BasicEntity id1 = em.find(BasicEntity.class, id);\n+        assertNotNull(id1);\n+        assertEquals(\"id1\", id1.getName());\n+        q = em.createQuery(\"select e from ManyOneIdOwner e where e.id = :id\");\n+        q.setParameter(\"id\", id1);\n+        pc = (ManyOneIdOwner) q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"parent\", pc.getName());\n+        em.close();\n+    }\n+\n+    public void testDataStoreQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        DataStoreBasicEntity dsid1 = em.find(DataStoreBasicEntity.class, dsid);\n+        assertNotNull(dsid1);\n+        assertEquals(\"dsid1\", dsid1.getName());\n+        Query q = em.createQuery(\"select e from DataStoreManyOneIdOwner e \"\n+            + \"where e.id = :id\");\n+        q.setParameter(\"id\", dsid1);\n+        DataStoreManyOneIdOwner dspc = (DataStoreManyOneIdOwner) \n+            q.getSingleResult();\n+        assertNotNull(dspc);\n+        assertEquals(\"dsparent\", dspc.getName());\n+        em.close();\n+    }\n+\n+    public void testCompoundQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select e from ManyOneCompoundIdOwner e \"\n+            + \"where e.longId = :cid and e.entityId.id = :id\");\n+        q.setParameter(\"cid\", cid);\n+        q.setParameter(\"id\", id);\n+        ManyOneCompoundIdOwner pc = (ManyOneCompoundIdOwner)\n+            q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"cparent\", pc.getName());\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        BasicEntity id1 = em.find(BasicEntity.class, id);\n+        assertNotNull(id1);\n+        assertEquals(\"id1\", id1.getName());\n+        q = em.createQuery(\"select e from ManyOneCompoundIdOwner e \"\n+            + \"where e.longId = :cid and e.entityId = :id\");\n+        q.setParameter(\"cid\", cid);\n+        q.setParameter(\"id\", id1);\n+        pc = (ManyOneCompoundIdOwner) q.getSingleResult();\n+        assertNotNull(pc);\n+        assertEquals(\"cparent\", pc.getName());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestManyOneAsId.class);\n+    }\n+}\n+"},{"sha":"f8bb7cb5171ce64ed0f6a53b96433a0c0a798f90","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,52 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.sql.Types;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.HandlerFieldStrategy;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestMapCollectionToBlob\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(HandlerToHandlerMapInstance.class, CLEAR_TABLES,\r\n+            \"openjpa.Compatibility\", \"StoreMapCollectionInEntityAsBlob=true\");\r\n+    }\r\n+\r\n+    public void testHandlerToHandlerMaps() {\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n+            HandlerToHandlerMapInstance.class);\r\n+        FieldMapping fm = cm.getFieldMapping(\"map\");        \r\n+        assertEquals(HandlerFieldStrategy.class, fm.getStrategy().getClass());\r\n+        assertEquals(\"NONSTD_MAPPING_MAP\", fm.getTable().getName());\r\n+        assertEquals(fm.getTable().getColumn(\"MAP\").getType(), Types.BLOB);\r\n+\r\n+        HandlerToHandlerMapInstance o = new HandlerToHandlerMapInstance();\r\n+        o.getMap().put(\"foo\", \"bar\");\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\r"},{"sha":"5d5a137c3581bddfd8d5e7b15b39d1fdc800d7a1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMultipleSameTypedEmbeddedWithEagerRelations.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Test that querying and retrieving entities with multiple same-typed embedded\n+ * relations, which themselves have eager relations, works. \n+ *\n+ * @author Abe White\n+ */\n+public class TestMultipleSameTypedEmbeddedWithEagerRelations\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(EmbeddableWithRelation.class, MultipleSameTypedEmbedded.class);\n+\n+        EmbeddableWithRelation embed1 = new EmbeddableWithRelation();\n+        embed1.setName(\"embed1\");\n+        EmbeddableWithRelation embed2 = new EmbeddableWithRelation();\n+        embed2.setName(\"embed2\");\n+\n+        MultipleSameTypedEmbedded m1 = new MultipleSameTypedEmbedded();\n+        m1.setName(\"m1\");\n+        m1.setEmbed1(embed1);\n+        m1.setEmbed2(embed2);\n+        MultipleSameTypedEmbedded m2 = new MultipleSameTypedEmbedded();\n+        m2.setName(\"m2\");\n+        m2.setEmbed1(embed2);\n+        m2.setEmbed2(embed1);\n+\n+        embed1.setRel(m1);\n+        embed2.setRel(m2);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(m1);\n+        em.persist(m2);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        Query q = em.createQuery(\"select m from MultipleSameTypedEmbedded m \"\n+            + \"where m.embed1.rel.name = 'm1' \"\n+            + \"and m.embed2.rel.name = 'm2'\");\n+        List res = q.getResultList();\n+        assertEquals(1, res.size());\n+\n+        MultipleSameTypedEmbedded m = (MultipleSameTypedEmbedded) res.get(0);\n+        assertEquals(\"m1\", m.getName());\n+        assertEquals(\"embed1\", m.getEmbed1().getName());\n+        assertEquals(\"m1\", m.getEmbed1().getRel().getName());\n+        assertEquals(\"embed2\", m.getEmbed2().getName());\n+        assertEquals(\"m2\", m.getEmbed2().getRel().getName());\n+            \n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestMultipleSameTypedEmbeddedWithEagerRelations.class);\n+    }\n+}\n+"},{"sha":"7d9babe02dad45027c411dbfa729e70deddde082","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","status":"added","additions":208,"deletions":0,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationFieldAsPrimaryKeyAndForeignKey.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.List;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+\n+public class TestRelationFieldAsPrimaryKeyAndForeignKey \n+    extends SingleEMFTestCase {\n+\n+\tpublic void setUp() {\n+\t    setUp(C.class, CM.class, D.class, E.class, VC.class, VCS.class);\n+\t    \n+        EntityManager em = emf.createEntityManager();\n+        try {\n+            em.getTransaction().begin();\n+            List<E> es = (List<E>) em.createQuery(\n+            \"Select e from E e\").getResultList();\n+            for (E e : es) \n+                em.remove(e);\n+\n+            em.getTransaction().commit();\n+            em.close();\n+        } catch (Exception e) {\n+            \n+        }\n+\t    \n+\t    em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\n+\t    E e = new E();\n+\t    e.setEId(\"E1\");\n+\t    e.setName(\"E1\");\n+\n+\t    VC vc = new VC();\n+\t    vc.setVcId(\"VC1\");\n+\n+\t    VCS vcset = new VCS();\n+\t    vcset.setVcsId(\"VCS1\");\n+\t    vcset.setName(\"VCSET1\");\n+\t    vcset.addVC(vc);\n+\t    vcset.setE(e);\n+\n+\t    C c = new C();\n+\t    c.setCId(\"C1\");\n+\n+\t    CM cm = new CM();\n+\t    cm.setCmId(\"CM1\");\n+\t    cm.setE(e);\n+\t    cm.addC(c);\n+\n+\t    D d = new D();\n+\t    d.setA(\"addr\");\n+\t    d.setVc(vc);\n+\t    d.setId(\"IM1\");\n+\n+\t    em.persist(e);\n+\t    em.persist(vc);\n+\t    em.persist(vcset);\n+\t    em.persist(c);\n+\t    em.persist(cm);\n+\t    em.persist(d);\n+\n+\t    em.getTransaction().commit();\n+\t    em.close();\n+\t}\n+\n+\tpublic void testUnboundEntities() {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    VCS vcSet = new VCS();\n+\t    vcSet.setVcsId(\"VCSET2\");\n+\t    vcSet.setName(\"VCSET2\");\n+\t    try {\n+\t        em.persist(vcSet);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    VC vc = new VC();\n+\t    vc.setVcId(\"VC2\");\n+\t    try {\n+\t        em.persist(vc);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    CM cm = new CM();\n+\t    cm.setCmId(\"CMID2\");\n+\t    try {\n+\t        em.persist(cm);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.getTransaction().begin();\n+\t    C c = new C();\n+\t    c.setCId(\"CID2\");\n+\t    try {\n+\t        em.persist(c);\n+\t        em.getTransaction().commit();\n+\t        Assert.fail(\"didn't throw expected PersistenceException\");\n+\t    } catch (Exception e) {\n+\t        // test pass\n+\t    } finally {\n+\t        if (em.getTransaction().isActive())\n+\t            em.getTransaction().rollback();\n+\t    }\n+\n+\t    em.close();\n+\t}\n+\n+\tpublic void testQuery() {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e where e.name='E1'\").getResultList();\n+\t    Assert.assertEquals(1, es.size());\n+\t    E e = (E) es.get(0);\n+\t    Assert.assertEquals(\"E1\", e.getName());\n+\t    Assert.assertEquals(1, e.getVcss().size());\n+\t    Assert.assertEquals(1, e.getCms().size());\n+\t    Assert.assertEquals(1, e.getVcss().size());\n+\n+\t    // Get virtual container set and check that it has a reference to the\n+\t    // ensemble\n+\t    List<VCS> vcss = (List<VCS>) em.createQuery(\n+\t        \"Select vcset from VCS vcset where vcset.vcsId='VCS1'\")\n+\t        .getResultList();\n+\t    Assert.assertEquals(1, vcss.size());\n+\t    Assert.assertEquals(e, ((VCS) vcss.get(0)).getE());\n+\t    em.close();\n+\t}\n+\n+\tpublic void testDeletes() {\n+\t    // Remove VC set and check that all VCs belonging to that set are\n+\t    // deleted but not the ensemble itself\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    VCS vcset = (VCS) em.createQuery(\n+\t        \"Select vcset from VCS vcset where vcset.vcsId='VCS1'\")\n+\t        .getSingleResult();\n+\t    em.remove(vcset);\n+\t    em.getTransaction().commit();\n+\n+\t    // Get virtualContainer\n+\t    List<VC> vcs = (List<VC>) em.createQuery(\n+\t        \"Select vc from VC vc where vc.vcId='VC1'\")\n+\t        .getResultList();\n+\t    Assert.assertEquals(0, vcs.size());\n+\n+\t    // Make sure E and I are still there\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e\").getResultList();\n+\t    Assert.assertEquals(1, es.size());\n+\t}\n+\n+\tpublic void tearDown() throws Exception {\n+\t    EntityManager em = emf.createEntityManager();\n+\t    em.getTransaction().begin();\n+\t    List<E> es = (List<E>) em.createQuery(\n+\t        \"Select e from E e\").getResultList();\n+\t    for (E e : es) {\n+\t        em.remove(e);\n+\t    }\n+\n+\t    em.getTransaction().commit();\n+\t    em.close();\n+\t}\n+}"},{"sha":"bd97b8fb41dfc99da1f861aff92f411d50f65a75","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,51 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import java.net.MalformedURLException;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationHandlerMapTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestRelationToHandlerMaps\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(RelationToHandlerMapInstance.class, AllFieldTypes.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testRelationToHandlerMaps() throws MalformedURLException {\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n+            RelationToHandlerMapInstance.class);\r\n+        assertEquals(RelationHandlerMapTableFieldStrategy.class,\r\n+            cm.getFieldMapping(\"aftMap\").getStrategy().getClass());\r\n+\r\n+        RelationToHandlerMapInstance o = new RelationToHandlerMapInstance();\r\n+        AllFieldTypes key = new AllFieldTypes();\r\n+        o.getMap().put(key, \"foo\");\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"82b5699b6cbfd5f95a21b572366984b3e3a5cf1c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,50 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n+import org.apache.openjpa.jdbc.meta.strats.RelationRelationMapTableFieldStrategy;\r\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+public class TestRelationToRelationMaps\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(RelationToRelationMapInstance.class, AllFieldTypes.class,\r\n+            CLEAR_TABLES);\r\n+    }\r\n+\r\n+    public void testRelationToRelationMaps() {\r\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n+            RelationToRelationMapInstance.class);\r\n+        assertEquals(RelationRelationMapTableFieldStrategy.class,\r\n+            cm.getFieldMapping(\"map\").getStrategy().getClass());\r\n+\r\n+        RelationToRelationMapInstance o = new RelationToRelationMapInstance();\r\n+        AllFieldTypes key = new AllFieldTypes();\r\n+        AllFieldTypes val = new AllFieldTypes();\r\n+        o.getMap().put(key, val);\r\n+        em.getTransaction().begin();\r\n+        em.persist(o);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+}\n\\ No newline at end of file"},{"sha":"463f32252402c1ea2ac4d237772dcb7e2b4cf7d9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestTargetedIFaceRelations.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Perform basic operations on an entity with interface relations that use\n+ * the targetEntity attribute to set a concrete related type.\n+ *\n+ * @author Abe White\n+ */\n+public class TestTargetedIFaceRelations\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(TargetedIFaceRelationParent.class);\n+    }\n+\n+    public void testPersist() {\n+        TargetedIFaceRelationParent parent = new TargetedIFaceRelationParent();\n+        parent.setName(\"parent\");\n+        TargetedIFaceRelationParent child = new TargetedIFaceRelationParent();\n+        child.setName(\"child\");\n+        parent.setIFace(child);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(parent);\n+        em.getTransaction().commit();\n+        long id = parent.getId();\n+        assertTrue(id != 0);\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        parent = em.find(TargetedIFaceRelationParent.class, id);\n+        assertNotNull(parent);\n+        assertEquals(\"parent\", parent.getName());\n+        assertNotNull(parent.getIFace());\n+        assertEquals(\"child\", parent.getIFace().getName());\n+        assertEquals(TargetedIFaceRelationParent.class, \n+            parent.getIFace().getClass());\n+        assertNull(((TargetedIFaceRelationParent) parent.getIFace()).\n+            getIFace());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestTargetedIFaceRelations.class);\n+    }\n+}\n+"},{"sha":"c4c0bfd1128980a8bd94caf9bd8fbb85f0dc10f1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.relations;\r\n+\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.CascadeType;\r\n+\r\n+@Entity\r\n+public class UnidirectionalManyToOne {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private int id;\r\n+\r\n+    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r\n+    private BasicEntity related;\r\n+\r\n+    public void setRelated(BasicEntity related) {\r\n+        this.related = related;\r\n+    }\r\n+\r\n+    public BasicEntity getRelated() {\r\n+        return related;\r\n+    }\r\n+\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(int id) {\r\n+        this.id = id;\r\n+    }\r\n+}\r"},{"sha":"178314050e033e08280e7c0a82a79db9be9b6509","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VC.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,127 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.relations.VCS.VCSId;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name=\"VC4\")\n+@IdClass(VC.VCId.class)\n+\n+public class VC {\n+\n+\t@Id\n+\tprivate String vcId;\n+\n+\t// @ManyToOne\n+\t// @ForeignKey\n+\t// private I i;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate VCS vcs;\n+\n+\t@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = \"vc\")\n+\tprivate Set<D> ds = new HashSet<D>();\n+\n+\tpublic VC() {\n+\t}\n+\n+\tpublic String getVcId() {\n+\t\treturn vcId;\n+\t}\n+\n+\tpublic void setVcId(String vcId) {\n+\t\tthis.vcId = vcId;\n+\t}\n+\n+\tpublic Set<D> getDs() {\n+\t\treturn ds;\n+\t}\n+\n+\tpublic void setDs(Set<D> ds) {\n+\t\tthis.ds = ds;\n+\t}\n+\n+\tpublic VCS getVcs() {\n+\t\treturn vcs;\n+\t}\n+\n+\tpublic void setVcs(VCS vcs) {\n+\t\tthis.vcs = vcs;\n+\t}\n+\n+\tpublic static class VCId {\n+\t\tprivate String vcId;\n+\n+\t\tprivate VCSId vcs;\n+\n+\t\tpublic String getVcId() {\n+\t\t\treturn vcId;\n+\t\t}\n+\n+\t\tpublic void setVcId(String vcId) {\n+\t\t\tthis.vcId = vcId;\n+\t\t}\n+\n+\t\tpublic VCSId getVcs() {\n+\t\t\treturn vcs;\n+\t\t}\n+\n+\t\tpublic void setVcs(VCSId vcs) {\n+\t\t\tthis.vcs = vcs;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null || !(obj instanceof VCId))\n+\t\t\t\treturn false;\n+\t\t\tVCId id = (VCId) obj;\n+\t\t\treturn (this.getVcId() == id.getVcId() ||\n+                (this.getVcId() == null &&\n+                this.getVcId().equals(id.getVcId()))) && \n+\t\t\t    (this.getVcs() == id.getVcs() ||\n+                (this.getVcs() == null && this\n+\t\t\t\t.getVcs().equals(id.getVcs())));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getVcId() != null ? this.getVcId().hashCode() : 0)\n+\t\t\t\t\t^ (this.getVcs() != null ? this.getVcs().hashCode() : 0);\n+\t\t}\n+\t}\n+}"},{"sha":"443ebc48ecc6ffb777ad02c899a100c9ef77da34","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/VCS.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.jdbc.ForeignKey;\n+\n+@Entity\n+@Table(name=\"VCS4\")\n+@IdClass(VCS.VCSId.class)\n+public class VCS {\n+\n+\t@Id\n+\tprivate String vcsId;\n+\n+\t@ManyToOne\n+\t@ForeignKey\n+\t@Id\n+\tprivate E e;\n+\t\n+\t@Basic\n+\tprivate String name;\n+\n+\t@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy = \"vcs\")\n+\tprivate Set<VC> vcs = new HashSet<VC>();\n+\n+\tpublic VCS() {\n+\t}\n+\n+\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\n+\tpublic String getVcsId() {\n+\t\treturn vcsId;\n+\t}\n+\n+\n+\tpublic void setVcsId(String vcsId) {\n+\t\tthis.vcsId = vcsId;\n+\t}\n+\n+\n+\tpublic E getE() {\n+\t\treturn e;\n+\t}\n+\n+\n+\tpublic void setE(E e) {\n+\t\tthis.e = e;\n+\t}\n+\n+\n+\tpublic Set<VC> getVcs() {\n+\t\treturn vcs;\n+\t}\n+\n+\n+\tpublic void setVcs(Set<VC> vcs) {\n+\t\tthis.vcs = vcs;\n+\t}\n+\t\n+\tpublic void addVC(VC vc){\n+\t\tvcs.add(vc);\n+\t\tvc.setVcs(this);\n+\t}\n+\tpublic static class VCSId{\n+\t\tprivate String vcsId;\n+\t\tprivate String e;\n+\t\n+\t\t\n+\t\tpublic String getE() {\n+\t\t\treturn e;\n+\t\t}\n+\n+\t\tpublic void setE(String e) {\n+\t\t\tthis.e = e;\n+\t\t}\n+\n+\t\tpublic String getVcsId() {\n+\t\t\treturn vcsId;\n+\t\t}\n+\n+\t\tpublic void setVcsId(String vcsId) {\n+\t\t\tthis.vcsId = vcsId;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (this == obj)\n+\t\t\t\treturn true;\n+\t\t\tif (obj == null ||  ! (obj instanceof VCSId))\n+\t\t\t\treturn false;\n+\t\t\tVCSId id = (VCSId) obj;\n+\t\t\treturn (this.getVcsId() == id.getVcsId() || \n+                (this.getVcsId() != null && \n+                this.getVcsId().equals(id.getVcsId())))\n+\t\t\t\t&& (this.getE() == id.getE() || (this.getE() != null\n+                && this.getE().equals(id.getE())));\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn (this.getVcsId() != null ?this.getVcsId().hashCode():0)\n+\t\t\t\t^ (this.getE() != null ? this.getE().hashCode():0);\n+\t\t}\n+\t}\n+\n+}"},{"sha":"7d2768de6d82859df9551f229d86a37cc60b1811","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","status":"added","additions":367,"deletions":0,"changes":367,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/AllFieldTypes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,367 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.persistence.Entity;\n+import javax.persistence.Version;\n+import javax.persistence.OneToOne;\n+import javax.persistence.OneToMany;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+public class AllFieldTypes {\n+\n+    public static enum EnumType {Value1, Value2};\n+    \n+    // @Basic types\n+    private short shortField;\n+    private int intField;\n+    private boolean booleanField;\n+    private long longField;\n+    private float floatField;\n+    private char charField;\n+    private double doubleField;\n+    private byte byteField;\n+    private Short wShortField;\n+    private Integer wIntegerField;\n+    private Boolean wBooleanField;\n+    private Long wLongField;\n+    private Float wFloatField;\n+    private Character wCharacterField;\n+    private Double wDoubleField;\n+    private Byte wByteField;\n+    private BigInteger bigIntegerField;\n+    private BigDecimal bigDecimalField;\n+    private String stringField;\n+    private Date dateField;\n+    private Calendar calendarField;\n+    private java.sql.Date sqlDateField;\n+    private java.sql.Time sqlTimeField;\n+    private java.sql.Timestamp sqlTimestampField;\n+    private byte[] byteLob;\n+    private Byte[] wByteLob;\n+    private char[] charLob;\n+    private Character[] wCharacterLob;\n+    private EnumType enumField;\n+    private Serializable serializableField;\n+    \n+    // Additional types\n+    private Set<String> setOfStrings = new HashSet<String>();\n+    private String[] arrayOfStrings;\n+\n+    @PersistentCollection\n+    private int[] arrayOfInts;\n+\n+    // one-to-one and one-to-many relations to self\n+    @OneToOne\n+    private AllFieldTypes selfOneOne;\n+    @OneToMany\n+    private List<AllFieldTypes> selfOneMany = new ArrayList<AllFieldTypes>();\n+\n+    public void setShortField(short shortField) {\n+        this.shortField = shortField;\n+    }\n+\n+    public short getShortField() {\n+        return this.shortField;\n+    }\n+\n+    public void setIntField(int intField) {\n+        this.intField = intField;\n+    }\n+\n+    public int getIntField() {\n+        return this.intField;\n+    }\n+\n+    public void setBooleanField(boolean booleanField) {\n+        this.booleanField = booleanField;\n+    }\n+\n+    public boolean getBooleanField() {\n+        return this.booleanField;\n+    }\n+\n+    public void setLongField(long longField) {\n+        this.longField = longField;\n+    }\n+\n+    public long getLongField() {\n+        return this.longField;\n+    }\n+\n+    public void setFloatField(float floatField) {\n+        this.floatField = floatField;\n+    }\n+\n+    public float getFloatField() {\n+        return this.floatField;\n+    }\n+\n+    public void setCharField(char charField) {\n+        this.charField = charField;\n+    }\n+\n+    public char getCharField() {\n+        return this.charField;\n+    }\n+\n+    public void setDoubleField(double doubleField) {\n+        this.doubleField = doubleField;\n+    }\n+\n+    public double getDoubleField() {\n+        return this.doubleField;\n+    }\n+\n+    public void setByteField(byte byteField) {\n+        this.byteField = byteField;\n+    }\n+\n+    public byte getByteField() {\n+        return this.byteField;\n+    }\n+\n+    public void setStringField(String stringField) {\n+        this.stringField = stringField;\n+    }\n+\n+    public String getStringField() {\n+        return this.stringField;\n+    }\n+\n+    public void setDateField(Date dateField) {\n+        this.dateField = dateField;\n+    }\n+\n+    public Date getDateField() {\n+        return this.dateField;\n+    }\n+\n+    public void setSetOfStrings(Set<String> setOfStrings) {\n+        this.setOfStrings = setOfStrings;\n+    }\n+\n+    public Set<String> getSetOfStrings() {\n+        return this.setOfStrings;\n+    }\n+\n+    public void setArrayOfStrings(String[] arrayOfStrings) {\n+        this.arrayOfStrings = arrayOfStrings;\n+    }\n+\n+    public String[] getArrayOfStrings() {\n+        return this.arrayOfStrings;\n+    }\n+\n+    public void setArrayOfInts(int[] arrayOfInts) {\n+        this.arrayOfInts = arrayOfInts;\n+    }\n+\n+    public int[] getArrayOfInts() {\n+        return arrayOfInts;\n+    }\n+\n+    public BigDecimal getBigDecimalField() {\n+        return bigDecimalField;\n+    }\n+\n+    public void setBigDecimalField(BigDecimal bigDecimalField) {\n+        this.bigDecimalField = bigDecimalField;\n+    }\n+\n+    public BigInteger getBigIntegerField() {\n+        return bigIntegerField;\n+    }\n+\n+    public void setBigIntegerField(BigInteger bigIntegerField) {\n+        this.bigIntegerField = bigIntegerField;\n+    }\n+\n+    public byte[] getByteLob() {\n+        return byteLob;\n+    }\n+\n+    public void setByteLob(byte[] byteLob) {\n+        this.byteLob = byteLob;\n+    }\n+\n+    public Calendar getCalendarField() {\n+        return calendarField;\n+    }\n+\n+    public void setCalendarField(Calendar calendarField) {\n+        this.calendarField = calendarField;\n+    }\n+\n+    public char[] getCharLob() {\n+        return charLob;\n+    }\n+\n+    public void setCharLob(char[] charLob) {\n+        this.charLob = charLob;\n+    }\n+\n+    public EnumType getEnumField() {\n+        return enumField;\n+    }\n+\n+    public void setEnumField(EnumType enumField) {\n+        this.enumField = enumField;\n+    }\n+\n+    public Serializable getSerializableField() {\n+        return serializableField;\n+    }\n+\n+    public void setSerializableField(Serializable serializableField) {\n+        this.serializableField = serializableField;\n+    }\n+\n+    public java.sql.Date getSqlDateField() {\n+        return sqlDateField;\n+    }\n+\n+    public void setSqlDateField(java.sql.Date sqlDateField) {\n+        this.sqlDateField = sqlDateField;\n+    }\n+\n+    public java.sql.Time getSqlTimeField() {\n+        return sqlTimeField;\n+    }\n+\n+    public void setSqlTimeField(java.sql.Time sqlTimeField) {\n+        this.sqlTimeField = sqlTimeField;\n+    }\n+\n+    public java.sql.Timestamp getSqlTimestampField() {\n+        return sqlTimestampField;\n+    }\n+\n+    public void setSqlTimestampField(java.sql.Timestamp sqlTimestampField) {\n+        this.sqlTimestampField = sqlTimestampField;\n+    }\n+\n+    public Boolean getWBooleanField() {\n+        return wBooleanField;\n+    }\n+\n+    public void setWBooleanField(Boolean booleanField) {\n+        wBooleanField = booleanField;\n+    }\n+\n+    public Byte getWByteField() {\n+        return wByteField;\n+    }\n+\n+    public void setWByteField(Byte byteField) {\n+        wByteField = byteField;\n+    }\n+\n+    public Byte[] getWByteLob() {\n+        return wByteLob;\n+    }\n+\n+    public void setWByteLob(Byte[] byteLob) {\n+        wByteLob = byteLob;\n+    }\n+\n+    public Character getWCharacterField() {\n+        return wCharacterField;\n+    }\n+\n+    public void setWCharacterField(Character characterField) {\n+        wCharacterField = characterField;\n+    }\n+\n+    public Character[] getWCharacterLob() {\n+        return wCharacterLob;\n+    }\n+\n+    public void setWCharacterLob(Character[] characterLob) {\n+        wCharacterLob = characterLob;\n+    }\n+\n+    public Double getWDoubleField() {\n+        return wDoubleField;\n+    }\n+\n+    public void setWDoubleField(Double doubleField) {\n+        wDoubleField = doubleField;\n+    }\n+\n+    public Float getWFloatField() {\n+        return wFloatField;\n+    }\n+\n+    public void setWFloatField(Float floatField) {\n+        wFloatField = floatField;\n+    }\n+\n+    public Integer getWIntegerField() {\n+        return wIntegerField;\n+    }\n+\n+    public void setWIntegerField(Integer integerField) {\n+        wIntegerField = integerField;\n+    }\n+\n+    public Long getWLongField() {\n+        return wLongField;\n+    }\n+\n+    public void setWLongField(Long longField) {\n+        wLongField = longField;\n+    }\n+\n+    public Short getWShortField() {\n+        return wShortField;\n+    }\n+\n+    public void setWShortField(Short shortField) {\n+        wShortField = shortField;\n+    }\n+\n+    public AllFieldTypes getSelfOneOne() {\n+        return selfOneOne;\n+    }\n+    \n+    public void setSelfOneOne(AllFieldTypes selfOneOne) {\n+        this.selfOneOne = selfOneOne;\n+    }\n+\n+    public List<AllFieldTypes> getSelfOneMany() {\n+        return selfOneMany;\n+    }\n+\n+    public void setSelfOneMany(List<AllFieldTypes> selfOneMany) {\n+        this.selfOneMany = selfOneMany;\n+    }\n+}\n+"},{"sha":"eca1165628d439f966966f6d6383869547262c60","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Item.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"ITEM\")\n+public class Item implements Serializable {\n+\n+    private static final long serialVersionUID = 489786296539819572L;\n+    \n+    public int itemId;\n+    public String itemName;\n+    public java.math.BigDecimal itemPrice;\n+    public String itemData;\n+\n+    @Column(name = \"I_DATA\", table = \"ITEM\")\n+    public String getItemData() {\n+        return itemData;\n+    }\n+\n+    public void setItemData(String itemData) {\n+        this.itemData = itemData;\n+    }\n+\n+    @Id\n+    @Column(name = \"I_ID\", table = \"ITEM\")\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    public int getItemId() {\n+        return itemId;\n+    }\n+\n+    public void setItemId(int itemId) {\n+        this.itemId = itemId;\n+    }\n+\n+    @Column(name = \"I_NAME\", table = \"ITEM\")\n+    public String getItemName() {\n+        return itemName;\n+    }\n+\n+    public void setItemName(String itemName) {\n+        this.itemName = itemName;\n+    }\n+\n+    @Basic\n+    @Column(name = \"I_PRICE\", table = \"ITEM\")\n+    public java.math.BigDecimal getItemPrice() {\n+        return itemPrice;\n+    }\n+\n+    public void setItemPrice(java.math.BigDecimal itemPrice) {\n+        this.itemPrice = itemPrice;\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"312934d120764d0b01ef37c49ce397050b3c9763","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.simple;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Version;\r\n+\r\n+@Entity(name=\"named\")\r\n+public class NamedEntity {\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    @Version\r\n+    private Integer optLock;\r\n+\r\n+    public long getId() { \r\n+        return id; \r\n+    }\r\n+\r\n+    public String getName() { \r\n+        return name; \r\n+    }\r\n+\r\n+    public void setName(String name) { \r\n+        this.name = name; \r\n+    }\r\n+}\r"},{"sha":"4162b9ce7f5cd18c219467cc8dfd6110283685a3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/Person.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+@Entity\n+public class Person {\n+    private int id;\n+    private String forename;\n+    private String surname;\n+\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getForename() {\n+        return forename;\n+    }\n+\n+    public void setForename(String forename) {\n+        this.forename = forename;\n+    }\n+\n+    public String getSurname() {\n+        return surname;\n+    }\n+\n+    public void setSurname(String surname) {\n+        this.surname = surname;\n+    }\n+}"},{"sha":"bff656e38b04a2903440570fc90fcbc940e6ec3a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TemporalFieldTypes.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import javax.persistence.Entity;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@Entity\n+public class TemporalFieldTypes {\n+\n+    // Date mapping - Default to TIMESTAMP\n+    private Date dateDefaultField;\n+\n+    @Temporal(TemporalType.DATE)\n+    private Date dateDateField;\n+\n+    @Temporal(TemporalType.TIME)\n+    private Date dateTimeField;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date dateTimestampField;\n+    \n+    // Calendar mapping - Default to TIMESTAMP\n+    private Calendar calendarDefaultField;\n+\n+    @Temporal(TemporalType.DATE)\n+    private Calendar calendarDateField;\n+\n+    @Temporal(TemporalType.TIME)\n+    private Calendar calendarTimeField;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Calendar calendarTimestampField;\n+\n+    private Calendar calendarTimeZoneField =\n+        Calendar.getInstance(TimeZone.getTimeZone(\"Europe/Budapest\"));\n+\n+    public void setDateDefaultField(Date date) {\n+        this.dateDefaultField = date;\n+    }\n+\n+    public Date getDateDefaultField() {\n+        return this.dateDefaultField;\n+    }\n+\n+    public void setDateDateField(Date date) {\n+        this.dateDateField = date;\n+    }\n+\n+    public Date getDateDateField() {\n+        return this.dateDateField;\n+    }\n+\n+    public void setDateTimeField(Date date) {\n+        this.dateTimeField = date;\n+    }\n+\n+    public Date getDateTimeField() {\n+        return this.dateTimeField;\n+    }\n+\n+    public void setDateTimeStampField(Date date) {\n+        this.dateTimestampField = date;\n+    }\n+\n+    public Date getDateTimeStampField() {\n+        return this.dateTimestampField;\n+    }\n+\n+    public void setCalendarDefaultField(Calendar calendar) {\n+        this.calendarDefaultField = calendar;\n+    }\n+\n+    public Calendar getCalendarDefaultField() {\n+        return this.calendarDefaultField;\n+    }\n+\n+    public void setCalendarDateField(Calendar calendar) {\n+        this.calendarDateField = calendar;\n+    }\n+\n+    public Calendar getCalendarDateField() {\n+        return this.calendarDateField;\n+    }\n+\n+    public void setCalendarTimeField(Calendar calendar) {\n+        this.calendarTimeField = calendar;\n+    }\n+\n+    public Calendar getCalendarTimeField() {\n+        return this.calendarTimeField;\n+    }\n+\n+    public void setCalendarTimeStampField(Calendar calendar) {\n+        this.calendarTimestampField = calendar;\n+    }\n+\n+    public Calendar getCalendarTimeStampField() {\n+        return this.calendarTimestampField;\n+    }\n+\n+    public void setCalendarTimeZoneField(Calendar calendarTimeZoneField) {\n+        this.calendarTimeZoneField = calendarTimeZoneField;\n+    }\n+\n+    public Calendar getCalendarTimeZoneField() {\n+        return this.calendarTimeZoneField;\n+    }\n+\n+}"},{"sha":"390339dbc7d10324b7da1f7b8f797d37872fa2cf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.simple;\r\n+\r\n+import java.math.BigDecimal;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Simple test case to test the default values associated with the @Basic \r\n+ * annotation.\r\n+ *\r\n+ * @author Kevin Sutter\r\n+ */\r\n+public class TestBasicAnnotation\r\n+    extends SingleEMFTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(CLEAR_TABLES, AllFieldTypes.class);\r\n+    }\r\n+\r\n+    public void testEagerFetchType() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        AllFieldTypes aft = new AllFieldTypes();\r\n+        \r\n+        // Initialize a sampling of the types\r\n+        aft.setBigDecimalField(new BigDecimal(1));\r\n+        aft.setBooleanField(false);\r\n+        aft.setByteLob(new byte[1]);\r\n+        aft.setCalendarField(Calendar.getInstance());\r\n+        aft.setDateField(new Date());\r\n+        aft.setEnumField(AllFieldTypes.EnumType.Value1);\r\n+        aft.setSerializableField(new Date());\r\n+        aft.setSqlTimestampField(new java.sql.Timestamp(\r\n+                System.currentTimeMillis()));\r\n+        aft.setStringField(\"aft\");\r\n+        aft.setWByteLob(new Byte[1]);\r\n+        aft.setWDoubleField(new Double(1));\r\n+        \r\n+        em.persist(aft);\r\n+        em.getTransaction().commit();\r\n+        em.clear();\r\n+        \r\n+        AllFieldTypes aftQuery = (AllFieldTypes)em.createQuery\r\n+            (\"select x from AllFieldTypes x where x.stringField = 'aft'\").\r\n+            getSingleResult();\r\n+        em.clear();  // ensure detached\r\n+        assertFalse(em.contains(aftQuery));\r\n+        \r\n+        // assert that the sampling of fields are not null\r\n+        assertNotNull(aftQuery.getBigDecimalField());\r\n+        assertNotNull(aftQuery.getBooleanField());\r\n+        assertNotNull(aftQuery.getByteLob());\r\n+        assertNotNull(aftQuery.getCalendarField());\r\n+        assertNotNull(aftQuery.getDateField());\r\n+        assertNotNull(aftQuery.getEnumField());\r\n+        assertNotNull(aftQuery.getSerializableField());\r\n+        assertNotNull(aftQuery.getSqlTimestampField());\r\n+        assertNotNull(aftQuery.getStringField());\r\n+        assertNotNull(aftQuery.getWByteLob());\r\n+        assertNotNull(aftQuery.getWDoubleField());\r\n+        \r\n+        em.close();\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestBasicAnnotation.class);\r\n+    }\r\n+}\r\n+\r"},{"sha":"c0a8a4475015abdea8bd59f472c5eca453a885f4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestCaseInsensitiveKeywordsInJPQL.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Query;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestCaseInsensitiveKeywordsInJPQL\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        // expecting only data that is inserted in this test case\n+        setUp(AllFieldTypes.class, CLEAR_TABLES);\n+    }\n+\n+    public void testCaseInsensitiveBooleans() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        AllFieldTypes aft = new AllFieldTypes();\n+        em.persist(aft);\n+        aft.setBooleanField(true);\n+\n+        aft = new AllFieldTypes();\n+        em.persist(aft);\n+        aft.setBooleanField(false);\n+\n+        em.flush();\n+\n+        Query q = em.createQuery(\n+            \"select count(o) from AllFieldTypes o where o.booleanField = TrUe\");\n+        Number n = (Number) q.getSingleResult();\n+        assertEquals(1, n.intValue());\n+\n+        q = em.createQuery(\"select count(o) from AllFieldTypes o \"\n+            + \"where o.booleanField = falSe\");\n+        n = (Number) q.getSingleResult();\n+        assertEquals(1, n.intValue());\n+        \n+        em.getTransaction().rollback();\n+    }\n+}"},{"sha":"371a74baaa48fed6a63810edb193f58f2c1c2a29","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerClear.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * Test case to ensure that the proper JPA clear semantics are processed.\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestEntityManagerClear\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testDetach() {\n+        // Create EntityManager and Start a transaction (1)\n+        begin();\n+\n+        // Insert a new object and flush\n+        AllFieldTypes testObject1 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object1\");\n+        persist(testObject1);\n+        em.flush();\n+        assertTrue(\"testObject1 not found in pc\", em.contains(testObject1));\n+\n+        // Insert another object and persist\n+        AllFieldTypes testObject2 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object2\");\n+        persist(testObject2);\n+        assertTrue(\"testObject2 not found in pc\", em.contains(testObject2));\n+        \n+        // Rollback to clear the PC\n+        rollback();\n+        \n+        assertFalse(\"testObject1 found in pc\", em.contains(testObject1));\n+        assertFalse(\"testObject2 found in pc\", em.contains(testObject2));\n+        \n+    }\n+    \n+    public void testClear() {\n+        // Create EntityManager and Start a transaction (1)\n+        begin();\n+\n+        // Insert a new object and flush\n+        AllFieldTypes testObject1 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object1\");\n+        persist(testObject1);\n+        em.flush();\n+\n+        // Clear the PC for new object 2\n+        AllFieldTypes testObject2 = new AllFieldTypes();\n+        testObject1.setStringField(\"my test object2\");\n+        persist(testObject2);\n+        em.clear();\n+\n+        // Commit the transaction (only object 1 should be in database)\n+        commit();\n+\n+        // Start a new transaction\n+        begin();\n+\n+        // Attempt retrieve of Object1 from previous PC (should exist)\n+        assertEquals(1, query(\"select x from AllFieldTypes x \"\n+            + \"where x.stringField = 'my test object1'\").\n+                getResultList().size());\n+\n+        // Attempt retrieve of Object2 from previous PC (should not exist)\n+        assertEquals(0, query(\"select x from AllFieldTypes x \"\n+            + \"where x.stringField = 'my test object2'\").\n+                getResultList().size());\n+\n+        // Rollback the transaction and close everything\n+        rollback();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestEntityManagerClear.class);\n+    }\n+}\n+"},{"sha":"76d8f3b9a9dd9986275464581d59a7978cc00322","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Persistence;\n+\n+import junit.framework.TestCase;\n+\n+public class TestEntityManagerFactory extends TestCase {\n+\n+    /*\n+     * This test uses a mis-configured persistence unit to verify that we will\n+     * not connect to the database when an unused emf is closed.  \n+     */\n+    public void testCloseUnusedEMF() {\n+        EntityManagerFactory emf =\n+                Persistence.createEntityManagerFactory(\"invalid\");\n+        emf.close();\n+    }\n+}"},{"sha":"88fd5a71e7d745e3dd8c317bc1a03e9888602284","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,115 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.simple;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import junit.textui.TestRunner;\r\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n+\r\n+/**\r\n+ * Test case to ensure that the proper JPA merge semantics are processed.\r\n+ *\r\n+ * @author Kevin Sutter\r\n+ */\r\n+public class TestEntityManagerMerge\r\n+    extends SingleEMTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(AllFieldTypes.class, Person.class);\r\n+    }\r\n+\r\n+    public void testMerge() {\r\n+        // Create EntityManager and Start a transaction (1)\r\n+        begin();\r\n+\r\n+        // Insert a new object into the PC\r\n+        AllFieldTypes testObject = new AllFieldTypes();\r\n+        testObject.setStringField(\"new test object\");\r\n+        persist(testObject);\r\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n+        \r\n+        // Modify this object...\r\n+        testObject.setStringField(\"updated test object\");\r\n+\r\n+        // Attempt to merge this updated object into the PC.  Should be ignored.\r\n+        AllFieldTypes mergedObject = em.merge(testObject);\r\n+        assertTrue(\"mergedObject and testObject are not equal\", \r\n+                mergedObject.equals(testObject));\r\n+        assertTrue(\"mergedObject and testObject are not ==\", \r\n+                mergedObject == testObject);\r\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n+        assertTrue(\"mergedObject not found in pc\", em.contains(mergedObject));\r\n+        \r\n+        // And, once again...\r\n+        testObject.setStringField(\"yet another update\");\r\n+        AllFieldTypes mergedObject2 = em.merge(testObject);\r\n+        assertTrue(\"mergedObject2 and testObject are not equal\", \r\n+                mergedObject2.equals(testObject));\r\n+        assertTrue(\"mergedObject2 and testObject are not ==\", \r\n+                mergedObject2 == testObject);\r\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n+        assertTrue(\"mergedObject2 not found in pc\", em.contains(mergedObject2));\r\n+        \r\n+        // Rollback\r\n+        rollback();\r\n+  \r\n+    }\r\n+    \r\n+    /**\r\n+     * This test verifies that persisting a new entity which matches an existing \r\n+     * row in the database succeeds. \r\n+     */\r\n+    public void testMergeExistingEntity() {\r\n+        Person p = new Person();\r\n+        p.setId(102);\r\n+\r\n+        EntityManager em = emf.createEntityManager();\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.persist(p);\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        p = new Person();\r\n+        p.setId(102);\r\n+        p.setForename(\"Jane\");\r\n+\r\n+        em.getTransaction().begin();\r\n+        em.merge(p);\r\n+        em.getTransaction().commit();\r\n+\r\n+        em.close();\r\n+\r\n+        em = emf.createEntityManager();\r\n+        p = (Person) em.createQuery(\"Select p from Person p where p.id = 102\")\r\n+                .getSingleResult();\r\n+\r\n+        assertNotNull(p);\r\n+        assertEquals(\"Jane\", p.getForename());\r\n+        \r\n+        em.close();\r\n+    }\r\n+    \r\n+    public static void main(String[] args) {\r\n+        TestRunner.run(TestEntityManagerMerge.class);\r\n+    }\r\n+}\r\n+\r"},{"sha":"c1130ff4d64609fcc015758ef6b8a29ec4b0648a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","status":"added","additions":257,"deletions":0,"changes":257,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMethodsThrowAfterClose.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,257 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.LockModeType;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * Negative test case to verify that EntityManager throws required exceptions\n+ * after close.\n+ *\n+ * @author Craig Russell\n+ */\n+public class TestEntityManagerMethodsThrowAfterClose\n+    extends SingleEMTestCase {\n+\n+    private AllFieldTypes aft = new AllFieldTypes();\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+        close();\n+    }\n+\n+    public void testPersistAfterClose() {\n+        try {\n+            em.persist(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.persist \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMergeAfterClose() {\n+        try {\n+            em.merge(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.merge \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testRemoveAfterClose() {\n+        try {\n+            em.remove(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.remove \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFindAfterClose() {\n+        try {\n+            em.find(AllFieldTypes.class, Integer.valueOf(1));\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.find \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetReferenceAfterClose() {\n+        try {\n+            em.getReference(AllFieldTypes.class, Integer.valueOf(1));\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.getReference \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testFlushAfterClose() {\n+        try {\n+            em.flush();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.flush \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testSetFlushModeAfterClose() {\n+        try {\n+            em.setFlushMode(FlushModeType.AUTO);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.setFlushMode \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetFlushModeAfterClose() {\n+        try {\n+            em.getFlushMode();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.getFlushMode \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testLockAfterClose() {\n+        try {\n+            em.lock(aft, LockModeType.WRITE);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.lock \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testRefreshAfterClose() {\n+        try {\n+            em.refresh(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.refresh \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testClearAfterClose() {\n+        try {\n+            em.clear();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.clear \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testContainsAfterClose() {\n+        try {\n+            em.contains(aft);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.contains \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateQueryAfterClose() {\n+        try {\n+            em.createQuery(\"SELECT Object(aft) FROM AllFieldTypes aft\");\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createQuery \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateNamedQueryAfterClose() {\n+        try {\n+            em.createNamedQuery(\"NamedQuery\");\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createNamedQuery \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateNativeQueryAfterClose() {\n+        try {\n+            em.createNativeQuery(\"SELECT NOTHINK FROM NOBODYZ\");\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createNativeQuery \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCreateNativeQueryWithMappingAfterClose() {\n+        try {\n+            em.createNativeQuery(\"SELECT NOTHINK FROM NOBODYZ\", \n+                    AllFieldTypes.class);\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.createNativeQuery \" +\n+                    \"with Mapping after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testJoinTransactionAfterClose() {\n+        try {\n+            em.joinTransaction();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.joinTransaction \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetDelegateAfterClose() {\n+        try {\n+            em.getDelegate();\n+            fail(\"Expected exception not thrown \" +\n+                    \"when calling em.getDelegate \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCloseAfterClose() {\n+        try {\n+            em.close();\n+            fail(\"Expected exception not thrown when calling em.close \" +\n+                    \"after calling em.close\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestEntityManagerMethodsThrowAfterClose.class);\n+    }\n+}\n+"},{"sha":"f8bf6e4b96f30d488a223ef42b63ab2f8615dc80","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestFlushBeforeDetach.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestFlushBeforeDetach extends SQLListenerTestCase {\n+\n+    private int _id;\n+    \n+    public void setUp() {\n+      setUp(Item.class,\"openjpa.Compatibility\", \n+                \"default(flushBeforeDetach=false)\");\n+        persistSampleEntity();\n+    }\n+    \n+    private void persistSampleEntity() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        Item i = new Item();\n+        em.persist(i);\n+        em.getTransaction().commit();\n+        em.refresh(i);\n+        _id = i.getItemId();\n+        em.close();\n+    }\n+\n+    public void testClear() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"ABCD\");\n+\n+        em.clear();\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM.*\");\n+        em.close();\n+    }\n+\n+    public void testDetach() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"EFGH\");\n+\n+        OpenJPAPersistence.cast(em).detach(i);\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+    }\n+    \n+    public void testDetachAll() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"IJKL\");\n+\n+        OpenJPAPersistence.cast(em).detachAll(i);\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+    }\n+    \n+    public void testDetachAllCollection() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"MNOP\");\n+\n+        Collection<Item> c = new ArrayList<Item>();\n+        c.add(i);\n+        OpenJPAPersistence.cast(em).detachAll(c);\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+    }\n+\n+    public void testSerialize() throws Exception {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Item i = em.find(Item.class, _id);\n+\n+        i.setItemData(\"QRSTU\");\n+\n+        serializeObject(i);\n+\n+        em.getTransaction().rollback();\n+        assertNotSQL(\"UPDATE ITEM SET.*\");\n+        em.close();\n+    }\n+\n+    /**\n+     * Helper to serialize an object to a byte[]\n+     */\n+    private Object serializeObject(Object orig) throws Exception {\n+        Object deserialized = null;\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(orig);\n+\n+        ByteArrayInputStream bais =\n+                new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+\n+        deserialized = ois.readObject();\n+        return deserialized;\n+    }\n+}"},{"sha":"afbdf9a368230d4c7d05a662655db217e6c298ed","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestJoin.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestJoin extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        super.setUp(Item.class);\n+    }\n+\n+    /*\n+     * Verify that an entity does not create joins to itself.\n+     */\n+    public void testSelfJoin() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(emf,\n+                Item.class);\n+        FieldMapping fm = cm.getFieldMapping(\"itemId\");\n+        assertNotNull(fm);\n+        assertNull(fm.getJoinForeignKey());\n+    }\n+}"},{"sha":"b9a124711d955798ece423695b84685a9c0c1259","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestPersistence.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Simple test case to get an EntityManager and perform some basic operations.\n+ *\n+ * @author Marc Prud'hommeaux\n+ */\n+public class TestPersistence\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    public void testCreateEntityManager() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        EntityTransaction t = em.getTransaction();\n+        assertNotNull(t);\n+        t.begin();\n+        t.setRollbackOnly();\n+        t.rollback();\n+\n+        // openjpa-facade test\n+        assertTrue(em instanceof OpenJPAEntityManager);\n+        OpenJPAEntityManager ojem = (OpenJPAEntityManager) em;\n+        ojem.getFetchPlan().setMaxFetchDepth(1);\n+        assertEquals(1, ojem.getFetchPlan().getMaxFetchDepth());\n+        em.close();\n+    }\n+\n+    public void testPersist() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        em.persist(new AllFieldTypes());\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testQuery() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        aft.setStringField(\"foo\");\n+        aft.setIntField(10);\n+        em.persist(aft);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        assertEquals(1, em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'foo'\").\n+            getResultList().size());\n+        assertEquals(0, em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'bar'\").\n+            getResultList().size());\n+        assertEquals(1, em.createQuery\n+            (\"select x from AllFieldTypes x where x.intField >= 10\").\n+            getResultList().size());\n+        em.getTransaction().rollback();\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestPersistence.class);\n+    }\n+}\n+"},{"sha":"d5c68378506e53b9fff0d09f71b507a5f6d3dcfb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestSerializedFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.io.*;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that a EntityManagerFactory can be used after serialization.\n+ * \n+ * @author David Ezzio\n+ */\n+public class TestSerializedFactory extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class);\n+    }\n+\n+    /**\n+     * This test case assumes that OpenJPA creates EMF objects that are\n+     * instances of the Serializable interface. If this changes, the test logic\n+     * has to change.\n+     * <p>\n+     * Currently, although the EMF objects implement Serializable, they do not\n+     * successfully pass through serialization. Once they do (assuming they\n+     * should), the catch block in the test and the fail method invocation can\n+     * be removed.\n+     */\n+    public void testSerializedEntityManagerFactory() throws Exception {\n+        // correct the logic if and when EMFs do not implement\n+        // the serializable interface\n+        assertTrue(\"EntityManagerFactory object is not serializable\",\n+                emf instanceof Serializable);\n+\n+        // serialize and deserialize the entity manager factory\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(emf);\n+        EntityManagerFactory emf2 = \n+                (EntityManagerFactory) new ObjectInputStream(\n+                new ByteArrayInputStream(baos.toByteArray())).readObject();\n+\n+        // use the deserialized entity manager factory\n+        assertTrue(\"The deserialized entity manager factory is not open\",\n+                emf2.isOpen());\n+        EntityManager em = emf2.createEntityManager();\n+        assertTrue(\"The newly created entity manager is not open\", \n+                em.isOpen());\n+\n+        // exercise the entity manager produced from the deserialized EMF\n+        em.getTransaction().begin();\n+        em.persist(new AllFieldTypes());\n+        em.getTransaction().commit();\n+\n+        // close the extra resources\n+        em.close();\n+        assertFalse(\"The entity manager is not closed\", em.isOpen());\n+        \n+        // clean up any committed records, etc.\n+        clear(emf2);\n+        if (emf2.isOpen())\n+            emf2.close();\n+        assertFalse(\"The entity manager factory is not closed\", \n+                emf2.isOpen());\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestSerializedFactory.class);\n+    }\n+}"},{"sha":"772ded79f219158f10d56ab13945a287357b9df1","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestTableNamesDefaultToEntityNames.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+public class TestTableNamesDefaultToEntityNames\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(NamedEntity.class);\n+    }\n+\n+    public void testEntityNames() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(\n+            emf, NamedEntity.class);\n+        assertEquals(\"named\", cm.getTable().getName());\n+    }\n+}"},{"sha":"2c52402a3b25489e99d72b78509f4504872af08d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9eba7afe03f809307a1ad4f45f046f807dafd4d4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","status":"added","additions":148,"deletions":0,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SQLListenerTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8901028828178fd1758902663f4c6ea734a92efa","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMFTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"74b6213888879bba4b2263394cc868b9fa62f628","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","status":"added","additions":194,"deletions":0,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/SingleEMTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4e9d47707c688dc21836c564620ccac01cbf6e7f","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/SimpleXmlEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e5e7f473816458b1beac4918541796326acc1605","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"96c3baa001a38b131fa81f769d6560461d90139c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestSimpleXmlEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"155993f8bece5c5e0167279eb49961db619260fb","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestXmlOverrideEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5853e9a2e91ec654c3639667c0f80945babeba65","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/XmlOverrideEntity.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e3f4e0e73fbe9812b2976e2ce8814fc9b79b00cf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Customer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"23878beb0714d6486ab276548ad2ad9f184d5572","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/EAddress.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f4c64063042b7b391d9dd91fcba4b154323f5bc7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/entities/Order.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7d69f1304e403d7533d6f6a336d0d85ff25bb3c6","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","status":"added","additions":301,"deletions":0,"changes":301,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cfd53c7f910ef8e88c60730aaa4ddf7e530f3bb4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/Address.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2ce606776e530fd1c92a625d9acd875114b95bc5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/CANAddress.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e735f5d0161f44d8271d000e15008c1a4a21fa6d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/GBRAddress.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d05429213602eedb00bb222878f5c0e6e45ac6cd","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ObjectFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3b3f540d798edf737d4c2616eeb97bdd6cbefeef","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/ShortAddress.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"23604ee38c4054e83ce74ced13209f92e2f00aaf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xmlmapping/xmlbindings/myaddress/USAAddress.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1cf7f09f1ec6a3fb8a6d6920a2da03d4985acd4a","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e23e21ec46608dac5f1315580a91d9cf33c872d5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"70c7d7a6c88cb56a981a03fb51d697b2faf93fa3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.jse.policy?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ac5b9f3ba17228323eab1e794d531070b93d29d4","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/j2.security.test.policy?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"10f14eedde0d76042518139b4ca33ece2cc2adf9","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"47d77df17c2f9827104e3b6eb1c096045fc5cb29","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"91a307b6d148dfd113ce8e27a59c58eada0235a3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"dfd2b4623112ce22d48faea89579c7d14d6c4d51","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0e0a1b9ebecd4cde58632a2270013cd1aaaa1b59","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fe205a2d62e941b0475da00ebec78af548efb56b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f60e418330834fedfc0e0f45caf083723fbcf38d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d428dad6a6737879c61002f36577630e1c102b1d","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a2c7a8fab2b9ae5f4f9ec139376ec5e359a9f2b5","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bf0e14cd349ad15724d9e379722c397eca6f46b3","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d88b56e965551fc6e7fd1195487cb1768bf0f333","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3d7d2cb1606c4cf1d584aa75ff77592819f8b093","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5193f54e534954375c89752efa755f50d96e06c7","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"541304d10149da6ae6ed586fcc5ab4aea5ad01f8","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1093cc07e0f89f16d5ba71cefbf0679ded32421c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fa6143d05275a297594218a1263339e266fcbe8c","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ed80b03924bfa8168285094398831c05b5136585","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9b0447e0b2579fd0c7f9499dc3ceec501311c3b0","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/models/company/companies.xml","status":"added","additions":339,"deletions":0,"changes":339,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/models/company/companies.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/models/company/companies.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/models/company/companies.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"06b01c47b86999f135483821c135d2997de3fece","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"76dc3321308c4b41f9d80b0dabd3f410479b440b","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/orm.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"808573b913f227c7cd96cd0a7fb92b3fb3d29dac","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"02965af270f0f572f8c8c55dd9ffcc27084e8826","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.db2?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"24967a147b41580cff58894f43c21e2858709caf","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.oracle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4717e155d584800137021a1c54e72ef6e4ab6eec","filename":"1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xmlmapping/query/TestXMLCustomerOrder.sqlserver?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"52804ac36cd9f7bb193255e10037212fc248f11a","filename":"1.2.x/openjpa-persistence/pom.xml","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/pom.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"884acfeeb1d3b029e3612a7515bde34305132fb0","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java","status":"added","additions":200,"deletions":0,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationBuilder.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b310a3c740bc7a20c04914f3fa07af381b59b9fe","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"added","additions":1710,"deletions":0,"changes":1710,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"94e10c18bb66d0f29bcc87900a2c5f08c0cd9d8b","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","status":"added","additions":1512,"deletions":0,"changes":1512,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f9e0c00fdeac8a806e2c596c37178b8a954e5497","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","status":"added","additions":290,"deletions":0,"changes":290,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceXMLMetaDataParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1941efabfb21a070e598d2665c51025d1fbb9364","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ArgumentException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"92e6989a5643c0e26d8ebfdfea30c4518e404215","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a4c9d843ff6d739b64797746dafdadfe7b097e1b","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"58bfddbee100bbaaae8a2fce1d78c958b283460d","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5a62fa3ab8611e6fa1da58f46908367ce007d8eb","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e08a8f46d0cbbb7b4b2fb600a306872bf0c24d32","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataCache.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6b1e5110746dd314c978b0836739efc27d768e68","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DataStoreId.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2a9734f6402f6b59c941e7d3df553699d933320b","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Dependent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"01e8003480e38babcc97311bb14156b262a4469b","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"20787f347cef6e666e61bec68129246f27debf10","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachedState.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9b087d524b368b5915136bdf7026eba042e4f348","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementDependent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"94ef5a69f1188d9f9e462e015193e9f7ddf13e9b","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ElementType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"267dd0c5003609fd2821660889108980b5f5292a","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityExistsException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c668d7a61dac4451df24a6ae5377c6943c7593e8","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","status":"added","additions":335,"deletions":0,"changes":335,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5ffc6015be741df58fb8c17f4dd7724552d36646","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerFactoryValue.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b29248cd2e85c3ce1f2524a1b8685e0d547e9e3f","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"added","additions":1374,"deletions":0,"changes":1374,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3cf3a90f7ef33fd758acc8197117f32a8c5904bb","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityNotFoundException.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityNotFoundException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityNotFoundException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityNotFoundException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cd39a683e7e7a894f08f8b075240ab0fdf18a9c5","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Extent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"37f044d78321df9e4e0dd67ae9fa783361b4e924","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExtentImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4baa36b2d3b4b54c88b84edf3df16de2731e0ca8","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ExternalValues.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a47f7cd587ad462687f88ba033ad1fe3238761ef","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Externalizer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"70cf96894607be2f9d25f2fc32d0c4caf82872b5","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Factory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"81964d552dd255e2d7f6291b38f65c92f9ae1bca","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchAttribute.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"}]}

