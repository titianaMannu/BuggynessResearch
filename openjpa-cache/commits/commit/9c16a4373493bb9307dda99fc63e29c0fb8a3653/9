{"sha":"9c16a4373493bb9307dda99fc63e29c0fb8a3653","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMTZhNDM3MzQ5M2JiOTMwN2RkYTk5ZmM2M2UyOWMwZmI4YTM2NTM=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2009-03-12T14:11:46Z"},"message":"Creating 1.2.1 tag\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.1@752874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f50e9a665eb242e4b05e0364c41f777a18914e9f","url":"https://api.github.com/repos/apache/openjpa/git/trees/f50e9a665eb242e4b05e0364c41f777a18914e9f"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653","html_url":"https://github.com/apache/openjpa/commit/9c16a4373493bb9307dda99fc63e29c0fb8a3653","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c16a4373493bb9307dda99fc63e29c0fb8a3653/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"f153a4ea37a2ea16247fd773756fa5da27f075ff","url":"https://api.github.com/repos/apache/openjpa/commits/f153a4ea37a2ea16247fd773756fa5da27f075ff","html_url":"https://github.com/apache/openjpa/commit/f153a4ea37a2ea16247fd773756fa5da27f075ff"}],"stats":{"total":447552,"additions":447552,"deletions":0},"files":[{"sha":"87ebb5c73a3274be02a4b8fa55045680a5f0b12a","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroup.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Fetch group definition.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ TYPE })\n+@Retention(RUNTIME)\n+public @interface FetchGroup {\n+\n+    /**\n+     * Name of fetch group.\n+     */\n+    String name() default \"\";\n+\n+    /**\n+     * Whether loading this group results in a post-load callback.\n+     */\n+    boolean postLoad() default false;\n+\n+    /**\n+     * Included attributes.\n+     */\n+    FetchAttribute[] attributes() default {};\n+\n+    /**\n+     * Included fetch groups.\n+     */\n+    String[] fetchGroups() default {};\n+}"},{"sha":"da0eb8430a9e68542907a4230016ecfb804011a2","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchGroups.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Fetch groups holder.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ TYPE })\n+@Retention(RUNTIME)\n+public @interface FetchGroups {\n+\n+    FetchGroup[] value() default {};\n+}"},{"sha":"0890bbe75fc10bd6d2ae9291188db3c156eb9d45","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","status":"added","additions":297,"deletions":0,"changes":297,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlan.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,297 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Collection;\n+import javax.persistence.LockModeType;\n+\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.meta.FetchGroup;\n+\n+/**\n+ * The fetch plan allows you to dynamically alter eager fetching\n+ * configuration and other aspects of data loading.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ * @published\n+ */\n+public interface FetchPlan {\n+\n+    /**\n+     * Fetch group representing all fields.\n+     */\n+    public static final String GROUP_ALL = FetchGroup.NAME_ALL;\n+\n+    /**\n+     * The default fetch group.\n+     */\n+    public static final String GROUP_DEFAULT = FetchGroup.NAME_DEFAULT;\n+\n+    /**\n+     * Infinite fetch depth.\n+     */\n+    public static final int DEPTH_INFINITE = FetchGroup.DEPTH_INFINITE;\n+\n+    /**\n+     * Constant to revert any setting to its default value.\n+     */\n+    public static final int DEFAULT = FetchConfiguration.DEFAULT;\n+\n+    /**\n+     * The maximum fetch depth when loading an object.\n+     */\n+    public int getMaxFetchDepth();\n+\n+    /**\n+     * The maximum fetch depth when loading an object.\n+     */\n+    public FetchPlan setMaxFetchDepth(int depth);\n+\n+    /**\n+     * Return the fetch batch size for large result set support.\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n+     * that this property will be ignored under some data stores.\n+     */\n+    public int getFetchBatchSize();\n+\n+    /**\n+     * Set the fetch batch size for large result set support.\n+     * Defaults to the\t<code>openjpa.FetchBatchSize</code> setting. Note\n+     * that this property will be ignored under some data stores.\n+     */\n+    public FetchPlan setFetchBatchSize(int fetchBatchSize);\n+\n+    /**\n+     * Return whether or not query caching is enabled. If this returns\n+     * <code>true</code> but the datacache plugin is not installed, caching\n+     * will not be enabled. If this\n+     * returns <code>false</code>, query caching will not be used\n+     * even if the datacache plugin is installed.\n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean getQueryResultCacheEnabled();\n+\n+    /**\n+     * Control whether or not query caching is enabled. This has no effect\n+     * if the datacache plugin is not installed, or if the query cache size\n+     * is set to zero.\n+     *\n+     * @since 1.0.0\n+     */\n+    public FetchPlan setQueryResultCacheEnabled(boolean cache);\n+\n+    /**\n+     * @deprecated use {@link #getQueryResultCacheEnabled()} instead.\n+     */\n+    public boolean getQueryResultCache();\n+\n+    /**\n+     * @deprecated use {@link #setQueryResultCacheEnabled} instead.\n+     */\n+    public FetchPlan setQueryResultCache(boolean cache);\n+\n+    /**\n+     * Returns the names of the fetch groups that this component will use\n+     * when loading objects. Defaults to the\n+     * <code>openjpa.FetchGroups</code> setting.\n+     */\n+    public Collection<String> getFetchGroups();\n+\n+    /**\n+     * Adds <code>group</code> to the set of fetch group to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFetchGroup(String group);\n+\n+    /**\n+     * Adds <code>groups</code> to the set of fetch group names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFetchGroups(String... groups);\n+\n+    /**\n+     * Adds <code>groups</code> to the set of fetch group names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFetchGroups(Collection groups);\n+\n+    /**\n+     * Remove the given fetch group.\n+     */\n+    public FetchPlan removeFetchGroup(String group);\n+\n+    /**\n+     * Removes <code>groups</code> from the set of fetch group names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFetchGroups(String... groups);\n+\n+    /**\n+     * Removes <code>groups</code> from the set of fetch group names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFetchGroups(Collection groups);\n+\n+    /**\n+     * Clears the set of fetch group names to use wen loading\n+     * data. After this operation is invoked, only those fields in\n+     * the default fetch group (and any requested field) will be\n+     * loaded when loading an object.\n+     */\n+    public FetchPlan clearFetchGroups();\n+\n+    /**\n+     * Resets the set of fetch groups to the list in the global configuration.\n+     */\n+    public FetchPlan resetFetchGroups();\n+\n+    /**\n+     * Returns the fully qualified names of the fields that this component\n+     * will use when loading objects. Defaults to the empty set.\n+     */\n+    public Collection<String> getFields();\n+\n+    /**\n+     * Return true if the given field has been added.\n+     */\n+    public boolean hasField(String field);\n+\n+    /**\n+     * Return true if the given field has been added.\n+     */\n+    public boolean hasField(Class cls, String field);\n+\n+    /**\n+     * Adds <code>field</code> to the set of fully-qualified field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addField(String field);\n+\n+    /**\n+     * Adds <code>field</code> to the set of field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addField(Class cls, String field);\n+\n+    /**\n+     * Adds <code>fields</code> to the set of fully-qualified field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(String... fields);\n+\n+    /**\n+     * Adds <code>fields</code> to the set of field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(Class cls, String... fields);\n+\n+    /**\n+     * Adds <code>fields</code> to the set of fully-qualified field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(Collection fields);\n+\n+    /**\n+     * Adds <code>fields</code> to the set of field names to\n+     * use when loading objects.\n+     */\n+    public FetchPlan addFields(Class cls, Collection fields);\n+\n+    /**\n+     * Remove the given fully-qualified field.\n+     */\n+    public FetchPlan removeField(String field);\n+\n+    /**\n+     * Remove the given field.\n+     */\n+    public FetchPlan removeField(Class cls, String field);\n+\n+    /**\n+     * Removes <code>fields</code> from the set of fully-qualified field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(String... fields);\n+\n+    /**\n+     * Removes <code>fields</code> from the set of field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(Class cls, String... fields);\n+\n+    /**\n+     * Removes <code>fields</code> from the set of fully-qualified field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(Collection fields);\n+\n+    /**\n+     * Removes <code>fields</code> from the set of field names\n+     * to use when loading objects.\n+     */\n+    public FetchPlan removeFields(Class cls, Collection fields);\n+\n+    /**\n+     * Clears the set of field names to use wen loading\n+     * data. After this operation is invoked, only those fields in\n+     * the configured fetch groups will be loaded when loading an object.\n+     */\n+    public FetchPlan clearFields();\n+\n+    /**\n+     * The number of milliseconds to wait for an object lock, or -1 for no\n+     * limit.\n+     */\n+    public int getLockTimeout();\n+\n+    /**\n+     * The number of milliseconds to wait for an object lock, or -1 for no\n+     * limit.\n+     */\n+    public FetchPlan setLockTimeout(int timeout);\n+\n+    /**\n+     * The lock level to use for locking loaded objects.\n+     */\n+    public LockModeType getReadLockMode();\n+\n+    /**\n+     * The lock level to use for locking loaded objects.\n+     */\n+    public FetchPlan setReadLockMode(LockModeType mode);\n+\n+    /**\n+     * The lock level to use for locking dirtied objects.\n+     */\n+    public LockModeType getWriteLockMode();\n+\n+    /**\n+     * The lock level to use for locking dirtied objects.\n+     */\n+    public FetchPlan setWriteLockMode(LockModeType mode);\n+\n+    /**\n+     * @deprecated cast to {@link FetchPlanImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public org.apache.openjpa.kernel.FetchConfiguration getDelegate();\n+}"},{"sha":"93f6fb151a94b2733dbf327cb3f7484944c8d140","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","status":"added","additions":264,"deletions":0,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/FetchPlanImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,264 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import javax.persistence.LockModeType;\n+\n+import org.apache.openjpa.kernel.DelegatingFetchConfiguration;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+\n+/**\n+ * Implements FetchPlan via delegation to FetchConfiguration.\n+ *\n+ * @author Abe White\n+ * @author Pinaki Poddar\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class FetchPlanImpl\n+\timplements FetchPlan {\n+\n+    private final DelegatingFetchConfiguration _fetch;\n+\n+    \n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public FetchPlanImpl(FetchConfiguration fetch) {\n+        _fetch = newDelegatingFetchConfiguration(fetch);\n+    }\n+\n+    /**\n+     * Create a new exception-translating delegating fetch configuration.\n+     */\n+    protected DelegatingFetchConfiguration newDelegatingFetchConfiguration\n+        (FetchConfiguration fetch) {\n+        return new DelegatingFetchConfiguration(fetch,\n+            PersistenceExceptions.TRANSLATOR);\n+    }\n+\n+    /**\n+     * Delegate.\n+     */\n+    public FetchConfiguration getDelegate() {\n+        return _fetch.getDelegate();\n+    }\n+\n+    public int getMaxFetchDepth() {\n+        return _fetch.getMaxFetchDepth();\n+    }\n+\n+    public FetchPlan setMaxFetchDepth(int depth) {\n+        _fetch.setMaxFetchDepth(depth);\n+        return this;\n+    }\n+\n+    public int getFetchBatchSize() {\n+        return _fetch.getFetchBatchSize();\n+    }\n+\n+    public FetchPlan setFetchBatchSize(int fetchBatchSize) {\n+        _fetch.setFetchBatchSize(fetchBatchSize);\n+        return this;\n+    }\n+\n+    public boolean getQueryResultCacheEnabled() {\n+        return _fetch.getQueryCacheEnabled();\n+    }\n+\n+    public FetchPlan setQueryResultCacheEnabled(boolean cache) {\n+        _fetch.setQueryCacheEnabled(cache);\n+        return this;\n+    }\n+\n+    public boolean getQueryResultCache() {\n+        return getQueryResultCacheEnabled();\n+    }\n+\n+    public FetchPlan setQueryResultCache(boolean cache) {\n+        return setQueryResultCacheEnabled(cache);\n+    }\n+\n+    public Collection<String> getFetchGroups() {\n+        return _fetch.getFetchGroups();\n+    }\n+\n+    public FetchPlan addFetchGroup(String group) {\n+        _fetch.addFetchGroup(group);\n+        return this;\n+    }\n+\n+    public FetchPlan addFetchGroups(String... groups) {\n+        return addFetchGroups(Arrays.asList(groups));\n+    }\n+\n+    public FetchPlan addFetchGroups(Collection groups) {\n+        _fetch.addFetchGroups(groups);\n+        return this;\n+    }\n+\n+    public FetchPlan removeFetchGroup(String group) {\n+        _fetch.removeFetchGroup(group);\n+        return this;\n+    }\n+\n+    public FetchPlan removeFetchGroups(String... groups) {\n+        return removeFetchGroups(Arrays.asList(groups));\n+    }\n+\n+    public FetchPlan removeFetchGroups(Collection groups) {\n+        _fetch.removeFetchGroups(groups);\n+        return this;\n+    }\n+\n+    public FetchPlan clearFetchGroups() {\n+        _fetch.clearFetchGroups();\n+        return this;\n+    }\n+\n+    public FetchPlan resetFetchGroups() {\n+        _fetch.resetFetchGroups();\n+        return this;\n+    }\n+\n+    public Collection<String> getFields() {\n+        return (Collection<String>) _fetch.getFields();\n+    }\n+\n+    public boolean hasField(String field) {\n+        return _fetch.hasField(field);\n+    }\n+\n+    public boolean hasField(Class cls, String field) {\n+        return hasField(toFieldName(cls, field));\n+    }\n+\n+    public FetchPlan addField(String field) {\n+        _fetch.addField(field);\n+        return this;\n+    }\n+\n+    public FetchPlan addField(Class cls, String field) {\n+        return addField(toFieldName(cls, field));\n+    }\n+\n+    public FetchPlan addFields(String... fields) {\n+        return addFields(Arrays.asList(fields));\n+    }\n+\n+    public FetchPlan addFields(Class cls, String... fields) {\n+        return addFields(cls, Arrays.asList(fields));\n+    }\n+\n+    public FetchPlan addFields(Collection fields) {\n+        _fetch.addFields(fields);\n+        return this;\n+    }\n+\n+    public FetchPlan addFields(Class cls, Collection fields) {\n+        return addFields(toFieldNames(cls, fields));\n+    }\n+\n+    public FetchPlan removeField(String field) {\n+        _fetch.removeField(field);\n+        return this;\n+    }\n+\n+    public FetchPlan removeField(Class cls, String field) {\n+        return removeField(toFieldName(cls, field));\n+    }\n+\n+    public FetchPlan removeFields(String... fields) {\n+        return removeFields(Arrays.asList(fields));\n+    }\n+\n+    public FetchPlan removeFields(Class cls, String... fields) {\n+        return removeFields(cls, Arrays.asList(fields));\n+    }\n+\n+    public FetchPlan removeFields(Collection fields) {\n+        _fetch.removeFields(fields);\n+        return this;\n+    }\n+\n+    public FetchPlan removeFields(Class cls, Collection fields) {\n+        return removeFields(toFieldNames(cls, fields));\n+    }\n+\n+    public FetchPlan clearFields() {\n+        _fetch.clearFields();\n+        return this;\n+    }\n+\n+    private static String toFieldName(Class cls, String field) {\n+        return cls.getName() + \".\" + field;\n+    }\n+\n+    private static Collection toFieldNames(Class cls, Collection fields) {\n+        if (fields.isEmpty())\n+            return fields;\n+        Collection names = new ArrayList(fields);\n+        for (Iterator itr = fields.iterator(); itr.hasNext();)\n+            names.add(toFieldName(cls, (String) itr.next()));\n+        return names;\n+    }\n+\n+    public int getLockTimeout() {\n+        return _fetch.getLockTimeout();\n+    }\n+\n+    public FetchPlan setLockTimeout(int timeout) {\n+        _fetch.setLockTimeout(timeout);\n+        return this;\n+    }\n+\n+    public LockModeType getReadLockMode() {\n+        return EntityManagerImpl.fromLockLevel(_fetch.getReadLockLevel());\n+    }\n+\n+    public FetchPlan setReadLockMode(LockModeType mode) {\n+        _fetch.setReadLockLevel(EntityManagerImpl.toLockLevel(mode));\n+        return this;\n+    }\n+\n+    public LockModeType getWriteLockMode() {\n+        return EntityManagerImpl.fromLockLevel(_fetch.getWriteLockLevel());\n+    }\n+\n+    public FetchPlan setWriteLockMode(LockModeType mode) {\n+        _fetch.setWriteLockLevel(EntityManagerImpl.toLockLevel(mode));\n+        return this;\n+    }\n+\n+    public int hashCode() {\n+        return _fetch.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof FetchPlanImpl))\n+            return false;\n+        return _fetch.equals(((FetchPlanImpl) other)._fetch);\n+    }\n+}"},{"sha":"7c073b57dbacd2e81dc104de446e7a338e0d5d8d","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Generator.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+/**\n+ * Represents a store sequence.\n+ *\n+ * @author Abe White\n+ * @since 0.4.1\n+ * @published\n+ */\n+public interface Generator {\n+\n+    public static final String UUID_HEX = \"uuid-hex\";\n+    public static final String UUID_STRING = \"uuid-string\";\n+    public static final String UUID_TYPE4_STRING = \"uuid-type4-string\";\n+    public static final String UUID_TYPE4_HEX = \"uuid-type4-hex\";\n+\n+    /**\n+     * The sequence name.\n+     */\n+    public String getName();\n+\n+    /**\n+     * The next sequence value.\n+     */\n+    public Object next();\n+\n+    /**\n+     * The current sequence value, or null if the sequence does not\n+     * support current values.\n+     */\n+    public Object current();\n+\n+    /**\n+     * Hint to the sequence to allocate additional values up-front for\n+     * efficiency.\n+     */\n+    public void allocate(int additional);\n+\n+    /**\n+     * @deprecated cast to {@link GeneratorImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public org.apache.openjpa.kernel.Seq getDelegate();\n+}"},{"sha":"656074f4a17cba6a05185c71aae3aa9309b34761","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/GeneratorImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.DelegatingSeq;\n+import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.kernel.StoreContext;\n+import org.apache.openjpa.meta.ClassMetaData;\n+\n+/**\n+ * Represents a store sequence.\n+ *\n+ * @author Abe White\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class GeneratorImpl\n+\timplements Generator {\n+\n+    private final DelegatingSeq _seq;\n+    private final String _name;\n+    private final StoreContext _ctx;\n+    private final ClassMetaData _meta;\n+\n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public GeneratorImpl(Seq seq, String name, StoreContext ctx,\n+        ClassMetaData meta) {\n+        _seq = new DelegatingSeq(seq, PersistenceExceptions.TRANSLATOR);\n+        _name = name;\n+        _ctx = ctx;\n+        _meta = meta;\n+    }\n+\n+    /**\n+     * Delegate.\n+     */\n+    public Seq getDelegate() {\n+        return _seq.getDelegate();\n+    }\n+\n+    public String getName() {\n+        return _name;\n+    }\n+\n+    public Object next() {\n+        return _seq.next(_ctx, _meta);\n+    }\n+\n+    public Object current() {\n+        return _seq.current(_ctx, _meta);\n+    }\n+\n+    public void allocate(int additional) {\n+        _seq.allocate(additional, _ctx, _meta);\n+    }\n+\n+    public int hashCode() {\n+        return _seq.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof GeneratorImpl))\n+            return false;\n+        return _seq.equals(((GeneratorImpl) other)._seq);\n+\t}\n+}"},{"sha":"89d14c9803912ca512deb3d37bb334f2d46ac64f","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InvalidStateException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.UserException;\n+import org.apache.openjpa.lib.util.Localizer.Message;\n+\n+/**\n+ * Extended {@link IllegalStateException}.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class InvalidStateException\n+    extends IllegalStateException\n+    implements Serializable, ExceptionInfo {\n+\n+    private transient boolean _fatal = false;\n+    private transient Object _failed = null;\n+    private transient Throwable[] _nested = null;\n+\n+    public InvalidStateException(Message msg, Throwable[] nested, Object failed,\n+        boolean fatal) {\n+        this(msg.getMessage(), nested, failed, fatal);\n+    }\n+\n+    public InvalidStateException(String msg, Throwable[] nested, Object failed,\n+        boolean fatal) {\n+        super(msg);\n+        _nested = nested;\n+        _failed = failed;\n+        _fatal = fatal;\n+    }\n+\n+    public int getType() {\n+        return USER;\n+    }\n+\n+    public int getSubtype() {\n+        return UserException.INVALID_STATE;\n+    }\n+\n+    public boolean isFatal() {\n+        return _fatal;\n+    }\n+\n+    public Throwable getCause() {\n+        return PersistenceExceptions.getCause(_nested);\n+    }\n+\n+    public Throwable[] getNestedThrowables() {\n+        return (_nested == null) ? Exceptions.EMPTY_THROWABLES : _nested;\n+    }\n+\n+    public Object getFailedObject() {\n+        return _failed;\n+    }\n+\n+    public String toString() {\n+        return Exceptions.toString(this);\n+    }\n+\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.writeBoolean(_fatal);\n+        out.writeObject(Exceptions.replaceFailedObject(_failed));\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _fatal = in.readBoolean();\n+        _failed = in.readObject();\n+        _nested = (Throwable[]) in.readObject();\n+    }\n+}\n+"},{"sha":"6c6018de60b98a564000ecefd356230488d1f3c0","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/InverseLogical.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Declares the logical inverse of a field.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface InverseLogical {\n+\n+    String value() default \"\";\n+}"},{"sha":"7f12f0caf31c91dbd3d88e0918d8ffc2aca70e80","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,319 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.math.BigDecimal;\r\n+import java.math.BigInteger;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Iterator;\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.EntityManagerFactory;\r\n+\r\n+import org.apache.openjpa.kernel.Broker;\r\n+import org.apache.openjpa.kernel.BrokerFactory;\r\n+import org.apache.openjpa.meta.ClassMetaData;\r\n+import org.apache.openjpa.util.BigDecimalId;\r\n+import org.apache.openjpa.util.BigIntegerId;\r\n+import org.apache.openjpa.util.ByteId;\r\n+import org.apache.openjpa.util.CharId;\r\n+import org.apache.openjpa.util.DoubleId;\r\n+import org.apache.openjpa.util.FloatId;\r\n+import org.apache.openjpa.util.Id;\r\n+import org.apache.openjpa.util.ImplHelper;\r\n+import org.apache.openjpa.util.IntId;\r\n+import org.apache.openjpa.util.LongId;\r\n+import org.apache.openjpa.util.ObjectId;\r\n+import org.apache.openjpa.util.OpenJPAId;\r\n+import org.apache.openjpa.util.ShortId;\r\n+import org.apache.openjpa.util.StringId;\r\n+import org.apache.openjpa.lib.util.Localizer;\r\n+\r\n+/**\r\n+ * Helper class for switching between OpenJPA's JPA facade and the underlying\r\n+ * Broker kernel.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @nojavadoc\r\n+ */\r\n+public class JPAFacadeHelper {\r\n+\r\n+    public static final String EM_KEY =\r\n+        \"org.apache.openjpa.persistence.EntityManager\";\r\n+    public static final String EMF_KEY =\r\n+        \"org.apache.openjpa.persistence.EntityManagerFactory\";\r\n+\r\n+    private static final Localizer _loc =\r\n+        Localizer.forPackage(JPAFacadeHelper.class);\r\n+\r\n+    public static OpenJPAEntityManagerFactory toEntityManagerFactory(\r\n+        BrokerFactory factory) {\r\n+        if (factory == null)\r\n+            return null;\r\n+\r\n+        factory.lock();\r\n+        try {\r\n+            OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\r\n+                factory.getUserObject(EMF_KEY);\r\n+            if (emf == null) {\r\n+                emf = EntityManagerFactoryValue.newFactory(factory);\r\n+                factory.putUserObject(EMF_KEY, emf);\r\n+            }\r\n+            return emf;\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        } finally {\r\n+            factory.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the underlying broker factory for the given persistence manager\r\n+     * factory facade.\r\n+     */\r\n+    public static BrokerFactory toBrokerFactory(EntityManagerFactory emf) {\r\n+        if (emf == null)\r\n+            return null;\r\n+        if (!(emf instanceof EntityManagerFactoryImpl)) {\r\n+            Class c = emf.getClass();\r\n+            try {\r\n+                // either cast here may fail\r\n+                emf = (EntityManagerFactoryImpl) ((OpenJPAEntityManagerFactory)\r\n+                    emf).getUserObject(EMF_KEY);\r\n+            } catch (ClassCastException cce) {\r\n+                throw new ArgumentException(_loc.get(\r\n+                    \"cant-convert-brokerfactory\", c), null, null, false);\r\n+            }\r\n+        }\r\n+        return ((EntityManagerFactoryImpl) emf).getBrokerFactory();\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a persistence manager facade to the given broker retaining\r\n+     * previously associated persistence context type.\r\n+     */\r\n+    public static OpenJPAEntityManager toEntityManager(Broker broker) {\r\n+        if (broker == null)\r\n+            return null;\r\n+\r\n+        broker.lock();\r\n+        try {\r\n+            OpenJPAEntityManager em = (OpenJPAEntityManager)\r\n+                broker.getUserObject(EM_KEY);\r\n+            if (em == null) {\r\n+                EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\r\n+                    toEntityManagerFactory(broker.getBrokerFactory());\r\n+                em = emf.newEntityManagerImpl(broker);\r\n+                broker.putUserObject(EM_KEY, em);\r\n+            }\r\n+            return em;\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        } finally {\r\n+            broker.unlock();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the underlying broker for the given entity manager facade.\r\n+     */\r\n+    public static Broker toBroker(EntityManager em) {\r\n+        if (em == null)\r\n+            return null;\r\n+        if (!(em instanceof EntityManagerImpl)) {\r\n+            Class c = em.getClass();\r\n+            try {\r\n+                // either cast here may fail\r\n+                em = (EntityManagerImpl) ((OpenJPAEntityManager) em).\r\n+                    getUserObject(EM_KEY);\r\n+            } catch (ClassCastException cce) {\r\n+                throw new ArgumentException(_loc.get(\"cant-convert-broker\", c),\r\n+                    new Throwable[] { cce }, null, false);\r\n+            }\r\n+        }\r\n+        return ((EntityManagerImpl) em).getBroker();\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated with the\r\n+     * persistent object <code>o</code>.\r\n+     */\r\n+    public static ClassMetaData getMetaData(Object o) {\r\n+        if (o == null)\r\n+            return null;\r\n+        EntityManager em = OpenJPAPersistence.getEntityManager(o);\r\n+        return (em == null) ? null : getMetaData(em,\r\n+            ImplHelper.getManagedInstance(o).getClass());\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n+     * with the persistent type <code>cls</code>.\r\n+     */\r\n+    public static ClassMetaData getMetaData(EntityManager em, Class cls) {\r\n+        if (em == null)\r\n+            throw new NullPointerException(\"em == null\");\r\n+\r\n+        OpenJPAEntityManagerSPI kem = (OpenJPAEntityManagerSPI)\r\n+            OpenJPAPersistence.cast(em);\r\n+        try {\r\n+            return kem.getConfiguration().getMetaDataRepositoryInstance().\r\n+                getMetaData(cls, kem.getClassLoader(), false);\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n+     * with the persistent type <code>cls</code>.\r\n+     */\r\n+    public static ClassMetaData getMetaData(EntityManagerFactory emf,\r\n+        Class cls) {\r\n+        if (emf == null)\r\n+            throw new NullPointerException(\"emf == null\");\r\n+\r\n+        OpenJPAEntityManagerFactorySPI emfSPI =\r\n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf);\r\n+        try {\r\n+            return emfSPI.getConfiguration().getMetaDataRepositoryInstance().\r\n+                getMetaData(cls, null, false);\r\n+        } catch (Exception e) {\r\n+            throw PersistenceExceptions.toPersistenceException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Translate from a OpenJPA identity object to a Persistence one.\r\n+     */\r\n+    public static Object fromOpenJPAObjectId(Object oid) {\r\n+        if (oid instanceof OpenJPAId)\r\n+            return ((OpenJPAId) oid).getIdObject();\r\n+        return oid;\r\n+    }\r\n+\r\n+    /**\r\n+     * Translate from a Persistence identity object to a OpenJPA one.\r\n+     */\r\n+    public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\r\n+        if (oid == null || meta == null)\r\n+            return null;\r\n+\r\n+        Class cls = meta.getDescribedType();\r\n+        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\r\n+            return new Id(cls, ((Number) oid).longValue());\r\n+\r\n+        if (oid instanceof Byte)\r\n+            return new ByteId(cls, (Byte) oid);\r\n+        if (oid instanceof Character)\r\n+            return new CharId(cls, (Character) oid);\r\n+        if (oid instanceof Double)\r\n+            return new DoubleId(cls, (Double) oid);\r\n+        if (oid instanceof Float)\r\n+            return new FloatId(cls, (Float) oid);\r\n+        if (oid instanceof Integer)\r\n+            return new IntId(cls, (Integer) oid);\r\n+        if (oid instanceof Long)\r\n+            return new LongId(cls, (Long) oid);\r\n+        if (oid instanceof Short)\r\n+            return new ShortId(cls, (Short) oid);\r\n+        if (oid instanceof String)\r\n+            return new StringId(cls, (String) oid);\r\n+        if (oid instanceof BigDecimal)\r\n+            return new BigDecimalId(cls, (BigDecimal) oid);\r\n+        if (oid instanceof BigInteger)\r\n+            return new BigIntegerId(cls, (BigInteger) oid);\r\n+        return new ObjectId(cls, oid);\r\n+    }\r\n+\r\n+    /**\r\n+     * Return an array of OpenJPA oids for the given native oid array.\r\n+     */\r\n+    public static Object[] toOpenJPAObjectIds(ClassMetaData meta,\r\n+        Object... oids) {\r\n+        if (oids == null || oids.length == 0)\r\n+            return oids;\r\n+\r\n+        // since the class if fixed for all oids, we can tell if we have to\r\n+        // translate the array based on whether the first oid needs translating\r\n+        Object oid = toOpenJPAObjectId(meta, oids[0]);\r\n+        if (oid == oids[0])\r\n+            return oids;\r\n+\r\n+        Object[] copy = new Object[oids.length];\r\n+        copy[0] = oid;\r\n+        for (int i = 1; i < oids.length; i++)\r\n+            copy[i] = toOpenJPAObjectId(meta, oids[i]);\r\n+        return copy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Return a collection of OpenJPA oids for the given native oid collection.\r\n+     */\r\n+    public static Collection toOpenJPAObjectIds(ClassMetaData meta,\r\n+        Collection oids) {\r\n+        if (oids == null || oids.isEmpty())\r\n+            return oids;\r\n+\r\n+        // since the class if fixed for all oids, we can tell if we have to\r\n+        // translate the array based on whether the first oid needs translating\r\n+        Iterator itr = oids.iterator();\r\n+        Object orig = itr.next();\r\n+        Object oid = toOpenJPAObjectId(meta, orig);\r\n+        if (oid == orig)\r\n+            return oids;\r\n+\r\n+        Collection copy = new ArrayList(oids.size());\r\n+        copy.add(oid);\r\n+        while (itr.hasNext())\r\n+            copy.add(toOpenJPAObjectId(meta, itr.next()));\r\n+        return copy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Translate from a OpenJPA identity class to a native one.\r\n+     */\r\n+    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\r\n+        if (oidClass == null)\r\n+            return null;\r\n+        if (oidClass == Id.class)\r\n+            return Long.class;\r\n+        if (oidClass == ByteId.class)\r\n+            return Byte.class;\r\n+        if (oidClass == CharId.class)\r\n+            return Character.class;\r\n+        if (oidClass == DoubleId.class)\r\n+            return Double.class;\r\n+        if (oidClass == FloatId.class)\r\n+            return Float.class;\r\n+        if (oidClass == IntId.class)\r\n+            return Integer.class;\r\n+        if (oidClass == LongId.class)\r\n+            return Long.class;\r\n+        if (oidClass == ShortId.class)\r\n+            return Short.class;\r\n+        if (oidClass == StringId.class)\r\n+            return String.class;\r\n+        if (oidClass == BigDecimalId.class)\r\n+            return BigDecimal.class;\r\n+        if (oidClass == BigIntegerId.class)\r\n+            return BigInteger.class;\r\n+        return oidClass;\r\n+\t}\r\n+}\r"},{"sha":"954696be345ca903d0629a42b2ed55b45ee19149","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyDependent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Dependent map key marker.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface KeyDependent {\n+\n+    boolean value() default true;\n+}"},{"sha":"2b0f6f3236d0e40ab162c93d3761d33b9c1ef48c","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/KeyType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Indicates the persistent key type of a map field, if different than the\n+ * declared type.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface KeyType {\n+\n+    Class value();\n+}"},{"sha":"ded64a0edd82dd10743bb97e50363f7bfbf66865","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LRS.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Large result set field marker.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface LRS {\n+\n+    boolean value() default true;\n+}"},{"sha":"2d1918e5360f9225a074588337ebc37270ef41fd","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/LoadFetchGroup.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Fetch group loaded when the annotated field/property is loaded. \n+ *\n+ * @author Pinaki Poddar\n+ * @since 1.0.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface LoadFetchGroup {\n+\n+    String value();\n+}"},{"sha":"999b8c095e60305f7d5762fba506b8f3e6f41652","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ManagedInterface.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.TYPE;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * The annotated interface should be treated as a managed interface by OpenJPA.\n+ * New instances of this type can be created by invoking\n+ * {@link OpenJPAEntityManager#createInstance(Class)}.\n+ * Interfaces with this annotation should also be annotated with one of the JPA\n+ * entity annotations ({@link javax.persistence.Entity @Entity},\n+ * {@link javax.persistence.MappedSuperclass @MappedSuperclass},\n+ * or {@link javax.persistence.Embeddable @Embeddable}).\n+ *\n+ * @since 1.1.0\n+ * @published\n+ */\n+@Target({ TYPE })\n+@Retention(RUNTIME)\n+public @interface ManagedInterface {\n+}"},{"sha":"6eb378d9f75b5c8c1f1cc18e66b5a6953c8feb8f","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataParsers.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.lang.reflect.Method;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.event.LifecycleCallbacks;\n+import org.apache.openjpa.event.LifecycleEvent;\n+import org.apache.openjpa.event.MethodLifecycleCallbacks;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.MetaDataDefaults;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Common utilities for persistence metadata parsers.\n+ *\n+ * @author Abe White\n+ */\n+class MetaDataParsers {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (MetaDataParsers.class);\n+\n+    /**\n+     * Return the event type constants for the given tag, or null if none.\n+     */\n+    public static int[] getEventTypes(MetaDataTag tag) {\n+        switch (tag) {\n+            case PRE_PERSIST:\n+                return new int[]{ LifecycleEvent.BEFORE_PERSIST };\n+            case POST_PERSIST:\n+                return new int[]{ LifecycleEvent.AFTER_PERSIST_PERFORMED };\n+            case PRE_REMOVE:\n+                return new int[]{ LifecycleEvent.BEFORE_DELETE };\n+            case POST_REMOVE:\n+                return new int[]{ LifecycleEvent.AFTER_DELETE_PERFORMED };\n+            case PRE_UPDATE:\n+                return new int[]{ LifecycleEvent.BEFORE_UPDATE };\n+            case POST_UPDATE:\n+                return new int[]{ LifecycleEvent.AFTER_UPDATE_PERFORMED };\n+            case POST_LOAD:\n+                return new int[]{ LifecycleEvent.AFTER_LOAD,\n+                    LifecycleEvent.AFTER_REFRESH };\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    /**\n+     * Validate that the given listener class does not have multiple methods\n+     * listening for the same lifecycle event, which is forbidden by the spec.  \n+     */\n+    public static void validateMethodsForSameCallback(Class cls, \n+        Collection<LifecycleCallbacks> callbacks, Method method, \n+        MetaDataTag tag, MetaDataDefaults def, Log log) {\n+        if (callbacks == null || callbacks.isEmpty())\n+            return;\n+\n+        for (LifecycleCallbacks lc: callbacks) {\n+            if (!(lc instanceof MethodLifecycleCallbacks))\n+                continue;\n+            Method exists = ((MethodLifecycleCallbacks) lc).getCallbackMethod();\n+            if (!exists.getDeclaringClass().equals(method.getDeclaringClass()))\n+                continue;\n+\n+            PersistenceMetaDataDefaults defaults = getPersistenceDefaults(def);\n+            Localizer.Message msg = _loc.get(\"multiple-methods-on-callback\", \n+                new Object[] { method.getDeclaringClass().getName(), \n+                method.getName(), exists.getName(), tag.toString() });\n+            if (defaults == null \n+                || defaults.getAllowsMultipleMethodsForSameCallback())\n+                log.warn(msg);\n+            else\n+                throw new UserException(msg);\n+        }\n+    }\n+    \n+    /**\n+     * Return the {@link PersistenceMetaDataDefaults} in use, or null if not\n+     * using JPA defaults.\n+     */\n+    private static PersistenceMetaDataDefaults getPersistenceDefaults\n+        (MetaDataDefaults def) {\n+        if (def instanceof PersistenceMetaDataDefaults)\n+            return (PersistenceMetaDataDefaults) def;\n+        return null;\n+    }\n+}"},{"sha":"f10e07d039ad5657df9e62c8b1841756383ef94e","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/MetaDataTag.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+/////////////////////////////////////////////////////////\n+// NOTE: when adding a new type, make sure to update the\n+// table in PersistenceMetaDataParser\n+/////////////////////////////////////////////////////////\n+\n+/**\n+ * Set of metadata tags used in JPA.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public enum MetaDataTag {\n+    // sorted by XML order\n+    MAPPED_SUPERCLASS,\n+    ENTITY,\n+    EMBEDDABLE,\n+    ENTITY_LISTENERS,\n+    FLUSH_MODE,\n+    GENERATED_VALUE,\n+    ID,\n+    EMBEDDED_ID,\n+    EXCLUDE_DEFAULT_LISTENERS,\n+    EXCLUDE_SUPERCLASS_LISTENERS,\n+    ID_CLASS,\n+    LOB,\n+    MAP_KEY,\n+    NATIVE_QUERIES,\n+    NATIVE_QUERY,\n+    QUERY_STRING,\n+    ORDER_BY,\n+    QUERIES,\n+    QUERY,\n+    QUERY_HINT,\n+    POST_LOAD,\n+    POST_PERSIST,\n+    POST_REMOVE,\n+    POST_UPDATE,\n+    PRE_PERSIST,\n+    PRE_REMOVE,\n+    PRE_UPDATE,\n+    SEQ_GENERATOR,\n+    VERSION,\n+    // openjpa extensions\n+    DATA_CACHE,\n+    DATASTORE_ID,\n+    DEPENDENT,\n+    DETACHED_STATE,\n+    ELEM_DEPENDENT,\n+    ELEM_TYPE,\n+    EXTERNAL_VALS,\n+    EXTERNALIZER,\n+    FACTORY,\n+    FETCH_GROUP,\n+    FETCH_GROUPS,\n+    INVERSE_LOGICAL,\n+    KEY_DEPENDENT,\n+    KEY_TYPE,\n+    LOAD_FETCH_GROUP,\n+    LRS,\n+    MANAGED_INTERFACE,\n+    READ_ONLY,\n+    TYPE,\n+}"},{"sha":"0540f74ef13a461026f01189d0de619896cbf4c7","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NoResultException.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NoResultException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NoResultException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NoResultException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Unique query returned no results.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class NoResultException\n+    extends javax.persistence.NoResultException\n+    implements Serializable, ExceptionInfo {\n+\n+    private transient boolean _fatal = false;\n+    private transient Object _failed = null;\n+    private transient Throwable[] _nested = null;\n+\n+    public NoResultException(String msg, Throwable[] nested,\n+        Object failed, boolean fatal) {\n+        super(msg);\n+        _nested = nested;\n+        _failed = failed;\n+        _fatal = fatal;\n+    }\n+\n+    public int getType() {\n+        return USER;\n+    }\n+\n+    public int getSubtype() {\n+        return UserException.INVALID_STATE;\n+    }\n+\n+    public boolean isFatal() {\n+        return _fatal;\n+    }\n+\n+    public Throwable getCause() {\n+        return PersistenceExceptions.getCause(_nested);\n+    }\n+\n+    public Throwable[] getNestedThrowables() {\n+        return (_nested == null) ? Exceptions.EMPTY_THROWABLES : _nested;\n+    }\n+\n+    public Object getFailedObject() {\n+        return _failed;\n+    }\n+\n+    public String toString() {\n+        return Exceptions.toString(this);\n+    }\n+\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.writeBoolean(_fatal);\n+        out.writeObject(Exceptions.replaceFailedObject(_failed));\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _fatal = in.readBoolean();\n+        _failed = in.readObject();\n+        _nested = (Throwable[]) in.readObject();\n+    }\n+}\n+"},{"sha":"3189ce4cfe8c3c3d013ff7ca21ecb77a8b48240b","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NonUniqueResultException.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NonUniqueResultException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NonUniqueResultException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/NonUniqueResultException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Unique query returned multipl results.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class NonUniqueResultException\n+    extends javax.persistence.NonUniqueResultException\n+    implements Serializable, ExceptionInfo {\n+\n+    private transient boolean _fatal = false;\n+    private transient Object _failed = null;\n+    private transient Throwable[] _nested = null;\n+\n+    public NonUniqueResultException(String msg, Throwable[] nested,\n+        Object failed, boolean fatal) {\n+        super(msg);\n+        _nested = nested;\n+        _failed = failed;\n+        _fatal = fatal;\n+    }\n+\n+    public int getType() {\n+        return USER;\n+    }\n+\n+    public int getSubtype() {\n+        return UserException.INVALID_STATE;\n+    }\n+\n+    public boolean isFatal() {\n+        return _fatal;\n+    }\n+\n+    public Throwable getCause() {\n+        return PersistenceExceptions.getCause(_nested);\n+    }\n+\n+    public Throwable[] getNestedThrowables() {\n+        return (_nested == null) ? Exceptions.EMPTY_THROWABLES : _nested;\n+    }\n+\n+    public Object getFailedObject() {\n+        return _failed;\n+    }\n+\n+    public String toString() {\n+        return Exceptions.toString(this);\n+    }\n+\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.writeBoolean(_fatal);\n+        out.writeObject(Exceptions.replaceFailedObject(_failed));\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _fatal = in.readBoolean();\n+        _failed = in.readObject();\n+        _nested = (Throwable[]) in.readObject();\n+    }\n+}\n+"},{"sha":"9ca766bf4d0b2a626f09c7d2604e5b0b7735a761","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","status":"added","additions":1126,"deletions":0,"changes":1126,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,1126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.event.CallbackModes;\n+import org.apache.openjpa.kernel.AutoClear;\n+import org.apache.openjpa.kernel.AutoDetach;\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\n+import org.apache.openjpa.kernel.DetachState;\n+import org.apache.openjpa.kernel.RestoreState;\n+\n+/**\n+ * Interface implemented by OpenJPA entity managers.\n+ *\n+ * This interface extends {@link EntityTransaction}, but this extension is\n+ * deprecated.\n+ *\n+ * @since 0.4.0\n+ * @author Abe White\n+ * @published\n+ */\n+public interface OpenJPAEntityManager\n+    extends EntityManager, EntityTransaction /* deprecated */ {\n+\n+    /**\n+     * Return the factory that produced this entity manager.\n+     */\n+    public OpenJPAEntityManagerFactory getEntityManagerFactory();\n+\n+    /**\n+     * Return the (mutable) fetch plan for loading objects from this\n+     * entity manager.\n+     */\n+    public FetchPlan getFetchPlan();\n+\n+    /**\n+     * Pushes a new fetch plan that inherits from the current fetch plan onto\n+     * a stack, and makes the new plan the active one.\n+     *\n+     * @since 1.1.0\n+     * @return the new fetch plan\n+     */\n+    public FetchPlan pushFetchPlan();\n+\n+    /**\n+     * Pops the fetch plan from the top of the stack, making the next one down\n+     * the active one. This returns void to avoid confusion, since fetch plans\n+     * tend to be used in method-chaining patterns often.\n+     *\n+     * @since 1.1.0\n+     */\n+    public void popFetchPlan();\n+\n+    /**\n+     * Return the connection retain mode for this entity manager.\n+     */\n+    public ConnectionRetainMode getConnectionRetainMode();\n+\n+    /**\n+     * Whether this entity manager is using managed transactions.\n+     *\n+     * @since 1.1.0\n+     */\n+    public boolean isTransactionManaged();\n+\n+    /**\n+     * @deprecated use {@link #isTransactionManaged} instead to interrogate\n+     * whether or not this EntityManager's transaction is managed. To determine\n+     * if a given entity instance is managed, use {@link #contains}.\n+     */\n+    public boolean isManaged();\n+\n+    /**\n+     * Whether to check for a global transaction upon every managed,\n+     * non-transactional operation. Defaults to false.\n+     */\n+    public boolean getSyncWithManagedTransactions();\n+\n+    /**\n+     * Whether to check for a global transaction upon every managed,\n+     * non-transactional operation. Defaults to false.\n+     */\n+    public void setSyncWithManagedTransactions(boolean resync);\n+\n+    /**\n+     * Return the current thread's class loader at the time this entity\n+     * manager was obtained from the factory.\n+     */\n+    public ClassLoader getClassLoader();\n+\n+    /**\n+     * Return the connection user name.\n+     */\n+    public String getConnectionUserName();\n+\n+    /**\n+     * Return the connection password.\n+     */\n+    public String getConnectionPassword();\n+\n+    /**\n+     * Whether the entity manager or its managed instances are used in a\n+     * multithreaded environment.\n+     */\n+    public boolean getMultithreaded();\n+\n+    /**\n+     * Whether the entity manager or its managed instances are used in a\n+     * multithreaded environment.\n+     */\n+    public void setMultithreaded(boolean multi);\n+\n+    /**\n+     * Whether to take into account changes in the transaction when executing\n+     * a query or iterating an extent.\n+     */\n+    public boolean getIgnoreChanges();\n+\n+    /**\n+     * Whether to take into account changes in the transaction when executing\n+     * a query or iterating an extent.\n+     */\n+    public void setIgnoreChanges(boolean ignore);\n+\n+    /**\n+     * Whether to allow nontransactional access to persistent state.\n+     */\n+    public boolean getNontransactionalRead();\n+\n+    /**\n+     * Whether to allow nontransactional access to persistent state.\n+     */\n+    public void setNontransactionalRead(boolean read);\n+\n+    /**\n+     * Whether to allow nontransactional changes to persistent state.\n+     */\n+    public boolean getNontransactionalWrite();\n+\n+    /**\n+     * Whether to allow nontransactional changes to persistent state.\n+     */\n+    public void setNontransactionalWrite(boolean write);\n+\n+    /**\n+     * Whether to use optimistic transactional semantics.\n+     */\n+    public boolean getOptimistic();\n+\n+    /**\n+     * Whether to use optimistic transactional semantics.\n+     */\n+    public void setOptimistic(boolean opt);\n+\n+    /**\n+     * Whether to restore an object's original state on rollback.\n+     */\n+    public RestoreStateType getRestoreState();\n+\n+    /**\n+     * Whether to restore an object's original state on rollback.\n+     */\n+    public void setRestoreState(RestoreStateType restoreType);\n+\n+    /**\n+     * Whether objects retain their persistent state on transaction commit.\n+     */\n+    public boolean getRetainState();\n+\n+    /**\n+     * Whether objects retain their persistent state on transaction commit.\n+     */\n+    public void setRetainState(boolean retain);\n+\n+    /**\n+     * Detach mode constant to determine which fields are part of the\n+     * detached graph.\n+     */\n+    public DetachStateType getDetachState();\n+\n+    /**\n+     * Detach mode constant to determine which fields are part of the\n+     * detached graph.\n+     */\n+    public void setDetachState(DetachStateType type);\n+\n+    /**\n+     * Whether to clear state when entering a transaction.\n+     */\n+    public AutoClearType getAutoClear();\n+\n+    /**\n+     * Whether to clear state when entering a transaction.\n+     */\n+    public void setAutoClear(AutoClearType clearType);\n+\n+    /**\n+     * {@link AutoDetachType} values which indicate when persistent\n+     * managed objects should be automatically detached in-place.\n+     */\n+    public EnumSet<AutoDetachType> getAutoDetach();\n+\n+    /**\n+     * {@link AutoDetachType} values which indicate when persistent\n+     * managed objects should be automatically detached in-place.\n+     * The current value is replaced in its entirety.\n+     */\n+    public void setAutoDetach(AutoDetachType value);\n+\n+    /**\n+     * {@link AutoDetachType} values which indicate when persistent\n+     * managed objects should be automatically detached in-place.\n+     * The current value is replaced in its entirety.\n+     */\n+    public void setAutoDetach(EnumSet<AutoDetachType> values);\n+\n+    /**\n+     * Bit flags marked in {@link AutoDetachType} which indicate when persistent\n+     * managed objects should be automatically detached in-place.\n+     *\n+     * @since 1.1.0\n+     */\n+    public void setAutoDetach(AutoDetachType value, boolean on);\n+\n+    /**\n+     * Whether to also evict an object from the store cache when it is\n+     * evicted through this entity manager.\n+     */\n+    public boolean getEvictFromStoreCache();\n+\n+    /**\n+     * Whether to also evict an object from the store cache when it is\n+     * evicted through this entity manager.\n+     */\n+    public void setEvictFromStoreCache(boolean evict);\n+\n+    /**\n+     * Whether objects accessed during this transaction will be added to the\n+     * store cache. Defaults to true.\n+     *\n+     * @since 0.3.4\n+     */\n+    public boolean getPopulateStoreCache();\n+\n+    /**\n+     * Whether to populate the store cache with objects used by this\n+     * transaction. Defaults to true.\n+     *\n+     * @since 0.3.4\n+     */\n+    public void setPopulateStoreCache(boolean cache);\n+\n+    /**\n+     * Whether memory usage is reduced during this transaction at the expense\n+     * of tracking changes at the type level instead of the instance level,\n+     * resulting in more aggressive cache invalidation.\n+     *\n+     * @since 1.0.0\n+     */\n+    public boolean isTrackChangesByType();\n+\n+    /**\n+     * If a large number of objects will be created, modified, or deleted\n+     * during this transaction setting this option to true will reduce memory\n+     * usage if you perform periodic flushes by tracking changes at the type\n+     * level instead of the instance level, resulting in more aggressive cache\n+     * invalidation.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void setTrackChangesByType(boolean track);\n+\n+    /**\n+     * Put the specified key-value pair into the map of user objects. Use\n+     * a value of null to remove the key.\n+     */\n+    public Object putUserObject(Object key, Object val);\n+\n+    /**\n+     * Get the value for the specified key from the map of user objects.\n+     */\n+    public Object getUserObject(Object key);\n+\n+    ///////////\n+    // Lookups\n+    ///////////\n+\n+    /**\n+     * Return the objects with the given oids.\n+     *\n+     * @param oids the oids of the objects to return\n+     * @return the objects that were looked up, in the\n+     * same order as the oids parameter.\n+     * @see #find(Class,Object)\n+     */\n+    public <T> T[] findAll(Class<T> cls, Object... oids);\n+\n+    /**\n+     * Return the objects with the given oids.\n+     *\n+     * @param oids the oids of the objects to return\n+     * @return the objects that were looked up, in the\n+     * same order as the oids parameter.\n+     * @see #find(Class,Object)\n+     */\n+    public <T> Collection<T> findAll(Class<T> cls, Collection oids);\n+\n+    /**\n+     * Return the cached instance for the given oid/object, or null if not\n+     * cached.\n+     *\n+     * @param oid the object's id\n+     * @return the cached object, or null if not cached\n+     */\n+    public <T> T findCached(Class<T> cls, Object oid);\n+\n+    /**\n+     * Return the application identity class the given persistent class uses\n+     * for object ids, or null if not a type that uses application identity.\n+     */\n+    public Class getObjectIdClass(Class pcClass);\n+\n+    ////////////////\n+    // Transactions\n+    ////////////////\n+\n+    public OpenJPAEntityTransaction getTransaction();\n+\n+    /**\n+     * Set a transactional savepoint where operations after this savepoint\n+     * will be rolled back.\n+     */\n+    public void setSavepoint(String name);\n+\n+    /**\n+     * Rollback the current transaction to the last savepoint.\n+     * Savepoints set after this one will become invalid.\n+     */\n+    public void rollbackToSavepoint();\n+\n+    /**\n+     * Rollback the current transaction to the given savepoint name.\n+     * Savepoints set after this one will become invalid.\n+     */\n+    public void rollbackToSavepoint(String name);\n+\n+    /**\n+     * Release the last set savepoint and any resources associated with it.\n+     * The given savepoint and any set after it will become invalid.\n+     */\n+    public void releaseSavepoint();\n+\n+    /**\n+     * Release the savepoint and any resources associated with it.\n+     * The given savepoint and any set after it will become invalid.\n+     */\n+    public void releaseSavepoint(String name);\n+\n+    /**\n+     * Run pre-flush actions on transactional objects, including\n+     * persistence-by-reachability, inverse relationship management,\n+     * deletion of dependent instances, and instance callbacks.\n+     * Transaction listeners are not invoked.\n+     *\n+     * @since 0.3.3\n+     */\n+    public void preFlush();\n+\n+    /**\n+     * Validate the changes made in this transaction, reporting any optimistic\n+     * violations, constraint violations, etc. In a datastore transaction or\n+     * a flushed optimistic transaction, this method will act just like\n+     * {@link #flush()}. In an optimistic transaction that has not yet begun a\n+     * datastore-level transaction, however, it will only report exceptions\n+     * that would occur on flush, without retaining any datastore resources.\n+     */\n+    public void validateChanges();\n+\n+    /**\n+     * Whether a store transaction is active.\n+     */\n+    public boolean isStoreActive();\n+\n+    /**\n+     * Begins a store transaction if one isn't already started. The\n+     * entity manager must already be in a logical transaction.\n+     */\n+    public void beginStore();\n+\n+    ////////////////////\n+    // Object Lifecycle\n+    ////////////////////\n+\n+    /**\n+     * Whether the given objects are managed.\n+     */\n+    public boolean containsAll(Object... pcs);\n+\n+    /**\n+     * Whether the given objects are managed.\n+     */\n+    public boolean containsAll(Collection pcs);\n+\n+    /**\n+     * Persist the given objects.\n+     */\n+    public void persistAll(Object... pcs);\n+\n+    /**\n+     * Persist the given objects.\n+     */\n+    public void persistAll(Collection pcs);\n+\n+    /**\n+     * Delete the given persistent objects.\n+     */\n+    public void removeAll(Object... pcs);\n+\n+    /**\n+     * Delete the given persistent objects.\n+     */\n+    public void removeAll(Collection pcs);\n+\n+    /**\n+     * Release the given object from management. This operation is not\n+     * recursive.\n+     */\n+    public void release(Object pc);\n+\n+    /**\n+     * Release the given object from management. This operation is not\n+     * recursive.\n+     */\n+    public void releaseAll(Object... pcs);\n+\n+    /**\n+     * Release the given objects from management. This operation is not\n+     * recursive.\n+     */\n+    public void releaseAll(Collection pcs);\n+\n+    /**\n+     * Immediately load the given object's persistent fields. One might\n+     * use this action to make sure that an instance's fields are loaded\n+     * before transitioning it to transient. Note that this action is not\n+     * recursive. Any related objects that are loaded will not necessarily\n+     * have their fields loaded.\n+     */\n+    public void retrieve(Object pc);\n+\n+    /**\n+     * Retrieve the persistent state of the given objects.\n+     *\n+     * @see #retrieve\n+     */\n+    public void retrieveAll(Object... pcs);\n+\n+    /**\n+     * Retrieve the persistent state of the given objects.\n+     *\n+     * @see #retrieve\n+     */\n+    public void retrieveAll(Collection pcs);\n+\n+    /**\n+     * Refresh the state of the given objects.\n+     */\n+    public void refreshAll(Object... pcs);\n+\n+    /**\n+     * Refresh the state of the given objects.\n+     */\n+    public void refreshAll(Collection pcs);\n+\n+    /**\n+     * Refresh all transactional objects.\n+     */\n+    public void refreshAll();\n+\n+    /**\n+     * Evict the given object.\n+     */\n+    public void evict(Object pc);\n+\n+    /**\n+     * Evict the given objects.\n+     */\n+    public void evictAll(Object... pcs);\n+\n+    /**\n+     * Evict the given objects.\n+     */\n+    public void evictAll(Collection pcs);\n+\n+    /**\n+     * Evict all clean objects.\n+     */\n+    public void evictAll();\n+\n+    /**\n+     * Evict all persistent-clean and persistent-nontransactional\n+     * instances in the extent of the given class (including subclasses).\n+     */\n+    public void evictAll(Class cls);\n+\n+    /**\n+     * Evict all persistent-clean and persistent-nontransactional\n+     * instances in the given {@link Extent}.\n+     */\n+    public void evictAll(Extent extent);\n+\n+    /**\n+     * Detach the specified object from the entity manager.\n+     *\n+     * @param pc the instance to detach\n+     * @return the detached instance\n+     */\n+    public <T> T detach(T pc);\n+\n+    /**\n+     * Detach the specified objects from the entity manager.\n+     *\n+     * @param pcs the instances to detach\n+     * @return the detached instances\n+     */\n+    public Collection detachAll(Collection pcs);\n+\n+    /**\n+     * Detach the specified objects from the entity manager.\n+     *\n+     * @param pcs the instances to detach\n+     * @return the detached instances\n+     */\n+    public Object[] detachAll(Object... pcs);\n+\n+    /**\n+     * Merge the specified objects into the entity manager.\n+     *\n+     * @param pcs instances to import\n+     * @return the re-attached instances\n+     */\n+    public Object[] mergeAll(Object... pcs);\n+\n+    /**\n+     * Merge the specified detached objects into the entity manager.\n+     *\n+     * @param pcs Collection of instances to import\n+     * @return the re-attached instances\n+     */\n+    public Collection mergeAll(Collection pcs);\n+\n+    /**\n+     * Make the given object transactional.\n+     *\n+     * @param pc instance to make transactional\n+     * @param updateVersion if true, the instance's version will be\n+     * incremented at the next flush\n+     */\n+    public void transactional(Object pc, boolean updateVersion);\n+\n+    /**\n+     * Make the given objects transactional.\n+     *\n+     * @param objs instances to make transactional\n+     * @param updateVersion if true, the instance's version will be\n+     * incremented at the next flush\n+     */\n+    public void transactionalAll(Collection objs, boolean updateVersion);\n+\n+    /**\n+     * Make the given objects transactional.\n+     *\n+     * @param objs instances to make transactional\n+     * @param updateVersion if true, the instance's version will be\n+     * incremented at the next flush\n+     */\n+    public void transactionalAll(Object[] objs, boolean updateVersion);\n+\n+    /**\n+     * Make the given object nontransactional.\n+     */\n+    public void nontransactional(Object pc);\n+\n+    /**\n+     * Make the given objects nontransactional.\n+     */\n+    public void nontransactionalAll(Collection objs);\n+\n+    /**\n+     * Make the given objects nontransactional.\n+     */\n+    public void nontransactionalAll(Object[] objs);\n+\n+    ////////////////////////////\n+    // Extent, Query, Generator\n+    ////////////////////////////\n+\n+    /**\n+     * Return the named generator defined in the metadata.\n+     */\n+    public Generator getNamedGenerator(String name);\n+\n+    /**\n+     * Returns a {@link Generator} for the datastore identity values of the\n+     * specified type, or null if the type is unmanaged or its identity\n+     * cannot be represented by a sequence.\n+     */\n+    public Generator getIdGenerator(Class forClass);\n+\n+    /**\n+     * Returns a {@link Generator} for the generated values of the specified\n+     * type, or null if the field is not generated.\n+     */\n+    public Generator getFieldGenerator(Class forClass, String fieldName);\n+\n+    /**\n+     * Return an extent of the given class, optionally including subclasses.\n+     */\n+    public <T> Extent<T> createExtent(Class<T> cls, boolean subs);\n+\n+    public OpenJPAQuery createQuery(String query);\n+\n+    public OpenJPAQuery createNamedQuery(String name);\n+\n+    public OpenJPAQuery createNativeQuery(String sql);\n+\n+    public OpenJPAQuery createNativeQuery(String sql, Class resultClass);\n+\n+    public OpenJPAQuery createNativeQuery(String sql, String resultMapping);\n+\n+    /**\n+     * Create a new query from the given one.\n+     */\n+    public OpenJPAQuery createQuery(Query query);\n+\n+    /**\n+     * Create a new query in the given language.\n+     */\n+    public OpenJPAQuery createQuery(String language, String query);\n+\n+    ///////////\n+    // Locking\n+    ///////////\n+\n+    /**\n+     * Return the lock mode of the given instance, or null if not locked.\n+     */\n+    public LockModeType getLockMode(Object pc);\n+\n+    /**\n+     * Ensure that the given instance is locked at the given lock level.\n+     *\n+     * @param pc the object to lock\n+     * @param mode the lock level to use\n+     * @param timeout the number of milliseconds to wait for the lock before\n+     * giving up, or -1 for no limit\n+     */\n+    public void lock(Object pc, LockModeType mode, int timeout);\n+\n+    /**\n+     * Ensure that the given instance is locked at the current lock level, as\n+     * set in the {@link FetchPlan} for the entity manager.\n+     */\n+    public void lock(Object pc);\n+\n+    /**\n+     * Ensure that the given instances are locked at the given lock level.\n+     *\n+     * @param pcs the objects to lock\n+     * @param mode the lock level to use\n+     * @param timeout the number of milliseconds to wait for the lock before\n+     * giving up, or -1 for no limit\n+     */\n+    public void lockAll(Collection pcs, LockModeType mode, int timeout);\n+\n+    /**\n+     * Ensure that the given instances are locked at the current lock level,\n+     * as set in the {@link FetchPlan} for the entity manager.\n+     */\n+    public void lockAll(Collection pcs);\n+\n+    /**\n+     * Ensure that the given instances are locked at the given lock level.\n+     *\n+     * @param pcs the objects to lock\n+     * @param mode the lock level to use\n+     * @param timeout the number of milliseconds to wait for the lock before\n+     * giving up, or -1 for no limit\n+     */\n+    public void lockAll(Object[] pcs, LockModeType mode, int timeout);\n+\n+    /**\n+     * Ensure that the given instances are locked at the current lock level,\n+     * as set in the {@link FetchPlan} for the entity manager.\n+     */\n+    public void lockAll(Object... pcs);\n+\n+    //////////////\n+    // Connection\n+    //////////////\n+\n+    /**\n+     * Cancel all pending data store statements. If statements are cancelled\n+     * while a flush is in progress, the transaction rollback only flag will\n+     * be set.\n+     *\n+     * @return true if any statements were cancelled, false otherwise\n+     */\n+    public boolean cancelAll();\n+\n+    /**\n+     * Return the connection in use by the entity manager, or a new\n+     * connection if none.\n+     */\n+    public Object getConnection();\n+\n+    /////////\n+    // Cache\n+    /////////\n+\n+    /**\n+     * Return a set of all managed instances.\n+     */\n+    public Collection getManagedObjects();\n+\n+    /**\n+     * Return a set of current transaction instances.\n+     */\n+    public Collection getTransactionalObjects();\n+\n+    /**\n+     * Return a set of instances which will become transactional upon\n+     * the next transaction.\n+     */\n+    public Collection getPendingTransactionalObjects();\n+\n+    /**\n+     * Return a set of current dirty instances.\n+     */\n+    public Collection getDirtyObjects();\n+\n+    /**\n+     * Whether dirty objects will be returned in the order they were dirtied.\n+     * Default is determined by the store manager.\n+     */\n+    public boolean getOrderDirtyObjects();\n+\n+    /**\n+     * Whether dirty objects will be returned in the order they were dirtied.\n+     * Default is determined by the store manager.\n+     */\n+    public void setOrderDirtyObjects(boolean order);\n+\n+    /**\n+     * Mark the given class as dirty within the current transaction.\n+     */\n+    public void dirtyClass(Class cls);\n+\n+    /**\n+     * Return the set of classes that have been made persistent in the current\n+     * transaction.\n+     */\n+    public Collection<Class> getPersistedClasses();\n+\n+    /**\n+     * Return the set of classes that have been deleted in the current\n+     * transaction.\n+     */\n+    public Collection<Class> getRemovedClasses();\n+\n+    /**\n+     * Return the set of classes for objects that have been modified\n+     * in the current transaction.\n+     */\n+    public Collection<Class> getUpdatedClasses();\n+\n+    /**\n+     * Create a new instance of type <code>cls</code>. If <code>cls</code> is\n+     * an interface or an abstract class whose abstract methods follow the\n+     * JavaBeans convention, this method will create a concrete implementation\n+     * according to the metadata that defines the class. If <code>cls</code>\n+     * is a non-final concrete type that has metadata but does not implement\n+     * {@link org.apache.openjpa.enhance.PersistenceCapable}, this method will\n+     * create a subclass of the type that does implement\n+     * {@link org.apache.openjpa.enhance.PersistenceCapable}, and will attempt\n+     * to redefine the methods in <code>cls</code> to enable persistent\n+     * attribute tracking. Otherwise, if <code>cls</code> is a managed type,\n+     * this will return an instance of the specified class.\n+     *\n+     * @throws IllegalArgumentException if <code>cls</code> is not a managed\n+     * type or interface.\n+     */\n+    public <T> T createInstance(Class<T> cls);\n+\n+    /**\n+     * Make the named field of the given object dirty.\n+     */\n+    public void dirty(Object o, String field);\n+\n+    /**\n+     * Return the oid of the given instance.\n+     */\n+    public Object getObjectId(Object o);\n+\n+    /**\n+     * Return whether the given object is dirty.\n+     */\n+    public boolean isDirty(Object o);\n+\n+    /**\n+     * Return whether the given object is transactional.\n+     */\n+    public boolean isTransactional(Object o);\n+\n+    /**\n+     * Return whether the given object is persistent.\n+     */\n+    public boolean isPersistent(Object o);\n+\n+    /**\n+     * Return whether the given object was made persistent in the current\n+     * transaction.\n+     */\n+    public boolean isNewlyPersistent(Object o);\n+\n+    /**\n+     * Return whether the given object is deleted.\n+     */\n+    public boolean isRemoved(Object o);\n+\n+    /**\n+     * Returns <code>true</code> if <code>pc</code> is a detached object\n+\t * (one that can be reattached to a {@link EntityManager} via a call\n+\t * to {@link EntityManager#merge}); otherwise returns\n+\t * <code>false</code>.\n+\t */\n+\tpublic boolean isDetached (Object o);\n+\n+\t/**\n+\t * Returns the current version indicator for <code>o</code>.\n+\t */\n+\tpublic Object getVersion (Object o);\n+\n+    /**\n+     * @deprecated use the {@link ConnectionRetainMode} enum instead.\n+     */\n+    public static final int CONN_RETAIN_DEMAND =\n+        ConnectionRetainModes.CONN_RETAIN_DEMAND;\n+\n+    /**\n+     * @deprecated use the {@link ConnectionRetainMode} enum instead.\n+     */\n+    public static final int CONN_RETAIN_TRANS =\n+        ConnectionRetainModes.CONN_RETAIN_TRANS;\n+\n+    /**\n+     * @deprecated use the {@link ConnectionRetainMode} enum instead.\n+     */\n+    public static final int CONN_RETAIN_ALWAYS =\n+        ConnectionRetainModes.CONN_RETAIN_ALWAYS;\n+\n+    /**\n+     * @deprecated use the {@link DetachStateType} enum instead.\n+     */\n+    public static final int DETACH_FETCH_GROUPS =\n+        DetachState.DETACH_FETCH_GROUPS;\n+\n+    /**\n+     * @deprecated use the {@link DetachStateType} enum instead.\n+     */\n+    public static final int DETACH_FGS = DetachState.DETACH_FGS;\n+\n+    /**\n+     * @deprecated use the {@link DetachStateType} enum instead.\n+     */\n+    public static final int DETACH_LOADED = DetachState.DETACH_LOADED;\n+\n+    /**\n+     * @deprecated use the {@link DetachStateType} enum instead.\n+     */\n+    public static final int DETACH_ALL = DetachState.DETACH_ALL;\n+\n+    /**\n+     * @deprecated use the {@link RestoreStateType} enum instead.\n+     */\n+    public static final int RESTORE_NONE = RestoreState.RESTORE_NONE;\n+\n+    /**\n+     * @deprecated use the {@link RestoreStateType} enum instead.\n+     */\n+    public static final int RESTORE_IMMUTABLE = RestoreState.RESTORE_IMMUTABLE;\n+\n+    /**\n+     * @deprecated use the {@link RestoreStateType} enum instead.\n+     */\n+    public static final int RESTORE_ALL = RestoreState.RESTORE_ALL;\n+\n+    /**\n+     * @deprecated use the {@link AutoDetachType} enum instead.\n+     */\n+    public static final int DETACH_CLOSE = AutoDetach.DETACH_CLOSE;\n+\n+    /**\n+     * @deprecated use the {@link AutoDetachType} enum instead.\n+     */\n+    public static final int DETACH_COMMIT = AutoDetach.DETACH_COMMIT;\n+\n+    /**\n+     * @deprecated use the {@link AutoDetachType} enum instead.\n+     */\n+    public static final int DETACH_NONTXREAD = AutoDetach.DETACH_NONTXREAD;\n+\n+    /**\n+     * @deprecated use the {@link AutoDetachType} enum instead.\n+     */\n+    public static final int DETACH_ROLLBACK = AutoDetach.DETACH_ROLLBACK;\n+\n+    /**\n+     * @deprecated use the {@link AutoClearType} enum instead.\n+     */\n+    public static final int CLEAR_DATASTORE = AutoClear.CLEAR_DATASTORE;\n+\n+    /**\n+     * @deprecated use the {@link AutoClearType} enum instead.\n+     */\n+    public static final int CLEAR_ALL = AutoClear.CLEAR_ALL;\n+\n+    /**\n+     * @deprecated use the {@link CallbackMode} enum instead.\n+     */\n+    public static final int CALLBACK_FAIL_FAST =\n+        CallbackModes.CALLBACK_FAIL_FAST;\n+\n+    /**\n+     * @deprecated use the {@link CallbackMode} enum instead.\n+     */\n+    public static final int CALLBACK_IGNORE = CallbackModes.CALLBACK_IGNORE;\n+\n+    /**\n+     * @deprecated use the {@link CallbackMode} enum instead.\n+     */\n+    public static final int CALLBACK_LOG = CallbackModes.CALLBACK_LOG;\n+\n+    /**\n+     * @deprecated use the {@link CallbackMode} enum instead.\n+     */\n+    public static final int CALLBACK_RETHROW = CallbackModes.CALLBACK_RETHROW;\n+\n+    /**\n+     * @deprecated use the {@link CallbackMode} enum instead.\n+     */\n+    public static final int CALLBACK_ROLLBACK = CallbackModes.CALLBACK_ROLLBACK;\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public org.apache.openjpa.conf.OpenJPAConfiguration getConfiguration();\n+\n+    /**\n+     * @deprecated use {@link #setRestoreState(RestoreStateType)} instead.\n+     */\n+    public void setRestoreState(int restore);\n+\n+    /**\n+     * @deprecated use {@link #setDetachState(DetachStateType)} instead.\n+     */\n+    public void setDetachState(int detach);\n+\n+    /**\n+     * @deprecated use {@link #setAutoClear(AutoClearType)} instead.\n+     */\n+    public void setAutoClear(int autoClear);\n+\n+    /**\n+     * @deprecated use {@link #setAutoDetach(AutoDetachType)} or\n+     * {@link #setAutoDetach(java.util.EnumSet)} instead.\n+     */\n+    public void setAutoDetach(int autoDetachFlags);\n+\n+    /**\n+     * @deprecated use {@link #setAutoDetach(AutoDetachType, boolean)} instead.\n+     */\n+    public void setAutoDetach(int flag, boolean on);\n+\n+    /**\n+     * @deprecated use {@link #isTrackChangesByType()} instead.\n+     */\n+    public boolean isLargeTransaction();\n+\n+    /**\n+     * @deprecated use {@link #setTrackChangesByType(boolean)} instead.\n+     */\n+    public void setLargeTransaction(boolean value);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void removeTransactionListener(Object listener);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public int getTransactionListenerCallbackMode();\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void setTransactionListenerCallbackMode(int callbackMode);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void addLifecycleListener(Object listener, Class... classes);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void removeLifecycleListener(Object listener);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public int getLifecycleListenerCallbackMode();\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerSPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void setLifecycleListenerCallbackMode(int callbackMode);\n+\n+    /**\n+     * @deprecated use {@link EntityTransaction#begin}\n+     * instead: <code>em.getTransaction().begin()</code>\n+     */\n+    public void begin();\n+\n+    /**\n+     * @deprecated use {@link EntityTransaction#commit}\n+     * instead: <code>em.getTransaction().commit()</code>\n+     */\n+    public void commit();\n+\n+    /**\n+     * @deprecated use {@link EntityTransaction#rollback}\n+     * instead: <code>em.getTransaction().rollback()</code>\n+     */\n+    public void rollback();\n+\n+    /**\n+     * @deprecated use {@link EntityTransaction#isActive}\n+     * instead: <code>em.getTransaction().isActive()</code>\n+     */\n+    public boolean isActive();\n+\n+    /**\n+     * @deprecated use {@link OpenJPAEntityTransaction#commitAndResume} instead:\n+     * <code>em.getTransaction().commitAndResume()</code>\n+     */\n+    public void commitAndResume();\n+\n+    /**\n+     * @deprecated use {@link OpenJPAEntityTransaction#rollbackAndResume}\n+     * instead: <code>em.getTransaction().rollbackAndResume()</code>\n+     */\n+    public void rollbackAndResume();\n+\n+    /**\n+     * @deprecated use {@link EntityTransaction#setRollbackOnly}\n+     * instead: <code>em.getTransaction().setRollbackOnly()</code>\n+     */\n+    public void setRollbackOnly();\n+\n+    /**\n+     * @deprecated use {@link OpenJPAEntityTransaction#setRollbackOnly}\n+     * instead: <code>em.getTransaction().setRollbackOnly()</code>\n+     */\n+    public void setRollbackOnly(Throwable cause);\n+\n+    /**\n+     * @deprecated use {@link OpenJPAEntityTransaction#getRollbackCause}\n+     * instead: <code>em.getTransaction().getRollbackCause()</code>\n+     */\n+    public Throwable getRollbackCause();\n+\n+    /**\n+     * @deprecated use {@link EntityTransaction#getRollbackOnly}\n+     * instead: <code>em.getTransaction().getRollbackOnly()</code>\n+     */\n+    public boolean getRollbackOnly();\n+}"},{"sha":"45238157378a69ae1034040ef8a67cd66a00289d","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Properties;\n+import javax.persistence.EntityManagerFactory;\n+\n+/**\n+ * Interface implemented by OpenJPA entity manager factories.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+public interface OpenJPAEntityManagerFactory\n+    extends EntityManagerFactory, Serializable {\n+\n+    /**\n+     * Return properties describing this runtime.\n+     */\n+    public Properties getProperties();\n+\n+    /**\n+     * Put the specified key-value pair into the map of user objects.\n+     */\n+    public Object putUserObject(Object key, Object val);\n+\n+    /**\n+     * Get the value for the specified key from the map of user objects.\n+     */\n+    public Object getUserObject(Object key);\n+\n+    /**\n+     * Access the level 2 store cache. This cache acts as a proxy to all\n+     * named caches.\n+     */\n+    public StoreCache getStoreCache();\n+\n+    /**\n+     * Access a named level 2 store cache.\n+     */\n+    public StoreCache getStoreCache(String name);\n+\n+    /**\n+     * Access query result cache.\n+     */\n+    public QueryResultCache getQueryResultCache();\n+\n+    public OpenJPAEntityManager createEntityManager();\n+\n+    /**\n+     * Return an entity manager with the provided additional configuration\n+     * settings. OpenJPA recognizes the following configuration settings in this\n+     * method:\n+     * <ul>\n+     * <li>openjpa.ConnectionUsername</li>\n+     * <li>openjpa.ConnectionPassword</li>\n+     * <li>openjpa.ConnectionRetainMode</li>\n+     * <li>openjpa.TransactionMode</li>\n+     * </ul>\n+     */\n+    public OpenJPAEntityManager createEntityManager(Map props);\n+\n+    /**\n+     * @deprecated use {@link ConnectionRetainMode} enums instead.\n+     */\n+    public static final int CONN_RETAIN_DEMAND = 0;\n+\n+    /**\n+     * @deprecated use {@link ConnectionRetainMode} enums instead.\n+     */\n+    public static final int CONN_RETAIN_TRANS = 1;\n+\n+    /**\n+     * @deprecated use {@link ConnectionRetainMode} enums instead.\n+     */\n+    public static final int CONN_RETAIN_ALWAYS = 2;\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerFactorySPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public org.apache.openjpa.conf.OpenJPAConfiguration getConfiguration();\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerFactorySPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void addLifecycleListener(Object listener, Class... classes);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerFactorySPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void removeLifecycleListener(Object listener);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerFactorySPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * @deprecated cast to {@link OpenJPAEntityManagerFactorySPI} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public void removeTransactionListener(Object listener);\n+}"},{"sha":"38b7f288af138935523abf3c546a0d38b68ed83a","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.Map;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+\r\n+public interface OpenJPAEntityManagerFactorySPI\r\n+    extends OpenJPAEntityManagerFactory {\r\n+\r\n+    /**\r\n+     * Register a listener for lifecycle-related events on the specified\r\n+     * classes. If the classes are null, all events will be propagated to\r\n+     * the listener. The listener will be passed on to all new entity\r\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n+     * listener types.\r\n+     *\r\n+     * @since 0.3.3\r\n+     */\r\n+    public void addLifecycleListener(Object listener, Class... classes);\r\n+\r\n+    /**\r\n+     * Remove a listener for lifecycle-related events.\r\n+     *\r\n+     * @since 0.3.3\r\n+     */\r\n+    public void removeLifecycleListener (Object listener);\r\n+\r\n+    /**\r\n+     * Register a listener for transaction-related events on the specified\r\n+     * classes. The listener will be passed on to all new entity\r\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n+     * listener types.\r\n+     *\r\n+     * @since 1.0.0\r\n+     */\r\n+    public void addTransactionListener(Object listener);\r\n+\r\n+    /**\r\n+     * Remove a listener for transaction-related events.\r\n+     *\r\n+     * @since 1.0.0\r\n+     */\r\n+    public void removeTransactionListener (Object listener);\r\n+\r\n+    /**\r\n+     * Return the configuration for this factory.\r\n+     */\r\n+    public OpenJPAConfiguration getConfiguration();\r\n+\r\n+    public OpenJPAEntityManagerSPI createEntityManager();\r\n+\r\n+    public OpenJPAEntityManagerSPI createEntityManager(Map props);\r\n+}\r"},{"sha":"db052acdb634285b19edfc572535ae408739e2af","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,108 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.EnumSet;\r\n+\r\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n+import org.apache.openjpa.ee.ManagedRuntime;\r\n+\r\n+public interface OpenJPAEntityManagerSPI\r\n+    extends OpenJPAEntityManager {\r\n+\r\n+    /**\r\n+     * Return the configuration associated with this entity manager.\r\n+     */\r\n+    public OpenJPAConfiguration getConfiguration();\r\n+\r\n+    /**\r\n+     * Return the managed runtime in use.\r\n+     */\r\n+    public ManagedRuntime getManagedRuntime();\r\n+\r\n+    //////////\r\n+    // Events\r\n+    //////////\r\n+\r\n+    /**\r\n+     * Register a listener for transaction-related events.\r\n+     */\r\n+    public void addTransactionListener(Object listener);\r\n+\r\n+    /**\r\n+     * Remove a listener for transaction-related events.\r\n+     */\r\n+    public void removeTransactionListener(Object listener);\r\n+\r\n+    /**\r\n+     * The {@link CallbackMode} flags for handling transaction listener\r\n+     * exceptions.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    public EnumSet<CallbackMode> getTransactionListenerCallbackModes();\r\n+\r\n+    /**\r\n+     * The {@link CallbackMode} flag for handling transaction listener\r\n+     * exceptions. The flags provided here will entirely replace the\r\n+     * previous settings.\r\n+     */\r\n+    public void setTransactionListenerCallbackMode(CallbackMode mode);\r\n+\r\n+    /**\r\n+     * The {@link CallbackMode} flags for handling transaction listener\r\n+     * exceptions. The flags provided here will entirely replace the\r\n+     * previous settings.\r\n+     */\r\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n+\r\n+    /**\r\n+     * Register a listener for lifecycle-related events on the specified\r\n+     * classes. If the classes are null, all events will be propagated to\r\n+     * the listener.\r\n+     */\r\n+    public void addLifecycleListener(Object listener, Class... classes);\r\n+\r\n+    /**\r\n+     * Remove a listener for lifecycle-related events.\r\n+     */\r\n+    public void removeLifecycleListener(Object listener);\r\n+\r\n+    /**\r\n+     * The {@link CallbackMode} flags for handling lifecycle listener\r\n+     * exceptions.\r\n+     *\r\n+     * @since 1.1.0\r\n+     */\r\n+    public EnumSet<CallbackMode> getLifecycleListenerCallbackModes();\r\n+\r\n+    /**\r\n+     * The {@link CallbackMode} flag for handling lifecycle listener\r\n+     * exceptions. The flags provided here will entirely replace the\r\n+     * previous settings.\r\n+     */\r\n+    public void setLifecycleListenerCallbackMode(CallbackMode mode);\r\n+\r\n+    /**\r\n+     * The {@link CallbackMode} flags for handling lifecycle listener\r\n+     * exceptions. The flags provided here will entirely replace the\r\n+     * previous settings.\r\n+     */\r\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n+}\r"},{"sha":"87f905b0949d6e7d27fdb57ff3b364e03ea9c259","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,71 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import javax.persistence.EntityTransaction;\r\n+\r\n+/**\r\n+ * Extension of the JPA {@link EntityTransaction} interface.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public interface OpenJPAEntityTransaction\r\n+    extends EntityTransaction {\r\n+\r\n+    /**\r\n+     * Issue a commit and then start a new transaction. This is identical to:\r\n+     * <pre> manager.commit (); manager.begin ();\r\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n+     * so this method can be safely executed from multiple threads.\r\n+     *\r\n+     * @see javax.persistence.EntityTransaction#commit()\r\n+     * @see javax.persistence.EntityTransaction#begin()\r\n+     */\r\n+    public void commitAndResume();\r\n+\r\n+    /**\r\n+     * Issue a rollback and then start a new transaction. This is identical to:\r\n+     * <pre> manager.rollback (); manager.begin ();\r\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n+     * so this method can be safely executed from multiple threads.\r\n+     *\r\n+     * @see javax.persistence.EntityTransaction#rollback()\r\n+     * @see javax.persistence.EntityTransaction#begin()\r\n+     */\r\n+    public void rollbackAndResume();\r\n+\r\n+    /**\r\n+     * Mark the current transaction for rollback with the specified cause\r\n+     * of the rollback.\r\n+     *\r\n+     * @since 0.9.7\r\n+     */\r\n+    public void setRollbackOnly(Throwable cause);\r\n+\r\n+    /**\r\n+     * Returns the Throwable that caused the transaction to be\r\n+     * marked for rollback.\r\n+     *\r\n+     * @return the Throwable, or null if none was given\r\n+     *\r\n+     * @since 0.9.7\r\n+     */\r\n+    public Throwable getRollbackCause();\r\n+}\r"},{"sha":"c511ced06b584e2794ccbe903e5b1ebb0dcb7842","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","status":"added","additions":319,"deletions":0,"changes":319,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAPersistence.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,319 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.Query;\n+import javax.rmi.PortableRemoteObject;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.Bootstrap;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ImplHelper;\n+\n+/**\n+ * Static helper methods for JPA users.\n+ *\n+ * @author Abe White\n+ * @published\n+ * @since 0.4.0\n+ */\n+public class OpenJPAPersistence {\n+\n+    private static final Localizer _loc =\n+        Localizer.forPackage(OpenJPAPersistence.class);\n+\n+    /**\n+     * Return the OpenJPA facade to the given entity manager factory.\n+     */\n+    public static OpenJPAEntityManagerFactory cast(EntityManagerFactory emf) {\n+        return (OpenJPAEntityManagerFactory) emf;\n+    }\n+\n+    /**\n+     * Return the OpenJPA facade to the given entity manager.\n+     */\n+    public static OpenJPAEntityManager cast(EntityManager em) {\n+        if (em instanceof OpenJPAEntityManager)\n+            return (OpenJPAEntityManager) em;\n+        return (OpenJPAEntityManager) em.getDelegate();\n+    }\n+\n+    /**\n+     * Return the OpenJPA facade to the given query.\n+     */\n+    public static OpenJPAQuery cast(Query q) {\n+        return (OpenJPAQuery) q;\n+    }\n+\n+    /**\n+     * Returns the {@link OpenJPAEntityManagerFactory} specified by\n+     * your OpenJPA defaults. This method will return the same logical factory\n+     * for each invocation.\n+     */\n+    public static OpenJPAEntityManagerFactory getEntityManagerFactory() {\n+        return getEntityManagerFactory(null);\n+    }\n+\n+    /**\n+     * Returns the {@link OpenJPAEntityManagerFactory} specified by\n+     * your OpenJPA defaults, using <code>map</code> as overrides. This method\n+     * will return the same logical factory for invocations with the same\n+     * overrides.\n+     */\n+    public static OpenJPAEntityManagerFactory getEntityManagerFactory(Map map) {\n+        ConfigurationProvider cp = new PersistenceProductDerivation.\n+            ConfigurationProviderImpl(map);\n+        try {\n+            return JPAFacadeHelper.toEntityManagerFactory(\n+                Bootstrap.getBrokerFactory(cp, null));\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns a new {@link OpenJPAEntityManagerFactory} specified by\n+     * <code>name</code> in an XML configuration file at the resource location\n+     * <code>resource</code>. If <code>name</code> is <code>null</code>, uses\n+     * the first resource found in the specified location, regardless of the\n+     * name specified in the XML resource or the name of the jar that the\n+     * resource is contained in. If <code>resource</code> is <code>null</code>,\n+     * uses the spec-defined <code>META-INF/persistence.xml</code> resource.\n+     *  This method only resolves {@link OpenJPAEntityManagerFactory} instances.\n+     */\n+    public static OpenJPAEntityManagerFactory createEntityManagerFactory\n+        (String name, String resource) {\n+        return createEntityManagerFactory(name, resource, null);\n+    }\n+\n+    /**\n+     * Returns a new {@link OpenJPAEntityManagerFactory} specified by\n+     * <code>name</code> in an XML configuration file at the resource location\n+     * <code>resource</code>, applying the properties specified in\n+     * <code>map</code> as overrides. If <code>name</code> is\n+     * <code>null</code>, uses the first resource found in the specified\n+     * location, regardless of the name specified in the XML resource or the\n+     * name of the jar that the resource is contained in.\n+     * If <code>resource</code> is <code>null</code>, uses the spec-defined\n+     * <code>META-INF/persistence.xml</code> resource.\n+     *  This method only resolves {@link OpenJPAEntityManagerFactory} instances.\n+     */\n+    public static OpenJPAEntityManagerFactory createEntityManagerFactory\n+        (String name, String resource, Map map) {\n+        return (OpenJPAEntityManagerFactory) new PersistenceProviderImpl().\n+            createEntityManagerFactory(name, resource, map);\n+    }\n+\n+    /**\n+     * Returns the {@link EntityManagerFactory} at the JNDI location specified\n+     * by <code>jndiLocation</code> in the context <code>context</code>. If\n+     * <code>context</code> is <code>null</code>,\n+     * <code>new InitialContext()</code> will be used.\n+     */\n+    public static OpenJPAEntityManagerFactory createEntityManagerFactory\n+        (String jndiLocation, Context context) {\n+        if (jndiLocation == null)\n+            throw new NullPointerException(\"jndiLocation == null\");\n+\n+        try {\n+            if (context == null)\n+                context = new InitialContext();\n+\n+            Object o = context.lookup(jndiLocation);\n+            return (OpenJPAEntityManagerFactory) PortableRemoteObject.narrow(o,\n+                OpenJPAEntityManagerFactory.class);\n+        } catch (NamingException ne) {\n+            throw new ArgumentException(_loc.get(\"naming-exception\",\n+                jndiLocation), new Throwable[]{ ne }, null, true);\n+        }\n+    }\n+\n+    /**\n+     * Return the entity manager for the given object, if one can be determined\n+     * from just the object alone. This method will succeed for instances that\n+     * are enhanced, that were loaded from the database (rather than\n+     * being constructed with <code>new</code>), or that were created through\n+     * {@link OpenJPAEntityManager#createInstance}.\n+     */\n+    public static OpenJPAEntityManager getEntityManager(Object o) {\n+        try {\n+            if (ImplHelper.isManageable(o)) {\n+                PersistenceCapable pc = ImplHelper.toPersistenceCapable(o, null);\n+                if (pc != null)\n+                    return JPAFacadeHelper.toEntityManager(\n+                        (Broker) pc.pcGetGenericContext());\n+            }\n+            return null;\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * Close the given resource. The resource can be an extent iterator,\n+     * query result, large result set relation, or any closeable OpenJPA\n+     * component.\n+     */\n+    public static void close(Object o) {\n+        try {\n+            ImplHelper.close(o);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns true if the specified class is an entity or embeddable type.\n+     */\n+    public static boolean isManagedType(EntityManager em, Class cls) {\n+        try {\n+            return ImplHelper.isManagedType(\n+                JPAFacadeHelper.toBroker(em).getConfiguration(), cls);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static final String EM_KEY =\n+        \"org.apache.openjpa.persistence.EntityManager\";\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static final String EMF_KEY =\n+        \"org.apache.openjpa.persistence.EntityManagerFactory\";\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static OpenJPAEntityManagerFactory toEntityManagerFactory(\n+        org.apache.openjpa.kernel.BrokerFactory factory) {\n+        return JPAFacadeHelper.toEntityManagerFactory(factory);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static org.apache.openjpa.kernel.BrokerFactory toBrokerFactory(\n+        EntityManagerFactory factory) {\n+        return JPAFacadeHelper.toBrokerFactory(factory);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static OpenJPAEntityManager toEntityManager(\n+        org.apache.openjpa.kernel.Broker broker) {\n+        return JPAFacadeHelper.toEntityManager(broker);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static Broker toBroker(EntityManager em) {\n+        return JPAFacadeHelper.toBroker(em);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static org.apache.openjpa.meta.ClassMetaData getMetaData(Object o) {\n+        return JPAFacadeHelper.getMetaData(o);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static org.apache.openjpa.meta.ClassMetaData getMetaData(\n+        EntityManager em, Class cls) {\n+        return JPAFacadeHelper.getMetaData(em, cls);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static org.apache.openjpa.meta.ClassMetaData getMetaData(\n+        EntityManagerFactory factory, Class cls) {\n+        return JPAFacadeHelper.getMetaData(factory, cls);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static Object fromOpenJPAObjectId(Object oid) {\n+        return JPAFacadeHelper.fromOpenJPAObjectId(oid);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static Object toOpenJPAObjectId(\n+        org.apache.openjpa.meta.ClassMetaData meta, Object oid) {\n+        return JPAFacadeHelper.toOpenJPAObjectId(meta, oid);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static Object[] toOpenJPAObjectIds(\n+        org.apache.openjpa.meta.ClassMetaData meta, Object... oids) {\n+        return JPAFacadeHelper.toOpenJPAObjectIds(meta, oids);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static Collection toOpenJPAObjectIds(\n+        org.apache.openjpa.meta.ClassMetaData meta, Collection oids) {\n+        return JPAFacadeHelper.toOpenJPAObjectIds(meta, oids);\n+    }\n+\n+    /**\n+     * @deprecated use {@link JPAFacadeHelper} instead. This method pierces\n+     * the published-API boundary, as does the JPAFacadeHelper utilization.\n+     */\n+    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n+        return JPAFacadeHelper.fromOpenJPAObjectIdClass(oidClass);\n+    }\n+}"},{"sha":"dee3ea8533f2e34c40b680b8a723de9e129baf0a","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","status":"added","additions":258,"deletions":0,"changes":258,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,258 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.Map;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.Query;\n+import javax.persistence.TemporalType;\n+\n+import org.apache.openjpa.kernel.QueryFlushModes;\n+import org.apache.openjpa.kernel.QueryHints;\n+import org.apache.openjpa.kernel.QueryOperations;\n+\n+/**\n+ * Interface implemented by OpenJPA queries.\n+ *\n+ * @since 0.4.0\n+ * @author Abe White\n+ * @published\n+ */\n+public interface OpenJPAQuery\n+    extends Query {\n+\n+    /**\n+     * Hint key for specifying the number of rows to optimize for.\n+     */\n+    public static final String HINT_RESULT_COUNT = QueryHints.HINT_RESULT_COUNT;\n+\n+    /**\n+     * The owning entity manager.\n+     */\n+    public OpenJPAEntityManager getEntityManager();\n+\n+    /**\n+     * Query language.\n+     */\n+    public String getLanguage();\n+\n+    /**\n+     * Query operation type.\n+     */\n+    public QueryOperationType getOperation();\n+\n+    /**\n+     * Fetch plan for controlling the loading of results.\n+     */\n+    public FetchPlan getFetchPlan();\n+\n+    /**\n+     * Query string.\n+     */\n+    public String getQueryString();\n+\n+    /**\n+     * Whether to ignore changes in the current transaction.\n+     */\n+    public boolean getIgnoreChanges();\n+\n+    /**\n+     * Whether to ignore changes in the current transaction.\n+     */\n+    public OpenJPAQuery setIgnoreChanges(boolean ignore);\n+\n+    /**\n+     * Return the candidate collection, or <code>null</code> if an\n+     * extent was specified instead of a collection.\n+     */\n+    public Collection getCandidateCollection();\n+\n+    /**\n+     * Set a collection of candidates.\n+     */\n+    public OpenJPAQuery setCandidateCollection(Collection coll);\n+\n+    /**\n+     * Query result element type.\n+     */\n+    public Class getResultClass();\n+\n+    /**\n+     * Query result element type.\n+     */\n+    public OpenJPAQuery setResultClass(Class type);\n+\n+    /**\n+     * Whether subclasses are included in the query results.\n+     */\n+    public boolean hasSubclasses();\n+\n+    /**\n+     * Whether subclasses are included in the query results.\n+     */\n+    public OpenJPAQuery setSubclasses(boolean subs);\n+\n+    /**\n+     * Return the 0-based start index for the returned results.\n+     */\n+    public int getFirstResult();\n+\n+    /**\n+     * Return the maximum number of results to retrieve.\n+     * or {@link Integer#MAX_VALUE} for no limit.\n+     */\n+    public int getMaxResults();\n+\n+    /**\n+     * Compile the query.\n+     */\n+    public OpenJPAQuery compile();\n+\n+    /**\n+     * Whether this query has positional parameters.\n+     */\n+    public boolean hasPositionalParameters();\n+\n+    /**\n+     * The positional parameters for the query; empty array if none or\n+     * if query uses named parameters.\n+     */\n+    public Object[] getPositionalParameters();\n+\n+    /**\n+     * The named parameters for the query; empty map if none or\n+     * if query uses positional parameters.\n+     */\n+    public Map getNamedParameters();\n+\n+    /**\n+     * Set parameters.\n+     */\n+    public OpenJPAQuery setParameters(Map params);\n+\n+    /**\n+     * Set parameters.\n+     */\n+    public OpenJPAQuery setParameters(Object... params);\n+\n+    /**\n+     * Close all open query results.\n+     */\n+    public OpenJPAQuery closeAll();\n+\n+    /**\n+     * Returns a description of the commands that will be sent to\n+     * the datastore in order to execute this query. This will\n+     * typically be in the native query language of the database (e.g., SQL).\n+     *\n+     * @param params the named parameter map for the query invocation\n+     */\n+    public String[] getDataStoreActions(Map params);\n+\n+    public OpenJPAQuery setMaxResults(int maxResult);\n+\n+    public OpenJPAQuery setFirstResult(int startPosition);\n+\n+    public OpenJPAQuery setHint(String hintName, Object value);\n+\n+    public OpenJPAQuery setParameter(String name, Object value);\n+\n+    public OpenJPAQuery setParameter(String name, Date value,\n+        TemporalType temporalType);\n+\n+    public OpenJPAQuery setParameter(String name, Calendar value,\n+        TemporalType temporalType);\n+\n+    public OpenJPAQuery setParameter(int position, Object value);\n+\n+    public OpenJPAQuery setParameter(int position, Date value,\n+        TemporalType temporalType);\n+\n+    public OpenJPAQuery setParameter(int position, Calendar value,\n+        TemporalType temporalType);\n+\n+    public OpenJPAQuery setFlushMode(FlushModeType flushMode);\n+\n+    /**\n+     * Return the current flush mode.\n+\t */\n+\tpublic FlushModeType getFlushMode ();\n+\n+    /**\n+     * @deprecated use the {@link QueryOperationType} instead.\n+     */\n+    public static final int OP_SELECT = QueryOperations.OP_SELECT;\n+\n+    /**\n+     * @deprecated use the {@link QueryOperationType} instead.\n+     */\n+    public static final int OP_DELETE = QueryOperations.OP_DELETE;\n+\n+    /**\n+     * @deprecated use the {@link QueryOperationType} instead.\n+     */\n+    public static final int OP_UPDATE = QueryOperations.OP_DELETE;\n+\n+    /**\n+     * @deprecated use the {@link FlushModeType} enum instead.\n+     */\n+    public static final int FLUSH_TRUE = QueryFlushModes.FLUSH_TRUE;\n+\n+    /**\n+     * @deprecated use the {@link FlushModeType} enum instead.\n+     */\n+    public static final int FLUSH_FALSE = QueryFlushModes.FLUSH_FALSE;\n+\n+    /**\n+     * @deprecated use the {@link FlushModeType} enum instead.\n+     */\n+    public static final int FLUSH_WITH_CONNECTION =\n+        QueryFlushModes.FLUSH_WITH_CONNECTION;\n+\n+    /**\n+     * @deprecated cast to {@link QueryImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public OpenJPAQuery addFilterListener(\n+        org.apache.openjpa.kernel.exps.FilterListener listener);\n+\n+    /**\n+     * @deprecated cast to {@link QueryImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public OpenJPAQuery removeFilterListener(\n+        org.apache.openjpa.kernel.exps.FilterListener listener);\n+\n+    /**\n+     * @deprecated cast to {@link QueryImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public OpenJPAQuery addAggregateListener(\n+        org.apache.openjpa.kernel.exps.AggregateListener listener);\n+\n+    /**\n+     * @deprecated cast to {@link QueryImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public OpenJPAQuery removeAggregateListener(\n+        org.apache.openjpa.kernel.exps.AggregateListener listener);\n+}"},{"sha":"997259def9ce821e69d0ffaa1e69048b537d85c9","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,46 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.exps.FilterListener;\r\n+import org.apache.openjpa.kernel.exps.AggregateListener;\r\n+\r\n+public interface OpenJPAQuerySPI\r\n+    extends OpenJPAQuery {\r\n+\r\n+    /**\r\n+     * Register a filter listener for the query.\r\n+     */\r\n+    public OpenJPAQuery addFilterListener(FilterListener listener);\r\n+\r\n+    /**\r\n+     * Remove a filter listener from the query.\r\n+     */\r\n+    public OpenJPAQuery removeFilterListener(FilterListener listener);\r\n+\r\n+    /**\r\n+     * Register an aggregate listener for the query.\r\n+     */\r\n+    public OpenJPAQuery addAggregateListener(AggregateListener listener);\r\n+\r\n+    /**\r\n+     * Remove an aggregate listener from the query.\r\n+     */\r\n+    public OpenJPAQuery removeAggregateListener(AggregateListener listener);\r\n+}\r"},{"sha":"3653512b20cd1e38e2ebbd4ba89ba2aa7f1ae42c","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OptimisticLockException.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OptimisticLockException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OptimisticLockException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OptimisticLockException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.StoreException;\n+\n+/**\n+ * Optimistic concurrency violation.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class OptimisticLockException\n+    extends javax.persistence.OptimisticLockException\n+    implements Serializable, ExceptionInfo {\n+\n+    private transient boolean _fatal = false;\n+    private transient Object _failed = null;\n+    private transient Throwable[] _nested = null;\n+\n+    public OptimisticLockException(String msg, Throwable[] nested,\n+        Object failed, boolean fatal) {\n+        super(msg);\n+        _nested = nested;\n+        _failed = failed;\n+        _fatal = fatal;\n+    }\n+\n+    public int getType() {\n+        return STORE;\n+    }\n+\n+    public int getSubtype() {\n+        return StoreException.OPTIMISTIC;\n+    }\n+\n+    public boolean isFatal() {\n+        return _fatal;\n+    }\n+\n+    public Throwable getCause() {\n+        return PersistenceExceptions.getCause(_nested);\n+    }\n+\n+    public Throwable[] getNestedThrowables() {\n+        return (_nested == null) ? Exceptions.EMPTY_THROWABLES : _nested;\n+    }\n+\n+    public Object getFailedObject() {\n+        return _failed;\n+    }\n+\n+    public String toString() {\n+        return Exceptions.toString(this);\n+    }\n+\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.writeBoolean(_fatal);\n+        out.writeObject(Exceptions.replaceFailedObject(_failed));\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _fatal = in.readBoolean();\n+        _failed = in.readObject();\n+        _nested = (Throwable[]) in.readObject();\n+    }\n+}\n+"},{"sha":"d4fb45531e07feb22da7af49db6d497887b8f2b0","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceException.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.Exceptions;\n+\n+/**\n+ * General persistence exception.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class PersistenceException\n+    extends javax.persistence.PersistenceException\n+    implements Serializable, ExceptionInfo {\n+\n+    private transient boolean _fatal = false;\n+    private transient Object _failed = null;\n+    private transient Throwable[] _nested = null;\n+\n+    public PersistenceException(String msg, Throwable[] nested,\n+        Object failed, boolean fatal) {\n+        super(msg);\n+        _nested = nested;\n+        _failed = failed;\n+        _fatal = fatal;\n+    }\n+\n+    public int getType() {\n+        return GENERAL;\n+    }\n+\n+    public int getSubtype() {\n+        return 0;\n+    }\n+\n+    public boolean isFatal() {\n+        return _fatal;\n+    }\n+\n+    public Throwable getCause() {\n+        return PersistenceExceptions.getCause(_nested);\n+    }\n+\n+    public Throwable[] getNestedThrowables() {\n+        return (_nested == null) ? Exceptions.EMPTY_THROWABLES : _nested;\n+    }\n+\n+    public Object getFailedObject() {\n+        return _failed;\n+    }\n+\n+    public String toString() {\n+        return Exceptions.toString(this);\n+    }\n+\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.writeBoolean(_fatal);\n+        out.writeObject(Exceptions.replaceFailedObject(_failed));\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _fatal = in.readBoolean();\n+        _failed = in.readObject();\n+        _nested = (Throwable[]) in.readObject();\n+    }\n+}\n+"},{"sha":"ecd046c8a3c36739b60e0492e4b6ebaaae306bf5","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","status":"added","additions":306,"deletions":0,"changes":306,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceExceptions.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,306 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.NoTransactionException;\n+import org.apache.openjpa.util.ObjectExistsException;\n+import org.apache.openjpa.util.ObjectNotFoundException;\n+import org.apache.openjpa.util.OpenJPAException;\n+import org.apache.openjpa.util.OptimisticException;\n+import org.apache.openjpa.util.RuntimeExceptionTranslator;\n+import org.apache.openjpa.util.StoreException;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Converts from OpenJPA to persistence exception types.\n+ *\n+ * @author Abe White\n+ * @author Marc Prud'hommeaux\n+ * @nojavadoc\n+ */\n+public class PersistenceExceptions\n+    extends Exceptions {\n+\n+    public static final RuntimeExceptionTranslator TRANSLATOR =\n+        new RuntimeExceptionTranslator() {\n+            public RuntimeException translate(RuntimeException re) {\n+                return PersistenceExceptions.toPersistenceException(re);\n+            }\n+        };\n+\n+    /**\n+     * Returns a {@link RuntimeExceptionTranslator} that will perform\n+     * the correct exception translation as well as roll back the\n+     * current transaction when for all but {@link NoResultException}\n+     * and {@link NonUniqueResultException} in accordance with\n+     * section 3.7 of the EJB 3.0 specification.\n+     */\n+    public static RuntimeExceptionTranslator getRollbackTranslator(\n+        final OpenJPAEntityManager em) {\n+        return new RuntimeExceptionTranslator() {\n+            private boolean throwing = false;\n+\n+            public RuntimeException translate(RuntimeException re) {\n+                RuntimeException ex = toPersistenceException(re);\n+                if (!(ex instanceof NonUniqueResultException)\n+                    && !(ex instanceof NoResultException)\n+                    && !throwing) {\n+                    try {\n+                        throwing = true;\n+                        if (em.isOpen() && ((EntityManagerImpl) em).isActive())\n+                            ((EntityManagerImpl) em).setRollbackOnly(ex);\n+                    } finally {\n+                        // handle re-entrancy\n+                        throwing = false;\n+                    }\n+                }\n+\n+                return ex;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Convert the given throwable to the proper persistence exception.\n+     */\n+    public static RuntimeException toPersistenceException(Throwable t) {\n+        return (RuntimeException) translateException(t, true);\n+    }\n+\n+    /**\n+     * Translate the given exception.\n+     *\n+     * @param checked whether to translate checked exceptions\n+     */\n+    private static Throwable translateException(Throwable t, boolean checked) {\n+        if (isPersistenceException(t))\n+            return t;\n+\n+        // immediately throw errors\n+        if (t instanceof Error)\n+            throw (Error) t;\n+\n+        OpenJPAException ke;\n+        if (!(t instanceof OpenJPAException)) {\n+            if (!checked || t instanceof RuntimeException)\n+                return t;\n+            ke = new org.apache.openjpa.util.GeneralException(t.getMessage());\n+            ke.setStackTrace(t.getStackTrace());\n+            return ke;\n+        }\n+\n+        // if only nested exception is a persistence one, return it directly\n+        ke = (OpenJPAException) t;\n+        if (ke.getNestedThrowables().length == 1\n+            && isPersistenceException(ke.getCause()))\n+            return ke.getCause();\n+\n+        // RuntimeExceptions thrown from callbacks should be thrown directly\n+        if (ke.getType() == OpenJPAException.USER\n+            && ke.getSubtype() == UserException.CALLBACK\n+            && ke.getNestedThrowables().length == 1) {\n+            Throwable e = ke.getCause();\n+            if (e instanceof InvocationTargetException)\n+                e = e.getCause();\n+\n+            if (e instanceof RuntimeException)\n+                return e;\n+        }\n+\n+        // perform intelligent translation of openjpa exceptions\n+        switch (ke.getType()) {\n+            case OpenJPAException.STORE:\n+                return translateStoreException(ke);\n+            case OpenJPAException.USER:\n+                return translateUserException(ke);\n+            default:\n+                return translateGeneralException(ke);\n+        }\n+    }\n+\n+    /**\n+     * Translate the given store exception.\n+     */\n+    private static Throwable translateStoreException(OpenJPAException ke) {\n+        Exception e;\n+        Throwable cause = (ke.getNestedThrowables() != null \n+                        && ke.getNestedThrowables().length == 1)\n+                         ? ke.getNestedThrowables()[0] : null;\n+        if (ke.getSubtype() == StoreException.OBJECT_NOT_FOUND \n+         || cause instanceof ObjectNotFoundException) {\n+                e = new org.apache.openjpa.persistence.EntityNotFoundException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+        } else if (ke.getSubtype() == StoreException.OPTIMISTIC \n+        \t\t|| ke.getSubtype() == StoreException.LOCK\n+        \t\t|| cause instanceof OptimisticException) {\n+            \te = new org.apache.openjpa.persistence.OptimisticLockException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+        } else if (ke.getSubtype() == StoreException.OBJECT_EXISTS\n+        \t\t|| cause instanceof ObjectExistsException) {\n+                e = new org.apache.openjpa.persistence.EntityExistsException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+        } else {\n+                e = new org.apache.openjpa.persistence.PersistenceException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+        }\n+        e.setStackTrace(ke.getStackTrace());\n+        return e;\n+    }\n+\n+    /**\n+     * Translate the given user exception.\n+     * If a {link {@link OpenJPAException#getSubtype() sub type} is set on the \n+     * given exception then a corresponding facade-level exception i.e. the\n+     * exceptions that inherit JPA-defined exceptions is generated.\n+     * If given exception is not further classified to a sub type, then \n+     * an [@link {@link #translateInternalException(OpenJPAException)} attempt}\n+     * is made to translate the given OpenJPAException by its internal cause.\n+     */\n+    private static Exception translateUserException(OpenJPAException ke) {\n+        Exception e;\n+        switch (ke.getSubtype()) {\n+            case UserException.NO_TRANSACTION:\n+                e = new \n+                    org.apache.openjpa.persistence.TransactionRequiredException\n+                        (ke.getMessage(), getNestedThrowables(ke),\n+                            getFailedObject(ke), ke.isFatal());\n+                break;\n+            case UserException.NO_RESULT:\n+                e = new org.apache.openjpa.persistence.NoResultException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+                break;\n+            case UserException.NON_UNIQUE_RESULT:\n+                e = new org.apache.openjpa.persistence.NonUniqueResultException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+                break;\n+            case UserException.INVALID_STATE:\n+                e = new org.apache.openjpa.persistence.InvalidStateException\n+                    (ke.getMessage(), getNestedThrowables(ke),\n+                        getFailedObject(ke), ke.isFatal());\n+                break;\n+            default:\n+            \te = translateCause(ke);\n+        }\n+        e.setStackTrace(ke.getStackTrace());\n+        return e;\n+    }\n+    \n+    /**\n+     * Translate to a facade-level exception if the given exception \n+     *     a) has a cause i.e. one and only nested Throwable \n+     * and b) that cause is one of the known internal exception which has a \n+     *        direct facade-level counterpart \n+     *        (for example, ObjectNotFoundException can be translated to \n+     *         EntityNotFoundException). \n+     * If the above conditions are not met then return generic ArgumentException.\n+     * \n+     * In either case, preserve all the details.\n+     */\n+    private static Exception translateCause(OpenJPAException ke) {\n+    \tThrowable cause = ke.getCause();\n+    \tif (cause instanceof ObjectNotFoundException) {\n+    \t\treturn new EntityNotFoundException(\n+    \t\t        ke.getMessage(), getNestedThrowables(ke),\n+            \t    getFailedObject(ke), ke.isFatal());\n+    \t} else if (cause instanceof ObjectExistsException) {\n+    \t\treturn new EntityExistsException(\n+    \t\t        ke.getMessage(), getNestedThrowables(ke),\n+            \t    getFailedObject(ke), ke.isFatal());\n+    \t} else if (cause instanceof NoTransactionException) {\n+    \t\treturn new TransactionRequiredException(\n+        \t\t    ke.getMessage(), getNestedThrowables(ke),\n+                \tgetFailedObject(ke), ke.isFatal());\n+    \t} else if (cause instanceof OptimisticException) {\n+    \t\treturn new OptimisticLockException(\n+        \t\t    ke.getMessage(), getNestedThrowables(ke),\n+                \tgetFailedObject(ke), ke.isFatal());\n+    \t} else {\n+    \t\treturn new org.apache.openjpa.persistence.ArgumentException(\n+        \t\tke.getMessage(), getNestedThrowables(ke),\n+        \t\tgetFailedObject(ke), ke.isFatal());\n+    \t}\n+    }\n+\n+    /**\n+     * Translate the given general exception.\n+     */\n+    private static Throwable translateGeneralException(OpenJPAException ke) {\n+        Exception e = new org.apache.openjpa.persistence.PersistenceException\n+            (ke.getMessage(), getNestedThrowables(ke),\n+                getFailedObject(ke), ke.isFatal());\n+        e.setStackTrace(ke.getStackTrace());\n+        return e;\n+    }\n+\n+    /**\n+     * Return true if the given exception is a persistence exception.\n+     */\n+    private static boolean isPersistenceException(Throwable t) {\n+        return t.getClass().getName()\n+            .startsWith(\"org.apache.openjpa.persistence.\");\n+    }\n+\n+    /**\n+     * Translate the nested throwables of the given openjpa exception into\n+     * nested throwables for a persistence exception.\n+     */\n+    private static Throwable[] getNestedThrowables(OpenJPAException ke) {\n+        Throwable[] nested = ke.getNestedThrowables();\n+        if (nested.length == 0)\n+            return nested;\n+\n+        Throwable[] trans = new Throwable[nested.length];\n+        for (int i = 0; i < nested.length; i++)\n+            trans[i] = translateException(nested[i], false);\n+        return trans;\n+    }\n+\n+    /**\n+     * Return the failed object for the given exception, performing any\n+     * necessary conversions.\n+     */\n+    private static Object getFailedObject(OpenJPAException ke) {\n+        Object o = ke.getFailedObject();\n+        if (o == null)\n+            return null;\n+        if (o instanceof Broker)\n+            return JPAFacadeHelper.toEntityManager((Broker) o);\n+        return JPAFacadeHelper.fromOpenJPAObjectId(o);\n+    }\n+\n+    /**\n+     * Helper method to extract a nested exception from an internal nested\n+     * array in a safe way.\n+     */\n+    static Throwable getCause(Throwable[] nested) {\n+        if (nested == null || nested.length == 0)\n+            return null;\n+\t\treturn nested[0];\n+\t}\n+}"},{"sha":"ffeeb93c27ebfe8dcc540ae012b9aacb65d4688b","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceListenerAdapter.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.event.DeleteListener;\n+import org.apache.openjpa.event.LifecycleCallbacks;\n+import org.apache.openjpa.event.LifecycleEvent;\n+import org.apache.openjpa.event.LifecycleEventManager;\n+import org.apache.openjpa.event.LoadListener;\n+import org.apache.openjpa.event.PersistListener;\n+import org.apache.openjpa.event.PostPersistListener;\n+import org.apache.openjpa.event.UpdateListener;\n+import org.apache.openjpa.event.PostDeleteListener;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.CallbackException;\n+\n+class PersistenceListenerAdapter\n+    implements LifecycleEventManager.ListenerAdapter, PersistListener,\n+    PostPersistListener, LoadListener, UpdateListener, DeleteListener,\n+    PostDeleteListener {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (PersistenceListenerAdapter.class);\n+\n+    private final LifecycleCallbacks[][] _callbacks;\n+\n+    public PersistenceListenerAdapter(LifecycleCallbacks[][] callbacks) {\n+        _callbacks = callbacks;\n+    }\n+\n+    public PersistenceListenerAdapter(Collection<LifecycleCallbacks>[] calls) {\n+        _callbacks = new LifecycleCallbacks[LifecycleEvent.ALL_EVENTS.length][];\n+        for (int i = 0; i < LifecycleEvent.ALL_EVENTS.length; i++) {\n+            if (calls[i] == null)\n+                continue;\n+            _callbacks[i] = calls[i].toArray\n+                (new LifecycleCallbacks[calls[i].size()]);\n+        }\n+    }\n+\n+    public boolean respondsTo(int eventType) {\n+        return _callbacks[eventType] != null;\n+    }\n+\n+    private void makeCallback(LifecycleEvent ev) {\n+        int eventType = ev.getType();\n+        if (_callbacks[eventType] == null)\n+            return;\n+        Object src = ev.getSource();\n+        for (LifecycleCallbacks callback : _callbacks[eventType]) {\n+            try {\n+                callback.makeCallback(src, ev.getRelated(), eventType);\n+            } catch (Throwable t) {\n+                if (t instanceof InvocationTargetException)\n+                    t = t.getCause();\n+                if (t instanceof RuntimeException)\n+                    throw (RuntimeException) t;\n+\n+                throw new CallbackException(_loc.get(\"system-listener-err\",\n+                    src)).setCause(t).setFatal(true);\n+            }\n+        }\n+    }\n+\n+    public void beforePersist(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+\n+    public void afterPersist(LifecycleEvent event) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void afterPersistPerformed(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+\n+    public void afterLoad(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+\n+    public void afterRefresh(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+\n+    public void beforeUpdate(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+\n+    public void afterUpdatePerformed(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+\n+    public void beforeDelete(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+\n+    public void afterDelete(LifecycleEvent event) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void afterDeletePerformed(LifecycleEvent event) {\n+        makeCallback(event);\n+    }\n+}"},{"sha":"dbbc4bb7fa6355e9bff9c6b698238335bafdc831","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","status":"added","additions":356,"deletions":0,"changes":356,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataDefaults.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,356 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.Serializable;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.security.AccessController;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.List;\n+import java.util.ArrayList;\n+import javax.persistence.Basic;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Embedded;\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.PostLoad;\n+import javax.persistence.PostPersist;\n+import javax.persistence.PostRemove;\n+import javax.persistence.PostUpdate;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreRemove;\n+import javax.persistence.PreUpdate;\n+import javax.persistence.Transient;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.meta.AbstractMetaDataDefaults;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.ValueMetaData;\n+import static org.apache.openjpa.persistence.PersistenceStrategy.*;\n+import org.apache.openjpa.util.MetaDataException;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+\n+/**\n+ * JPA-based metadata defaults.\n+ *\n+ * @author Patrick Linskey\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class PersistenceMetaDataDefaults\n+    extends AbstractMetaDataDefaults {\n+\n+    private boolean _allowsMultipleMethodsForSameCallback = false;\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (PersistenceMetaDataDefaults.class);\n+\n+    private static final Map<Class, PersistenceStrategy> _strats =\n+        new HashMap<Class, PersistenceStrategy>();\n+    private static final Set<String> _ignoredAnnos = new HashSet<String>();\n+\n+    static {\n+        _strats.put(Basic.class, BASIC);\n+        _strats.put(ManyToOne.class, MANY_ONE);\n+        _strats.put(OneToOne.class, ONE_ONE);\n+        _strats.put(Embedded.class, EMBEDDED);\n+        _strats.put(EmbeddedId.class, EMBEDDED);\n+        _strats.put(OneToMany.class, ONE_MANY);\n+        _strats.put(ManyToMany.class, MANY_MANY);\n+        _strats.put(Persistent.class, PERS);\n+        _strats.put(PersistentCollection.class, PERS_COLL);\n+        _strats.put(PersistentMap.class, PERS_MAP);\n+\n+        _ignoredAnnos.add(DetachedState.class.getName());\n+        _ignoredAnnos.add(PostLoad.class.getName());\n+        _ignoredAnnos.add(PostPersist.class.getName());\n+        _ignoredAnnos.add(PostRemove.class.getName());\n+        _ignoredAnnos.add(PostUpdate.class.getName());\n+        _ignoredAnnos.add(PrePersist.class.getName());\n+        _ignoredAnnos.add(PreRemove.class.getName());\n+        _ignoredAnnos.add(PreUpdate.class.getName());\n+    }\n+\n+    public PersistenceMetaDataDefaults() {\n+        setCallbackMode(CALLBACK_RETHROW | CALLBACK_ROLLBACK |\n+            CALLBACK_FAIL_FAST);\n+        setDataStoreObjectIdFieldUnwrapped(true);\n+    }\n+\n+    /**\n+     * Return the code for the strategy of the given member. Return null if\n+     * no strategy.\n+     */\n+    public static PersistenceStrategy getPersistenceStrategy\n+        (FieldMetaData fmd, Member member) {\n+        if (member == null)\n+            return null;\n+        AnnotatedElement el = (AnnotatedElement) member;\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+            .isAnnotationPresentAction(el, Transient.class))).booleanValue())\n+            return TRANSIENT;\n+        if (fmd != null\n+            && fmd.getManagement() != FieldMetaData.MANAGE_PERSISTENT)\n+            return null;\n+\n+        // look for persistence strategy in annotation table\n+        PersistenceStrategy pstrat = null;\n+        for (Annotation anno : el.getDeclaredAnnotations()) {\n+            if (pstrat != null && _strats.containsKey(anno.annotationType()))\n+                throw new MetaDataException(_loc.get(\"already-pers\", member));\n+            if (pstrat == null)\n+                pstrat = _strats.get(anno.annotationType());\n+        }\n+        if (pstrat != null)\n+            return pstrat;\n+\n+        Class type;\n+        int code;\n+        if (fmd != null) {\n+            type = fmd.getType();\n+            code = fmd.getTypeCode();\n+        } else if (member instanceof Field) {\n+            type = ((Field) member).getType();\n+            code = JavaTypes.getTypeCode(type);\n+        } else {\n+            type = ((Method) member).getReturnType();\n+            code = JavaTypes.getTypeCode(type);\n+        }\n+\n+        switch (code) {\n+            case JavaTypes.ARRAY:\n+                if (type == byte[].class\n+                    || type == char[].class\n+                    || type == Byte[].class\n+                    || type == Character[].class)\n+                    return BASIC;\n+                break;\n+            case JavaTypes.BOOLEAN:\n+            case JavaTypes.BOOLEAN_OBJ:\n+            case JavaTypes.BYTE:\n+            case JavaTypes.BYTE_OBJ:\n+            case JavaTypes.CHAR:\n+            case JavaTypes.CHAR_OBJ:\n+            case JavaTypes.DOUBLE:\n+            case JavaTypes.DOUBLE_OBJ:\n+            case JavaTypes.FLOAT:\n+            case JavaTypes.FLOAT_OBJ:\n+            case JavaTypes.INT:\n+            case JavaTypes.INT_OBJ:\n+            case JavaTypes.LONG:\n+            case JavaTypes.LONG_OBJ:\n+            case JavaTypes.SHORT:\n+            case JavaTypes.SHORT_OBJ:\n+            case JavaTypes.STRING:\n+            case JavaTypes.BIGDECIMAL:\n+            case JavaTypes.BIGINTEGER:\n+            case JavaTypes.DATE:\n+                return BASIC;\n+            case JavaTypes.OBJECT:\n+                if (Enum.class.isAssignableFrom(type))\n+                    return BASIC;\n+                break;\n+        }\n+\n+        //### EJB3: what if defined in XML?\n+        if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+            .isAnnotationPresentAction(type, Embeddable.class))).booleanValue())\n+            return EMBEDDED;\n+        if (Serializable.class.isAssignableFrom(type))\n+            return BASIC;\n+        return null;\n+    }\n+    \n+    /** \n+     * Flags if multiple methods of the same class can handle the same \n+     * callback event.\n+     */\n+    public boolean getAllowsMultipleMethodsForSameCallback() {\n+        return _allowsMultipleMethodsForSameCallback;\n+    }\n+    \n+    /** \n+     * Flags if multiple methods of the same class can handle the same \n+     * callback event.\n+     */\n+    public void setAllowsMultipleMethodsForSameCallback(boolean flag) {\n+        _allowsMultipleMethodsForSameCallback = flag;\n+    }\n+\n+    /**\n+     * Auto-configuration method for the default access type of base classes \n+     * with ACCESS_UNKNOWN\n+     */\n+    public void setDefaultAccessType(String type) {\n+        if (type == null)\n+            return;\n+        if (\"PROPERTY\".equals(type.toUpperCase()))\n+            setDefaultAccessType(ClassMetaData.ACCESS_PROPERTY);\n+        else\n+            setDefaultAccessType(ClassMetaData.ACCESS_FIELD);\n+    }\n+\n+    @Override\n+    public void populate(ClassMetaData meta, int access) {\n+        super.populate(meta, access);\n+        meta.setDetachable(true);\n+        // do not call get*Fields as it will lock down the fields.\n+    }\n+\n+    @Override\n+    protected void populate(FieldMetaData fmd) {\n+        setCascadeNone(fmd);\n+        setCascadeNone(fmd.getKey());\n+        setCascadeNone(fmd.getElement());\n+    }\n+\n+    /**\n+     * Turns off auto cascading of persist, refresh, attach.\n+     */\n+    static void setCascadeNone(ValueMetaData vmd) {\n+        vmd.setCascadePersist(ValueMetaData.CASCADE_NONE);\n+        vmd.setCascadeRefresh(ValueMetaData.CASCADE_NONE);\n+        vmd.setCascadeAttach(ValueMetaData.CASCADE_NONE);\n+    }\n+\n+    @Override\n+    protected int getAccessType(ClassMetaData meta) {\n+        return getAccessType(meta.getDescribedType());\n+    }\n+\n+    /**\n+     * Recursive helper to determine access type based on annotation placement.\n+     */\n+    private int getAccessType(Class cls) {\n+        // traversed entire hierarchy without finding annotations\n+        if (cls == null || cls == Object.class)\n+            return ClassMetaData.ACCESS_UNKNOWN;\n+\n+        int access = 0;\n+        if (annotated((Field[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredFieldsAction(cls))).size() > 0)\n+            access |= ClassMetaData.ACCESS_FIELD;\n+        if (annotated((Method[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredMethodsAction(cls))).size() > 0\n+            || cls.isInterface()) // OpenJPA managed ifaces must use prop access\n+            access |= ClassMetaData.ACCESS_PROPERTY;\n+        return getAccessType(cls.getSuperclass()) | access;\n+    }\n+\n+    @Override\n+    protected List getFieldAccessNames(ClassMetaData meta) {\n+        return annotated((Field[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredFieldsAction(meta.getDescribedType())));\n+    }\n+\n+    @Override\n+    protected List getPropertyAccessNames(ClassMetaData meta) {\n+        return annotated((Method[]) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getDeclaredMethodsAction(meta.getDescribedType())));\n+    }\n+\n+    /**\n+     * Return the members of <code>members</code> that have persistence\n+     * annotations.\n+     */\n+    private static List annotated(AnnotatedElement[] members) {\n+        Annotation[] annos;\n+        String name;\n+        List annotated = new ArrayList(members.length);\n+        for (int i = 0; i < members.length; i++) {\n+            annos = (Annotation[]) AccessController.doPrivileged(J2DoPriv5Helper\n+                .getAnnotationsAction(members[i]));\n+            for (int j = 0; j < annos.length; j++) {\n+                name = annos[j].annotationType().getName();\n+                if ((name.startsWith(\"javax.persistence.\")\n+                    || name.startsWith(\"org.apache.openjpa.persistence.\"))\n+                    && !_ignoredAnnos.contains(name))\n+                    annotated.add(members[i]);\n+            }\n+        }\n+        return annotated;\n+    }\n+\n+    protected boolean isDefaultPersistent(ClassMetaData meta, Member member,\n+        String name) {\n+        int mods = member.getModifiers();\n+        if (Modifier.isTransient(mods))\n+            return false;\n+\n+        if (member instanceof Method) {\n+            try {\n+                // check for setters for methods\n+                Method setter = (Method) AccessController.doPrivileged(\n+                    J2DoPriv5Helper.getDeclaredMethodAction(\n+                        meta.getDescribedType(), \"set\" +\n+                        StringUtils.capitalize(name), new Class[] { \n+                            ((Method) member).getReturnType() }));\n+                if (setter == null && !isAnnotatedTransient(member)) {\n+                    logNoSetter(meta, name, null);\n+                    return false;\n+                }\n+            } catch (Exception e) {\n+                // e.g., NoSuchMethodException\n+                if (!isAnnotatedTransient(member))\n+                    logNoSetter(meta, name, e);\n+                return false;\n+            }\n+        }\n+\n+        PersistenceStrategy strat = getPersistenceStrategy(null, member);\n+        if (strat == null || strat == PersistenceStrategy.TRANSIENT)\n+            return false;\n+        return true;\n+\t}\n+\n+    private boolean isAnnotatedTransient(Member member) {\n+        return member instanceof AnnotatedElement\n+            && ((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(((AnnotatedElement) member),\n+                    Transient.class))).booleanValue();\n+    }\n+\n+    private void logNoSetter(ClassMetaData meta, String name, Exception e) {\n+        Log log = meta.getRepository().getConfiguration()\n+            .getLog(OpenJPAConfiguration.LOG_METADATA);\n+        if (log.isWarnEnabled())\n+            log.warn(_loc.get(\"no-setter-for-getter\", name,\n+                meta.getDescribedType().getName()));\n+        else if (log.isTraceEnabled())\n+            // log the exception, if any, if we're in trace-level debugging\n+            log.warn(_loc.get(\"no-setter-for-getter\", name,\n+                meta.getDescribedType().getName()), e);\n+    }\n+}"},{"sha":"c2325704097299ec0e819926b3be7e4035bb4a8d","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","status":"added","additions":525,"deletions":0,"changes":525,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceMetaDataFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,525 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.persistence.Embeddable;\n+import javax.persistence.Entity;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.NamedNativeQueries;\n+import javax.persistence.NamedNativeQuery;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.SqlResultSetMapping;\n+import javax.persistence.SqlResultSetMappings;\n+\n+import org.apache.openjpa.lib.conf.Configurable;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.GenericConfigurable;\n+import org.apache.openjpa.lib.meta.ClassAnnotationMetaDataFilter;\n+import org.apache.openjpa.lib.meta.ClassArgParser;\n+import org.apache.openjpa.lib.meta.MetaDataFilter;\n+import org.apache.openjpa.lib.meta.MetaDataParser;\n+import org.apache.openjpa.lib.util.J2DoPriv5Helper;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.meta.AbstractCFMetaDataFactory;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.MetaDataDefaults;\n+import org.apache.openjpa.meta.MetaDataFactory;\n+import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.util.GeneralException;\n+import org.apache.openjpa.util.MetaDataException;\n+\n+/**\n+ * {@link MetaDataFactory} for JPA metadata.\n+ *\n+ * @author Steve Kim\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class PersistenceMetaDataFactory\n+    extends AbstractCFMetaDataFactory\n+    implements Configurable, GenericConfigurable {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (PersistenceMetaDataFactory.class);\n+\n+    private final PersistenceMetaDataDefaults _def = \n+        new PersistenceMetaDataDefaults();\n+    private AnnotationPersistenceMetaDataParser _annoParser = null;\n+    private AnnotationPersistenceXMLMetaDataParser _annoXMLParser = null;\n+    private XMLPersistenceMetaDataParser _xmlParser = null;\n+    private Map<URL, Set> _xml = null; // xml rsrc -> class names\n+    private Set<URL> _unparsed = null; // xml rsrc\n+    private boolean _fieldOverride = true;\n+\n+    /**\n+     * Whether to use field-level override or class-level override.\n+     * Defaults to true.\n+     */\n+    public void setFieldOverride(boolean field) {\n+        _fieldOverride = field;\n+    }\n+\n+    /**\n+     * Whether to use field-level override or class-level override.\n+     * Defaults to true.\n+     */\n+    public boolean getFieldOverride() {\n+        return _fieldOverride;\n+    }\n+\n+    /**\n+     * Return metadata parser, creating it if it does not already exist.\n+     */\n+    public AnnotationPersistenceMetaDataParser getAnnotationParser() {\n+        if (_annoParser == null) {\n+            _annoParser = newAnnotationParser();\n+            _annoParser.setRepository(repos);\n+        }\n+        return _annoParser;\n+    }\n+\n+    /**\n+     * Set the metadata parser.\n+     */\n+    public void setAnnotationParser(\n+        AnnotationPersistenceMetaDataParser parser) {\n+        if (_annoParser != null)\n+            _annoParser.setRepository(null);\n+        if (parser != null)\n+            parser.setRepository(repos);\n+        _annoParser = parser;\n+    }\n+\n+    /**\n+     * Create a new metadata parser.\n+     */\n+    protected AnnotationPersistenceMetaDataParser newAnnotationParser() {\n+        return new AnnotationPersistenceMetaDataParser\n+            (repos.getConfiguration());\n+    }\n+\n+    /**\n+     * Create a new annotation serializer.\n+     */\n+    protected AnnotationPersistenceMetaDataSerializer\n+        newAnnotationSerializer() {\n+        return new AnnotationPersistenceMetaDataSerializer\n+            (repos.getConfiguration());\n+    }\n+\n+    /**\n+     * Return XML metadata parser, creating it if it does not already exist.\n+     */\n+    public XMLPersistenceMetaDataParser getXMLParser() {\n+        if (_xmlParser == null) {\n+            _xmlParser = newXMLParser(true);\n+            _xmlParser.setRepository(repos);\n+            if (_fieldOverride)\n+                _xmlParser.setAnnotationParser(getAnnotationParser());\n+        }\n+        return _xmlParser;\n+    }\n+\n+    /**\n+     * Set the metadata parser.\n+     */\n+    public void setXMLParser(XMLPersistenceMetaDataParser parser) {\n+        if (_xmlParser != null)\n+            _xmlParser.setRepository(null);\n+        if (parser != null)\n+            parser.setRepository(repos);\n+        _xmlParser = parser;\n+    }\n+\n+    /**\n+     * Create a new metadata parser.\n+     */\n+    protected XMLPersistenceMetaDataParser newXMLParser(boolean loading) {\n+        return new XMLPersistenceMetaDataParser(repos.getConfiguration());\n+    }\n+\n+    /**\n+     * Create a new serializer\n+     */\n+    protected XMLPersistenceMetaDataSerializer newXMLSerializer() {\n+        return new XMLPersistenceMetaDataSerializer(repos.getConfiguration());\n+    }\n+\n+    public void load(Class cls, int mode, ClassLoader envLoader) {\n+        if (mode == MODE_NONE)\n+            return;\n+        if (!strict && (mode & MODE_META) != 0)\n+            mode |= MODE_MAPPING;\n+\n+        // getting the list of persistent types runs callbacks to\n+        // mapPersistentTypeNames if it hasn't been called already, which\n+        // caches XML resources\n+        getPersistentTypeNames(false, envLoader);\n+        URL xml = findXML(cls);\n+\n+        // we have to parse metadata up-front to register persistence unit\n+        // defaults and system callbacks\n+        ClassMetaData meta;\n+        boolean parsedXML = false;\n+        if (_unparsed != null && !_unparsed.isEmpty()\n+            && (mode & MODE_META) != 0) {\n+            for (URL url : _unparsed)\n+                parseXML(url, cls, mode, envLoader);\n+            parsedXML = _unparsed.contains(xml);\n+            _unparsed.clear();\n+\n+            // XML process check\n+            meta = repos.getCachedMetaData(cls);\n+            if (meta != null && (meta.getSourceMode() & mode) == mode) {\n+                validateStrategies(meta);\n+                return;\n+            }\n+        }\n+\n+        // might have been looking for system-level query\n+        if (cls == null)\n+            return;\n+\n+        // we may still need to parse XML if this is a redeploy of a class, or\n+        // if we're in strict query-only mode\n+        if (!parsedXML && xml != null) {\n+            parseXML(xml, cls, mode, envLoader);\n+            // XML process check\n+            meta = repos.getCachedMetaData(cls);\n+            if (meta != null && (meta.getSourceMode() & mode) == mode) {\n+                validateStrategies(meta);\n+                return;\n+            }\n+        }\n+\n+        AnnotationPersistenceMetaDataParser parser = getAnnotationParser();\n+        parser.setEnvClassLoader(envLoader);\n+        parser.setMode(mode);\n+        parser.parse(cls);\n+\n+        meta = repos.getCachedMetaData(cls);\n+        if (meta != null && (meta.getSourceMode() & mode) == mode)\n+            validateStrategies(meta);\n+    }\n+\n+    /**\n+     * Parse the given XML resource.\n+     */\n+    private void parseXML(URL xml, Class cls, int mode, ClassLoader envLoader) {\n+        ClassLoader loader = repos.getConfiguration().\n+            getClassResolverInstance().getClassLoader(cls, envLoader);\n+        XMLPersistenceMetaDataParser xmlParser = getXMLParser();\n+        xmlParser.setClassLoader(envLoader != null ? envLoader : loader);\n+        xmlParser.setEnvClassLoader(envLoader);\n+        xmlParser.setMode(mode);\n+        try {\n+            xmlParser.parse(xml);\n+        } catch (IOException ioe) {\n+            throw new GeneralException(ioe);\n+        }\n+    }\n+\n+    /**\n+     * Locate the XML resource for the given class.\n+     */\n+    private URL findXML(Class cls) {\n+        if (_xml != null && cls != null)\n+            for (Map.Entry<URL, Set> entry : _xml.entrySet())\n+                if (entry.getValue().contains(cls.getName()))\n+                    return entry.getKey();\n+        return null;\n+    }\n+\n+    @Override\n+    protected void mapPersistentTypeNames(Object rsrc, String[] names) {\n+        if (rsrc.toString().endsWith(\".class\")) {\n+            if (log.isTraceEnabled())\n+                log.trace(\n+                    _loc.get(\"map-persistent-types-skipping-class\", rsrc));\n+            return;\n+        } else if (!(rsrc instanceof URL)) {\n+            if (log.isTraceEnabled())\n+                log.trace(\n+                    _loc.get(\"map-persistent-types-skipping-non-url\", rsrc));\n+            return;\n+        }\n+\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\n+                \"map-persistent-type-names\", rsrc, Arrays.asList(names)));\n+        \n+        if (_xml == null)\n+            _xml = new HashMap<URL, Set>();\n+        _xml.put((URL) rsrc, new HashSet(Arrays.asList(names)));\n+        if (_unparsed == null)\n+            _unparsed = new HashSet<URL>();\n+        _unparsed.add((URL) rsrc);\n+    }\n+\n+    @Override\n+    public Class getQueryScope(String queryName, ClassLoader loader) {\n+        if (queryName == null)\n+            return null;\n+        Collection classes = repos.loadPersistentTypes(false, loader);\n+        for (Class cls : (Collection<Class>) classes) {\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedQuery.class)))\n+                .booleanValue() && hasNamedQuery\n+                (queryName, (NamedQuery) cls.getAnnotation(NamedQuery.class)))\n+                return cls;\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedQueries.class)))\n+                .booleanValue() &&\n+                hasNamedQuery(queryName, ((NamedQueries) cls.\n+                    getAnnotation(NamedQueries.class)).value()))\n+                return cls;\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedNativeQuery.class)))\n+                .booleanValue() &&\n+                hasNamedNativeQuery(queryName, (NamedNativeQuery) cls.\n+                    getAnnotation(NamedNativeQuery.class)))\n+                return cls;\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, NamedNativeQueries.class)))\n+                .booleanValue() &&\n+                hasNamedNativeQuery(queryName, ((NamedNativeQueries) cls.\n+                    getAnnotation(NamedNativeQueries.class)).value()))\n+                return cls;\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Class getResultSetMappingScope(String rsMappingName,\n+        ClassLoader loader) {\n+        if (rsMappingName == null)\n+            return null;\n+        \n+        Collection classes = repos.loadPersistentTypes(false, loader);\n+        for (Class cls : (Collection<Class>) classes) {\n+\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, SqlResultSetMapping.class)))\n+                .booleanValue() &&\n+                hasRSMapping(rsMappingName, (SqlResultSetMapping) cls.\n+                getAnnotation(SqlResultSetMapping.class)))\n+                return cls;\n+\n+            if (((Boolean) AccessController.doPrivileged(J2DoPriv5Helper\n+                .isAnnotationPresentAction(cls, SqlResultSetMappings.class)))\n+                .booleanValue() &&\n+                hasRSMapping(rsMappingName, ((SqlResultSetMappings) cls.\n+                getAnnotation(SqlResultSetMappings.class)).value()))\n+                return cls;\n+        }\n+        return null;\n+    }\n+\n+    private boolean hasNamedQuery(String query, NamedQuery... queries) {\n+        for (NamedQuery q : queries) {\n+            if (query.equals(q.name()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean hasRSMapping(String rsMapping,\n+        SqlResultSetMapping... mappings) {\n+        for (SqlResultSetMapping m : mappings) {\n+            if (rsMapping.equals(m.name()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    private boolean hasNamedNativeQuery(String query,\n+        NamedNativeQuery... queries) {\n+        for (NamedNativeQuery q : queries) {\n+            if (query.equals(q.name()))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    protected MetaDataFilter newMetaDataFilter() {\n+        ClassAnnotationMetaDataFilter camdf = new ClassAnnotationMetaDataFilter(\n+                new Class[] { Entity.class, Embeddable.class,\n+                        MappedSuperclass.class });\n+        camdf.setLog(log);\n+        return camdf;\n+    }\n+\n+    /**\n+     * Ensure all fields have declared a strategy.\n+     */\n+    private void validateStrategies(ClassMetaData meta) {\n+        StringBuffer buf = null;\n+        for (FieldMetaData fmd : meta.getDeclaredFields()) {\n+            if (!fmd.isExplicit()) {\n+                if (buf == null)\n+                    buf = new StringBuffer();\n+                else\n+                    buf.append(\", \");\n+                buf.append(fmd);\n+            }\n+        }\n+        if (buf != null)\n+            throw new MetaDataException(_loc.get(\"no-pers-strat\", buf));\n+    }\n+\n+    public MetaDataDefaults getDefaults() {\n+        return _def;\n+    }\n+\n+    @Override\n+    public ClassArgParser newClassArgParser() {\n+        ClassArgParser parser = new ClassArgParser();\n+        parser.setMetaDataStructure(\"package\", null, new String[]{\n+            \"entity\", \"embeddable\", \"mapped-superclass\" }, \"class\");\n+        return parser;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        super.clear();\n+        if (_annoParser != null)\n+            _annoParser.clear();\n+        if (_xmlParser != null)\n+            _xmlParser.clear();\n+        if (_xml != null)\n+            _xml.clear();\n+    }\n+\n+    protected Parser newParser(boolean loading) {\n+        return newXMLParser(loading);\n+    }\n+\n+    protected Serializer newSerializer() {\n+        return newXMLSerializer();\n+    }\n+\n+    @Override\n+    protected void parse(MetaDataParser parser, Class[] cls) {\n+        parse(parser, Collections.singleton(defaultXMLFile()));\n+    }\n+\n+    protected File defaultSourceFile(ClassMetaData meta) {\n+        return defaultXMLFile();\n+    }\n+\n+    protected File defaultSourceFile(QueryMetaData query, Map clsNames) {\n+        ClassMetaData meta = getDefiningMetaData(query, clsNames);\n+        File file = (meta == null) ? null : meta.getSourceFile();\n+        if (file != null)\n+            return file;\n+        return defaultXMLFile();\n+    }\n+\n+    protected File defaultSourceFile(SequenceMetaData seq, Map clsNames) {\n+        return defaultXMLFile();\n+    }\n+\n+    /**\n+     * Look for META-INF/orm.xml, and if it doesn't exist, choose a default.\n+     */\n+    private File defaultXMLFile() {\n+        ClassLoader loader = repos.getConfiguration().\n+            getClassResolverInstance().getClassLoader(getClass(), null);\n+        URL rsrc = (URL) AccessController.doPrivileged(\n+            J2DoPriv5Helper.getResourceAction(loader, \"META-INF/orm.xml\"));\n+        if (rsrc != null) {\n+            File file = new File(rsrc.getFile());\n+            if (((Boolean) AccessController.doPrivileged(\n+                J2DoPriv5Helper.existsAction(file))).booleanValue())\n+                return file;\n+        }\n+        return new File(\"orm.xml\");\n+    }\n+\n+    public void setConfiguration(Configuration conf) {\n+    }\n+\n+    public void startConfiguration() {\n+    }\n+\n+    public void endConfiguration() {\n+        if (rsrcs == null)\n+            rsrcs = Collections.singleton(\"META-INF/orm.xml\");\n+        else\n+\t\t\trsrcs.add(\"META-INF/orm.xml\");\n+\t}\n+\n+    public void setInto(Options opts) {\n+        opts.keySet().retainAll(opts.setInto(_def).keySet());\n+    }\n+\n+    /**\n+     * Return JAXB XML annotation parser, \n+     * creating it if it does not already exist.\n+     */\n+    public AnnotationPersistenceXMLMetaDataParser getXMLAnnotationParser() {\n+        if (_annoXMLParser == null) {\n+            _annoXMLParser = newXMLAnnotationParser();\n+            _annoXMLParser.setRepository(repos);\n+        }\n+        return _annoXMLParser;\n+    }\n+\n+    /**\n+     * Set the JAXB XML annotation parser.\n+     */\n+    public void setXMLAnnotationParser(\n+        AnnotationPersistenceXMLMetaDataParser parser) {\n+        if (_annoXMLParser != null)\n+            _annoXMLParser.setRepository(null);\n+        if (parser != null)\n+            parser.setRepository(repos);\n+        _annoXMLParser = parser;\n+    }\n+\n+    /**\n+     * Create a new JAXB XML annotation parser.\n+     */\n+    protected AnnotationPersistenceXMLMetaDataParser newXMLAnnotationParser() {\n+        return new AnnotationPersistenceXMLMetaDataParser\n+            (repos.getConfiguration());\n+    }\n+\n+    public void loadXMLMetaData(FieldMetaData fmd) {\n+        AnnotationPersistenceXMLMetaDataParser parser\n+            = getXMLAnnotationParser();\n+        parser.parse(fmd);\n+    }\n+}"},{"sha":"c3a535c45a3328e32982b79d8d09fad55efe1e10","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","status":"added","additions":609,"deletions":0,"changes":609,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProductDerivation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,609 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.MissingResourceException;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.conf.OpenJPAProductDerivation;\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.MapConfigurationProvider;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.meta.XMLMetaDataParser;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Sets JPA specification defaults and parses JPA specification XML files.\n+ * \n+ * For globals, looks in <code>openjpa.properties</code> system property for\n+ * the location of a file to parse. If no system property is defined, the\n+ * default resource location of <code>META-INF/openjpa.xml</code> is used.\n+ *\n+ * For defaults, looks for <code>META-INF/persistence.xml</code>.\n+ * Within <code>persistence.xml</code>, look for the named persistence unit, or\n+ * if no name given, an OpenJPA unit (preferring an unnamed OpenJPA unit to \n+ * a named one).\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class PersistenceProductDerivation \n+    extends AbstractProductDerivation\n+    implements OpenJPAProductDerivation {\n+\n+    public static final String SPEC_JPA = \"jpa\";\n+    public static final String ALIAS_EJB = \"ejb\";\n+    public static final String RSRC_GLOBAL = \"META-INF/openjpa.xml\";\n+    public static final String RSRC_DEFAULT = \"META-INF/persistence.xml\";\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (PersistenceProductDerivation.class);\n+\n+    public void putBrokerFactoryAliases(Map m) {\n+    }\n+\n+    public int getType() {\n+        return TYPE_SPEC;\n+    }\n+\n+    @Override\n+    public void validate()\n+        throws Exception {\n+        // make sure JPA is available\n+        AccessController.doPrivileged(J2DoPrivHelper.getClassLoaderAction(\n+            javax.persistence.EntityManagerFactory.class));\n+    }\n+    \n+    @Override\n+    public boolean beforeConfigurationLoad(Configuration c) {\n+        if (!(c instanceof OpenJPAConfigurationImpl))\n+            return false;\n+        \n+        OpenJPAConfigurationImpl conf = (OpenJPAConfigurationImpl) c;\n+        conf.metaFactoryPlugin.setAlias(ALIAS_EJB,\n+            PersistenceMetaDataFactory.class.getName());\n+        conf.metaFactoryPlugin.setAlias(SPEC_JPA,\n+            PersistenceMetaDataFactory.class.getName());\n+        \n+        conf.addValue(new EntityManagerFactoryValue());\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean afterSpecificationSet(Configuration c) {\n+      if (!(c instanceof OpenJPAConfigurationImpl)\n+         || !SPEC_JPA.equals(((OpenJPAConfiguration) c).getSpecification()))\n+          return false;\n+ \n+        OpenJPAConfigurationImpl conf = (OpenJPAConfigurationImpl) c;\n+        conf.metaFactoryPlugin.setDefault(SPEC_JPA);\n+        conf.metaFactoryPlugin.setString(SPEC_JPA);\n+        conf.lockManagerPlugin.setDefault(\"version\");\n+        conf.lockManagerPlugin.setString(\"version\");\n+        conf.nontransactionalWrite.setDefault(\"true\");\n+        conf.nontransactionalWrite.set(true);\n+        return true;\n+    }\n+\n+    /**\n+     * Load configuration from the given persistence unit with the specified\n+     * user properties.\n+     */\n+    public ConfigurationProvider load(PersistenceUnitInfo pinfo, Map m)\n+        throws IOException {\n+        if (pinfo == null)\n+            return null;\n+        if (!isOpenJPAPersistenceProvider(pinfo, null)) {\n+            warnUnknownProvider(pinfo);\n+            return null;\n+        }\n+\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        cp.addProperties(PersistenceUnitInfoImpl.toOpenJPAProperties(pinfo));\n+        cp.addProperties(m);\n+        if (pinfo instanceof PersistenceUnitInfoImpl) {\n+            PersistenceUnitInfoImpl impl = (PersistenceUnitInfoImpl) pinfo;\n+            if (impl.getPersistenceXmlFileUrl() != null)\n+                cp.setSource(impl.getPersistenceXmlFileUrl().toString());\n+        }\n+        return cp;\n+    }\n+\n+    /**\n+     * Load configuration from the given resource and unit names, which may\n+     * be null.\n+     */\n+    public ConfigurationProvider load(String rsrc, String name, Map m)\n+        throws IOException {\n+        boolean explicit = !StringUtils.isEmpty(rsrc);\n+        if (!explicit)\n+            rsrc = RSRC_DEFAULT;\n+        \n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        Boolean ret = load(cp, rsrc, name, m, null, explicit);\n+        if (ret != null)\n+            return (ret.booleanValue()) ? cp : null;\n+        if (explicit)\n+            return null;\n+\n+        // persistence.xml does not exist; just load map\n+        PersistenceUnitInfoImpl pinfo = new PersistenceUnitInfoImpl();\n+        pinfo.fromUserProperties(m);\n+        if (!isOpenJPAPersistenceProvider(pinfo, null)) {\n+            warnUnknownProvider(pinfo);\n+            return null;\n+        }\n+        cp.addProperties(pinfo.toOpenJPAProperties());\n+        return cp;\n+    }\n+\n+    @Override\n+    public ConfigurationProvider load(String rsrc, String anchor, \n+        ClassLoader loader)\n+        throws IOException {\n+        if (rsrc != null && !rsrc.endsWith(\".xml\"))\n+            return null;\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        if (load(cp, rsrc, anchor, null, loader, true) == Boolean.TRUE)\n+            return cp;\n+        return null;\n+    }\n+\n+    @Override\n+    public ConfigurationProvider load(File file, String anchor) \n+        throws IOException {\n+        if (!file.getName().endsWith(\".xml\"))\n+            return null;\n+\n+        ConfigurationParser parser = new ConfigurationParser(null);\n+        parser.parse(file);\n+        return load(findUnit((List<PersistenceUnitInfoImpl>) \n+            parser.getResults(), anchor, null), null);\n+    }\n+\n+    @Override\n+    public String getDefaultResourceLocation() {\n+        return RSRC_DEFAULT;\n+    }\n+\n+    @Override\n+    public List getAnchorsInFile(File file) throws IOException {\n+        ConfigurationParser parser = new ConfigurationParser(null);\n+        try {\n+            parser.parse(file);\n+            return getUnitNames(parser);\n+        } catch (IOException e) {\n+            // not all configuration files are XML; return null if unparsable\n+            return null;\n+        }\n+    }\n+\n+    private List<String> getUnitNames(ConfigurationParser parser) {\n+        List<PersistenceUnitInfoImpl> units = parser.getResults();\n+        List<String> names = new ArrayList<String>();\n+        for (PersistenceUnitInfoImpl unit : units)\n+            names.add(unit.getPersistenceUnitName());\n+        return names;\n+    }\n+\n+    @Override\n+    public List getAnchorsInResource(String resource) throws Exception {\n+        ConfigurationParser parser = new ConfigurationParser(null);\n+        try {\n+            ClassLoader loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+            List<URL> urls = getResourceURLs(resource, loader);\n+            if (urls != null) {\n+                for (URL url : urls) {\n+                    parser.parse(url);\n+                }\n+            }\n+            return getUnitNames(parser);\n+        } catch (IOException e) {\n+            // not all configuration files are XML; return null if unparsable\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public ConfigurationProvider loadGlobals(ClassLoader loader)\n+        throws IOException {\n+        String[] prefixes = ProductDerivations.getConfigurationPrefixes();\n+        String rsrc = null;\n+        for (int i = 0; i < prefixes.length && StringUtils.isEmpty(rsrc); i++)\n+           rsrc = (String) AccessController.doPrivileged(J2DoPrivHelper\n+                .getPropertyAction(prefixes[i] + \".properties\")); \n+        boolean explicit = !StringUtils.isEmpty(rsrc);\n+        String anchor = null;\n+        int idx = (!explicit) ? -1 : rsrc.lastIndexOf('#');\n+        if (idx != -1) {\n+            // separate name from <resrouce>#<name> string\n+            if (idx < rsrc.length() - 1)\n+                anchor = rsrc.substring(idx + 1);\n+            rsrc = rsrc.substring(0, idx);\n+        }\n+        if (StringUtils.isEmpty(rsrc))\n+            rsrc = RSRC_GLOBAL;\n+        else if (!rsrc.endsWith(\".xml\"))\n+            return null;\n+\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        if (load(cp, rsrc, anchor, null, loader, explicit) == Boolean.TRUE)\n+            return cp;\n+        return null;\n+    }\n+\n+    @Override\n+    public ConfigurationProvider loadDefaults(ClassLoader loader)\n+        throws IOException {\n+        ConfigurationProviderImpl cp = new ConfigurationProviderImpl();\n+        if (load(cp, RSRC_DEFAULT, null, null, loader, false) == Boolean.TRUE)\n+            return cp;\n+        return null;\n+    }\n+\n+    private static List<URL> getResourceURLs(String rsrc, ClassLoader loader)\n+        throws IOException {\n+        Enumeration<URL> urls = null;\n+        try {\n+            urls = (Enumeration) AccessController.doPrivileged(\n+                J2DoPrivHelper.getResourcesAction(loader, rsrc)); \n+            if (!urls.hasMoreElements()) {\n+                if (!rsrc.startsWith(\"META-INF\"))\n+                    urls = (Enumeration) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getResourcesAction(\n+                            loader, \"META-INF/\" + rsrc)); \n+                if (!urls.hasMoreElements())\n+                    return null;\n+            }\n+        } catch (PrivilegedActionException pae) {\n+            throw (IOException) pae.getException();\n+        }\n+\n+        return Collections.list(urls);\n+    }\n+\n+    /**\n+     * Looks through the resources at <code>rsrc</code> for a configuration\n+     * file that matches <code>name</code> (or an unnamed one if\n+     * <code>name</code> is <code>null</code>), and loads the XML in the\n+     * resource into a new {@link PersistenceUnitInfo}. Then, applies the\n+     * overrides in <code>m</code>.\n+     *\n+     * @return {@link Boolean#TRUE} if the resource was loaded, null if it\n+     * does not exist, or {@link Boolean#FALSE} if it is not for OpenJPA\n+     */\n+    private Boolean load(ConfigurationProviderImpl cp, String rsrc, \n+        String name, Map m, ClassLoader loader, boolean explicit)\n+        throws IOException {\n+        if (loader == null)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+\n+        List<URL> urls = getResourceURLs(rsrc, loader);\n+        if (urls == null || urls.size() == 0)\n+            return null;\n+\n+        ConfigurationParser parser = new ConfigurationParser(m);\n+        PersistenceUnitInfoImpl pinfo = parseResources(parser, urls, name, \n+            loader);\n+        if (pinfo == null) {\n+            if (!explicit)\n+                return Boolean.FALSE;\n+            throw new MissingResourceException(_loc.get(\"missing-xml-config\", \n+                rsrc, String.valueOf(name)).getMessage(), getClass().getName(), \n+                rsrc);\n+        } else if (!isOpenJPAPersistenceProvider(pinfo, loader)) {\n+            if (!explicit) {\n+                warnUnknownProvider(pinfo);\n+                return Boolean.FALSE;\n+            }\n+            throw new MissingResourceException(_loc.get(\"unknown-provider\", \n+                rsrc, name, pinfo.getPersistenceProviderClassName()).\n+                getMessage(), getClass().getName(), rsrc);\n+        }\n+        cp.addProperties(pinfo.toOpenJPAProperties());\n+        cp.setSource(pinfo.getPersistenceXmlFileUrl().toString());\n+        return Boolean.TRUE;\n+    }\n+\n+    /**\n+     * Parse resources at the given location. Searches for a\n+     * PersistenceUnitInfo with the requested name, or an OpenJPA unit if\n+     * no name given (preferring an unnamed OpenJPA unit to a named one).\n+     */\n+    private PersistenceUnitInfoImpl parseResources(ConfigurationParser parser,\n+        List<URL> urls, String name, ClassLoader loader)\n+        throws IOException {\n+        List<PersistenceUnitInfoImpl> pinfos = \n+            new ArrayList<PersistenceUnitInfoImpl>();\n+        for (URL url : urls) {\n+            parser.parse(url);\n+            pinfos.addAll((List<PersistenceUnitInfoImpl>) parser.getResults());\n+        }\n+        return findUnit(pinfos, name, loader);\n+    }\n+\n+    /**\n+     * Find the unit with the given name, or an OpenJPA unit if no name is\n+     * given (preferring an unnamed OpenJPA unit to a named one).\n+     */\n+    private PersistenceUnitInfoImpl findUnit(List<PersistenceUnitInfoImpl> \n+        pinfos, String name, ClassLoader loader) {\n+        PersistenceUnitInfoImpl ojpa = null;\n+        for (PersistenceUnitInfoImpl pinfo : pinfos) {\n+            // found named unit?\n+            if (name != null) {\n+                if (name.equals(pinfo.getPersistenceUnitName()))\n+                    return pinfo;\n+                continue;\n+            }\n+\n+            if (isOpenJPAPersistenceProvider(pinfo, loader)) {\n+                // if no name given and found unnamed unit, return it.  \n+                // otherwise record as default unit unless we find a \n+                // better match later\n+                if (StringUtils.isEmpty(pinfo.getPersistenceUnitName()))\n+                    return pinfo;\n+                if (ojpa == null)\n+                    ojpa = pinfo;\n+            }\n+        }\n+        return ojpa;\n+    }\n+\n+    /**\n+     * Return whether the given persistence unit uses an OpenJPA provider.\n+     */\n+    private static boolean isOpenJPAPersistenceProvider\n+        (PersistenceUnitInfo pinfo, ClassLoader loader) {\n+        String provider = pinfo.getPersistenceProviderClassName();\n+        if (StringUtils.isEmpty(provider) \n+            || PersistenceProviderImpl.class.getName().equals(provider))\n+            return true;\n+\n+        if (loader == null)\n+            loader = (ClassLoader) AccessController.doPrivileged(\n+                J2DoPrivHelper.getContextClassLoaderAction());\n+        try {\n+            if (PersistenceProviderImpl.class.isAssignableFrom\n+                (Class.forName(provider, false, loader)))\n+                return true;\n+        } catch (Throwable t) {\n+            log(_loc.get(\"unloadable-provider\", provider, t).getMessage());\n+            return false;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Warn the user that we could only find an unrecognized persistence \n+     * provider.\n+     */\n+    private static void warnUnknownProvider(PersistenceUnitInfo pinfo) {\n+        log(_loc.get(\"unrecognized-provider\", \n+            pinfo.getPersistenceProviderClassName()).getMessage());\n+    }\n+    \n+    /**\n+     * Log a message.   \n+     */\n+    private static void log(String msg) {\n+        // at this point logging isn't configured yet\n+        System.err.println(msg);\n+    }\n+\n+    /**\n+     * Custom configuration provider.   \n+     */\n+    public static class ConfigurationProviderImpl\n+        extends MapConfigurationProvider {\n+\n+        private String _source;\n+\n+        public ConfigurationProviderImpl() {\n+        }\n+\n+        public ConfigurationProviderImpl(Map props) {\n+            super(props);\n+        }\n+\n+        /**\n+         * Set the source of information in this provider.\n+         */\n+        public void setSource(String source) {\n+            _source = source;\n+        }\n+\n+        @Override\n+        public void setInto(Configuration conf) {\n+            if (conf instanceof OpenJPAConfiguration) {\n+                OpenJPAConfiguration oconf = (OpenJPAConfiguration) conf;\n+                oconf.setSpecification(SPEC_JPA);\n+\n+                // we merge several persistence.xml elements into the \n+                // MetaDataFactory property implicitly.  if the user has a\n+                // global openjpa.xml with this property set, its value will\n+                // get overwritten by our implicit setting.  so instead, combine\n+                // the global value with our settings\n+                String orig = oconf.getMetaDataFactory();\n+                if (!StringUtils.isEmpty(orig)) {\n+                    String key = ProductDerivations.getConfigurationKey\n+                        (\"MetaDataFactory\", getProperties());\n+                    Object override = getProperties().get(key);\n+                    if (override instanceof String)\n+                        addProperty(key, Configurations.combinePlugins(orig, \n+                            (String) override));\n+                }\n+            }\n+\n+            super.setInto(conf, null);\n+            Log log = conf.getConfigurationLog();\n+            if (log.isTraceEnabled()) {\n+                String src = (_source == null) ? \"?\" : _source;\n+                log.trace(_loc.get(\"conf-load\", src, getProperties()));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * SAX handler capable of parsing an JPA persistence.xml file.\n+     * Package-protected for testing.\n+     */\n+    public static class ConfigurationParser\n+        extends XMLMetaDataParser {\n+\n+        private final Map _map;\n+        private PersistenceUnitInfoImpl _info = null;\n+        private URL _source = null;\n+\n+        public ConfigurationParser(Map map) {\n+            _map = map;\n+            setCaching(false);\n+            setValidating(true);\n+            setParseText(true);\n+        }\n+\n+        @Override\n+        public void parse(URL url)\n+            throws IOException {\n+            _source = url;\n+            super.parse(url);\n+        }\n+\n+        @Override\n+        public void parse(File file)\n+            throws IOException {\n+            try {\n+                _source = (URL) AccessController.doPrivileged(J2DoPrivHelper\n+                    .toURLAction(file));\n+            } catch (PrivilegedActionException pae) {\n+                throw (MalformedURLException) pae.getException();\n+            }\n+            super.parse(file);\n+        }\n+\n+        @Override\n+        protected Object getSchemaSource() {\n+            return getClass().getResourceAsStream(\"persistence-xsd.rsrc\");\n+        }\n+\n+        @Override\n+        protected void reset() {\n+            super.reset();\n+            _info = null;\n+            _source = null;\n+        }\n+\n+        protected boolean startElement(String name, Attributes attrs)\n+            throws SAXException {\n+            if (currentDepth() == 1)\n+                startPersistenceUnit(attrs);\n+            else if (currentDepth() == 3 && \"property\".equals(name))\n+                _info.setProperty(attrs.getValue(\"name\"),\n+                    attrs.getValue(\"value\"));\n+            return true;\n+        }\n+\n+        protected void endElement(String name)\n+            throws SAXException {\n+            if (currentDepth() == 1) {\n+                _info.fromUserProperties(_map);\n+                addResult(_info);\n+            }\n+            if (currentDepth() != 2)\n+                return;\n+\n+            switch (name.charAt(0)) {\n+                case 'c': // class\n+                    _info.addManagedClassName(currentText());\n+                case 'e': // exclude-unlisted-classes\n+                    _info.setExcludeUnlistedClasses(\"true\".equalsIgnoreCase\n+                        (currentText()));\n+                    break;\n+                case 'j':\n+                    if (\"jta-data-source\".equals(name))\n+                        _info.setJtaDataSourceName(currentText());\n+                    else // jar-file\n+                    {\n+                        try {\n+                            _info.addJarFileName(currentText());\n+                        } catch (IllegalArgumentException iae) {\n+                            throw getException(iae.getMessage());\n+                        }\n+                    }\n+                    break;\n+                case 'm': // mapping-file\n+                    _info.addMappingFileName(currentText());\n+                    break;\n+                case 'n': // non-jta-data-source\n+                    _info.setNonJtaDataSourceName(currentText());\n+                    break;\n+                case 'p':\n+                    if (\"provider\".equals(name))\n+                        _info.setPersistenceProviderClassName(currentText());\n+                    break;\n+            }\n+        }\n+\n+        /**\n+         * Parse persistence-unit element.\n+         */\n+        private void startPersistenceUnit(Attributes attrs)\n+            throws SAXException {\n+            _info = new PersistenceUnitInfoImpl();\n+            _info.setPersistenceUnitName(attrs.getValue(\"name\"));\n+\n+            // we only parse this ourselves outside a container, so default\n+            // transaction type to local\n+            String val = attrs.getValue(\"transaction-type\");\n+            if (val == null)\n+                _info.setTransactionType\n+                    (PersistenceUnitTransactionType.RESOURCE_LOCAL);\n+            else\n+                _info.setTransactionType(Enum.valueOf\n+                    (PersistenceUnitTransactionType.class, val));\n+\n+            if (_source != null)\n+                _info.setPersistenceXmlFileUrl(_source);\n+\t\t}\n+\t}\n+}"},{"sha":"47e59619581ddafaaa07fba791cf1ae30c8f1368","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.IllegalClassFormatException;\n+import java.security.ProtectionDomain;\n+import java.util.Map;\n+import javax.persistence.EntityManager;\n+import javax.persistence.spi.ClassTransformer;\n+import javax.persistence.spi.PersistenceProvider;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+\n+import org.apache.openjpa.conf.BrokerValue;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.enhance.PCClassFileTransformer;\n+import org.apache.openjpa.kernel.Bootstrap;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.MetaDataModes;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.util.ClassResolver;\n+\n+\n+/**\n+ * Bootstrapping class that allows the creation of a stand-alone\n+ * {@link EntityManager}.\n+ *\n+ * @see javax.persistence.Persistence#createEntityManagerFactory(String,Map)\n+ * @published\n+ */\n+public class PersistenceProviderImpl\n+    implements PersistenceProvider {\n+\n+    static final String CLASS_TRANSFORMER_OPTIONS = \"ClassTransformerOptions\";\n+    private static final String EMF_POOL = \"EntityManagerFactoryPool\";\n+\n+    private static final Localizer _loc = Localizer.forPackage(\n+        PersistenceProviderImpl.class);\n+\n+    /**\n+     * Loads the entity manager specified by <code>name</code>, applying\n+     * the properties in <code>m</code> as overrides to the properties defined\n+     * in the XML configuration file for <code>name</code>. If <code>name</code>\n+     * is <code>null</code>, this method loads the XML in the resource\n+     * identified by <code>resource</code>, and uses the first resource found\n+     * when doing this lookup, regardless of the name specified in the XML\n+     * resource or the name of the jar that the resource is contained in.\n+     * This does no pooling of EntityManagersFactories.\n+     */\n+    public OpenJPAEntityManagerFactory createEntityManagerFactory(String name,\n+        String resource, Map m) {\n+        PersistenceProductDerivation pd = new PersistenceProductDerivation();\n+        try {\n+            Object poolValue = Configurations.removeProperty(EMF_POOL, m);\n+            ConfigurationProvider cp = pd.load(resource, name, m);\n+            if (cp == null)\n+                return null;\n+\n+            BrokerFactory factory = getBrokerFactory(cp, poolValue, null);\n+            return JPAFacadeHelper.toEntityManagerFactory(factory);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    private BrokerFactory getBrokerFactory(ConfigurationProvider cp,\n+        Object poolValue, ClassLoader loader) {\n+        // handle \"true\" and \"false\"\n+        if (poolValue instanceof String\n+            && (\"true\".equalsIgnoreCase((String) poolValue)\n+                || \"false\".equalsIgnoreCase((String) poolValue)))\n+            poolValue = Boolean.valueOf((String) poolValue);\n+\n+        if (poolValue != null && !(poolValue instanceof Boolean)) {\n+            // we only support boolean settings for this option currently.\n+            throw new IllegalArgumentException(poolValue.toString());\n+        }\n+        \n+        if (poolValue == null || !((Boolean) poolValue).booleanValue())\n+            return Bootstrap.newBrokerFactory(cp, loader);\n+        else\n+            return Bootstrap.getBrokerFactory(cp, loader);\n+    }\n+\n+    public OpenJPAEntityManagerFactory createEntityManagerFactory(String name,\n+        Map m) {\n+        return createEntityManagerFactory(name, null, m);\n+    }\n+\n+    public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(\n+        PersistenceUnitInfo pui, Map m) {\n+        PersistenceProductDerivation pd = new PersistenceProductDerivation();\n+        try {\n+            Object poolValue = Configurations.removeProperty(EMF_POOL, m);\n+            ConfigurationProvider cp = pd.load(pui, m);\n+            if (cp == null)\n+                return null;\n+\n+            // add enhancer\n+            Exception transformerException = null;\n+            String ctOpts = (String) Configurations.getProperty\n+                (CLASS_TRANSFORMER_OPTIONS, pui.getProperties());\n+            try {\n+                pui.addTransformer(new ClassTransformerImpl(cp, ctOpts,\n+                    pui.getNewTempClassLoader(), newConfigurationImpl()));\n+            } catch (Exception e) {\n+                // fail gracefully\n+                transformerException = e;\n+            }\n+\n+            // if the BrokerImpl hasn't been specified, switch to the\n+            // non-finalizing one, since anything claiming to be a container\n+            // should be doing proper resource management.\n+            if (!Configurations.containsProperty(BrokerValue.KEY,\n+                cp.getProperties())) {\n+                cp.addProperty(\"openjpa.\" + BrokerValue.KEY, \n+                    getDefaultBrokerAlias());\n+            }\n+\n+            BrokerFactory factory = getBrokerFactory(cp, poolValue,\n+                pui.getClassLoader());\n+            if (transformerException != null) {\n+                Log log = factory.getConfiguration().getLog(\n+                    OpenJPAConfiguration.LOG_RUNTIME);\n+                if (log.isTraceEnabled()) {\n+                    log.warn(\n+                        _loc.get(\"transformer-registration-error-ex\", pui),\n+                        transformerException);\n+                } else {\n+                    log.warn(\n+                        _loc.get(\"transformer-registration-error\", pui));\n+                }\n+            }\n+            return JPAFacadeHelper.toEntityManagerFactory(factory);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /*\n+     * Returns a default Broker alias to be used when no openjpa.BrokerImpl\n+     *  is specified. This method allows PersistenceProvider subclass to\n+     *  override the default broker alias.\n+     */\n+    protected String getDefaultBrokerAlias() {\n+        return BrokerValue.NON_FINALIZING_ALIAS;\n+    }\n+    \n+    /*\n+     * Return a new instance of Configuration subclass used by entity\n+     * enhancement in ClassTransformerImpl. If OpenJPAConfigurationImpl\n+     * instance is used, configuration options declared in configuration\n+     * sub-class will not be recognized and a warning is posted in the log.\n+     */\n+    protected OpenJPAConfiguration newConfigurationImpl() {\n+        return new OpenJPAConfigurationImpl();\n+    }\n+    \n+    /**\n+     * Java EE 5 class transformer.\n+     */\n+    private static class ClassTransformerImpl\n+        implements ClassTransformer {\n+\n+        private final ClassFileTransformer _trans;\n+\n+        private ClassTransformerImpl(ConfigurationProvider cp, String props, \n+            final ClassLoader tmpLoader, OpenJPAConfiguration conf) {\n+            cp.setInto(conf);\n+            // use the tmp loader for everything\n+            conf.setClassResolver(new ClassResolver() {\n+                public ClassLoader getClassLoader(Class context, \n+                    ClassLoader env) {\n+                    return tmpLoader;\n+                }\n+            });\n+            conf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n+\n+            MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\n+            repos.setResolve(MetaDataModes.MODE_MAPPING, false);\n+            _trans = new PCClassFileTransformer(repos,\n+                Configurations.parseProperties(props), tmpLoader);\n+        }\n+\n+        public byte[] transform(ClassLoader cl, String name,\n+            Class<?> previousVersion, ProtectionDomain pd, byte[] bytes)\n+            throws IllegalClassFormatException {\n+            return _trans.transform(cl, name, previousVersion, pd, bytes);\n+        }\n+\t}\n+}"},{"sha":"2188b0d71c989d835e72ab1171e138ab5aa8b350","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceStrategy.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceStrategy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+///////////////////////////////////////////////////////////////////\n+// NOTE: when adding a new classification, make sure to update the\n+// table in PersistenceMetaDataDefaults\n+///////////////////////////////////////////////////////////////////\n+\n+/**\n+ * Set of field persistence strategies used in JPA.\n+ *\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public enum PersistenceStrategy {\n+    // order matters to match XML spec\n+    BASIC,\n+    MANY_ONE,\n+    ONE_MANY,\n+    ONE_ONE,\n+    MANY_MANY,\n+    EMBEDDED,\n+    TRANSIENT,\n+    // openjpa extensions\n+    PERS,\n+    PERS_COLL,\n+    PERS_MAP,\n+}"},{"sha":"c3bf7dc16f09d948a9ba11481219257e41ecc1ec","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","status":"added","additions":503,"deletions":0,"changes":503,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceUnitInfoImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,503 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.URLDecoder;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.persistence.spi.ClassTransformer;\n+import javax.persistence.spi.PersistenceUnitInfo;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.sql.DataSource;\n+\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.ProductDerivations;\n+import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.MultiClassLoader;\n+import org.apache.openjpa.util.ClassResolver;\n+\n+/**\n+ * Implementation of the {@link PersistenceUnitInfo} interface used by OpenJPA \n+ * when parsing persistence configuration information.\n+ *\n+ * @nojavadoc\n+ */\n+public class PersistenceUnitInfoImpl\n+    implements PersistenceUnitInfo, SourceTracker {\n+\n+    public static final String KEY_PROVIDER = \"javax.persistence.provider\";\n+\n+    private static final Localizer s_loc = Localizer.forPackage\n+        (PersistenceUnitInfoImpl.class);\n+\n+    private String _name;\n+    private final Properties _props = new Properties();\n+    private PersistenceUnitTransactionType _transType =\n+        PersistenceUnitTransactionType.RESOURCE_LOCAL;\n+\n+    private String _providerClassName;\n+    private List<String> _mappingFileNames;\n+    private List<String> _entityClassNames;\n+    private List<URL> _jarFiles;\n+    private String _jtaDataSourceName;\n+    private DataSource _jtaDataSource;\n+    private String _nonJtaDataSourceName;\n+    private DataSource _nonJtaDataSource;\n+    private boolean _excludeUnlisted;\n+    private URL _persistenceXmlFile;\n+\n+    // A persistence unit is defined by a persistence.xml file. The jar\n+    // file or directory whose META-INF directory contains the\n+    // persistence.xml file is termed the root of the persistence unit.\n+    //\n+    // In Java EE, the root of a persistence unit may be one of the following:\n+    // - an EJB-JAR file\n+    // - the WEB-INF/classes directory of a WAR file[38]\n+    // - a jar file in the WEB-INF/lib directory of a WAR file\n+    // - a jar file in the root of the EAR\n+    // - a jar file in the EAR library directory\n+    // - an application client jar file\n+    private URL _root;\n+\n+    public ClassLoader getClassLoader() {\n+        return null;\n+    }\n+\n+    public ClassLoader getNewTempClassLoader() {\n+        return (ClassLoader) AccessController.doPrivileged(J2DoPrivHelper\n+            .newTemporaryClassLoaderAction((ClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction())));\n+    }\n+\n+    public String getPersistenceUnitName() {\n+        return _name;\n+    }\n+\n+    public void setPersistenceUnitName(String emName) {\n+        _name = emName;\n+    }\n+\n+    public String getPersistenceProviderClassName() {\n+        return _providerClassName;\n+    }\n+\n+    public void setPersistenceProviderClassName(String providerClassName) {\n+        _providerClassName = providerClassName;\n+    }\n+\n+    public PersistenceUnitTransactionType getTransactionType() {\n+        return _transType;\n+    }\n+\n+    public void setTransactionType(PersistenceUnitTransactionType transType) {\n+        _transType = transType;\n+    }\n+\n+    public String getJtaDataSourceName() {\n+        return _jtaDataSourceName;\n+    }\n+\n+    public void setJtaDataSourceName(String jta) {\n+        _jtaDataSourceName = jta;\n+        if (jta != null)\n+            _jtaDataSource = null;\n+    }\n+\n+    public DataSource getJtaDataSource() {\n+        return _jtaDataSource;\n+    }\n+\n+    public void setJtaDataSource(DataSource ds) {\n+        _jtaDataSource = ds;\n+        if (ds != null)\n+            _jtaDataSourceName = null;\n+    }\n+\n+    public String getNonJtaDataSourceName() {\n+        return _nonJtaDataSourceName;\n+    }\n+\n+    public void setNonJtaDataSourceName(String nonJta) {\n+        _nonJtaDataSourceName = nonJta;\n+        if (nonJta != null)\n+            _nonJtaDataSource = null;\n+    }\n+\n+    public DataSource getNonJtaDataSource() {\n+        return _nonJtaDataSource;\n+    }\n+\n+    public void setNonJtaDataSource(DataSource ds) {\n+        _nonJtaDataSource = ds;\n+        if (ds != null)\n+            _nonJtaDataSourceName = null;\n+    }\n+\n+    public URL getPersistenceUnitRootUrl() {\n+        return _root;\n+    }\n+\n+    public void setPersistenceUnitRootUrl(URL root) {\n+        _root = root;\n+    }\n+\n+    public boolean excludeUnlistedClasses() {\n+        return _excludeUnlisted;\n+    }\n+\n+    public void setExcludeUnlistedClasses(boolean excludeUnlisted) {\n+        _excludeUnlisted = excludeUnlisted;\n+    }\n+\n+    public List<String> getMappingFileNames() {\n+        return (_mappingFileNames == null)\n+            ? (List<String>) Collections.EMPTY_LIST : _mappingFileNames;\n+    }\n+\n+    public void addMappingFileName(String name) {\n+        if (_mappingFileNames == null)\n+            _mappingFileNames = new ArrayList<String>();\n+        _mappingFileNames.add(name);\n+    }\n+\n+    public List<URL> getJarFileUrls() {\n+        return (_jarFiles == null) ? (List<URL>) Collections.EMPTY_LIST \n+            : _jarFiles;\n+    }\n+\n+    public void addJarFile(URL jar) {\n+        if (_jarFiles == null)\n+            _jarFiles = new ArrayList<URL>();\n+        _jarFiles.add(jar);\n+    }\n+\n+    public void addJarFileName(String name) {\n+        MultiClassLoader loader = (MultiClassLoader) AccessController\n+            .doPrivileged(J2DoPrivHelper.newMultiClassLoaderAction());\n+        loader.addClassLoader(getClass().getClassLoader());\n+        loader.addClassLoader(MultiClassLoader.THREAD_LOADER);\n+        URL url = (URL) AccessController.doPrivileged(\n+            J2DoPrivHelper.getResourceAction(loader, name));\n+        if (url != null) {\n+            addJarFile(url);\n+            return;\n+        }\n+\n+        // jar file is not a resource; check classpath\n+        String[] cp = ((String) AccessController.doPrivileged(\n+            J2DoPrivHelper.getPropertyAction(\"java.class.path\"))) \n+            .split(J2DoPrivHelper.getPathSeparator());\n+        for (int i = 0; i < cp.length; i++) {\n+            if (cp[i].equals(name)\n+                || cp[i].endsWith(File.separatorChar + name)) {\n+                try {\n+                    addJarFile((URL) AccessController\n+                        .doPrivileged(J2DoPrivHelper\n+                            .toURLAction(new File(cp[i]))));\n+                    return;\n+                } catch (PrivilegedActionException pae) {\n+                    break;\n+                } catch (MalformedURLException mue) {\n+                    break;\n+                }\n+            }\n+        }\n+        throw new IllegalArgumentException(s_loc.get(\"bad-jar-name\", name).\n+            getMessage());\n+    }\n+\n+    public List<String> getManagedClassNames() {\n+        return (_entityClassNames == null)\n+            ? (List<String>) Collections.EMPTY_LIST : _entityClassNames;\n+    }\n+\n+    public void addManagedClassName(String name) {\n+        if (_entityClassNames == null)\n+            _entityClassNames = new ArrayList<String>();\n+        _entityClassNames.add(name);\n+    }\n+\n+    public Properties getProperties() {\n+        return _props;\n+    }\n+\n+    public void setProperty(String key, String value) {\n+        _props.setProperty(key, value);\n+    }\n+\n+    public void addTransformer(ClassTransformer transformer) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * The location of the persistence.xml resource. May be null.\n+     */\n+    public URL getPersistenceXmlFileUrl() {\n+        return _persistenceXmlFile;\n+    }\n+\n+    /**\n+     * The location of the persistence.xml resource. May be null.\n+     */\n+    public void setPersistenceXmlFileUrl(URL url) {\n+        _persistenceXmlFile = url;\n+    }\n+\n+    /**\n+     * Load the given user-supplied map of properties into this persistence\n+     * unit.\n+     */\n+    public void fromUserProperties(Map map) {\n+        if (map == null)\n+            return;\n+\n+        Object key;\n+        Object val;\n+        for (Object o : map.entrySet()) {\n+            key = ((Map.Entry) o).getKey();\n+            val = ((Map.Entry) o).getValue();\n+            if (KEY_PROVIDER.equals(key))\n+                setPersistenceProviderClassName((String) val);\n+            else if (\"javax.persistence.transactionType\".equals(key)) {\n+                PersistenceUnitTransactionType ttype;\n+                if (val instanceof String)\n+                    ttype = Enum.valueOf(PersistenceUnitTransactionType.class, \n+                        (String) val);\n+                else\n+                    ttype = (PersistenceUnitTransactionType) val;\n+                setTransactionType(ttype);\n+            } else if (\"javax.persistence.jtaDataSource\".equals(key)) {\n+                if (val instanceof String)\n+                    setJtaDataSourceName((String) val);\n+                else\n+                    setJtaDataSource((DataSource) val);\n+            } else if (\"javax.persistence.nonJtaDataSource\".equals(key)) {\n+                if (val instanceof String)\n+                    setNonJtaDataSourceName((String) val);\n+                else\n+                    setNonJtaDataSource((DataSource) val);\n+            } else\n+                _props.put(key, val);\n+        }\n+    }\n+\n+    /**\n+     * Return a {@link Map} containing the properties necessary to create\n+     * a {@link Configuration} that reflects the information in this\n+     * persistence unit info.\n+     */\n+    public Map toOpenJPAProperties() {\n+        return toOpenJPAProperties(this);\n+    }\n+\n+    /**\n+     * Return a {@link Map} containing the properties necessary to create\n+     * a {@link Configuration} that reflects the information in the given\n+     * persistence unit info.\n+     */\n+    public static Map toOpenJPAProperties(PersistenceUnitInfo info) {\n+        Map map = new HashMap();\n+        Set<String> added = new HashSet<String>();\n+        if (info.getTransactionType() == PersistenceUnitTransactionType.JTA)\n+            put(map, added, \"TransactionMode\", \"managed\");\n+\n+        boolean hasJta = false;\n+        DataSource ds = info.getJtaDataSource();\n+        if (ds != null) {\n+            put(map, added, \"ConnectionFactory\", ds);\n+            put(map, added, \"ConnectionFactoryMode\", \"managed\");\n+            hasJta = true;\n+        } else if (info instanceof PersistenceUnitInfoImpl\n+            && ((PersistenceUnitInfoImpl) info).getJtaDataSourceName() != null){\n+            put(map, added, \"ConnectionFactoryName\", ((PersistenceUnitInfoImpl)\n+                info).getJtaDataSourceName());\n+            put(map, added, \"ConnectionFactoryMode\", \"managed\");\n+            hasJta = true;\n+        }\n+\n+        ds = info.getNonJtaDataSource();\n+        if (ds != null) {\n+            if (!hasJta)\n+                put(map, added, \"ConnectionFactory\", ds);\n+            else\n+                put(map, added, \"ConnectionFactory2\", ds);\n+        } else if (info instanceof PersistenceUnitInfoImpl\n+            && ((PersistenceUnitInfoImpl) info).getNonJtaDataSourceName()\n+            != null) {\n+            String nonJtaName = ((PersistenceUnitInfoImpl) info).\n+                getNonJtaDataSourceName();\n+            if (!hasJta)\n+                put(map, added, \"ConnectionFactoryName\", nonJtaName);\n+            else\n+                put(map, added, \"ConnectionFactory2Name\", nonJtaName);\n+        }\n+\n+        if (info.getClassLoader() != null)\n+            put(map, added, \"ClassResolver\", new ClassResolverImpl(\n+                info.getClassLoader()));\n+\n+        Properties props = info.getProperties();\n+        if (props != null) {\n+\n+            // remove any of the things that were set above\n+            for (String key : added) {\n+                if (Configurations.containsProperty(key, props))\n+                    Configurations.removeProperty(key, props);\n+            }\n+\n+            // add all the non-conflicting props in the <properties> section\n+            map.putAll(props);\n+\n+            // this isn't a real config property; remove it\n+            map.remove(PersistenceProviderImpl.CLASS_TRANSFORMER_OPTIONS);\n+        }\n+\n+        if (!Configurations.containsProperty(\"Id\", map))\n+            map.put(\"openjpa.Id\", info.getPersistenceUnitName());\n+        \n+        Properties metaFactoryProps = new Properties();\n+        if (info.getManagedClassNames() != null \n+            && !info.getManagedClassNames().isEmpty()) {\n+            StringBuffer types = new StringBuffer();\n+            for (String type : info.getManagedClassNames()) {\n+                if (types.length() > 0)\n+                    types.append(';');\n+                types.append(type);\n+            }\n+            metaFactoryProps.put(\"Types\", types.toString());\n+        }\n+        if (info.getJarFileUrls() != null && !info.getJarFileUrls().isEmpty()\n+            || (!info.excludeUnlistedClasses()\n+            && info.getPersistenceUnitRootUrl() != null)) {\n+            StringBuffer jars = new StringBuffer();\n+            String file = null;\n+            if (!info.excludeUnlistedClasses()\n+                && info.getPersistenceUnitRootUrl() != null) {\n+                URL url = info.getPersistenceUnitRootUrl();\n+                if (\"file\".equals(url.getProtocol())) // exploded jar?\n+                    file = URLDecoder.decode(url.getPath());\n+                else\n+                    jars.append(url);\n+            }\n+            for (URL jar : info.getJarFileUrls()) {\n+                if (jars.length() > 0)\n+                    jars.append(';');\n+                jars.append(jar);\n+            }\n+            if (file != null)\n+                metaFactoryProps.put(\"Files\", file);\n+            if (jars.length() != 0)\n+                metaFactoryProps.put(\"URLs\", jars.toString());\n+        }\n+        if (info.getMappingFileNames() != null\n+            && !info.getMappingFileNames().isEmpty()) {\n+            StringBuffer rsrcs = new StringBuffer();\n+            for (String rsrc : info.getMappingFileNames()) {\n+                if (rsrcs.length() > 0)\n+                    rsrcs.append(';');\n+                rsrcs.append(rsrc);\n+            }\n+            metaFactoryProps.put(\"Resources\", rsrcs.toString());\n+        }\n+\n+        // set persistent class locations as properties of metadata factory,\n+        // combining them with any existing metadata factory props\n+        if (!metaFactoryProps.isEmpty()) {\n+            String key = ProductDerivations.getConfigurationKey\n+                (\"MetaDataFactory\", map);\n+            map.put(key, Configurations.combinePlugins((String) map.get(key),\n+                Configurations.serializeProperties(metaFactoryProps)));\n+        }\n+        \n+        // always record provider name for product derivations to access\n+        if (info.getPersistenceProviderClassName() != null)\n+            map.put(KEY_PROVIDER, info.getPersistenceProviderClassName());\n+        return map;\n+    }\n+\n+    private static void put(Map map, Set added, String key, Object val) {\n+        map.put(\"openjpa.\" + key, val);\n+        added.add(key);\n+    }\n+\n+    // --------------------\n+\n+    public File getSourceFile() {\n+        if (_persistenceXmlFile == null)\n+            return null;\n+\n+        try {\n+            return new File(_persistenceXmlFile.toURI());\n+        } catch (URISyntaxException e) {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    public Object getSourceScope() {\n+        return null;\n+    }\n+\n+    public int getSourceType() {\n+        return SRC_XML;\n+    }\n+    \n+    public int getLineNumber() {\n+        return 0;\n+    }\n+        \n+    public int getColNumber() {\n+        return 0;\n+    }\n+\n+    public String getResourceName() {\n+        return \"PersistenceUnitInfo:\" + _name;\n+    }\n+\n+    /**\n+     * Simple class resolver built around the persistence unit loader.\n+     */\n+    public static class ClassResolverImpl\n+        implements ClassResolver {\n+\n+        private final ClassLoader _loader;\n+\n+        public ClassResolverImpl(ClassLoader loader) {\n+            _loader = loader;\n+        }\n+\n+        public ClassLoader getClassLoader(Class ctx, ClassLoader env) {\n+            return _loader;\n+        }\n+\t}\n+}"},{"sha":"c75264be87a6f15dd8262b9bdc6a28f1acdd5acf","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Persistent.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+import javax.persistence.CascadeType;\n+import javax.persistence.FetchType;\n+\n+/**\n+ * Metadata annotation for a persistent field.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface Persistent {\n+\n+    String mappedBy() default \"\";\n+\n+    CascadeType[] cascade() default {};\n+\n+    boolean optional() default true;\n+\n+    boolean embedded() default false;\n+\n+    FetchType fetch() default FetchType.EAGER;\n+}"},{"sha":"568f68887ba4b3ee2f52ce1d444466b66f11df2c","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentCollection.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+import javax.persistence.CascadeType;\n+import javax.persistence.FetchType;\n+\n+/**\n+ * Metadata annotation for a persistent collection field. This should be\n+ * used to annotate array field types as well as fields of type\n+ * {@link java.util.Collection}.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface PersistentCollection {\n+\n+    String mappedBy() default \"\";\n+\n+    Class elementType() default void.class;\n+\n+    CascadeType[] elementCascade() default {};\n+\n+    boolean elementEmbedded() default false;\n+\n+    FetchType fetch() default FetchType.LAZY;\n+}"},{"sha":"fcd266d6264c35045d3cbc8cc67cd30245bb95ed","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistentMap.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+import javax.persistence.CascadeType;\n+import javax.persistence.FetchType;\n+\n+/**\n+ * Metadata annotation for a persistent map field.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface PersistentMap {\n+\n+    Class keyType() default void.class;\n+\n+    Class elementType() default void.class;\n+\n+    CascadeType[] keyCascade() default {};\n+\n+    CascadeType[] elementCascade() default {};\n+\n+    boolean keyEmbedded() default false;\n+\n+    boolean elementEmbedded() default false;\n+\n+    FetchType fetch() default FetchType.LAZY;\n+}"},{"sha":"3c1a68d306f2061f9763e46d692e763ca757681c","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"added","additions":593,"deletions":0,"changes":593,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,593 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.Query;\n+import javax.persistence.TemporalType;\n+\n+import org.apache.commons.collections.map.LinkedMap;\n+import org.apache.openjpa.enhance.Reflection;\n+import org.apache.openjpa.kernel.DelegatingQuery;\n+import org.apache.openjpa.kernel.DelegatingResultList;\n+import org.apache.openjpa.kernel.Filters;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.QueryOperations;\n+import org.apache.openjpa.kernel.exps.AggregateListener;\n+import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.lib.rop.ResultList;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.RuntimeExceptionTranslator;\n+\n+/**\n+ * Implementation of {@link Query} interface.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class QueryImpl\n+    implements OpenJPAQuerySPI, Serializable {\n+\n+    private static final Object[] EMPTY_ARRAY = new Object[0];\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (QueryImpl.class);\n+\n+    private final DelegatingQuery _query;\n+    private transient EntityManagerImpl _em;\n+    private transient FetchPlan _fetch;\n+\n+    private Map _named;\n+    private List _positional;\n+\n+    /**\n+     * Constructor; supply factory exception translator and delegate.\n+     * \n+     * @param em\n+     *            The EntityManager which created this query\n+     * @param ret\n+     *            Exception translater for this query\n+     * @param query\n+     *            The underlying \"kernel\" query.\n+     */\n+    public QueryImpl(EntityManagerImpl em, RuntimeExceptionTranslator ret,\n+        org.apache.openjpa.kernel.Query query) {\n+        _em = em;\n+        _query = new DelegatingQuery(query, ret);\n+    }\n+    \n+    /**\n+     * Constructor; supply factory and delegate.\n+     * @deprecated\n+     */\n+    public QueryImpl(EntityManagerImpl em, org.apache.openjpa.kernel.Query query) {\n+        this(em, null, query);\n+    }\n+\n+    /**\n+\t * Delegate.\n+\t */\n+    public org.apache.openjpa.kernel.Query getDelegate() {\n+        return _query.getDelegate();\n+    }\n+\n+    public OpenJPAEntityManager getEntityManager() {\n+        return _em;\n+    }\n+\n+    public String getLanguage() {\n+        return _query.getLanguage();\n+    }\n+\n+    public QueryOperationType getOperation() {\n+        return QueryOperationType.fromKernelConstant(_query.getOperation());\n+    }\n+\n+    public FetchPlan getFetchPlan() {\n+        _em.assertNotCloseInvoked();\n+        _query.assertNotSerialized();\n+        _query.lock();\n+        try {\n+            if (_fetch == null)\n+                _fetch = ((EntityManagerFactoryImpl) _em.\n+                    getEntityManagerFactory()).toFetchPlan(_query.getBroker(),\n+                    _query.getFetchConfiguration());\n+            return _fetch;\n+        } finally {\n+            _query.unlock();\n+        }\n+    }\n+\n+    public String getQueryString() {\n+        return _query.getQueryString();\n+    }\n+\n+    public boolean getIgnoreChanges() {\n+        return _query.getIgnoreChanges();\n+    }\n+\n+    public OpenJPAQuery setIgnoreChanges(boolean ignore) {\n+        _em.assertNotCloseInvoked();\n+        _query.setIgnoreChanges(ignore);\n+        return this;\n+    }\n+\n+    public OpenJPAQuery addFilterListener(FilterListener listener) {\n+        _em.assertNotCloseInvoked();\n+        _query.addFilterListener(listener);\n+        return this;\n+    }\n+\n+    public OpenJPAQuery removeFilterListener(FilterListener listener) {\n+        _em.assertNotCloseInvoked();\n+        _query.removeFilterListener(listener);\n+        return this;\n+    }\n+\n+    public OpenJPAQuery addAggregateListener(AggregateListener listener) {\n+        _em.assertNotCloseInvoked();\n+        _query.addAggregateListener(listener);\n+        return this;\n+    }\n+\n+    public OpenJPAQuery removeAggregateListener(AggregateListener listener) {\n+        _em.assertNotCloseInvoked();\n+        _query.removeAggregateListener(listener);\n+        return this;\n+    }\n+\n+    public Collection getCandidateCollection() {\n+        return _query.getCandidateCollection();\n+    }\n+\n+    public OpenJPAQuery setCandidateCollection(Collection coll) {\n+        _em.assertNotCloseInvoked();\n+        _query.setCandidateCollection(coll);\n+        return this;\n+    }\n+\n+    public Class getResultClass() {\n+        Class res = _query.getResultType();\n+        if (res != null)\n+            return res;\n+        return _query.getCandidateType();\n+    }\n+\n+    public OpenJPAQuery setResultClass(Class cls) {\n+        _em.assertNotCloseInvoked();\n+        if (ImplHelper.isManagedType(_em.getConfiguration(), cls))\n+            _query.setCandidateType(cls, true);\n+        else\n+            _query.setResultType(cls);\n+        return this;\n+    }\n+\n+    public boolean hasSubclasses() {\n+        return _query.hasSubclasses();\n+    }\n+\n+    public OpenJPAQuery setSubclasses(boolean subs) {\n+        _em.assertNotCloseInvoked();\n+        Class cls = _query.getCandidateType();\n+        _query.setCandidateExtent(_query.getBroker().newExtent(cls, subs));\n+        return this;\n+    }\n+\n+    public int getFirstResult() {\n+        return asInt(_query.getStartRange());\n+    }\n+\n+    public OpenJPAQuery setFirstResult(int startPosition) {\n+        _em.assertNotCloseInvoked();\n+        long end;\n+        if (_query.getEndRange() == Long.MAX_VALUE)\n+            end = Long.MAX_VALUE;\n+        else\n+            end = startPosition +\n+                (_query.getEndRange() - _query.getStartRange());\n+        _query.setRange(startPosition, end);\n+        return this;\n+    }\n+\n+    public int getMaxResults() {\n+        return asInt(_query.getEndRange() - _query.getStartRange());\n+    }\n+\n+    public OpenJPAQuery setMaxResults(int max) {\n+        _em.assertNotCloseInvoked();\n+        long start = _query.getStartRange();\n+        if (max == Integer.MAX_VALUE)\n+            _query.setRange(start, Long.MAX_VALUE);\n+        else\n+            _query.setRange(start, start + max);\n+        return this;\n+    }\n+\n+    public OpenJPAQuery compile() {\n+        _em.assertNotCloseInvoked();\n+        _query.compile();\n+        return this;\n+    }\n+\n+    private Object execute() {\n+        if ((!isNative()) &&\n+            _query.getOperation() != QueryOperations.OP_SELECT)\n+            throw new InvalidStateException(_loc.get(\"not-select-query\",\n+                _query.getQueryString()), null, null, false);\n+\n+        validateParameters();\n+\n+        // handle which types of parameters we are using, if any\n+        if (_positional != null)\n+            return _query.execute(_positional.toArray());\n+        if (_named != null)\n+            return _query.execute(_named);\n+        return _query.execute();\n+    }\n+\n+    /**\n+     * Validate that the types of the parameters are correct.\n+     */\n+    private void validateParameters() {\n+        if (_positional != null) {\n+            LinkedMap types = _query.getParameterTypes();\n+            for (int i = 0,\n+                size = Math.min(_positional.size(), types.size());\n+                i < size; i++)\n+                validateParameter(String.valueOf(i),\n+                    (Class) types.getValue(i), _positional.get(i));\n+        } else if (_named != null) {\n+            Map types = _query.getParameterTypes();\n+            for (Iterator i = _named.entrySet().iterator(); i.hasNext();) {\n+                Map.Entry entry = (Map.Entry) i.next();\n+                String name = (String) entry.getKey();\n+                validateParameter(name, (Class) types.get(name),\n+                    entry.getValue());\n+            }\n+        }\n+    }\n+\n+    private void validateParameter(String paramDesc, Class type, Object param) {\n+        // null parameters are allowed, so are not validated\n+        if (param == null || type == null)\n+            return;\n+\n+        // check the parameter against the wrapped type\n+        if (!Filters.wrap(type).isInstance(param))\n+            throw new ArgumentException(_loc.get(\"bad-param-type\",\n+                paramDesc, param.getClass().getName(), type.getName()),\n+                null, null, false);\n+    }\n+\n+    public List getResultList() {\n+        _em.assertNotCloseInvoked();\n+        Object ob = execute();\n+        if (ob instanceof List) {\n+            List ret = (List) ob;\n+            if (ret instanceof ResultList)\n+                return new DelegatingResultList((ResultList) ret,\n+                    PersistenceExceptions.getRollbackTranslator(_em));\n+            else\n+                return ret;\n+        }\n+\n+        return Collections.singletonList(ob);\n+    }\n+\n+    /**\n+     * Execute a query that returns a single result.\n+     */\n+    public Object getSingleResult() {\n+        _em.assertNotCloseInvoked();\n+        // temporarily set query to unique so that a single result is validated\n+        // and returned; unset again in case the user executes query again\n+        // via getResultList\n+        _query.setUnique(true);\n+        try {\n+            return execute();\n+        } finally {\n+            _query.setUnique(false);\n+        }\n+    }\n+\n+    public int executeUpdate() {\n+        _em.assertNotCloseInvoked();\n+        if (_query.getOperation() == QueryOperations.OP_DELETE) {\n+            // handle which types of parameters we are using, if any\n+            if (_positional != null)\n+                return asInt(_query.deleteAll(_positional.toArray()));\n+            if (_named != null)\n+                return asInt(_query.deleteAll(_named));\n+            return asInt(_query.deleteAll());\n+        }\n+        if (_query.getOperation() == QueryOperations.OP_UPDATE) {\n+            // handle which types of parameters we are using, if any\n+            if (_positional != null)\n+                return asInt(_query.updateAll(_positional.toArray()));\n+            if (_named != null)\n+                return asInt(_query.updateAll(_named));\n+            return asInt(_query.updateAll());\n+        }\n+        throw new InvalidStateException(_loc.get(\"not-update-delete-query\",\n+            _query.getQueryString()), null, null, false);\n+    }\n+\n+    /**\n+     * Cast the specified long down to an int, first checking for overflow.\n+     */\n+    private static int asInt(long l) {\n+        if (l > Integer.MAX_VALUE)\n+            return Integer.MAX_VALUE;\n+        if (l < Integer.MIN_VALUE) // unlikely, but we might as well check\n+            return Integer.MIN_VALUE;\n+        return (int) l;\n+    }\n+\n+    public FlushModeType getFlushMode() {\n+        return EntityManagerImpl.fromFlushBeforeQueries(_query.\n+            getFetchConfiguration().getFlushBeforeQueries());\n+    }\n+\n+    public OpenJPAQuery setFlushMode(FlushModeType flushMode) {\n+        _em.assertNotCloseInvoked();\n+        _query.getFetchConfiguration().setFlushBeforeQueries\n+            (EntityManagerImpl.toFlushBeforeQueries(flushMode));\n+        return this;\n+    }\n+\n+    public OpenJPAQuery setHint(String key, Object value) {\n+        _em.assertNotCloseInvoked();\n+        if (key == null || !key.startsWith(\"openjpa.\"))\n+            return this;\n+        String k = key.substring(\"openjpa.\".length());\n+\n+        try {\n+            if (\"Subclasses\".equals(k)) {\n+                if (value instanceof String)\n+                    value = Boolean.valueOf((String) value);\n+                setSubclasses(((Boolean) value).booleanValue());\n+            } else if (\"FilterListener\".equals(k))\n+                addFilterListener(Filters.hintToFilterListener(value,\n+                    _query.getBroker().getClassLoader()));\n+            else if (\"FilterListeners\".equals(k)) {\n+                FilterListener[] arr = Filters.hintToFilterListeners(value,\n+                    _query.getBroker().getClassLoader());\n+                for (int i = 0; i < arr.length; i++)\n+                    addFilterListener(arr[i]);\n+            } else if (\"AggregateListener\".equals(k))\n+                addAggregateListener(Filters.hintToAggregateListener(value,\n+                    _query.getBroker().getClassLoader()));\n+            else if (\"FilterListeners\".equals(k)) {\n+                AggregateListener[] arr = Filters.hintToAggregateListeners\n+                    (value, _query.getBroker().getClassLoader());\n+                for (int i = 0; i < arr.length; i++)\n+                    addAggregateListener(arr[i]);\n+            } else if (k.startsWith(\"FetchPlan.\")) {\n+                k = k.substring(\"FetchPlan.\".length());\n+                hintToSetter(getFetchPlan(), k, value);\n+            } else if (k.startsWith(\"hint.\")) {\n+                if (\"hint.OptimizeResultCount\".equals(k)) {\n+                    if (value instanceof String) {\n+                        try {\n+                            value = new Integer((String) value);\n+                        } catch (NumberFormatException nfe) {\n+                        }\n+                    }\n+                    if (!(value instanceof Number) \n+                        || ((Number) value).intValue() < 0)\n+                        throw new ArgumentException(_loc.get\n+                            (\"bad-query-hint-value\", key, value), null, null, \n+                            false);\n+                }\n+                _query.getFetchConfiguration().setHint(key, value);\n+            }\n+            else\n+                throw new ArgumentException(_loc.get(\"bad-query-hint\", key),\n+                    null, null, false);\n+            return this;\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    private void hintToSetter(FetchPlan fetchPlan, String k, Object value) {\n+        if (fetchPlan == null || k == null)\n+            return;\n+\n+        Method setter = Reflection.findSetter(fetchPlan.getClass(), k, true);\n+        Class paramType = setter.getParameterTypes()[0];\n+        if (Enum.class.isAssignableFrom(paramType) && value instanceof String)\n+            value = Enum.valueOf(paramType, (String) value);\n+        \n+        Filters.hintToSetter(fetchPlan, k, value);\n+    }\n+\n+    public OpenJPAQuery setParameter(int position, Calendar value,\n+        TemporalType t) {\n+        return setParameter(position, value);\n+    }\n+\n+    public OpenJPAQuery setParameter(int position, Date value,\n+        TemporalType type) {\n+        return setParameter(position, value);\n+    }\n+\n+    public OpenJPAQuery setParameter(int position, Object value) {\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n+        _query.lock();\n+        try {\n+        \tif (isNative() && position < 1) {\n+        \t\tthrow new IllegalArgumentException(_loc.get(\"bad-pos-params\", \n+        \t\t      position, _query.getQueryString()).toString());\n+        \t}\n+            // not allowed to mix positional and named parameters (EDR2 3.6.4)\n+            if (_named != null)\n+                throw new InvalidStateException(_loc.get\n+                    (\"no-pos-named-params-mix\", _query.getQueryString()),\n+                    null, null, false);\n+\n+            if (position < 1)\n+                throw new InvalidStateException(_loc.get\n+                    (\"illegal-index\", position), null, null, false);\n+\n+            if (_positional == null)\n+                _positional = new ArrayList();\n+\n+            // make sure it is at least the requested size\n+            while (_positional.size() < position)\n+                _positional.add(null);\n+\n+            // note that we add it to position - 1, since setPosition\n+            // starts at 1, while List starts at 0\n+            _positional.set(position - 1, value);\n+            return this;\n+        } finally {\n+            _query.unlock();\n+        }\n+    }\n+\n+    public OpenJPAQuery setParameter(String name, Calendar value,\n+        TemporalType t) {\n+        return setParameter(name, value);\n+    }\n+\n+    public OpenJPAQuery setParameter(String name, Date value,\n+        TemporalType type) {\n+        return setParameter(name, value);\n+    }\n+\n+    public OpenJPAQuery setParameter(String name, Object value) {\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n+        _query.lock();\n+        try {\n+        \tif (isNative()) {\n+        \t\tthrow new IllegalArgumentException(_loc.get(\"no-named-params\", \n+        \t\t    name, _query.getQueryString()).toString());\n+        \t}\n+            // not allowed to mix positional and named parameters (EDR2 3.6.4)\n+            if (_positional != null)\n+                throw new InvalidStateException(_loc.get\n+                    (\"no-pos-named-params-mix\", _query.getQueryString()),\n+                    null, null, false);\n+\n+            if (_named == null)\n+                _named = new HashMap();\n+            _named.put(name, value);\n+            return this;\n+        } finally {\n+            _query.unlock();\n+        }\n+    }\n+    \n+    public boolean isNative() {\n+    \treturn QueryLanguages.LANG_SQL.equals(getLanguage());\n+    }\n+\n+    public boolean hasPositionalParameters() {\n+        return _positional != null;\n+    }\n+\n+    public Object[] getPositionalParameters() {\n+        _query.lock();\n+        try {\n+            return (_positional == null) ? EMPTY_ARRAY : _positional.toArray();\n+        } finally {\n+            _query.unlock();\n+        }\n+    }\n+\n+    public OpenJPAQuery setParameters(Object... params) {\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n+        _query.lock();\n+        try {\n+            _positional = null;\n+            _named = null;\n+            if (params != null)\n+                for (int i = 0; i < params.length; i++)\n+                    setParameter(i + 1, params[i]);\n+            return this;\n+        } finally {\n+            _query.unlock();\n+        }\n+    }\n+\n+    public Map getNamedParameters() {\n+        _query.lock();\n+        try {\n+            return (_named == null) ? Collections.EMPTY_MAP\n+                : Collections.unmodifiableMap(_named);\n+        } finally {\n+            _query.unlock();\n+        }\n+    }\n+\n+    public OpenJPAQuery setParameters(Map params) {\n+        _query.assertOpen();\n+        _em.assertNotCloseInvoked();\n+        _query.lock();\n+        try {\n+            _positional = null;\n+            _named = null;\n+            if (params != null)\n+                for (Map.Entry e : (Set<Map.Entry>) params.entrySet())\n+                    setParameter((String) e.getKey(), e.getValue());\n+            return this;\n+        } finally {\n+            _query.unlock();\n+        }\n+    }\n+\n+    public OpenJPAQuery closeAll() {\n+        _query.closeAll();\n+        return this;\n+    }\n+\n+    public String[] getDataStoreActions(Map params) {\n+        return _query.getDataStoreActions(params);\n+    }\n+\n+    public int hashCode() {\n+        return _query.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof QueryImpl))\n+            return false;\n+        return _query.equals(((QueryImpl) other)._query);\n+\t}\n+}"},{"sha":"5ff4163ca857cb49fa089ac7e1d5ef74badd9252","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,59 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.QueryOperations;\r\n+\r\n+/**\r\n+ * The possible operations that a query can perform.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum QueryOperationType {\r\n+    SELECT(QueryOperations.OP_SELECT),\r\n+    DELETE(QueryOperations.OP_DELETE),\r\n+    UPDATE(QueryOperations.OP_UPDATE);\r\n+\r\n+    private final int queryOperationConstant;\r\n+\r\n+    private QueryOperationType(int value) {\r\n+        queryOperationConstant = value;\r\n+    }\r\n+\r\n+    int toKernelConstant() {\r\n+        return queryOperationConstant;\r\n+    }\r\n+\r\n+    static QueryOperationType fromKernelConstant(int kernelConstant) {\r\n+        switch (kernelConstant) {\r\n+            case QueryOperations.OP_SELECT:\r\n+                return SELECT;\r\n+\r\n+            case QueryOperations.OP_UPDATE:\r\n+                return UPDATE;\r\n+\r\n+            case QueryOperations.OP_DELETE:\r\n+                return DELETE;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(kernelConstant + \"\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"5713d64f4964c4953e5828713de61234fd49b1f8","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCache.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.datacache.QueryCache;\n+\n+/**\n+ * Query result cache.\n+ *\n+ * @author Abe White\n+ * @since 0.4.1\n+ * @published\n+ */\n+public interface QueryResultCache {\n+\n+    /**\n+     * Pin the given query's result to the cache.\n+     */\n+    public void pin(Query q);\n+\n+    /**\n+     * Unpin a previously-pinned query result.\n+     */\n+    public void unpin(Query q);\n+\n+    /**\n+     * Evict a query result from the cache.\n+     */\n+    public void evict(Query q);\n+\n+    /**\n+     * Clear the cache.\n+     */\n+    public void evictAll();\n+\n+    /**\n+     * Evict all result for queries involving the given class.\n+     */\n+    public void evictAll(Class cls);\n+\n+    /**\n+     * @deprecated cast to {@link QueryResultCacheImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public QueryCache getDelegate();\n+}"},{"sha":"11fa908c2aa4b32acf1ad57151a695ec1f88441e","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryResultCacheImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Collections;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.datacache.DelegatingQueryCache;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.QueryKey;\n+import org.apache.openjpa.datacache.TypesChangedEvent;\n+\n+/**\n+ * Implements Query result cache via delegation to QueryCache.\n+ *\n+ * @author Abe White\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class QueryResultCacheImpl\n+\timplements QueryResultCache {\n+\n+    private final DelegatingQueryCache _cache;\n+\n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public QueryResultCacheImpl(QueryCache cache) {\n+        _cache = new DelegatingQueryCache(cache,\n+            PersistenceExceptions.TRANSLATOR);\n+    }\n+\n+    /**\n+     * Delegate.\n+     */\n+    public QueryCache getDelegate() {\n+        return _cache.getDelegate();\n+    }\n+\n+    public void pin(Query q) {\n+        if (_cache.getDelegate() != null)\n+            _cache.pin(toQueryKey(q));\n+    }\n+\n+    public void unpin(Query q) {\n+        if (_cache.getDelegate() != null)\n+            _cache.unpin(toQueryKey(q));\n+    }\n+\n+    public void evict(Query q) {\n+        if (_cache.getDelegate() != null)\n+            _cache.remove(toQueryKey(q));\n+    }\n+\n+    public void evictAll() {\n+        _cache.clear();\n+    }\n+\n+    public void evictAll(Class cls) {\n+        _cache.onTypesChanged(new TypesChangedEvent(this,\n+            Collections.singleton(cls)));\n+    }\n+\n+    /**\n+     * Return a cache key for the given query.\n+     */\n+    private QueryKey toQueryKey(Query q) {\n+        QueryImpl impl = (QueryImpl) q;\n+        if (impl.hasPositionalParameters())\n+            return QueryKey.newInstance(impl.getDelegate(),\n+                impl.getPositionalParameters());\n+        return QueryKey.newInstance(impl.getDelegate(),\n+            impl.getNamedParameters());\n+    }\n+\n+    public int hashCode() {\n+        return _cache.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof QueryResultCacheImpl))\n+            return false;\n+        return _cache.equals(((QueryResultCacheImpl) other)._cache);\n+\t}\n+}"},{"sha":"873b5889ac405c5726d56dac1a736110ac181fff","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ReadOnly.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Marks a field read-only.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface ReadOnly {\n+\n+    UpdateAction value() default UpdateAction.RESTRICT;\n+}"},{"sha":"12c0dd51853469598406ac0742184b6726d588c2","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,60 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import org.apache.openjpa.kernel.RestoreState;\r\n+\r\n+/**\r\n+ * The possible settings for the restore behavior after transaction rollback\r\n+ * of an {@link OpenJPAEntityManager}.\r\n+ *\r\n+ * @since 1.0.0\r\n+ * @published\r\n+ */\r\n+public enum RestoreStateType {\r\n+    NONE(RestoreState.RESTORE_NONE),\r\n+    IMMUTABLE(RestoreState.RESTORE_IMMUTABLE),\r\n+    ALL(RestoreState.RESTORE_ALL);\r\n+\r\n+    private final int restoreStateConstant;\r\n+\r\n+    private RestoreStateType(int value) {\r\n+        restoreStateConstant = value;\r\n+    }\r\n+\r\n+    int toKernelConstant() {\r\n+        return restoreStateConstant;\r\n+    }\r\n+\r\n+    static RestoreStateType fromKernelConstant(int kernelConstant) {\r\n+        switch (kernelConstant) {\r\n+            case RestoreState.RESTORE_NONE:\r\n+                return NONE;\r\n+\r\n+            case RestoreState.RESTORE_IMMUTABLE:\r\n+                return IMMUTABLE;\r\n+\r\n+            case RestoreState.RESTORE_ALL:\r\n+                return ALL;\r\n+\r\n+            default:\r\n+                throw new IllegalArgumentException(kernelConstant + \"\");\r\n+        }\r\n+    }\r\n+}\r"},{"sha":"035e138c78a3caf94b77816332691e026592631d","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RollbackException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.Exceptions;\n+\n+/**\n+ * Rollback occurred on attempt to commit.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class RollbackException\n+    extends javax.persistence.RollbackException\n+    implements Serializable, ExceptionInfo {\n+\n+    private transient Throwable[] _nested;\n+\n+    public RollbackException(Exception e) {\n+        super(e.getMessage());\n+        _nested = new Throwable[]{ e };\n+    }\n+\n+    public int getType() {\n+        return STORE;\n+    }\n+\n+    public int getSubtype() {\n+        return GENERAL;\n+    }\n+\n+    public boolean isFatal() {\n+        return true;\n+    }\n+\n+    public Throwable getCause() {\n+        return PersistenceExceptions.getCause(_nested);\n+    }\n+\n+    public Throwable[] getNestedThrowables() {\n+        return _nested;\n+    }\n+\n+    public Object getFailedObject() {\n+        return null;\n+    }\n+\n+    public String toString() {\n+        return Exceptions.toString(this);\n+    }\n+\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _nested = (Throwable[]) in.readObject();\n+    }\n+}\n+"},{"sha":"dbe381a1a6eddd78e0ea381691c7aa64ea54f83e","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCache.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Collection;\n+\n+import org.apache.openjpa.datacache.DataCache;\n+\n+/**\n+ * Represents the L2 cache over the data store.\n+ *\n+ * @author Abe White\n+ * @since 0.4.1\n+ * @published\n+ */\n+public interface StoreCache {\n+\n+    public static final String NAME_DEFAULT = DataCache.NAME_DEFAULT;\n+\n+    /**\n+     * Whether the cache contains data for the given oid.\n+     */\n+    public boolean contains(Class cls, Object oid);\n+\n+    /**\n+     * Whether the cache contains data for the given oids.\n+     */\n+    public boolean containsAll(Class cls, Object... oids);\n+\n+    /**\n+     * Whether the cache contains data for the given oids.\n+     */\n+    public boolean containsAll(Class cls, Collection oids);\n+\n+    /**\n+     * Pin the data for the given oid to the cache.\n+     */\n+    public void pin(Class cls, Object oid);\n+\n+    /**\n+     * Pin the data for the given oids to the cache.\n+     */\n+    public void pinAll(Class cls, Object... oids);\n+\n+    /**\n+     * Pin the data for the given oids to the cache.\n+     */\n+    public void pinAll(Class cls, Collection oids);\n+\n+    /**\n+     * Unpin the data for the given oid from the cache.\n+     */\n+    public void unpin(Class cls, Object oid);\n+\n+    /**\n+     * Unpin the data for the given oids from the cache.\n+     */\n+    public void unpinAll(Class cls, Object... oids);\n+\n+    /**\n+     * Unpin the data for the given oids from the cache.\n+     */\n+    public void unpinAll(Class cls, Collection oids);\n+\n+    /**\n+     * Remove data for the given oid from the cache.\n+     */\n+    public void evict(Class cls, Object oid);\n+    /**\n+     * Remove data for the given oids from the cache.\n+     */\n+    public void evictAll(Class cls, Object... oids);\n+\n+    /**\n+     * Remove data for the given oids from the cache.\n+     */\n+    public void evictAll(Class cls, Collection oids);\n+\n+    /**\n+     * Clear the cache.\n+     */\n+    public void evictAll();\n+\n+    /**\n+     * @deprecated cast to {@link StoreCacheImpl} instead. This\n+     * method pierces the published-API boundary, as does the SPI cast.\n+     */\n+    public DataCache getDelegate();\n+}"},{"sha":"31b0f45f49d8aa28c953d6642ed7fc41a6aa3d4a","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/StoreCacheImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.Collection;\n+\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.DelegatingDataCache;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+\n+/**\n+ * Implements the L2 cache over the data store via delegation to DataCache.\n+ *\n+ * @author Abe White\n+ * @since 0.4.1\n+ * @nojavadoc\n+ */\n+public class StoreCacheImpl \n+\timplements StoreCache {\n+\n+    private final MetaDataRepository _repos;\n+    private final DelegatingDataCache _cache;\n+\n+    \n+    /**\n+     * Constructor; supply delegate.\n+     */\n+    public StoreCacheImpl(EntityManagerFactoryImpl emf, DataCache cache) {\n+        _repos = emf.getConfiguration().getMetaDataRepositoryInstance();\n+        _cache = new DelegatingDataCache(cache,\n+            PersistenceExceptions.TRANSLATOR);\n+    }\n+\n+    /**\n+     * Delegate.\n+     */\n+    public DataCache getDelegate() {\n+        return _cache.getDelegate();\n+    }\n+\n+    public boolean contains(Class cls, Object oid) {\n+        return _cache.getDelegate() != null && _cache.contains\n+            (JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls), oid));\n+    }\n+\n+    public boolean containsAll(Class cls, Object... oids) {\n+        return containsAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public boolean containsAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() == null)\n+            return oids.isEmpty();\n+\n+        BitSet set = _cache.containsAll(JPAFacadeHelper.toOpenJPAObjectIds\n+            (getMetaData(cls), oids));\n+        for (int i = 0; i < oids.size(); i++)\n+            if (!set.get(i))\n+                return false;\n+        return true;\n+    }\n+\n+    public void pin(Class cls, Object oid) {\n+        if (_cache.getDelegate() != null)\n+            _cache.pin(JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls),\n+                oid));\n+    }\n+\n+    public void pinAll(Class cls, Object... oids) {\n+        pinAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public void pinAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() != null)\n+            _cache.pinAll(JPAFacadeHelper.toOpenJPAObjectIds\n+                (getMetaData(cls), oids));\n+    }\n+\n+    public void unpin(Class cls, Object oid) {\n+        if (_cache.getDelegate() != null)\n+            _cache.unpin(JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls),\n+                oid));\n+    }\n+\n+    public void unpinAll(Class cls, Object... oids) {\n+        unpinAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public void unpinAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() != null)\n+            _cache.unpinAll(JPAFacadeHelper.toOpenJPAObjectIds\n+                (getMetaData(cls), oids));\n+    }\n+\n+    public void evict(Class cls, Object oid) {\n+        if (_cache.getDelegate() != null)\n+            _cache.remove(JPAFacadeHelper.toOpenJPAObjectId(getMetaData(cls),\n+                oid));\n+    }\n+\n+    public void evictAll(Class cls, Object... oids) {\n+        evictAll(cls, Arrays.asList(oids));\n+    }\n+\n+    public void evictAll(Class cls, Collection oids) {\n+        if (_cache.getDelegate() != null)\n+            _cache.removeAll(JPAFacadeHelper.toOpenJPAObjectIds\n+                (getMetaData(cls), oids));\n+    }\n+\n+    public void evictAll() {\n+        _cache.clear();\n+    }\n+\n+    /**\n+     * Return metadata for the given class, throwing the proper exception\n+     * if not persistent.\n+     */\n+    private ClassMetaData getMetaData(Class cls) {\n+        try {\n+            return _repos.getMetaData(cls, null, true);\n+        } catch (RuntimeException re) {\n+            throw PersistenceExceptions.toPersistenceException(re);\n+        }\n+    }\n+\n+    public int hashCode() {\n+        return _cache.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof StoreCacheImpl))\n+            return false;\n+        return _cache.equals (((StoreCacheImpl) other)._cache);\n+\t}\n+}"},{"sha":"5cc7cbd2af26f3ddb65bd71583aaf2c684085249","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java","status":"added","additions":117,"deletions":0,"changes":117,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/TransactionRequiredException.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+import org.apache.openjpa.lib.util.Localizer.Message;\n+import org.apache.openjpa.util.ExceptionInfo;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Transaction required.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @nojavadoc\n+ */\n+public class TransactionRequiredException\n+    extends javax.persistence.TransactionRequiredException\n+    implements Serializable, ExceptionInfo {\n+\n+    private transient boolean _fatal = false;\n+    private transient Object _failed = null;\n+    private transient Throwable[] _nested = null;\n+\n+    public TransactionRequiredException(Message msg, Throwable[] nested,\n+        Object failed, boolean fatal) {\n+        this(msg.getMessage(), nested, failed, fatal);\n+    }\n+\n+    public TransactionRequiredException(String msg, Throwable[] nested,\n+        Object failed, boolean fatal) {\n+        super(msg);\n+        _nested = nested;\n+        _failed = failed;\n+        _fatal = fatal;\n+    }\n+\n+    public int getType() {\n+        return USER;\n+    }\n+\n+    public int getSubtype() {\n+        return UserException.NO_TRANSACTION;\n+    }\n+\n+    public boolean isFatal() {\n+        return _fatal;\n+    }\n+\n+    public Throwable getCause() {\n+        return PersistenceExceptions.getCause(_nested);\n+    }\n+\n+    public Throwable[] getNestedThrowables() {\n+        return (_nested == null) ? Exceptions.EMPTY_THROWABLES : _nested;\n+    }\n+\n+    public Object getFailedObject() {\n+        return _failed;\n+    }\n+\n+    public String toString() {\n+        return Exceptions.toString(this);\n+    }\n+\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    public void printStackTrace(PrintStream out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    public void printStackTrace(PrintWriter out) {\n+        super.printStackTrace(out);\n+        Exceptions.printNestedThrowables(this, out);\n+    }\n+\n+    private void writeObject(ObjectOutputStream out)\n+        throws IOException {\n+        out.writeBoolean(_fatal);\n+        out.writeObject(Exceptions.replaceFailedObject(_failed));\n+        out.writeObject(Exceptions.replaceNestedThrowables(_nested));\n+    }\n+\n+    private void readObject(ObjectInputStream in)\n+        throws IOException, ClassNotFoundException {\n+        _fatal = in.readBoolean();\n+        _failed = in.readObject();\n+        _nested = (Throwable[]) in.readObject();\n+    }\n+}\n+"},{"sha":"7307cdba25376ba3e1e8544f5190fa46a6a34d82","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/Type.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.METHOD;\n+import java.lang.annotation.Retention;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Indicates the persistent type of a field, if different than the\n+ * declared type.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+@Target({ METHOD, FIELD })\n+@Retention(RUNTIME)\n+public @interface Type {\n+\n+    Class value();\n+}"},{"sha":"4638c6ebc2b249cbf21826f99b51268ab6d96c0c","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/UpdateAction.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+/**\n+ * Action to take when a field's value is changed.\n+ *\n+ * @author Abe White\n+ * @since 0.4.0\n+ * @published\n+ */\n+public enum UpdateAction {\n+    IGNORE,\n+    RESTRICT\n+}"},{"sha":"3c5a083734684de4f07c0110ca76bc1f199e0c48","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"added","additions":1703,"deletions":0,"changes":1703,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,1703 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Stack;\n+import javax.persistence.CascadeType;\n+import javax.persistence.GenerationType;\n+import static javax.persistence.CascadeType.*;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.Locator;\n+import org.xml.sax.SAXException;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.event.BeanLifecycleCallbacks;\n+import org.apache.openjpa.event.LifecycleCallbacks;\n+import org.apache.openjpa.event.LifecycleEvent;\n+import org.apache.openjpa.event.MethodLifecycleCallbacks;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.meta.CFMetaDataParser;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.DelegatingMetaDataFactory;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.LifecycleMetaData;\n+import org.apache.openjpa.meta.MetaDataDefaults;\n+import org.apache.openjpa.meta.MetaDataFactory;\n+import static org.apache.openjpa.meta.MetaDataModes.*;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.meta.Order;\n+import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.meta.ValueMetaData;\n+import static org.apache.openjpa.persistence.MetaDataTag.*;\n+import static org.apache.openjpa.persistence.PersistenceStrategy.*;\n+import org.apache.openjpa.util.ImplHelper;\n+\n+import serp.util.Numbers;\n+\n+/**\n+ * Custom SAX parser used by the system to quickly parse persistence i\n+ * metadata files.\n+ *\n+ * @author Steve Kim\n+ * @nojavadoc\n+ */\n+public class XMLPersistenceMetaDataParser\n+    extends CFMetaDataParser\n+    implements PersistenceMetaDataFactory.Parser {\n+\n+    // parse constants\n+    protected static final String ELEM_PKG = \"package\";\n+    protected static final String ELEM_ACCESS = \"access\";\n+    protected static final String ELEM_ATTRS = \"attributes\";\n+    protected static final String ELEM_LISTENER = \"entity-listener\";\n+    protected static final String ELEM_CASCADE = \"cascade\";\n+    protected static final String ELEM_CASCADE_ALL = \"cascade-all\";\n+    protected static final String ELEM_CASCADE_PER = \"cascade-persist\";\n+    protected static final String ELEM_CASCADE_MER = \"cascade-merge\";\n+    protected static final String ELEM_CASCADE_REM = \"cascade-remove\";\n+    protected static final String ELEM_CASCADE_REF = \"cascade-refresh\";\n+    protected static final String ELEM_PU_META = \"persistence-unit-metadata\";\n+    protected static final String ELEM_PU_DEF = \"persistence-unit-defaults\";\n+    protected static final String ELEM_XML_MAP_META_COMPLETE =\n+        \"xml-mapping-metadata-complete\";\n+\n+    private static final Map<String, Object> _elems =\n+        new HashMap<String, Object>();\n+\n+    static {\n+        _elems.put(ELEM_PKG, ELEM_PKG);\n+        _elems.put(ELEM_ACCESS, ELEM_ACCESS);\n+        _elems.put(ELEM_ATTRS, ELEM_ATTRS);\n+        _elems.put(ELEM_LISTENER, ELEM_LISTENER);\n+        _elems.put(ELEM_CASCADE, ELEM_CASCADE);\n+        _elems.put(ELEM_CASCADE_ALL, ELEM_CASCADE_ALL);\n+        _elems.put(ELEM_CASCADE_PER, ELEM_CASCADE_PER);\n+        _elems.put(ELEM_CASCADE_REM, ELEM_CASCADE_REM);\n+        _elems.put(ELEM_CASCADE_MER, ELEM_CASCADE_MER);\n+        _elems.put(ELEM_CASCADE_REF, ELEM_CASCADE_REF);\n+        _elems.put(ELEM_PU_META, ELEM_PU_META);\n+        _elems.put(ELEM_PU_DEF, ELEM_PU_DEF);\n+        _elems.put(ELEM_XML_MAP_META_COMPLETE, ELEM_XML_MAP_META_COMPLETE);\n+\n+        _elems.put(\"entity-listeners\", ENTITY_LISTENERS);\n+        _elems.put(\"pre-persist\", PRE_PERSIST);\n+        _elems.put(\"post-persist\", POST_PERSIST);\n+        _elems.put(\"pre-remove\", PRE_REMOVE);\n+        _elems.put(\"post-remove\", POST_REMOVE);\n+        _elems.put(\"pre-update\", PRE_UPDATE);\n+        _elems.put(\"post-update\", POST_UPDATE);\n+        _elems.put(\"post-load\", POST_LOAD);\n+        _elems.put(\"exclude-default-listeners\", EXCLUDE_DEFAULT_LISTENERS);\n+        _elems.put(\"exclude-superclass-listeners\",\n+            EXCLUDE_SUPERCLASS_LISTENERS);\n+\n+        _elems.put(\"named-query\", QUERY);\n+        _elems.put(\"named-native-query\", NATIVE_QUERY);\n+        _elems.put(\"query-hint\", QUERY_HINT);\n+        _elems.put(\"query\", QUERY_STRING);\n+\n+        _elems.put(\"flush-mode\", FLUSH_MODE);\n+        _elems.put(\"sequence-generator\", SEQ_GENERATOR);\n+\n+        _elems.put(\"id\", ID);\n+        _elems.put(\"id-class\", ID_CLASS);\n+        _elems.put(\"embedded-id\", EMBEDDED_ID);\n+        _elems.put(\"version\", VERSION);\n+        _elems.put(\"generated-value\", GENERATED_VALUE);\n+        _elems.put(\"map-key\", MAP_KEY);\n+        _elems.put(\"order-by\", ORDER_BY);\n+        _elems.put(\"lob\", LOB);\n+\n+        _elems.put(\"basic\", BASIC);\n+        _elems.put(\"many-to-one\", MANY_ONE);\n+        _elems.put(\"one-to-one\", ONE_ONE);\n+        _elems.put(\"embedded\", EMBEDDED);\n+        _elems.put(\"one-to-many\", ONE_MANY);\n+        _elems.put(\"many-to-many\", MANY_MANY);\n+        _elems.put(\"transient\", TRANSIENT);\n+    }\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (XMLPersistenceMetaDataParser.class);\n+\n+    private final OpenJPAConfiguration _conf;\n+    private MetaDataRepository _repos = null;\n+    private AnnotationPersistenceMetaDataParser _parser = null;\n+    private ClassLoader _envLoader = null;\n+    private int _mode = MODE_NONE;\n+    private boolean _override = false;\n+\n+    private final Stack _elements = new Stack();\n+    private final Stack _parents = new Stack();\n+\n+    private Class _cls = null;\n+    private int _fieldPos = 0;\n+    private int _clsPos = 0;\n+    private int _access = ClassMetaData.ACCESS_UNKNOWN;\n+    private PersistenceStrategy _strategy = null;\n+    private Set<CascadeType> _cascades = null;\n+    private Set<CascadeType> _pkgCascades = null;\n+\n+    private Class _listener = null;\n+    private Collection<LifecycleCallbacks>[] _callbacks = null;\n+    private int[] _highs = null;\n+\n+    /**\n+     * Constructor; supply configuration.\n+     */\n+    public XMLPersistenceMetaDataParser(OpenJPAConfiguration conf) {\n+        _conf = conf;\n+        setValidating(true);\n+        setLog(conf.getLog(OpenJPAConfiguration.LOG_METADATA));\n+        setParseComments(true);\n+        setMode(MODE_META | MODE_MAPPING | MODE_QUERY);\n+        setParseText(true);\n+    }\n+\n+    /**\n+     * Configuration supplied on construction.\n+     */\n+    public OpenJPAConfiguration getConfiguration() {\n+        return _conf;\n+    }\n+\n+    /**\n+     * The annotation parser. When class is discovered in an XML file,\n+     * we first parse any annotations present, then override with the XML.\n+     */\n+    public AnnotationPersistenceMetaDataParser getAnnotationParser() {\n+        return _parser;\n+    }\n+\n+    /**\n+     * The annotation parser. When class is discovered in an XML file,\n+     * we first parse any annotations present, then override with the XML.\n+     */\n+    public void setAnnotationParser(AnnotationPersistenceMetaDataParser parser){\n+        _parser = parser;\n+    }\n+\n+    /**\n+     * Returns the repository for this parser. If none has been set, creates\n+     * a new repository and sets it.\n+     */\n+    public MetaDataRepository getRepository() {\n+        if (_repos == null) {\n+            MetaDataRepository repos = _conf.newMetaDataRepositoryInstance();\n+            MetaDataFactory mdf = repos.getMetaDataFactory();\n+            if (mdf instanceof DelegatingMetaDataFactory)\n+                mdf = ((DelegatingMetaDataFactory) mdf).getInnermostDelegate();\n+            if (mdf instanceof PersistenceMetaDataFactory)\n+                ((PersistenceMetaDataFactory) mdf).setXMLParser(this);\n+            _repos = repos;\n+        }\n+        return _repos;\n+    }\n+\n+    /**\n+     * Set the metadata repository for this parser.\n+     */\n+    public void setRepository(MetaDataRepository repos) {\n+        _repos = repos;\n+        if (repos != null\n+            && (repos.getValidate() & repos.VALIDATE_RUNTIME) != 0)\n+            setParseComments(false);\n+    }\n+\n+    /**\n+     * Return the environmental class loader to pass on to parsed\n+     * metadata instances.\n+     */\n+    public ClassLoader getEnvClassLoader() {\n+        return _envLoader;\n+    }\n+\n+    /**\n+     * Set the environmental class loader to pass on to parsed\n+     * metadata instances.\n+     */\n+    public void setEnvClassLoader(ClassLoader loader) {\n+        _envLoader = loader;\n+    }\n+\n+    /**\n+     * Whether to allow later parses of mapping information to override\n+     * earlier information for the same class. Defaults to false. Useful\n+     * when a tool is mapping a class, so that .jdo file partial mapping\n+     * information can be used even when mappings are stored in .orm files\n+     * or other locations.\n+     */\n+    public boolean getMappingOverride() {\n+        return _override;\n+    }\n+\n+    /**\n+     * Whether to allow later parses of mapping information to override\n+     * earlier information for the same class. Defaults to false. Useful\n+     * when a tool is mapping a class, so that .jdo file partial mapping\n+     * information can be used even when mappings are stored in .orm files\n+     * or other locations.\n+     */\n+    public void setMappingOverride(boolean override) {\n+        _override = override;\n+    }\n+\n+    /**\n+     * The parse mode according to the expected document type. The\n+     * mode constants act as bit flags, and therefore can be combined.\n+     */\n+    public int getMode() {\n+        return _mode;\n+    }\n+\n+    /**\n+     * The parse mode according to the expected document type.\n+     */\n+    public void setMode(int mode, boolean on) {\n+        if (mode == MODE_NONE)\n+            setMode(MODE_NONE);\n+        else if (on)\n+            setMode(_mode | mode);\n+        else\n+            setMode(_mode & ~mode);\n+    }\n+\n+    /**\n+     * The parse mode according to the expected document type.\n+     */\n+    public void setMode(int mode) {\n+        _mode = mode;\n+        if (_parser != null)\n+            _parser.setMode(mode);\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}.\n+     */\n+    protected boolean isMetaDataMode() {\n+        return (_mode & MODE_META) != 0;\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}.\n+     */\n+    protected boolean isQueryMode() {\n+        return (_mode & MODE_QUERY) != 0;\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}.\n+     */\n+    protected boolean isMappingMode() {\n+        return (_mode & MODE_MAPPING) != 0;\n+    }\n+\n+    /**\n+     * Returns true if we're in mapping mode or in metadata mode with\n+     * mapping override enabled.\n+     */\n+    protected boolean isMappingOverrideMode() {\n+        return isMappingMode() || (_override && isMetaDataMode());\n+    }\n+\n+    ///////////////\n+    // XML parsing\n+    ///////////////\n+\n+    /**\n+     * Push a parse element onto the stack.\n+     */\n+    protected void pushElement(Object elem) {\n+        _elements.push(elem);\n+    }\n+\n+    /**\n+     * Pop a parse element from the stack.\n+     */\n+    protected Object popElement() {\n+        return _elements.pop();\n+    }\n+\n+    /**\n+     * Return the current element being parsed. May be a class metadata,\n+     * field metadata, query metadata, etc.\n+     */\n+    protected Object currentElement() {\n+        if (_elements.isEmpty())\n+            return null;\n+        return _elements.peek();\n+    }\n+\n+    /**\n+     * Return the current {@link PersistenceStrategy} if any.\n+     */\n+    protected PersistenceStrategy currentStrategy() {\n+        return _strategy;\n+    }\n+\n+    /**\n+     * Return the tag of the current parent element.\n+     */\n+    protected Object currentParent() {\n+        if (_parents.isEmpty())\n+            return null;\n+        return _parents.peek();\n+    }\n+\n+    /**\n+     * Return whether we're running the parser at runtime.\n+     */\n+    protected boolean isRuntime() {\n+        return (getRepository().getValidate()\n+            & MetaDataRepository.VALIDATE_RUNTIME) != 0;\n+    }\n+\n+    @Override\n+    protected Object getSchemaSource() {\n+        return XMLPersistenceMetaDataParser.class.getResourceAsStream\n+            (\"orm-xsd.rsrc\");\n+    }\n+\n+    @Override\n+    protected String getPackageAttributeName() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected String getClassAttributeName() {\n+        return \"class\";\n+    }\n+\n+    @Override\n+    protected int getClassElementDepth() {\n+        return 1;\n+    }\n+\n+    @Override\n+    protected boolean isClassElementName(String name) {\n+        return \"entity\".equals(name)\n+            || \"embeddable\".equals(name)\n+            || \"mapped-superclass\".equals(name);\n+    }\n+\n+    @Override\n+    protected void reset() {\n+        super.reset();\n+        _elements.clear();\n+        _parents.clear();\n+        _cls = null;\n+        _fieldPos = 0;\n+        _clsPos = 0;\n+\n+        _access = ClassMetaData.ACCESS_UNKNOWN;\n+        _strategy = null;\n+        _listener = null;\n+        _callbacks = null;\n+        _highs = null;\n+        _cascades = null;\n+        _pkgCascades = null;\n+    }\n+\n+    @Override\n+    protected boolean startSystemElement(String name, Attributes attrs)\n+        throws SAXException {\n+        Object tag = (Object) _elems.get(name);\n+        boolean ret = false;\n+        if (tag == null) {\n+            if (isMappingOverrideMode())\n+                tag = startSystemMappingElement(name, attrs);\n+            ret = tag != null;\n+        } else if (tag instanceof MetaDataTag) {\n+            switch ((MetaDataTag) tag) {\n+                case QUERY:\n+                    ret = startNamedQuery(attrs);\n+                    break;\n+                case QUERY_HINT:\n+                    ret = startQueryHint(attrs);\n+                    break;\n+                case NATIVE_QUERY:\n+                    ret = startNamedNativeQuery(attrs);\n+                    break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n+                case SEQ_GENERATOR:\n+                    ret = startSequenceGenerator(attrs);\n+                    break;\n+                case FLUSH_MODE:\n+                    ret = startFlushMode(attrs);\n+                    break;\n+                case ENTITY_LISTENERS:\n+                    ret = startEntityListeners(attrs);\n+                    break;\n+                case PRE_PERSIST:\n+                case POST_PERSIST:\n+                case PRE_REMOVE:\n+                case POST_REMOVE:\n+                case PRE_UPDATE:\n+                case POST_UPDATE:\n+                case POST_LOAD:\n+                    ret = startCallback((MetaDataTag) tag, attrs);\n+                    break;\n+                default:\n+                    warnUnsupportedTag(name);\n+            }\n+        } else if (tag == ELEM_PU_META || tag == ELEM_PU_DEF)\n+            ret = isMetaDataMode();\n+        else if (tag == ELEM_XML_MAP_META_COMPLETE)\n+            setAnnotationParser(null);\n+        else if (tag == ELEM_ACCESS)\n+            ret = _mode != MODE_QUERY;\n+        else if (tag == ELEM_LISTENER)\n+            ret = startEntityListener(attrs);\n+        else if (tag == ELEM_CASCADE)\n+            ret = isMetaDataMode();\n+        else if (tag == ELEM_CASCADE_ALL || tag == ELEM_CASCADE_PER\n+            || tag == ELEM_CASCADE_MER || tag == ELEM_CASCADE_REM\n+            || tag == ELEM_CASCADE_REF)\n+            ret = startCascade(tag, attrs);\n+\n+        if (ret)\n+            _parents.push(tag);\n+        return ret;\n+    }\n+\n+    @Override\n+    protected void endSystemElement(String name)\n+        throws SAXException {\n+        Object tag = _elems.get(name);\n+        if (tag == null && isMappingOverrideMode())\n+            endSystemMappingElement(name);\n+        else if (tag instanceof MetaDataTag) {\n+            switch ((MetaDataTag) tag) {\n+                case QUERY:\n+                    endNamedQuery();\n+                    break;\n+                case QUERY_HINT:\n+                    endQueryHint();\n+                    break;\n+                case NATIVE_QUERY:\n+                    endNamedNativeQuery();\n+                    break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n+                case SEQ_GENERATOR:\n+                    endSequenceGenerator();\n+                    break;\n+            }\n+        } else if (tag == ELEM_ACCESS)\n+            endAccess();\n+        else if (tag == ELEM_LISTENER)\n+            endEntityListener();\n+\n+        _parents.pop();\n+    }\n+\n+    /**\n+     * Implement to parse a mapping element outside of any class.\n+     *\n+     * @return the tag for the given element, or null to skip the element\n+     */\n+    protected Object startSystemMappingElement(String name, Attributes attrs)\n+        throws SAXException {\n+        return null;\n+    }\n+\n+    /**\n+     * Implement to parse a mapping element outside of any class.\n+     */\n+    protected void endSystemMappingElement(String name)\n+        throws SAXException {\n+    }\n+\n+    @Override\n+    protected boolean startClassElement(String name, Attributes attrs)\n+        throws SAXException {\n+        Object tag = (Object) _elems.get(name);\n+        boolean ret = false;\n+        if (tag == null) {\n+            if (isMappingOverrideMode())\n+                tag = startClassMappingElement(name, attrs);\n+            ret = tag != null;\n+        } else if (tag instanceof MetaDataTag) {\n+            switch ((MetaDataTag) tag) {\n+                case GENERATED_VALUE:\n+                    ret = startGeneratedValue(attrs);\n+                    break;\n+                case ID:\n+                    ret = startId(attrs);\n+                    break;\n+                case EMBEDDED_ID:\n+                    ret = startEmbeddedId(attrs);\n+                    break;\n+                case ID_CLASS:\n+                    ret = startIdClass(attrs);\n+                    break;\n+                case LOB:\n+                    ret = startLob(attrs);\n+                    break;\n+                case QUERY:\n+                    ret = startNamedQuery(attrs);\n+                    break;\n+                case QUERY_HINT:\n+                    ret = startQueryHint(attrs);\n+                    break;\n+                case NATIVE_QUERY:\n+                    ret = startNamedNativeQuery(attrs);\n+                    break;\n+                case QUERY_STRING:\n+                    ret = startQueryString(attrs);\n+                    break;\n+                case SEQ_GENERATOR:\n+                    ret = startSequenceGenerator(attrs);\n+                    break;\n+                case VERSION:\n+                    ret = startVersion(attrs);\n+                    break;\n+                case MAP_KEY:\n+                    ret = startMapKey(attrs);\n+                    break;\n+                case FLUSH_MODE:\n+                    ret = startFlushMode(attrs);\n+                    break;\n+                case ORDER_BY:\n+                case ENTITY_LISTENERS:\n+                    ret = isMetaDataMode();\n+                    break;\n+                case EXCLUDE_DEFAULT_LISTENERS:\n+                    ret = startExcludeDefaultListeners(attrs);\n+                    break;\n+                case EXCLUDE_SUPERCLASS_LISTENERS:\n+                    ret = startExcludeSuperclassListeners(attrs);\n+                    break;\n+                case PRE_PERSIST:\n+                case POST_PERSIST:\n+                case PRE_REMOVE:\n+                case POST_REMOVE:\n+                case PRE_UPDATE:\n+                case POST_UPDATE:\n+                case POST_LOAD:\n+                    ret = startCallback((MetaDataTag) tag, attrs);\n+                    break;\n+                default:\n+                    warnUnsupportedTag(name);\n+            }\n+        } else if (tag instanceof PersistenceStrategy) {\n+            PersistenceStrategy ps = (PersistenceStrategy) tag;\n+            ret = startStrategy(ps, attrs);\n+            if (ret)\n+                _strategy = ps;\n+        } else if (tag == ELEM_LISTENER)\n+            ret = startEntityListener(attrs);\n+        else if (tag == ELEM_ATTRS)\n+            ret = _mode != MODE_QUERY;\n+        else if (tag == ELEM_CASCADE)\n+            ret = isMetaDataMode();\n+        else if (tag == ELEM_CASCADE_ALL || tag == ELEM_CASCADE_PER\n+            || tag == ELEM_CASCADE_MER || tag == ELEM_CASCADE_REM\n+            || tag == ELEM_CASCADE_REF)\n+            ret = startCascade(tag, attrs);\n+\n+        if (ret)\n+            _parents.push(tag);\n+        return ret;\n+    }\n+\n+    @Override\n+    protected void endClassElement(String name)\n+        throws SAXException {\n+        Object tag = _elems.get(name);\n+        if (tag == null && isMappingOverrideMode())\n+            endClassMappingElement(name);\n+        else if (tag instanceof MetaDataTag) {\n+            switch ((MetaDataTag) tag) {\n+                case GENERATED_VALUE:\n+                    endGeneratedValue();\n+                    break;\n+                case ID:\n+                    endId();\n+                    break;\n+                case EMBEDDED_ID:\n+                    endEmbeddedId();\n+                    break;\n+                case ID_CLASS:\n+                    endIdClass();\n+                    break;\n+                case LOB:\n+                    endLob();\n+                    break;\n+                case QUERY:\n+                    endNamedQuery();\n+                    break;\n+                case QUERY_HINT:\n+                    endQueryHint();\n+                    break;\n+                case NATIVE_QUERY:\n+                    endNamedNativeQuery();\n+                    break;\n+                case QUERY_STRING:\n+                    endQueryString();\n+                    break;\n+                case SEQ_GENERATOR:\n+                    endSequenceGenerator();\n+                    break;\n+                case VERSION:\n+                    endVersion();\n+                    break;\n+                case ORDER_BY:\n+                    endOrderBy();\n+                    break;\n+            }\n+        } else if (tag instanceof PersistenceStrategy)\n+            endStrategy((PersistenceStrategy) tag);\n+        else if (tag == ELEM_ACCESS)\n+            endAccess();\n+        else if (tag == ELEM_LISTENER)\n+            endEntityListener();\n+\n+        _parents.pop();\n+    }\n+\n+    /**\n+     * Log warning about an unsupported tag.\n+     */\n+    private void warnUnsupportedTag(String name) {\n+        Log log = getLog();\n+        if (log.isInfoEnabled())\n+            log.trace(_loc.get(\"unsupported-tag\", name));\n+    }\n+\n+    /**\n+     * Implement to parse a mapping element within a class.\n+     *\n+     * @return the tag for the given element, or null to skip element\n+     */\n+    protected Object startClassMappingElement(String name, Attributes attrs)\n+        throws SAXException {\n+        return null;\n+    }\n+\n+    /**\n+     * Implement to parse a mapping element within a class.\n+     */\n+    protected void endClassMappingElement(String name)\n+        throws SAXException {\n+    }\n+\n+    @Override\n+    protected boolean startClass(String elem, Attributes attrs)\n+        throws SAXException {\n+        super.startClass(elem, attrs);\n+\n+        // query mode only?\n+        _cls = classForName(currentClassName());\n+        if (_mode == MODE_QUERY) {\n+            if (_parser != null &&\n+                !\"true\".equals(attrs.getValue(\"metadata-complete\")))\n+                _parser.parse(_cls);\n+            return true;\n+        }\n+\n+        Log log = getLog();\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-class\", _cls.getName()));\n+\n+        MetaDataRepository repos = getRepository();\n+        ClassMetaData meta = repos.getCachedMetaData(_cls);\n+        if (meta != null\n+            && ((isMetaDataMode() && (meta.getSourceMode() & MODE_META) != 0)\n+            || (isMappingMode() && (meta.getSourceMode() & MODE_MAPPING) != 0)))\n+        {\n+            if (log.isWarnEnabled())\n+                log.warn(_loc.get(\"dup-metadata\", _cls, getSourceName()));\n+            _cls = null;\n+            return false;\n+        }\n+\n+        // if we don't know the access type, check to see if a superclass\n+        // has already defined the access type\n+        int defaultAccess = _access;\n+        if (defaultAccess == ClassMetaData.ACCESS_UNKNOWN) {\n+            ClassMetaData sup = repos.getCachedMetaData(_cls.getSuperclass());\n+            if (sup != null)\n+                defaultAccess = sup.getAccessType();\n+        }\n+\n+        if (meta == null) {\n+            // add metadata for this type\n+            int access = toAccessType(attrs.getValue(\"access\"), defaultAccess);\n+            meta = repos.addMetaData(_cls, access);\n+            meta.setEnvClassLoader(_envLoader);\n+            meta.setSourceMode(MODE_NONE);\n+\n+            // parse annotations first so XML overrides them\n+            if (_parser != null &&\n+                !\"true\".equals(attrs.getValue(\"metadata-complete\")))\n+                _parser.parse(_cls);\n+        }\n+\n+        boolean mappedSuper = \"mapped-superclass\".equals(elem);\n+        if (isMetaDataMode()) {\n+            meta.setSource(getSourceFile(), meta.SRC_XML);\n+            meta.setSourceMode(MODE_META, true);\n+            Locator locator = getLocation().getLocator();\n+            if (locator != null) {\n+                meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+                meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+            }\n+            meta.setListingIndex(_clsPos);\n+            String name = attrs.getValue(\"name\");\n+            if (!StringUtils.isEmpty(name))\n+                meta.setTypeAlias(name);\n+            meta.setEmbeddedOnly(mappedSuper || \"embeddable\".equals(elem));\n+            if (mappedSuper)\n+                meta.setIdentityType(meta.ID_UNKNOWN);\n+        }\n+        if (isMappingMode())\n+            meta.setSourceMode(MODE_MAPPING, true);\n+        if (isMappingOverrideMode())\n+            startClassMapping(meta, mappedSuper, attrs);\n+        if (isQueryMode())\n+            meta.setSourceMode(MODE_QUERY, true);\n+\n+        _clsPos++;\n+        _fieldPos = 0;\n+        addComments(meta);\n+        pushElement(meta);\n+        return true;\n+    }\n+\n+    @Override\n+    protected void endClass(String elem)\n+        throws SAXException {\n+        if (_mode != MODE_QUERY) {\n+            ClassMetaData meta = (ClassMetaData) popElement();\n+            storeCallbacks(meta);\n+            if (isMappingOverrideMode())\n+                endClassMapping(meta);\n+        }\n+        _cls = null;\n+        super.endClass(elem);\n+    }\n+\n+    /**\n+     * Implement to add mapping attributes to class.\n+     */\n+    protected void startClassMapping(ClassMetaData mapping,\n+        boolean mappedSuper, Attributes attrs)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Implement to finalize class mapping.\n+     */\n+    protected void endClassMapping(ClassMetaData mapping)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Default access element.\n+     */\n+    private void endAccess() {\n+        _access = toAccessType(currentText(), ClassMetaData.ACCESS_UNKNOWN);\n+    }\n+\n+    /**\n+     * Parse the given string as an entity access type, defaulting to given\n+     * default if string is empty.\n+     */\n+    private int toAccessType(String str, int def) {\n+        if (StringUtils.isEmpty(str))\n+            return def;\n+        if (\"PROPERTY\".equals(str))\n+            return ClassMetaData.ACCESS_PROPERTY;\n+        return ClassMetaData.ACCESS_FIELD;\n+    }\n+\n+    /**\n+     * Parse flush-mode element.\n+     */\n+    private boolean startFlushMode(Attributes attrs)\n+        throws SAXException {\n+        Log log = getLog();\n+        if (log.isWarnEnabled())\n+            log.warn(_loc.get(\"unsupported\", \"flush-mode\", getSourceName()));\n+        return false;\n+    }\n+\n+    /**\n+     * Parse sequence-generator.\n+     */\n+    protected boolean startSequenceGenerator(Attributes attrs) {\n+        if (!isMappingOverrideMode())\n+            return false;\n+\n+        String name = attrs.getValue(\"name\");\n+        Log log = getLog();\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-sequence\", name));\n+\n+        SequenceMetaData meta = getRepository().getCachedSequenceMetaData(name);\n+        if (meta != null && log.isWarnEnabled())\n+            log.warn(_loc.get(\"override-sequence\", name));\n+\n+        meta = getRepository().addSequenceMetaData(name);\n+        String seq = attrs.getValue(\"sequence-name\");\n+        String val = attrs.getValue(\"initial-value\");\n+        int initial = val == null ? 1 : Integer.parseInt(val);\n+        val = attrs.getValue(\"allocation-size\");\n+        int allocate = val == null ? 50 : Integer.parseInt(val);\n+\n+        String clsName, props;\n+        if (seq == null || seq.indexOf('(') == -1) {\n+            clsName = SequenceMetaData.IMPL_NATIVE;\n+            props = null;\n+        } else { // plugin\n+            clsName = Configurations.getClassName(seq);\n+            props = Configurations.getProperties(seq);\n+            seq = null;\n+        }\n+\n+        meta.setSequencePlugin(Configurations.getPlugin(clsName, props));\n+        meta.setSequence(seq);\n+        meta.setInitialValue(initial);\n+        meta.setAllocate(allocate);\n+\n+        Object cur = currentElement();\n+        Object scope = (cur instanceof ClassMetaData)\n+            ? ((ClassMetaData) cur).getDescribedType() : null;\n+        meta.setSource(getSourceFile(), scope, meta.SRC_XML);\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n+        return true;\n+    }\n+\n+    protected void endSequenceGenerator() {\n+    }\n+\n+    /**\n+     * Parse id.\n+     */\n+    protected boolean startId(Attributes attrs)\n+        throws SAXException {\n+        FieldMetaData fmd = parseField(attrs);\n+        fmd.setExplicit(true);\n+        fmd.setPrimaryKey(true);\n+        return true;\n+    }\n+\n+    protected void endId()\n+        throws SAXException {\n+        finishField();\n+    }\n+\n+    /**\n+     * Parse embedded-id.\n+     */\n+    protected boolean startEmbeddedId(Attributes attrs)\n+        throws SAXException {\n+        FieldMetaData fmd = parseField(attrs);\n+        fmd.setExplicit(true);\n+        fmd.setPrimaryKey(true);\n+        fmd.setEmbedded(true);\n+        if (fmd.getEmbeddedMetaData() == null)\n+            fmd.addEmbeddedMetaData();\n+        return true;\n+    }\n+\n+    protected void endEmbeddedId()\n+        throws SAXException {\n+        finishField();\n+    }\n+\n+    /**\n+     * Parse id-class.\n+     */\n+    protected boolean startIdClass(Attributes attrs)\n+        throws SAXException {\n+        if (!isMetaDataMode())\n+            return false;\n+\n+        ClassMetaData meta = (ClassMetaData) currentElement();\n+        String cls = attrs.getValue(\"class\");\n+        Class idCls = null;\n+        try {\n+            idCls = classForName(cls);\n+        } catch (Throwable t) {\n+            throw getException(_loc.get(\"invalid-id-class\", meta, cls), t);\n+        }\n+        meta.setObjectIdType(idCls, true);\n+        return true;\n+    }\n+\n+    protected void endIdClass()\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Parse lob.\n+     */\n+    protected boolean startLob(Attributes attrs)\n+        throws SAXException {\n+        FieldMetaData fmd = (FieldMetaData) currentElement();\n+        if (fmd.getDeclaredTypeCode() != JavaTypes.STRING\n+            && fmd.getDeclaredType() != char[].class\n+            && fmd.getDeclaredType() != Character[].class\n+            && fmd.getDeclaredType() != byte[].class\n+            && fmd.getDeclaredType() != Byte[].class)\n+            fmd.setSerialized(true);\n+        return true;\n+    }\n+\n+    protected void endLob()\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Parse generated-value.\n+     */\n+    protected boolean startGeneratedValue(Attributes attrs)\n+        throws SAXException {\n+        if (!isMappingOverrideMode())\n+            return false;\n+\n+        String strategy = attrs.getValue(\"strategy\");\n+        String generator = attrs.getValue(\"generator\");\n+        GenerationType type = StringUtils.isEmpty(strategy)\n+            ? GenerationType.AUTO : GenerationType.valueOf(strategy);\n+\n+        FieldMetaData fmd = (FieldMetaData) currentElement();\n+        AnnotationPersistenceMetaDataParser.parseGeneratedValue(fmd, type,\n+            generator);\n+        return true;\n+    }\n+\n+    protected void endGeneratedValue()\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Lazily parse cascades.\n+     */\n+    protected boolean startCascade(Object tag, Attributes attrs)\n+        throws SAXException {\n+        if (!isMetaDataMode())\n+            return false;\n+\n+        Set<CascadeType> cascades = null;\n+        if (currentElement() instanceof FieldMetaData) {\n+            if (_cascades == null)\n+                _cascades = EnumSet.noneOf(CascadeType.class);\n+            cascades = _cascades;\n+        } else {\n+            if (_pkgCascades == null)\n+                _pkgCascades = EnumSet.noneOf(CascadeType.class);\n+            cascades = _pkgCascades;\n+        }\n+        boolean all = ELEM_CASCADE_ALL == tag;\n+        if (all || ELEM_CASCADE_PER == tag)\n+            cascades.add(PERSIST);\n+        if (all || ELEM_CASCADE_REM == tag)\n+            cascades.add(REMOVE);\n+        if (all || ELEM_CASCADE_MER == tag)\n+            cascades.add(MERGE);\n+        if (all || ELEM_CASCADE_REF == tag)\n+            cascades.add(REFRESH);\n+        return true;\n+    }\n+\n+    /**\n+     * Set the cached cascades into the field.\n+     */\n+    protected void setCascades(FieldMetaData fmd) {\n+        Set<CascadeType> cascades = _cascades;\n+        if (_cascades == null)\n+            cascades = _pkgCascades;\n+        if (cascades == null)\n+            return;\n+\n+        ValueMetaData vmd = fmd;\n+        switch (_strategy) {\n+            case ONE_MANY:\n+            case MANY_MANY:\n+                vmd = fmd.getElement();\n+        }\n+        for (CascadeType cascade : cascades) {\n+            switch (cascade) {\n+                case PERSIST:\n+                    vmd.setCascadePersist(ValueMetaData.CASCADE_IMMEDIATE);\n+                    break;\n+                case MERGE:\n+                    vmd.setCascadeAttach(ValueMetaData.CASCADE_IMMEDIATE);\n+                    break;\n+                case REMOVE:\n+                    vmd.setCascadeDelete(ValueMetaData.CASCADE_IMMEDIATE);\n+                    break;\n+                case REFRESH:\n+                    vmd.setCascadeRefresh(ValueMetaData.CASCADE_IMMEDIATE);\n+                    break;\n+            }\n+        }\n+        _cascades = null;\n+    }\n+\n+    /**\n+     * Parse common field attributes.\n+     */\n+    private FieldMetaData parseField(Attributes attrs)\n+        throws SAXException {\n+        ClassMetaData meta = (ClassMetaData) currentElement();\n+        String name = attrs.getValue(\"name\");\n+        FieldMetaData field = meta.getDeclaredField(name);\n+        if ((field == null || field.getDeclaredType() == Object.class)\n+            && meta.getDescribedType() != Object.class) {\n+            Member member = null;\n+            Class type = null;\n+            int def = _repos.getMetaDataFactory().getDefaults().\n+                getDefaultAccessType();\n+            try {\n+                if (meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n+                    || (meta.getAccessType() == ClassMetaData.ACCESS_UNKNOWN\n+                    && def == ClassMetaData.ACCESS_PROPERTY)) {\n+                    String cap = StringUtils.capitalize(name);\n+                    type = meta.getDescribedType();\n+                    try {\n+                        member = (Method) AccessController.doPrivileged(\n+                            J2DoPrivHelper.getDeclaredMethodAction(\n+                                type, \"get\" + cap,\n+                                (Class[]) null));// varargs disambiguate\n+                    } catch (Exception excep) {\n+                        try {\n+                            member = (Method) AccessController.doPrivileged(\n+                                J2DoPrivHelper.getDeclaredMethodAction(\n+                                    type, \"is\" + cap, (Class[]) null));\n+                        } catch (Exception excep2) {\n+                            throw excep;\n+                        }\n+                    }\n+                    type = ((Method) member).getReturnType();\n+                } else {\n+                    member = (Field) AccessController.doPrivileged(\n+                        J2DoPrivHelper.getDeclaredFieldAction(\n+                            meta.getDescribedType(), name));\n+                    type = ((Field) member).getType();\n+                }\n+            } catch (Exception e) {\n+                if (e instanceof PrivilegedActionException)\n+                    e = ((PrivilegedActionException) e).getException();\n+                throw getException(_loc.get(\"invalid-attr\", name, meta), e);\n+            }\n+\n+            if (field == null) {\n+                field = meta.addDeclaredField(name, type);\n+                PersistenceMetaDataDefaults.setCascadeNone(field);\n+                PersistenceMetaDataDefaults.setCascadeNone(field.getKey());\n+                PersistenceMetaDataDefaults.setCascadeNone(field.getElement());\n+            }\n+            field.backingMember(member);\n+        } else if (field == null) {\n+            field = meta.addDeclaredField(name, Object.class);\n+            PersistenceMetaDataDefaults.setCascadeNone(field);\n+            PersistenceMetaDataDefaults.setCascadeNone(field.getKey());\n+            PersistenceMetaDataDefaults.setCascadeNone(field.getElement());\n+        }\n+\n+        if (isMetaDataMode())\n+            field.setListingIndex(_fieldPos);\n+\n+        _fieldPos++;\n+        pushElement(field);\n+        addComments(field);\n+\n+        if (isMappingOverrideMode())\n+            startFieldMapping(field, attrs);\n+        return field;\n+    }\n+\n+    /**\n+     * Pops field element.\n+     */\n+    private void finishField()\n+        throws SAXException {\n+        FieldMetaData field = (FieldMetaData) popElement();\n+        setCascades(field);\n+        if (isMappingOverrideMode())\n+            endFieldMapping(field);\n+        _strategy = null;\n+    }\n+\n+    /**\n+     * Implement to add field mapping data. Does nothing by default.\n+     */\n+    protected void startFieldMapping(FieldMetaData field, Attributes attrs)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Implement to finalize field mapping. Does nothing by default.\n+     */\n+    protected void endFieldMapping(FieldMetaData field)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Parse version.\n+     */\n+    protected boolean startVersion(Attributes attrs)\n+        throws SAXException {\n+        FieldMetaData fmd = parseField(attrs);\n+        fmd.setExplicit(true);\n+        fmd.setVersion(true);\n+        return true;\n+    }\n+\n+    protected void endVersion()\n+        throws SAXException {\n+        finishField();\n+    }\n+\n+    /**\n+     * Parse strategy element.\n+     */\n+    private boolean startStrategy(PersistenceStrategy strategy,\n+        Attributes attrs)\n+        throws SAXException {\n+        FieldMetaData fmd = parseField(attrs);\n+        fmd.setExplicit(true);\n+        fmd.setManagement(FieldMetaData.MANAGE_PERSISTENT);\n+\n+        String val = attrs.getValue(\"fetch\");\n+        if (val != null)\n+            fmd.setInDefaultFetchGroup(\"EAGER\".equals(val));\n+        val = attrs.getValue(\"optional\");\n+        if (\"false\".equals(val))\n+            fmd.setNullValue(FieldMetaData.NULL_EXCEPTION);\n+        else if (\"true\".equals(val)\n+                && fmd.getNullValue() == FieldMetaData.NULL_EXCEPTION) {\n+            // Reset value if the field was annotated with optional=false. \n+            // Otherwise leave it alone.\n+            fmd.setNullValue(FieldMetaData.NULL_UNSET);\n+        }\n+        if (isMappingOverrideMode()) {\n+            val = attrs.getValue(\"mapped-by\");\n+            if (val != null)\n+                fmd.setMappedBy(val);\n+        }\n+        parseStrategy(fmd, strategy, attrs);\n+        return true;\n+    }\n+\n+    private void endStrategy(PersistenceStrategy strategy)\n+        throws SAXException {\n+        finishField();\n+    }\n+\n+    /**\n+     * Parse strategy specific attributes.\n+     */\n+    private void parseStrategy(FieldMetaData fmd,\n+        PersistenceStrategy strategy, Attributes attrs)\n+        throws SAXException {\n+        switch (strategy) {\n+            case BASIC:\n+                parseBasic(fmd, attrs);\n+                break;\n+            case EMBEDDED:\n+                parseEmbedded(fmd, attrs);\n+                break;\n+            case ONE_ONE:\n+                parseOneToOne(fmd, attrs);\n+                break;\n+            case MANY_ONE:\n+                parseManyToOne(fmd, attrs);\n+                break;\n+            case MANY_MANY:\n+                parseManyToMany(fmd, attrs);\n+                break;\n+            case ONE_MANY:\n+                parseOneToMany(fmd, attrs);\n+                break;\n+            case TRANSIENT:\n+                fmd.setManagement(FieldMetaData.MANAGE_NONE);\n+                break;\n+        }\n+    }\n+\n+    /**\n+     * Parse basic.\n+     */\n+    protected void parseBasic(FieldMetaData fmd, Attributes attrs)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Parse embedded.\n+     */\n+    protected void parseEmbedded(FieldMetaData fmd, Attributes attrs)\n+        throws SAXException {\n+        assertPC(fmd, \"Embedded\");\n+        fmd.setEmbedded(true);\n+        fmd.setSerialized(false); // override any Lob annotation\n+        if (fmd.getEmbeddedMetaData() == null)\n+            fmd.addEmbeddedMetaData();\n+    }\n+\n+    /**\n+     * Throw proper exception if given value is not possibly persistence\n+     * capable.\n+     */\n+    private void assertPC(FieldMetaData fmd, String attr)\n+        throws SAXException {\n+        if (!JavaTypes.maybePC(fmd))\n+            throw getException(_loc.get(\"bad-meta-anno\", fmd, attr));\n+    }\n+\n+    /**\n+     * Parse one-to-one.\n+     */\n+    protected void parseOneToOne(FieldMetaData fmd, Attributes attrs)\n+        throws SAXException {\n+        String val = attrs.getValue(\"target-entity\");\n+        if (val != null)\n+            fmd.setTypeOverride(classForName(val));\n+        assertPC(fmd, \"OneToOne\");\n+        fmd.setSerialized(false); // override any Lob annotation\n+        if (!fmd.isDefaultFetchGroupExplicit())\n+            fmd.setInDefaultFetchGroup(true);\n+    }\n+\n+    /**\n+     * Parse many-to-one.\n+     */\n+    protected void parseManyToOne(FieldMetaData fmd, Attributes attrs)\n+        throws SAXException {\n+        String val = attrs.getValue(\"target-entity\");\n+        if (val != null)\n+            fmd.setTypeOverride(classForName(val));\n+        assertPC(fmd, \"ManyToOne\");\n+        fmd.setSerialized(false); // override any Lob annotation\n+        if (!fmd.isDefaultFetchGroupExplicit())\n+            fmd.setInDefaultFetchGroup(true);\n+    }\n+\n+    /**\n+     * Parse many-to-many.\n+     */\n+    protected void parseManyToMany(FieldMetaData fmd, Attributes attrs)\n+        throws SAXException {\n+        String val = attrs.getValue(\"target-entity\");\n+        if (val != null)\n+            fmd.getElement().setDeclaredType(classForName(val));\n+        assertPCCollection(fmd, \"ManyToMany\");\n+        fmd.setSerialized(false); // override Lob in annotation\n+    }\n+\n+    /**\n+     * Throw exception if given field not a collection of possible persistence\n+     * capables.\n+     */\n+    private void assertPCCollection(FieldMetaData fmd, String attr)\n+        throws SAXException {\n+        switch (fmd.getDeclaredTypeCode()) {\n+            case JavaTypes.ARRAY:\n+            case JavaTypes.COLLECTION:\n+            case JavaTypes.MAP:\n+                if (JavaTypes.maybePC(fmd.getElement()))\n+                    break;\n+                // no break\n+            default:\n+                throw getException(_loc.get(\"bad-meta-anno\", fmd, attr));\n+        }\n+    }\n+\n+    /**\n+     * Parse one-to-many.\n+     */\n+    protected void parseOneToMany(FieldMetaData fmd, Attributes attrs)\n+        throws SAXException {\n+        String val = attrs.getValue(\"target-entity\");\n+        if (val != null)\n+            fmd.getElement().setDeclaredType(classForName(val));\n+        assertPCCollection(fmd, \"OneToMany\");\n+        fmd.setSerialized(false); // override any Lob annotation\n+    }\n+\n+    /**\n+     * Parse map-key.\n+     */\n+    private boolean startMapKey(Attributes attrs)\n+        throws SAXException {\n+        if (!isMappingOverrideMode())\n+            return false;\n+\n+        FieldMetaData fmd = (FieldMetaData) currentElement();\n+        String mapKey = attrs.getValue(\"name\");\n+        if (mapKey == null)\n+            fmd.getKey().setValueMappedBy(ValueMetaData.MAPPED_BY_PK);\n+        else\n+            fmd.getKey().setValueMappedBy(mapKey);\n+        return true;\n+    }\n+\n+    /**\n+     * Parse order-by.\n+     */\n+    private void endOrderBy()\n+        throws SAXException {\n+        FieldMetaData fmd = (FieldMetaData) currentElement();\n+        String dec = currentText();\n+        if (StringUtils.isEmpty(dec))\n+            dec = Order.ELEMENT + \" asc\";\n+        fmd.setOrderDeclaration(dec);\n+    }\n+\n+    /**\n+     * Parse named-query.\n+     */\n+    protected boolean startNamedQuery(Attributes attrs)\n+        throws SAXException {\n+        if (!isQueryMode())\n+            return false;\n+\n+        String name = attrs.getValue(\"name\");\n+        Log log = getLog();\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-query\", name));\n+\n+        QueryMetaData meta = getRepository().getCachedQueryMetaData(null, name);\n+        if (meta != null && log.isWarnEnabled())\n+            log.warn(_loc.get(\"override-query\", name, currentLocation()));\n+\n+        meta = getRepository().addQueryMetaData(null, name);\n+        meta.setDefiningType(_cls);\n+        meta.setQueryString(attrs.getValue(\"query\"));\n+        meta.setLanguage(JPQLParser.LANG_JPQL);\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n+        Object cur = currentElement();\n+        Object scope = (cur instanceof ClassMetaData)\n+            ? ((ClassMetaData) cur).getDescribedType() : null;\n+        meta.setSource(getSourceFile(), scope, meta.SRC_XML);\n+        if (isMetaDataMode())\n+            meta.setSourceMode(MODE_META);\n+        else if (isMappingMode())\n+            meta.setSourceMode(MODE_MAPPING);\n+        else\n+            meta.setSourceMode(MODE_QUERY);\n+        pushElement(meta);\n+        return true;\n+    }\n+\n+    protected void endNamedQuery()\n+        throws SAXException {\n+        popElement();\n+    }\n+\n+    protected boolean startQueryString(Attributes attrs)\n+        throws SAXException {\n+        return true;\n+    }\n+\n+    protected void endQueryString()\n+        throws SAXException {\n+        QueryMetaData meta = (QueryMetaData) currentElement();\n+        meta.setQueryString(currentText());\n+    }\n+\n+    /**\n+     * Parse query-hint.\n+     */\n+    protected boolean startQueryHint(Attributes attrs)\n+        throws SAXException {\n+        QueryMetaData meta = (QueryMetaData) currentElement();\n+        meta.addHint(attrs.getValue(\"name\"), attrs.getValue(\"value\"));\n+        return true;\n+    }\n+\n+    protected void endQueryHint()\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Parse native-named-query.\n+     */\n+    protected boolean startNamedNativeQuery(Attributes attrs)\n+        throws SAXException {\n+        if (!isQueryMode())\n+            return false;\n+\n+        String name = attrs.getValue(\"name\");\n+        Log log = getLog();\n+        if (log.isTraceEnabled())\n+            log.trace(_loc.get(\"parse-native-query\", name));\n+\n+        QueryMetaData meta = getRepository().getCachedQueryMetaData(null, name);\n+        if (meta != null && log.isWarnEnabled())\n+            log.warn(_loc.get(\"override-query\", name, currentLocation()));\n+\n+        meta = getRepository().addQueryMetaData(null, name);\n+        meta.setDefiningType(_cls);\n+        meta.setQueryString(attrs.getValue(\"query\"));\n+        meta.setLanguage(QueryLanguages.LANG_SQL);\n+        String val = attrs.getValue(\"result-class\");\n+        if (val != null) {\n+            Class type = classForName(val);\n+            if (ImplHelper.isManagedType(getConfiguration(), type))\n+                meta.setCandidateType(type);\n+            else\n+                meta.setResultType(type);\n+        }\n+\n+        val = attrs.getValue(\"result-set-mapping\");\n+        if (val != null)\n+            meta.setResultSetMappingName(val);\n+\n+        Object cur = currentElement();\n+        Object scope = (cur instanceof ClassMetaData)\n+            ? ((ClassMetaData) cur).getDescribedType() : null;\n+        meta.setSource(getSourceFile(), scope, meta.SRC_XML);\n+        Locator locator = getLocation().getLocator();\n+        if (locator != null) {\n+            meta.setLineNumber(Numbers.valueOf(locator.getLineNumber()));\n+            meta.setColNumber(Numbers.valueOf(locator.getColumnNumber()));\n+        }\n+        if (isMetaDataMode())\n+            meta.setSourceMode(MODE_META);\n+        else if (isMappingMode())\n+            meta.setSourceMode(MODE_MAPPING);\n+        else\n+            meta.setSourceMode(MODE_QUERY);\n+        pushElement(meta);\n+        return true;\n+    }\n+\n+    protected void endNamedNativeQuery()\n+        throws SAXException {\n+        popElement();\n+    }\n+\n+    /**\n+     * Start entity-listeners\n+     */\n+    private boolean startEntityListeners(Attributes attrs)\n+        throws SAXException {\n+        if (!isMetaDataMode())\n+            return false;\n+        if (currentElement() == null)\n+            return true;\n+\n+        // reset listeners declared in annotations.\n+        LifecycleMetaData meta = ((ClassMetaData) currentElement()).\n+            getLifecycleMetaData();\n+        for (int i = 0; i < LifecycleEvent.ALL_EVENTS.length; i++)\n+            meta.setDeclaredCallbacks(i, null, 0);\n+        return true;\n+    }\n+\n+    /**\n+     * Parse exclude-default-listeners.\n+     */\n+    private boolean startExcludeDefaultListeners(Attributes attrs)\n+        throws SAXException {\n+        if (!isMetaDataMode())\n+            return false;\n+        ClassMetaData meta = (ClassMetaData) currentElement();\n+        meta.getLifecycleMetaData().setIgnoreSystemListeners(true);\n+        return true;\n+    }\n+\n+    /**\n+     * Parse exclude-superclass-listeners.\n+     */\n+    private boolean startExcludeSuperclassListeners(Attributes attrs)\n+        throws SAXException {\n+        if (!isMetaDataMode())\n+            return false;\n+        ClassMetaData meta = (ClassMetaData) currentElement();\n+        meta.getLifecycleMetaData().setIgnoreSuperclassCallbacks\n+            (LifecycleMetaData.IGNORE_HIGH);\n+        return true;\n+    }\n+\n+    /**\n+     * Parse entity-listener.\n+     */\n+    private boolean startEntityListener(Attributes attrs)\n+        throws SAXException {\n+        _listener = classForName(attrs.getValue(\"class\"));\n+        boolean system = currentElement() == null;\n+        Collection<LifecycleCallbacks>[] parsed =\n+            AnnotationPersistenceMetaDataParser.parseCallbackMethods(_listener,\n+                null, true, true, _repos);\n+        if (parsed == null)\n+            return true;\n+\n+        if (_callbacks == null) {\n+            _callbacks = (Collection<LifecycleCallbacks>[])\n+                new Collection[LifecycleEvent.ALL_EVENTS.length];\n+            if (!system)\n+                _highs = new int[LifecycleEvent.ALL_EVENTS.length];\n+        }\n+        for (int i = 0; i < parsed.length; i++) {\n+            if (parsed[i] == null)\n+                continue;\n+            if (_callbacks[i] == null)\n+                _callbacks[i] = parsed[i];\n+            else\n+                _callbacks[i].addAll(parsed[i]);\n+            if (!system)\n+                _highs[i] += parsed[i].size();\n+        }\n+        return true;\n+    }\n+\n+    private void endEntityListener()\n+        throws SAXException {\n+        // should be in endEntityListeners I think to merge callbacks\n+        // into a single listener.  But then the user cannot remove.\n+        if (currentElement() == null && _callbacks != null) {\n+            _repos.addSystemListener(new PersistenceListenerAdapter\n+                (_callbacks));\n+            _callbacks = null;\n+        }\n+        _listener = null;\n+    }\n+\n+    private boolean startCallback(MetaDataTag callback, Attributes attrs)\n+        throws SAXException {\n+        if (!isMetaDataMode())\n+            return false;\n+        int[] events = MetaDataParsers.getEventTypes(callback);\n+        if (events == null)\n+            return false;\n+\n+        boolean system = currentElement() == null;\n+        Class type = currentElement() == null ? null :\n+            ((ClassMetaData) currentElement()).getDescribedType();\n+        if (type == null)\n+            type = Object.class;\n+\n+        if (_callbacks == null) {\n+            _callbacks = (Collection<LifecycleCallbacks>[])\n+                new Collection[LifecycleEvent.ALL_EVENTS.length];\n+            if (!system)\n+                _highs = new int[LifecycleEvent.ALL_EVENTS.length];\n+        }\n+\n+        MetaDataDefaults def = _repos.getMetaDataFactory().getDefaults();\n+        LifecycleCallbacks adapter;\n+        if (_listener != null)\n+            adapter = new BeanLifecycleCallbacks(_listener,\n+                attrs.getValue(\"method-name\"), false, type);\n+        else\n+            adapter = new MethodLifecycleCallbacks(_cls,\n+                attrs.getValue(\"method-name\"), false);\n+\n+        for (int i = 0; i < events.length; i++) {\n+            int event = events[i];\n+            if (_listener != null) {\n+                MetaDataParsers.validateMethodsForSameCallback(_listener,\n+                    _callbacks[event], ((BeanLifecycleCallbacks) adapter).\n+                    getCallbackMethod(), callback, def, getLog());\n+            } else {\n+                MetaDataParsers.validateMethodsForSameCallback(_cls,\n+                    _callbacks[event], ((MethodLifecycleCallbacks) adapter).\n+                    getCallbackMethod(), callback, def, getLog());\n+\n+            }\n+            if (_callbacks[event] == null)\n+                _callbacks[event] = new ArrayList<LifecycleCallbacks>(3);\n+            _callbacks[event].add(adapter);\n+            if (!system && _listener != null)\n+                _highs[event]++;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Store lifecycle metadata.\n+     */\n+    private void storeCallbacks(ClassMetaData cls) {\n+        LifecycleMetaData meta = cls.getLifecycleMetaData();\n+        Class supCls = cls.getDescribedType().getSuperclass();\n+        Collection<LifecycleCallbacks>[] supCalls = null;\n+        if (!Object.class.equals(supCls)) {\n+            supCalls = AnnotationPersistenceMetaDataParser.parseCallbackMethods\n+                (supCls, null, true, false, _repos);\n+        }\n+        if (supCalls != null) {\n+            for (int event : LifecycleEvent.ALL_EVENTS) {\n+                if (supCalls[event] == null)\n+                    continue;\n+                meta.setNonPCSuperclassCallbacks(event, supCalls[event].toArray\n+                    (new LifecycleCallbacks[supCalls[event].size()]), 0);\n+            }\n+        }\n+        if (_callbacks == null)\n+            return;\n+\n+        for (int event : LifecycleEvent.ALL_EVENTS) {\n+            if (_callbacks[event] == null)\n+                continue;\n+            meta.setDeclaredCallbacks(event, (LifecycleCallbacks[])\n+                _callbacks[event].toArray\n+                    (new LifecycleCallbacks[_callbacks[event].size()]),\n+                _highs[event]);\n+        }\n+        _callbacks = null;\n+        _highs = null;\n+    }\n+\n+    /**\n+     * Instantiate the given class, taking into account the default package.\n+\t */\n+\tprotected Class classForName(String name)\n+\t\tthrows SAXException {\n+\t\tif (\"Entity\".equals(name))\n+\t\t\treturn PersistenceCapable.class;\n+\t\treturn super.classForName(name, isRuntime());\n+\t}\n+}"},{"sha":"c76f1f6afbc55763620149a48d5464c1139aee0e","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","status":"added","additions":1464,"deletions":0,"changes":1464,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataSerializer.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,1464 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.meta.CFMetaDataSerializer;\n+import org.apache.openjpa.lib.meta.SourceTracker;\n+import org.apache.openjpa.lib.util.JavaVersions;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.JavaTypes;\n+import org.apache.openjpa.meta.MetaDataInheritanceComparator;\n+import static org.apache.openjpa.meta.MetaDataModes.*;\n+import org.apache.openjpa.meta.MetaDataRepository;\n+import org.apache.openjpa.meta.Order;\n+import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.meta.ValueMetaData;\n+import org.apache.openjpa.util.InternalException;\n+import org.xml.sax.SAXException;\n+import serp.util.Strings;\n+\n+/**\n+ * Serializes persistence metadata back to XML.\n+ * This class processes all object level tags that are store-agnostic.\n+ * However, it provides hooks for the subclasses to include store-specific\n+ * tags to be serialized both at &lt;entity-mappings&gt; and\n+ * &lt;entity&gt; level.\n+ *\n+ * @since 0.4.0\n+ * @author Steve Kim\n+ * @nojavadoc\n+ */\n+public class XMLPersistenceMetaDataSerializer\n+    extends CFMetaDataSerializer\n+    implements PersistenceMetaDataFactory.Serializer {\n+\n+    // NOTE: order is important! these constants must be maintained in\n+    // serialization order. constants are spaced so that subclasses can\n+    // slip tags in-between\n+    protected static final int TYPE_SEQ = 10;\n+    protected static final int TYPE_QUERY = 20;\n+    protected static final int TYPE_META = 30;\n+    protected static final int TYPE_CLASS_SEQS = 40;\n+    protected static final int TYPE_CLASS_QUERIES = 50;\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (XMLPersistenceMetaDataSerializer.class);\n+\n+    private final OpenJPAConfiguration _conf;\n+    private Map<String, ClassMetaData> _metas = null;\n+    private Map<String, List> _queries = null;\n+    private Map<String, List> _seqs = null;\n+    private int _mode = MODE_NONE;\n+    private boolean _annos = true;\n+    private SerializationComparator _comp = null;\n+\n+    /**\n+     * Constructor. Supply configuration.\n+     */\n+    public XMLPersistenceMetaDataSerializer(OpenJPAConfiguration conf) {\n+        _conf = conf;\n+        setLog(conf.getLog(OpenJPAConfiguration.LOG_METADATA));\n+        setMode(MODE_META | MODE_MAPPING | MODE_QUERY);\n+    }\n+\n+    /**\n+     * Configuration.\n+     */\n+    public OpenJPAConfiguration getConfiguration() {\n+        return _conf;\n+    }\n+\n+    /**\n+     * Whether to serialize content originally specified in annotations.\n+     * Defaults to true.\n+     */\n+    public boolean getSerializeAnnotations() {\n+        return _annos;\n+    }\n+\n+    /**\n+     * Whether to serialize content originally specified in annotations.\n+     * Defaults to true.\n+     */\n+    public void setSerializeAnnotations(boolean annos) {\n+        _annos = annos;\n+    }\n+\n+    /**\n+     * The serialization mode according to the expected document type. The\n+     * mode constants act as bit flags, and therefore can be combined.\n+     */\n+    public int getMode() {\n+        return _mode;\n+    }\n+\n+    /**\n+     * The serialization mode according to the expected document type. The\n+     * mode constants act as bit flags, and therefore can be combined.\n+     */\n+    public void setMode(int mode) {\n+        _mode = mode;\n+    }\n+\n+    /**\n+     * The serialization mode according to the expected document type.\n+     */\n+    public void setMode(int mode, boolean on) {\n+        if (mode == MODE_NONE)\n+            setMode(MODE_NONE);\n+        else if (on)\n+            setMode(_mode | mode);\n+        else\n+            setMode(_mode & ~mode);\n+    }\n+\n+    /**\n+     * Override to not overwrite annotations.\n+     */\n+    @Override\n+    protected File getSourceFile(Object obj) {\n+        File file = super.getSourceFile(obj);\n+        if (file == null || file.getName().endsWith(\".java\")\n+            || file.getName().endsWith(\".class\"))\n+            return null;\n+        return file;\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}.\n+     */\n+    protected boolean isMetaDataMode() {\n+        return (_mode & MODE_META) != 0;\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}.\n+     */\n+    protected boolean isQueryMode() {\n+        return (_mode & MODE_QUERY) != 0;\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}.\n+     */\n+    protected boolean isMappingMode() {\n+        return (_mode & MODE_MAPPING) != 0;\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}. Takes into\n+     * account whether mapping information is loaded for the given instance.\n+     */\n+    protected boolean isMappingMode(ClassMetaData meta) {\n+        return isMappingMode() && (meta.getSourceMode() & MODE_MAPPING) != 0\n+            && (meta.getEmbeddingMetaData() != null\n+            || !meta.isEmbeddedOnly())\n+            && (meta.getEmbeddingMetaData() == null\n+            || isMappingMode(meta.getEmbeddingMetaData()));\n+    }\n+\n+    /**\n+     * Convenience method for interpreting {@link #getMode}. Takes into\n+     * account whether mapping information is loaded for the given instance.\n+     */\n+    protected boolean isMappingMode(ValueMetaData vmd) {\n+        return isMappingMode(vmd.getFieldMetaData().getDefiningMetaData());\n+    }\n+\n+    /**\n+     * Add a class meta data to the set to be serialized.\n+     */\n+    public void addMetaData(ClassMetaData meta) {\n+        if (meta == null)\n+            return;\n+\n+        if (_metas == null)\n+            _metas = new HashMap<String, ClassMetaData>();\n+        _metas.put(meta.getDescribedType().getName(), meta);\n+    }\n+\n+    /**\n+     * Add a sequence meta data to the set to be serialized.\n+     */\n+    public void addSequenceMetaData(SequenceMetaData meta) {\n+        if (meta == null)\n+            return;\n+\n+        List seqs = null;\n+        String defName = null;\n+        if (meta.getSourceScope() instanceof Class)\n+            defName = ((Class) meta.getSourceScope()).getName();\n+        if (_seqs == null)\n+            _seqs = new HashMap<String, List>();\n+        else\n+            seqs = _seqs.get(defName);\n+\n+        if (seqs == null) {\n+            seqs = new ArrayList(3); // don't expect many seqs / class\n+            seqs.add(meta);\n+            _seqs.put(defName, seqs);\n+        } else if (!seqs.contains(meta))\n+            seqs.add(meta);\n+    }\n+\n+    /**\n+     * Add a query meta data to the set to be serialized.\n+     */\n+    public void addQueryMetaData(QueryMetaData meta) {\n+        if (meta == null)\n+            return;\n+\n+        List queries = null;\n+        String defName = null;\n+        if (meta.getSourceScope() instanceof Class)\n+            defName = ((Class) meta.getSourceScope()).getName();\n+        if (_queries == null)\n+            _queries = new HashMap<String, List>();\n+        else\n+            queries = _queries.get(defName);\n+\n+        if (queries == null) {\n+            queries = new ArrayList(3); // don't expect many queries / class\n+            queries.add(meta);\n+            _queries.put(defName, queries);\n+        } else if (!queries.contains(meta))\n+            queries.add(meta);\n+    }\n+\n+    /**\n+     * Add all components in the given repository to the set to be serialized.\n+     */\n+    public void addAll(MetaDataRepository repos) {\n+        if (repos == null)\n+            return;\n+\n+        for (ClassMetaData meta : repos.getMetaDatas())\n+            addMetaData(meta);\n+        for (SequenceMetaData seq : repos.getSequenceMetaDatas())\n+            addSequenceMetaData(seq);\n+        for (QueryMetaData query : repos.getQueryMetaDatas())\n+            addQueryMetaData(query);\n+    }\n+\n+    /**\n+     * Remove a metadata from the set to be serialized.\n+     *\n+     * @return true if removed, false if not in set\n+     */\n+    public boolean removeMetaData(ClassMetaData meta) {\n+        return _metas != null && meta != null\n+            && _metas.remove(meta.getDescribedType().getName()) != null;\n+    }\n+\n+    /**\n+     * Remove a sequence metadata from the set to be serialized.\n+     *\n+     * @return true if removed, false if not in set\n+     */\n+    public boolean removeSequenceMetaData(SequenceMetaData meta) {\n+        if (_seqs == null || meta == null)\n+            return false;\n+        String defName = null;\n+        if (meta.getSourceScope() instanceof Class)\n+            defName = ((Class) meta.getSourceScope()).getName();\n+        List seqs = _seqs.get(defName);\n+        if (seqs == null)\n+            return false;\n+        if (!seqs.remove(meta))\n+            return false;\n+        if (seqs.isEmpty())\n+            _seqs.remove(defName);\n+        return true;\n+    }\n+\n+    /**\n+     * Remove a query metadata from the set to be serialized.\n+     *\n+     * @return true if removed, false if not in set\n+     */\n+    public boolean removeQueryMetaData(QueryMetaData meta) {\n+        if (_queries == null || meta == null)\n+            return false;\n+        String defName = null;\n+        if (meta.getSourceScope() instanceof Class)\n+            defName = ((Class) meta.getSourceScope()).getName();\n+        List queries = _queries.get(defName);\n+        if (queries == null)\n+            return false;\n+        if (!queries.remove(meta))\n+            return false;\n+        if (queries.isEmpty())\n+            _queries.remove(defName);\n+        return true;\n+    }\n+\n+    /**\n+     * Remove all the components in the given repository from the set to be\n+     * serialized.\n+     *\n+     * @return true if any components removed, false if none in set\n+     */\n+    public boolean removeAll(MetaDataRepository repos) {\n+        if (repos == null)\n+            return false;\n+\n+        boolean removed = false;\n+        ClassMetaData[] metas = repos.getMetaDatas();\n+        for (int i = 0; i < metas.length; i++)\n+            removed |= removeMetaData(metas[i]);\n+        SequenceMetaData[] seqs = repos.getSequenceMetaDatas();\n+        for (int i = 0; i < seqs.length; i++)\n+            removed |= removeSequenceMetaData(seqs[i]);\n+        QueryMetaData[] queries = repos.getQueryMetaDatas();\n+        for (int i = 0; i < queries.length; i++)\n+            removed |= removeQueryMetaData(queries[i]);\n+        return removed;\n+    }\n+\n+    /**\n+     * Clear the set of metadatas to be serialized.\n+     */\n+    public void clear() {\n+        if (_metas != null)\n+            _metas.clear();\n+        if (_seqs != null)\n+            _seqs.clear();\n+        if (_queries != null)\n+            _queries.clear();\n+    }\n+\n+    @Override\n+    protected Collection getObjects() {\n+        List all = new ArrayList();\n+        if (isQueryMode())\n+            addQueryMetaDatas(all);\n+        if (isMappingMode())\n+            addSequenceMetaDatas(all);\n+        if ((isMetaDataMode() || isMappingMode()) && _metas != null)\n+            all.addAll(_metas.values());\n+        if (isMappingMode())\n+            addSystemMappingElements(all);\n+        serializationSort(all);\n+        return all;\n+    }\n+\n+    /**\n+     * Add system-level mapping elements to be serialized. Does nothing\n+     * by default.\n+     */\n+    protected void addSystemMappingElements(Collection toSerialize) {\n+    }\n+\n+    /**\n+     * Sort the given collection of objects to be serialized.\n+     */\n+    private void serializationSort(List objs) {\n+        if (objs == null || objs.isEmpty())\n+            return;\n+        if (_comp == null)\n+            _comp = newSerializationComparator();\n+        Collections.sort(objs, _comp);\n+    }\n+\n+    /**\n+     * Create a new comparator for ordering objects that are to be serialized.\n+     */\n+    protected SerializationComparator newSerializationComparator() {\n+        return _comp;\n+    }\n+\n+    /**\n+     * Add sequence metadata to the given metadatas collection.\n+     */\n+    private void addSequenceMetaDatas(Collection all) {\n+        if (_seqs == null)\n+            return;\n+\n+        for (Map.Entry entry : _seqs.entrySet()) {\n+            if (entry.getKey() == null)\n+                all.addAll((List) entry.getValue());\n+            else if (_metas == null || !_metas.containsKey(entry.getKey()))\n+                all.add(new ClassSeqs((List<SequenceMetaData>)\n+                    entry.getValue()));\n+        }\n+    }\n+\n+    /**\n+     * Add query metadata to the given metadatas collection.\n+     */\n+    private void addQueryMetaDatas(Collection all) {\n+        if (_queries == null)\n+            return;\n+\n+        for (Map.Entry entry : _queries.entrySet()) {\n+            if (entry.getKey() == null)\n+                all.addAll((List) entry.getValue());\n+            else if (_mode == MODE_QUERY || _metas == null\n+                || !_metas.containsKey(entry.getKey()))\n+                all.add(new ClassQueries((List<QueryMetaData>)\n+                    entry.getValue()));\n+        }\n+    }\n+\n+    @Override\n+    protected void serialize(Collection objects)\n+        throws SAXException {\n+        // copy collection to avoid mutation\n+        Object meta;\n+        boolean unique = true;\n+        boolean fieldAccess = false;\n+        boolean propertyAccess = false;\n+        for (Iterator it = objects.iterator(); it.hasNext();) {\n+            meta = it.next();\n+            switch (type(meta)) {\n+                case TYPE_META:\n+                    ClassMetaData cls = (ClassMetaData) meta;\n+                    if (cls.getAccessType() == ClassMetaData.ACCESS_FIELD)\n+                        fieldAccess = true;\n+                    else\n+                        propertyAccess = true;\n+                    // no break\n+                default:\n+                    if (unique && getPackage() == null)\n+                        setPackage(getPackage(meta));\n+                    else if (unique) {\n+                        unique = getPackage().equals(getPackage(meta));\n+                        if (!unique)\n+                            setPackage(null);\n+                    }\n+            }\n+        }\n+\n+        serializeNamespaceAttributes();\n+        startElement(\"entity-mappings\");\n+        if (getPackage() != null) {\n+            startElement(\"package\");\n+            addText(getPackage());\n+            endElement(\"package\");\n+        }\n+        if (fieldAccess != propertyAccess) // i.e. only one\n+        {\n+            int def = getConfiguration().getMetaDataRepositoryInstance().\n+                getMetaDataFactory().getDefaults().getDefaultAccessType();\n+            String access = null;\n+            if (fieldAccess && def == ClassMetaData.ACCESS_PROPERTY)\n+                access = \"FIELD\";\n+            else if (propertyAccess && def == ClassMetaData.ACCESS_FIELD)\n+                access = \"PROPERTY\";\n+            if (access != null) {\n+                startElement(\"access\");\n+                addText(access);\n+                endElement(\"access\");\n+            }\n+        }\n+        for (Object obj : objects) {\n+            int type = type(obj);\n+            switch (type) {\n+                case TYPE_META:\n+                    serializeClass((ClassMetaData) obj, fieldAccess\n+                        && propertyAccess);\n+                    break;\n+                case TYPE_SEQ:\n+                    if (isMappingMode())\n+                        serializeSequence((SequenceMetaData) obj);\n+                case TYPE_QUERY:\n+                    serializeQuery((QueryMetaData) obj);\n+                    break;\n+                case TYPE_CLASS_QUERIES:\n+                    for (QueryMetaData query : ((ClassQueries) obj)\n+                        .getQueries())\n+                        serializeQuery(query);\n+                    break;\n+                case TYPE_CLASS_SEQS:\n+                    if (isMappingMode())\n+                        for (SequenceMetaData seq : ((ClassSeqs) obj)\n+                            .getSequences())\n+                            serializeSequence(seq);\n+                    break;\n+                default:\n+                    if (isMappingMode())\n+                        serializeSystemMappingElement(obj);\n+                    break;\n+            }\n+        }\n+        endElement(\"entity-mappings\");\n+    }\n+\n+    @Override\n+    protected String getPackage(Object obj) {\n+        int type = type(obj);\n+        switch (type) {\n+            case TYPE_META:\n+                return Strings.getPackageName(((ClassMetaData) obj).\n+                    getDescribedType());\n+            case TYPE_QUERY:\n+            case TYPE_SEQ:\n+            case TYPE_CLASS_QUERIES:\n+            case TYPE_CLASS_SEQS:\n+                SourceTracker st = (SourceTracker) obj;\n+                if (st.getSourceScope() instanceof Class)\n+                    return Strings.getPackageName((Class) st.getSourceScope());\n+                return null;\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    /**\n+     * Return the type constant for the given object based on its runtime\n+     * class. If the runtime class does not correspond to any of the known\n+     * types then returns -1. This can happen for tags\n+     * that are not handled at this store-agnostic level.\n+     */\n+    protected int type(Object o) {\n+        if (o instanceof ClassMetaData)\n+            return TYPE_META;\n+        if (o instanceof QueryMetaData)\n+            return TYPE_QUERY;\n+        if (o instanceof SequenceMetaData)\n+            return TYPE_SEQ;\n+        if (o instanceof ClassQueries)\n+            return TYPE_CLASS_QUERIES;\n+        if (o instanceof ClassSeqs)\n+            return TYPE_CLASS_SEQS;\n+        return -1;\n+    }\n+\n+    /**\n+     * Serialize namespace attributes\n+     */\n+    private void serializeNamespaceAttributes()\n+        throws SAXException {\n+        addAttribute(\"xmlns\", \"http://java.sun.com/xml/ns/persistence/orm\");\n+        addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n+        addAttribute(\"xsi:schemaLocation\",\n+            \"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\");\n+        addAttribute(\"version\", \"1.0\");\n+    }\n+\n+    /**\n+     * Serialize unknown mapping element at system level.\n+     */\n+    protected void serializeSystemMappingElement(Object obj)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Serialize query metadata.\n+     */\n+    private void serializeQuery(QueryMetaData meta)\n+        throws SAXException {\n+        if (!_annos && meta.getSourceType() == meta.SRC_ANNOTATIONS)\n+            return;\n+\n+        Log log = getLog();\n+        if (log.isInfoEnabled()) {\n+            if (meta.getSourceScope() instanceof Class)\n+                log.info(_loc.get(\"ser-cls-query\",\n+                    meta.getSourceScope(), meta.getName()));\n+            else\n+                log.info(_loc.get(\"ser-query\", meta.getName()));\n+        }\n+\n+        addComments(meta);\n+        addAttribute(\"name\", meta.getName());\n+        addAttribute(\"query\", meta.getQueryString());\n+        if (QueryLanguages.LANG_SQL.equals(meta.getLanguage())) {\n+            if (meta.getResultType() != null)\n+                addAttribute(\"result-class\", meta.getResultType().getName());\n+            startElement(\"named-native-query\");\n+            serializeQueryHints(meta);\n+            endElement(\"named-native-query\");\n+        } else {\n+            startElement(\"named-query\");\n+            serializeQueryHints(meta);\n+            endElement(\"named-query\");\n+        }\n+    }\n+\n+    /**\n+     * Serialize query hints.\n+     */\n+    private void serializeQueryHints(QueryMetaData meta)\n+        throws SAXException {\n+        String[] hints = meta.getHintKeys();\n+        Object[] values = meta.getHintValues();\n+        for (int i = 0; i < hints.length; i++) {\n+            addAttribute(\"name\", hints[i]);\n+            addAttribute(\"value\", String.valueOf(values[i]));\n+            startElement(\"query-hint\");\n+            endElement(\"query-hint\");\n+        }\n+    }\n+\n+    /**\n+     * Serialize sequence metadata.\n+     */\n+    protected void serializeSequence(SequenceMetaData meta)\n+        throws SAXException {\n+        if (!_annos && meta.getSourceType() == meta.SRC_ANNOTATIONS)\n+            return;\n+\n+        Log log = getLog();\n+        if (log.isInfoEnabled())\n+            log.info(_loc.get(\"ser-sequence\", meta.getName()));\n+\n+        addComments(meta);\n+        addAttribute(\"name\", meta.getName());\n+\n+        // parse out the datastore sequence name, if any\n+        String plugin = meta.getSequencePlugin();\n+        String clsName = Configurations.getClassName(plugin);\n+        String props = Configurations.getProperties(plugin);\n+        String ds = null;\n+        if (props != null) {\n+            Properties map = Configurations.parseProperties(props);\n+            ds = (String) map.remove(\"Sequence\");\n+            if (ds != null) {\n+                props = Configurations.serializeProperties(map);\n+                plugin = Configurations.getPlugin(clsName, props);\n+            }\n+        }\n+\n+        if (ds != null)\n+            addAttribute(\"sequence-name\", ds);\n+        else if (plugin != null && !SequenceMetaData.IMPL_NATIVE.equals\n+            (plugin))\n+            addAttribute(\"sequence-name\", plugin);\n+        if (meta.getInitialValue() != 0 && meta.getInitialValue() != -1)\n+            addAttribute(\"initial-value\",\n+                String.valueOf(meta.getInitialValue()));\n+        if (meta.getAllocate() != 50 && meta.getAllocate() != -1)\n+            addAttribute(\"allocation-size\",\n+                String.valueOf(meta.getAllocate()));\n+\n+        startElement(\"sequence-generator\");\n+        endElement(\"sequence-generator\");\n+    }\n+\n+    /**\n+     * Serialize class metadata.\n+     */\n+    protected void serializeClass(ClassMetaData meta, boolean access)\n+        throws SAXException {\n+        if (!_annos && meta.getSourceType() == meta.SRC_ANNOTATIONS)\n+            return;\n+\n+        Log log = getLog();\n+        if (log.isInfoEnabled())\n+            log.info(_loc.get(\"ser-class\", meta));\n+\n+        addComments(meta);\n+        addAttribute(\"class\", getClassName(meta.getDescribedType().\n+            getName()));\n+\n+        if (isMetaDataMode()\n+            && !meta.getTypeAlias().equals(Strings.getClassName(meta.\n+            getDescribedType())))\n+            addAttribute(\"name\", meta.getTypeAlias());\n+\n+        String name = getEntityElementName(meta);\n+        if (isMetaDataMode())\n+            addClassAttributes(meta, access);\n+        if (isMappingMode())\n+            addClassMappingAttributes(meta);\n+\n+        startElement(name);\n+        if (isMappingMode())\n+            serializeClassMappingContent(meta);\n+        if (isMetaDataMode())\n+            serializeIdClass(meta);\n+        if (isMappingMode())\n+            serializeInheritanceContent(meta);\n+\n+        if (isMappingMode()) {\n+            List seqs = (_seqs == null) ? null : _seqs.get\n+                (meta.getDescribedType().getName());\n+            if (seqs != null) {\n+                serializationSort(seqs);\n+                for (int i = 0; i < seqs.size(); i++)\n+                    serializeSequence((SequenceMetaData) seqs.get(i));\n+            }\n+        }\n+\n+        if (isQueryMode()) {\n+            List queries = (_queries == null) ? null : _queries.get\n+                (meta.getDescribedType().getName());\n+            if (queries != null) {\n+                serializationSort(queries);\n+                for (int i = 0; i < queries.size(); i++)\n+                    serializeQuery((QueryMetaData) queries.get(i));\n+            }\n+            if (isMappingMode())\n+                serializeQueryMappings(meta);\n+        }\n+\n+        List<FieldMetaData> fields = new ArrayList(Arrays.asList\n+            (meta.getDefinedFieldsInListingOrder()));\n+        Collections.sort(fields, new FieldComparator());\n+\n+        // serialize attr-override\n+        if (isMappingMode()) {\n+            FieldMetaData fmd;\n+            FieldMetaData orig;\n+            for (Iterator<FieldMetaData> it = fields.iterator(); it.hasNext();)\n+            {\n+                fmd = it.next();\n+                if (meta.getDefinedSuperclassField(fmd.getName()) == null)\n+                    continue;\n+                orig = meta.getPCSuperclassMetaData().getField(fmd.getName());\n+                if (serializeAttributeOverride(fmd, orig))\n+                    serializeAttributeOverrideContent(fmd, orig);\n+                it.remove();\n+            }\n+        }\n+\n+        if (fields.size() > 0 && (isMetaDataMode() || isMappingMode())) {\n+            startElement(\"attributes\");\n+            FieldMetaData orig;\n+            for (FieldMetaData fmd : fields) {\n+                if (fmd.getDeclaringType() != fmd.getDefiningMetaData().\n+                    getDescribedType()) {\n+                    orig = fmd.getDeclaringMetaData().getDeclaredField\n+                        (fmd.getName());\n+                } else\n+                    orig = null;\n+                serializeField(fmd, orig);\n+            }\n+            endElement(\"attributes\");\n+        }\n+        endElement(name);\n+    }\n+\n+    /**\n+     * Return the entity element name.\n+     */\n+    private static String getEntityElementName(ClassMetaData meta) {\n+        switch (getEntityTag(meta)) {\n+            case ENTITY:\n+                return \"entity\";\n+            case EMBEDDABLE:\n+                return \"embeddable\";\n+            case MAPPED_SUPERCLASS:\n+                return \"mapped-superclass\";\n+            default:\n+                throw new IllegalStateException();\n+        }\n+    }\n+\n+    /**\n+     * Return the MetaDataTag for the given class meta data.\n+     */\n+    private static MetaDataTag getEntityTag(ClassMetaData meta) {\n+        // @Embeddable classes can't declare Id fields\n+        if (meta.isEmbeddedOnly() && meta.getPrimaryKeyFields().length == 0)\n+            return MetaDataTag.EMBEDDABLE;\n+        if (meta.isMapped())\n+            return MetaDataTag.ENTITY;\n+        return MetaDataTag.MAPPED_SUPERCLASS;\n+    }\n+\n+    /**\n+     * Set class attributes.\n+     *\n+     * @param access whether to write access\n+     */\n+    private void addClassAttributes(ClassMetaData meta, boolean access) {\n+        if (!access)\n+            return;\n+        int def = getConfiguration().getMetaDataRepositoryInstance().\n+            getMetaDataFactory().getDefaults().getDefaultAccessType();\n+        if (meta.getAccessType() == ClassMetaData.ACCESS_FIELD\n+            && def == ClassMetaData.ACCESS_PROPERTY)\n+            addAttribute(\"access\", \"FIELD\");\n+        else if (meta.getAccessType() == ClassMetaData.ACCESS_PROPERTY\n+            && def == ClassMetaData.ACCESS_FIELD)\n+            addAttribute(\"access\", \"PROPERTY\");\n+    }\n+\n+    /**\n+     * Add mapping attributes for the given class. Does nothing by default\n+     */\n+    protected void addClassMappingAttributes(ClassMetaData mapping)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Serialize id-class.\n+     */\n+    private void serializeIdClass(ClassMetaData meta)\n+        throws SAXException {\n+        if (meta.getIdentityType() != ClassMetaData.ID_APPLICATION\n+            || meta.isOpenJPAIdentity())\n+            return;\n+\n+        ClassMetaData sup = meta.getPCSuperclassMetaData();\n+        Class oid = meta.getObjectIdType();\n+        if (oid != null && (sup == null || oid != sup.getObjectIdType())) {\n+            addAttribute(\"class\", getClassName(oid.getName()));\n+            startElement(\"id-class\");\n+            endElement(\"id-class\");\n+        }\n+    }\n+\n+    /**\n+     * Serialize class mapping content. Does nothing by default.\n+     */\n+    protected void serializeClassMappingContent(ClassMetaData mapping)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Serialize inheritance content. Does nothing by default.\n+     */\n+    protected void serializeInheritanceContent(ClassMetaData mapping)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Serialize query mappings. Does nothing by default.\n+     */\n+    protected void serializeQueryMappings(ClassMetaData meta)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Serialize the given field.\n+     */\n+    private void serializeField(FieldMetaData fmd, FieldMetaData orig)\n+        throws SAXException {\n+        if (fmd.getManagement() != FieldMetaData.MANAGE_PERSISTENT\n+            && !fmd.isExplicit())\n+            return;\n+\n+        addComments(fmd);\n+        addAttribute(\"name\", fmd.getName());\n+\n+        String strategy = null;\n+        PersistenceStrategy strat = getStrategy(fmd);\n+        ValueMetaData cascades = null;\n+        if (fmd.isPrimaryKey() && strat == PersistenceStrategy.EMBEDDED)\n+            strategy = \"embedded-id\";\n+        else if (fmd.isPrimaryKey())\n+            strategy = \"id\";\n+        else if (fmd.isVersion())\n+            strategy = \"version\";\n+        else {\n+            switch (strat) {\n+                case TRANSIENT:\n+                    strategy = \"transient\";\n+                    break;\n+                case BASIC:\n+                    if (isMetaDataMode())\n+                        addBasicAttributes(fmd);\n+                    strategy = \"basic\";\n+                    break;\n+                case EMBEDDED:\n+                    strategy = \"embedded\";\n+                    break;\n+                case MANY_ONE:\n+                    if (isMetaDataMode())\n+                        addManyToOneAttributes(fmd);\n+                    strategy = \"many-to-one\";\n+                    cascades = fmd;\n+                    break;\n+                case ONE_ONE:\n+                    if (isMetaDataMode())\n+                        addOneToOneAttributes(fmd);\n+                    strategy = \"one-to-one\";\n+                    cascades = fmd;\n+                    break;\n+                case ONE_MANY:\n+                    if (isMetaDataMode())\n+                        addOneToManyAttributes(fmd);\n+                    strategy = \"one-to-many\";\n+                    cascades = fmd.getElement();\n+                    break;\n+                case MANY_MANY:\n+                    if (isMetaDataMode())\n+                        addManyToManyAttributes(fmd);\n+                    strategy = \"many-to-many\";\n+                    cascades = fmd.getElement();\n+                    break;\n+            }\n+            if (isMappingMode())\n+                addStrategyMappingAttributes(fmd);\n+        }\n+        if (isMappingMode(fmd))\n+            addFieldMappingAttributes(fmd, orig);\n+\n+        startElement(strategy);\n+        if (fmd.getOrderDeclaration() != null) {\n+            startElement(\"order-by\");\n+            if (!(Order.ELEMENT + \" asc\").equals(fmd.getOrderDeclaration()))\n+                addText(fmd.getOrderDeclaration());\n+            endElement(\"order-by\");\n+        }\n+        if (isMappingMode() && fmd.getKey().getValueMappedBy() != null) {\n+            FieldMetaData mapBy = fmd.getKey().getValueMappedByMetaData();\n+            if (!mapBy.isPrimaryKey() ||\n+                mapBy.getDefiningMetaData().getPrimaryKeyFields().length != 1) {\n+                addAttribute(\"name\", fmd.getKey().getValueMappedBy());\n+            }\n+            startElement(\"map-key\");\n+            endElement(\"map-key\");\n+        }\n+        if (isMappingMode(fmd))\n+            serializeFieldMappingContent(fmd, strat);\n+        if (cascades != null && isMetaDataMode())\n+            serializeCascades(cascades);\n+        if (isMappingMode() && strat == PersistenceStrategy.EMBEDDED) {\n+            ClassMetaData meta = fmd.getEmbeddedMetaData();\n+            ClassMetaData owner = getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData\n+                (meta.getDescribedType(), meta.getEnvClassLoader(), true);\n+            FieldMetaData eorig;\n+            for (FieldMetaData efmd : meta.getFields()) {\n+                eorig = owner.getField(efmd.getName());\n+                if (serializeAttributeOverride(efmd, eorig))\n+                    serializeAttributeOverrideContent(efmd, eorig);\n+            }\n+        }\n+        endElement(strategy);\n+    }\n+\n+    /**\n+     * Add mapping attributes for the given field. Does nothing by default.\n+     */\n+    protected void addFieldMappingAttributes(FieldMetaData fmd,\n+        FieldMetaData orig)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Always returns false by default.\n+     */\n+    protected boolean serializeAttributeOverride(FieldMetaData fmd,\n+        FieldMetaData orig) {\n+        return false;\n+    }\n+\n+    /**\n+     * Serialize attribute override content.\n+     */\n+    private void serializeAttributeOverrideContent(FieldMetaData fmd,\n+        FieldMetaData orig)\n+        throws SAXException {\n+        addAttribute(\"name\", fmd.getName());\n+        startElement(\"attribute-override\");\n+        serializeAttributeOverrideMappingContent(fmd, orig);\n+        endElement(\"attribute-override\");\n+    }\n+\n+    /**\n+     * Serialize attribute override mapping content. Does nothing by default,\n+     */\n+    protected void serializeAttributeOverrideMappingContent\n+        (FieldMetaData fmd, FieldMetaData orig)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Serialize cascades.\n+     */\n+    private void serializeCascades(ValueMetaData vmd)\n+        throws SAXException {\n+        Collection<String> cascades = null;\n+        if (vmd.getCascadePersist() == ValueMetaData.CASCADE_IMMEDIATE) {\n+            if (cascades == null)\n+                cascades = new ArrayList<String>();\n+            cascades.add(\"cascade-persist\");\n+        }\n+        if (vmd.getCascadeAttach() == ValueMetaData.CASCADE_IMMEDIATE) {\n+            if (cascades == null)\n+                cascades = new ArrayList<String>();\n+            cascades.add(\"cascade-merge\");\n+        }\n+        if (vmd.getCascadeDelete() == ValueMetaData.CASCADE_IMMEDIATE) {\n+            if (cascades == null)\n+                cascades = new ArrayList<String>();\n+            cascades.add(\"cascade-remove\");\n+        }\n+        if (vmd.getCascadeRefresh() == ValueMetaData.CASCADE_IMMEDIATE) {\n+            if (cascades == null)\n+                cascades = new ArrayList<String>();\n+            cascades.add(\"cascade-refresh\");\n+        }\n+        if (cascades != null && cascades.size() == 4) // ALL\n+        {\n+            cascades.clear();\n+            cascades.add(\"cascade-all\");\n+        }\n+        if (cascades != null) {\n+            startElement(\"cascade\");\n+            for (String cascade : cascades) {\n+                startElement(cascade);\n+                endElement(cascade);\n+            }\n+            endElement(\"cascade\");\n+        }\n+    }\n+\n+    /**\n+     * Return the serialized strategy name.\n+     */\n+    protected PersistenceStrategy getStrategy(FieldMetaData fmd) {\n+        if (fmd.getManagement() == fmd.MANAGE_NONE)\n+            return PersistenceStrategy.TRANSIENT;\n+\n+        if (fmd.isSerialized()\n+            || fmd.getDeclaredType() == byte[].class\n+            || fmd.getDeclaredType() == Byte[].class\n+            || fmd.getDeclaredType() == char[].class\n+            || fmd.getDeclaredType() == Character[].class)\n+            return PersistenceStrategy.BASIC;\n+\n+        FieldMetaData mappedBy;\n+        switch (fmd.getDeclaredTypeCode()) {\n+            case JavaTypes.PC:\n+                if (fmd.isEmbedded())\n+                    return PersistenceStrategy.EMBEDDED;\n+                if (fmd.getMappedBy() != null)\n+                    return PersistenceStrategy.ONE_ONE;\n+                FieldMetaData[] inverses = fmd.getInverseMetaDatas();\n+                if (inverses.length == 1 &&\n+                    inverses[0].getTypeCode() == JavaTypes.PC &&\n+                    inverses[0].getMappedByMetaData() == fmd) {\n+                    return PersistenceStrategy.ONE_ONE;\n+                }\n+                return PersistenceStrategy.MANY_ONE;\n+            case JavaTypes.ARRAY:\n+            case JavaTypes.COLLECTION:\n+            case JavaTypes.MAP:\n+                mappedBy = fmd.getMappedByMetaData();\n+                if (mappedBy == null || mappedBy.getTypeCode() != JavaTypes.PC)\n+                    return PersistenceStrategy.MANY_MANY;\n+                return PersistenceStrategy.ONE_MANY;\n+            case JavaTypes.OID:\n+                return PersistenceStrategy.EMBEDDED;\n+            default:\n+                return PersistenceStrategy.BASIC;\n+        }\n+    }\n+\n+    /**\n+     * Add basic attributes.\n+     */\n+    private void addBasicAttributes(FieldMetaData fmd)\n+        throws SAXException {\n+        if (!fmd.isInDefaultFetchGroup())\n+            addAttribute(\"fetch\", \"LAZY\");\n+        if (fmd.getNullValue() == FieldMetaData.NULL_EXCEPTION)\n+            addAttribute(\"optional\", \"false\");\n+    }\n+\n+    /**\n+     * Add many-to-one attributes.\n+     */\n+    private void addManyToOneAttributes(FieldMetaData fmd)\n+        throws SAXException {\n+        if (!fmd.isInDefaultFetchGroup())\n+            addAttribute(\"fetch\", \"LAZY\");\n+        if (fmd.getNullValue() == FieldMetaData.NULL_EXCEPTION)\n+            addAttribute(\"optional\", \"false\");\n+    }\n+\n+    /**\n+     * Add one-to-one attributes.\n+     */\n+    private void addOneToOneAttributes(FieldMetaData fmd)\n+        throws SAXException {\n+        if (!fmd.isInDefaultFetchGroup())\n+            addAttribute(\"fetch\", \"LAZY\");\n+        if (fmd.getNullValue() == FieldMetaData.NULL_EXCEPTION)\n+            addAttribute(\"optional\", \"false\");\n+    }\n+\n+    /**\n+     * Add one-to-many attributes.\n+     */\n+    private void addOneToManyAttributes(FieldMetaData fmd)\n+        throws SAXException {\n+        if (fmd.isInDefaultFetchGroup())\n+            addAttribute(\"fetch\", \"EAGER\");\n+        addTargetEntityAttribute(fmd);\n+    }\n+\n+    /**\n+     * Add many-to-many attributes.\n+     */\n+    private void addManyToManyAttributes(FieldMetaData fmd)\n+        throws SAXException {\n+        if (fmd.isInDefaultFetchGroup())\n+            addAttribute(\"fetch\", \"EAGER\");\n+        addTargetEntityAttribute(fmd);\n+    }\n+\n+    /**\n+     * Add a target-entity attribute to collection and map fields that do\n+     * not use generics.\n+     */\n+    private void addTargetEntityAttribute(FieldMetaData fmd) \n+        throws SAXException {\n+        Member member = fmd.getBackingMember();\n+        Class[] types;\n+        if (member instanceof Field)\n+            types = JavaVersions.getParameterizedTypes((Field) member);\n+        else if (member instanceof Method)\n+            types = JavaVersions.getParameterizedTypes((Method) member);\n+        else\n+            types = new Class[0];\n+\n+        switch (fmd.getDeclaredTypeCode()) {\n+            case JavaTypes.COLLECTION:\n+                if (types.length != 1)\n+                    addAttribute(\"target-entity\", fmd.getElement().\n+                        getDeclaredType().getName());\n+                break;\n+            case JavaTypes.MAP:\n+                if (types.length != 2)\n+                    addAttribute(\"target-entity\", fmd.getElement().\n+                        getDeclaredType().getName());\n+                break;\n+        }\n+    }\n+\n+    /**\n+     * Serialize field mapping content; this will be called before\n+     * {@link #serializeValueMappingContent}. Does nothing by default.\n+     */\n+    protected void serializeFieldMappingContent(FieldMetaData fmd,\n+        PersistenceStrategy strategy)\n+        throws SAXException {\n+    }\n+\n+    /**\n+     * Set mapping attributes for strategy. Sets mapped-by by default.\n+     */\n+    protected void addStrategyMappingAttributes(FieldMetaData fmd)\n+        throws SAXException {\n+        if (fmd.getMappedBy() != null)\n+            addAttribute(\"mapped-by\", fmd.getMappedBy());\n+    }\n+\n+    /**\n+     * Represents ordered set of {@link SequenceMetaData}s with a\n+     * common class scope.\n+     *\n+     * @author Stephen Kim\n+     * @author Pinaki Poddar\n+     */\n+    private static class ClassSeqs\n+        implements SourceTracker, Comparable<ClassSeqs>,\n+        Comparator<SequenceMetaData> {\n+\n+        private final SequenceMetaData[] _seqs;\n+\n+        public ClassSeqs(List<SequenceMetaData> seqs) {\n+            if (seqs == null || seqs.isEmpty())\n+                throw new InternalException();\n+\n+            _seqs = (SequenceMetaData[]) seqs.toArray\n+                (new SequenceMetaData[seqs.size()]);\n+            Arrays.sort(_seqs, this);\n+        }\n+\n+        public SequenceMetaData[] getSequences() {\n+            return _seqs;\n+        }\n+\n+        /**\n+         * Compare sequence metadata on name.\n+         */\n+        public int compare(SequenceMetaData o1, SequenceMetaData o2) {\n+            return o1.getName().compareTo(o2.getName());\n+        }\n+\n+        public File getSourceFile() {\n+            return _seqs[0].getSourceFile();\n+        }\n+\n+        public Object getSourceScope() {\n+            return _seqs[0].getSourceScope();\n+        }\n+\n+        public int getSourceType() {\n+            return _seqs[0].getSourceType();\n+        }\n+\n+        public String getResourceName() {\n+            return _seqs[0].getResourceName();\n+        }\n+\n+        public int getLineNumber() {\n+            return _seqs[0].getLineNumber();\n+        }\n+\n+        public int getColNumber() {\n+            return _seqs[0].getColNumber();\n+        }\n+        \n+        public int compareTo(ClassSeqs other) {\n+            if (other == this)\n+                return 0;\n+            if (other == null)\n+                return -1;\n+            Class scope = (Class) getSourceScope();\n+            Class oscope = (Class) other.getSourceScope();\n+            return scope.getName().compareTo(oscope.getName());\n+        }\n+    }\n+\n+    /**\n+     * Represents ordered set of {@link QueryMetaData}s with a\n+     * common class scope.\n+     *\n+     * @author Stephen Kim\n+     * @author Pinaki Poddar\n+     */\n+    private static class ClassQueries\n+        implements SourceTracker, Comparable<ClassQueries>,\n+        Comparator<QueryMetaData> {\n+\n+        private final QueryMetaData[] _queries;\n+\n+        public ClassQueries(List<QueryMetaData> queries) {\n+            if (queries == null || queries.isEmpty())\n+                throw new InternalException();\n+\n+            _queries = (QueryMetaData[]) queries.toArray\n+                (new QueryMetaData[queries.size()]);\n+            Arrays.sort(_queries, this);\n+        }\n+\n+        public QueryMetaData[] getQueries() {\n+            return _queries;\n+        }\n+\n+        /**\n+         * Compare query metadata. Normal queries appear before native queries.\n+         * If the given queries use same language, then their names are\n+         * compared.\n+         */\n+        public int compare(QueryMetaData o1, QueryMetaData o2) {\n+            // normal queries before native\n+            if (!StringUtils.equals(o1.getLanguage(), o2.getLanguage())) {\n+                if (QueryLanguages.LANG_SQL.equals(o1.getLanguage()))\n+                    return 1;\n+                else\n+                    return -1;\n+            }\n+            return o1.getName().compareTo(o2.getName());\n+        }\n+\n+        public File getSourceFile() {\n+            return _queries[0].getSourceFile();\n+        }\n+\n+        public Object getSourceScope() {\n+            return _queries[0].getSourceScope();\n+        }\n+\n+        public int getSourceType() {\n+            return _queries[0].getSourceType();\n+        }\n+\n+        public String getResourceName() {\n+            return _queries[0].getResourceName();\n+        }\n+\n+        public int getLineNumber() {\n+            return _queries[0].getLineNumber();\n+        }\n+\n+        public int getColNumber() {\n+            return _queries[0].getColNumber();\n+        }\n+\n+        public int compareTo(ClassQueries other) {\n+            if (other == this)\n+                return 0;\n+            if (other == null)\n+                return -1;\n+            Class scope = (Class) getSourceScope();\n+            Class oscope = (Class) other.getSourceScope();\n+            return scope.getName().compareTo(oscope.getName());\n+        }\n+    }\n+\n+    /**\n+     * Compares clases, sequences, and queries to order them for serialization.\n+     * Places sequences first, then classes, then queries. Sequences and\n+     * queries are ordered alphabetically by name. Classes are placed in\n+     * listing order, in inheritance order within that, and in alphabetical\n+     * order within that.\n+     *\n+     * @author Stephen Kim\n+     */\n+    protected class SerializationComparator\n+        extends MetaDataInheritanceComparator {\n+\n+        public int compare(Object o1, Object o2) {\n+            if (o1 == o2)\n+                return 0;\n+            if (o1 == null)\n+                return 1;\n+            if (o2 == null)\n+                return -1;\n+\n+            int t1 = type(o1);\n+            int t2 = type(o2);\n+            if (t1 != t2)\n+                return t1 - t2;\n+\n+            switch (t1) {\n+                case TYPE_META:\n+                    return compare((ClassMetaData) o1, (ClassMetaData) o2);\n+                case TYPE_QUERY:\n+                    return compare((QueryMetaData) o1, (QueryMetaData) o2);\n+                case TYPE_SEQ:\n+                    return compare((SequenceMetaData) o1,\n+                        (SequenceMetaData) o2);\n+                case TYPE_CLASS_QUERIES:\n+                    return ((Comparable) o1).compareTo(o2);\n+                case TYPE_CLASS_SEQS:\n+                    return ((Comparable) o1).compareTo(o2);\n+                default:\n+                    return compareUnknown(o1, o2);\n+            }\n+        }\n+\n+        /**\n+         * Compare two unrecognized elements of the same type. Throws\n+         * exception by default.\n+         */\n+        protected int compareUnknown(Object o1, Object o2) {\n+            throw new InternalException();\n+        }\n+\n+        /**\n+         * Compare between two class metadata.\n+         */\n+        private int compare(ClassMetaData o1, ClassMetaData o2) {\n+            int li1 = o1.getListingIndex();\n+            int li2 = o2.getListingIndex();\n+            if (li1 == -1 && li2 == -1) {\n+                MetaDataTag t1 = getEntityTag(o1);\n+                MetaDataTag t2 = getEntityTag(o2);\n+                if (t1.compareTo(t2) != 0)\n+                    return t1.compareTo(t2);\n+                int inher = super.compare(o1, o2);\n+                if (inher != 0)\n+                    return inher;\n+                return o1.getDescribedType().getName().compareTo\n+                    (o2.getDescribedType().getName());\n+            }\n+\n+            if (li1 == -1)\n+                return 1;\n+            if (li2 == -1)\n+                return -1;\n+            return li1 - li2;\n+        }\n+\n+        /**\n+         * Compare query metadata.\n+         */\n+        private int compare(QueryMetaData o1, QueryMetaData o2) {\n+            // normal queries before native\n+            if (!StringUtils.equals(o1.getLanguage(), o2.getLanguage())) {\n+                if (QueryLanguages.LANG_SQL.equals(o1.getLanguage()))\n+                    return 1;\n+                else\n+                    return -1;\n+            }\n+            return o1.getName().compareTo(o2.getName());\n+        }\n+\n+        /**\n+         * Compare sequence metadata.\n+         */\n+        private int compare(SequenceMetaData o1, SequenceMetaData o2) {\n+            return o1.getName().compareTo(o2.getName());\n+        }\n+    }\n+\n+    /**\n+     * Sorts fields according to listing order, then XSD strategy order,\n+     * then name order.\n+     */\n+    private class FieldComparator\n+        implements Comparator {\n+\n+        public int compare(Object o1, Object o2) {\n+            FieldMetaData fmd1 = (FieldMetaData) o1;\n+            FieldMetaData fmd2 = (FieldMetaData) o2;\n+            if (fmd1.isPrimaryKey()) {\n+                if (fmd2.isPrimaryKey())\n+                    return fmd1.compareTo(fmd2);\n+                return -1;\n+            }\n+            if (fmd2.isPrimaryKey())\n+                return 1;\n+\n+            if (fmd1.isVersion()) {\n+                if (fmd2.isVersion())\n+                    return compareListingOrder(fmd1, fmd2);\n+\t\t\t\treturn getStrategy(fmd2) == PersistenceStrategy.BASIC ? 1 : -1;\n+\t\t\t}\n+\t\t\tif (fmd2.isVersion())\n+\t\t\t\treturn getStrategy(fmd1) == PersistenceStrategy.BASIC ? -1 : 1;\n+\n+\t\t\tint stcmp = getStrategy(fmd1).compareTo(getStrategy(fmd2));\n+            if (stcmp != 0)\n+                return stcmp;\n+            return compareListingOrder(fmd1, fmd2);\n+        }\n+\n+        private int compareListingOrder(FieldMetaData fmd1, FieldMetaData fmd2){\n+            int lcmp = fmd1.getListingIndex() - fmd2.getListingIndex();\n+            if (lcmp != 0)\n+                return lcmp;\n+            return fmd1.compareTo(fmd2);\n+\t\t}\n+\t}\n+}"},{"sha":"edf18da70ad5f0910565bd87e3a008590afd2773","filename":"1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/package.html","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,28 @@\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<html>\n+<body>\n+<p><strong>OpenJPA JPA</strong></p>\n+\n+<p>\n+    This package provides an JPA facade to OpenJPA. All major OpenJPA\n+    runtime components have JPA-flavored facades in this package.\n+</p>\n+</body>\n+</html>"},{"sha":"c7adc6055b3cf0b1888c636f5199d57afc2fcb9d","filename":"1.2.x/openjpa-persistence/src/main/resources/META-INF/services/javax.persistence.spi.PersistenceProvider","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/META-INF/services/javax.persistence.spi.PersistenceProvider","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/META-INF/services/javax.persistence.spi.PersistenceProvider","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/resources/META-INF/services/javax.persistence.spi.PersistenceProvider?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1 @@\n+org.apache.openjpa.persistence.PersistenceProviderImpl"},{"sha":"7114b600a471a03cf008b9b28efda0d32d2d083e","filename":"1.2.x/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+org.apache.openjpa.persistence.PersistenceProductDerivation"},{"sha":"2323f27df46eff6e056cc37aebe611197356abdd","filename":"1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","status":"added","additions":151,"deletions":0,"changes":151,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,151 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.  \n+\n+close-invoked: You have closed the EntityManager, though the persistence \\\n+    context will remain active until the current transaction commits.\n+no-managed-trans: There is no managed transaction in progress to sync this \\\n+\tEntityManager with.\n+get-managed-trans: You cannot access the EntityTransaction when using managed \\\n+\ttransactions.\n+trans-ctx-notactive: When using a persistence context type of TRANSACTION, you \\\n+\tcan only perform this operation during an active transaction. \n+not-entity: The class \"{0}\" is not an entity.\n+not-managed: Object \"{0}\" is not managed by this context.\n+parse-class: Parsing class \"{0}\".\n+parse-package: Parsing package \"{0}\".\n+parse-sequence: Parsing sequence \"{0}\".\n+parse-query: Parsing query \"{0}\".\n+parse-native-query: Parsing native query \"{0}\".\n+dup-metadata: Found duplicate metadata or mapping for \"{0}\".  Ignoring.\n+dup-sequence: Found duplicate generator \"{0}\" in \"{1}\".  Ignoring.\n+override-sequence: Found duplicate generator \"{0}\" in \"{1}\".  Overriding \\\n+\tprevious definition.\n+dup-query: Found duplicate query \"{0}\" in \"{1}\".  Ignoring.\n+override-query: Found duplicate query \"{0}\" in \"{1}\".  Overriding previous \\\n+\tdefinition.\n+no-seq-name: The sequence generator in \"{0}\" must declare a name.\n+no-query-name: The named query in \"{0}\" must declare a name.\n+no-native-query-name: The named native query in \"{0}\" must declare a name.\n+no-query-string: The named query \"{0}\" in \"{1}\" must declare a query string.\n+no-native-query-string: The named native query \"{0}\" in \"{1}\" must declare a \\\n+\tquery string.\n+already-pers: Field \"{0}\" cannot be annotated by two persistence strategy \\\n+\tannotations.\n+unsupported: OpenJPA does not yet support \"{1}\" as used in \"{0}\".\n+bad-meta-anno: The type of field \"{0}\" isn''t supported by declared \\\n+\tpersistence strategy \"{1}\".  Please choose a different strategy.\n+no-pers-strat: Fields \"{0}\" are not a default persistent type, and do not \\\n+\thave any annotations indicating their persistence strategy.  If you do \\\n+\tnot want these fields to be persisted, annotate them with @Transient.\n+generator-bad-strategy: \"{0}\" declares generator name \"{1}\", but uses the AUTO \\\n+\tgeneration type.  The only valid generator names under AUTO are \"uuid-hex\" \\\n+\tand \"uuid-string\". \n+unnamed-fg: \"{0}\" declares an unnamed fetch group.  All fetch groups \\\n+\tmust have names.\n+bad-fg-field: Fetch group \"{0}\" in type \"{1}\" includes field \"{2}\", but \\\n+\tthis field is not declared in \"{1}\", or is not persistent.  Currently, \\\n+\tOpenJPA only supports declared fields in fetch groups.\n+missing-included-fg:\"{0}\" declares a fetch group \"{1}\" includes \"{2}\". But \\\n+\tthe included fetch group \"{2}\" can not be found in \"{0}\". Currently, all \\\n+\tincluded fetch groups must be declared within the same entity scope.\n+not-update-delete-query: Cannot perform an update or delete operation \\\n+\ton select query: \"{0}\".\n+not-select-query: Cannot perform a select on update or delete query: \"{0}\".\n+no-results: Query did not return any results: \"{0}\".\n+mult-results: Query returned multiple results: \"{0}\".\n+no-pos-named-params-mix: Cannot mix named and positional parameters in query \\\n+\t\"{0}\".\n+bad-query-hint: \"{0}\" is not a recognized query hint.\n+bad-query-hint-value: Invalid value specified for query hint \"{0}\": {1}\n+detached: Cannot perform this operation on detached entity \"{0}\".\n+removed: Cannot perform this operation on removed entity \"{0}\".\n+bad-alias: There is no known entity class for entity name \"{0}\".  It is \\\n+\tpossible that the corresponding class has not yet been registered in the \\\n+\tJVM.\n+naming-exception: A NamingException was thrown while obtaining the \\\n+\tfactory at \"{0}\" from JNDI.\n+bad-jar-name: The jar resource \"{0}\" cannot be loaded.\n+missing-xml-config: The specified XML resource \"{0}\" for persistence unit \\\n+\t\"{1}\" can''t be found in your class path.\n+cantload-xml-config: The specified XML resource \"{0}\" for persistence unit \\\n+\t\"{1}\" can''t be parsed.\n+unknown-provider: Persistence provider \"{2}\" specified in persistence unit \\\n+\t\"{1}\" in \"{0}\" is not a recognized provider.\n+illegal-index: The parameter index {0} is invalid. Parameters must be \\\n+\tintegers starting at 1.\n+conf-load: Setting the following properties from \"{0}\" into configuration: {1}\n+no-named-field: Type \"{0}\" does not have a managed field named \"{1}\".\n+unsupported-tag: OpenJPA does not currently support XML element \"{0}\". Ignoring.\n+no-class: No class attribute was specified.\n+invalid-id-class: Could not load id class \"{1}\" for type \"{0}\".\n+invalid-attr: Could not find property/field with the name \"{0}\" in type \"{1}\".\n+ser-class: Writing class \"{0}\".\n+ser-cls-query: Writing query \"{1}\" in class \"{0}\".\n+ser-query: Writing query \"{1}\".\n+ser-sequence: Writing sequence \"{0}\".\n+no-sql: You must provide a SQL string when creating a native query.\n+no-named-params: Named parameter \"{0}\" is invalid for native query \"{1}\". \\\n+\tUse only 1-based positional parameter in native queries.\n+bad-pos-params: Positional parameter \"{0}\"  is invalid for native query \"{1}\". \\\n+\tUse only 1-based positional parameter in native queries.\n+bad-param-type: The parameter \"{0}\" is of type \"{1}\", but the \\\n+\tdeclaration in the query is for type \"{2}\". \n+bad-em-prop: Invalid EntityManager property passed to createEntityManager. \\\n+\tKey: \"{0}\", Value: \"{1}\".\n+bad-em-props: Invalid EntityManager properties passed to createEntityManager. \\\n+\tSee nested exceptions for details.\n+system-listener-err: An error occurred invoking system entity listener \\\n+\tcallback on instance \"{0}\".\n+no-transaction: Cannot perform operation with no transaction.\n+multiple-methods-on-callback: Class \"{0}\" declares method \"{1}\" as well \\\n+\tas \"{2}\" for handling the same \"{3}\" callback. \n+unloadable-provider: WARNING: Unable to load persistence provider \"{0}\" due \\\n+    to \"{1}\"\n+unrecognized-provider: WARNING: Found unrecognized persistence provider \"{0}\" \\\n+    in place of OpenJPA provider.  This provider''s properties will not be used.\n+cant-convert-brokerfactory: Unable to convert EntityManagerFactory of type \\\n+    \"{0}\" into a BrokerFactory.\n+cant-convert-broker: Unable to convert EntityManager of type \"{0}\" into a \\\n+    Broker.\n+map-persistent-type-names: Mapping resource location \"{0}\" to persistent \\\n+\ttypes \"{1}\".\n+map-persistent-types-skipping-non-url: Skipping persistent type location \\\n+    association for location \"{0}\" since it is not a URL.\n+map-persistent-types-skipping-class: Skipping persistent type location \\\n+    association for location \"{0}\" since it is a class, and will not \\\n+    need to be re-parsed later.\n+no-setter-for-getter: No setter was found for method {0} in type {1} while \\\n+    searching for persistent properties. This method will be ignored. If you \\\n+    intended for this to be persistent, please add a corresponding setter, \\\n+    or switch to field access for this type hierarchy.\n+transformer-registration-error: An error occurred while registering a \\\n+    ClassTransformer with {0}. The error has been consumed. To see it, set \\\n+    your openjpa.Runtime log level to TRACE. Load-time class transformation \\\n+    will not be available.\n+transformer-registration-error-ex: An error occurred while registering a \\\n+    ClassTransformer with {0}. The error is logged along with this warning. \\\n+    Load-time class transformation will not be available.\n+\n+EntityManagerFactory-name: EntityManagerFactory implementation\n+EntityManagerFactory-desc: Allows extension of standard \\\n+    org.apache.openjpa.persistence.EntityManagerFactoryImpl for custom behavior.\n+EntityManagerFactory-type: General\n+EntityManagerFactory-cat: Persistence.Advanced\n+EntityManagerFactory-displayorder: 50\n+EntityManagerFactory-expert: true\n+EntityManagerFactory-interface: org.apache.openjpa.persistence.EntityManagerFactoryImpl\n+"},{"sha":"9a0d1ddafef2c43d0824d41f33232d7664fec42d","filename":"1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/orm-xsd.rsrc","status":"added","additions":1516,"deletions":0,"changes":1516,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/orm-xsd.rsrc","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/orm-xsd.rsrc","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/orm-xsd.rsrc?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,1516 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Java Persistence API object-relational mapping file schema -->\n+<xsd:schema targetNamespace=\"http://java.sun.com/xml/ns/persistence/orm\" \n+  xmlns:orm=\"http://java.sun.com/xml/ns/persistence/orm\" \n+  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n+  elementFormDefault=\"qualified\" \n+  attributeFormDefault=\"unqualified\" \n+  version=\"1.0\">\n+\n+  <xsd:annotation>\n+    <xsd:documentation>\n+      @(#)orm_1_0.xsd 1.0  Feb 14 2006\n+    </xsd:documentation>\n+  </xsd:annotation>\n+  <xsd:annotation>\n+     <xsd:documentation><![CDATA[\n+\n+       This is the XML Schema for the persistence object-relational \n+       mapping file.\n+       The file may be named \"META-INF/orm.xml\" in the persistence \n+       archive or it may be named some other name which would be \n+       used to locate the file as resource on the classpath.\n+\n+     ]]></xsd:documentation>\n+  </xsd:annotation>\n+\n+  <xsd:complexType name=\"emptyType\"/>\n+\n+  <xsd:simpleType name=\"versionType\">\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:pattern value=\"[0-9]+(\\.[0-9]+)*\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:element name=\"entity-mappings\">\n+    <xsd:complexType>\n+      <xsd:annotation>\n+        <xsd:documentation>\n+\n+        The entity-mappings element is the root element of an mapping\n+        file. It contains the following four types of elements:\n+\n+        1. The persistence-unit-metadata element contains metadata\n+        for the entire persistence unit. It is undefined if this element\n+        occurs in multiple mapping files within the same persistence unit.\n+        \n+        2. The package, schema, catalog and access elements apply to all of\n+        the entity, mapped-superclass and embeddable elements defined in\n+        the same file in which they occur.\n+\n+        3. The sequence-generator, table-generator, named-query,\n+        named-native-query and sql-result-set-mapping elements are global\n+        to the persistence unit. It is undefined to have more than one\n+        sequence-generator or table-generator of the same name in the same\n+        or different mapping files in a persistence unit. It is also \n+        undefined to have more than one named-query or named-native-query\n+        of the same name in the same or different mapping files in a \n+        persistence unit.\n+\n+        4. The entity, mapped-superclass and embeddable elements each define\n+        the mapping information for a managed persistent class. The mapping\n+        information contained in these elements may be complete or it may\n+        be partial.\n+\n+        </xsd:documentation>\n+      </xsd:annotation>\n+      <xsd:sequence>\n+        <xsd:element name=\"description\" type=\"xsd:string\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"persistence-unit-metadata\" \n+                     type=\"orm:persistence-unit-metadata\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"package\" type=\"xsd:string\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"schema\" type=\"xsd:string\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"catalog\" type=\"xsd:string\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"access\" type=\"orm:access-type\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"sequence-generator\" type=\"orm:sequence-generator\"\n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"table-generator\" type=\"orm:table-generator\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"named-query\" type=\"orm:named-query\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"named-native-query\" type=\"orm:named-native-query\"\n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"sql-result-set-mapping\" \n+                     type=\"orm:sql-result-set-mapping\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"mapped-superclass\" type=\"orm:mapped-superclass\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"entity\" type=\"orm:entity\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"embeddable\" type=\"orm:embeddable\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xsd:sequence>\n+      <xsd:attribute name=\"version\" type=\"orm:versionType\" \n+                     fixed=\"1.0\" use=\"required\"/>\n+    </xsd:complexType>\n+  </xsd:element>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"persistence-unit-metadata\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        Metadata that applies to the persistence unit and not just to \n+        the mapping file in which it is contained. \n+\n+        If the xml-mapping-metadata-complete element is specified then \n+        the complete set of mapping metadata for the persistence unit \n+        is contained in the XML mapping files for the persistence unit.\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"xml-mapping-metadata-complete\" type=\"orm:emptyType\"\n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"persistence-unit-defaults\" \n+                   type=\"orm:persistence-unit-defaults\"\n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"persistence-unit-defaults\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        These defaults are applied to the persistence unit as a whole \n+        unless they are overridden by local annotation or XML \n+        element settings. \n+        \n+        schema - Used as the schema for all tables or secondary tables\n+            that apply to the persistence unit\n+        catalog - Used as the catalog for all tables or secondary tables\n+            that apply to the persistence unit\n+        access - Used as the access type for all managed classes in\n+            the persistence unit\n+        cascade-persist - Adds cascade-persist to the set of cascade options\n+            in entity relationships of the persistence unit\n+        entity-listeners - List of default entity listeners to be invoked \n+            on each entity in the persistence unit. \n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+        <xsd:element name=\"schema\" type=\"xsd:string\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"catalog\" type=\"xsd:string\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"access\" type=\"orm:access-type\"\n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"cascade-persist\" type=\"orm:emptyType\" \n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"entity-listeners\" type=\"orm:entity-listeners\"\n+                     minOccurs=\"0\"/>\n+    </xsd:sequence>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"entity\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        Defines the settings and mappings for an entity. Is allowed to be\n+        sparsely populated and used in conjunction with the annotations.\n+        Alternatively, the metadata-complete attribute can be used to \n+        indicate that no annotations on the entity class (and its fields\n+        or properties) are to be processed. If this is the case then \n+        the defaulting rules for the entity and its subelements will \n+        be recursively applied.\n+\n+        @Target(TYPE) @Retention(RUNTIME)\n+          public @interface Entity {\n+          String name() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"description\" type=\"xsd:string\" minOccurs=\"0\"/>\n+      <xsd:element name=\"table\" type=\"orm:table\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"secondary-table\" type=\"orm:secondary-table\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"primary-key-join-column\" \n+                   type=\"orm:primary-key-join-column\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"id-class\" type=\"orm:id-class\" minOccurs=\"0\"/>\n+      <xsd:element name=\"inheritance\" type=\"orm:inheritance\" minOccurs=\"0\"/>\n+      <xsd:element name=\"discriminator-value\" type=\"orm:discriminator-value\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"discriminator-column\" \n+                   type=\"orm:discriminator-column\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"sequence-generator\" type=\"orm:sequence-generator\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"table-generator\" type=\"orm:table-generator\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"named-query\" type=\"orm:named-query\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"named-native-query\" type=\"orm:named-native-query\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"sql-result-set-mapping\" \n+                   type=\"orm:sql-result-set-mapping\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"exclude-default-listeners\" type=\"orm:emptyType\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"exclude-superclass-listeners\" type=\"orm:emptyType\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"entity-listeners\" type=\"orm:entity-listeners\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-persist\" type=\"orm:pre-persist\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-persist\" type=\"orm:post-persist\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-remove\" type=\"orm:pre-remove\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-remove\" type=\"orm:post-remove\" minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-update\" type=\"orm:pre-update\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-update\" type=\"orm:post-update\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-load\" type=\"orm:post-load\" minOccurs=\"0\"/>\n+      <xsd:element name=\"attribute-override\" type=\"orm:attribute-override\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"association-override\" \n+                   type=\"orm:association-override\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"attributes\" type=\"orm:attributes\" minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"class\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"access\" type=\"orm:access-type\"/>\n+    <xsd:attribute name=\"metadata-complete\" type=\"xsd:boolean\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"attributes\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        This element contains the entity field or property mappings.\n+        It may be sparsely populated to include only a subset of the\n+        fields or properties. If metadata-complete for the entity is true\n+        then the remainder of the attributes will be defaulted according\n+        to the default rules.\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:choice>\n+        <xsd:element name=\"id\" type=\"orm:id\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"embedded-id\" type=\"orm:embedded-id\" \n+                     minOccurs=\"0\"/>\n+      </xsd:choice>\n+      <xsd:element name=\"basic\" type=\"orm:basic\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"version\" type=\"orm:version\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"many-to-one\" type=\"orm:many-to-one\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"one-to-many\" type=\"orm:one-to-many\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"one-to-one\" type=\"orm:one-to-one\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"many-to-many\" type=\"orm:many-to-many\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"embedded\" type=\"orm:embedded\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"transient\" type=\"orm:transient\"\n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"access-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        This element determines how the persistence provider accesses the\n+        state of an entity or embedded object.\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:enumeration value=\"PROPERTY\"/>\n+      <xsd:enumeration value=\"FIELD\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"entity-listeners\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface EntityListeners {\n+          Class[] value();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"entity-listener\" type=\"orm:entity-listener\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"entity-listener\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        Defines an entity listener to be invoked at lifecycle events\n+        for the entities that list this listener.\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"pre-persist\" type=\"orm:pre-persist\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-persist\" type=\"orm:post-persist\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-remove\" type=\"orm:pre-remove\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-remove\" type=\"orm:post-remove\" minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-update\" type=\"orm:pre-update\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-update\" type=\"orm:post-update\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-load\" type=\"orm:post-load\" minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"class\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"pre-persist\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD}) @Retention(RUNTIME)\n+        public @interface PrePersist {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"method-name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"post-persist\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD}) @Retention(RUNTIME)\n+        public @interface PostPersist {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"method-name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"pre-remove\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD}) @Retention(RUNTIME)\n+        public @interface PreRemove {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"method-name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"post-remove\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD}) @Retention(RUNTIME)\n+        public @interface PostRemove {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"method-name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"pre-update\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD}) @Retention(RUNTIME)\n+        public @interface PreUpdate {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"method-name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"post-update\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD}) @Retention(RUNTIME)\n+        public @interface PostUpdate {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"method-name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"post-load\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD}) @Retention(RUNTIME)\n+        public @interface PostLoad {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"method-name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"query-hint\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({}) @Retention(RUNTIME) \n+        public @interface QueryHint {\n+          String name();\n+          String value();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"value\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"named-query\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface NamedQuery {\n+          String name();\n+          String query();\n+          QueryHint[] hints() default {};\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"query\" type=\"xsd:string\"/>\n+      <xsd:element name=\"hint\" type=\"orm:query-hint\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"named-native-query\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface NamedNativeQuery {\n+          String name();\n+          String query();\n+          QueryHint[] hints() default {};\n+          Class resultClass() default void.class;\n+          String resultSetMapping() default \"\"; //named SqlResultSetMapping\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"query\" type=\"xsd:string\"/>\n+      <xsd:element name=\"hint\" type=\"orm:query-hint\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"result-class\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"result-set-mapping\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"sql-result-set-mapping\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface SqlResultSetMapping {\n+          String name();\n+          EntityResult[] entities() default {};\n+          ColumnResult[] columns() default {};\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"entity-result\" type=\"orm:entity-result\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"column-result\" type=\"orm:column-result\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"entity-result\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({}) @Retention(RUNTIME)\n+        public @interface EntityResult {\n+          Class entityClass();\n+          FieldResult[] fields() default {};\n+          String discriminatorColumn() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"field-result\" type=\"orm:field-result\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"entity-class\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"discriminator-column\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"field-result\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({}) @Retention(RUNTIME)\n+        public @interface FieldResult {\n+          String name();\n+          String column();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"column\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"column-result\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({}) @Retention(RUNTIME)\n+        public @interface ColumnResult {\n+          String name();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"table\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface Table {\n+          String name() default \"\";\n+          String catalog() default \"\";\n+          String schema() default \"\";\n+          UniqueConstraint[] uniqueConstraints() default {};\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"unique-constraint\" type=\"orm:unique-constraint\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"catalog\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"schema\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"secondary-table\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface SecondaryTable {\n+          String name();\n+          String catalog() default \"\";\n+          String schema() default \"\";\n+          PrimaryKeyJoinColumn[] pkJoinColumns() default {};\n+          UniqueConstraint[] uniqueConstraints() default {};\n+         }\n+\n+       </xsd:documentation>\n+     </xsd:annotation>\n+     <xsd:sequence>\n+       <xsd:element name=\"primary-key-join-column\" \n+                    type=\"orm:primary-key-join-column\" \n+                    minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+       <xsd:element name=\"unique-constraint\" type=\"orm:unique-constraint\" \n+                    minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"catalog\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"schema\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"unique-constraint\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({}) @Retention(RUNTIME)\n+        public @interface UniqueConstraint {\n+          String[] columnNames();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"column-name\" type=\"xsd:string\" \n+                   maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"column\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Column {\n+          String name() default \"\";\n+          boolean unique() default false;\n+          boolean nullable() default true;\n+          boolean insertable() default true;\n+          boolean updatable() default true;\n+          String columnDefinition() default \"\";\n+          String table() default \"\";\n+          int length() default 255;\n+          int precision() default 0; // decimal precision\n+          int scale() default 0; // decimal scale\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"unique\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"nullable\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"insertable\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"updatable\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"column-definition\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"table\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"length\" type=\"xsd:int\"/>\n+    <xsd:attribute name=\"precision\" type=\"xsd:int\"/>\n+    <xsd:attribute name=\"scale\" type=\"xsd:int\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"join-column\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface JoinColumn {\n+          String name() default \"\";\n+          String referencedColumnName() default \"\";\n+          boolean unique() default false;\n+          boolean nullable() default true;\n+          boolean insertable() default true;\n+          boolean updatable() default true;\n+          String columnDefinition() default \"\";\n+          String table() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"referenced-column-name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"unique\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"nullable\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"insertable\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"updatable\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"column-definition\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"table\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"generation-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum GenerationType { TABLE, SEQUENCE, IDENTITY, AUTO };\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:enumeration value=\"TABLE\"/>\n+      <xsd:enumeration value=\"SEQUENCE\"/>\n+      <xsd:enumeration value=\"IDENTITY\"/>\n+      <xsd:enumeration value=\"AUTO\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"attribute-override\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE, METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface AttributeOverride {\n+          String name();\n+          Column column();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"column\" type=\"orm:column\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"association-override\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE, METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface AssociationOverride {\n+          String name();\n+          JoinColumn[] joinColumns();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"join-column\" type=\"orm:join-column\"\n+                   maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"id-class\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface IdClass {\n+          Class value();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"class\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"id\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Id {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"column\" type=\"orm:column\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"generated-value\" type=\"orm:generated-value\"\n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"temporal\" type=\"orm:temporal\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"table-generator\" type=\"orm:table-generator\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"sequence-generator\" type=\"orm:sequence-generator\"\n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"embedded-id\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface EmbeddedId {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"attribute-override\" type=\"orm:attribute-override\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"transient\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Transient {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"version\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Version {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"column\" type=\"orm:column\" minOccurs=\"0\"/>\n+      <xsd:element name=\"temporal\" type=\"orm:temporal\" minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"basic\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Basic {\n+          FetchType fetch() default EAGER;\n+          boolean optional() default true;\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"column\" type=\"orm:column\" minOccurs=\"0\"/>\n+      <xsd:choice>\n+        <xsd:element name=\"lob\" type=\"orm:lob\" minOccurs=\"0\"/>\n+        <xsd:element name=\"temporal\" type=\"orm:temporal\" minOccurs=\"0\"/>\n+        <xsd:element name=\"enumerated\" type=\"orm:enumerated\" minOccurs=\"0\"/>\n+      </xsd:choice>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"fetch\" type=\"orm:fetch-type\"/>\n+    <xsd:attribute name=\"optional\" type=\"xsd:boolean\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"fetch-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum FetchType { LAZY, EAGER };\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:enumeration value=\"LAZY\"/>\n+      <xsd:enumeration value=\"EAGER\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"lob\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Lob {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"temporal\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Temporal {\n+          TemporalType value();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"orm:temporal-type\"/>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"temporal-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum TemporalType {\n+          DATE, // java.sql.Date\n+          TIME, // java.sql.Time\n+          TIMESTAMP // java.sql.Timestamp\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+      <xsd:restriction base=\"xsd:token\">\n+        <xsd:enumeration value=\"DATE\"/>\n+        <xsd:enumeration value=\"TIME\"/>\n+        <xsd:enumeration value=\"TIMESTAMP\"/>\n+     </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"enumerated\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Enumerated {\n+          EnumType value() default ORDINAL;\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"orm:enum-type\"/>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"enum-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum EnumType {\n+          ORDINAL,\n+          STRING\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:enumeration value=\"ORDINAL\"/>\n+      <xsd:enumeration value=\"STRING\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"many-to-one\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface ManyToOne {\n+          Class targetEntity() default void.class;\n+          CascadeType[] cascade() default {};\n+          FetchType fetch() default EAGER;\n+          boolean optional() default true;\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:choice>       \n+        <xsd:element name=\"join-column\" type=\"orm:join-column\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"join-table\" type=\"orm:join-table\" \n+                     minOccurs=\"0\"/>\n+      </xsd:choice>       \n+      <xsd:element name=\"cascade\" type=\"orm:cascade-type\" \n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"target-entity\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"fetch\" type=\"orm:fetch-type\"/>\n+    <xsd:attribute name=\"optional\" type=\"xsd:boolean\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"cascade-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum CascadeType { ALL, PERSIST, MERGE, REMOVE, REFRESH};\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"cascade-all\" type=\"orm:emptyType\"\n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"cascade-persist\" type=\"orm:emptyType\"\n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"cascade-merge\" type=\"orm:emptyType\"\n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"cascade-remove\" type=\"orm:emptyType\"\n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"cascade-refresh\" type=\"orm:emptyType\"\n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"one-to-one\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface OneToOne {\n+          Class targetEntity() default void.class;\n+          CascadeType[] cascade() default {};\n+          FetchType fetch() default EAGER;\n+          boolean optional() default true;\n+          String mappedBy() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:choice>\n+        <xsd:element name=\"primary-key-join-column\" \n+                     type=\"orm:primary-key-join-column\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"join-column\" type=\"orm:join-column\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+        <xsd:element name=\"join-table\" type=\"orm:join-table\" \n+                     minOccurs=\"0\"/>\n+      </xsd:choice>\n+      <xsd:element name=\"cascade\" type=\"orm:cascade-type\" \n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"target-entity\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"fetch\" type=\"orm:fetch-type\"/>\n+    <xsd:attribute name=\"optional\" type=\"xsd:boolean\"/>\n+    <xsd:attribute name=\"mapped-by\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"one-to-many\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface OneToMany {\n+          Class targetEntity() default void.class;\n+          CascadeType[] cascade() default {};\n+          FetchType fetch() default LAZY;\n+          String mappedBy() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"order-by\" type=\"orm:order-by\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"map-key\" type=\"orm:map-key\" \n+                   minOccurs=\"0\"/>\n+      <xsd:choice>       \n+        <xsd:element name=\"join-table\" type=\"orm:join-table\" \n+                     minOccurs=\"0\"/>\n+        <xsd:element name=\"join-column\" type=\"orm:join-column\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      </xsd:choice>       \n+      <xsd:element name=\"cascade\" type=\"orm:cascade-type\" \n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"target-entity\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"fetch\" type=\"orm:fetch-type\"/>\n+    <xsd:attribute name=\"mapped-by\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"join-table\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface JoinTable {\n+          String name() default \"\";\n+          String catalog() default \"\";\n+          String schema() default \"\";\n+          JoinColumn[] joinColumns() default {};\n+          JoinColumn[] inverseJoinColumns() default {};\n+          UniqueConstraint[] uniqueConstraints() default {};\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"join-column\" type=\"orm:join-column\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"inverse-join-column\" type=\"orm:join-column\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"unique-constraint\" type=\"orm:unique-constraint\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"catalog\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"schema\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"many-to-many\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface ManyToMany {\n+          Class targetEntity() default void.class;\n+          CascadeType[] cascade() default {};\n+          FetchType fetch() default LAZY;\n+          String mappedBy() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"order-by\" type=\"orm:order-by\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"map-key\" type=\"orm:map-key\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"join-table\" type=\"orm:join-table\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"cascade\" type=\"orm:cascade-type\" \n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"target-entity\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"fetch\" type=\"orm:fetch-type\"/>\n+    <xsd:attribute name=\"mapped-by\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"generated-value\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface GeneratedValue {\n+          GenerationType strategy() default AUTO;\n+          String generator() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"strategy\" type=\"orm:generation-type\"/>\n+    <xsd:attribute name=\"generator\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"map-key\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface MapKey {\n+          String name() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"order-by\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface OrderBy {\n+          String value() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:string\"/>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"inheritance\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface Inheritance {\n+          InheritanceType strategy() default SINGLE_TABLE;\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"strategy\" type=\"orm:inheritance-type\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"inheritance-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum InheritanceType\n+          { SINGLE_TABLE, JOINED, TABLE_PER_CLASS};\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:enumeration value=\"SINGLE_TABLE\"/>\n+      <xsd:enumeration value=\"JOINED\"/>\n+      <xsd:enumeration value=\"TABLE_PER_CLASS\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"discriminator-value\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface DiscriminatorValue {\n+          String value();\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:string\"/>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"discriminator-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum DiscriminatorType { STRING, CHAR, INTEGER };\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:enumeration value=\"STRING\"/>\n+      <xsd:enumeration value=\"CHAR\"/>\n+      <xsd:enumeration value=\"INTEGER\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"primary-key-join-column\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE, METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface PrimaryKeyJoinColumn {\n+          String name() default \"\";\n+          String referencedColumnName() default \"\";\n+          String columnDefinition() default \"\";\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"referenced-column-name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"column-definition\" type=\"xsd:string\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"discriminator-column\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface DiscriminatorColumn {\n+          String name() default \"DTYPE\";\n+          DiscriminatorType discriminatorType() default STRING;\n+          String columnDefinition() default \"\";\n+          int length() default 31;\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"discriminator-type\" type=\"orm:discriminator-type\"/>\n+    <xsd:attribute name=\"column-definition\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"length\" type=\"xsd:int\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"embeddable\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        Defines the settings and mappings for embeddable objects. Is \n+        allowed to be sparsely populated and used in conjunction with \n+        the annotations. Alternatively, the metadata-complete attribute \n+        can be used to indicate that no annotations are to be processed \n+        in the class. If this is the case then the defaulting rules will \n+        be recursively applied.\n+\n+        @Target({TYPE}) @Retention(RUNTIME)\n+        public @interface Embeddable {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"description\" type=\"xsd:string\" minOccurs=\"0\"/>\n+      <xsd:element name=\"attributes\" type=\"orm:embeddable-attributes\" \n+                   minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"class\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"access\" type=\"orm:access-type\"/>\n+    <xsd:attribute name=\"metadata-complete\" type=\"xsd:boolean\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"embeddable-attributes\">\n+    <xsd:sequence>\n+      <xsd:element name=\"basic\" type=\"orm:basic\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+      <xsd:element name=\"transient\" type=\"orm:transient\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"embedded\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface Embedded {}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"attribute-override\" type=\"orm:attribute-override\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"mapped-superclass\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        Defines the settings and mappings for a mapped superclass. Is \n+        allowed to be sparsely populated and used in conjunction with \n+        the annotations. Alternatively, the metadata-complete attribute \n+        can be used to indicate that no annotations are to be processed \n+        If this is the case then the defaulting rules will be recursively \n+        applied.\n+\n+        @Target(TYPE) @Retention(RUNTIME)\n+        public @interface MappedSuperclass{}\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"description\" type=\"xsd:string\" minOccurs=\"0\"/>\n+      <xsd:element name=\"id-class\" type=\"orm:id-class\" minOccurs=\"0\"/>\n+      <xsd:element name=\"exclude-default-listeners\" type=\"orm:emptyType\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"exclude-superclass-listeners\" type=\"orm:emptyType\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"entity-listeners\" type=\"orm:entity-listeners\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-persist\" type=\"orm:pre-persist\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-persist\" type=\"orm:post-persist\" \n+                   minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-remove\" type=\"orm:pre-remove\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-remove\" type=\"orm:post-remove\" minOccurs=\"0\"/>\n+      <xsd:element name=\"pre-update\" type=\"orm:pre-update\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-update\" type=\"orm:post-update\" minOccurs=\"0\"/>\n+      <xsd:element name=\"post-load\" type=\"orm:post-load\" minOccurs=\"0\"/>\n+      <xsd:element name=\"attributes\" type=\"orm:attributes\" minOccurs=\"0\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"class\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"access\" type=\"orm:access-type\"/>\n+    <xsd:attribute name=\"metadata-complete\" type=\"xsd:boolean\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"sequence-generator\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE, METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface SequenceGenerator {\n+          String name();\n+          String sequenceName() default \"\";\n+          int initialValue() default 1;\n+          int allocationSize() default 50;\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"sequence-name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"initial-value\" type=\"xsd:int\"/>\n+    <xsd:attribute name=\"allocation-size\" type=\"xsd:int\"/>\n+  </xsd:complexType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:complexType name=\"table-generator\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        @Target({TYPE, METHOD, FIELD}) @Retention(RUNTIME)\n+        public @interface TableGenerator {\n+          String name();\n+          String table() default \"\";\n+          String catalog() default \"\";\n+          String schema() default \"\";\n+          String pkColumnName() default \"\";\n+          String valueColumnName() default \"\";\n+          String pkColumnValue() default \"\";\n+          int initialValue() default 0;\n+          int allocationSize() default 50;\n+          UniqueConstraint[] uniqueConstraints() default {};\n+        }\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:sequence>\n+      <xsd:element name=\"unique-constraint\" type=\"orm:unique-constraint\" \n+                   minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n+    </xsd:sequence>\n+    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"/>\n+    <xsd:attribute name=\"table\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"catalog\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"schema\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"pk-column-name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"value-column-name\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"pk-column-value\" type=\"xsd:string\"/>\n+    <xsd:attribute name=\"initial-value\" type=\"xsd:int\"/>\n+    <xsd:attribute name=\"allocation-size\" type=\"xsd:int\"/>\n+  </xsd:complexType>\n+\n+</xsd:schema>\n+\n+"},{"sha":"88a61a90ee3f63b8e62e5ae34b8d038aac58f9aa","filename":"1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/persistence-xsd.rsrc","status":"added","additions":260,"deletions":0,"changes":260,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/persistence-xsd.rsrc","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/persistence-xsd.rsrc","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/main/resources/org/apache/openjpa/persistence/persistence-xsd.rsrc?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,260 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- persistence.xml schema -->\n+<xsd:schema targetNamespace=\"http://java.sun.com/xml/ns/persistence\" \n+  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n+  xmlns:persistence=\"http://java.sun.com/xml/ns/persistence\"\n+  elementFormDefault=\"qualified\" \n+  attributeFormDefault=\"unqualified\" \n+  version=\"1.0\">\n+\n+  <xsd:annotation>\n+    <xsd:documentation>\n+      @(#)persistence_1_0.xsd  1.0  Feb 9 2006\n+    </xsd:documentation>\n+  </xsd:annotation>\n+   <xsd:annotation>\n+     <xsd:documentation><![CDATA[\n+\n+     This is the XML Schema for the persistence configuration file.\n+     The file must be named \"META-INF/persistence.xml\" in the \n+     persistence archive.\n+     Persistence configuration files must indicate\n+     the persistence schema by using the persistence namespace:\n+\n+     http://java.sun.com/xml/ns/persistence\n+\n+     and indicate the version of the schema by\n+     using the version element as shown below:\n+\n+      <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+          http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n+        version=\"1.0\">\n+          ...\n+      </persistence>\n+\n+    ]]></xsd:documentation>\n+  </xsd:annotation>\n+\n+  <xsd:simpleType name=\"versionType\">\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:pattern value=\"[0-9]+(\\.[0-9]+)*\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:element name=\"persistence\">\n+    <xsd:complexType>\n+      <xsd:sequence>\n+\n+        <!-- **************************************************** -->\n+\n+        <xsd:element name=\"persistence-unit\" \n+                     minOccurs=\"0\" maxOccurs=\"unbounded\">\n+          <xsd:complexType>\n+            <xsd:annotation>\n+              <xsd:documentation>\n+\n+                Configuration of a persistence unit.\n+\n+              </xsd:documentation>\n+            </xsd:annotation>\n+            <xsd:sequence>\n+\n+            <!-- **************************************************** -->\n+\n+              <xsd:element name=\"description\" type=\"xsd:string\" \n+                           minOccurs=\"0\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    Textual description of this persistence unit.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"provider\" type=\"xsd:string\" \n+                           minOccurs=\"0\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    Provider class that supplies EntityManagers for this \n+                    persistence unit.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"jta-data-source\" type=\"xsd:string\" \n+                           minOccurs=\"0\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    The container-specific name of the JTA datasource to use.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"non-jta-data-source\" type=\"xsd:string\" \n+                           minOccurs=\"0\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    The container-specific name of a non-JTA datasource to use.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"mapping-file\" type=\"xsd:string\" \n+                           minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    File containing mapping information. Loaded as a resource \n+                    by the persistence provider.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"jar-file\" type=\"xsd:string\" \n+                           minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    Jar file that should be scanned for entities. \n+                    Not applicable to Java SE persistence units.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"class\" type=\"xsd:string\" \n+                           minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    Class to scan for annotations.  It should be annotated \n+                    with either @Entity, @Embeddable or @MappedSuperclass.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"exclude-unlisted-classes\" type=\"xsd:boolean\" \n+                           default=\"false\" minOccurs=\"0\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    When set to true then only listed classes and jars will \n+                    be scanned for persistent classes, otherwise the enclosing \n+                    jar or directory will also be scanned. Not applicable to \n+                    Java SE persistence units.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+              </xsd:element>\n+\n+              <!-- **************************************************** -->\n+\n+              <xsd:element name=\"properties\" minOccurs=\"0\">\n+                <xsd:annotation>\n+                  <xsd:documentation>\n+\n+                    A list of vendor-specific properties.\n+\n+                  </xsd:documentation>\n+                </xsd:annotation>\n+                <xsd:complexType>\n+                  <xsd:sequence>\n+                    <xsd:element name=\"property\" \n+                                 minOccurs=\"0\" maxOccurs=\"unbounded\">\n+                      <xsd:annotation>\n+                        <xsd:documentation>\n+                          A name-value pair.\n+                        </xsd:documentation>\n+                      </xsd:annotation>\n+                      <xsd:complexType>\n+                        <xsd:attribute name=\"name\" type=\"xsd:string\" \n+                                       use=\"required\"/>\n+                        <xsd:attribute name=\"value\" type=\"xsd:string\" \n+                                       use=\"required\"/>\n+                      </xsd:complexType>\n+                    </xsd:element>\n+                  </xsd:sequence>\n+                </xsd:complexType>\n+              </xsd:element>\n+\n+            </xsd:sequence>\n+\n+            <!-- **************************************************** -->\n+\n+            <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\">\n+              <xsd:annotation>\n+                <xsd:documentation>\n+\n+                  Name used in code to reference this persistence unit.\n+\n+                </xsd:documentation>\n+              </xsd:annotation>\n+            </xsd:attribute>\n+\n+            <!-- **************************************************** -->\n+\n+            <xsd:attribute name=\"transaction-type\" \n+                           type=\"persistence:persistence-unit-transaction-type\">\n+              <xsd:annotation>\n+                <xsd:documentation>\n+\n+                  Type of transactions used by EntityManagers from this \n+                  persistence unit.\n+\n+                </xsd:documentation>\n+              </xsd:annotation>\n+            </xsd:attribute>\n+\n+          </xsd:complexType>\n+        </xsd:element>\n+      </xsd:sequence>\n+      <xsd:attribute name=\"version\" type=\"persistence:versionType\" \n+                     fixed=\"1.0\" use=\"required\"/>\n+    </xsd:complexType>\n+  </xsd:element>\n+\n+  <!-- **************************************************** -->\n+\n+  <xsd:simpleType name=\"persistence-unit-transaction-type\">\n+    <xsd:annotation>\n+      <xsd:documentation>\n+\n+        public enum TransactionType { JTA, RESOURCE_LOCAL };\n+\n+      </xsd:documentation>\n+    </xsd:annotation>\n+    <xsd:restriction base=\"xsd:token\">\n+      <xsd:enumeration value=\"JTA\"/>\n+      <xsd:enumeration value=\"RESOURCE_LOCAL\"/>\n+    </xsd:restriction>\n+  </xsd:simpleType>\n+\n+</xsd:schema>\n+"},{"sha":"752b56a740ccdc5228ba4722ed85da17ec836a9d","filename":"1.2.x/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","status":"added","additions":270,"deletions":0,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,270 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence;\r\n+\r\n+import java.util.EnumSet;\r\n+\r\n+import junit.framework.TestCase;\r\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\r\n+import org.apache.openjpa.kernel.DetachState;\r\n+import org.apache.openjpa.kernel.RestoreState;\r\n+import org.apache.openjpa.kernel.AutoClear;\r\n+import org.apache.openjpa.kernel.AutoDetach;\r\n+import org.apache.openjpa.kernel.QueryOperations;\r\n+import org.apache.openjpa.event.CallbackModes;\r\n+\r\n+public class TestEnumToKernelConstantMappings\r\n+    extends TestCase {\r\n+\r\n+    public void testConnectionRetainModes() {\r\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_ALWAYS,\r\n+            ConnectionRetainMode.ALWAYS.toKernelConstant());\r\n+        assertEquals(ConnectionRetainMode.ALWAYS,\r\n+            ConnectionRetainMode.fromKernelConstant(\r\n+                ConnectionRetainModes.CONN_RETAIN_ALWAYS));\r\n+        assertEquals(ConnectionRetainMode.ALWAYS.toKernelConstant(),\r\n+            ConnectionRetainMode.ALWAYS.ordinal());\r\n+\r\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_DEMAND,\r\n+            ConnectionRetainMode.ON_DEMAND.toKernelConstant());\r\n+        assertEquals(ConnectionRetainMode.ON_DEMAND,\r\n+            ConnectionRetainMode.fromKernelConstant(\r\n+                ConnectionRetainModes.CONN_RETAIN_DEMAND));\r\n+        assertEquals(ConnectionRetainMode.ON_DEMAND.toKernelConstant(),\r\n+            ConnectionRetainMode.ON_DEMAND.ordinal());\r\n+\r\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_TRANS,\r\n+            ConnectionRetainMode.TRANSACTION.toKernelConstant());\r\n+        assertEquals(ConnectionRetainMode.TRANSACTION,\r\n+            ConnectionRetainMode.fromKernelConstant(\r\n+                ConnectionRetainModes.CONN_RETAIN_TRANS));\r\n+        assertEquals(ConnectionRetainMode.TRANSACTION.toKernelConstant(),\r\n+            ConnectionRetainMode.TRANSACTION.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(ConnectionRetainModes.class),\r\n+            ConnectionRetainMode.values().length);\r\n+    }\r\n+\r\n+    public void testDetachState() {\r\n+        assertEquals(DetachState.DETACH_ALL,\r\n+            DetachStateType.ALL.toKernelConstant());\r\n+        assertEquals(DetachStateType.ALL,\r\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_ALL));\r\n+        assertEquals(DetachStateType.ALL.toKernelConstant(),\r\n+            DetachStateType.ALL.ordinal());\r\n+\r\n+        assertEquals(DetachState.DETACH_FETCH_GROUPS,\r\n+            DetachStateType.FETCH_GROUPS.toKernelConstant());\r\n+        assertEquals(DetachStateType.FETCH_GROUPS,\r\n+            DetachStateType.fromKernelConstant(\r\n+                DetachState.DETACH_FETCH_GROUPS));\r\n+        assertEquals(DetachStateType.FETCH_GROUPS.toKernelConstant(),\r\n+            DetachStateType.FETCH_GROUPS.ordinal());\r\n+\r\n+        assertEquals(DetachState.DETACH_LOADED,\r\n+            DetachStateType.LOADED.toKernelConstant());\r\n+        assertEquals(DetachStateType.LOADED,\r\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_LOADED));\r\n+        assertEquals(DetachStateType.LOADED.toKernelConstant(),\r\n+            DetachStateType.LOADED.ordinal());\r\n+\r\n+        // subtract 1 for DetachState.DETACH_FGS, which is deprecated\r\n+        assertEquals(getConstantCount(DetachState.class) - 1,\r\n+            DetachStateType.values().length);\r\n+    }\r\n+\r\n+    public void testRestoreState() {\r\n+        assertEquals(RestoreState.RESTORE_ALL,\r\n+            RestoreStateType.ALL.toKernelConstant());\r\n+        assertEquals(RestoreStateType.ALL,\r\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_ALL));\r\n+        assertEquals(RestoreStateType.ALL.toKernelConstant(),\r\n+            RestoreStateType.ALL.ordinal());\r\n+\r\n+        assertEquals(RestoreState.RESTORE_IMMUTABLE,\r\n+            RestoreStateType.IMMUTABLE.toKernelConstant());\r\n+        assertEquals(RestoreStateType.IMMUTABLE,\r\n+            RestoreStateType.fromKernelConstant(\r\n+                RestoreState.RESTORE_IMMUTABLE));\r\n+        assertEquals(RestoreStateType.IMMUTABLE.toKernelConstant(),\r\n+            RestoreStateType.IMMUTABLE.ordinal());\r\n+\r\n+        assertEquals(RestoreState.RESTORE_NONE,\r\n+            RestoreStateType.NONE.toKernelConstant());\r\n+        assertEquals(RestoreStateType.NONE,\r\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_NONE));\r\n+        assertEquals(RestoreStateType.NONE.toKernelConstant(),\r\n+            RestoreStateType.NONE.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(RestoreState.class),\r\n+            RestoreStateType.values().length);\r\n+    }\r\n+\r\n+    public void testAutoClear() {\r\n+        assertEquals(AutoClear.CLEAR_ALL, AutoClearType.ALL.toKernelConstant());\r\n+        assertEquals(AutoClearType.ALL,\r\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_ALL));\r\n+        assertEquals(AutoClearType.ALL.toKernelConstant(),\r\n+            AutoClearType.ALL.ordinal());\r\n+\r\n+        assertEquals(AutoClear.CLEAR_DATASTORE,\r\n+            AutoClearType.DATASTORE.toKernelConstant());\r\n+        assertEquals(AutoClearType.DATASTORE,\r\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_DATASTORE));\r\n+        assertEquals(AutoClearType.DATASTORE.toKernelConstant(),\r\n+            AutoClearType.DATASTORE.ordinal());\r\n+\r\n+        assertEquals(getConstantCount(AutoClear.class),\r\n+            AutoClearType.values().length);\r\n+    }\r\n+\r\n+    public void testAutoDetach() {\r\n+        assertEquals(getConstantCount(AutoDetach.class),\r\n+            AutoDetachType.values().length);\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_CLOSE));\r\n+        assertEquals(AutoDetach.DETACH_CLOSE,\r\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.CLOSE)));\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.COMMIT),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_COMMIT));\r\n+        assertEquals(AutoDetach.DETACH_COMMIT,\r\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.COMMIT)));\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_NONTXREAD));\r\n+        assertEquals(AutoDetach.DETACH_NONTXREAD,\r\n+            AutoDetachType.fromEnumSet(\r\n+                EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ)));\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.ROLLBACK),\r\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_ROLLBACK));\r\n+        assertEquals(AutoDetach.DETACH_ROLLBACK,\r\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.ROLLBACK)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE, AutoDetachType.COMMIT),\r\n+            AutoDetachType.toEnumSet(\r\n+                AutoDetach.DETACH_CLOSE | AutoDetach.DETACH_COMMIT));\r\n+        assertEquals(AutoDetach.DETACH_ROLLBACK | AutoDetach.DETACH_CLOSE,\r\n+            AutoDetachType.fromEnumSet(\r\n+                EnumSet.of(AutoDetachType.ROLLBACK, AutoDetachType.CLOSE)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.allOf(AutoDetachType.class),\r\n+            AutoDetachType.toEnumSet(\r\n+                AutoDetach.DETACH_CLOSE\r\n+                    | AutoDetach.DETACH_COMMIT\r\n+                    | AutoDetach.DETACH_NONTXREAD\r\n+                    | AutoDetach.DETACH_ROLLBACK));\r\n+        assertEquals(AutoDetach.DETACH_CLOSE\r\n+                    | AutoDetach.DETACH_COMMIT\r\n+                    | AutoDetach.DETACH_NONTXREAD\r\n+                    | AutoDetach.DETACH_ROLLBACK,\r\n+            AutoDetachType.fromEnumSet(EnumSet.allOf(AutoDetachType.class)));\r\n+    }\r\n+\r\n+    public void testCallbackMode() {\r\n+        assertEquals(getConstantCount(CallbackModes.class),\r\n+            CallbackMode.values().length);\r\n+\r\n+        assertEquals(EnumSet.of(CallbackMode.FAIL_FAST),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\r\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST,\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.FAIL_FAST)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackMode.IGNORE),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_IGNORE));\r\n+        assertEquals(CallbackModes.CALLBACK_IGNORE,\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.IGNORE)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackMode.LOG),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_LOG));\r\n+        assertEquals(CallbackModes.CALLBACK_LOG,\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.LOG)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackMode.RETHROW),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_RETHROW));\r\n+        assertEquals(CallbackModes.CALLBACK_RETHROW,\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.RETHROW)));\r\n+\r\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\r\n+        assertEquals(CallbackModes.CALLBACK_ROLLBACK,\r\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.ROLLBACK)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE),\r\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\r\n+                | CallbackModes.CALLBACK_IGNORE));\r\n+        assertEquals(\r\n+            CallbackModes.CALLBACK_ROLLBACK | CallbackModes.CALLBACK_IGNORE,\r\n+            CallbackMode.fromEnumSet(\r\n+                EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE)));\r\n+\r\n+\r\n+        assertEquals(EnumSet.allOf(CallbackMode.class),\r\n+            CallbackMode.toEnumSet(\r\n+                CallbackModes.CALLBACK_FAIL_FAST\r\n+                    | CallbackModes.CALLBACK_IGNORE\r\n+                    | CallbackModes.CALLBACK_LOG\r\n+                    | CallbackModes.CALLBACK_RETHROW\r\n+                    | CallbackModes.CALLBACK_ROLLBACK));\r\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST\r\n+                    | CallbackModes.CALLBACK_IGNORE\r\n+                    | CallbackModes.CALLBACK_LOG\r\n+                    | CallbackModes.CALLBACK_RETHROW\r\n+                    | CallbackModes.CALLBACK_ROLLBACK,\r\n+            CallbackMode.fromEnumSet(EnumSet.allOf(CallbackMode.class)));\r\n+    }\r\n+\r\n+    public void testQueryOperationTypes() {\r\n+        assertEquals(QueryOperations.OP_SELECT,\r\n+            QueryOperationType.SELECT.toKernelConstant());\r\n+        assertEquals(QueryOperationType.SELECT,\r\n+            QueryOperationType.fromKernelConstant(\r\n+                QueryOperations.OP_SELECT));\r\n+        assertEquals(QueryOperationType.SELECT.toKernelConstant(),\r\n+            QueryOperationType.SELECT.ordinal() + 1);\r\n+\r\n+        assertEquals(QueryOperations.OP_UPDATE,\r\n+            QueryOperationType.UPDATE.toKernelConstant());\r\n+        assertEquals(QueryOperationType.UPDATE,\r\n+            QueryOperationType.fromKernelConstant(\r\n+                QueryOperations.OP_UPDATE));\r\n+        assertEquals(QueryOperationType.UPDATE.toKernelConstant(),\r\n+            QueryOperationType.UPDATE.ordinal() + 1);\r\n+\r\n+        assertEquals(QueryOperations.OP_DELETE,\r\n+            QueryOperationType.DELETE.toKernelConstant());\r\n+        assertEquals(QueryOperationType.DELETE,\r\n+            QueryOperationType.fromKernelConstant(\r\n+                QueryOperations.OP_DELETE));\r\n+        assertEquals(QueryOperationType.DELETE.toKernelConstant(),\r\n+            QueryOperationType.DELETE.ordinal() + 1);\r\n+\r\n+        assertEquals(getConstantCount(QueryOperations.class),\r\n+            QueryOperationType.values().length);\r\n+    }\r\n+\r\n+    private int getConstantCount(Class cls) {\r\n+        return cls.getDeclaredFields().length;\r\n+    }\r\n+}\r"},{"sha":"f35fecaeca80c4aaafc1f416fcbcaa3afe825889","filename":"1.2.x/openjpa-project/BUILDING.txt","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/BUILDING.txt","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/BUILDING.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/BUILDING.txt?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,165 @@\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+\n+ \n+                     Building OpenJPA\n+===============================================================================\n+\n+These instructions describe how to build OpenJPA from source code using the\n+Apache Maven 2 build too. They are written for use from the console, and are \n+known to work on Linux and Mac OSX. They are also reported to work from Windows.\n+\n+The most up to date version of these instructions may be found on the OpenJPA \n+website at http://openjpa.apache.org/building-openjpa.html\n+\n+   1. Ensure that you have Java 1.5 installed and in your path by running:\n+      java -version\n+      OpenJPA requires Java 1.5 but will not compile with Java 6. For more\n+      detail please see http://issues.apache.org/jira/browse/OPENJPA-5.\n+   2. Install the build tool Apache Maven 2.0.6, from http://maven.apache.org/.\n+      If it is installed correctly, typing mvn -v from the console will result\n+      in the text \"Maven version: 2.0.6\"\n+   3. Extract the source archive if you have not already done so. \n+      The source will create a new directory named:\n+      openjpa-<version>-source. Where <version> is the openjpa \n+      version, for example apache-openjpa-1.1.0-source.\n+   4. Change to the openjpa source directory, which has already been created in\n+      the previous step.\n+   5. Build OpenJPA by running: mvn package or better mvn install. \n+      The first time you run the build, many dependencies are automatically \n+      resolved and downloaded. It is common for dependency downloading to fail\n+      the first time, which will fail the build. If any of these dependency \n+      downloads fail, just re-run the command. You may also add the following \n+      to your ~/.m2/setting.xml file\n+      (see http://maven.apache.org/guides/mini/guide-mirror-settings.html)\n+\n+       <settings>\n+           <mirrors>\n+               <mirror>\n+                   <id>repo.mergere.com</id>\n+                   <url>http://repo.mergere.com/maven2</url>\n+                   <mirrorOf>central</mirrorOf>\n+                   </mirror>\n+           </mirrors>\n+        </settings>\n+\n+        If any tests fail, and you want to ignore the failures, instead run:\n+        mvn package -DskipTests\n+\n+An example session as as follows:\n+\n+$ cd /tmp/\n+\n+$ java -version\n+\n+java version \"1.5.0_06\"\n+Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_06-112)\n+Java HotSpot(TM) Client VM (build 1.5.0_06-64, mixed mode, sharing)\n+\n+$ mvn -v\n+\n+Maven version: 2.0.4\n+\n+$ svn --version\n+\n+svn, version 1.1.4 (r13838)\n+   compiled Jul 10 2006, 22:17:43\n+\n+$ svn co https://svn.apache.org/repos/asf/openjpa/trunk/\n+\n+A  trunk/openjpa-lib\n+A  trunk/openjpa-lib/src\n+A  trunk/openjpa-lib/src/test\n+A  trunk/openjpa-lib/src/test/java\n+A  trunk/openjpa-lib/src/test/java/org\n+A  trunk/openjpa-lib/src/test/java/org/apache\n+A  trunk/openjpa-lib/src/test/java/org/apache/openjpa\n+A  trunk/openjpa-lib/src/test/java/org/apache/openjpa/lib\n+A  trunk/openjpa-lib/src/test/java/org/apache/openjpa/lib/test\n+A  trunk/openjpa-lib/src/test/java/org/apache/openjpa/lib/test/AbstractTestCase.\n+java\n+\n+ ...\n+\n+A  trunk/openjpa-persistence/pom.xml\n+Checked out revision 421381.\n+\n+$ cd trunk/\n+\n+$ mvn compile\n+\n+[INFO] Scanning for projects...\n+[INFO] Reactor build order: \n+[INFO]   OpenJPA\n+[INFO]   Utilities\n+[INFO]   Kernel\n+[INFO]   JDBC\n+[INFO]   XML Store\n+[INFO]   JDBC 1.5\n+[INFO]   Kernel 1.5\n+[INFO]   JPA\n+[INFO]   JPA JDBC\n+[INFO]   OpenJPA Project\n+[INFO] -------------------------------------------------------------------------\n+[INFO] Building OpenJPA\n+[INFO]    task-segment: [compile]\n+[INFO] -------------------------------------------------------------------------\n+\n+ ...\n+\n+[INFO] \n+[INFO] ------------------------------------------------------------------------\n+[INFO] Reactor Summary:\n+[INFO] ------------------------------------------------------------------------\n+[INFO] OpenJPA ............................................... SUCCESS [0.789s]\n+[INFO] Utilities ............................................. SUCCESS [3.489s]\n+[INFO] Kernel ................................................ SUCCESS [9.347s]\n+[INFO] JDBC .................................................. SUCCESS [12.208s]\n+[INFO] XML Store ............................................. SUCCESS [1.166s]\n+[INFO] JDBC 1.5 .............................................. SUCCESS [1.519s]\n+[INFO] Kernel 1.5 ............................................ SUCCESS [0.538s]\n+[INFO] JPA ................................................... SUCCESS [2.777s]\n+[INFO] JPA JDBC .............................................. SUCCESS [2.151s]\n+[INFO] OpenJPA Project ....................................... SUCCESS [1.495s]\n+[INFO] ------------------------------------------------------------------------\n+[INFO] ------------------------------------------------------------------------\n+[INFO] BUILD SUCCESSFUL\n+[INFO] ------------------------------------------------------------------------\n+[INFO] Total time: 37 seconds\n+[INFO] Finished at: Wed Jul 26 11:44:33 PDT 2006\n+[INFO] Final Memory: 10M/41M\n+[INFO] ------------------------------------------------------------------------\n+\n+\n+$ mvn package -Dtest=false\n+\n+[INFO] Scanning for projects...\n+\n+...\n+\n+[INFO] [assembly:assembly {execution: bin}]\n+[INFO] Building zip: /tmp/openjpatestbuild/trunk/openjpa-project/target/filtered\n+-site/resources/downloads/openjpa-0.9.0.zip\n+\n+... \n+\n+\n+$ ls -lh openjpa-project/target/filtered-site/resources/downloads/\n+\n+total 9.2M\n+-rw-r--r--    1 mprudhom wheel       4.0M Jul 26 11:46 openjpa-0.9.0-sources.zip\n+-rw-r--r--    1 mprudhom wheel       5.2M Jul 26 11:46 openjpa-0.9.0.zip\n+\n+ "},{"sha":"837b1bced5bd2fdfe457a26a7abd05e1ec201b6b","filename":"1.2.x/openjpa-project/CHANGES.txt","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/CHANGES.txt?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,163 @@\n+                           Release Notes for OpenJPA 1.2.1\n+\n+        * Overview\n+        * License\n+        * Prerequisites\n+        * Documentation\n+        * Getting Involved\n+        * Bugs\n+        * Improvements\n+        * New Features\n+        * Task\n+        * Test\n+\n+Overview\n+\n+   These notes describe the difference between OpenJPA release 1.2.1 and the\n+   preceding release: 1.2.0. \n+\n+   OpenJPA is a feature-rich implementation of the persistence part of Java\n+   Community Process JSR-220 (Enterprise JavaBeans 3.0), which is known as\n+   the Java Persistence API (JPA). OpenJPA can be used as a stand-alone POJO\n+   persistence layer, or it can be integrated into any EJB3.0 compliant\n+   container and many lightweight frameworks. This release of OpenJPA is 100%\n+   compliant with the JPA specification.\n+\n+   Additional information on the OpenJPA project may be found at the project\n+   web site: http://openjpa.apache.org\n+\n+License\n+\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements. See the NOTICE file distributed with this\n+   work for additional information regarding copyright ownership. The ASF\n+   licenses this file to you under the Apache License, Version 2.0 (the\n+   \"License\"); you may not use this file except in compliance with the\n+   License. You may obtain a copy of the License at\n+\n+   http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+   License for the specific language governing permissions and limitations\n+   under the License.\n+\n+   The license may also be found in LICENSE.txt which is included in each\n+   release of OpenJPA.\n+\n+Prerequisites\n+\n+   In normal usage, OpenJPA requires Java 5 or higher and a relational \n+   database of some sort.\n+\n+Documentation\n+\n+   If you have questions about OpenJPA, a good source of information is the\n+   online product manual. You can find the manual for the current release as\n+   well as older releases of OpenJPA at\n+   http://openjpa.apache.org/documentation.html\n+\n+   If you can't find what you're looking for in the manual or would like more\n+   clarification you please post to the OpenJPA development mailing list.\n+   Information on all of the OpenJPA mailing lists may be found here:\n+   http://openjpa.apache.org/mailing-lists.html\n+\n+Getting Involved\n+\n+   The Apache OpenJPA project is being built by the open source community for\n+   the open source community - we welcome your input and contributions!\n+\n+   What we are looking for\n+        * Source code and fixes contributions\n+        * Documentation assistance\n+        * Product and feature suggestions\n+        * Detailed and constructive feedback\n+        * Articles and whitepapers\n+\n+   How do I Contribute?\n+        * To discuss Apache OpenJPA topics check out the mailing lists.\n+        * Informal discussion also occurs on the #openjpa IRC channel on\n+          freenode.net.\n+        * Bugs and other issues can be posted on the project JIRA.\n+\n+                          OpenJPA 1.2.1 Release Notes\n+Sub-task\n+\n+    * [OPENJPA-681] - Subquery generates SQL with syntax error\n+    * [OPENJPA-708] - sub-sub-query generates SQL with syntax error\n+    * [OPENJPA-744] - Extra SQL on LAZY/EAGER ManyToOne relation\n+    * [OPENJPA-765] - Check for insertable or updateable before checking value \n+                      for null\n+\n+Bug\n+\n+    * [OPENJPA-646] - JDK problems with defineClass and enum class types\n+    * [OPENJPA-650] - Document openjpa.RuntimeUnenhancedClasses=unsupported/\n+                      warn configuration property\n+    * [OPENJPA-676] - Connection used for NativeSequences is not closed\n+    * [OPENJPA-679] - java.lang.ArrayIndexOutOfBoundsException may occur when\n+                      a relation field is annotated as a primary key and a foreign key\n+    * [OPENJPA-685] - Problem enhancing test cases with Maven 2.0.9\n+    * [OPENJPA-702] - MappingTool fails requires appropriate DESCSTAT parm \n+                      value on DB2 for z/OS\n+    * [OPENJPA-710] - Unordered collection field adds ORDER BY clause\n+    * [OPENJPA-711] - PDF manual lacks images\n+    * [OPENJPA-713] - openjpa-1.2.0.jar file is 11 MB\n+    * [OPENJPA-715] - OpenJpa does not generate IDs properly. \"duplicate key \n+                      value in a unique or primary key constraint\" while merging object tree.\n+    * [OPENJPA-719] - GeneralException in PCEnhancer during class transform in \n+                      Turkish locale AppServer setting\n+    * [OPENJPA-724] - Corrections for the manual\n+    * [OPENJPA-727] - Image mapping-table.png missing in HTML manual\n+    * [OPENJPA-731] - Bug on FetchType.EAGER when QuerySQLCache is turned on\n+    * [OPENJPA-733] - Entity contains pseudo-attached embeddable after detach\n+    * [OPENJPA-745] - Sybase by default silently truncates a string which is \n+                      longer than the column length without raising an exception\n+    * [OPENJPA-755] - OpenJPA thows EntityExistsException trying persist a\n+                      preexisting, detached entity\n+    * [OPENJPA-762] - Batch execution fails for Oracle when batch limit set to\n+                      -1 (unlimited batch size)\n+    * [OPENJPA-777] - Exception is thrown during retrieval of an entity which \n+                      contains a persistent collection of embeddable\n+    * [OPENJPA-811] - With Oracle, OpenJPA allows setting non-nullable field to null \n+    * [OPENJPA-835] - Loading nested toMany EAGER relation resuled in \n+                      PersistenceException\n+    * [OPENJPA-838] - fix parameter setting problem when QuerySQLCache is on\n+    * [OPENJPA-843] - Unnecessary version update on inverse-side of a 1-m \n+                      relationship\n+    * [OPENJPA-853] - Informix cursor not open problem if synchronizeMapping \n+                      set true\n+    * [OPENJPA-864] - Subquery problems with SYNTAX_DATABASE (Oracle)\n+    * [OPENJPA-872] - Compound custom id in bidirectional many-to-one\n+    * [OPENJPA-912] - Potential NPE in setInverseRelation\n+    * [OPENJPA-917] - stored procedures throw InvalidStateException when using \n+                      getSingleResult() or getResultList()\n+    * [OPENJPA-919] - JUnit for Bi-directional OneToOne with null relationships\n+    * [OPENJPA-925] - Bidirectional OneToOne relation incorrectly set in \n+                      loadEagerJoin\n+\n+Improvement\n+\n+    * [OPENJPA-686] - Openjpa manual needs to be updated for database \n+                      restriction on BigDecimal field on Sybase\n+    * [OPENJPA-726] - Provide MD5Sums for latest downloads\n+    * [OPENJPA-742] - Add line number and column number to QueryMetaData\n+    * [OPENJPA-752] - ProxySetupStateManager.setProxyData routing through \n+                      PersistanceCapable caused \"PersistenceException: null\"\n+    * [OPENJPA-772] - Proper maven pluginManagement and use ianal-maven-plugin\n+                      for enforcing legal files\n+    * [OPENJPA-779] - patch for eclipse .project and .classpath files...\n+    * [OPENJPA-817] - Order of inserts lost when using ConstraintUpdateManager\n+    * [OPENJPA-876] - Better test profiles for proprietary databases (DB2, \n+                      Oracle) and continuous build\n+    * [OPENJPA-881] - Enable connection pooling for testcases.\n+    * [OPENJPA-901] - Use hosted JAI artifacts as the default for the docbook build\n+\n+Changes for previous releases\n+\n+OpenJPA 1.2.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/CHANGES.txt?view=markup\n+\n+OpenJPA 1.1.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/CHANGES.txt?view=markup\n+\n+OpenJPA 1.0.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/CHANGES.txt?view=markup"},{"sha":"f9c8219f3ae06fbe9e2f325a92e66b42cfd89adb","filename":"1.2.x/openjpa-project/LICENSE.txt","status":"added","additions":380,"deletions":0,"changes":380,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/LICENSE.txt","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/LICENSE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/LICENSE.txt?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,380 @@\n+\r\n+                                 Apache License\r\n+                           Version 2.0, January 2004\r\n+                        http://www.apache.org/licenses/\r\n+\r\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n+\r\n+   1. Definitions.\r\n+\r\n+      \"License\" shall mean the terms and conditions for use, reproduction,\r\n+      and distribution as defined by Sections 1 through 9 of this document.\r\n+\r\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n+      the copyright owner that is granting the License.\r\n+\r\n+      \"Legal Entity\" shall mean the union of the acting entity and all\r\n+      other entities that control, are controlled by, or are under common\r\n+      control with that entity. For the purposes of this definition,\r\n+      \"control\" means (i) the power, direct or indirect, to cause the\r\n+      direction or management of such entity, whether by contract or\r\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n+      outstanding shares, or (iii) beneficial ownership of such entity.\r\n+\r\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n+      exercising permissions granted by this License.\r\n+\r\n+      \"Source\" form shall mean the preferred form for making modifications,\r\n+      including but not limited to software source code, documentation\r\n+      source, and configuration files.\r\n+\r\n+      \"Object\" form shall mean any form resulting from mechanical\r\n+      transformation or translation of a Source form, including but\r\n+      not limited to compiled object code, generated documentation,\r\n+      and conversions to other media types.\r\n+\r\n+      \"Work\" shall mean the work of authorship, whether in Source or\r\n+      Object form, made available under the License, as indicated by a\r\n+      copyright notice that is included in or attached to the work\r\n+      (an example is provided in the Appendix below).\r\n+\r\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n+      form, that is based on (or derived from) the Work and for which the\r\n+      editorial revisions, annotations, elaborations, or other modifications\r\n+      represent, as a whole, an original work of authorship. For the purposes\r\n+      of this License, Derivative Works shall not include works that remain\r\n+      separable from, or merely link (or bind by name) to the interfaces of,\r\n+      the Work and Derivative Works thereof.\r\n+\r\n+      \"Contribution\" shall mean any work of authorship, including\r\n+      the original version of the Work and any modifications or additions\r\n+      to that Work or Derivative Works thereof, that is intentionally\r\n+      submitted to Licensor for inclusion in the Work by the copyright owner\r\n+      or by an individual or Legal Entity authorized to submit on behalf of\r\n+      the copyright owner. For the purposes of this definition, \"submitted\"\r\n+      means any form of electronic, verbal, or written communication sent\r\n+      to the Licensor or its representatives, including but not limited to\r\n+      communication on electronic mailing lists, source code control systems,\r\n+      and issue tracking systems that are managed by, or on behalf of, the\r\n+      Licensor for the purpose of discussing and improving the Work, but\r\n+      excluding communication that is conspicuously marked or otherwise\r\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n+\r\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n+      on behalf of whom a Contribution has been received by Licensor and\r\n+      subsequently incorporated within the Work.\r\n+\r\n+   2. Grant of Copyright License. Subject to the terms and conditions of\r\n+      this License, each Contributor hereby grants to You a perpetual,\r\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n+      copyright license to reproduce, prepare Derivative Works of,\r\n+      publicly display, publicly perform, sublicense, and distribute the\r\n+      Work and such Derivative Works in Source or Object form.\r\n+\r\n+   3. Grant of Patent License. Subject to the terms and conditions of\r\n+      this License, each Contributor hereby grants to You a perpetual,\r\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n+      (except as stated in this section) patent license to make, have made,\r\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n+      where such license applies only to those patent claims licensable\r\n+      by such Contributor that are necessarily infringed by their\r\n+      Contribution(s) alone or by combination of their Contribution(s)\r\n+      with the Work to which such Contribution(s) was submitted. If You\r\n+      institute patent litigation against any entity (including a\r\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n+      or a Contribution incorporated within the Work constitutes direct\r\n+      or contributory patent infringement, then any patent licenses\r\n+      granted to You under this License for that Work shall terminate\r\n+      as of the date such litigation is filed.\r\n+\r\n+   4. Redistribution. You may reproduce and distribute copies of the\r\n+      Work or Derivative Works thereof in any medium, with or without\r\n+      modifications, and in Source or Object form, provided that You\r\n+      meet the following conditions:\r\n+\r\n+      (a) You must give any other recipients of the Work or\r\n+          Derivative Works a copy of this License; and\r\n+\r\n+      (b) You must cause any modified files to carry prominent notices\r\n+          stating that You changed the files; and\r\n+\r\n+      (c) You must retain, in the Source form of any Derivative Works\r\n+          that You distribute, all copyright, patent, trademark, and\r\n+          attribution notices from the Source form of the Work,\r\n+          excluding those notices that do not pertain to any part of\r\n+          the Derivative Works; and\r\n+\r\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n+          distribution, then any Derivative Works that You distribute must\r\n+          include a readable copy of the attribution notices contained\r\n+          within such NOTICE file, excluding those notices that do not\r\n+          pertain to any part of the Derivative Works, in at least one\r\n+          of the following places: within a NOTICE text file distributed\r\n+          as part of the Derivative Works; within the Source form or\r\n+          documentation, if provided along with the Derivative Works; or,\r\n+          within a display generated by the Derivative Works, if and\r\n+          wherever such third-party notices normally appear. The contents\r\n+          of the NOTICE file are for informational purposes only and\r\n+          do not modify the License. You may add Your own attribution\r\n+          notices within Derivative Works that You distribute, alongside\r\n+          or as an addendum to the NOTICE text from the Work, provided\r\n+          that such additional attribution notices cannot be construed\r\n+          as modifying the License.\r\n+\r\n+      You may add Your own copyright statement to Your modifications and\r\n+      may provide additional or different license terms and conditions\r\n+      for use, reproduction, or distribution of Your modifications, or\r\n+      for any such Derivative Works as a whole, provided Your use,\r\n+      reproduction, and distribution of the Work otherwise complies with\r\n+      the conditions stated in this License.\r\n+\r\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n+      any Contribution intentionally submitted for inclusion in the Work\r\n+      by You to the Licensor shall be under the terms and conditions of\r\n+      this License, without any additional terms or conditions.\r\n+      Notwithstanding the above, nothing herein shall supersede or modify\r\n+      the terms of any separate license agreement you may have executed\r\n+      with Licensor regarding such Contributions.\r\n+\r\n+   6. Trademarks. This License does not grant permission to use the trade\r\n+      names, trademarks, service marks, or product names of the Licensor,\r\n+      except as required for reasonable and customary use in describing the\r\n+      origin of the Work and reproducing the content of the NOTICE file.\r\n+\r\n+   7. Disclaimer of Warranty. Unless required by applicable law or\r\n+      agreed to in writing, Licensor provides the Work (and each\r\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n+      implied, including, without limitation, any warranties or conditions\r\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n+      appropriateness of using or redistributing the Work and assume any\r\n+      risks associated with Your exercise of permissions under this License.\r\n+\r\n+   8. Limitation of Liability. In no event and under no legal theory,\r\n+      whether in tort (including negligence), contract, or otherwise,\r\n+      unless required by applicable law (such as deliberate and grossly\r\n+      negligent acts) or agreed to in writing, shall any Contributor be\r\n+      liable to You for damages, including any direct, indirect, special,\r\n+      incidental, or consequential damages of any character arising as a\r\n+      result of this License or out of the use or inability to use the\r\n+      Work (including but not limited to damages for loss of goodwill,\r\n+      work stoppage, computer failure or malfunction, or any and all\r\n+      other commercial damages or losses), even if such Contributor\r\n+      has been advised of the possibility of such damages.\r\n+\r\n+   9. Accepting Warranty or Additional Liability. While redistributing\r\n+      the Work or Derivative Works thereof, You may choose to offer,\r\n+      and charge a fee for, acceptance of support, warranty, indemnity,\r\n+      or other liability obligations and/or rights consistent with this\r\n+      License. However, in accepting such obligations, You may act only\r\n+      on Your own behalf and on Your sole responsibility, not on behalf\r\n+      of any other Contributor, and only if You agree to indemnify,\r\n+      defend, and hold each Contributor harmless for any liability\r\n+      incurred by, or claims asserted against, such Contributor by reason\r\n+      of your accepting any such warranty or additional liability.\r\n+\r\n+   END OF TERMS AND CONDITIONS\r\n+\r\n+   APPENDIX: How to apply the Apache License to your work.\r\n+\r\n+      To apply the Apache License to your work, attach the following\r\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n+      replaced with your own identifying information. (Don't include\r\n+      the brackets!)  The text should be enclosed in the appropriate\r\n+      comment syntax for the file format. We also recommend that a\r\n+      file or class name and description of purpose be included on the\r\n+      same \"printed page\" as the copyright notice for easier\r\n+      identification within third-party archives.\r\n+\r\n+   Copyright [yyyy] [name of copyright owner]\r\n+\r\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+   you may not use this file except in compliance with the License.\r\n+   You may obtain a copy of the License at\r\n+\r\n+       http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+   Unless required by applicable law or agreed to in writing, software\r\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+   See the License for the specific language governing permissions and\r\n+   limitations under the License.\r\n+\r\n+\r\n+======================================\r\n+  LICENSES FOR INCLUDED DEPENDENCIES\r\n+======================================\r\n+\r\n+All the source code for the OpenJPA project is released under the\r\n+license above. Additionally, the OpenJPA binary distribution\r\n+includes a number of third-party files that are required in\r\n+order to the software to function. Unless noted below, these jars\r\n+and resource files are also released under the ASF license above.\r\n+\r\n+The exceptions are as follows:\r\n+\r\n+===========================\r\n+  orm-xsd.rsrc - included in the openjpa jar, taken from:\r\n+    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd)\r\n+  persistence-xsd.rsrc - included in the openjpa jar, taken from:\r\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd)\r\n+  websphere-uow-api.jar - this jar file contains WebSphere proprietary\r\n+    API code which is licensed for use when compiling OpenJPA. The\r\n+    jar is not distributed with OpenJPA and is only included with the\r\n+    source archive in order to resolve compilation dependencies. \r\n+===========================\r\n+\r\n+COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0\r\n+\r\n+1. Definitions.\r\n+\r\n+1.1. Contributor means each individual or entity that creates or contributes to the creation of Modifications.\r\n+\r\n+1.2. Contributor Version means the combination of the Original Software, prior Modifications used by a Contributor (if any), and the Modifications made by that particular Contributor.\r\n+\r\n+1.3. Covered Software means (a) the Original Software, or (b) Modifications, or (c) the combination of files containing Original Software with files containing Modifications, in each case including portions thereof.\r\n+\r\n+1.4. Executable means the Covered Software in any form other than Source Code.\r\n+\r\n+1.5. Initial Developer means the individual or entity that first makes Original Software available under this License.\r\n+\r\n+1.6. Larger Work means a work which combines Covered Software or portions thereof with code not governed by the terms of this License.\r\n+\r\n+1.7. License means this document.\r\n+\r\n+1.8. Licensable means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently acquired, any and all of the rights conveyed herein.\r\n+\r\n+1.9. Modifications means the Source Code and Executable form of any of the following:\r\n+\r\n+A. Any file that results from an addition to, deletion from or modification of the contents of a file containing Original Software or previous Modifications;\r\n+\r\n+B. Any new file that contains any part of the Original Software or previous Modification; or\r\n+\r\n+C. Any new file that is contributed or otherwise made available under the terms of this License.\r\n+\r\n+1.10. Original Software means the Source Code and Executable form of computer software code that is originally released under this License.\r\n+\r\n+1.11. Patent Claims means any patent claim(s), now owned or hereafter acquired, including without limitation, method, process, and apparatus claims, in any patent Licensable by grantor.\r\n+\r\n+1.12. Source Code means (a) the common form of computer software code in which modifications are made and (b) associated documentation included in or with such code.\r\n+\r\n+1.13. You (or Your) means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, You includes any entity which controls, is controlled by, or is under common control with You. For purposes of this definition, control means (a)�the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b)�ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\r\n+\r\n+2. License Grants.\r\n+\r\n+2.1. The Initial Developer Grant.\r\n+Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, the Initial Developer hereby grants You a world-wide, royalty-free, non-exclusive license:\r\n+(a) under intellectual property rights (other than patent or trademark) Licensable by Initial Developer, to use, reproduce, modify, display, perform, sublicense and distribute the Original Software (or portions thereof), with or without Modifications, and/or as part of a Larger Work; and\r\n+(b) under Patent Claims infringed by the making, using or selling of Original Software, to make, have made, use, practice, sell, and offer for sale, and/or otherwise dispose of the Original Software (or portions thereof).\r\n+(c) The licenses granted in Sections�2.1(a) and (b) are effective on the date Initial Developer first distributes or otherwise makes the Original Software available to a third party under the terms of this License.\r\n+(d) Notwithstanding Section�2.1(b) above, no patent license is granted: (1)�for code that You delete from the Original Software, or (2)�for infringements caused by: (i)�the modification of the Original Software, or (ii)�the combination of the Original Software with other software or devices.\r\n+\r\n+2.2. Contributor Grant.\r\n+Conditioned upon Your compliance with Section 3.1 below and subject to third party intellectual property claims, each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\r\n+(a) under intellectual property rights (other than patent or trademark) Licensable by Contributor to use, reproduce, modify, display, perform, sublicense and distribute the Modifications created by such Contributor (or portions thereof), either on an unmodified basis, with other Modifications, as Covered Software and/or as part of a Larger Work; and\r\n+(b) under Patent Claims infringed by the making, using, or selling of Modifications made by that Contributor either alone and/or in combination with its Contributor Version (or portions of such combination), to make, use, sell, offer for sale, have made, and/or otherwise dispose of: (1)�Modifications made by that Contributor (or portions thereof); and (2)�the combination of Modifications made by that Contributor with its Contributor Version (or portions of such combination).\r\n+(c) The licenses granted in Sections�2.2(a) and 2.2(b) are effective on the date Contributor first distributes or otherwise makes the Modifications available to a third party.\r\n+(d) Notwithstanding Section�2.2(b) above, no patent license is granted: (1)�for any code that Contributor has deleted from the Contributor Version; (2)�for infringements caused by: (i)�third party modifications of Contributor Version, or (ii)�the combination of Modifications made by that Contributor with other software (except as part of the Contributor Version) or other devices; or (3)�under Patent Claims infringed by Covered Software in the absence of Modifications made by that Contributor.\r\n+\r\n+3. Distribution Obligations.\r\n+\r\n+3.1. Availability of Source Code.\r\n+\r\n+Any Covered Software that You distribute or otherwise make available in Executable form must also be made available in Source Code form and that Source Code form must be distributed only under the terms of this License. You must include a copy of this License with every copy of the Source Code form of the Covered Software You distribute or otherwise make available. You must inform recipients of any such Covered Software in Executable form as to how they can obtain such Covered Software in Source Code form in a reasonable manner on or through a medium customarily used for software exchange.\r\n+\r\n+3.2. Modifications.\r\n+\r\n+The Modifications that You create or to which You contribute are governed by the terms of this License. You represent that You believe Your Modifications are Your original creation(s) and/or You have sufficient rights to grant the rights conveyed by this License.\r\n+\r\n+3.3. Required Notices.\r\n+You must include a notice in each of Your Modifications that identifies You as the Contributor of the Modification. You may not remove or alter any copyright, patent or trademark notices contained within the Covered Software, or any notices of licensing or any descriptive text giving attribution to any Contributor or the Initial Developer.\r\n+\r\n+3.4. Application of Additional Terms.\r\n+You may not offer or impose any terms on any Covered Software in Source Code form that alters or restricts the applicable version of this License or the recipients rights hereunder. You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, you may do so only on Your own behalf, and not on behalf of the Initial Developer or any Contributor. You must make it absolutely clear that any such warranty, support, indemnity or liability obligation is offered by You alone, and You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of warranty, support, indemnity or liability terms You offer.\r\n+\r\n+3.5. Distribution of Executable Versions.\r\n+You may distribute the Executable form of the Covered Software under the terms of this License or under the terms of a license of Your choice, which may contain terms different from this License, provided that You are in compliance with the terms of this License and that the license for the Executable form does not attempt to limit or alter the recipients rights in the Source Code form from the rights set forth in this License. If You distribute the Covered Software in Executable form under a different license, You must make it absolutely clear that any terms which differ from this License are offered by You alone, not by the Initial Developer or Contributor. You hereby agree to indemnify the Initial Developer and every Contributor for any liability incurred by the Initial Developer or such Contributor as a result of any such terms You offer.\r\n+\r\n+3.6. Larger Works.\r\n+You may create a Larger Work by combining Covered Software with other code not governed by the terms of this License and distribute the Larger Work as a single product. In such a case, You must make sure the requirements of this License are fulfilled for the Covered Software.\r\n+\r\n+4. Versions of the License.\r\n+\r\n+4.1. New Versions.\r\n+Sun Microsystems, Inc. is the initial license steward and may publish revised and/or new versions of this License from time to time. Each version will be given a distinguishing version number. Except as provided in Section 4.3, no one other than the license steward has the right to modify this License.\r\n+\r\n+4.2. Effect of New Versions.\r\n+\r\n+You may always continue to use, distribute or otherwise make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. If the Initial Developer includes a notice in the Original Software prohibiting it from being distributed or otherwise made available under any subsequent version of the License, You must distribute and make the Covered Software available under the terms of the version of the License under which You originally received the Covered Software. Otherwise, You may also choose to use, distribute or otherwise make the Covered Software available under the terms of any subsequent version of the License published by the license steward.\r\n+4.3. Modified Versions.\r\n+\r\n+When You are an Initial Developer and You want to create a new license for Your Original Software, You may create and use a modified version of this License if You: (a)�rename the license and remove any references to the name of the license steward (except to note that the license differs from this License); and (b)�otherwise make it clear that the license contains terms which differ from this License.\r\n+\r\n+5. DISCLAIMER OF WARRANTY.\r\n+\r\n+COVERED SOFTWARE IS PROVIDED UNDER THIS LICENSE ON AN AS IS BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE COVERED SOFTWARE IS FREE OF DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED SOFTWARE IS WITH YOU. SHOULD ANY COVERED SOFTWARE PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY COVERED SOFTWARE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.\r\n+\r\n+6. TERMINATION.\r\n+\r\n+6.1. This License and the rights granted hereunder will terminate automatically if You fail to comply with terms herein and fail to cure such breach within 30 days of becoming aware of the breach. Provisions which, by their nature, must remain in effect beyond the termination of this License shall survive.\r\n+\r\n+6.2. If You assert a patent infringement claim (excluding declaratory judgment actions) against Initial Developer or a Contributor (the Initial Developer or Contributor against whom You assert such claim is referred to as Participant) alleging that the Participant Software (meaning the Contributor Version where the Participant is a Contributor or the Original Software where the Participant is the Initial Developer) directly or indirectly infringes any patent, then any and all rights granted directly or indirectly to You by such Participant, the Initial Developer (if the Initial Developer is not the Participant) and all Contributors under Sections�2.1 and/or 2.2 of this License shall, upon 60 days notice from Participant terminate prospectively and automatically at the expiration of such 60 day notice period, unless if within such 60 day period You withdraw Your claim with respect to the Participant Software against such Participant either unilaterally or pursuant to a written agreement with Participant.\r\n+\r\n+6.3. In the event of termination under Sections�6.1 or 6.2 above, all end user licenses that have been validly granted by You or any distributor hereunder prior to termination (excluding licenses granted to You by any distributor) shall survive termination.\r\n+\r\n+7. LIMITATION OF LIABILITY.\r\n+\r\n+UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED SOFTWARE, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOST PROFITS, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY RESULTING FROM SUCH PARTYS NEGLIGENCE TO THE EXTENT APPLICABLE LAW PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\r\n+\r\n+8. U.S. GOVERNMENT END USERS.\r\n+\r\n+The Covered Software is a commercial item, as that term is defined in 48�C.F.R.�2.101 (Oct. 1995), consisting of commercial computer software (as that term is defined at 48 C.F.R. �252.227-7014(a)(1)) and commercial computer software documentation as such terms are used in 48�C.F.R.�12.212 (Sept. 1995). Consistent with 48 C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995), all U.S. Government End Users acquire Covered Software with only those rights set forth herein. This U.S. Government Rights clause is in lieu of, and supersedes, any other FAR, DFAR, or other clause or provision that addresses Government rights in computer software under this License.\r\n+\r\n+9. MISCELLANEOUS.\r\n+\r\n+This License represents the complete agreement concerning subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. This License shall be governed by the law of the jurisdiction specified in a notice contained within the Original Software (except to the extent applicable law, if any, provides otherwise), excluding such jurisdictions conflict-of-law provisions. Any litigation relating to this License shall be subject to the jurisdiction of the courts located in the jurisdiction and venue specified in a notice contained within the Original Software, with the losing party responsible for costs, including, without limitation, court costs and reasonable attorneys fees and expenses. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not apply to this License. You agree that You alone are responsible for compliance with the United States export administration regulations (and the export control laws and regulation of any other countries) when You use, distribute or otherwise make available any Covered Software.\r\n+\r\n+10. RESPONSIBILITY FOR CLAIMS.\r\n+\r\n+As between Initial Developer and the Contributors, each party is responsible for claims and damages arising, directly or indirectly, out of its utilization of rights under this License and You agree to work with Initial Developer and Contributors to distribute such responsibility on an equitable basis. Nothing herein is intended or shall be deemed to constitute any admission of liability.\r\n+\r\n+NOTICE PURSUANT TO SECTION 9 OF THE COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL)\r\n+The GlassFish code released under the CDDL shall be governed by the laws of the State of California (excluding conflict-of-law provisions). Any litigation relating to this License shall be subject to the jurisdiction of the Federal Courts of the Northern District of California and the state courts of the State of California, with venue lying in Santa Clara County, California. \r\n+\r\n+\r\n+===================\r\n+  serp-1.11.0.jar\r\n+===================\r\n+\r\n+Copyright (c) 2002-2006, A. Abram White\r\n+All rights reserved.\r\n+\r\n+Redistribution and use in source and binary forms, with or without \r\n+modification, are permitted provided that the following conditions are met:\r\n+\r\n+* Redistributions of source code must retain the above copyright notice, this \r\n+  list of conditions and the following disclaimer.\r\n+* Redistributions in binary form must reproduce the above copyright notice, \r\n+  this list of conditions and the following disclaimer in the documentation \r\n+  and/or other materials provided with the distribution.\r\n+* Neither the name of 'serp' nor the names of its contributors may\r\n+  be used to endorse or promote products derived from this software without \r\n+  specific prior written permission.\r\n+\r\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \r\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \r\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \r\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \r\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON \r\n+ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \r\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS \r\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r"},{"sha":"1b8e35d0cf0070d767e2e68851b0a18d229bf0c3","filename":"1.2.x/openjpa-project/NOTICE.txt","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/NOTICE.txt","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/NOTICE.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/NOTICE.txt?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,22 @@\n+   =========================================================================\r\n+   ==  NOTICE file corresponding to the section 4 d of                    ==\r\n+   ==  the Apache License, Version 2.0,                                   ==\r\n+   ==  in this case for the Apache OpenJPA distribution.                  ==\r\n+   =========================================================================\r\n+\r\n+   This product includes software developed by\r\n+   The Apache Software Foundation (http://www.apache.org/).\r\n+\r\n+COPYRIGHT NOTICES\r\n+\r\n+* OpenJPA includes software developed by the SERP project\r\n+    Copyright (c) 2002-2006, A. Abram White. All rights reserved.\r\n+\r\n+* OpenJPA is bundled with the binaries from the JPA specification, by\r\n+    Sun Microsystems and licensed under the CDDL 1.0. The source code is\r\n+    available at: https://glassfish.dev.java.net/source/browse/glassfish/\r\n+\r\n+* OpenJPA includes software written by Miroslav Nachev.\r\n+\r\n+* OpenJPA uses test code written by Charles Tillman.\r\n+\r"},{"sha":"1a61914e7cac6d03cdfcf6792c4fe9d866fd639b","filename":"1.2.x/openjpa-project/README.txt","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/README.txt","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/README.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/README.txt?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,7 @@\n+Apache OpenJPA Project\r\n+======================\r\n+\r\n+Thank you for downloading this release of OpenJPA. For\r\n+documentation and project information, please see:\r\n+\r\n+For useful information, navigate to http://openjpa.apache.org\r"},{"sha":"3cd421f8deabca48a20e033656aeb4144e04a23a","filename":"1.2.x/openjpa-project/RELEASE-NOTES.html","status":"added","additions":212,"deletions":0,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/RELEASE-NOTES.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,212 @@\n+<html>\n+<title>Release Notes for OpenJPA 1.2.1</title>\n+<body>\n+<h1>Release Notes for OpenJPA</h1>\n+\n+<ul>\n+<li><a href=\"#Overview\">Overview</a></li>\n+<li><a href=\"#License\">License</a></li>\n+<li><a href=\"#Prerequisites\">Prerequisites</a></li>\n+<li><a href=\"#Documentation\">Documentation</a></li>\n+<li><a href=\"#GetInvolved\">Getting Involved</a></li>\n+<li><a href=\"#Sub-task\">Sub-task</a></li>\n+<li><a href=\"#Bug\">Bug</a></li>\n+<li><a href=\"#Improvement\">Improvement</a></li>\n+<li><a href=\"#New Feature\">New Feature</a></li>\n+<li><a href=\"#Previous\">RELEASE-NOTES for previous releases</a></li>\n+</ul>\n+\n+<h2><a name=\"Overview\"></a>Overview</h2>\n+\n+<p> These notes describe the difference between OpenJPA release 1.2.1\n+and the preceding release: 1.2.0.\n+<P>\n+OpenJPA is a feature-rich implementation of the persistence part of \n+Java Community Process JSR-220 (Enterprise JavaBeans 3.0), which is\n+known as the Java Persistence API (JPA).\n+OpenJPA can be used as a stand-alone POJO persistence layer, or it can be\n+integrated into any EJB3.0 compliant container and many lightweight frameworks.\n+This release of OpenJPA is 100% compliant with the JPA specification.\n+</p>\n+\n+<p>\n+Additional information on the OpenJPA project may be found at the project web \n+site: <a href=\"http://openjpa.apache.org\">\n+http://openjpa.apache.org</a>\n+\n+<h2><a name=\"License\"></a>License</h2>\n+<P>Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+<BR><P><a href=\"http://www.apache.org/licenses/LICENSE-2.0\">\n+http://www.apache.org/licenses/LICENSE-2.0</a>\n+\n+<BR><P>Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+\n+<BR><P>The license may also be found in LICENSE.txt which is included \n+in each release of OpenJPA. \n+\n+<h2><a name=\"Prerequisites\"></a>Prerequisites</h2>\n+<P>\n+In normal usage, OpenJPA requires Java 5 or higher and a relational \n+database of some sort.\n+\n+<h2><a name=\"Documentation\"></a>Documentation</h2>\n+<p>If you have questions about OpenJPA, a good source of information is the \n+online product manual. You can find the manual for the current release as well\n+as older releases of OpenJPA at \n+<a href=\"http://openjpa.apache.org/documentation.html\">\n+http://openjpa.apache.org/documentation.html</a>\n+<p>If you can't find what you're looking for in the manual or would like more\n+clarification you please post to the OpenJPA development mailing list.\n+Information on all of the OpenJPA mailing lists may be found here:\n+<a href=\"http://openjpa.apache.org/mailing-lists.html\">\n+http://openjpa.apache.org/mailing-lists.html</a>\n+\n+<p>\n+<h2><a name=\"GetInvolved\"></a>Getting Involved</h2>\n+<p>\n+The Apache OpenJPA project is being built by the open source community for the \n+open source community - we welcome your input and contributions!\n+<P>\n+What we are looking for\n+<ul>\n+    <li> Source code and fixes contributions </li>\n+    <li> Documentation assistance </li>\n+    <li> Product and feature suggestions </li>\n+    <li> Detailed and constructive feedback </li>\n+    <li> Articles and whitepapers </li>\n+</ul>\n+<p>\n+How do I Contribute?\n+<ul>\n+    <li> To discuss Apache OpenJPA topics check out the mailing lists. </li>\n+    <li> Informal discussion also occurs on the #openjpa IRC channel on \n+         freenode.net. </li>\n+    <li> Bugs and other issues can be posted on the project JIRA. </li>\n+</ul>\n+\n+\n+        Release Notes - OpenJPA - Version 1.2.1.\n+    \n+<h2><a name='Sub-task'>        Sub-task\n+</h2>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-681'>OPENJPA-681</a>] -         Subquery generates SQL with syntax error\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-708'>OPENJPA-708</a>] -         sub-sub-query generates SQL with syntax error\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-744'>OPENJPA-744</a>] -         Extra SQL on LAZY/EAGER  ManyToOne relation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-765'>OPENJPA-765</a>] -         Check for insertable or updateable before checking value for null\n+</li>\n+</ul>    \n+\n+<h2><a name='Bug'>        Bug\n+</h2>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-646'>OPENJPA-646</a>] -         JDK problems with defineClass and enum class types\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-650'>OPENJPA-650</a>] -         Document openjpa.RuntimeUnenhancedClasses=unsupported/warn configuration property\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-676'>OPENJPA-676</a>] -         Connection used for NativeSequences is not closed\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-679'>OPENJPA-679</a>] -         java.lang.ArrayIndexOutOfBoundsException may occur when a relation field is annotated as a primary key and a foreign key\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-685'>OPENJPA-685</a>] -         Problem enhancing test cases with Maven 2.0.9 \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-702'>OPENJPA-702</a>] -         MappingTool fails requires appropriate DESCSTAT parm value on DB2 for z/OS\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-710'>OPENJPA-710</a>] -         Unordered collection field adds ORDER BY clause\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-711'>OPENJPA-711</a>] -         PDF manual lacks images\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-713'>OPENJPA-713</a>] -         openjpa-1.2.0.jar file is 11 MB\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-715'>OPENJPA-715</a>] -         OpenJpa does not generate IDs properly. &quot;duplicate key value in a unique or primary key constraint&quot; while merging object tree.\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-719'>OPENJPA-719</a>] -         GeneralException in PCEnhancer during class transform in Turkish locale AppServer setting\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-724'>OPENJPA-724</a>] -         Corrections for the manual\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-727'>OPENJPA-727</a>] -         Image mapping-table.png missing in HTML manual\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-731'>OPENJPA-731</a>] -         Bug on FetchType.EAGER when QuerySQLCache is turned on\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-733'>OPENJPA-733</a>] -         Entity contains pseudo-attached embeddable after detach\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-745'>OPENJPA-745</a>] -         Sybase by default silently truncates a string which is longer than the column length without raising an exception \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-755'>OPENJPA-755</a>] -         OpenJPA thows EntityExistsException trying persist a preexisting, detached entity\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-762'>OPENJPA-762</a>] -         Batch execution fails for Oracle when batch limit set to -1 (unlimited batch size)\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-777'>OPENJPA-777</a>] -         Exception is thrown during retrieval of an entity which contains a persistent collection of embeddable\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-835'>OPENJPA-835</a>] -         Loading nested toMany EAGER relation resuled in PersistenceException\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-811'>OPENJPA-811</a>] -         With Oracle, OpenJPA allows setting non-nullable field to null\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-838'>OPENJPA-838</a>] -         fix parameter setting problem when QuerySQLCache is on\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-843'>OPENJPA-843</a>] -         Unnecessary version update on inverse-side of a 1-m relationship\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-853'>OPENJPA-853</a>] -         Informix cursor not open problem if synchronizeMapping set true\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-864'>OPENJPA-864</a>] -         Subquery problems with SYNTAX_DATABASE (Oracle)\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-872'>OPENJPA-872</a>] -         Compound custom id in bidirectional many-to-one\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-912'>OPENJPA-912</a>] -         Potential NPE in setInverseRelation\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-917'>OPENJPA-917</a>] -         stored procedures throw InvalidStateException when using getSingleResult() or getResultList()\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-919'>OPENJPA-919</a>] -         JUnit for Bi-directional OneToOne with null relationships\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-925'>OPENJPA-925</a>] -         Bidirectional OneToOne relation incorrectly set in loadEagerJoin\n+</li>\n+</ul>    \n+\n+<h2><a name='Improvement'>        Improvement\n+</h2>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-686'>OPENJPA-686</a>] -         Openjpa manual needs to be updated for database restriction on BigDecimal field on Sybase\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-726'>OPENJPA-726</a>] -         Provide MD5Sums for latest downloads\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-742'>OPENJPA-742</a>] -         Add line number and column number to QueryMetaData\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-752'>OPENJPA-752</a>] -         ProxySetupStateManager.setProxyData routing through PersistanceCapable caused &quot;PersistenceException: null&quot;\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-772'>OPENJPA-772</a>] -         Proper maven pluginManagement and use ianal-maven-plugin for enforcing legal files\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-779'>OPENJPA-779</a>] -         patch for eclipse .project and .classpath files...\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-817'>OPENJPA-817</a>] -         Order of inserts lost when using ConstraintUpdateManager\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-876'>OPENJPA-876</a>] -         Better test profiles for proprietary databases (DB2, Oracle) and continuous build\n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-881'>OPENJPA-881</a>] -         Enable connection pooling for testcases. \n+</li>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-901'>OPENJPA-901</a>] -         Use hosted JAI artifacts as the default for the docbook build\n+</li>\n+</ul> \n+\n+\n+<h2><a name=\"Previous\"></a>         Previous Releases\n+</h2>\n+Release notes for earlier releases of OpenJPA may be found in SVN at the following locations. \n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.2.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.2.0 RELEASE-NOTES.html</a></li>\n+ <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.1.0 RELEASE-NOTES.html</a></li>\n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.0.0 RELEASE-NOTES.html</a></li>\n+</body>\n+</html>"},{"sha":"2462fc63f9386fe56388f8ed906d56728d84365c","filename":"1.2.x/openjpa-project/assembly.xml","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/assembly.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/assembly.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/assembly.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,102 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+ Licensed to the Apache Software Foundation (ASF) under one\r\n+ or more contributor license agreements.  See the NOTICE file\r\n+ distributed with this work for additional information\r\n+ regarding copyright ownership.  The ASF licenses this file\r\n+ to you under the Apache License, Version 2.0 (the\r\n+ \"License\"); you may not use this file except in compliance\r\n+ with the License.  You may obtain a copy of the License at\r\n+ \r\n+ http://www.apache.org/licenses/LICENSE-2.0\r\n+ \r\n+ Unless required by applicable law or agreed to in writing,\r\n+ software distributed under the License is distributed on an\r\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ KIND, either express or implied.  See the License for the\r\n+ specific language governing permissions and limitations\r\n+ under the License.   \r\n+-->\r\n+<assembly>\r\n+    <id>binary</id>\r\n+    <formats>\r\n+        <format>zip</format>\r\n+    </formats>\r\n+    <includeBaseDirectory>true</includeBaseDirectory>\r\n+    <fileSets>\r\n+        <fileSet>\r\n+            <directory>target/aggregate</directory>\r\n+            <outputDirectory>/</outputDirectory>\r\n+        </fileSet>\r\n+        <fileSet>\r\n+            <includes>\r\n+                <include>README</include>\r\n+                <include>DISCLAIMER</include>\r\n+                <include>LICENSE</include>\r\n+                <include>STATUS</include>\r\n+                <include>NOTICE</include>\r\n+                <include>README.txt</include>\r\n+                <include>DISCLAIMER.txt</include>\r\n+                <include>LICENSE.txt</include>\r\n+                <include>STATUS.txt</include>\r\n+                <include>NOTICE.txt</include>\r\n+                <include>RELEASE-NOTES</include>\r\n+                <include>RELEASE-NOTES.html</include>\r\n+                <include>RELEASE-NOTES.txt</include>\r\n+                <include>CHANGES</include>\r\n+                <include>CHANGES.txt</include>\r\n+            </includes>\r\n+        </fileSet>\r\n+        <!--\r\n+        <fileSet>\r\n+            <directory>licenses</directory>\r\n+            <outputDirectory>/lib</outputDirectory>\r\n+            <includes>\r\n+                <include>*</include>\r\n+            </includes>\r\n+        </fileSet>\r\n+        <fileSet>\r\n+            <directory>target/examples</directory>\r\n+            <outputDirectory>/examples</outputDirectory>\r\n+        </fileSet>\r\n+        -->\r\n+        <fileSet>\r\n+            <directory>target/manual</directory>\r\n+            <outputDirectory>docs/manual</outputDirectory>\r\n+        </fileSet>\r\n+        <fileSet>\r\n+            <directory>../target/site/apidocs</directory>\r\n+            <outputDirectory>docs/javadoc</outputDirectory>\r\n+        </fileSet>\r\n+        <fileSet>\r\n+            <directory>../openjpa-examples/src/main/java</directory>\r\n+            <outputDirectory>examples</outputDirectory>\r\n+        </fileSet>\r\n+    </fileSets>\r\n+    <dependencySets>\r\n+        <dependencySet>\r\n+            <outputDirectory>/</outputDirectory>\r\n+            <unpack>false</unpack>\r\n+            <scope>runtime</scope>\r\n+            <includes>\r\n+                <include>org.apache.openjpa:openjpa</include>\r\n+            </includes>\r\n+        </dependencySet>\r\n+        <dependencySet>\r\n+            <outputDirectory>/lib</outputDirectory>\r\n+            <unpack>false</unpack>\r\n+            <scope>runtime</scope>\r\n+            <includes>\r\n+                <include>net.sourceforge.serp:serp</include>\r\n+                <include>org.apache.derby:derby</include>\r\n+\r\n+                <include>commons-lang:commons-lang</include>\r\n+                <include>commons-collections:commons-collections</include>\r\n+                <include>commons-pool:commons-pool</include>\r\n+\r\n+                <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\r\n+                <include>org.apache.geronimo.specs:geronimo-jpa_3.0_spec</include>\r\n+            </includes>\r\n+        </dependencySet>\r\n+    </dependencySets>\r\n+</assembly>\r"},{"sha":"13e9b5917af1fdea26a210712979e3ff34e8d0c3","filename":"1.2.x/openjpa-project/pom.xml","status":"added","additions":444,"deletions":0,"changes":444,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/pom.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,444 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!-- \n+    Please keep the project tag on one line to avoid confusing \n+    the release plugin.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <!--\n+        To build the distribution files from project root:\n+\n+        mvn clean compile package -Dtest=false\n+\n+        To build and deploy a full digned release with docs, run:\n+\n+            mvn clean deploy -Pjavadoc-profile,docbook-profile,sign-release\n+\n+        Note that to sign the release, you need to have \"gpg\" installed and\n+        create a key. See http://apache.org/dev/release-signing.html\n+    -->\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>apache-openjpa</artifactId>\n+    <packaging>pom</packaging>\n+    <name>OpenJPA Distribution</name>\n+    <parent>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-parent</artifactId>\n+        <version>1.2.1</version>\n+    </parent>\n+\n+    <properties>\n+        <openjpa.release.keyAlias>\n+            ${user.name}@apache.org\n+        </openjpa.release.keyAlias>\n+\n+        <openjpa.assembly.finalName>\n+            ${artifactId}-${version}</openjpa.assembly.finalName>\n+        <openjpa.assembly.outputDirectory>\n+        ${project.basedir}/target/site/downloads\n+        </openjpa.assembly.outputDirectory>\n+\n+        <openjpa.assembly.binarySuffix>binary</openjpa.assembly.binarySuffix>\n+        <openjpa.assembly.binaryBase>\n+        ${openjpa.assembly.outputDirectory}/${openjpa.assembly.finalName}-${openjpa.assembly.binarySuffix}\n+        </openjpa.assembly.binaryBase>\n+        <openjpa.assembly.binaryFile>\n+        ${openjpa.assembly.binaryBase}.zip\n+        </openjpa.assembly.binaryFile>\n+\n+        <openjpa.assembly.sourceSuffix>source</openjpa.assembly.sourceSuffix>\n+        <openjpa.assembly.sourceBase>\n+        ${openjpa.assembly.outputDirectory}/${openjpa.assembly.finalName}-${openjpa.assembly.sourceSuffix}\n+        </openjpa.assembly.sourceBase>\n+        <openjpa.assembly.sourceFile>\n+        ${openjpa.assembly.sourceBase}.zip\n+        </openjpa.assembly.sourceFile>\n+\n+        <parent.site.docs>\n+        ${project.basedir}/target/site/docs\n+        </parent.site.docs>\n+\n+        <docbook.source>${project.basedir}/src/doc/manual</docbook.source>\n+        <docbook.target>${project.basedir}/target/manual</docbook.target>\n+        <docbook.version>1.67.2</docbook.version>\n+        <local.repository>${settings.localRepository}</local.repository>\n+        \n+        <!-- \n+            Java imaging apis are needed to include images in a PDF.\n+            JIMI or JAI may be used. Neither is available in a maven\n+            repository and should be downloaded and installed manually\n+            to your local repository.\n+\n+            ie :\n+            $ mvn install:install-file -Dfile=jai_core.jar \\\n+              -DgroupId=javax.media -DartifactId=jai-core \\ \n+              -Dversion=1.1.3 -Dpackaging=jar\n+\n+            Alternatively if you have installed the JAI artifacts to an \n+            internal repository you can specify it on the command line:\n+              -Djai.maven.repo=REPOS_URL\n+              -Djai.groupId=javax.media\n+            -->\n+        <jai.maven.repo>https://m2proxy.atlassian.com/repository/public</jai.maven.repo>\n+        <jai.groupId>com.sun</jai.groupId>\n+        <jai.version>1.1.3</jai.version>\n+\n+        <!-- authentication for nightly uploads -->\n+        <nightly.user.name>${user.name}</nightly.user.name>\n+        <nightly.password>passw0rd</nightly.password>\n+        </properties>\n+\n+        <build>\n+        <!-- needed to let maven pass the \"compile\" phase -->\n+        <testSourceDirectory>/none/</testSourceDirectory>\n+\n+        <!-- filter site resources -->\n+        <resources>\n+        <resource>\n+        <directory>${project.basedir}/src/site</directory>\n+        <!-- targetPath is relative to target/classes/ -->\n+        <targetPath>../filtered-site</targetPath>\n+                <filtering>false</filtering>\n+            </resource>\n+        </resources>\n+\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-assembly-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>bin</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>attached</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptor>assembly.xml</descriptor>\n+                            <outputDirectory>${openjpa.assembly.outputDirectory}</outputDirectory>\n+                            <workDirectory>target/work</workDirectory>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>sources</id>\n+                        <phase>package</phase>\n+                        <goals>\n+                            <goal>attached</goal>\n+                        </goals>\n+                        <configuration>\n+                            <descriptor>source-assembly.xml</descriptor>\n+                            <outputDirectory>${openjpa.assembly.outputDirectory}</outputDirectory>\n+                            <workDirectory>target/work</workDirectory>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <!--\n+                Copy over site files from src/site to target/filtered-site\n+                so we can filter resources and include other generated\n+                content from the openjpa-project module.\n+            -->\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>prefilter-site</id>\n+                        <phase>site</phase>\n+                        <goals>\n+                            <goal>resources</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-site-plugin</artifactId>\n+                <configuration>\n+                    <siteDirectory>target/filtered-site</siteDirectory>\n+                </configuration>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>ianal-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>verify-legal-files</goal>\n+                        </goals>\n+                        <configuration>\n+                            <!-- Do not fail the build, as ianal will fail on source zips due to included META-INF dirs -->\n+                            <strict>false</strict>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <profiles>\n+        <!--\n+            Docbook profile. Docs can be built by running:\n+            MAVEN_OPTS=-Xmx512m\n+            mvn -f openjpa-project/pom.xml process-resources -Pdocbook-profile\n+        -->\n+        <profile>\n+            <id>docbook-profile</id>\n+            <build>\n+                <plugins>\n+                    <!-- build the docs when processing resources -->\n+                    <plugin>\n+                        <groupId>com.agilejava.docbkx</groupId>\n+                        <artifactId>docbkx-maven-plugin</artifactId>\n+                        <version>2.0.7</version>\n+                        <executions>\n+                            <execution>\n+                                <id>build-pdf-doc</id>\n+                                <phase>process-resources</phase>\n+                                <goals><goal>generate-pdf</goal></goals>\n+                                <configuration>\n+                                    <sourceDirectory>\n+                                        ${docbook.source}\n+                                    </sourceDirectory>\n+                                    <targetDirectory>\n+                                        ${docbook.target}\n+                                    </targetDirectory>\n+                                    <includes>manual.xml</includes>\n+                                    <foCustomization>\n+                                        ${docbook.source}/manual-pdf.xsl\n+                                    </foCustomization>\n+                                    <imgSrcPath>\n+                                        ${docbook.source}/\n+                                    </imgSrcPath>\n+                                    <postProcess>\n+                                        <!-- copy to parent module for \n+                                             expanded access in upload -->\n+                                        <mkdir dir=\"${parent.site.docs}\" />\n+                                        <delete file=\"${docbook.target}/manual.fo\" />\n+                                        <copy todir=\"${parent.site.docs}\">\n+                                            <fileset dir=\"${docbook.target}\">\n+                                                <include name=\"manual.pdf\" />\n+                                            </fileset>\n+                                        </copy>\n+                                    </postProcess>\n+                                </configuration>\n+                            </execution>\n+                            <execution>\n+                                <id>build-chunked-doc</id>\n+                                <phase>process-resources</phase>\n+                                <goals><goal>generate-html</goal></goals>\n+                                <configuration>\n+                                    <sourceDirectory>\n+                                        ${docbook.source}\n+                                    </sourceDirectory>\n+                                    <targetDirectory>\n+                                        ${docbook.target}\n+                                    </targetDirectory>\n+                                    <includes>manual.xml</includes>\n+                                    <chunkedOutput>true</chunkedOutput>\n+                                    <chunkQuietly>false</chunkQuietly>\n+                                    <htmlCustomization>\n+                                        ${docbook.source}/manual-xhtml-chunk.xsl\n+                                    </htmlCustomization>\n+                                    <postProcess>\n+                                        <!-- rename manual to index -->\n+                                        <move file=\"${docbook.target}/manual.html\" tofile=\"${docbook.target}/index.html\" />\n+\n+                                        <!-- copy over images and styles -->\n+                                        <mkdir dir=\"${docbook.target}/img\" />\n+                                        <copy todir=\"${docbook.target}/img\">\n+                                            <fileset dir=\"${docbook.source}/img\">\n+                                                <include name=\"*.*\" />\n+                                            </fileset>\n+                                        </copy>\n+\n+                                        <mkdir dir=\"${docbook.target}/css\" />\n+                                        <copy todir=\"${docbook.target}/css\">\n+                                            <fileset dir=\"${docbook.source}/css\">\n+                                                <include name=\"*.*\" />\n+                                            </fileset>\n+                                        </copy>\n+\n+                                        <!-- copy to parent module for \n+                                             expanded access in upload -->\n+                                        <mkdir dir=\"${parent.site.docs}\" />\n+                                        <copy todir=\"${parent.site.docs}\">\n+                                            <fileset dir=\"${docbook.target}\">\n+                                                <include name=\"*.*\" />\n+                                            </fileset>\n+                                        </copy>\n+                                    </postProcess>\n+                                </configuration>\n+                            </execution>\n+                            <execution>\n+                                <id>build-single-doc</id>\n+                                <phase>process-resources</phase>\n+                                <goals><goal>generate-html</goal></goals>\n+                                <configuration>\n+                                    <sourceDirectory>\n+                                        ${docbook.source}\n+                                    </sourceDirectory>\n+                                    <targetDirectory>\n+                                        ${docbook.target}\n+                                    </targetDirectory>\n+                                    <includes>manual.xml</includes>\n+                                    <chunkedOutput>false</chunkedOutput>\n+                                    <htmlCustomization>\n+                                        ${docbook.source}/manual-xhtml.xsl\n+                                    </htmlCustomization>\n+                                    <postProcess>\n+                                        <!-- copy to parent module for \n+                                             expanded access in upload -->\n+                                        <mkdir dir=\"${parent.site.docs}\" />\n+                                        <copy todir=\"${parent.site.docs}\">\n+                                            <fileset dir=\"${docbook.target}\">\n+                                                <include name=\"manual.html\" />\n+                                            </fileset>\n+                                        </copy>\n+                                    </postProcess>\n+                                </configuration>\n+                            </execution>\n+                        </executions>\n+                        <dependencies>\n+                        <dependency>\n+                            <groupId>org.docbook</groupId>\n+                            <artifactId>docbook-xml</artifactId>\n+                            <version>4.4</version>\n+                            <scope>runtime</scope>\n+                        </dependency>\n+                        <dependency>\n+                            <groupId>${jai.groupId}</groupId>\n+                            <artifactId>jai_core</artifactId>\n+                            <version>${jai.version}</version>\n+                            <scope>runtime</scope>\n+                        </dependency>\n+                        <dependency>\n+                            <groupId>${jai.groupId}</groupId>\n+                            <artifactId>jai_codec</artifactId>\n+                            <version>${jai.version}</version>\n+                            <scope>runtime</scope>\n+                        </dependency>\n+                        </dependencies>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+            <activation>\n+                <property>\n+                    <name>builddocs</name>\n+                    <value>true</value>\n+                </property>\n+            </activation>\n+            <pluginRepositories>\n+                <pluginRepository>\n+                    <id>agilejava</id>\n+                    <name>Agilejava repository (Docbook plugin)</name>\n+                    <url>http://agilejava.com/maven</url>\n+                </pluginRepository>\n+            </pluginRepositories>\n+            <repositories>\n+                <repository>\n+                    <id>jai.repository</id>\n+                    <name>JAI Repository (indirectly used by Docbook plugin)</name>\n+                    <url>${jai.maven.repo}</url>\n+                </repository>\n+            </repositories>\n+        </profile>\n+        <!-- \n+          Upload distribution files, javadoc and manual to openjpa.apache.org/builds/latest. \n+          This profile is designed to be run nightly by a continuous build server, but can\n+          also be run manually.\n+\n+          The nightly.user.name and nightly.password properties need to be set prior to using\n+          this profile, ie : \n+          $ mvn -Dnightly.user.name=mikedd -Dnightly.password=mikesPassword -Pnightly-upload package\n+          or (using a profile defined in $user.home/.m2/settings.xml )\n+          $ mvn -Pnightly-upload,mikes-nightly-credentials package\n+          -->\n+        <profile>\n+            <id>nightly-upload</id>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-antrun-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <phase>package</phase>\n+                                <configuration>\n+                                    <tasks>\n+                                        <mkdir dir=\"target/site/tempDocs\" />\n+                                        <unzip dest=\"target/site/tempDocs\">\n+                                            <fileset dir=\"target/site/downloads\">\n+                                                <include name=\"*binary*.zip\" />\n+                                            </fileset>\n+                                            <patternset>\n+                                                <include name=\"**/javadoc/**\" />\n+                                                <include name=\"**/manual/**\" />\n+                                            </patternset>\n+                                        </unzip>\n+                                        <move todir=\"target/site/tempDocs/docs\">\n+                                            <fileset dir=\"target/site/tempDocs/apache-openjpa-${pom.version}/docs\" /> \n+                                        </move>\n+                                        <checksum> \n+                                            <fileset dir=\"target/site/downloads/\">\n+                                                <include name=\"*.zip\" />\n+                                            </fileset>\n+                                        </checksum>\n+                                        <scp todir=\"${nightly.user.name}:${nightly.password}@people.apache.org:/www/openjpa.apache.org/builds/latest-1.2.x/downloads\" trust=\"true\">\n+                                            <fileset dir=\"target/site/downloads\" />\n+                                        </scp>\n+                                        <scp todir=\"${nightly.user.name}:${nightly.password}@people.apache.org:/www/openjpa.apache.org/builds/latest-1.2.x/docs\" trust=\"true\">\n+                                            <fileset dir=\"target/site/tempDocs/docs\" /> \n+                                        </scp>\n+                                        <sshexec host=\"people.apache.org\" username=\"${nightly.user.name}\" password=\"${nightly.password}\" command=\"chmod -R g+w /www/openjpa.apache.org/builds/latest-1.2.x\" trust=\"true\" />\n+                                        <delete>\n+                                            <fileset dir=\"target/site/tempDocs\" />\n+                                        </delete>\n+                                    </tasks>\n+                                </configuration>\n+                                <goals>\n+                                    <goal>run</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+    </profiles>\n+\n+    <!-- need to explicitly list dependencies for assembly to work -->\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa</artifactId>\n+            <version>${pom.version}</version>\n+        </dependency>\n+\n+        <!-- included so we can include it in the distribution -->\n+        <dependency>\n+            <groupId>org.apache.derby</groupId>\n+            <artifactId>derby</artifactId>\n+        </dependency>\n+    </dependencies>\n+</project>"},{"sha":"b3cce08722f22fe814bb1c8159902b3990838478","filename":"1.2.x/openjpa-project/source-assembly.xml","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/source-assembly.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/source-assembly.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/source-assembly.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<assembly>\n+    <id>source</id>\n+    <formats>\n+        <format>zip</format>\n+    </formats>\n+    <!--\n+        rather than including the base directory (which would cause this\n+        archive to unpack into the same directory as the binary\n+        distribution), we specify the directory into which to put\n+        sources below, in the <outputDirectory> tags\n+    -->\n+    <includeBaseDirectory>false</includeBaseDirectory>\n+    <fileSets>\n+        <fileSet>\n+            <directory>..</directory>\n+            <outputDirectory>${artifactId}-${version}-source</outputDirectory>\n+            <excludes>\n+                <exclude>**/target/**</exclude>\n+            </excludes>\n+        </fileSet>\n+\n+        <!--\n+            Also put the standard license and notice files at the top\n+            of the zip. Even those these will be included in the\n+            openjpa-project sub-directory, the Apache rules say that\n+            it needs to be in the top-level of the artifact. See:\n+\n+                http://www.apache.org/legal/src-headers.html#notice\n+        -->\n+        <fileSet>\n+            <outputDirectory>${artifactId}-${version}-source</outputDirectory>\n+            <includes>\n+                <include>README</include>\n+                <include>DISCLAIMER</include>\n+                <include>LICENSE</include>\n+                <include>STATUS</include>\n+                <include>NOTICE</include>\n+                <include>README.txt</include>\n+                <include>DISCLAIMER.txt</include>\n+                <include>LICENSE.txt</include>\n+                <include>STATUS.txt</include>\n+                <include>NOTICE.txt</include>\n+                <include>BUILDING</include>\n+                <include>BUILDING.txt</include>\n+                <include>RELEASE-NOTES</include>\n+                <include>RELEASE-NOTES.html</include>\n+                <include>RELEASE-NOTES.txt</include>\n+                <include>CHANGES</include>\n+                <include>CHANGES.txt</include>\n+            </includes>\n+        </fileSet>\n+    </fileSets>\n+</assembly>"},{"sha":"2db15d9d4722b034647bfec9a9d2f71ff987dc1e","filename":"1.2.x/openjpa-project/src/doc/manual/css/docbook.css","status":"added","additions":244,"deletions":0,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/css/docbook.css","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/css/docbook.css","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/css/docbook.css?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.  \n+ */\n+\n+/* content styles */\n+html {\n+\tbackground-color: white;\n+\tcolor: black;\n+\tfont-family: Arial, Lucida Grande, sans-serif;\n+\tfont-size: 0.85em;\n+\tline-height: 1.25em;\n+}\n+\n+\n+/* links */\n+a:hover {color: #0044B3;}\n+a {color: #597BB3;}\n+a.nonexistent, a.badinterwiki {color: gray;}\n+\n+/* Headings */\n+\n+h1 a {\n+\ttext-decoration: none;    \n+\tcolor: black;\n+}\n+li p {\n+\tmargin: .25em 0;\n+}\n+li.gap {\n+\tmargin-top: 0.5em;\n+}\n+a, img, img.drawing {\n+\tborder: 0;\n+}\n+dt {\n+\tfont-weight: bold;\n+}\n+\n+pre {\n+\tpadding: 0.5em;\n+\tfont-family: courier, monospace;\n+\tborder: 1pt solid #c0c0c0;\n+\tmargin-left: 1em;\n+\tbackground: #F0ECE6;\n+\twhite-space: pre;\n+\t/* begin css 3 or browser specific rules - do not remove!\n+\tsee: http://forums.techguy.org/archive/index.php/t-249849.html */\n+    white-space: pre-wrap;\n+    word-wrap: break-word;\n+    white-space: -moz-pre-wrap;\n+    white-space: -pre-wrap;\n+    white-space: -o-pre-wrap;\n+    /* end css 3 or browser specific rules */\n+}\n+\n+table\n+{\n+\tmargin: 0.5em 0;\n+\tborder-collapse: collapse;\n+}\n+\n+td\n+{\n+\tpadding: 0.25em;\n+\tborder: 1px solid #ADB9CC;\n+}\n+\n+td p {\n+\tmargin: 0;\n+\tpadding: 0;\n+}\n+\n+/* standard rule ---- */\n+hr {\n+\theight: 1px;\n+\tbackground-color: #c0c0c0;\n+\tborder: none;\n+}\n+\n+/* custom rules ----- to ---------- */\n+.hr1 {height: 2px;}\n+.hr2 {height: 3px;}\n+.hr3 {height: 4px;}\n+.hr4 {height: 5px;}\n+.hr5 {height: 6px;}\n+.hr6 {height: 7px;}\n+\n+/* Replacement for html 3 u tag */\n+.u {text-decoration: underline;}\n+\n+.footnotes ul {\n+\tpadding: 0 2em;\n+\tmargin: 0 0 1em;\n+}\n+\n+.footnotes li {\n+\tlist-style: none;\n+}\n+\n+.info {\n+    font-size: 0.85em;\n+    color: gray;\n+}\n+\n+#pageinfo {\n+    margin-top: 2em;\n+}\n+\n+/* eye catchers */\n+.warning \n+{\n+\tcolor: red;\n+}\n+\n+.error \n+{\n+\tcolor: red;\n+}\n+\n+strong.highlight \n+{\n+\tbackground-color: #CCE0FF;\n+\tpadding: 1pt;\n+}\n+\n+#credits img {\n+\tvertical-align: middle;\n+}\n+\n+/* Recent changes */\n+\n+.recentchanges p {\n+\tmargin: 0.25em;\n+}\n+\n+.recentchanges td {\n+\tvertical-align: top;\n+\tborder: none;\n+\tborder-bottom: 1pt solid #F0ECE6;\n+\tbackground: #F7F6F2;\n+}\n+\n+.rcdaybreak td {\n+\tbackground: #B8C5D9;\n+\tborder: none;\n+}\n+\n+.rcdaybreak td a {\n+\tfont-size: 0.88em;\n+}\n+\n+.rcicon1, .rcicon2 {\n+\ttext-align: center;\n+}\n+\n+.rcpagelink {\n+\twidth: 33%;\n+}\n+\n+.rctime {\n+\tfont-size: 0.88em;\n+\twhite-space: nowrap;\n+}\n+\n+.rceditor {\n+\twhite-space: nowrap;\n+\tfont-size: 0.88em;\n+}\n+\n+.rccomment {\n+\twidth: 66%;\n+\tcolor: gray;\n+\tfont-size: 0.88em;\n+}\n+\n+.rcrss {\n+\tfloat: right;\n+}\n+\n+.recentchanges[dir=\"rtl\"] .rcrss {\n+\tfloat: left;\n+}\n+\n+/* User Preferences */\n+\n+.userpref table, .userpref td {\n+\tborder: none;\n+}\n+\n+\n+/* CSS for new code_area markup used by Colorizer and ParserBase */\n+\n+div.codearea { /* the div makes the border */\n+\tmargin: 0.5em 0;\n+\tpadding: 0;\n+\tborder: 1pt solid #AEBDCC;\n+\tbackground-color: #F3F5F7;\n+\tcolor: black;\n+}\n+\n+div.codearea pre { /* the pre has no border and is inside the div */\n+\tmargin: 0;\n+\tpadding: 10pt;\n+\tborder: none;\n+}\n+\n+a.codenumbers { /* format of the line numbering link */\n+\tmargin: 0 10pt;\n+\tfont-size: 0.85em;\n+\tcolor: gray;\n+}\n+\n+/* format of certain syntax spans */\n+div.codearea pre span.LineNumber {color: gray;}\n+div.codearea pre span.ID         {color: #000000;}\n+div.codearea pre span.Operator   {color: #0000C0;}\n+div.codearea pre span.Char       {color: #004080;}\n+div.codearea pre span.Comment    {color: #008000;}\n+div.codearea pre span.Number     {color: #0080C0;}\n+div.codearea pre span.String     {color: #004080;}\n+div.codearea pre span.SPChar     {color: #0000C0;}\n+div.codearea pre span.ResWord    {color: #A00000;}\n+div.codearea pre span.ConsWord   {color: #008080; font-weight: bold;}\n+div.codearea pre span.Error      {color: #FF8080; border: solid 1.5pt #FF0000;}\n+div.codearea pre span.ResWord2   {color: #0080ff; font-weight: bold;}\n+div.codearea pre span.Special    {color: #0000ff;}\n+div.codearea pre span.Preprc     {color: #803999;}\n+\n+"},{"sha":"5d6d4bc3eb5c6d10bb7ec1dd159ecfad74e3c5c5","filename":"1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.graffle","status":"added","additions":949,"deletions":0,"changes":949,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,949 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CanvasColor</key>\n+\t<dict>\n+\t\t<key>w</key>\n+\t\t<string>1</string>\n+\t</dict>\n+\t<key>ColumnAlign</key>\n+\t<integer>0</integer>\n+\t<key>ColumnSpacing</key>\n+\t<real>36</real>\n+\t<key>GraphDocumentVersion</key>\n+\t<integer>4</integer>\n+\t<key>GraphicsList</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>7</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>14</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{238.5, 207}</string>\n+\t\t\t\t<string>{238.5, 184}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>Arrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>8</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>6</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>13</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{238.5, 144}</string>\n+\t\t\t\t<string>{238.5, 121}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>Arrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>7</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>5</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>12</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{238.5, 81}</string>\n+\t\t\t\t<string>{238.5, 58}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>Arrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>6</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>1</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>11</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{85.5, 81}</string>\n+\t\t\t\t<string>{85.5, 58}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>Arrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>2</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>2</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>10</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{85.5, 144}</string>\n+\t\t\t\t<string>{85.5, 121}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>Arrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>3</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>3</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>9</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{85.5, 207}</string>\n+\t\t\t\t<string>{85.5, 184}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>Arrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>4</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{171, 207}, {135, 38}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>8</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 ManagerId}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{171, 144}, {135, 40}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>7</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 FullTimeEmployeeId}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - empId: long}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{171, 81}, {135, 40}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>6</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-BoldOblique;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\i\\b\\fs24 \\cf2 EmployeeId}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - userName: String}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{171, 18}, {135, 40}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>5</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-BoldOblique;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\i\\b\\fs24 \\cf2 PersonId}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - ssn: String}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{27, 207}, {117, 38}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>4</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Manager}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{27, 144}, {117, 40}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>3</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 FullTimeEmployee}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - empId: long}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{27, 81}, {117, 40}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>2</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-BoldOblique;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\i\\b\\fs24 \\cf2 Employee}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - userName: String}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{27, 18}, {117, 40}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>1</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-BoldOblique;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\i\\b\\fs24 \\cf2 Person}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - ssn: String}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t</array>\n+\t<key>GridInfo</key>\n+\t<dict>\n+\t\t<key>MinorGridColor</key>\n+\t\t<dict>\n+\t\t\t<key>a</key>\n+\t\t\t<string>0.3</string>\n+\t\t\t<key>w</key>\n+\t\t\t<string>0.666667</string>\n+\t\t</dict>\n+\t\t<key>SnapsToGrid</key>\n+\t\t<string>YES</string>\n+\t</dict>\n+\t<key>GuidesLocked</key>\n+\t<string>NO</string>\n+\t<key>GuidesVisible</key>\n+\t<string>YES</string>\n+\t<key>HPages</key>\n+\t<integer>1</integer>\n+\t<key>ImageCounter</key>\n+\t<integer>1</integer>\n+\t<key>IsPalette</key>\n+\t<string>NO</string>\n+\t<key>Layers</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Lock</key>\n+\t\t\t<string>NO</string>\n+\t\t\t<key>Name</key>\n+\t\t\t<string>Layer 1</string>\n+\t\t\t<key>Print</key>\n+\t\t\t<string>YES</string>\n+\t\t\t<key>View</key>\n+\t\t\t<string>YES</string>\n+\t\t</dict>\n+\t</array>\n+\t<key>LayoutInfo</key>\n+\t<dict>\n+\t\t<key>ChildOrdering</key>\n+\t\t<integer>0</integer>\n+\t</dict>\n+\t<key>LinksVisible</key>\n+\t<string>NO</string>\n+\t<key>MagnetsVisible</key>\n+\t<string>NO</string>\n+\t<key>Orientation</key>\n+\t<integer>2</integer>\n+\t<key>PageBreaks</key>\n+\t<string>YES</string>\n+\t<key>PageSetup</key>\n+\t<data>\n+\tBAt0eXBlZHN0cmVhbYED6IQBQISEhAtOU1ByaW50SW5mbwGEhAhOU09iamVjdACFkoSE\n+\thBNOU011dGFibGVEaWN0aW9uYXJ5AISEDE5TRGljdGlvbmFyeQCUhAFpFJKEhIQITlNT\n+\tdHJpbmcBlIQBKxBOU0pvYkRpc3Bvc2l0aW9uhpKEmZkPTlNQcmludFNwb29sSm9ihpKE\n+\tmZkLTlNQYXBlclNpemWGkoSEhAdOU1ZhbHVlAJSEASqEhAx7X05TU2l6ZT1mZn2cgQJk\n+\tgQMYhpKEmZkZTlNQcmludFJldmVyc2VPcmllbnRhdGlvboaShISECE5TTnVtYmVyAJ2b\n+\thJeXAIaShJmZFE5TVmVydGljYWxQYWdpbmF0aW9uhpKEoZuilwCGkoSZmRROU1ZlcnRp\n+\tY2FsbHlDZW50ZXJlZIaShKGbopcBhpKEmZkOTlNQTVBhZ2VGb3JtYXSGkoSEhAZOU0Rh\n+\tdGEAlJeBHbCEB1s3NjAwY108P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYt\n+\tOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZSBDb21wdXRlci8vRFRE\n+\tIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5\n+\tTGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUhvcml6b250YWxSZXM8L2tleT4KCTxk\n+\taWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ\n+\tPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJ\n+\tPGRpY3Q+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpv\n+\tbnRhbFJlczwva2V5PgoJCQkJPHJlYWw+NzI8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5w\n+\tcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDA1LTAyLTExVDAxOjA4OjM3Wjwv\n+\tZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tl\n+\teT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8L2FycmF5PgoJ\n+\tPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVudGF0\n+\taW9uPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl\n+\tYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3Ry\n+\taW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4K\n+\tCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZv\n+\tcm1hdC5QTU9yaWVudGF0aW9uPC9rZXk+CgkJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJPHN0\n+\tcmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQk8a2V5PmNv\n+\tbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+MjAwNS0w\n+\tMi0xMVQwMTowODozN1o8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2Rp\n+\tY3Q+CgkJPC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VG\n+\tb3JtYXQuUE1TY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmlu\n+\tdC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5n\n+\tbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVt\n+\tQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8L2tleT4KCQkJCTxyZWFsPjE8L3JlYWw+\n+\tCgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDA1\n+\tLTAyLTExVDAxOjA4OjM3WjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwv\n+\tZGljdD4KCQk8L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFn\n+\tZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20u\n+\tYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+CgkJCQk8cmVh\n+\tbD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8\n+\tL2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJ\n+\tCTxkYXRlPjIwMDUtMDItMTFUMDE6MDg6MzdaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBw\n+\tbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50\n+\tZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxTY2FsaW5nPC9rZXk+Cgk8ZGljdD4K\n+\tCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJp\n+\tbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsU2Nh\n+\tbGluZzwva2V5PgoJCQkJPHJlYWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0\n+\tLm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDUtMDItMTFUMDE6MDg6MzdaPC9kYXRl\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJ\n+\tCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2Rp\n+\tY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5zdWJUaWNrZXQucGFwZXJfaW5mb190aWNr\n+\tZXQ8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQu\n+\tUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxl\n+\tLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuaXRlbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+\n+\tCgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAu\n+\tMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3Jl\n+\tYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu\n+\tY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2Vy\n+\tPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8\n+\tL2tleT4KCQkJCQk8ZGF0ZT4yMDA1LTAyLTEzVDA4OjEzOjQ0WjwvZGF0ZT4KCQkJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGlu\n+\tdGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+\n+\tCgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJS\n+\tZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j\n+\tcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwv\n+\tc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRlbUFycmF5PC9r\n+\tZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCQkJCTxhcnJheT4K\n+\tCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJ\n+\tCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJy\n+\tYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJ\n+\tCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJ\n+\tCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRh\n+\tdGU+MjAwNS0wMi0xM1QwODoxMzo0NFo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVn\n+\tZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5QTVBhcGVyTmFtZTwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJO\n+\tYW1lPC9rZXk+CgkJCQkJPHN0cmluZz5uYS1sZXR0ZXI8L3N0cmluZz4KCQkJCQk8a2V5\n+\tPmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5j\n+\tb20uYXBwbGUucHJpbnQucG0uUG9zdFNjcmlwdDwvc3RyaW5nPgoJCQkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMy0w\n+\tNy0wMVQxNzo0OTozNlo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjE8L2ludGVnZXI+CgkJCQk8\n+\tL2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mby5QTVVuYWRqdXN0ZWRQYWdlUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1\n+\tc3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3Jl\n+\tYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJ\n+\tCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBw\n+\tbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDA1LTAyLTExVDAxOjA4\n+\tOjM3WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVG\n+\tbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJ\n+\tPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZv\n+\tLlBNVW5hZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBs\n+\tZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhcGVy\n+\tUmVjdDwva2V5PgoJCQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJ\n+\tCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJl\n+\tYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJyYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwNS0wMi0xMVQwMTowODozN1o8L2Rh\n+\tdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5\n+\tPgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+\n+\tCgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1Q\n+\tYXBlck5hbWU8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9z\n+\tdFNjcmlwdDwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRl\n+\tbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3Ry\n+\taW5nPlVTIExldHRlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Q\n+\tb3N0U2NyaXB0PC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0\n+\tLm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAzLTA3LTAxVDE3OjQ5OjM2WjwvZGF0\n+\tZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+\n+\tCgkJCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4K\n+\tCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248\n+\tL2tleT4KCQk8c3RyaW5nPjAwLjIwPC9zdHJpbmc+CgkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0LnByaXZhdGVMb2NrPC9rZXk+CgkJPGZhbHNlLz4KCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQudHlwZTwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50LlBhcGVySW5mb1RpY2tldDwvc3RyaW5nPgoJPC9kaWN0PgoJPGtleT5jb20uYXBw\n+\tbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tleT4KCTxzdHJpbmc+MDAuMjA8L3N0\n+\tcmluZz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5wcml2YXRlTG9jazwva2V5\n+\tPgoJPGZhbHNlLz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50eXBlPC9rZXk+\n+\tCgk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0VGlja2V0PC9zdHJpbmc+\n+\tCjwvZGljdD4KPC9wbGlzdD4KhpKEmZkPTlNQcmludEFsbFBhZ2VzhpKgkoSZmQtOU1Bh\n+\tcGVyTmFtZYaShJmZCW5hLWxldHRlcoaShJmZFU5TSG9yaXpvbmFsUGFnaW5hdGlvboaS\n+\thKGbopcAhpKEmZkWTlNIb3Jpem9udGFsbHlDZW50ZXJlZIaSppKEmZkJTlNQcmludGVy\n+\thpKEhIQJTlNQcmludGVyAJSShJmZASCGhpKEmZkITlNDb3BpZXOGkoShm6KXAYaShJmZ\n+\tD05TU2NhbGluZ0ZhY3RvcoaShKGbhIQBZqEBhpKEmZkNTlNSaWdodE1hcmdpboaShKGb\n+\tuKEkhpKEmZkOTlNCb3R0b21NYXJnaW6GkoShm7ihJIaShJmZDE5TTGVmdE1hcmdpboaS\n+\thKGbuKEkhpKEmZkLTlNUb3BNYXJnaW6GkoShm7ihJIaShJmZCk5TTGFzdFBhZ2WGkoSh\n+\tm6KXgn////+GkoSZmQtOU0ZpcnN0UGFnZYaShKGbopcBhpKEmZkNTlNPcmllbnRhdGlv\n+\tboaShKGbopcAhoaG\n+\t</data>\n+\t<key>ReadOnly</key>\n+\t<string>NO</string>\n+\t<key>RowAlign</key>\n+\t<integer>0</integer>\n+\t<key>RowSpacing</key>\n+\t<real>36</real>\n+\t<key>SheetTitle</key>\n+\t<string>Canvas 1</string>\n+\t<key>SmartAlignmentGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>SmartDistanceGuidesActive</key>\n+\t<string>NO</string>\n+\t<key>UseEntirePage</key>\n+\t<false/>\n+\t<key>VPages</key>\n+\t<integer>1</integer>\n+\t<key>WindowInfo</key>\n+\t<dict>\n+\t\t<key>CurrentSheet</key>\n+\t\t<string>0</string>\n+\t\t<key>Frame</key>\n+\t\t<string>{{219, 37}, {618, 746}}</string>\n+\t\t<key>ShowRuler</key>\n+\t\t<false/>\n+\t\t<key>ShowStatusBar</key>\n+\t\t<true/>\n+\t\t<key>VisibleRegion</key>\n+\t\t<string>{{-31, 1}, {603, 648}}</string>\n+\t\t<key>Zoom</key>\n+\t\t<string>1</string>\n+\t</dict>\n+</dict>\n+</plist>"},{"sha":"d5aefcdfef9463f9294994d0acc203694860cad7","filename":"1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/appid-hierarchy.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"32e2e2aa64324a41de1b817f93fd5cf3ae45b9f7","filename":"1.2.x/openjpa-project/src/doc/manual/img/basic-coll.graffle","status":"added","additions":564,"deletions":0,"changes":564,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/basic-coll.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/basic-coll.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/basic-coll.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,564 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CanvasColor</key>\n+\t<dict>\n+\t\t<key>w</key>\n+\t\t<string>1</string>\n+\t</dict>\n+\t<key>ColumnAlign</key>\n+\t<integer>1</integer>\n+\t<key>ColumnSpacing</key>\n+\t<real>36</real>\n+\t<key>GraphDocumentVersion</key>\n+\t<integer>4</integer>\n+\t<key>GraphicsList</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>45</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{387, 279}</string>\n+\t\t\t\t<string>{405, 279}</string>\n+\t\t\t\t<string>{405, 225}</string>\n+\t\t\t\t<string>{378, 225}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>44</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{234, 252}</string>\n+\t\t\t\t<string>{270, 306}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{270, 252}, {117, 63}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>43</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Cylinder</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;\\f1\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs20 \\cf0 \\ul \\ulc0 ART_SUBS\\\n+\n+\\f1\\b0 \\ulnone ART_ID: BIGINT\\\n+ORD: INTEGER\\\n+SUBTITLE: VARCHAR}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>42</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{234, 234}</string>\n+\t\t\t\t<string>{270, 225}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{270, 198}, {108, 36}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>41</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Cylinder</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;\\f1\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs20 \\cf0 \\ul \\ulc0 ART\\\n+\n+\\f1\\b0 \\ulnone ID: BIGINT}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{81, 214}, {153, 54}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>40</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Article}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;\\f1\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - id: long\\\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f1\\b \\cf0 - subtitles: List&lt;String&gt;}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{72, 189}, {342, 135}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>39</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Rectangle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>a</key>\n+\t\t\t\t\t\t<string>0.2</string>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.4</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Align</key>\n+\t\t\t\t<integer>0</integer>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\b\\fs24 \\cf2 org.mag}</string>\n+\t\t\t</dict>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t</array>\n+\t<key>GridInfo</key>\n+\t<dict>\n+\t\t<key>ShowsGrid</key>\n+\t\t<string>YES</string>\n+\t\t<key>SnapsToGrid</key>\n+\t\t<string>YES</string>\n+\t</dict>\n+\t<key>GuidesLocked</key>\n+\t<string>NO</string>\n+\t<key>GuidesVisible</key>\n+\t<string>YES</string>\n+\t<key>HPages</key>\n+\t<integer>1</integer>\n+\t<key>ImageCounter</key>\n+\t<integer>1</integer>\n+\t<key>IsPalette</key>\n+\t<string>NO</string>\n+\t<key>Layers</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Lock</key>\n+\t\t\t<string>NO</string>\n+\t\t\t<key>Name</key>\n+\t\t\t<string>Layer 1</string>\n+\t\t\t<key>Print</key>\n+\t\t\t<string>YES</string>\n+\t\t\t<key>View</key>\n+\t\t\t<string>YES</string>\n+\t\t</dict>\n+\t</array>\n+\t<key>LayoutInfo</key>\n+\t<dict>\n+\t\t<key>ChildOrdering</key>\n+\t\t<integer>0</integer>\n+\t</dict>\n+\t<key>LinksVisible</key>\n+\t<string>NO</string>\n+\t<key>MagnetsVisible</key>\n+\t<string>NO</string>\n+\t<key>Orientation</key>\n+\t<integer>2</integer>\n+\t<key>PageBreaks</key>\n+\t<string>YES</string>\n+\t<key>PageSetup</key>\n+\t<data>\n+\tBAt0eXBlZHN0cmVhbYED6IQBQISEhAtOU1ByaW50SW5mbwGEhAhOU09iamVjdACFkoSE\n+\thBNOU011dGFibGVEaWN0aW9uYXJ5AISEDE5TRGljdGlvbmFyeQCUhAFpFJKEhIQITlNT\n+\tdHJpbmcBlIQBKxBOU0pvYkRpc3Bvc2l0aW9uhpKEmZkPTlNQcmludFNwb29sSm9ihpKE\n+\tmZkLTlNQYXBlclNpemWGkoSEhAdOU1ZhbHVlAJSEASqEhAx7X05TU2l6ZT1mZn2cgQJk\n+\tgQMYhpKEmZkZTlNQcmludFJldmVyc2VPcmllbnRhdGlvboaShISECE5TTnVtYmVyAJ2b\n+\thJeXAIaShJmZFE5TVmVydGljYWxQYWdpbmF0aW9uhpKEoZuilwCGkoSZmRROU1ZlcnRp\n+\tY2FsbHlDZW50ZXJlZIaShKGbopcBhpKEmZkOTlNQTVBhZ2VGb3JtYXSGkoSEhAZOU0Rh\n+\tdGEAlJeBHa2EB1s3NTk3Y108P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYt\n+\tOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZSBDb21wdXRlci8vRFRE\n+\tIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5\n+\tTGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUhvcml6b250YWxSZXM8L2tleT4KCTxk\n+\taWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ\n+\tPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJ\n+\tPGRpY3Q+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpv\n+\tbnRhbFJlczwva2V5PgoJCQkJPHJlYWw+NzI8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5w\n+\tcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4OjU0Wjwv\n+\tZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tl\n+\teT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8L2FycmF5PgoJ\n+\tPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVudGF0\n+\taW9uPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl\n+\tYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3Ry\n+\taW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4K\n+\tCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZv\n+\tcm1hdC5QTU9yaWVudGF0aW9uPC9rZXk+CgkJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJPHN0\n+\tcmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQk8a2V5PmNv\n+\tbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+MjAwMy0w\n+\tMS0yNFQxNjoyODo1NFo8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2Rp\n+\tY3Q+CgkJPC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VG\n+\tb3JtYXQuUE1TY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmlu\n+\tdC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5n\n+\tbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVt\n+\tQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8L2tleT4KCQkJCTxyZWFsPjE8L3JlYWw+\n+\tCgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAz\n+\tLTAxLTI0VDE2OjI4OjU0WjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwv\n+\tZGljdD4KCQk8L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFn\n+\tZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20u\n+\tYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+CgkJCQk8cmVh\n+\tbD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8\n+\tL2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJ\n+\tCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBw\n+\tbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50\n+\tZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxTY2FsaW5nPC9rZXk+Cgk8ZGljdD4K\n+\tCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJp\n+\tbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsU2Nh\n+\tbGluZzwva2V5PgoJCQkJPHJlYWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0\n+\tLm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRl\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJ\n+\tCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2Rp\n+\tY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5zdWJUaWNrZXQucGFwZXJfaW5mb190aWNr\n+\tZXQ8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQu\n+\tUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxl\n+\tLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuaXRlbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+\n+\tCgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAu\n+\tMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3Jl\n+\tYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu\n+\tY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2Vy\n+\tPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8\n+\tL2tleT4KCQkJCQk8ZGF0ZT4yMDA1LTAzLTA1VDA2OjMzOjQ5WjwvZGF0ZT4KCQkJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGlu\n+\tdGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+\n+\tCgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJS\n+\tZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j\n+\tcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwv\n+\tc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRlbUFycmF5PC9r\n+\tZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCQkJCTxhcnJheT4K\n+\tCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJ\n+\tCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJy\n+\tYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJ\n+\tCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJ\n+\tCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRh\n+\tdGU+MjAwNS0wMy0wNVQwNjozMzo0OVo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVn\n+\tZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5QTVBhcGVyTmFtZTwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJO\n+\tYW1lPC9rZXk+CgkJCQkJPHN0cmluZz5uYS1sZXR0ZXI8L3N0cmluZz4KCQkJCQk8a2V5\n+\tPmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5j\n+\tb20uYXBwbGUucHJpbnQucG0uUG9zdFNjcmlwdDwvc3RyaW5nPgoJCQkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMC0w\n+\tNy0yOFQyMjo1NzowNFo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjE8L2ludGVnZXI+CgkJCQk8\n+\tL2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mby5QTVVuYWRqdXN0ZWRQYWdlUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1\n+\tc3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3Jl\n+\tYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJ\n+\tCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBw\n+\tbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4\n+\tOjU0WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVG\n+\tbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJ\n+\tPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZv\n+\tLlBNVW5hZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBs\n+\tZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhcGVy\n+\tUmVjdDwva2V5PgoJCQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJ\n+\tCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJl\n+\tYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJyYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMy0wMS0yNFQxNjoyODo1NFo8L2Rh\n+\tdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5\n+\tPgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+\n+\tCgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1Q\n+\tYXBlck5hbWU8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9z\n+\tdFNjcmlwdDwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRl\n+\tbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3Ry\n+\taW5nPkxldHRlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0\n+\tU2NyaXB0PC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1v\n+\tZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAwLTA3LTI4VDIyOjU3OjA0WjwvZGF0ZT4K\n+\tCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJ\n+\tCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8\n+\tL2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tl\n+\teT4KCQk8c3RyaW5nPjAwLjIwPC9zdHJpbmc+CgkJPGtleT5jb20uYXBwbGUucHJpbnQu\n+\tdGlja2V0LnByaXZhdGVMb2NrPC9rZXk+CgkJPGZhbHNlLz4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQudHlwZTwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mb1RpY2tldDwvc3RyaW5nPgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tleT4KCTxzdHJpbmc+MDAuMjA8L3N0cmlu\n+\tZz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5wcml2YXRlTG9jazwva2V5PgoJ\n+\tPGZhbHNlLz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50eXBlPC9rZXk+Cgk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0VGlja2V0PC9zdHJpbmc+Cjwv\n+\tZGljdD4KPC9wbGlzdD4KhpKEmZkPTlNQcmludEFsbFBhZ2VzhpKgkoSZmQtOU1BhcGVy\n+\tTmFtZYaShJmZBkxldHRlcoaShJmZFU5TSG9yaXpvbmFsUGFnaW5hdGlvboaShKGbopcA\n+\thpKEmZkWTlNIb3Jpem9udGFsbHlDZW50ZXJlZIaSppKEmZkJTlNQcmludGVyhpKEhIQJ\n+\tTlNQcmludGVyAJSShJmZDkludGVybmFsIE1vZGVthoaShJmZCE5TQ29waWVzhpKEoZui\n+\tlwGGkoSZmQ9OU1NjYWxpbmdGYWN0b3KGkoShm4SEAWahAYaShJmZDU5TUmlnaHRNYXJn\n+\taW6GkoShm7ihAIaShJmZDk5TQm90dG9tTWFyZ2luhpKEoZu4oQCGkoSZmQxOU0xlZnRN\n+\tYXJnaW6GkoShm7ihAIaShJmZC05TVG9wTWFyZ2luhpKEoZu4oQCGkoSZmQpOU0xhc3RQ\n+\tYWdlhpKEoZuil4J/////hpKEmZkLTlNGaXJzdFBhZ2WGkoShm6KXAYaShJmZDU5TT3Jp\n+\tZW50YXRpb26GkoShm6KXAIaGhg==\n+\t</data>\n+\t<key>ReadOnly</key>\n+\t<string>NO</string>\n+\t<key>RowAlign</key>\n+\t<integer>1</integer>\n+\t<key>RowSpacing</key>\n+\t<real>36</real>\n+\t<key>SheetTitle</key>\n+\t<string>Canvas 1</string>\n+\t<key>SmartAlignmentGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>SmartDistanceGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>UseEntirePage</key>\n+\t<true/>\n+\t<key>VPages</key>\n+\t<integer>1</integer>\n+\t<key>WindowInfo</key>\n+\t<dict>\n+\t\t<key>CurrentSheet</key>\n+\t\t<string>0</string>\n+\t\t<key>Frame</key>\n+\t\t<string>{{259, 0}, {591, 832}}</string>\n+\t\t<key>ShowRuler</key>\n+\t\t<false/>\n+\t\t<key>ShowStatusBar</key>\n+\t\t<true/>\n+\t\t<key>VisibleRegion</key>\n+\t\t<string>{{0, 0}, {576, 734}}</string>\n+\t\t<key>Zoom</key>\n+\t\t<string>1</string>\n+\t</dict>\n+</dict>\n+</plist>"},{"sha":"a491c53d74c240ec2f321ebeedc399cbfbaf3fa8","filename":"1.2.x/openjpa-project/src/doc/manual/img/basic-coll.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/basic-coll.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/basic-coll.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/basic-coll.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2cbe1ca0fcccd7a11bc0338a5082fec5a471fce9","filename":"1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.graffle","status":"added","additions":751,"deletions":0,"changes":751,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,751 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CanvasColor</key>\n+\t<dict>\n+\t\t<key>w</key>\n+\t\t<string>1</string>\n+\t</dict>\n+\t<key>ColumnAlign</key>\n+\t<integer>1</integer>\n+\t<key>ColumnSpacing</key>\n+\t<real>36</real>\n+\t<key>GraphDocumentVersion</key>\n+\t<integer>4</integer>\n+\t<key>GraphicsList</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>23</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{414, 198}</string>\n+\t\t\t\t<string>{396, 198}</string>\n+\t\t\t\t<string>{396, 135}</string>\n+\t\t\t\t<string>{180, 135}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>21</integer>\n+\t\t\t\t<key>Info</key>\n+\t\t\t\t<integer>1</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>22</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{135, 182}</string>\n+\t\t\t\t<string>{135, 154}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>13</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{90, 109}, {90, 45}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>21</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Cylinder</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;\\f1\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs20 \\cf0 \\ul \\ulc0 COMP\\\n+\n+\\f1\\b0 \\ulnone CID: BIGINT}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>20</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{378, 252}</string>\n+\t\t\t\t<string>{414, 243}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>19</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{378, 242}</string>\n+\t\t\t\t<string>{414, 233}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>18</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{378, 224}</string>\n+\t\t\t\t<string>{414, 215}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>17</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{378, 215}</string>\n+\t\t\t\t<string>{414, 206}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>16</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{234, 206}</string>\n+\t\t\t\t<string>{270, 206}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{414, 162}, {108, 99}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>15</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Cylinder</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;\\f1\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs20 \\cf0 \\ul \\ulc0 COMP_ADDRS\\\n+\n+\\f1\\b0 \\ulnone COMP_ID: BIGINT\\\n+STREET: VARCHAR\\\n+CITY: VARCHAR\\\n+STATE: CHAR(2)\\\n+ZIP: VARCHAR}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{270, 195}, {108, 82}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>14</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{1, 1}</string>\n+\t\t\t\t<string>{1, -1}</string>\n+\t\t\t\t<string>{-1, -1}</string>\n+\t\t\t\t<string>{-1, 1}</string>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Address}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - street: String\\\n+- city: String\\\n+- state: String\\\n+- zip: String}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{36, 182}, {198, 40}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>13</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Company}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - addresses: Collection&lt;Address&gt;}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{27, 90}, {504, 198}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>12</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Rectangle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>a</key>\n+\t\t\t\t\t\t<string>0.2</string>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.4</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Align</key>\n+\t\t\t\t<integer>0</integer>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\b\\fs24 \\cf2 org.mag.pub}</string>\n+\t\t\t</dict>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t</array>\n+\t<key>GridInfo</key>\n+\t<dict>\n+\t\t<key>ShowsGrid</key>\n+\t\t<string>YES</string>\n+\t\t<key>SnapsToGrid</key>\n+\t\t<string>YES</string>\n+\t</dict>\n+\t<key>GuidesLocked</key>\n+\t<string>NO</string>\n+\t<key>GuidesVisible</key>\n+\t<string>YES</string>\n+\t<key>HPages</key>\n+\t<integer>1</integer>\n+\t<key>ImageCounter</key>\n+\t<integer>1</integer>\n+\t<key>IsPalette</key>\n+\t<string>NO</string>\n+\t<key>Layers</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Lock</key>\n+\t\t\t<string>NO</string>\n+\t\t\t<key>Name</key>\n+\t\t\t<string>Layer 1</string>\n+\t\t\t<key>Print</key>\n+\t\t\t<string>YES</string>\n+\t\t\t<key>View</key>\n+\t\t\t<string>YES</string>\n+\t\t</dict>\n+\t</array>\n+\t<key>LayoutInfo</key>\n+\t<dict>\n+\t\t<key>ChildOrdering</key>\n+\t\t<integer>0</integer>\n+\t</dict>\n+\t<key>LinksVisible</key>\n+\t<string>NO</string>\n+\t<key>MagnetsVisible</key>\n+\t<string>NO</string>\n+\t<key>Orientation</key>\n+\t<integer>2</integer>\n+\t<key>PageBreaks</key>\n+\t<string>YES</string>\n+\t<key>PageSetup</key>\n+\t<data>\n+\tBAt0eXBlZHN0cmVhbYED6IQBQISEhAtOU1ByaW50SW5mbwGEhAhOU09iamVjdACFkoSE\n+\thBNOU011dGFibGVEaWN0aW9uYXJ5AISEDE5TRGljdGlvbmFyeQCUhAFpFJKEhIQITlNT\n+\tdHJpbmcBlIQBKxBOU0pvYkRpc3Bvc2l0aW9uhpKEmZkPTlNQcmludFNwb29sSm9ihpKE\n+\tmZkLTlNQYXBlclNpemWGkoSEhAdOU1ZhbHVlAJSEASqEhAx7X05TU2l6ZT1mZn2cgQJk\n+\tgQMYhpKEmZkZTlNQcmludFJldmVyc2VPcmllbnRhdGlvboaShISECE5TTnVtYmVyAJ2b\n+\thJeXAIaShJmZFE5TVmVydGljYWxQYWdpbmF0aW9uhpKEoZuilwCGkoSZmRROU1ZlcnRp\n+\tY2FsbHlDZW50ZXJlZIaShKGbopcBhpKEmZkOTlNQTVBhZ2VGb3JtYXSGkoSEhAZOU0Rh\n+\tdGEAlJeBHa2EB1s3NTk3Y108P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYt\n+\tOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZSBDb21wdXRlci8vRFRE\n+\tIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5\n+\tTGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUhvcml6b250YWxSZXM8L2tleT4KCTxk\n+\taWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ\n+\tPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJ\n+\tPGRpY3Q+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpv\n+\tbnRhbFJlczwva2V5PgoJCQkJPHJlYWw+NzI8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5w\n+\tcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4OjU0Wjwv\n+\tZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tl\n+\teT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8L2FycmF5PgoJ\n+\tPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVudGF0\n+\taW9uPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl\n+\tYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3Ry\n+\taW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4K\n+\tCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZv\n+\tcm1hdC5QTU9yaWVudGF0aW9uPC9rZXk+CgkJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJPHN0\n+\tcmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQk8a2V5PmNv\n+\tbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+MjAwMy0w\n+\tMS0yNFQxNjoyODo1NFo8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2Rp\n+\tY3Q+CgkJPC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VG\n+\tb3JtYXQuUE1TY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmlu\n+\tdC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5n\n+\tbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVt\n+\tQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8L2tleT4KCQkJCTxyZWFsPjE8L3JlYWw+\n+\tCgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAz\n+\tLTAxLTI0VDE2OjI4OjU0WjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwv\n+\tZGljdD4KCQk8L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFn\n+\tZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20u\n+\tYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+CgkJCQk8cmVh\n+\tbD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8\n+\tL2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJ\n+\tCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBw\n+\tbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50\n+\tZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxTY2FsaW5nPC9rZXk+Cgk8ZGljdD4K\n+\tCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJp\n+\tbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsU2Nh\n+\tbGluZzwva2V5PgoJCQkJPHJlYWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0\n+\tLm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRl\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJ\n+\tCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2Rp\n+\tY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5zdWJUaWNrZXQucGFwZXJfaW5mb190aWNr\n+\tZXQ8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQu\n+\tUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxl\n+\tLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuaXRlbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+\n+\tCgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAu\n+\tMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3Jl\n+\tYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu\n+\tY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2Vy\n+\tPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8\n+\tL2tleT4KCQkJCQk8ZGF0ZT4yMDA1LTAzLTA1VDA0OjEwOjM3WjwvZGF0ZT4KCQkJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGlu\n+\tdGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+\n+\tCgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJS\n+\tZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j\n+\tcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwv\n+\tc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRlbUFycmF5PC9r\n+\tZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCQkJCTxhcnJheT4K\n+\tCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJ\n+\tCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJy\n+\tYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJ\n+\tCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJ\n+\tCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRh\n+\tdGU+MjAwNS0wMy0wNVQwNDoxMDozN1o8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVn\n+\tZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5QTVBhcGVyTmFtZTwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJO\n+\tYW1lPC9rZXk+CgkJCQkJPHN0cmluZz5uYS1sZXR0ZXI8L3N0cmluZz4KCQkJCQk8a2V5\n+\tPmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5j\n+\tb20uYXBwbGUucHJpbnQucG0uUG9zdFNjcmlwdDwvc3RyaW5nPgoJCQkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMC0w\n+\tNy0yOFQyMjo1NzowNFo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjE8L2ludGVnZXI+CgkJCQk8\n+\tL2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mby5QTVVuYWRqdXN0ZWRQYWdlUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1\n+\tc3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3Jl\n+\tYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJ\n+\tCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBw\n+\tbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4\n+\tOjU0WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVG\n+\tbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJ\n+\tPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZv\n+\tLlBNVW5hZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBs\n+\tZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhcGVy\n+\tUmVjdDwva2V5PgoJCQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJ\n+\tCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJl\n+\tYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJyYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMy0wMS0yNFQxNjoyODo1NFo8L2Rh\n+\tdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5\n+\tPgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+\n+\tCgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1Q\n+\tYXBlck5hbWU8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9z\n+\tdFNjcmlwdDwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRl\n+\tbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3Ry\n+\taW5nPkxldHRlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0\n+\tU2NyaXB0PC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1v\n+\tZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAwLTA3LTI4VDIyOjU3OjA0WjwvZGF0ZT4K\n+\tCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJ\n+\tCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8\n+\tL2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tl\n+\teT4KCQk8c3RyaW5nPjAwLjIwPC9zdHJpbmc+CgkJPGtleT5jb20uYXBwbGUucHJpbnQu\n+\tdGlja2V0LnByaXZhdGVMb2NrPC9rZXk+CgkJPGZhbHNlLz4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQudHlwZTwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mb1RpY2tldDwvc3RyaW5nPgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tleT4KCTxzdHJpbmc+MDAuMjA8L3N0cmlu\n+\tZz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5wcml2YXRlTG9jazwva2V5PgoJ\n+\tPGZhbHNlLz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50eXBlPC9rZXk+Cgk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0VGlja2V0PC9zdHJpbmc+Cjwv\n+\tZGljdD4KPC9wbGlzdD4KhpKEmZkPTlNQcmludEFsbFBhZ2VzhpKgkoSZmQtOU1BhcGVy\n+\tTmFtZYaShJmZBkxldHRlcoaShJmZFU5TSG9yaXpvbmFsUGFnaW5hdGlvboaShKGbopcA\n+\thpKEmZkWTlNIb3Jpem9udGFsbHlDZW50ZXJlZIaSppKEmZkJTlNQcmludGVyhpKEhIQJ\n+\tTlNQcmludGVyAJSShJmZDkludGVybmFsIE1vZGVthoaShJmZCE5TQ29waWVzhpKEoZui\n+\tlwGGkoSZmQ9OU1NjYWxpbmdGYWN0b3KGkoShm4SEAWahAYaShJmZDU5TUmlnaHRNYXJn\n+\taW6GkoShm7ihAIaShJmZDk5TQm90dG9tTWFyZ2luhpKEoZu4oQCGkoSZmQxOU0xlZnRN\n+\tYXJnaW6GkoShm7ihAIaShJmZC05TVG9wTWFyZ2luhpKEoZu4oQCGkoSZmQpOU0xhc3RQ\n+\tYWdlhpKEoZuil4J/////hpKEmZkLTlNGaXJzdFBhZ2WGkoShm6KXAYaShJmZDU5TT3Jp\n+\tZW50YXRpb26GkoShm6KXAIaGhg==\n+\t</data>\n+\t<key>ReadOnly</key>\n+\t<string>NO</string>\n+\t<key>RowAlign</key>\n+\t<integer>1</integer>\n+\t<key>RowSpacing</key>\n+\t<real>36</real>\n+\t<key>SheetTitle</key>\n+\t<string>Canvas 1</string>\n+\t<key>SmartAlignmentGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>SmartDistanceGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>UseEntirePage</key>\n+\t<true/>\n+\t<key>VPages</key>\n+\t<integer>1</integer>\n+\t<key>WindowInfo</key>\n+\t<dict>\n+\t\t<key>CurrentSheet</key>\n+\t\t<string>0</string>\n+\t\t<key>Frame</key>\n+\t\t<string>{{224, -5}, {591, 832}}</string>\n+\t\t<key>ShowRuler</key>\n+\t\t<false/>\n+\t\t<key>ShowStatusBar</key>\n+\t\t<true/>\n+\t\t<key>VisibleRegion</key>\n+\t\t<string>{{0, 0}, {576, 734}}</string>\n+\t\t<key>Zoom</key>\n+\t\t<string>1</string>\n+\t</dict>\n+</dict>\n+</plist>"},{"sha":"4a61f05d2d6001a10cc61df0a82f0b7e23f27d62","filename":"1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/embedded-coll.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e4e8da0c6dc50132a31165311928295066cd7926","filename":"1.2.x/openjpa-project/src/doc/manual/img/enhancement.graffle","status":"added","additions":593,"deletions":0,"changes":593,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/enhancement.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/enhancement.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/enhancement.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,593 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CanvasColor</key>\n+\t<dict>\n+\t\t<key>w</key>\n+\t\t<string>1</string>\n+\t</dict>\n+\t<key>ColumnAlign</key>\n+\t<integer>0</integer>\n+\t<key>ColumnSpacing</key>\n+\t<real>36</real>\n+\t<key>GraphDocumentVersion</key>\n+\t<integer>4</integer>\n+\t<key>GraphicsList</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>11</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>16</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{445.583, 80.9999}</string>\n+\t\t\t\t<string>{445.696, 124.044}</string>\n+\t\t\t\t<string>{328.696, 124.044}</string>\n+\t\t\t\t<string>{319.5, 73.9125}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>12</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>12</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>15</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{369, 49.5}</string>\n+\t\t\t\t<string>{405, 49.5}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>11</integer>\n+\t\t\t\t<key>Info</key>\n+\t\t\t\t<integer>3</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>11</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>14</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{234, 49.5}</string>\n+\t\t\t\t<string>{270, 49.5}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>10</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>10</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>13</integer>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{117, 49.5}</string>\n+\t\t\t\t<string>{153, 49.5}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>9</integer>\n+\t\t\t\t<key>Info</key>\n+\t\t\t\t<integer>3</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{405, 18}, {81, 63}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>12</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Circle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>3</integer>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf0 enhancer}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{270, 18}, {99, 63}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>11</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>DocumentShape</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Magazine.class}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{153, 18}, {81, 63}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>10</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Circle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>3</integer>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue0;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 javac/jikes}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{18, 18}, {99, 63}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>9</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>DocumentShape</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.6</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.6</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.6</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Magazine.java}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t</array>\n+\t<key>GridInfo</key>\n+\t<dict>\n+\t\t<key>SnapsToGrid</key>\n+\t\t<string>YES</string>\n+\t</dict>\n+\t<key>GuidesLocked</key>\n+\t<string>NO</string>\n+\t<key>GuidesVisible</key>\n+\t<string>YES</string>\n+\t<key>HPages</key>\n+\t<integer>1</integer>\n+\t<key>ImageCounter</key>\n+\t<integer>1</integer>\n+\t<key>IsPalette</key>\n+\t<string>NO</string>\n+\t<key>Layers</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Lock</key>\n+\t\t\t<string>NO</string>\n+\t\t\t<key>Name</key>\n+\t\t\t<string>Layer 1</string>\n+\t\t\t<key>Print</key>\n+\t\t\t<string>YES</string>\n+\t\t\t<key>View</key>\n+\t\t\t<string>YES</string>\n+\t\t</dict>\n+\t</array>\n+\t<key>LayoutInfo</key>\n+\t<dict>\n+\t\t<key>ChildOrdering</key>\n+\t\t<integer>0</integer>\n+\t</dict>\n+\t<key>LinksVisible</key>\n+\t<string>NO</string>\n+\t<key>MagnetsVisible</key>\n+\t<string>NO</string>\n+\t<key>Orientation</key>\n+\t<integer>2</integer>\n+\t<key>PageBreaks</key>\n+\t<string>YES</string>\n+\t<key>PageSetup</key>\n+\t<data>\n+\tBAt0eXBlZHN0cmVhbYED6IQBQISEhAtOU1ByaW50SW5mbwGEhAhOU09iamVjdACFkoSE\n+\thBNOU011dGFibGVEaWN0aW9uYXJ5AISEDE5TRGljdGlvbmFyeQCUhAFpFJKEhIQITlNT\n+\tdHJpbmcBlIQBKxBOU0pvYkRpc3Bvc2l0aW9uhpKEmZkPTlNQcmludFNwb29sSm9ihpKE\n+\tmZkLTlNQYXBlclNpemWGkoSEhAdOU1ZhbHVlAJSEASqEhAx7X05TU2l6ZT1mZn2cgQJk\n+\tgQMYhpKEmZkZTlNQcmludFJldmVyc2VPcmllbnRhdGlvboaShISECE5TTnVtYmVyAJ2b\n+\thJeXAIaShJmZFE5TVmVydGljYWxQYWdpbmF0aW9uhpKEoZuilwCGkoSZmRROU1ZlcnRp\n+\tY2FsbHlDZW50ZXJlZIaShKGbopcBhpKEmZkOTlNQTVBhZ2VGb3JtYXSGkoSEhAZOU0Rh\n+\tdGEAlJeBHa2EB1s3NTk3Y108P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYt\n+\tOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZSBDb21wdXRlci8vRFRE\n+\tIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5\n+\tTGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUhvcml6b250YWxSZXM8L2tleT4KCTxk\n+\taWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ\n+\tPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJ\n+\tPGRpY3Q+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpv\n+\tbnRhbFJlczwva2V5PgoJCQkJPHJlYWw+NzI8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5w\n+\tcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAzLTAyLTI1VDIxOjMwOjA3Wjwv\n+\tZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tl\n+\teT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8L2FycmF5PgoJ\n+\tPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVudGF0\n+\taW9uPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl\n+\tYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3Ry\n+\taW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4K\n+\tCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZv\n+\tcm1hdC5QTU9yaWVudGF0aW9uPC9rZXk+CgkJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJPHN0\n+\tcmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQk8a2V5PmNv\n+\tbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+MjAwMy0w\n+\tMi0yNVQyMTozMDowN1o8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2Rp\n+\tY3Q+CgkJPC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VG\n+\tb3JtYXQuUE1TY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmlu\n+\tdC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5n\n+\tbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVt\n+\tQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8L2tleT4KCQkJCTxyZWFsPjE8L3JlYWw+\n+\tCgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAz\n+\tLTAyLTI1VDIxOjMwOjA3WjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwv\n+\tZGljdD4KCQk8L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFn\n+\tZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20u\n+\tYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+CgkJCQk8cmVh\n+\tbD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8\n+\tL2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJ\n+\tCTxkYXRlPjIwMDMtMDItMjVUMjE6MzA6MDdaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBw\n+\tbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50\n+\tZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxTY2FsaW5nPC9rZXk+Cgk8ZGljdD4K\n+\tCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJp\n+\tbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsU2Nh\n+\tbGluZzwva2V5PgoJCQkJPHJlYWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0\n+\tLm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDMtMDItMjVUMjE6MzA6MDdaPC9kYXRl\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJ\n+\tCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2Rp\n+\tY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5zdWJUaWNrZXQucGFwZXJfaW5mb190aWNr\n+\tZXQ8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQu\n+\tUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxl\n+\tLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuaXRlbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+\n+\tCgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAu\n+\tMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3Jl\n+\tYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu\n+\tY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2Vy\n+\tPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8\n+\tL2tleT4KCQkJCQk8ZGF0ZT4yMDA1LTAyLTExVDA4OjE3OjI1WjwvZGF0ZT4KCQkJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGlu\n+\tdGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+\n+\tCgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJS\n+\tZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j\n+\tcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwv\n+\tc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRlbUFycmF5PC9r\n+\tZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCQkJCTxhcnJheT4K\n+\tCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJ\n+\tCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJy\n+\tYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJ\n+\tCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJ\n+\tCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRh\n+\tdGU+MjAwNS0wMi0xMVQwODoxNzoyNVo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVn\n+\tZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5QTVBhcGVyTmFtZTwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJO\n+\tYW1lPC9rZXk+CgkJCQkJPHN0cmluZz5uYS1sZXR0ZXI8L3N0cmluZz4KCQkJCQk8a2V5\n+\tPmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5j\n+\tb20uYXBwbGUucHJpbnQucG0uUG9zdFNjcmlwdDwvc3RyaW5nPgoJCQkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMC0w\n+\tNy0yOFQyMjo1NzowNFo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjE8L2ludGVnZXI+CgkJCQk8\n+\tL2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mby5QTVVuYWRqdXN0ZWRQYWdlUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1\n+\tc3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3Jl\n+\tYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJ\n+\tCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBw\n+\tbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAzLTAyLTI1VDIxOjMw\n+\tOjA3WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVG\n+\tbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJ\n+\tPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZv\n+\tLlBNVW5hZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBs\n+\tZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhcGVy\n+\tUmVjdDwva2V5PgoJCQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJ\n+\tCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJl\n+\tYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJyYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMy0wMi0yNVQyMTozMDowN1o8L2Rh\n+\tdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5\n+\tPgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+\n+\tCgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1Q\n+\tYXBlck5hbWU8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9z\n+\tdFNjcmlwdDwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRl\n+\tbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3Ry\n+\taW5nPkxldHRlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0\n+\tU2NyaXB0PC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1v\n+\tZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAwLTA3LTI4VDIyOjU3OjA0WjwvZGF0ZT4K\n+\tCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJ\n+\tCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8\n+\tL2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tl\n+\teT4KCQk8c3RyaW5nPjAwLjIwPC9zdHJpbmc+CgkJPGtleT5jb20uYXBwbGUucHJpbnQu\n+\tdGlja2V0LnByaXZhdGVMb2NrPC9rZXk+CgkJPGZhbHNlLz4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQudHlwZTwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mb1RpY2tldDwvc3RyaW5nPgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tleT4KCTxzdHJpbmc+MDAuMjA8L3N0cmlu\n+\tZz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5wcml2YXRlTG9jazwva2V5PgoJ\n+\tPGZhbHNlLz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50eXBlPC9rZXk+Cgk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0VGlja2V0PC9zdHJpbmc+Cjwv\n+\tZGljdD4KPC9wbGlzdD4KhpKEmZkPTlNQcmludEFsbFBhZ2VzhpKgkoSZmQtOU1BhcGVy\n+\tTmFtZYaShJmZCW5hLWxldHRlcoaShJmZFU5TSG9yaXpvbmFsUGFnaW5hdGlvboaShKGb\n+\topcAhpKEmZkWTlNIb3Jpem9udGFsbHlDZW50ZXJlZIaSppKEmZkJTlNQcmludGVyhpKE\n+\thIQJTlNQcmludGVyAJSShJmZASCGhpKEmZkITlNDb3BpZXOGkoShm6KXAYaShJmZD05T\n+\tU2NhbGluZ0ZhY3RvcoaShKGbhIQBZqEBhpKEmZkNTlNSaWdodE1hcmdpboaShKGbuKEk\n+\thpKEmZkOTlNCb3R0b21NYXJnaW6GkoShm7ihJIaShJmZDE5TTGVmdE1hcmdpboaShKGb\n+\tuKEkhpKEmZkLTlNUb3BNYXJnaW6GkoShm7ihJIaShJmZCk5TTGFzdFBhZ2WGkoShm6KX\n+\tgn////+GkoSZmQtOU0ZpcnN0UGFnZYaShKGbopcBhpKEmZkNTlNPcmllbnRhdGlvboaS\n+\thKGbopcAhoaG\n+\t</data>\n+\t<key>ReadOnly</key>\n+\t<string>NO</string>\n+\t<key>RowAlign</key>\n+\t<integer>0</integer>\n+\t<key>RowSpacing</key>\n+\t<real>36</real>\n+\t<key>SheetTitle</key>\n+\t<string>Canvas 1</string>\n+\t<key>SmartAlignmentGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>SmartDistanceGuidesActive</key>\n+\t<string>NO</string>\n+\t<key>UseEntirePage</key>\n+\t<false/>\n+\t<key>VPages</key>\n+\t<integer>1</integer>\n+\t<key>WindowInfo</key>\n+\t<dict>\n+\t\t<key>CurrentSheet</key>\n+\t\t<string>0</string>\n+\t\t<key>Frame</key>\n+\t\t<string>{{246, -69}, {555, 797}}</string>\n+\t\t<key>ShowRuler</key>\n+\t\t<false/>\n+\t\t<key>ShowStatusBar</key>\n+\t\t<true/>\n+\t\t<key>VisibleRegion</key>\n+\t\t<string>{{0, 1}, {540, 699}}</string>\n+\t\t<key>Zoom</key>\n+\t\t<string>1</string>\n+\t</dict>\n+</dict>\n+</plist>"},{"sha":"4cdd7dfdcc33125a9c609cb5f3718872bad5720b","filename":"1.2.x/openjpa-project/src/doc/manual/img/enhancement.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/enhancement.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/enhancement.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/enhancement.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3c8143152c8c4f4359463dea7a525533ecd82495","filename":"1.2.x/openjpa-project/src/doc/manual/img/entitymanager.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/entitymanager.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/entitymanager.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/entitymanager.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"65e7e43a8e04cd1897ec924b9d28d6b5a88a7afe","filename":"1.2.x/openjpa-project/src/doc/manual/img/entitymanagerfactory.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/entitymanagerfactory.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/entitymanagerfactory.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/entitymanagerfactory.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"99680bf8f76d8d1ceb9af325ad85bc1e98f62144","filename":"1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.graffle","status":"added","additions":556,"deletions":0,"changes":556,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,556 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CanvasColor</key>\n+\t<dict>\n+\t\t<key>w</key>\n+\t\t<string>1</string>\n+\t</dict>\n+\t<key>ColumnAlign</key>\n+\t<integer>1</integer>\n+\t<key>ColumnSpacing</key>\n+\t<real>36</real>\n+\t<key>GraphDocumentVersion</key>\n+\t<integer>4</integer>\n+\t<key>GraphicsList</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>75</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>80</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{81, 432}</string>\n+\t\t\t\t<string>{81, 390}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>Arrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>78</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>77</integer>\n+\t\t\t\t<key>Position</key>\n+\t\t\t\t<real>0.90594518184661865</real>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>79</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>2</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{126, 439.143}</string>\n+\t\t\t\t<string>{144, 433}</string>\n+\t\t\t\t<string>{156.127, 409.5}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>78</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{36, 432}, {90, 45}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>78</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Rectangle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Lifetime\\\n+Subscription}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>Head</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>76</integer>\n+\t\t\t</dict>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>77</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>6</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{126, 383.056}</string>\n+\t\t\t\t<string>{162, 409.5}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Tail</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>ID</key>\n+\t\t\t\t<integer>75</integer>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{162, 378}, {81, 63}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>76</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Cylinder</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;\\f1\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs20 \\cf0 \\ul \\ulc0 CNTRCT.\\\n+SUB\\\n+\n+\\f1\\b0 \\ulnone ID: BIGINT}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{36, 345}, {90, 45}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>75</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Rectangle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Subscription}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{27, 324}, {225, 162}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>74</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Rectangle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>a</key>\n+\t\t\t\t\t\t<string>0.2</string>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.4</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Align</key>\n+\t\t\t\t<integer>0</integer>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\b\\fs24 \\cf2 org.mag.subscribe}</string>\n+\t\t\t</dict>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t</array>\n+\t<key>GridInfo</key>\n+\t<dict>\n+\t\t<key>ShowsGrid</key>\n+\t\t<string>YES</string>\n+\t\t<key>SnapsToGrid</key>\n+\t\t<string>YES</string>\n+\t</dict>\n+\t<key>GuidesLocked</key>\n+\t<string>NO</string>\n+\t<key>GuidesVisible</key>\n+\t<string>YES</string>\n+\t<key>HPages</key>\n+\t<integer>1</integer>\n+\t<key>ImageCounter</key>\n+\t<integer>1</integer>\n+\t<key>IsPalette</key>\n+\t<string>NO</string>\n+\t<key>Layers</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Lock</key>\n+\t\t\t<string>NO</string>\n+\t\t\t<key>Name</key>\n+\t\t\t<string>Layer 1</string>\n+\t\t\t<key>Print</key>\n+\t\t\t<string>YES</string>\n+\t\t\t<key>View</key>\n+\t\t\t<string>YES</string>\n+\t\t</dict>\n+\t</array>\n+\t<key>LayoutInfo</key>\n+\t<dict>\n+\t\t<key>ChildOrdering</key>\n+\t\t<integer>0</integer>\n+\t</dict>\n+\t<key>LinksVisible</key>\n+\t<string>NO</string>\n+\t<key>MagnetsVisible</key>\n+\t<string>NO</string>\n+\t<key>Orientation</key>\n+\t<integer>2</integer>\n+\t<key>PageBreaks</key>\n+\t<string>YES</string>\n+\t<key>PageSetup</key>\n+\t<data>\n+\tBAt0eXBlZHN0cmVhbYED6IQBQISEhAtOU1ByaW50SW5mbwGEhAhOU09iamVjdACFkoSE\n+\thBNOU011dGFibGVEaWN0aW9uYXJ5AISEDE5TRGljdGlvbmFyeQCUhAFpFJKEhIQITlNT\n+\tdHJpbmcBlIQBKxBOU0pvYkRpc3Bvc2l0aW9uhpKEmZkPTlNQcmludFNwb29sSm9ihpKE\n+\tmZkLTlNQYXBlclNpemWGkoSEhAdOU1ZhbHVlAJSEASqEhAx7X05TU2l6ZT1mZn2cgQJk\n+\tgQMYhpKEmZkZTlNQcmludFJldmVyc2VPcmllbnRhdGlvboaShISECE5TTnVtYmVyAJ2b\n+\thJeXAIaShJmZFE5TVmVydGljYWxQYWdpbmF0aW9uhpKEoZuilwCGkoSZmRROU1ZlcnRp\n+\tY2FsbHlDZW50ZXJlZIaShKGbopcBhpKEmZkOTlNQTVBhZ2VGb3JtYXSGkoSEhAZOU0Rh\n+\tdGEAlJeBHa2EB1s3NTk3Y108P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYt\n+\tOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZSBDb21wdXRlci8vRFRE\n+\tIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5\n+\tTGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUhvcml6b250YWxSZXM8L2tleT4KCTxk\n+\taWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ\n+\tPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJ\n+\tPGRpY3Q+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpv\n+\tbnRhbFJlczwva2V5PgoJCQkJPHJlYWw+NzI8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5w\n+\tcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4OjU0Wjwv\n+\tZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tl\n+\teT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8L2FycmF5PgoJ\n+\tPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVudGF0\n+\taW9uPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl\n+\tYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3Ry\n+\taW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4K\n+\tCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZv\n+\tcm1hdC5QTU9yaWVudGF0aW9uPC9rZXk+CgkJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJPHN0\n+\tcmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQk8a2V5PmNv\n+\tbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+MjAwMy0w\n+\tMS0yNFQxNjoyODo1NFo8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2Rp\n+\tY3Q+CgkJPC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VG\n+\tb3JtYXQuUE1TY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmlu\n+\tdC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5n\n+\tbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVt\n+\tQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8L2tleT4KCQkJCTxyZWFsPjE8L3JlYWw+\n+\tCgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAz\n+\tLTAxLTI0VDE2OjI4OjU0WjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwv\n+\tZGljdD4KCQk8L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFn\n+\tZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20u\n+\tYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+CgkJCQk8cmVh\n+\tbD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8\n+\tL2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJ\n+\tCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBw\n+\tbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50\n+\tZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxTY2FsaW5nPC9rZXk+Cgk8ZGljdD4K\n+\tCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJp\n+\tbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsU2Nh\n+\tbGluZzwva2V5PgoJCQkJPHJlYWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0\n+\tLm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRl\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJ\n+\tCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2Rp\n+\tY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5zdWJUaWNrZXQucGFwZXJfaW5mb190aWNr\n+\tZXQ8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQu\n+\tUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxl\n+\tLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuaXRlbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+\n+\tCgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAu\n+\tMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3Jl\n+\tYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu\n+\tY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2Vy\n+\tPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8\n+\tL2tleT4KCQkJCQk8ZGF0ZT4yMDA1LTAzLTAxVDA3OjUyOjQ3WjwvZGF0ZT4KCQkJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGlu\n+\tdGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+\n+\tCgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJS\n+\tZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j\n+\tcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwv\n+\tc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRlbUFycmF5PC9r\n+\tZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCQkJCTxhcnJheT4K\n+\tCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJ\n+\tCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJy\n+\tYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJ\n+\tCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJ\n+\tCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRh\n+\tdGU+MjAwNS0wMy0wMVQwNzo1Mjo0N1o8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVn\n+\tZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5QTVBhcGVyTmFtZTwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJO\n+\tYW1lPC9rZXk+CgkJCQkJPHN0cmluZz5uYS1sZXR0ZXI8L3N0cmluZz4KCQkJCQk8a2V5\n+\tPmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5j\n+\tb20uYXBwbGUucHJpbnQucG0uUG9zdFNjcmlwdDwvc3RyaW5nPgoJCQkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMC0w\n+\tNy0yOFQyMjo1NzowNFo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjE8L2ludGVnZXI+CgkJCQk8\n+\tL2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mby5QTVVuYWRqdXN0ZWRQYWdlUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1\n+\tc3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3Jl\n+\tYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJ\n+\tCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBw\n+\tbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4\n+\tOjU0WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVG\n+\tbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJ\n+\tPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZv\n+\tLlBNVW5hZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBs\n+\tZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhcGVy\n+\tUmVjdDwva2V5PgoJCQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJ\n+\tCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJl\n+\tYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJyYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMy0wMS0yNFQxNjoyODo1NFo8L2Rh\n+\tdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5\n+\tPgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+\n+\tCgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1Q\n+\tYXBlck5hbWU8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9z\n+\tdFNjcmlwdDwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRl\n+\tbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3Ry\n+\taW5nPkxldHRlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0\n+\tU2NyaXB0PC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1v\n+\tZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAwLTA3LTI4VDIyOjU3OjA0WjwvZGF0ZT4K\n+\tCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJ\n+\tCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8\n+\tL2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tl\n+\teT4KCQk8c3RyaW5nPjAwLjIwPC9zdHJpbmc+CgkJPGtleT5jb20uYXBwbGUucHJpbnQu\n+\tdGlja2V0LnByaXZhdGVMb2NrPC9rZXk+CgkJPGZhbHNlLz4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQudHlwZTwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mb1RpY2tldDwvc3RyaW5nPgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tleT4KCTxzdHJpbmc+MDAuMjA8L3N0cmlu\n+\tZz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5wcml2YXRlTG9jazwva2V5PgoJ\n+\tPGZhbHNlLz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50eXBlPC9rZXk+Cgk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0VGlja2V0PC9zdHJpbmc+Cjwv\n+\tZGljdD4KPC9wbGlzdD4KhpKEmZkPTlNQcmludEFsbFBhZ2VzhpKgkoSZmQtOU1BhcGVy\n+\tTmFtZYaShJmZBkxldHRlcoaShJmZFU5TSG9yaXpvbmFsUGFnaW5hdGlvboaShKGbopcA\n+\thpKEmZkWTlNIb3Jpem9udGFsbHlDZW50ZXJlZIaSppKEmZkJTlNQcmludGVyhpKEhIQJ\n+\tTlNQcmludGVyAJSShJmZDkludGVybmFsIE1vZGVthoaShJmZCE5TQ29waWVzhpKEoZui\n+\tlwGGkoSZmQ9OU1NjYWxpbmdGYWN0b3KGkoShm4SEAWahAYaShJmZDU5TUmlnaHRNYXJn\n+\taW6GkoShm7ihAIaShJmZDk5TQm90dG9tTWFyZ2luhpKEoZu4oQCGkoSZmQxOU0xlZnRN\n+\tYXJnaW6GkoShm7ihAIaShJmZC05TVG9wTWFyZ2luhpKEoZu4oQCGkoSZmQpOU0xhc3RQ\n+\tYWdlhpKEoZuil4J/////hpKEmZkLTlNGaXJzdFBhZ2WGkoShm6KXAYaShJmZDU5TT3Jp\n+\tZW50YXRpb26GkoShm6KXAIaGhg==\n+\t</data>\n+\t<key>ReadOnly</key>\n+\t<string>NO</string>\n+\t<key>RowAlign</key>\n+\t<integer>1</integer>\n+\t<key>RowSpacing</key>\n+\t<real>36</real>\n+\t<key>SheetTitle</key>\n+\t<string>Canvas 1</string>\n+\t<key>SmartAlignmentGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>SmartDistanceGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>UseEntirePage</key>\n+\t<true/>\n+\t<key>VPages</key>\n+\t<integer>1</integer>\n+\t<key>WindowInfo</key>\n+\t<dict>\n+\t\t<key>CurrentSheet</key>\n+\t\t<string>0</string>\n+\t\t<key>Frame</key>\n+\t\t<string>{{240, -2}, {591, 832}}</string>\n+\t\t<key>ShowRuler</key>\n+\t\t<false/>\n+\t\t<key>ShowStatusBar</key>\n+\t\t<true/>\n+\t\t<key>VisibleRegion</key>\n+\t\t<string>{{0, 0}, {576, 734}}</string>\n+\t\t<key>Zoom</key>\n+\t\t<string>1</string>\n+\t</dict>\n+</dict>\n+</plist>"},{"sha":"112f550261fadd7f0405e707aeb7f954c86f56cf","filename":"1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/inher-superclass-table.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c67d55a5c5de734446c546b1c5ffcbaf97f4d4f3","filename":"1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.graffle","status":"added","additions":655,"deletions":0,"changes":655,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653","patch":"@@ -0,0 +1,655 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>CanvasColor</key>\n+\t<dict>\n+\t\t<key>w</key>\n+\t\t<string>1</string>\n+\t</dict>\n+\t<key>ColumnAlign</key>\n+\t<integer>1</integer>\n+\t<key>ColumnSpacing</key>\n+\t<real>36</real>\n+\t<key>GraphDocumentVersion</key>\n+\t<integer>4</integer>\n+\t<key>GraphicsList</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>7</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{162, 198}</string>\n+\t\t\t\t<string>{198, 198}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{72, 171}, {90, 54}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>6</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{1, 1}</string>\n+\t\t\t\t<string>{1, -1}</string>\n+\t\t\t\t<string>{-1, -1}</string>\n+\t\t\t\t<string>{-1, 1}</string>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Tabloid}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - data: Object\\\n+...}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{72, 72}, {90, 68}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>MultiTextGraphic</string>\n+\t\t\t<key>FitText</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Flow</key>\n+\t\t\t<string>Resize</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>5</integer>\n+\t\t\t<key>ListOrientation</key>\n+\t\t\t<string>Vertical</string>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{1, 1}</string>\n+\t\t\t\t<string>{1, -1}</string>\n+\t\t\t\t<string>{-1, -1}</string>\n+\t\t\t\t<string>{-1, 1}</string>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientCenter</key>\n+\t\t\t\t\t<string>{-0.294118, -0.264706}</string>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.701961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>TextList</key>\n+\t\t\t<array>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs24 \\cf2 Magazine}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Text</key>\n+\t\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\fs24 \\cf0 - isbn: String\\\n+- title: String\\\n+...}</string>\n+\t\t\t\t</dict>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Align</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</array>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>LineGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>4</integer>\n+\t\t\t<key>OrthogonalBarAutomatic</key>\n+\t\t\t<true/>\n+\t\t\t<key>OrthogonalBarPosition</key>\n+\t\t\t<real>-1</real>\n+\t\t\t<key>Points</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{162, 108}</string>\n+\t\t\t\t<string>{198, 108}</string>\n+\t\t\t</array>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>HeadArrow</key>\n+\t\t\t\t\t<string>FilledArrow</string>\n+\t\t\t\t\t<key>LineType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>Pattern</key>\n+\t\t\t\t\t<integer>1</integer>\n+\t\t\t\t\t<key>TailArrow</key>\n+\t\t\t\t\t<string>0</string>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{198, 164.5}, {99, 81}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>3</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Cylinder</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;\\f1\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs20 \\cf0 \\ul \\ulc0 TABLOID\\\n+\n+\\f1\\b0 \\ulnone ISBN: VARCHAR\\\n+TITLE: VARCHAR\\\n+...\\\n+TAB_DATA: BLOB}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{198, 72.5}, {99, 62.5}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>2</integer>\n+\t\t\t<key>Magnets</key>\n+\t\t\t<array>\n+\t\t\t\t<string>{0, 1}</string>\n+\t\t\t\t<string>{0, -1}</string>\n+\t\t\t\t<string>{1, 0}</string>\n+\t\t\t\t<string>{-1, 0}</string>\n+\t\t\t</array>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Cylinder</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>FillType</key>\n+\t\t\t\t\t<integer>2</integer>\n+\t\t\t\t\t<key>GradientAngle</key>\n+\t\t\t\t\t<real>304</real>\n+\t\t\t\t\t<key>GradientColor</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>0</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>0.501961</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t\t<key>stroke</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Cap</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t\t<key>Join</key>\n+\t\t\t\t\t<integer>0</integer>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;\\f1\\fswiss\\fcharset77 Helvetica;}\n+{\\colortbl;\\red255\\green255\\blue255;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\qc\n+\n+\\f0\\b\\fs20 \\cf0 \\ul \\ulc0 MAG\\\n+\n+\\f1\\b0 \\ulnone ISBN: VARCHAR\\\n+TITLE: VARCHAR\\\n+...}</string>\n+\t\t\t</dict>\n+\t\t</dict>\n+\t\t<dict>\n+\t\t\t<key>Bounds</key>\n+\t\t\t<string>{{63, 45}, {243, 207}}</string>\n+\t\t\t<key>Class</key>\n+\t\t\t<string>ShapedGraphic</string>\n+\t\t\t<key>ID</key>\n+\t\t\t<integer>1</integer>\n+\t\t\t<key>Shape</key>\n+\t\t\t<string>Rectangle</string>\n+\t\t\t<key>Style</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>fill</key>\n+\t\t\t\t<dict>\n+\t\t\t\t\t<key>Color</key>\n+\t\t\t\t\t<dict>\n+\t\t\t\t\t\t<key>a</key>\n+\t\t\t\t\t\t<string>0.2</string>\n+\t\t\t\t\t\t<key>b</key>\n+\t\t\t\t\t\t<string>0.4</string>\n+\t\t\t\t\t\t<key>g</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t\t<key>r</key>\n+\t\t\t\t\t\t<string>1</string>\n+\t\t\t\t\t</dict>\n+\t\t\t\t</dict>\n+\t\t\t</dict>\n+\t\t\t<key>Text</key>\n+\t\t\t<dict>\n+\t\t\t\t<key>Align</key>\n+\t\t\t\t<integer>0</integer>\n+\t\t\t\t<key>Text</key>\n+\t\t\t\t<string>{\\rtf1\\mac\\ansicpg10000\\cocoartf102\n+{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n+{\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue128;}\n+\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n+\n+\\f0\\b\\fs24 \\cf2 org.mag}</string>\n+\t\t\t</dict>\n+\t\t\t<key>TextPlacement</key>\n+\t\t\t<integer>0</integer>\n+\t\t</dict>\n+\t</array>\n+\t<key>GridInfo</key>\n+\t<dict>\n+\t\t<key>ShowsGrid</key>\n+\t\t<string>YES</string>\n+\t\t<key>SnapsToGrid</key>\n+\t\t<string>YES</string>\n+\t</dict>\n+\t<key>GuidesLocked</key>\n+\t<string>NO</string>\n+\t<key>GuidesVisible</key>\n+\t<string>YES</string>\n+\t<key>HPages</key>\n+\t<integer>1</integer>\n+\t<key>ImageCounter</key>\n+\t<integer>1</integer>\n+\t<key>IsPalette</key>\n+\t<string>NO</string>\n+\t<key>Layers</key>\n+\t<array>\n+\t\t<dict>\n+\t\t\t<key>Lock</key>\n+\t\t\t<string>NO</string>\n+\t\t\t<key>Name</key>\n+\t\t\t<string>Layer 1</string>\n+\t\t\t<key>Print</key>\n+\t\t\t<string>YES</string>\n+\t\t\t<key>View</key>\n+\t\t\t<string>YES</string>\n+\t\t</dict>\n+\t</array>\n+\t<key>LayoutInfo</key>\n+\t<dict>\n+\t\t<key>ChildOrdering</key>\n+\t\t<integer>0</integer>\n+\t</dict>\n+\t<key>LinksVisible</key>\n+\t<string>NO</string>\n+\t<key>MagnetsVisible</key>\n+\t<string>NO</string>\n+\t<key>ModificationDate</key>\n+\t<string>2005-09-26 11:52:17 -0500</string>\n+\t<key>Modifier</key>\n+\t<string>Abe White</string>\n+\t<key>Orientation</key>\n+\t<integer>2</integer>\n+\t<key>PageBreaks</key>\n+\t<string>YES</string>\n+\t<key>PageSetup</key>\n+\t<data>\n+\tBAt0eXBlZHN0cmVhbYED6IQBQISEhAtOU1ByaW50SW5mbwGEhAhOU09iamVjdACFkoSE\n+\thBNOU011dGFibGVEaWN0aW9uYXJ5AISEDE5TRGljdGlvbmFyeQCUhAFpFJKEhIQITlNT\n+\tdHJpbmcBlIQBKxBOU0pvYkRpc3Bvc2l0aW9uhpKEmZkPTlNQcmludFNwb29sSm9ihpKE\n+\tmZkLTlNQYXBlclNpemWGkoSEhAdOU1ZhbHVlAJSEASqEhAx7X05TU2l6ZT1mZn2cgQJk\n+\tgQMYhpKEmZkZTlNQcmludFJldmVyc2VPcmllbnRhdGlvboaShISECE5TTnVtYmVyAJ2b\n+\thJeXAIaShJmZFE5TVmVydGljYWxQYWdpbmF0aW9uhpKEoZuilwCGkoSZmRROU1ZlcnRp\n+\tY2FsbHlDZW50ZXJlZIaShKGbopcBhpKEmZkOTlNQTVBhZ2VGb3JtYXSGkoSEhAZOU0Rh\n+\tdGEAlJeBHa2EB1s3NTk3Y108P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYt\n+\tOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZSBDb21wdXRlci8vRFRE\n+\tIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5\n+\tTGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUhvcml6b250YWxSZXM8L2tleT4KCTxk\n+\taWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ\n+\tPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j\n+\tb20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJ\n+\tPGRpY3Q+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpv\n+\tbnRhbFJlczwva2V5PgoJCQkJPHJlYWw+NzI8L3JlYWw+CgkJCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5w\n+\tcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4OjU0Wjwv\n+\tZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tl\n+\teT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8L2FycmF5PgoJ\n+\tPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTU9yaWVudGF0\n+\taW9uPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl\n+\tYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3Ry\n+\taW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4K\n+\tCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZv\n+\tcm1hdC5QTU9yaWVudGF0aW9uPC9rZXk+CgkJCQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJPHN0\n+\tcmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQk8a2V5PmNv\n+\tbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+MjAwMy0w\n+\tMS0yNFQxNjoyODo1NFo8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2Rp\n+\tY3Q+CgkJPC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VG\n+\tb3JtYXQuUE1TY2FsaW5nPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5wcmlu\n+\tdC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5n\n+\tbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVt\n+\tQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8L2tleT4KCQkJCTxyZWFsPjE8L3JlYWw+\n+\tCgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDAz\n+\tLTAxLTI0VDE2OjI4OjU0WjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRp\n+\tY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwv\n+\tZGljdD4KCQk8L2FycmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFn\n+\tZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+Cgk8ZGljdD4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0PgoJCQkJPGtleT5jb20u\n+\tYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsUmVzPC9rZXk+CgkJCQk8cmVh\n+\tbD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8\n+\tL2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5n\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJ\n+\tCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBw\n+\tbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50\n+\tZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2RpY3Q+Cgk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxTY2FsaW5nPC9rZXk+Cgk8ZGljdD4K\n+\tCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCTxzdHJp\n+\tbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQk8YXJyYXk+CgkJCTxkaWN0\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVZlcnRpY2FsU2Nh\n+\tbGluZzwva2V5PgoJCQkJPHJlYWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0\n+\tLm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDMtMDEtMjRUMTY6Mjg6NTRaPC9kYXRl\n+\tPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJ\n+\tCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8L2Rp\n+\tY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5zdWJUaWNrZXQucGFwZXJfaW5mb190aWNr\n+\tZXQ8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQu\n+\tUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxl\n+\tLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnBy\n+\taW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr\n+\tZXQuaXRlbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+\n+\tY29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhZ2VSZWN0PC9rZXk+\n+\tCgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3JlYWw+CgkJCQkJCTxyZWFsPjAu\n+\tMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJCQkJCQk8cmVhbD41NzY8L3Jl\n+\tYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQu\n+\tY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2Vy\n+\tPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8\n+\tL2tleT4KCQkJCQk8ZGF0ZT4yMDA1LTA5LTI2VDE2OjUxOjAwWjwvZGF0ZT4KCQkJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGlu\n+\tdGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+\n+\tCgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJS\n+\tZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j\n+\tcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwv\n+\tc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRlbUFycmF5PC9r\n+\tZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhZ2VGb3JtYXQuUE1BZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCQkJCTxhcnJheT4K\n+\tCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJ\n+\tCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJlYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJy\n+\tYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJ\n+\tCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJ\n+\tCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRh\n+\tdGU+MjAwNS0wOS0yNlQxNjo1MTowMFo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVn\n+\tZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5QTVBhcGVyTmFtZTwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJO\n+\tYW1lPC9rZXk+CgkJCQkJPHN0cmluZz5uYS1sZXR0ZXI8L3N0cmluZz4KCQkJCQk8a2V5\n+\tPmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5j\n+\tb20uYXBwbGUucHJpbnQucG0uUG9zdFNjcmlwdDwvc3RyaW5nPgoJCQkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMC0w\n+\tNy0yOFQyMjo1NzowNFo8L2RhdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LnN0YXRlRmxhZzwva2V5PgoJCQkJCTxpbnRlZ2VyPjE8L2ludGVnZXI+CgkJCQk8\n+\tL2RpY3Q+CgkJCTwvYXJyYXk+CgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mby5QTVVuYWRqdXN0ZWRQYWdlUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8\n+\ta2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5n\n+\tPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29t\n+\tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJ\n+\tPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1\n+\tc3RlZFBhZ2VSZWN0PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4wLjA8L3Jl\n+\tYWw+CgkJCQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+NzM0PC9yZWFsPgoJ\n+\tCQkJCQk8cmVhbD41NzY8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20uYXBw\n+\tbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAzLTAxLTI0VDE2OjI4\n+\tOjU0WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVG\n+\tbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJ\n+\tPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZv\n+\tLlBNVW5hZGp1c3RlZFBhcGVyUmVjdDwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5h\n+\tcHBsZS5wcmludC50aWNrZXQuY3JlYXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBs\n+\tZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnBy\n+\taW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJ\n+\tCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNVW5hZGp1c3RlZFBhcGVy\n+\tUmVjdDwva2V5PgoJCQkJCTxhcnJheT4KCQkJCQkJPHJlYWw+LTE4PC9yZWFsPgoJCQkJ\n+\tCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPjc3NDwvcmVhbD4KCQkJCQkJPHJl\n+\tYWw+NTk0PC9yZWFsPgoJCQkJCTwvYXJyYXk+CgkJCQkJPGtleT5jb20uYXBwbGUucHJp\n+\tbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\taW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5tb2REYXRlPC9rZXk+CgkJCQkJPGRhdGU+MjAwMy0wMS0yNFQxNjoyODo1NFo8L2Rh\n+\tdGU+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxhZzwva2V5\n+\tPgoJCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCQk8L2RpY3Q+CgkJCTwvYXJyYXk+\n+\tCgkJPC9kaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1Q\n+\tYXBlck5hbWU8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlj\n+\ta2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQucG0uUG9z\n+\tdFNjcmlwdDwvc3RyaW5nPgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuaXRl\n+\tbUFycmF5PC9rZXk+CgkJCTxhcnJheT4KCQkJCTxkaWN0PgoJCQkJCTxrZXk+Y29tLmFw\n+\tcGxlLnByaW50LlBhcGVySW5mby5wcGQuUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3Ry\n+\taW5nPkxldHRlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl\n+\tdC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0\n+\tU2NyaXB0PC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1v\n+\tZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDAwLTA3LTI4VDIyOjU3OjA0WjwvZGF0ZT4K\n+\tCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJ\n+\tCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8\n+\tL2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tl\n+\teT4KCQk8c3RyaW5nPjAwLjIwPC9zdHJpbmc+CgkJPGtleT5jb20uYXBwbGUucHJpbnQu\n+\tdGlja2V0LnByaXZhdGVMb2NrPC9rZXk+CgkJPGZhbHNlLz4KCQk8a2V5PmNvbS5hcHBs\n+\tZS5wcmludC50aWNrZXQudHlwZTwva2V5PgoJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50\n+\tLlBhcGVySW5mb1RpY2tldDwvc3RyaW5nPgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUu\n+\tcHJpbnQudGlja2V0LkFQSVZlcnNpb248L2tleT4KCTxzdHJpbmc+MDAuMjA8L3N0cmlu\n+\tZz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5wcml2YXRlTG9jazwva2V5PgoJ\n+\tPGZhbHNlLz4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50eXBlPC9rZXk+Cgk8\n+\tc3RyaW5nPmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0VGlja2V0PC9zdHJpbmc+Cjwv\n+\tZGljdD4KPC9wbGlzdD4KhpKEmZkPTlNQcmludEFsbFBhZ2VzhpKgkoSZmQtOU1BhcGVy\n+\tTmFtZYaShJmZCW5hLWxldHRlcoaShJmZFU5TSG9yaXpvbmFsUGFnaW5hdGlvboaShKGb\n+\topcAhpKEmZkWTlNIb3Jpem9udGFsbHlDZW50ZXJlZIaSppKEmZkJTlNQcmludGVyhpKE\n+\thIQJTlNQcmludGVyAJSShJmZASCGhpKEmZkITlNDb3BpZXOGkoShm6KXAYaShJmZD05T\n+\tU2NhbGluZ0ZhY3RvcoaShKGbhIQBZqEBhpKEmZkNTlNSaWdodE1hcmdpboaShKGbuKEA\n+\thpKEmZkOTlNCb3R0b21NYXJnaW6GkoShm7ihAIaShJmZDE5TTGVmdE1hcmdpboaShKGb\n+\tuKEAhpKEmZkLTlNUb3BNYXJnaW6GkoShm7ihAIaShJmZCk5TTGFzdFBhZ2WGkoShm6KX\n+\tgn////+GkoSZmQtOU0ZpcnN0UGFnZYaShKGbopcBhpKEmZkNTlNPcmllbnRhdGlvboaS\n+\thKGbopcAhoaG\n+\t</data>\n+\t<key>ReadOnly</key>\n+\t<string>NO</string>\n+\t<key>RowAlign</key>\n+\t<integer>1</integer>\n+\t<key>RowSpacing</key>\n+\t<real>36</real>\n+\t<key>SheetTitle</key>\n+\t<string>Canvas 1</string>\n+\t<key>SmartAlignmentGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>SmartDistanceGuidesActive</key>\n+\t<string>YES</string>\n+\t<key>UseEntirePage</key>\n+\t<true/>\n+\t<key>VPages</key>\n+\t<integer>1</integer>\n+\t<key>WindowInfo</key>\n+\t<dict>\n+\t\t<key>CurrentSheet</key>\n+\t\t<string>0</string>\n+\t\t<key>Frame</key>\n+\t\t<string>{{319, -1}, {591, 832}}</string>\n+\t\t<key>ShowRuler</key>\n+\t\t<false/>\n+\t\t<key>ShowStatusBar</key>\n+\t\t<true/>\n+\t\t<key>VisibleRegion</key>\n+\t\t<string>{{0, 0}, {576, 734}}</string>\n+\t\t<key>Zoom</key>\n+\t\t<string>1</string>\n+\t</dict>\n+</dict>\n+</plist>"},{"sha":"d958d821e8cb0d19c65455241fb0ab817aaa7c85","filename":"1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/inher-tpc.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"977a2e84bebfd4e55b4c064c71cf6377dc85641d","filename":"1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.graffle","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"573cead81413b0d3176cf0a663154449e4f9a94e","filename":"1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/inv-key-coll.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bd443a550451f5249d812f719bce418de9fff637","filename":"1.2.x/openjpa-project/src/doc/manual/img/joins-constant.graffle","status":"added","additions":1473,"deletions":0,"changes":1473,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/joins-constant.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/joins-constant.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/joins-constant.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c08d85f66f7c499acbee8d5b4aa9d500e996030f","filename":"1.2.x/openjpa-project/src/doc/manual/img/joins-constant.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/joins-constant.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/joins-constant.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/joins-constant.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3d9bcfda5c7886a5d315d712e259c829bd78e1ac","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-arch.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-arch.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-arch.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-arch.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"aea5c21d56eed369b84b1bad1e3e901fd5779f4d","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-assoc-table.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-assoc-table.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-assoc-table.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-assoc-table.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"72bc727e30030f49dc02793238a027a46804576b","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-basic-field.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-basic-field.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-basic-field.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-basic-field.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"13c378292b2b5625fbf57391c42c1e0565266d40","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-data-featureSelection.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-data-featureSelection.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-data-featureSelection.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-data-featureSelection.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"35e1007674188a8ffe4c7189e0f3dac1f0936706","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-direct-relation.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-direct-relation.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-direct-relation.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-direct-relation.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"dc15dc09051ced33c2a6aea65380d70727f62557","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-discrim-all.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-discrim-all.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-discrim-all.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-discrim-all.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a29c27557017076f8363f0a2dbd8f299044aec0e","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-embedded.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-embedded.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-embedded.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-embedded.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8f5814513ad7297a50ab1de5b39b5140e16c955b","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-exceptions.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-exceptions.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-exceptions.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-exceptions.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f500bc183939ede881ae5aaa2de6b2ad00d283a6","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-all.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-all.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-all.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-all.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"035a1ee832e2f9ecad68b699d683ffc8d62fcffa","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-joined.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-joined.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-joined.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-inher-joined.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c87e5faa8d2f706ad5e1b49fb328ccd5f991e641","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-map.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-map.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-map.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-map.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"08897067106641859a172cdea0b5a2a9120ca3e0","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-mapping-identity.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-mapping-identity.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-mapping-identity.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-mapping-identity.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"17bd132889645742435b97f29e628cda85139772","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-meta-featureSelection.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-meta-featureSelection.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-meta-featureSelection.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-meta-featureSelection.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"535a531ca75d0c430c9ef3296159043e85264674","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-query.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-query.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-query.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-query.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"58800e98ce6617e044bdf17b4973db5e73b80bd5","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-state-transitions.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-state-transitions.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-state-transitions.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-state-transitions.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"abefd5ccb6f2e9853de63cbb7a27ba5918f36a4c","filename":"1.2.x/openjpa-project/src/doc/manual/img/jpa-transaction.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-transaction.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/jpa-transaction.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/jpa-transaction.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"cf7f4fd336bf9a273cc4b7e55eeb4500d50cbb70","filename":"1.2.x/openjpa-project/src/doc/manual/img/persistence.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/persistence.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/persistence.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/persistence.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a992fb42398cce3b239dcc4edb63a0b6f91844dd","filename":"1.2.x/openjpa-project/src/doc/manual/img/secondary-table.graffle","status":"added","additions":568,"deletions":0,"changes":568,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/secondary-table.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/secondary-table.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/secondary-table.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a71b4b443a403aa5f265e0fe5e05b031d749965e","filename":"1.2.x/openjpa-project/src/doc/manual/img/secondary-table.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/secondary-table.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/secondary-table.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/secondary-table.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0db9dcaab8a1859574e695e4c152baa5f7a7a0f8","filename":"1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.graffle","status":"added","additions":574,"deletions":0,"changes":574,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8f78ac0127ef3cdd33f9cf2a76db16cab789fa1b","filename":"1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/sqlquery-featureSelection.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"eeeabac2869f24a74944c4a36815384d9693c2b1","filename":"1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.graffle","status":"added","additions":773,"deletions":0,"changes":773,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.graffle","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.graffle","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.graffle?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0dc8a3809ab50a6b8d4baac53cb0061421b43097","filename":"1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.png","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.png","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/img/string-rel-map.png?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"53e797ae7e6090417c0eb13df10242fdee599874","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_arch.xml","status":"added","additions":310,"deletions":0,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_arch.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_arch.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_arch.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4c25565550e47b104237153737e21177c84961cb","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_conclusion.xml","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_conclusion.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_conclusion.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_conclusion.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e6624ce912085ec1c5fc54d76968d6fdc9ab1380","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_em.xml","status":"added","additions":1061,"deletions":0,"changes":1061,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_em.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_em.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_em.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"2dab5bf6db2c26535fc83d09296812ac10adf12a","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","status":"added","additions":416,"deletions":0,"changes":416,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_emfactory.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"146fcdcd55cf7f555da1e69ba8ba8109c479cfcc","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_intro.xml","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_intro.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_intro.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_intro.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f8c9f656b18beb864a26cce6931de19fe4d5398e","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","status":"added","additions":4820,"deletions":0,"changes":4820,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_mapping.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6efa304595392ba1d936dd4930d0b0ab13f6610a","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_meta.xml","status":"added","additions":3875,"deletions":0,"changes":3875,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_meta.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ada76bc4a97bee565946f8521a56011f549d54a5","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"added","additions":1373,"deletions":0,"changes":1373,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"059799f120ab380de464abaf336728dc52bbecf4","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9a21a71feeb026374294a16b01cbbe5e20047072","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_query.xml","status":"added","additions":3479,"deletions":0,"changes":3479,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_query.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_query.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_query.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9ac334b27bfd3e1b67719d1505cfd87fccf27d26","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_sqlquery.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c444311675c20bec5d5ecc56a8c9970fa0e51c1d","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_trans.xml","status":"added","additions":439,"deletions":0,"changes":439,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_trans.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_trans.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_trans.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fc9314527c24e849ed06bdf7479eae5fd73a11fc","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_overview_why.xml","status":"added","additions":674,"deletions":0,"changes":674,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_why.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_overview_why.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_overview_why.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4bf76643596d659d45aef2bf90fb239c86eae769","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_resources.xml","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_resources.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_resources.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_resources.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e98a62fb0867ed67a4f9678f466363dc6a06942d","filename":"1.2.x/openjpa-project/src/doc/manual/jpa_tutorials.xml","status":"added","additions":1548,"deletions":0,"changes":1548,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_tutorials.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/jpa_tutorials.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/jpa_tutorials.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"26d4988e770dd15149c401ae5f247a3b80bd37bc","filename":"1.2.x/openjpa-project/src/doc/manual/manual-pdf.xsl","status":"added","additions":347,"deletions":0,"changes":347,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual-pdf.xsl","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual-pdf.xsl","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/manual-pdf.xsl?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"73f64f3f7748f3f90347cfd1034a6d09c2d6b0aa","filename":"1.2.x/openjpa-project/src/doc/manual/manual-xhtml-chunk.xsl","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual-xhtml-chunk.xsl","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual-xhtml-chunk.xsl","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/manual-xhtml-chunk.xsl?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8b4e52b20615256b1ce15ef50370f149c40c57a0","filename":"1.2.x/openjpa-project/src/doc/manual/manual-xhtml.xsl","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual-xhtml.xsl","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual-xhtml.xsl","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/manual-xhtml.xsl?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"56f345e367bcdc51d9e0283635ba2f5121c74dd2","filename":"1.2.x/openjpa-project/src/doc/manual/manual.xml","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/manual.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/manual.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"bab425e1df48367054ca7319201650ba12d50d8f","filename":"1.2.x/openjpa-project/src/doc/manual/openjpa_intro.xml","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/openjpa_intro.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/openjpa_intro.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/openjpa_intro.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"eeeef481ceff5dbc5627138aaab42c664bf2e09b","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_caching.xml","status":"added","additions":969,"deletions":0,"changes":969,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_caching.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_caching.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_caching.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e2ec681e5d81e3d19e9bace6e27504271c974b49","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_conf.xml","status":"added","additions":3816,"deletions":0,"changes":3816,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_conf.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_conf.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_conf.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c30123171871d95b7aa46876fdbab86d353c6b29","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"added","additions":4879,"deletions":0,"changes":4879,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3bcf1de7ebc3f6b49d3e7ab44fb39ff674246f54","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_deploy.xml","status":"added","additions":315,"deletions":0,"changes":315,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_deploy.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_deploy.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_deploy.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"a667bcceaf941dc99028a958a510ade635c6bfc0","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_integration.xml","status":"added","additions":492,"deletions":0,"changes":492,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_integration.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_integration.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_integration.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e3f4128633cc4ce0b9cc946db83ecea728381319","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_intro.xml","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_intro.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_intro.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_intro.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1b353c53e4476e614dea818012d7dacd61e31cfc","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_logging.xml","status":"added","additions":548,"deletions":0,"changes":548,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_logging.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_logging.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_logging.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8000ed7d15cdacfe3b6dccb107aaf291349c9c13","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"added","additions":3501,"deletions":0,"changes":3501,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e3e16c15029521b60ad2d83c0914fcccfd7f8ac6","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_meta.xml","status":"added","additions":958,"deletions":0,"changes":958,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_meta.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_meta.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_meta.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"00eef60c75d42e27f5e9fd5a03fe4b195cc6458d","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_optimization.xml","status":"added","additions":612,"deletions":0,"changes":612,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_optimization.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_optimization.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_optimization.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"53c78471133c5fc4f2e211de708bdb52e765332a","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_pc.xml","status":"added","additions":2555,"deletions":0,"changes":2555,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_pc.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"aa4c2eb765f391acec35a61d6bf6bae9316adf0d","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_remote.xml","status":"added","additions":758,"deletions":0,"changes":758,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_remote.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_remote.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_remote.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"817a0ae4a68666e10a5b17fbdad8e539c30835be","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_runtime.xml","status":"added","additions":1814,"deletions":0,"changes":1814,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_runtime.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_runtime.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_runtime.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"8298bfe4218a27bf68ee19502239b361296c7a67","filename":"1.2.x/openjpa-project/src/doc/manual/ref_guide_slice.xml","status":"added","additions":543,"deletions":0,"changes":543,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_slice.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/ref_guide_slice.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/ref_guide_slice.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"71df6b8671e2dda5d5e02a837d39ff4c1abb8f58","filename":"1.2.x/openjpa-project/src/doc/manual/samples_guide.xml","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/samples_guide.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/samples_guide.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/samples_guide.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fa9d9c74ec9c31745fa208e17d257ce6a18170d7","filename":"1.2.x/openjpa-project/src/doc/manual/supported_databases.xml","status":"added","additions":1033,"deletions":0,"changes":1033,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/supported_databases.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-project/src/doc/manual/supported_databases.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-project/src/doc/manual/supported_databases.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6b14ef4489c05c6538af3345f267ca15c26b9ab0","filename":"1.2.x/openjpa-slice/pom.xml","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/pom.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0c9ec649d1b91124ac6a95cbefa5ebaf7c04241e","filename":"1.2.x/openjpa-slice/src/main/ant/enhancer.xml","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/ant/enhancer.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fa86836d345e02b3983f7b7087bd9af85f8cad01","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"75c20266597545f8b01d27ab2fde267b6b21875d","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f5750fe9d9f743061549d3abe6b5cd5d775ae792","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f8a56ddff24dbcb2f03886ec77d069de7d8bccf1","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4f4a89dbfc54bc516711bf13857cd832b31131b6","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9aa8ed90a1c38f184f701a4f5cdebeec3bc78f5c","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"aee3a4d939a833f9b6a26702c343a53c1c6633f3","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f06b6f3602eebd04a99bdcada5bf76bc41fd7959","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d3826216b1f342b5062c528dfc652eec71cf360e","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ab3a4792940b5016c63eb656439bbc381228c4a5","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"665befbf4a3f2e58a3e86c6186e1df3723ac014e","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4b066a33ce9a844050aea20b22237820fbe784ac","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"added","additions":468,"deletions":0,"changes":468,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"85270dea3991e7dd63270f3c7000d7d817e8ae16","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","status":"added","additions":247,"deletions":0,"changes":247,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"58cf5e2b79a6a6dfccc033f38313343957323ddf","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","status":"added","additions":763,"deletions":0,"changes":763,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5a75a5bf8652bef4df5c5d9eb41f086f6b1e5d23","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0fefc75c6f3d45ff6ad233d4f5353fed7858672b","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","status":"added","additions":435,"deletions":0,"changes":435,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b2450659f94bd6775efff3cf9f5480d108ed12dc","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"added","additions":244,"deletions":0,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b44aa557c64b8a5118e5374bc0478236fc9f0477","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","status":"added","additions":273,"deletions":0,"changes":273,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"fb36b503e64ba4da5412aca5c9fd0fcc55d1ca82","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"932dcf8ffcbc423a132b9ab32113e88f4883c593","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","status":"added","additions":165,"deletions":0,"changes":165,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"476d4053eea80a14d962e33c2d8ad01b59948bf2","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/package.html","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4a79d92884e12f579a561c40c6fbc5009f247809","filename":"1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/package.html","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/java/org/apache/openjpa/slice/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d380f743bc1107bb0fe88f39d40228808d971d80","filename":"1.2.x/openjpa-slice/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/resources/META-INF/services/org.apache.openjpa.lib.conf.ProductDerivation?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"ed7bb8cb05bc5dc6eb9f7bd106df731a760a130c","filename":"1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9d81452018e36a0c072af9eac313128c269b3d81","filename":"1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"0ce630925ae4c13e203ea21c31f1ed6732cd9150","filename":"1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4fdbe5010697aae5eab53ae6741a445a698ed3cd","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"7a0fc6e3a9fc9617b0b60a3addb27f037425690e","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e61ca7c3aaaa11e3c3212ef5bf016df04868db47","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","status":"added","additions":241,"deletions":0,"changes":241,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"36a87d2a3d97cc74c19c980341671d3acb29a479","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"417edc7de810829aad2dd8e3aa0d35e68db176c9","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4697ef8d92fadeb558c03e181db655a30c80694c","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"6bde7d8b61e9fb0de73cbe678ef4128ee9e534f5","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"77f57180de3ac6196eaa3c4444069cf46f6451fb","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"1c0875348c50b0f32503250507a8aadcc0a2a7c2","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"4d71f2df62be733527cfb7890203ba371ce04eba","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"5cb7970b0742a5a7e950cfaa7718e555cb4a4f94","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d19dd7122afcc72ac5469c596abff6397752fd18","filename":"1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b4509b3ccc150d891b70df620e554e0f914a9c27","filename":"1.2.x/openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"b17633333b8448b27525b4dc235255d0392efc24","filename":"1.2.x/openjpa-xmlstore/pom.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-xmlstore/pom.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"62ada3caba5de32f13d0257cdf33fa7a44564940","filename":"1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","status":"added","additions":387,"deletions":0,"changes":387,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/ObjectData.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3b01adaa5301164aafcf45d97bd31846797177b4","filename":"1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLConfiguration.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"247c8d12ad12e9c0a0a7ed45356d76fb7f8f4e12","filename":"1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","status":"added","additions":664,"deletions":0,"changes":664,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLFileHandler.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"d6eaa3dae42f03d66547f34d5eaf391479d96957","filename":"1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStore.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"c1375c22503b8cf5b762d78c26e6383f26e333a8","filename":"1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","status":"added","additions":287,"deletions":0,"changes":287,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/XMLStoreManager.java?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"e978a1b1865ac6c2ce899064abf28c1fb4bbe481","filename":"1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/package.html","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/package.html","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/package.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/openjpa-xmlstore/src/main/java/org/apache/openjpa/xmlstore/package.html?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"3efd7941e4ec59ae4db5afacde3e30303e904aa0","filename":"1.2.x/pom.xml","status":"added","additions":710,"deletions":0,"changes":710,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/pom.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"9e6c6fe7e271b1a4716b57c078209e55aebead72","filename":"1.2.x/src/site/apt/index.apt","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/src/site/apt/index.apt","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/src/site/apt/index.apt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/src/site/apt/index.apt?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"},{"sha":"f24934ab2d9bc21e15c18b911eb508f29362c786","filename":"1.2.x/src/site/site.xml","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/src/site/site.xml","raw_url":"https://github.com/apache/openjpa/raw/9c16a4373493bb9307dda99fc63e29c0fb8a3653/1.2.x/src/site/site.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/1.2.x/src/site/site.xml?ref=9c16a4373493bb9307dda99fc63e29c0fb8a3653"}]}

