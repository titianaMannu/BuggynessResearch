{"sha":"9c25bd16339a2421edb24713dae2b2b9e9998f14","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMjViZDE2MzM5YTI0MjFlZGIyNDcxM2RhZTJiMmI5ZTk5OThmMTQ=","commit":{"author":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-09-09T06:47:46Z"},"committer":{"name":"Fay Wang","email":"faywang@apache.org","date":"2010-09-09T06:47:46Z"},"message":"OPENJPA-1784: improve dirty-checking for persistent maps when the get method is called to retrieve an embeddable value.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@995333 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"69a297ec84fd91505e64985e3b5d2867aa158be7","url":"https://api.github.com/repos/apache/openjpa/git/trees/69a297ec84fd91505e64985e3b5d2867aa158be7"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c25bd16339a2421edb24713dae2b2b9e9998f14","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c25bd16339a2421edb24713dae2b2b9e9998f14","html_url":"https://github.com/apache/openjpa/commit/9c25bd16339a2421edb24713dae2b2b9e9998f14","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c25bd16339a2421edb24713dae2b2b9e9998f14/comments","author":null,"committer":null,"parents":[{"sha":"9a0f463d6cbef603eeda7fe09b922befb126b9ed","url":"https://api.github.com/repos/apache/openjpa/commits/9a0f463d6cbef603eeda7fe09b922befb126b9ed","html_url":"https://github.com/apache/openjpa/commit/9a0f463d6cbef603eeda7fe09b922befb126b9ed"}],"stats":{"total":287,"additions":285,"deletions":2},"files":[{"sha":"d597648954c4d71da40ab7c69591d8c37b7f85a9","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/HandlerHandlerMapTableFieldStrategy.java?ref=9c25bd16339a2421edb24713dae2b2b9e9998f14","patch":"@@ -21,6 +21,7 @@\n import java.sql.*;\n import java.util.*;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.jdbc.identifier.DBIdentifier;\n import org.apache.openjpa.jdbc.kernel.*;\n import org.apache.openjpa.jdbc.meta.*;\n@@ -214,8 +215,11 @@ public void update(OpenJPAStateManager sm, JDBCStore store, RowManager rm)\n \n             for (Iterator itr = change.iterator(); itr.hasNext();) {\n                 mkey = itr.next();\n+                Object mval = map.get(mkey);\n+                if ((mval instanceof PersistenceCapable) && !((PersistenceCapable)mval).pcIsDirty())\n+                    continue;   \n                 HandlerStrategies.where(key, mkey, store, changeRow, _kcols);\n-                HandlerStrategies.set(val, map.get(mkey), store, changeRow,\n+                HandlerStrategies.set(val, mval, store, changeRow,\n                     _vcols, _vio, true);\n                 rm.flushSecondaryRow(changeRow);\n             }"},{"sha":"b764988ac3ec0c32b74a55186694eff97f30d198","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMaps.java","status":"modified","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/util/ProxyMaps.java?ref=9c25bd16339a2421edb24713dae2b2b9e9998f14","patch":"@@ -23,10 +23,11 @@\n import java.util.AbstractSet;\n import java.util.Collection;\n import java.util.Map;\n-import java.util.Comparator;\n import java.util.Iterator;\n import java.util.Set;\n \n+import org.apache.openjpa.enhance.PersistenceCapable;\n+\n /**\n  * Utility methods used by map proxies.\n  *\n@@ -74,6 +75,32 @@ public static Set afterEntrySet(ProxyMap map, Set entries) {\n         return new ProxyEntrySetImpl(map, entries);\n     }\n \n+    /**\n+     * Call before invoking {@link Map#get} on super.\n+     */\n+    public static boolean beforeGet(ProxyMap map, Object key) {\n+        assertAllowedType(key, map.getKeyType());\n+        return map.containsKey(key);\n+    }\n+\n+    /**\n+     * Call after invoking {@link Map#get} on super.\n+     *\n+     * @param ret the return value from the super's method\n+     * @param before the return value from {@link #beforeGet}\n+     * @return the value to return from {@link Map#get}\n+     */\n+    public static Object afterGet(ProxyMap map, Object key,\n+        Object ret, boolean before) {\n+        if (before) {\n+            if (map.getChangeTracker() != null && (ret instanceof PersistenceCapable))\n+                ((MapChangeTracker) map.getChangeTracker()).changed(key, ret, \n+                    ret);\n+        } \n+        return ret;\n+    }\n+\n+\n     /**\n      * Call before invoking {@link Map#put} on super.\n      */"},{"sha":"7b5d57887c83940169675258c47c3115dc48ab12","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/LocalizedString.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/apache/openjpa/blob/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/LocalizedString.java","raw_url":"https://github.com/apache/openjpa/raw/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/LocalizedString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/LocalizedString.java?ref=9c25bd16339a2421edb24713dae2b2b9e9998f14","patch":"@@ -0,0 +1,87 @@\n+package org.apache.openjpa.persistence.jdbc.maps.update;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Embeddable;\n+\n+/**\n+ * A LocalizedString is any text string combined with a language code. The\n+ * language codes are two lower-case characters according to ISO-639-1, e.g.\n+ * \"de\" = German, \"en\" = English.\n+ * \n+ * The language may be null for strings like phone numbers.\n+ * \n+ * @author Harald Wellmann\n+ * \n+ */\n+@Embeddable\n+public class LocalizedString implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    /** Language code. */\n+    private String language;\n+\n+    private String string;\n+\n+    public LocalizedString() {\n+    }\n+\n+    public LocalizedString(String language, String text) {\n+        this.language = language;\n+        this.string = text;\n+    }\n+\n+    public String getLanguage() {\n+        return language;\n+    }\n+\n+    public void setLanguage(String language) {\n+        this.language = language;\n+    }\n+\n+    public String getString() {\n+        return string;\n+    }\n+\n+    public void setString(String text) {\n+        this.string = text;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+                + ((language == null) ? 0 : language.hashCode());\n+        result = prime * result + ((string == null) ? 0 : string.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj)\n+            return true;\n+        if (obj == null)\n+            return false;\n+        if (getClass() != obj.getClass())\n+            return false;\n+        LocalizedString other = (LocalizedString) obj;\n+        if (language == null) {\n+            if (other.language != null)\n+                return false;\n+        } else if (!language.equals(other.language))\n+            return false;\n+        if (string == null) {\n+            if (other.string != null)\n+                return false;\n+        } else if (!string.equals(other.string))\n+            return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return string;\n+    }\n+}"},{"sha":"d68b48944bcc71421b55b2939fabc83d7b0e7db8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/MultilingualString.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/apache/openjpa/blob/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/MultilingualString.java","raw_url":"https://github.com/apache/openjpa/raw/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/MultilingualString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/MultilingualString.java?ref=9c25bd16339a2421edb24713dae2b2b9e9998f14","patch":"@@ -0,0 +1,67 @@\n+package org.apache.openjpa.persistence.jdbc.maps.update;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapKeyColumn;\n+import javax.persistence.Table;\n+\n+\n+@Entity\n+@Table(name = \"multilingual_string\")\n+public class MultilingualString {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n+    @Column(name = \"string_id\")\n+    private long id;\n+\n+    @ElementCollection(fetch=FetchType.EAGER)\n+    @MapKeyColumn(name = \"language_key\")\n+    @CollectionTable(name = \"multilingual_string_map\", joinColumns = @JoinColumn(name = \"string_id\"))\n+    private Map<String, LocalizedString> map = new HashMap<String, LocalizedString>();\n+\n+    public MultilingualString() {}\n+    \n+    public MultilingualString(String lang, String text) {\n+        setText(lang, text);\n+    }\n+    \n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public Map<String, LocalizedString> getMap() {\n+        return map;\n+    }\n+\n+    public void setMap(Map<String, LocalizedString> map) {\n+        this.map = map;\n+    }\n+\n+    public void setText(String lang, String text) {\n+        map.put(lang, new LocalizedString(lang, text));\n+    }\n+\n+    public String getText(String lang) {\n+        if (map.containsKey(lang)) {\n+            return map.get(lang).getString();\n+        }\n+        return null;\n+    }\n+}"},{"sha":"228d6a7bb60882c93faa15a4e32234d5a8327723","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/TestMapUpdate.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/TestMapUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/9c25bd16339a2421edb24713dae2b2b9e9998f14/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/TestMapUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/maps/update/TestMapUpdate.java?ref=9c25bd16339a2421edb24713dae2b2b9e9998f14","patch":"@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.maps.update;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+/**\n+ * \n+ * @author Harald Wellmann\n+ *\n+ */\n+public class TestMapUpdate extends SQLListenerTestCase {\n+\n+    private MultilingualString entity1;\n+\tprivate OpenJPAEntityManagerSPI em;\n+\n+\tpublic void setUp() {\n+        super.setUp(CLEAR_TABLES,\n+            MultilingualString.class,\n+            LocalizedString.class);\n+        createObj(emf);\n+        em = emf.createEntityManager();\n+    }\n+\n+    public void testUpdateMapKey() throws Exception {\n+    \tem.getTransaction().begin();\n+    \t\n+    \tMultilingualString ms = em.find(MultilingualString.class, entity1.getId());\n+    \tassertNotNull(ms);\n+    \n+    \t// Overwrite an existing map entry.\n+    \t// The key is now dirty, and OpenJPA will generate an SQL UPDATE.\n+    \tms.setText(\"en\", \"Good evening\");    \t\n+    \tem.getTransaction().commit();\n+    \tem.clear();\n+    \t\n+    \tem.getTransaction().begin();\n+    \tms = em.find(MultilingualString.class, entity1.getId());\n+    \tassertEquals(\"Good evening\", ms.getText(\"en\"));\n+    \tem.getTransaction().commit();\n+    }\n+    \n+    public void testUpdateMapValue() throws Exception {\n+    \tem.getTransaction().begin();\n+    \t\n+    \tMultilingualString ms = em.find(MultilingualString.class, entity1.getId());\n+    \tassertNotNull(ms);\n+    \t\n+    \t// Change an existing map value. This makes the map dirty,\n+    \t// but OpenJPA does not recognize it. No SQL UPDATE is generated.\n+    \tms.getMap().get(\"en\").setString(\"Good evening\");\n+    \tem.getTransaction().commit();\n+    \tem.clear();\n+    \t\n+    \tem.getTransaction().begin();\n+    \tms = em.find(MultilingualString.class, entity1.getId());\n+    \t\n+    \t// This assertion fails, the entity still has the old value.\n+    \tassertEquals(\"Good evening\", ms.getText(\"en\"));\n+    \tem.getTransaction().commit();\n+    }\n+    \n+    private void createObj(EntityManagerFactory emf) {\n+        EntityManager em = emf.createEntityManager();\n+        EntityTransaction tran = em.getTransaction();\n+        tran.begin();\n+        \n+        entity1 = new MultilingualString(\"de\", \"Guten Tag\");\n+        entity1.setText(\"en\", \"Good morning\");\n+        em.persist(entity1);\n+        \n+        em.flush();\n+        tran.commit();\n+        em.close();\n+    }\n+}\n+"}]}

