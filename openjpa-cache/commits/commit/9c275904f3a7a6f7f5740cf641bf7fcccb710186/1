{"sha":"9c275904f3a7a6f7f5740cf641bf7fcccb710186","node_id":"MDY6Q29tbWl0MjA2MzY0OjljMjc1OTA0ZjNhN2E2ZjdmNTc0MGNmNjQxYmY3ZmNjY2I3MTAxODY=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T19:34:11Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-16T19:34:11Z"},"message":"OPENJPA-1387: Revert unique colum related changes to before 880685 plus other changes after that related to OPENJPA-1051 and OPENJPA-1381.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@880922 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f3c47d3b2f5940f980079cab64e394478bf75e0b","url":"https://api.github.com/repos/apache/openjpa/git/trees/f3c47d3b2f5940f980079cab64e394478bf75e0b"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c275904f3a7a6f7f5740cf641bf7fcccb710186","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c275904f3a7a6f7f5740cf641bf7fcccb710186","html_url":"https://github.com/apache/openjpa/commit/9c275904f3a7a6f7f5740cf641bf7fcccb710186","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c275904f3a7a6f7f5740cf641bf7fcccb710186/comments","author":null,"committer":null,"parents":[{"sha":"cfea146c2953a8b46abed0f5de50cf42701ccf7b","url":"https://api.github.com/repos/apache/openjpa/commits/cfea146c2953a8b46abed0f5de50cf42701ccf7b","html_url":"https://github.com/apache/openjpa/commit/cfea146c2953a8b46abed0f5de50cf42701ccf7b"}],"stats":{"total":123,"additions":71,"deletions":52},"files":[{"sha":"f472b8cfbc4ebe91f56279ee14eec8dcbac23840","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/TableJDBCSeq.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -260,7 +260,7 @@ public void addSchema(ClassMapping mapping, SchemaGroup group) {\n             // importTable() does not import unique constraints\n             Unique[] uniques = _pkColumn.getTable().getUniques();\n             for (Unique u : uniques) {\n-            \tcopy.importUnique(u, _conf.getDBDictionaryInstance());\n+            \tcopy.importUnique(u);\n             }\n             // we need to reset the table name in the column with the\n             // fully qualified name for matching the table name from the"},{"sha":"d9ac176dc72903732003876e55b7b1bd33ee7cbc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/MappingTool.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -46,7 +46,6 @@\n import org.apache.openjpa.jdbc.schema.SchemaSerializer;\n import org.apache.openjpa.jdbc.schema.SchemaTool;\n import org.apache.openjpa.jdbc.schema.Table;\n-import org.apache.openjpa.jdbc.schema.Unique;\n import org.apache.openjpa.jdbc.schema.XMLSchemaSerializer;\n import org.apache.openjpa.jdbc.sql.DBDictionary;\n import org.apache.openjpa.kernel.Seq;\n@@ -754,7 +753,6 @@ private void buildSchema(Class cls) {\n         Schema[] schemas = _schema.getSchemas();\n         Table[] tables;\n         Column[] cols;\n-        Unique[] unqs;\n         for (int i = 0; i < schemas.length; i++) {\n             tables = schemas[i].getTables();\n             for (int j = 0; j < tables.length; j++) {\n@@ -763,17 +761,8 @@ private void buildSchema(Class cls) {\n \n                 tables[j].getPrimaryKey().setLogical(false);\n                 cols = tables[j].getPrimaryKey().getColumns();\n-                for (int k = 0; k < cols.length; k++) {\n+                for (int k = 0; k < cols.length; k++)\n                     cols[k].setNotNull(true);\n-                }\n-                unqs = tables[j].getUniques();\n-                if (!_dict.supportsNullUniqueConlumn) {\n-                    for (Unique u : unqs) {\n-                        for (Column c : u.getColumns()) {\n-                            c.setNotNull(true);\n-                        }\n-                    }\n-                }\n             }\n         }\n     }"},{"sha":"3a6e7e6af3405f0019a6b0941e5ef7698c094252","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Constraint.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -24,7 +24,6 @@\n  *\n  * @author Abe White\n  */\n-@SuppressWarnings(\"serial\")\n public abstract class Constraint\n     extends ReferenceCounter {\n \n@@ -181,6 +180,9 @@ public void setDeferred(boolean deferred) {\n     public String toString() {\n         if (getName() != null)\n             return getName();\n-        return \"<\" + getClass().getSimpleName().toLowerCase() + \">\";\n+\n+        String name = getClass().getName();\n+        name = name.substring(name.lastIndexOf('.') + 1);\n+        return \"<\" + name.toLowerCase() + \">\";\n     }\n }"},{"sha":"57f0a74a29bedb386443f0587152bd3236886c1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.lib.util.Localizer;\n import org.apache.openjpa.util.InvalidStateException;\n \n@@ -31,13 +32,13 @@\n  *\n  * @author Abe White\n  */\n-@SuppressWarnings(\"serial\")\n public abstract class LocalConstraint\n     extends Constraint {\n \n-    private static final Localizer _loc = Localizer.forPackage(LocalConstraint.class);\n+    private static final Localizer _loc = Localizer.forPackage\n+        (LocalConstraint.class);\n \n-    private List<Column> _colList = null;\n+    private List _colList = null;\n     private Column[] _cols = null;\n \n     /**\n@@ -98,7 +99,7 @@ public void addColumn(Column col) {\n                 col == null ? null : getTable()));\n     \t\n         if (_colList == null)\n-            _colList = new ArrayList<Column>(3);\n+            _colList = new ArrayList(3);\n         else if (_colList.contains(col))\n             return;\n \n@@ -123,7 +124,7 @@ public boolean removeColumn(Column col) {\n     }\n \n     /**\n-     * Return true if this constraint includes the given column.\n+     * Return true if the pk includes the given column.\n      */\n     public boolean containsColumn(Column col) {\n         if (col == null || _colList == null)\n@@ -132,7 +133,7 @@ public boolean containsColumn(Column col) {\n     }\n \n     /**\n-     * Reference all columns in this constraint.\n+     * Ref all columns in this constraint.\n      */\n     public void refColumns() {\n         Column[] cols = getColumns();\n@@ -141,7 +142,7 @@ public void refColumns() {\n     }\n \n     /**\n-     * Dereference all columns in this constraint.\n+     * Deref all columns in this constraint.\n      */\n     public void derefColumns() {\n         Column[] cols = getColumns();"},{"sha":"3f23c97f02cd861bf30615fb7b140bb01f982741","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/NameSet.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -39,13 +39,17 @@\n \n     private Set _names = null;\n \n+    // an additional names Set for checking name duplication\n+    private Set _subNames = null;\n+\n     /**\n      * Return true if the given name is in use already.\n      */\n     public boolean isNameTaken(String name) {\n         if (name == null)\n             return true;\n-        return _names != null && _names.contains(name.toUpperCase());\n+        return (_names != null && _names.contains(name.toUpperCase())) ||\n+            (_subNames != null && _subNames.contains(name.toUpperCase()));\n     }\n \n     /**\n@@ -77,4 +81,20 @@ protected void removeName(String name) {\n         if (name != null && _names != null)\n             _names.remove(name.toUpperCase());\n     }\n+\n+    /**\n+    * Attempt to add the given name to the set.\n+    *\n+    * @param name the name to add\n+    */\n+    protected void addSubName(String name) {\n+        if (_subNames == null) {\n+            _subNames = new HashSet();\n+        }\n+        _subNames.add(name.toUpperCase());\n+    }\n+\n+    protected void resetSubNames() {\n+        _subNames = null;\n+    }\n }"},{"sha":"c3c364a806e92e1b9591fdee80704b56b9ad9200","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/SchemaTool.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -590,7 +590,7 @@ else if (!pk.equalsPrimaryKey(dbTable.getPrimaryKey()))\n                 if (dbTable == null)\n                     continue;\n                 for (int k = 0; k < uniques.length; k++) {\n-                    dbTable.importUnique(uniques[k], _dict);\n+                    dbTable.importUnique(uniques[k]);\n                 }\n             }\n         }\n@@ -957,11 +957,7 @@ private void dropTables(Collection tables, SchemaGroup change)\n      */\n     public boolean createTable(Table table)\n         throws SQLException {\n-        try {   \n-            return executeSQL(_dict.getCreateTableSQL(table));\n-        } catch (SQLException e) {\n-            return false;\n-        }\n+        return executeSQL(_dict.getCreateTableSQL(table));\n     }\n \n     /**"},{"sha":"eb2012ef82e6669277e1a4817df8e0257d318920","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Table.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -376,13 +376,6 @@ public Column addColumn(String name, String validName) {\n         return col;\n     }\n \n-    /**\n-     * Add a name to this NameSet\n-     */\n-    public void addCorrectedColumnName(String name, boolean validate) {\n-        addName(name, validate);\n-    }\n-\n \n     /**\n      * Remove the given column from the table.\n@@ -737,7 +730,7 @@ public boolean removeUnique(Unique unq) {\n     /**\n      * Import a constraint; column names must match columns of this table.\n      */\n-    public Unique importUnique(Unique unq, DBDictionary dict) {\n+    public Unique importUnique(Unique unq) {\n         if (unq == null)\n             return null;\n \n@@ -747,10 +740,6 @@ public Unique importUnique(Unique unq, DBDictionary dict) {\n         Column[] cols = unq.getColumns();\n         for (int i = 0; i < cols.length; i++)\n             copy.addColumn(getColumn(cols[i].getName()));\n-        if (dict != null && !dict.supportsNullUniqueConlumn) {\n-            for (Column col : copy.getColumns())\n-                col.setNotNull(true);\n-        }\n         return copy;\n     }\n \n@@ -827,4 +816,15 @@ public int getColNumber() {\n     public void setColNumber(int colNum) {\n         _colNum = colNum;\n     }\n+\n+    /**\n+    * Add a column to the subNames set to avoid naming conflict.\n+    */\n+    public void addSubColumn(String name) {\n+        addSubName(name);\n+    }\n+\n+    public void resetSubColumns() {\n+        resetSubNames();\n+    }\n }"},{"sha":"b6ecfa5d22379bfb9fc9dcc8eef3c29455917689","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/Unique.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -24,7 +24,6 @@\n  * @author Abe White\n  * @author Pinaki Poddar\n  */\n-@SuppressWarnings(\"serial\")\n public class Unique\n     extends LocalConstraint {\n \t\n@@ -47,7 +46,26 @@ public boolean isLogical() {\n     }\n     \n     /**\n-     * Return true if the structure of this constraint matches that of\n+     * Adds the given column. \n+     * The added column is set to non-nullable because a unique constraint\n+     * on the database requires that its constituent columns are NOT NULL. \n+     * @see Column#setNotNull(boolean)\n+     */\n+    public void addColumn(Column col) {\n+    \tsuper.addColumn(col);\n+    \tcol.setNotNull(true);\n+    }\n+    \n+    /**\n+     * Set the name of the constraint. This method cannot be called if the\n+     * constraint already belongs to a table. \n+     */\n+    public void setName(String name) {\n+        super.setName(name);\n+    }\n+    \n+    /**\n+     * Return true if the structure of this primary key matches that of\n      * the given one (same table, same columns).\n      */\n     public boolean equalsUnique(Unique unq) {"},{"sha":"b9b32bbff166116295f46ee5c21b0afc44bf91a1","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/AbstractDB2Dictionary.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -69,8 +69,6 @@ public AbstractDB2Dictionary() {\n         // the equivalent \"X JOIN Y ON 1 = 1\"\n         crossJoinClause = \"JOIN\";\n         requiresConditionForCrossJoin = true;\n-        \n-        supportsNullUniqueConlumn = false;\n     }\n \n     public void indexOf(SQLBuffer buf, FilterValue str, FilterValue find,"},{"sha":"48b888913ff70e9800123822c6fd7dc2f203ec1b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/DBDictionary.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -187,7 +187,6 @@\n     public boolean supportsRestrictDeleteAction = true;\n     public boolean supportsCascadeDeleteAction = true;\n     public boolean supportsNullDeleteAction = true;\n-    public boolean supportsNullUniqueConlumn = true;\n     public boolean supportsDefaultDeleteAction = true;\n     public boolean supportsRestrictUpdateAction = true;\n     public boolean supportsCascadeUpdateAction = true;"},{"sha":"3098ef4fc79377614d4cd6a83b69dec95af75db2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -751,7 +751,6 @@ public void testPreparedQueryIgnoredWhenLockModeIsSet() {\n         em.getTransaction().begin();\n         Query q2 = em.createQuery(jpql);\n         assertEquals(QueryLanguages.LANG_PREPARED_SQL, OpenJPAPersistence.cast(q2).getLanguage());\n-        q2.getLockMode();\n         q2.setLockMode(LockModeType.OPTIMISTIC);\n         assertEquals(JPQLParser.LANG_JPQL, OpenJPAPersistence.cast(q2).getLanguage());\n         List<Author> authors2 = q2.getResultList();"},{"sha":"d0c653af868c76c3484e62b5401bf6122c8155fc","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c275904f3a7a6f7f5740cf641bf7fcccb710186/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryImpl.java?ref=9c275904f3a7a6f7f5740cf641bf7fcccb710186","patch":"@@ -377,12 +377,9 @@ public boolean isNative() {\n \t */\n \tvoid assertJPQLOrCriteriaQuery() {\n         String language = getLanguage();\n-        if (JPQLParser.LANG_JPQL.equals(language) \n-         || QueryLanguages.LANG_PREPARED_SQL.equals(language)\n-         || CriteriaBuilderImpl.LANG_CRITERIA.equals(language)) {\n-            return;\n+        if (!(JPQLParser.LANG_JPQL.equals(language) || CriteriaBuilderImpl.LANG_CRITERIA.equals(language))) {\n+            throw new IllegalStateException(_loc.get(\"not-jpql-or-criteria-query\").getMessage());\n         }\n-        throw new IllegalStateException(_loc.get(\"not-jpql-or-criteria-query\").getMessage());\n \t}\n \n \tpublic OpenJPAQuery<X> closeAll() {"}]}

