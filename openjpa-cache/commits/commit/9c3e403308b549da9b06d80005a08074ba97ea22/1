{"sha":"9c3e403308b549da9b06d80005a08074ba97ea22","node_id":"MDY6Q29tbWl0MjA2MzY0OjljM2U0MDMzMDhiNTQ5ZGE5YjA2ZDgwMDA1YTA4MDc0YmE5N2VhMjI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-16T20:49:09Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2010-04-16T20:49:09Z"},"message":"OPENJPA-703: Merge Query Statistics related changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/2.0.x@935078 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"65f6c8b30b439b16f3754a7cfab21eb186393433","url":"https://api.github.com/repos/apache/openjpa/git/trees/65f6c8b30b439b16f3754a7cfab21eb186393433"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c3e403308b549da9b06d80005a08074ba97ea22","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c3e403308b549da9b06d80005a08074ba97ea22","html_url":"https://github.com/apache/openjpa/commit/9c3e403308b549da9b06d80005a08074ba97ea22","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c3e403308b549da9b06d80005a08074ba97ea22/comments","author":null,"committer":null,"parents":[{"sha":"a9192498ed907b6dd024808e89a86d2e8d589066","url":"https://api.github.com/repos/apache/openjpa/commits/a9192498ed907b6dd024808e89a86d2e8d589066","html_url":"https://github.com/apache/openjpa/commit/a9192498ed907b6dd024808e89a86d2e8d589066"}],"stats":{"total":216,"additions":200,"deletions":16},"files":[{"sha":"8799e63f9498e3fe879b316e77cc296bdb38f16c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","status":"modified","additions":12,"deletions":2,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/PreparedQueryCacheImpl.java?ref=9c3e403308b549da9b06d80005a08074ba97ea22","patch":"@@ -57,15 +57,15 @@\n \t// Key: Query identifier Value: Reason why excluded\n \tprivate final Map<String, Exclusion> _uncachables;\n \tprivate final List<Exclusion> _exclusionPatterns;\n-\tprivate final QueryStatistics<String> _stats;\n+\tprivate QueryStatistics<String> _stats;\n+\tprivate boolean _statsEnabled;\n \tprivate ReentrantLock _lock = new ReentrantLock();\n \tprivate Log _log;\n     private static Localizer _loc = Localizer.forPackage(PreparedQueryCacheImpl.class);\n     \n \tpublic PreparedQueryCacheImpl() {\n \t\t_delegate = new CacheMap();\n \t\t_uncachables = new CacheMap();\n-\t\t_stats = new QueryStatistics.Default<String>();\n \t\t_exclusionPatterns = new ArrayList<Exclusion>();\n \t}\n \t\n@@ -316,6 +316,14 @@ public void clear() {\n         _delegate.clear();\n         _stats.clear();\n     }\n+    \n+    public void setEnableStatistics(boolean enable){\n+        _statsEnabled = enable;\n+    }\n+    \n+    public boolean getEnableStatistics(){\n+        return _statsEnabled;\n+    }\n         \n \t//-------------------------------------------------------\n \t// Configurable contract\n@@ -328,6 +336,8 @@ public void startConfiguration() {\n     }\n \n     public void endConfiguration() {\n+        _stats = _statsEnabled ? new QueryStatistics.Default<String>() :\n+                                 new QueryStatistics.None<String>();\n     }\n     \n     /**"},{"sha":"34a4f4a9ad162139afb644799a3a1ec481d78515","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/PreparedQueryCache.java?ref=9c3e403308b549da9b06d80005a08074ba97ea22","patch":"@@ -195,8 +195,21 @@\n \t */\n \tpublic void clear();\n \t\n+\t/**\n+\t * Enable/disable gathering of statistics.\n+\t * \n+\t */\n+    public void setEnableStatistics(boolean enable);\n+    \n+    /**\n+     * Affirm if statistics is gathered.\n+     * \n+     */\n+    public boolean getEnableStatistics();\n+    \n \t/**\n \t * Gets the simple statistics for executed queries.\n+\t * If the statistics gathering is disabled, an empty statistics is returned. \n \t */\n \tpublic QueryStatistics<String> getStatistics();\n \t"},{"sha":"02e4c5087169aa76cdccffae9d678c98b16589de","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","status":"modified","additions":91,"deletions":13,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryStatistics.java?ref=9c3e403308b549da9b06d80005a08074ba97ea22","patch":"@@ -20,11 +20,13 @@\n \n import java.io.PrintStream;\n import java.io.Serializable;\n+import java.util.Collections;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.openjpa.lib.util.concurrent.SizedConcurrentHashMap;\n+\n /**\n  * Records query execution statistics.\n  * \n@@ -119,17 +121,24 @@\n \t\n \t/**\n \t * A default implementation.\n-\t *\n+\t * \n+\t * Maintains statistics for only a fixed number of queries.\n+\t * Statistical counts are approximate and not exact (to keep thread synchorization overhead low).\n+\t * \n \t */\n \tpublic static class Default<T> implements QueryStatistics<T> {\n+\t    private static final int FIXED_SIZE = 1000;\n+\t    private static final float LOAD_FACTOR = 0.75f;\n+\t    private static final int CONCURRENCY = 16;\n+\t    \n \t\tprivate static final int ARRAY_SIZE = 2;\n         private static final int READ  = 0;\n         private static final int HIT   = 1;\n         \n \t\tprivate long[] astat = new long[ARRAY_SIZE];\n \t\tprivate long[] stat  = new long[ARRAY_SIZE];\n-\t\tprivate Map<T, long[]> stats  = new HashMap<T, long[]>();\n-\t\tprivate Map<T, long[]> astats = new HashMap<T, long[]>();\n+\t\tprivate Map<T, long[]> stats  = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t\tprivate Map<T, long[]> astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n \t\tprivate Date start = new Date();\n \t\tprivate Date since = start;\n \t\t\n@@ -182,17 +191,17 @@ public Date start() {\n \t\t\treturn start;\n \t\t}\n \n-\t\tpublic void reset() {\n+\t\tpublic synchronized void reset() {\n \t\t\tstat = new long[ARRAY_SIZE];\n \t\t\tstats.clear();\n \t\t\tsince = new Date();\n \t\t}\n \t\t\n-\t    public void clear() {\n+\t    public synchronized void clear() {\n \t       astat = new long[ARRAY_SIZE];\n \t       stat  = new long[ARRAY_SIZE];\n-\t       stats = new HashMap<T, long[]>();\n-\t       astats = new HashMap<T, long[]>();\n+\t       stats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n+\t       astats = new SizedConcurrentHashMap(FIXED_SIZE, LOAD_FACTOR, CONCURRENCY);\n \t       start  = new Date();\n \t       since  = start;\n \t    }\n@@ -217,7 +226,7 @@ private void addSample(Map<T, long[]> target, T query, int i) {\n \t\tpublic void recordExecution(T query) {\n \t\t    if (query == null)\n \t\t        return;\n-\t\t    boolean cached = (astats.containsKey(query));\n+\t\t    boolean cached = astats.containsKey(query);\n \t\t\taddSample(query, READ);\n \t\t\tif (cached)\n \t\t\t\taddSample(query, HIT);\n@@ -244,8 +253,7 @@ public void dump(PrintStream out) {\n                     out.println(i + \". \\t\" + toString(arow) + \" \\t\" + key);\n \t\t\t\t} else {\n \t\t\t\t\tlong[] row  = stats.get(key);\n-                    out.println(i + \". \\t\" + toString(arow) + \" \\t\"  \n-\t\t\t\t\t    + toString(row) + \" \\t\\t\" + key);\n+                    out.println(i + \". \\t\" + toString(arow) + \" \\t\"  + toString(row) + \" \\t\\t\" + key);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -257,8 +265,78 @@ long pct(long per, long cent) {\n \t\t}\n \t\t\n \t\tString toString(long[] row) {\n-            return row[READ] + \":\" + row[HIT] + \"(\" + pct(row[HIT], row[READ])\n-\t\t\t+ \"%)\";\n+            return row[READ] + \":\" + row[HIT] + \"(\" + pct(row[HIT], row[READ]) + \"%)\";\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * A do-nothing implementation.\n+\t * \n+\t * @author Pinaki Poddar\n+\t *\n+\t * @param <T>\n+\t */\n+\tpublic static class None<T> implements QueryStatistics<T> {\n+        private Date start = new Date();\n+        private Date since = start;\n+\n+        public void clear() {\n+        }\n+\n+        public void dump(PrintStream out) {\n+        }\n+\n+        public long getExecutionCount() {\n+            return 0;\n+        }\n+\n+        public long getExecutionCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getHitCount() {\n+            return 0;\n+        }\n+\n+        public long getHitCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getTotalExecutionCount() {\n+            return 0;\n+        }\n+\n+        public long getTotalExecutionCount(T query) {\n+            return 0;\n+        }\n+\n+        public long getTotalHitCount() {\n+            return 0;\n+        }\n+\n+        public long getTotalHitCount(T query) {\n+            return 0;\n+        }\n+\n+        public Set<T> keys() {\n+            return Collections.emptySet();\n+        }\n+\n+        public void recordExecution(T query) {\n+        }\n+\n+        public void reset() {\n+            start  = new Date();\n+            since  = start;\n+        }\n+\n+        public Date since() {\n+            return since;\n+        }\n+\n+        public Date start() {\n+            return start;\n+        }\n+\t}\n }\n+"},{"sha":"cb0d178ee7007b83872edeb207939ed90a4e215b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/apache/openjpa/blob/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","raw_url":"https://github.com/apache/openjpa/raw/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestDefaultQueryStatistics.java?ref=9c3e403308b549da9b06d80005a08074ba97ea22","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jdbc.sqlcache;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.openjpa.kernel.PreparedQueryCache;\n+import org.apache.openjpa.kernel.QueryStatistics;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Tests that query statistics are collected in a thread-safe manner.\n+ *  \n+ * @author Rick Curtis\n+ * @author Pinaki Poddar\n+ *\n+ */\n+public class TestDefaultQueryStatistics extends SingleEMFTestCase {\n+    QueryStatistics<String> statistics;\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        statistics = new QueryStatistics.Default<String>();\n+    }\n+    \n+    public void testThreadSafety() throws Exception{\n+        final QueryStatistics<String> finalStats = statistics;\n+        \n+        Runnable runner = new Runnable() {\n+            public void run() {\n+                for (int i = 0; i < 10000; i++) {\n+                    finalStats.recordExecution(\"query \" + Thread.currentThread().getId() + \" \" + i);\n+                }\n+            }\n+        };\n+        \n+        List<Thread> threads = new ArrayList<Thread>();\n+        for(int i = 0;i<10;i++){\n+            threads.add(new Thread(runner));\n+        }\n+        for(Thread t : threads){\n+            t.start();\n+        }\n+        for(Thread t : threads){\n+            t.join();\n+        }\n+        assertEquals(1000, finalStats.keys().size());\n+    }\n+    \n+    public void testStatsSize() throws Exception{\n+        for (int i = 0; i < 10000; i++) {\n+            statistics.recordExecution(\"query \" + Thread.currentThread().getId() + \" \" + i);\n+        }\n+        assertEquals(1000, statistics.keys().size());\n+    }\n+    \n+    public void testQueryStatisticsIsDisabledByDefault() {\n+        PreparedQueryCache cache = emf.getConfiguration().getQuerySQLCacheInstance();\n+        assertNotNull(cache);\n+        QueryStatistics<String> stats = cache.getStatistics();\n+        assertNotNull(stats);\n+        assertTrue(stats.keys().isEmpty());\n+        assertEquals(QueryStatistics.None.class, stats.getClass());\n+    }\n+}"},{"sha":"286023a5c7698b7c0497f08ddd42ba95ac0c1e56","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","raw_url":"https://github.com/apache/openjpa/raw/9c3e403308b549da9b06d80005a08074ba97ea22/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/sqlcache/TestPreparedQueryCache.java?ref=9c3e403308b549da9b06d80005a08074ba97ea22","patch":"@@ -109,7 +109,7 @@ public void setUp()  {\n             Properties config = new Properties();\n             config.put(\"openjpa.jdbc.SynchronizeMappings\", \"buildSchema(ForeignKeys=true,SchemaAction='drop,add')\");\n             config.put(\"openjpa.jdbc.JDBCListeners\", new JDBCListener[] { auditor = new SQLAuditor()});\n-            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true\");\n+            config.put(\"openjpa.jdbc.QuerySQLCache\", \"true(EnableStatistics=true)\");\n             config.put(\"openjpa.RuntimeUnenhancedClasses\", \"unsupported\");\n             config.put(\"openjpa.DynamicEnhancementAgent\", \"false\");\n             emf = (OpenJPAEntityManagerFactorySPI)OpenJPAPersistence.createEntityManagerFactory("}]}

