{"sha":"9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1","node_id":"MDY6Q29tbWl0MjA2MzY0OjljOTViNzFmY2M4OGNlN2UzYjA4MDU0YzhjMzBjZDgwZTVhODlhYTE=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-05-08T21:20:58Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2021-05-08T21:20:58Z"},"message":"update docs to reflect changes in OpenJPA-3.2.0","tree":{"sha":"3470f41a134e1224b2600cbeb1813bae48d77ae5","url":"https://api.github.com/repos/apache/openjpa/git/trees/3470f41a134e1224b2600cbeb1813bae48d77ae5"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1","html_url":"https://github.com/apache/openjpa/commit/9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"8f79c8aba8ec647c3bc7d148b76b39b0d53bb45d","url":"https://api.github.com/repos/apache/openjpa/commits/8f79c8aba8ec647c3bc7d148b76b39b0d53bb45d","html_url":"https://github.com/apache/openjpa/commit/8f79c8aba8ec647c3bc7d148b76b39b0d53bb45d"}],"stats":{"total":101,"additions":87,"deletions":14},"files":[{"sha":"02ee86ec96913fc3d0c9aac56144475976a3e01a","filename":"openjpa-project/src/doc/manual/migration_considerations.xml","status":"modified","additions":87,"deletions":14,"changes":101,"blob_url":"https://github.com/apache/openjpa/blob/9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1/openjpa-project/src/doc/manual/migration_considerations.xml","raw_url":"https://github.com/apache/openjpa/raw/9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1/openjpa-project/src/doc/manual/migration_considerations.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/migration_considerations.xml?ref=9c95b71fcc88ce7e3b08054c8c30cd80e5a89aa1","patch":"@@ -458,24 +458,24 @@\n                     <xref linkend=\"jpa_2.2_allocationSize\"/>.\n                 </para>\n             </section>\n-        \t<section id=\"jpa_2.2_cascadePersist\">\n+            <section id=\"jpa_2.2_cascadePersist\">\n                 <title>\n                     Cascade persist behavior\n                 </title>\n                 <!-- See OPENJPA-1986 for details. -->\n-\t\t\t\t<para>\n-\t\t\t\t\tIn previous releases, OpenJPA would check the database for the\n-\t\t\t\t\texistence of the related Entity before persisting the relationship to\n-\t\t\t\t\tthat Entity. This resulted in an extra Select being sent to the\n-\t\t\t\t\tdatabase. In 2.2.0, code was added so that when cascading a persist to\n-\t\t\t\t\ta related Entity without persistence state, the persist (insert) will\n-\t\t\t\t\thappen without first checking the database. This may result in an\n-\t\t\t\t\tEntityExistsException if the related Entity already exists in the\n-\t\t\t\t\tdatabase. To revert this behavior to the previous release, set the\n-\t\t\t\t\tvalue of the <literal>openjpa.Compatibility</literal>\n-\t\t\t\t\tproperty <literal>CheckDatabaseForCascadePersistToDetachedEntity</literal>\n-\t\t\t\t\tto <literal>true</literal>.\n-\t\t\t\t</para>\n+                <para>\n+                    In previous releases, OpenJPA would check the database for the\n+                    existence of the related Entity before persisting the relationship to\n+                    that Entity. This resulted in an extra Select being sent to the\n+                    database. In 2.2.0, code was added so that when cascading a persist to\n+                    a related Entity without persistence state, the persist (insert) will\n+                    happen without first checking the database. This may result in an\n+                    EntityExistsException if the related Entity already exists in the\n+                    database. To revert this behavior to the previous release, set the\n+                    value of the <literal>openjpa.Compatibility</literal>\n+                    property <literal>CheckDatabaseForCascadePersistToDetachedEntity</literal>\n+                    to <literal>true</literal>.\n+                </para>\n             </section>\n             <section id=\"jpa_2.2_LifecycleEventManager\">\n                 <title>\n@@ -578,4 +578,77 @@\n             </section>\n         </section>\n     </section>\n+    <section id=\"jpa_3.2\">\n+        <title>OpenJPA 3.2.0</title>\n+        <section id=\"jpa_3.2_incompatibilities\">\n+            <title>Incompatibilities</title>\n+            <para>\n+                The following sections indicate changes that are incompatible\n+                between OpenJPA 3.1.x releases and the 3.2.0 release.\n+            </para>\n+            <section id=\"jpa_3.2_SumDouble\">\n+                <title>SUM now always returns Double</title>\n+                <para>\n+                    We did fix the SUM operation to always return <classname>Double</classname> as requested by the spec.\n+                    Previously we did return whatever Numeric the JDBC driver did serve, resulting in non portable code.\n+                </para>\n+            </section>\n+            <section id=\"jpa_3.2_InvalidColumnNames\">\n+                <title>Invalid Column Name Changes</title>\n+                <para>\n+                    We did review and update the list of invalid column names for most <classname>DBDicationary</classname>.\n+                    The list of tested reserved words got enriched with previously forbidden column names to avoid backward\n+                    incompatibility issues.\n+                    The list can ge retrieved and configured via\n+                    <ulink url=\"../../apidocs/org/apache/openjpa/jdbc/sql/DBDictionary.html#getInvalidColumnWordSet()\">\n+                        <methodname>DBDictionary.getInvalidColumnWordSet</methodname></ulink>\n+                </para>\n+            </section>\n+            <section id=\"jpa_3.2_HsqlMappingTool\">\n+                <title>MappingTool Behavior for HSQLDB</title>\n+                <para>\n+                    There have been 2 changes for Hypersonic (HSQLDB).\n+                    We fixed a bug which did cause <classname>long</classname> fields getting mapped to <literal>INTEGER</literal>\n+                    instead of <literal>BIGINT</literal>.\n+                </para>\n+                <para>\n+                    Java <classname>double</classname> fields previously got mapped to <literal>NUMERIC</literal> which\n+                    does lack fraction digits. Thus the value <literal>7.3425343</literal> got truncated to <literal>7</literal>.\n+                    We now map <classname>double</classname> fields in Entities to <literal>DOUBLE</literal> SQL column types.\n+                </para>\n+            </section>\n+            <section id=\"jpa_3.2_OracleTimestampPrecision\">\n+                <title>Respect TIMESTAMP precision in Oracle</title>\n+                <para>\n+                    Due to a bug we did hardcoded round at 3 digits precision.\n+                    So we essentially only allowed millis, even on a TIMESTAMP(6) field.\n+                    The new code does respect the second fractions and now defaults to 6.\n+                    It should be compatible but it might behave very subtle different.\n+                </para>\n+            </section>\n+            <section id=\"jpa_3.2_UnaryOps\">\n+                <title>Unary Operations return types</title>\n+                <para>\n+                    Before OpenJPA-3.2.0 Unary Operations like <literal>MIN</literal>, <literal>MAX</literal>, <literal>SUM</literal>, etc\n+                    did return whatever type got returned by the JDBC driver. For certain column types this could also have been internal\n+                    classes of that very JDBC driver. E.g. a <literal>SELECT MAX(a.someLocalDateField) ..</literal> might have returned\n+                    an instance of types <classname>com.oracle.jdbc....</classname> or <literal>com.microsoft.sqlserver...</literal>, etc.\n+                    We now use the respective <ulink url=\"../../apidocs/org/apache/openjpa/jdbc/sql/DBDictionary.html\">\n+                    <methodname>DBDictionary</methodname></ulink> to request the correct type from the <classname>ResultSet</classname>.\n+                </para>\n+            </section>\n+            <section id=\"jpa_3.2_PostgreSqlQueryTimeout\">\n+                <title>PostgreSQL now supports setQueryTimeOut</title>\n+                <para>\n+                    PostgreSQL does now support client side setQueryTimeout.\n+                    User might see this come alive and now return different when the situation occurs.\n+                    This flag is automatically enabled if running against PostgreSQL 10 or later.\n+                    It can also be configured manually via\n+                    <ulink url=\"../../apidocs/org/apache/openjpa/jdbc/sql/DBDictionary.html#supportsQueryTimeout\">\n+                        <fieldname>DBDictionary.supportsQueryTimeout</fieldname></ulink>\n+                </para>\n+            </section>\n+        </section>\n+    </section>\n+\n </appendix>"}]}

