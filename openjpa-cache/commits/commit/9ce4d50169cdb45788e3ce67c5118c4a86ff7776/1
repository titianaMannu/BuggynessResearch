{"sha":"9ce4d50169cdb45788e3ce67c5118c4a86ff7776","node_id":"MDY6Q29tbWl0MjA2MzY0OjljZTRkNTAxNjljZGI0NTc4OGUzY2U2N2M1MTE4YzRhODZmZjc3NzY=","commit":{"author":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2013-12-17T02:28:23Z"},"committer":{"name":"Richard G. Curtis","email":"curtisr7@apache.org","date":"2013-12-17T02:28:23Z"},"message":"OPENJPA-2233: Merge changes to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1551446 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59a2a53cabeb002afbaca219e247dec6ca009176","url":"https://api.github.com/repos/apache/openjpa/git/trees/59a2a53cabeb002afbaca219e247dec6ca009176"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ce4d50169cdb45788e3ce67c5118c4a86ff7776","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ce4d50169cdb45788e3ce67c5118c4a86ff7776","html_url":"https://github.com/apache/openjpa/commit/9ce4d50169cdb45788e3ce67c5118c4a86ff7776","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/comments","author":null,"committer":null,"parents":[{"sha":"d4425f579953b6208b95a371618b91f913beef71","url":"https://api.github.com/repos/apache/openjpa/commits/d4425f579953b6208b95a371618b91f913beef71","html_url":"https://github.com/apache/openjpa/commit/d4425f579953b6208b95a371618b91f913beef71"}],"stats":{"total":203,"additions":197,"deletions":6},"files":[{"sha":"d00a68bf67c980b2b8ad1a94e92b33071d785635","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/openjpa/blob/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","raw_url":"https://github.com/apache/openjpa/raw/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancer.java?ref=9ce4d50169cdb45788e3ce67c5118c4a86ff7776","patch":"@@ -1179,6 +1179,11 @@ private void addPCMethods()\n             if (_meta.hasAbstractPKField() == true) { \n                 addGetIDOwningClass();\n             }\n+            \n+            if (_meta.isEmbeddedOnly() && _meta.getIdentityType() == ClassMetaData.ID_APPLICATION) {\n+                _log.error(_loc.get(\"ID-field-in-embeddable-unsupported\", _meta.toString()));\n+            }\n+            \n             addNewObjectIdInstanceMethod(true);\n             addNewObjectIdInstanceMethod(false);\n         }\n@@ -2747,13 +2752,12 @@ private void addNewObjectIdInstanceMethod(boolean obj)\n         // new <oid class> ();\n         code.anew().setType(oidType);\n         code.dup();\n-        if (_meta.isOpenJPAIdentity() || (obj && usesClsString ==\n-                    Boolean.TRUE)) {\n-            if(_meta.isEmbeddedOnly() || _meta.hasAbstractPKField() == true ) {\n+        if (_meta.isOpenJPAIdentity() || (obj && usesClsString == Boolean.TRUE)) {\n+            if ((_meta.isEmbeddedOnly() && ! (_meta.getIdentityType() == ClassMetaData.ID_APPLICATION))\n+                || _meta.hasAbstractPKField() == true ) {\n                 code.aload().setThis();\n-                code.invokevirtual().setMethod(PRE + \"GetIDOwningClass\",\n-                    Class.class, null);\n-            }else {\n+                code.invokevirtual().setMethod(PRE + \"GetIDOwningClass\", Class.class, null);\n+            } else {\n                 code.classconstant().setClass(getType(_meta));\n             }\n         }"},{"sha":"0e1c362c271d1102f5461e138a5c00c748719013","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/enhance/localizer.properties?ref=9ce4d50169cdb45788e3ce67c5118c4a86ff7776","patch":"@@ -220,3 +220,4 @@ set-method: Error while setting value {2} of {3} by setter method {1} of instanc\n down-level-enhanced-entity: The Entity \"{0}\" was enhanced at level \"{1}\", but the current level of enhancement is \\\n \"{2}\". \n static-asm-exception: Encountered an unexpected exception while loading ASM.\n+ID-field-in-embeddable-unsupported: The identity field defined in the {0} Embeddable is not supported. "},{"sha":"4df20df89d4f6738df683e5e90a505cd1d07a34f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestEmbeddableEntityWithIDAnnotation.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/openjpa/blob/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestEmbeddableEntityWithIDAnnotation.java","raw_url":"https://github.com/apache/openjpa/raw/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestEmbeddableEntityWithIDAnnotation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/TestEmbeddableEntityWithIDAnnotation.java?ref=9ce4d50169cdb45788e3ce67c5118c4a86ff7776","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.enhance;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.enhance.common.apps.EmbeddableEntityWithIDAnnotation;\n+import org.apache.openjpa.persistence.enhance.common.apps.IDOwningClassTestEntity;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+public class TestEmbeddableEntityWithIDAnnotation extends SQLListenerTestCase{\n+\n+    public void setUp() {\n+        setUp(EmbeddableEntityWithIDAnnotation.class, IDOwningClassTestEntity.class, CLEAR_TABLES);        \n+    }\n+    \n+    //make sure no exception is thrown here. \n+    public void testpcNewObjectIdInstanceMethod(){\n+        EntityManager em = emf.createEntityManager();\n+        try{\n+            IDOwningClassTestEntity e = new IDOwningClassTestEntity();\n+            em.getTransaction().begin();\n+            em.persist(e);\n+            em.getTransaction().commit();\n+            assertTrue(em.createQuery(\"select count(c) from IDOwningClassTestEntity c\", Long.class)\n+                    .getSingleResult().longValue() > 0);                    \n+        }finally{\n+            em.close();\n+        }\n+    }\n+\n+}"},{"sha":"8ff76ebf12f995eeeff8a2718186d36ecbcec05b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/EmbeddableEntityWithIDAnnotation.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/openjpa/blob/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/EmbeddableEntityWithIDAnnotation.java","raw_url":"https://github.com/apache/openjpa/raw/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/EmbeddableEntityWithIDAnnotation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/EmbeddableEntityWithIDAnnotation.java?ref=9ce4d50169cdb45788e3ce67c5118c4a86ff7776","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+// default package\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+\n+/**\n+ * BillingNoteId entity. @author MyEclipse Persistence Tools\n+ */\n+@Embeddable\n+public class EmbeddableEntityWithIDAnnotation implements java.io.Serializable\n+{\n+\n+\tprivate static final long serialVersionUID = 558333273831654654L;\n+\n+\tprivate Long id;\n+\n+    private Long seqNo = new Long(2012);\n+\n+    public EmbeddableEntityWithIDAnnotation( )\n+    {\n+    }\n+\n+    public EmbeddableEntityWithIDAnnotation( Long id, Long seqNo )\n+    {\n+        this.id = id;\n+        this.seqNo = seqNo;\n+    }\n+\n+    // Property accessors   \n+    @Id\n+    @Column(unique=true, nullable=false, precision=12, scale=0)  \n+    public Long getId()\n+    {\n+        return this.id;\n+    }\n+\n+    public void setId( Long id )\n+    {\n+        this.id = id;\n+    }\n+\n+    @Column( name = \"EmbeddableEntitySeqNo\", nullable = false, precision = 12, scale = 0 )\n+    public Long getSeqNo()\n+    {\n+        return this.seqNo;\n+    }\n+\n+    public void setSeqNo( Long seqNo )\n+    {\n+        this.seqNo = seqNo;\n+    }\n+\n+    public boolean equals( Object other )\n+    {\n+        if ( ( this == other ) )\n+            return true;\n+        if ( ( other == null ) )\n+            return false;\n+        if ( !( other instanceof EmbeddableEntityWithIDAnnotation ) )\n+            return false;\n+        EmbeddableEntityWithIDAnnotation castOther = ( EmbeddableEntityWithIDAnnotation ) other;\n+\n+        return ( ( this.getId( ) == castOther.getId( ) ) \n+        \t\t|| ( this.getId( ) != null && castOther.getId( ) != null \n+        \t\t&& this.getId( ).equals( castOther.getId( ) ) ) )\n+                && ( ( this.getSeqNo( ) == castOther.getSeqNo( ) ) \n+                \t\t|| ( this.getSeqNo( ) != null && castOther.getSeqNo( ) != null \n+                \t\t&& this.getSeqNo( ).equals( castOther.getSeqNo( ) ) ) );\n+    }\n+\n+    public int hashCode()\n+    {\n+        int result = 17;\n+\n+        result = 37 * result + ( getId( ) == null ? 0 : this.getId( ).hashCode( ) );\n+        result = 37 * result + ( getSeqNo( ) == null ? 0 : this.getSeqNo( ).hashCode( ) );\n+        return result;\n+    }\n+\n+}"},{"sha":"544236f19dc504eee7ae82a2082fced7fd0a268d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/IDOwningClassTestEntity.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/openjpa/blob/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/IDOwningClassTestEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9ce4d50169cdb45788e3ce67c5118c4a86ff7776/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/IDOwningClassTestEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/enhance/common/apps/IDOwningClassTestEntity.java?ref=9ce4d50169cdb45788e3ce67c5118c4a86ff7776","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+\n+package org.apache.openjpa.persistence.enhance.common.apps;\n+\n+import javax.persistence.EmbeddedId;\n+import javax.persistence.Entity;\n+\n+@Entity\n+public class IDOwningClassTestEntity {\n+    @EmbeddedId\n+    EmbeddableEntityWithIDAnnotation pk = new EmbeddableEntityWithIDAnnotation(new Long(2012), new Long(2000));\n+    \n+    String name;\n+    \n+}"}]}

