{"sha":"9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkMzRlZjlkZmMyN2Y5ZmQ1ZTcxMmUxYWZlN2YzYWMyNWQxMTk2NzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-13T20:45:02Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-13T20:45:02Z"},"message":"Copy for tag 1.2.2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.2@898935 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"325c1cf7148a4f90bf7a12fd3e521c5b0363f4a0","url":"https://api.github.com/repos/apache/openjpa/git/trees/325c1cf7148a4f90bf7a12fd3e521c5b0363f4a0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","html_url":"https://github.com/apache/openjpa/commit/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2e7a9e50a687cc2c6e4098885cf2f781e3e7eb40","url":"https://api.github.com/repos/apache/openjpa/commits/2e7a9e50a687cc2c6e4098885cf2f781e3e7eb40","html_url":"https://github.com/apache/openjpa/commit/2e7a9e50a687cc2c6e4098885cf2f781e3e7eb40"},{"sha":"08672c35f878f1de98ec1719eca850c41aa989a0","url":"https://api.github.com/repos/apache/openjpa/commits/08672c35f878f1de98ec1719eca850c41aa989a0","html_url":"https://github.com/apache/openjpa/commit/08672c35f878f1de98ec1719eca850c41aa989a0"}],"stats":{"total":312418,"additions":160725,"deletions":151693},"files":[{"sha":"541b81da3b40b777ac97bab4afe30e1186bd8ef5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestBulkUpdate.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,117 +1,117 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.clauses;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestBulkUpdate extends AbstractTestCase {\r\n-\r\n-    public TestBulkUpdate(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(Entity1.class);\r\n-        deleteAll(Entity2.class);\r\n-    }\r\n-\r\n-    public void testSimpleBulkUpdate() {\r\n-        for (int i = 1; i < 5; i++)\r\n-            testSimpleBulkUpdate(i);\r\n-    }\r\n-\r\n-    public void testSimpleBulkUpdate(int num) {\r\n-        deleteAll(Entity1.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        for (int i = 0; i < num; i++) {\r\n-            Entity1 e = new Entity1(i, \"value1\", i);\r\n-            em.persist(e);\r\n-        }\r\n-        endTx(em);\r\n-\r\n-        // test update\r\n-        startTx(em);\r\n-        Query updateQuery1 = em.createQuery(\"update Entity1 e\"\r\n-            + \" set e.stringField = 'value2', e.intField = 2\"\r\n-            + \" where e.stringField = :val\").\r\n-            setParameter(\"val\", \"value1\");\r\n-        assertEquals(num, updateQuery1.executeUpdate());\r\n-        assertEquals(0, updateQuery1.executeUpdate()); // should be updated\r\n-        endTx(em);\r\n-\r\n-        // test update with parameter\r\n-        startTx(em);\r\n-        Query updateQuery2 = em.createQuery(\"update Entity1 e\"\r\n-            + \" set e.stringField = :newval where e.stringField = :val\").\r\n-            setParameter(\"val\", \"value2\").\r\n-            setParameter(\"newval\", \"value3\");\r\n-        assertEquals(num, updateQuery2.executeUpdate());\r\n-        assertEquals(0, updateQuery2.executeUpdate()); // should be updated\r\n-        endTx(em);\r\n-\r\n-        // test update with 2 parameters\r\n-        startTx(em);\r\n-        Query updateQuery3 = em.createQuery(\"update Entity1 e\"\r\n-            + \" set e.stringField = :newval, e.intField = 999\"\r\n-            + \" where e.stringField = :val\").\r\n-            setParameter(\"val\", \"value3\").\r\n-            setParameter(\"newval\", \"value4\");\r\n-        assertEquals(num, updateQuery3.executeUpdate());\r\n-        assertEquals(0, updateQuery3.executeUpdate()); // should be updated\r\n-        endTx(em);\r\n-\r\n-        // test update with null value\r\n-        startTx(em);\r\n-        Query updateQuery4 = em.createQuery(\"update Entity1 e\"\r\n-            + \" set e.stringField = :nullval, e.intField = :intval\"\r\n-            + \" where e.stringField = :val\"\r\n-            + \" and e.intField = 999\").\r\n-            setParameter(\"val\", \"value4\").\r\n-            setParameter(\"intval\", new Integer(987)).\r\n-            setParameter(\"nullval\", null);\r\n-        assertEquals(num, updateQuery4.executeUpdate());\r\n-        assertEquals(0, updateQuery4.executeUpdate()); // should be updated\r\n-        endTx(em);\r\n-\r\n-        // test update with field refernece in update value\r\n-        // ### this seems to not be working\r\n-        startTx(em);\r\n-        Query updateFieldValue = em.createQuery(\"update Entity1 e\"\r\n-            + \" set e.intField = e.intField + 1\");\r\n-        assertEquals(num, updateFieldValue.executeUpdate());\r\n-        endTx(em);\r\n-\r\n-        startTx(em);\r\n-        Query deleteQuery = em.createQuery\r\n-            (\"delete from Entity1 e where e.stringField = :val\").\r\n-            setParameter(\"val\", null);\r\n-        assertEquals(num, deleteQuery.executeUpdate());\r\n-        assertEquals(0, deleteQuery.executeUpdate());\r\n-        endTx(em);\r\n-\r\n-        endEm(em);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.clauses;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestBulkUpdate extends AbstractTestCase {\n+\n+    public TestBulkUpdate(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(Entity1.class);\n+        deleteAll(Entity2.class);\n+    }\n+\n+    public void testSimpleBulkUpdate() {\n+        for (int i = 1; i < 5; i++)\n+            testSimpleBulkUpdate(i);\n+    }\n+\n+    public void testSimpleBulkUpdate(int num) {\n+        deleteAll(Entity1.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        for (int i = 0; i < num; i++) {\n+            Entity1 e = new Entity1(i, \"value1\", i);\n+            em.persist(e);\n+        }\n+        endTx(em);\n+\n+        // test update\n+        startTx(em);\n+        Query updateQuery1 = em.createQuery(\"update Entity1 e\"\n+            + \" set e.stringField = 'value2', e.intField = 2\"\n+            + \" where e.stringField = :val\").\n+            setParameter(\"val\", \"value1\");\n+        assertEquals(num, updateQuery1.executeUpdate());\n+        assertEquals(0, updateQuery1.executeUpdate()); // should be updated\n+        endTx(em);\n+\n+        // test update with parameter\n+        startTx(em);\n+        Query updateQuery2 = em.createQuery(\"update Entity1 e\"\n+            + \" set e.stringField = :newval where e.stringField = :val\").\n+            setParameter(\"val\", \"value2\").\n+            setParameter(\"newval\", \"value3\");\n+        assertEquals(num, updateQuery2.executeUpdate());\n+        assertEquals(0, updateQuery2.executeUpdate()); // should be updated\n+        endTx(em);\n+\n+        // test update with 2 parameters\n+        startTx(em);\n+        Query updateQuery3 = em.createQuery(\"update Entity1 e\"\n+            + \" set e.stringField = :newval, e.intField = 999\"\n+            + \" where e.stringField = :val\").\n+            setParameter(\"val\", \"value3\").\n+            setParameter(\"newval\", \"value4\");\n+        assertEquals(num, updateQuery3.executeUpdate());\n+        assertEquals(0, updateQuery3.executeUpdate()); // should be updated\n+        endTx(em);\n+\n+        // test update with null value\n+        startTx(em);\n+        Query updateQuery4 = em.createQuery(\"update Entity1 e\"\n+            + \" set e.stringField = :nullval, e.intField = :intval\"\n+            + \" where e.stringField = :val\"\n+            + \" and e.intField = 999\").\n+            setParameter(\"val\", \"value4\").\n+            setParameter(\"intval\", new Integer(987)).\n+            setParameter(\"nullval\", null);\n+        assertEquals(num, updateQuery4.executeUpdate());\n+        assertEquals(0, updateQuery4.executeUpdate()); // should be updated\n+        endTx(em);\n+\n+        // test update with field refernece in update value\n+        // ### this seems to not be working\n+        startTx(em);\n+        Query updateFieldValue = em.createQuery(\"update Entity1 e\"\n+            + \" set e.intField = e.intField + 1\");\n+        assertEquals(num, updateFieldValue.executeUpdate());\n+        endTx(em);\n+\n+        startTx(em);\n+        Query deleteQuery = em.createQuery\n+            (\"delete from Entity1 e where e.stringField = :val\").\n+            setParameter(\"val\", null);\n+        assertEquals(num, deleteQuery.executeUpdate());\n+        assertEquals(0, deleteQuery.executeUpdate());\n+        endTx(em);\n+\n+        endEm(em);\n+    }\n+}\n+"},{"sha":"ac9cd9084f03b0c54aa79e8efea4963644d7db02","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","status":"modified","additions":213,"deletions":213,"changes":426,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBClauses.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,213 +1,213 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.clauses;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import org.apache.openjpa.persistence.common.apps.Course;\r\n-import org.apache.openjpa.persistence.common.apps.ArtCourse;\r\n-import org.apache.openjpa.persistence.common.apps.Department;\r\n-import org.apache.openjpa.persistence.common.apps.Student;\r\n-\r\n-public class TestEJBClauses extends AbstractTestCase {\r\n-\r\n-    public TestEJBClauses(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(Course.class);\r\n-        deleteAll(Student.class);\r\n-        deleteAll(Department.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        String name = \"\";\r\n-        List<Course> clist = new ArrayList<Course>();\r\n-        List<Department> dlist = new ArrayList<Department>();\r\n-\r\n-        for (int i = 0; i < 5; i++) {\r\n-            Course curr = new Course(\"Math \" + i, i * 2, i);\r\n-            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\r\n-            Department durr = new Department(\"CompSci\" + i, null, i + 2);\r\n-            clist.add(curr);\r\n-            clist.add(acurr);\r\n-            dlist.add(durr);\r\n-        }\r\n-\r\n-        Student stud = new Student(\"Jonathan\", clist, dlist);\r\n-        Student stud2 = new Student(\"Stam\", null, dlist);\r\n-        Student stud3 = new Student(\"John\", clist, null);\r\n-        Student stud4 = new Student(\"Bill\", null, null);\r\n-\r\n-        em.persist(stud);\r\n-        em.persist(stud2);\r\n-        em.persist(stud3);\r\n-        em.persist(stud4);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testFromClause1() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT o.name FROM Student o\";\r\n-\r\n-        List result = em.createQuery(query)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(4, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testFromClause2() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT NEW apps.ArtCourse(e.name)\" +\r\n-            \"FROM Student e\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(4, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testFromClause3() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT o.name \" +\r\n-            \"FROM Student o, Course c \" +\r\n-            \"WHERE o.course IS NULL AND o.department IS NULL\";\r\n-\r\n-        List ls = (List) em.createQuery(query)\r\n-            .getResultList();\r\n-        String uno = (String) ls.get(0);\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(1, ls.size());\r\n-        assertEquals(\"Bill\", uno);\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testWhereClause1() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT distinct s.name \" +\r\n-            \"FROM Student s, Course d \" +\r\n-            \"WHERE d.courseId >= 4 AND s.department IS NOT NULL\";\r\n-\r\n-        List ls = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(2, ls.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testWhereClause2() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT distinct s.name \" +\r\n-            \"FROM Student s \" +\r\n-            \"WHERE\" +\r\n-            \" Exists(SELECT c FROM s.course c WHERE c.name LIKE 'Math%')\";\r\n-\r\n-        List ls = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(2, ls.size());\r\n-        assertTrue(ls.contains(\"Jonathan\"));\r\n-        assertTrue(ls.contains(\"John\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testClauseRangeVar() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT DISTINCT s FROM Student s, Student s2 \" +\r\n-            \"WHERE s.name = 'John' AND s2.name = 'Jonathan'\";\r\n-\r\n-        List ls = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(1, ls.size());\r\n-\r\n-        Student ret = (Student) ls.get(0);\r\n-        assertEquals(\"John\", ret.getName());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testClausePathExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String failure = \"SELECT DISTINCT s \" +\r\n-            \"FROM Student s WHERE\" +\r\n-            \" s.department.name = 'CompSci1'\";\r\n-        // Changes related to OPENJPA-485 allows this query to pass.\r\n-        // The query is not kosher as it does navigate through a \r\n-        // collection-valued-path-expression (s.department.name) where\r\n-        // department is a Collection. \r\n-        // But we allow this because of the convenience of the query expression \r\n-        List ls = em.createQuery(failure).getResultList();\r\n-        assertFalse(ls.isEmpty());\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testClausePathExpr2() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String success =\r\n-            \"SELECT DISTINCT d.name FROM Student AS s, IN(s.department) d \";\r\n-\r\n-        List ls2 = em.createQuery(success).getResultList();\r\n-\r\n-        assertNotNull(ls2);\r\n-        assertEquals(5, ls2.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testCollMemberDecl() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String colldec = \"SELECT DISTINCT s.name \" +\r\n-            \"FROM Student s,\" +\r\n-            \" IN(s.department) d\" +\r\n-            \" WHERE d.name = 'CompSci2'\";\r\n-\r\n-        List ls = em.createQuery(colldec).getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(2, ls.size());\r\n-        assertTrue(ls.contains(\"Jonathan\"));\r\n-        assertTrue(ls.contains(\"Stam\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    /**\r\n-     * GroupBy , OrderBy clause is tested by testejbqlfunction under\r\n-     * functional directory.\r\n-     */\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.clauses;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import org.apache.openjpa.persistence.common.apps.Course;\n+import org.apache.openjpa.persistence.common.apps.ArtCourse;\n+import org.apache.openjpa.persistence.common.apps.Department;\n+import org.apache.openjpa.persistence.common.apps.Student;\n+\n+public class TestEJBClauses extends AbstractTestCase {\n+\n+    public TestEJBClauses(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(Course.class);\n+        deleteAll(Student.class);\n+        deleteAll(Department.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        String name = \"\";\n+        List<Course> clist = new ArrayList<Course>();\n+        List<Department> dlist = new ArrayList<Department>();\n+\n+        for (int i = 0; i < 5; i++) {\n+            Course curr = new Course(\"Math \" + i, i * 2, i);\n+            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\n+            Department durr = new Department(\"CompSci\" + i, null, i + 2);\n+            clist.add(curr);\n+            clist.add(acurr);\n+            dlist.add(durr);\n+        }\n+\n+        Student stud = new Student(\"Jonathan\", clist, dlist);\n+        Student stud2 = new Student(\"Stam\", null, dlist);\n+        Student stud3 = new Student(\"John\", clist, null);\n+        Student stud4 = new Student(\"Bill\", null, null);\n+\n+        em.persist(stud);\n+        em.persist(stud2);\n+        em.persist(stud3);\n+        em.persist(stud4);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testFromClause1() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT o.name FROM Student o\";\n+\n+        List result = em.createQuery(query)\n+            .getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(4, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testFromClause2() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT NEW apps.ArtCourse(e.name)\" +\n+            \"FROM Student e\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(4, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testFromClause3() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT o.name \" +\n+            \"FROM Student o, Course c \" +\n+            \"WHERE o.course IS NULL AND o.department IS NULL\";\n+\n+        List ls = (List) em.createQuery(query)\n+            .getResultList();\n+        String uno = (String) ls.get(0);\n+\n+        assertNotNull(ls);\n+        assertEquals(1, ls.size());\n+        assertEquals(\"Bill\", uno);\n+\n+        endEm(em);\n+    }\n+\n+    public void testWhereClause1() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT distinct s.name \" +\n+            \"FROM Student s, Course d \" +\n+            \"WHERE d.courseId >= 4 AND s.department IS NOT NULL\";\n+\n+        List ls = em.createQuery(query).getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(2, ls.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testWhereClause2() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT distinct s.name \" +\n+            \"FROM Student s \" +\n+            \"WHERE\" +\n+            \" Exists(SELECT c FROM s.course c WHERE c.name LIKE 'Math%')\";\n+\n+        List ls = em.createQuery(query).getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(2, ls.size());\n+        assertTrue(ls.contains(\"Jonathan\"));\n+        assertTrue(ls.contains(\"John\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testClauseRangeVar() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT DISTINCT s FROM Student s, Student s2 \" +\n+            \"WHERE s.name = 'John' AND s2.name = 'Jonathan'\";\n+\n+        List ls = em.createQuery(query).getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(1, ls.size());\n+\n+        Student ret = (Student) ls.get(0);\n+        assertEquals(\"John\", ret.getName());\n+\n+        endEm(em);\n+    }\n+\n+    public void testClausePathExpr() {\n+        EntityManager em = currentEntityManager();\n+        String failure = \"SELECT DISTINCT s \" +\n+            \"FROM Student s WHERE\" +\n+            \" s.department.name = 'CompSci1'\";\n+        // Changes related to OPENJPA-485 allows this query to pass.\n+        // The query is not kosher as it does navigate through a \n+        // collection-valued-path-expression (s.department.name) where\n+        // department is a Collection. \n+        // But we allow this because of the convenience of the query expression \n+        List ls = em.createQuery(failure).getResultList();\n+        assertFalse(ls.isEmpty());\n+        endEm(em);\n+    }\n+\n+    public void testClausePathExpr2() {\n+        EntityManager em = currentEntityManager();\n+        String success =\n+            \"SELECT DISTINCT d.name FROM Student AS s, IN(s.department) d \";\n+\n+        List ls2 = em.createQuery(success).getResultList();\n+\n+        assertNotNull(ls2);\n+        assertEquals(5, ls2.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testCollMemberDecl() {\n+        EntityManager em = currentEntityManager();\n+\n+        String colldec = \"SELECT DISTINCT s.name \" +\n+            \"FROM Student s,\" +\n+            \" IN(s.department) d\" +\n+            \" WHERE d.name = 'CompSci2'\";\n+\n+        List ls = em.createQuery(colldec).getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(2, ls.size());\n+        assertTrue(ls.contains(\"Jonathan\"));\n+        assertTrue(ls.contains(\"Stam\"));\n+\n+        endEm(em);\n+    }\n+\n+    /**\n+     * GroupBy , OrderBy clause is tested by testejbqlfunction under\n+     * functional directory.\n+     */\n+}"},{"sha":"87096d5db2e8cb0c459d52984cf3a4810a4a5e8e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","status":"modified","additions":163,"deletions":163,"changes":326,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBDeleteUpdateImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,163 +1,163 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.clauses;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBDeleteUpdateImpl extends AbstractTestCase {\r\n-\r\n-    public TestEJBDeleteUpdateImpl() {\r\n-    }\r\n-\r\n-    public TestEJBDeleteUpdateImpl(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 runt1 = new RuntimeTest1(1);\r\n-        runt1.setStringField(\"runt1\");\r\n-        runt1.setSelfOneOne(new RuntimeTest1(2));\r\n-        RuntimeTest2 runt2 = new RuntimeTest2(3);\r\n-        runt2.setStringField(\"runt2\");\r\n-\r\n-        em.persist(runt1);\r\n-        em.persist(runt2);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testUpdate1() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 ret = em.find(RuntimeTest1.class, 1);\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(\"runt1\", ret.getStringField());\r\n-        assertNotNull(ret.getSelfOneOne());\r\n-\r\n-        String ejbqlUpdate =\r\n-            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\r\n-        int updatedEntities = em.createQuery(ejbqlUpdate)\r\n-            .setParameter(\"strngfld\", \"runner13\")\r\n-            .setParameter(\"stdfield\", \"runt1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(1, updatedEntities);\r\n-\r\n-        endTx(em);\r\n-\r\n-        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, 1);\r\n-        em.refresh(ret2);\r\n-\r\n-        assertNotNull(ret2);\r\n-        assertEquals(\"runner13\", ret2.getStringField());\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testUpdate2() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n-        assertNotNull(run);\r\n-        assertEquals(\"runt1\", run.getStringField());\r\n-        assertNotNull(run.getSelfOneOne());\r\n-\r\n-        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\r\n-            \"SET x.stringField = :strngfld \" +\r\n-            \"WHERE x.stringField = :field \" +\r\n-            \"AND x.selfOneOne \" +\r\n-            \"IS NOT NULL\";\r\n-\r\n-        int upEntities = em.createQuery(ejbqlUpdate)\r\n-            .setParameter(\"strngfld\", \"upd\")\r\n-            .setParameter(\"field\", \"runt1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(1, upEntities);\r\n-\r\n-        RuntimeTest1 inst = em.find(RuntimeTest1.class, 1);\r\n-        em.refresh(inst);\r\n-\r\n-        assertNotNull(inst);\r\n-//\t\tassertEquals(\"upd\", inst.getStringField());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testDelete1() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n-        assertNotNull(run);\r\n-        assertEquals(\"runt1\", run.getStringField());\r\n-        assertNotNull(run.getSelfOneOne());\r\n-\r\n-        String ejbdelUpdate = \"DELETE FROM RuntimeTest1 s \" +\r\n-            \"WHERE s.stringField = :strngfld\";\r\n-        int delEntity = em.createQuery(ejbdelUpdate)\r\n-            .setParameter(\"strngfld\", \"runt1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(1, delEntity);\r\n-\r\n-        RuntimeTest1 del = em.find(RuntimeTest1.class, 1);\r\n-        assertNull(del);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testDelete2() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\r\n-        assertNotNull(run);\r\n-        assertEquals(\"runt1\", run.getStringField());\r\n-        assertNotNull(run.getSelfOneOne());\r\n-\r\n-        String ejbdelUpdate =\r\n-            \"DELETE FROM RuntimeTest1 r WHERE r.stringField = ?1\";\r\n-        Query query = em.createQuery(ejbdelUpdate);\r\n-\r\n-        query.setParameter(1, \"runt1\");\r\n-        int ok = query.executeUpdate();\r\n-\r\n-        assertEquals(1, ok);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.clauses;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBDeleteUpdateImpl extends AbstractTestCase {\n+\n+    public TestEJBDeleteUpdateImpl() {\n+    }\n+\n+    public TestEJBDeleteUpdateImpl(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 runt1 = new RuntimeTest1(1);\n+        runt1.setStringField(\"runt1\");\n+        runt1.setSelfOneOne(new RuntimeTest1(2));\n+        RuntimeTest2 runt2 = new RuntimeTest2(3);\n+        runt2.setStringField(\"runt2\");\n+\n+        em.persist(runt1);\n+        em.persist(runt2);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testUpdate1() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 ret = em.find(RuntimeTest1.class, 1);\n+\n+        assertNotNull(ret);\n+        assertEquals(\"runt1\", ret.getStringField());\n+        assertNotNull(ret.getSelfOneOne());\n+\n+        String ejbqlUpdate =\n+            \"UPDATE RuntimeTest1 x SET x.stringField = :strngfld WHERE x.stringField = :stdfield\";\n+        int updatedEntities = em.createQuery(ejbqlUpdate)\n+            .setParameter(\"strngfld\", \"runner13\")\n+            .setParameter(\"stdfield\", \"runt1\")\n+            .executeUpdate();\n+\n+        assertEquals(1, updatedEntities);\n+\n+        endTx(em);\n+\n+        RuntimeTest1 ret2 = em.find(RuntimeTest1.class, 1);\n+        em.refresh(ret2);\n+\n+        assertNotNull(ret2);\n+        assertEquals(\"runner13\", ret2.getStringField());\n+\n+        em.close();\n+    }\n+\n+    public void testUpdate2() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\n+        assertNotNull(run);\n+        assertEquals(\"runt1\", run.getStringField());\n+        assertNotNull(run.getSelfOneOne());\n+\n+        String ejbqlUpdate = \"UPDATE RuntimeTest1 x \" +\n+            \"SET x.stringField = :strngfld \" +\n+            \"WHERE x.stringField = :field \" +\n+            \"AND x.selfOneOne \" +\n+            \"IS NOT NULL\";\n+\n+        int upEntities = em.createQuery(ejbqlUpdate)\n+            .setParameter(\"strngfld\", \"upd\")\n+            .setParameter(\"field\", \"runt1\")\n+            .executeUpdate();\n+\n+        assertEquals(1, upEntities);\n+\n+        RuntimeTest1 inst = em.find(RuntimeTest1.class, 1);\n+        em.refresh(inst);\n+\n+        assertNotNull(inst);\n+//\t\tassertEquals(\"upd\", inst.getStringField());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testDelete1() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\n+        assertNotNull(run);\n+        assertEquals(\"runt1\", run.getStringField());\n+        assertNotNull(run.getSelfOneOne());\n+\n+        String ejbdelUpdate = \"DELETE FROM RuntimeTest1 s \" +\n+            \"WHERE s.stringField = :strngfld\";\n+        int delEntity = em.createQuery(ejbdelUpdate)\n+            .setParameter(\"strngfld\", \"runt1\")\n+            .executeUpdate();\n+\n+        assertEquals(1, delEntity);\n+\n+        RuntimeTest1 del = em.find(RuntimeTest1.class, 1);\n+        assertNull(del);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testDelete2() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 run = em.find(RuntimeTest1.class, 1);\n+        assertNotNull(run);\n+        assertEquals(\"runt1\", run.getStringField());\n+        assertNotNull(run.getSelfOneOne());\n+\n+        String ejbdelUpdate =\n+            \"DELETE FROM RuntimeTest1 r WHERE r.stringField = ?1\";\n+        Query query = em.createQuery(ejbdelUpdate);\n+\n+        query.setParameter(1, \"runt1\");\n+        int ok = query.executeUpdate();\n+\n+        assertEquals(1, ok);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+}"},{"sha":"a64df993849162f4447f568cdeb9b41a74626919","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBPolymorphicQuery.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,88 +1,88 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.clauses;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.apps.Entity1;\r\n-import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBPolymorphicQuery extends AbstractTestCase {\r\n-\r\n-    public TestEJBPolymorphicQuery(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        int run1 = 10;\r\n-        int run2 = 15;\r\n-\r\n-        for (int i = 0; i < run1; i++) {\r\n-            RuntimeTest1 rt = new RuntimeTest1(i);\r\n-            rt.setStringField(\"foo \" + i);\r\n-            em.persist(rt);\r\n-        }\r\n-\r\n-        for (int i = 10; i < run2; i++) {\r\n-            em.persist(new RuntimeTest2(i));\r\n-        }\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    /**\r\n-     * Ensures that when a select query is ran against an entity at the top of the hierarchy\r\n-     * that the result is its instances and that of all its subclass.\r\n-     */\r\n-    public void testPolymorphicSelect() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(l);\r\n-        assertEquals(15, l.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testPolymorphicDelete() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        int l = em.createQuery(\"Delete from RuntimeTest1\")\r\n-            .executeUpdate();\r\n-\r\n-        assertNotNull(l);\r\n-        assertEquals(15, l);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.clauses;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.apps.Entity1;\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBPolymorphicQuery extends AbstractTestCase {\n+\n+    public TestEJBPolymorphicQuery(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        int run1 = 10;\n+        int run2 = 15;\n+\n+        for (int i = 0; i < run1; i++) {\n+            RuntimeTest1 rt = new RuntimeTest1(i);\n+            rt.setStringField(\"foo \" + i);\n+            em.persist(rt);\n+        }\n+\n+        for (int i = 10; i < run2; i++) {\n+            em.persist(new RuntimeTest2(i));\n+        }\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    /**\n+     * Ensures that when a select query is ran against an entity at the top of the hierarchy\n+     * that the result is its instances and that of all its subclass.\n+     */\n+    public void testPolymorphicSelect() {\n+        EntityManager em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\n+            .getResultList();\n+\n+        assertNotNull(l);\n+        assertEquals(15, l.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testPolymorphicDelete() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        int l = em.createQuery(\"Delete from RuntimeTest1\")\n+            .executeUpdate();\n+\n+        assertNotNull(l);\n+        assertEquals(15, l);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+}"},{"sha":"34cb00ce402cb3f9001bfeba2cbf762f211e99f2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","status":"modified","additions":152,"deletions":152,"changes":304,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/clauses/TestEJBQueryInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,152 +1,152 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.clauses;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.NamedQuery;\r\n-\r\n-import org.apache.openjpa.persistence.common.apps.Entity1;\r\n-import org.apache.openjpa.persistence.common.apps.Entity2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-@NamedQuery(name = \"setParam1\",\r\n-    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-public class TestEJBQueryInterface extends AbstractTestCase {\r\n-\r\n-    public TestEJBQueryInterface(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(Entity1.class);\r\n-\r\n-        int instNum = 10;\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        //create and persist multiple entity1 instances\r\n-        for (int i = 0; i < instNum; i++) {\r\n-            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\r\n-            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\r\n-            ent.setEntity2Field(ent2);\r\n-            em.persist(ent);\r\n-        }\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testResultList() {\r\n-        EntityManager em = currentEntityManager();\r\n-        List list = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .getResultList();\r\n-\r\n-        assertEquals(10, list.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testGetSingleList() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String curr = 2 + \"\";\r\n-\r\n-        Entity1 ret =\r\n-            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\r\n-                .getSingleResult();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(\"string2\", ret.getStringField());\r\n-        assertEquals(4, ret.getIntField());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testExecuteUpdate() {\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 2\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(ret, 1);\r\n-\r\n-        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 22\")\r\n-            .executeUpdate();\r\n-\r\n-        assertEquals(ret2, 0);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testSetMaxResults() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .setMaxResults(5)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(l);\r\n-        assertEquals(5, l.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testSetFirstResults() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        List l = em.createQuery(\"Select object(o) from Entity1 o\")\r\n-            .setFirstResult(3)\r\n-            .getResultList();\r\n-\r\n-        Entity1 ent = (Entity1) l.get(0);\r\n-\r\n-        assertNotNull(ent);\r\n-        assertEquals(\"string3\", ent.getStringField());\r\n-        assertEquals(5, ent.getIntField());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    // Tests Binding an argument to a named parameter.\r\n-    // pk, the named parameter --Not working yet--\r\n-    public void xxxtestSetParameter1() {\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        String curr = 2 + \"\";\r\n-\r\n-        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\r\n-            .setParameter(\"pk\", curr)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(1, ret.size());\r\n-\r\n-        ret = em.createNamedQuery(\"setParam1\")\r\n-            .setParameter(\"pk\", curr)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ret);\r\n-        assertEquals(1, ret.size());\r\n-\r\n-        endTx(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.clauses;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.NamedQuery;\n+\n+import org.apache.openjpa.persistence.common.apps.Entity1;\n+import org.apache.openjpa.persistence.common.apps.Entity2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+@NamedQuery(name = \"setParam1\",\n+    query = \"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n+public class TestEJBQueryInterface extends AbstractTestCase {\n+\n+    public TestEJBQueryInterface(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(Entity1.class);\n+\n+        int instNum = 10;\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        //create and persist multiple entity1 instances\n+        for (int i = 0; i < instNum; i++) {\n+            Entity1 ent = new Entity1(i, \"string\" + i, i + 2);\n+            Entity2 ent2 = new Entity2(i * 2, \"ent2\" + i, i);\n+            ent.setEntity2Field(ent2);\n+            em.persist(ent);\n+        }\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testResultList() {\n+        EntityManager em = currentEntityManager();\n+        List list = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .getResultList();\n+\n+        assertEquals(10, list.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testGetSingleList() {\n+        EntityManager em = currentEntityManager();\n+        String curr = 2 + \"\";\n+\n+        Entity1 ret =\n+            (Entity1) em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk = 2\")\n+                .getSingleResult();\n+\n+        assertNotNull(ret);\n+        assertEquals(\"string2\", ret.getStringField());\n+        assertEquals(4, ret.getIntField());\n+\n+        endEm(em);\n+    }\n+\n+    public void testExecuteUpdate() {\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        int ret = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 2\")\n+            .executeUpdate();\n+\n+        assertEquals(ret, 1);\n+\n+        int ret2 = em.createQuery(\"Delete FROM Entity1 o WHERE o.pk = 22\")\n+            .executeUpdate();\n+\n+        assertEquals(ret2, 0);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testSetMaxResults() {\n+        EntityManager em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .setMaxResults(5)\n+            .getResultList();\n+\n+        assertNotNull(l);\n+        assertEquals(5, l.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testSetFirstResults() {\n+        EntityManager em = currentEntityManager();\n+\n+        List l = em.createQuery(\"Select object(o) from Entity1 o\")\n+            .setFirstResult(3)\n+            .getResultList();\n+\n+        Entity1 ent = (Entity1) l.get(0);\n+\n+        assertNotNull(ent);\n+        assertEquals(\"string3\", ent.getStringField());\n+        assertEquals(5, ent.getIntField());\n+\n+        endEm(em);\n+    }\n+\n+    // Tests Binding an argument to a named parameter.\n+    // pk, the named parameter --Not working yet--\n+    public void xxxtestSetParameter1() {\n+\n+        EntityManager em = currentEntityManager();\n+        String curr = 2 + \"\";\n+\n+        List ret = em.createQuery(\"SELECT o FROM Entity1 o WHERE o.pk LIKE :pk\")\n+            .setParameter(\"pk\", curr)\n+            .getResultList();\n+\n+        assertNotNull(ret);\n+        assertEquals(1, ret.size());\n+\n+        ret = em.createNamedQuery(\"setParam1\")\n+            .setParameter(\"pk\", curr)\n+            .getResultList();\n+\n+        assertNotNull(ret);\n+        assertEquals(1, ret.size());\n+\n+        endTx(em);\n+    }\n+}"},{"sha":"c9d2b288ff02332acd3b50c97478a8abdf1b2ee7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","status":"modified","additions":325,"deletions":323,"changes":648,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/expressions/TestEJBQLCondExpression.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,323 +1,325 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.expressions;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.apps.*;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBQLCondExpression extends AbstractTestCase {\r\n-\r\n-    private int userid1, userid2, userid3, userid4, userid5;\r\n-\r\n-    public TestEJBQLCondExpression(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CompUser.class);\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        Address[] add =\r\n-            new Address[]{ new Address(\"43 Sansome\", \"SF\", \"USA\", \"94104\"),\r\n-                new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\r\n-                new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\r\n-                new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\r\n-                new Address(\"23 Bellflower\", \"Ogui\", \"NIGERIA\", \"02000\") };\r\n-\r\n-        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 40, true);\r\n-        CompUser user2 = createUser(\"Shannon\", \"PC\", add[1], 36, false);\r\n-        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\r\n-        CompUser user4 = createUser(\"Jacob\", \"LINUX\", add[3], 10, true);\r\n-        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\r\n-\r\n-        em.persist(user1);\r\n-        userid1 = user1.getUserid();\r\n-        em.persist(user2);\r\n-        userid2 = user2.getUserid();\r\n-        em.persist(user3);\r\n-        userid3 = user3.getUserid();\r\n-        em.persist(user4);\r\n-        userid4 = user4.getUserid();\r\n-        em.persist(user5);\r\n-        userid5 = user5.getUserid();\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testNothing() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT o FROM CompUser o\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"the size of the list is not 5\", 5, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testBetweenExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.age BETWEEN 19 AND 40 AND o.computerName = 'PC'\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"they are not equal\", 2, result.size());\r\n-        assertTrue(\"result dont contain shannon\", result.contains(\"Shannon\"));\r\n-        assertTrue(\"result dont contain ugo\", result.contains(\"Ugo\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testNotBetweenExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.age NOT BETWEEN 19 AND 40 AND o.computerName= 'PC'\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"they are not equal\", 0, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testInExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.age IN (29, 40, 10)\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(3, result.size());\r\n-        assertTrue(\"seetha is not in the list\", result.contains(\"Seetha\"));\r\n-        assertTrue(\"jacob is not in the list\", result.contains(\"Jacob\"));\r\n-        assertTrue(\"famzy is not in the list\", result.contains(\"Famzy\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testNotInExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.age NOT IN (29, 40, 10)\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(2, result.size());\r\n-        assertTrue(result.contains(\"Ugo\"));\r\n-        assertTrue(result.contains(\"Shannon\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testLikeExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%' AND o.computerName NOT IN ('PC')\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(0, result.size());\r\n-\r\n-        query =\r\n-            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%o_' AND o.computerName NOT IN ('UNIX')\";\r\n-\r\n-        result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(1, result.size());\r\n-\r\n-        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE '_J%'\";\r\n-\r\n-        result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(0, result.size());\r\n-\r\n-        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE ?1 ESCAPE '|'\";\r\n-\r\n-        result = em.createQuery(query).setParameter(1, \"%|_%\").getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(0, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testNullExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.age IS NOT NULL AND o.computerName = 'PC' \";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"the list size is not 2\", 2, result.size());\r\n-        assertTrue(\"the result doesnt contain ugo\", result.contains(\"Ugo\"));\r\n-        assertTrue(\"the result doesnt contain shannon\",\r\n-            result.contains(\"Shannon\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testNullExpr2() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.address.country IS NULL\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"they are not equal\", 0, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testIsEmptyExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS NOT EMPTY\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"they are not equal\", 0, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testIsEmptyExpr2() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS EMPTY\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"they are not equal\", 5, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    /**\r\n-     * TO BE TESTED LATER WITH A DIFF DATABASE\r\n-     * public void testMemberOfExpr(){}\r\n-     */\r\n-\r\n-    public void testExistExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT DISTINCT o.name FROM CompUser o WHERE EXISTS\" +\r\n-            \" (SELECT c FROM Address c WHERE c = o.address )\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"the list is null\", result);\r\n-        assertEquals(\"they are not equal\", 5, result.size());\r\n-        assertTrue(\"Seetha is not list\", result.contains(\"Seetha\"));\r\n-        assertTrue(\"Shannon is not list\", result.contains(\"Shannon\"));\r\n-        assertTrue(\"jacob is not list\", result.contains(\"Jacob\"));\r\n-        assertTrue(\"ugo is not list\", result.contains(\"Ugo\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testNotExistExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT DISTINCT o.name FROM CompUser o WHERE NOT EXISTS\" +\r\n-                \" (SELECT s FROM CompUser s WHERE s.address.country = o.address.country)\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"list is null\", result);\r\n-        assertEquals(\"they are not equal\", 0, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testAnyExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT o.name FROM CompUser o WHERE o.address.zipcode = ANY (\" +\r\n-                \" SELECT s.computerName FROM CompUser s WHERE s.address.country IS NOT NULL )\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(\"list is null\", result);\r\n-        assertEquals(\"they are not equal\", 0, result.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testConstructorExpr() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT NEW org.apache.openjpa.persistence.common.apps.MaleUser(c.name, c.computerName, c.address, c.age, c.userid)\" +\r\n-                \" FROM CompUser c WHERE c.name = 'Seetha'\";\r\n-\r\n-        MaleUser male = (MaleUser) em.createQuery(query).getSingleResult();\r\n-\r\n-        assertNotNull(\"the list is null\", male);\r\n-        assertEquals(\"the names dont match\", \"Seetha\", male.getName());\r\n-        assertEquals(\"computer names dont match\", \"MAC\",\r\n-            male.getComputerName());\r\n-        assertEquals(\"the ages dont match\", 40, male.getAge());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public CompUser createUser(String name, String cName, Address add, int age,\r\n-        boolean isMale) {\r\n-        CompUser user = null;\r\n-        if (isMale) {\r\n-            user = new MaleUser();\r\n-            user.setName(name);\r\n-            user.setComputerName(cName);\r\n-            user.setAddress(add);\r\n-            user.setAge(age);\r\n-        } else {\r\n-            user = new FemaleUser();\r\n-            user.setName(name);\r\n-            user.setComputerName(cName);\r\n-            user.setAddress(add);\r\n-            user.setAge(age);\r\n-        }\r\n-        return user;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.expressions;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.apps.*;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBQLCondExpression extends AbstractTestCase {\n+\n+    private int userid1, userid2, userid3, userid4, userid5;\n+\n+    public TestEJBQLCondExpression(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(CompUser.class);\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        Address[] add =\n+            new Address[]{ new Address(\"43 Sansome\", \"SF\", \"USA\", \"94104\"),\n+                new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\n+                new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\n+                new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\n+                new Address(\"23 Bellflower\", \"Ogui\", \"NIGERIA\", \"02000\") };\n+\n+        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 40, true);\n+        CompUser user2 = createUser(\"Shannon\", \"PC\", add[1], 36, false);\n+        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\n+        CompUser user4 = createUser(\"Jacob\", \"LINUX\", add[3], 10, true);\n+        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\n+\n+        em.persist(user1);\n+        userid1 = user1.getUserid();\n+        em.persist(user2);\n+        userid2 = user2.getUserid();\n+        em.persist(user3);\n+        userid3 = user3.getUserid();\n+        em.persist(user4);\n+        userid4 = user4.getUserid();\n+        em.persist(user5);\n+        userid5 = user5.getUserid();\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testNothing() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT o FROM CompUser o\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"the size of the list is not 5\", 5, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testBetweenExpr() {\n+        EntityManager em = currentEntityManager();\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.age BETWEEN 19 AND 40 AND o.computerName = 'PC'\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"they are not equal\", 2, result.size());\n+        assertTrue(\"result dont contain shannon\", result.contains(\"Shannon\"));\n+        assertTrue(\"result dont contain ugo\", result.contains(\"Ugo\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testNotBetweenExpr() {\n+        EntityManager em = currentEntityManager();\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.age NOT BETWEEN 19 AND 40 AND o.computerName= 'PC'\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"they are not equal\", 0, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testInExpr() {\n+        EntityManager em = currentEntityManager();\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.age IN (29, 40, 10)\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(3, result.size());\n+        assertTrue(\"seetha is not in the list\", result.contains(\"Seetha\"));\n+        assertTrue(\"jacob is not in the list\", result.contains(\"Jacob\"));\n+        assertTrue(\"famzy is not in the list\", result.contains(\"Famzy\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testNotInExpr() {\n+        EntityManager em = currentEntityManager();\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.age NOT IN (29, 40, 10)\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(2, result.size());\n+        assertTrue(result.contains(\"Ugo\"));\n+        assertTrue(result.contains(\"Shannon\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testLikeExpr() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%' AND o.computerName NOT IN ('PC')\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(0, result.size());\n+\n+        query =\n+            \"SELECT o.computerName FROM CompUser o WHERE o.name LIKE 'Sha%o_' AND o.computerName NOT IN ('UNIX')\";\n+\n+        result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+\n+        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE '_J%'\";\n+\n+        result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(0, result.size());\n+\n+        query = \"SELECT o.name FROM CompUser o WHERE o.name LIKE ?1 ESCAPE '|'\";\n+\n+        result = em.createQuery(query).setParameter(1, \"%|_%\").getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(0, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testNullExpr() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.age IS NOT NULL AND o.computerName = 'PC' \";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"the list size is not 2\", 2, result.size());\n+        assertTrue(\"the result doesnt contain ugo\", result.contains(\"Ugo\"));\n+        assertTrue(\"the result doesnt contain shannon\",\n+            result.contains(\"Shannon\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testNullExpr2() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.address.country IS NULL\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"they are not equal\", 0, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testIsEmptyExpr() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS NOT EMPTY\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"they are not equal\", 0, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testIsEmptyExpr2() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.nicknames IS EMPTY\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"they are not equal\", 5, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    /**\n+     * TO BE TESTED LATER WITH A DIFF DATABASE\n+     * public void testMemberOfExpr(){}\n+     */\n+\n+    public void testExistExpr() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT DISTINCT o.name FROM CompUser o WHERE EXISTS\" +\n+            \" (SELECT c FROM Address c WHERE c = o.address )\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"the list is null\", result);\n+        assertEquals(\"they are not equal\", 5, result.size());\n+        assertTrue(\"Seetha is not list\", result.contains(\"Seetha\"));\n+        assertTrue(\"Shannon is not list\", result.contains(\"Shannon\"));\n+        assertTrue(\"jacob is not list\", result.contains(\"Jacob\"));\n+        assertTrue(\"ugo is not list\", result.contains(\"Ugo\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testNotExistExpr() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT DISTINCT o.name FROM CompUser o WHERE NOT EXISTS\" +\n+                \" (SELECT s FROM CompUser s WHERE s.address.country = o.address.country)\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"list is null\", result);\n+        assertEquals(\"they are not equal\", 0, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testAnyExpr() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT o.name FROM CompUser o WHERE o.address.zipcode = ANY (\" +\n+                \" SELECT s.computerName FROM CompUser s WHERE s.address.country IS NOT NULL )\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(\"list is null\", result);\n+        assertEquals(\"they are not equal\", 0, result.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testConstructorExpr() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT NEW org.apache.openjpa.persistence.common.apps.MaleUser(c.name, c.computerName, c.address, c.age, c.userid)\" +\n+                \" FROM CompUser c WHERE c.name = 'Seetha'\";\n+\n+        MaleUser male = (MaleUser) em.createQuery(query).getSingleResult();\n+\n+        assertNotNull(\"the list is null\", male);\n+        assertEquals(\"the names dont match\", \"Seetha\", male.getName());\n+        assertEquals(\"computer names dont match\", \"MAC\",\n+            male.getComputerName());\n+        assertEquals(\"the ages dont match\", 40, male.getAge());\n+\n+        endEm(em);\n+    }\n+\n+    public CompUser createUser(String name, String cName, Address add, int age,\n+        boolean isMale) {\n+        CompUser user = null;\n+        if (isMale) {\n+            user = new MaleUser();\n+            user.setName(name);\n+            user.setComputerName(cName);\n+            user.setAddress(add);\n+            user.setAge(age);\n+            user.setNameAsLob(name);\n+        } else {\n+            user = new FemaleUser();\n+            user.setName(name);\n+            user.setComputerName(cName);\n+            user.setAddress(add);\n+            user.setAge(age);\n+            user.setNameAsLob(name);\n+        }\n+        return user;\n+\t}\n+}"},{"sha":"13eb2b1d510622c91fb4f1e4fed5d0ac9c60b4de","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","status":"modified","additions":460,"deletions":397,"changes":857,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/functions/TestEJBQLFunction.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,397 +1,460 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.functions;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.apps.Address;\r\n-import org.apache.openjpa.persistence.common.apps.CompUser;\r\n-import org.apache.openjpa.persistence.common.apps.FemaleUser;\r\n-import org.apache.openjpa.persistence.common.apps.MaleUser;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBQLFunction extends AbstractTestCase {\r\n-\r\n-    private int userid1, userid2, userid3, userid4, userid5, userid6;\r\n-\r\n-    public TestEJBQLFunction(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CompUser.class);\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        Address[] add = new Address[]{\r\n-            new Address(\"43 Sansome\", \"SF\", \"United-Kingdom\", \"94104\"),\r\n-            new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\r\n-            new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\r\n-            new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\r\n-            new Address(\"23 Bellflower\", \"Ogui\", null, \"02000\"),\r\n-            new Address(\"22 Montgomery\", \"SF\", null, \"50054\") };\r\n-\r\n-        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 36, true);\r\n-        CompUser user2 = createUser(\"Shannon \", \"PC\", add[1], 36, false);\r\n-        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\r\n-        CompUser user4 = createUser(\"_Jacob\", \"LINUX\", add[3], 10, true);\r\n-        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\r\n-        CompUser user6 = createUser(\"Shade\", \"UNIX\", add[5], 23, false);\r\n-\r\n-        em.persist(user1);\r\n-        userid1 = user1.getUserid();\r\n-        em.persist(user2);\r\n-        userid2 = user2.getUserid();\r\n-        em.persist(user3);\r\n-        userid3 = user3.getUserid();\r\n-        em.persist(user4);\r\n-        userid4 = user4.getUserid();\r\n-        em.persist(user5);\r\n-        userid5 = user5.getUserid();\r\n-        em.persist(user6);\r\n-        userid6 = user6.getUserid();\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testConcatSubStringFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        CompUser user = em.find(CompUser.class, userid1);\r\n-        assertNotNull(\"user is null\", user);\r\n-        assertEquals(\"the name is not seetha\", \"Seetha\", user.getName());\r\n-\r\n-        String query = \"UPDATE CompUser e SET e.name = \" +\r\n-            \"CONCAT('Ablahum', SUBSTRING(e.name, LOCATE('e', e.name), 4)) \" +\r\n-            \"WHERE e.name='Seetha'\";\r\n-        int result = em.createQuery(query).executeUpdate();\r\n-\r\n-        assertEquals(\"the result is not 1\", 1, result);\r\n-\r\n-        user = em.find(CompUser.class, userid1);\r\n-        em.refresh(user);\r\n-\r\n-        assertNotNull(\"the user is null\", user);\r\n-        assertEquals(\"the users name is not AblahumSeet\", \"Ablahumeeth\",\r\n-            user.getName());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testConcatFunc2() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        CompUser user = em.find(CompUser.class, userid1);\r\n-        assertNotNull(\"the user is null\", user);\r\n-        assertEquals(\"the users name is not seetha\", user.getName(), \"Seetha\");\r\n-\r\n-        String query = \"UPDATE CompUser e \" +\r\n-            \"SET e.name = \" +\r\n-            \"CONCAT('', '') WHERE e.name='Seetha'\";\r\n-        int result = em.createQuery(query).executeUpdate();\r\n-\r\n-        assertEquals(1, result);\r\n-\r\n-        user = em.find(CompUser.class, userid1);\r\n-        em.refresh(user);\r\n-        assertNotNull(user);\r\n-        assertEquals(\"\", user.getName());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testTrimFunc3() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        CompUser user = em.find(CompUser.class, userid2);\r\n-        assertNotNull(user);\r\n-        assertEquals(\"Shannon \", user.getName());\r\n-\r\n-        String query = \"UPDATE CompUser e SET \" +\r\n-            \"e.name = Trim(e.name) WHERE \" +\r\n-            \"e.name='Shannon '\";\r\n-        int result = em.createQuery(query).executeUpdate();\r\n-\r\n-        user = em.find(CompUser.class, userid2);\r\n-        em.refresh(user);\r\n-        assertNotNull(user);\r\n-        assertEquals(\"Shannon\", user.getName());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testLowerFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        CompUser user = em.find(CompUser.class, userid3);\r\n-        assertNotNull(user);\r\n-        assertEquals(\"Ugo\", user.getName());\r\n-\r\n-        String query = \"UPDATE CompUser e SET \" +\r\n-            \"e.name = LOWER(e.name) WHERE e.name='Ugo'\";\r\n-\r\n-        int result = em.createQuery(query).executeUpdate();\r\n-\r\n-        user = em.find(CompUser.class, userid3);\r\n-        em.refresh(user);\r\n-        assertNotNull(user);\r\n-        assertEquals(\"ugo\", user.getName());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testUpperFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        CompUser user = em.find(CompUser.class, userid3);\r\n-        assertNotNull(user);\r\n-        assertEquals(\"Ugo\", user.getName());\r\n-\r\n-        String query = \"UPDATE CompUser e SET \" +\r\n-            \"e.name = UPPER(e.name) WHERE e.name='Ugo'\";\r\n-\r\n-        int result = em.createQuery(query).executeUpdate();\r\n-\r\n-        user = em.find(CompUser.class, userid3);\r\n-        em.refresh(user);\r\n-        assertNotNull(user);\r\n-        assertEquals(\"UGO\", user.getName());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testLengthFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT o.name \" +\r\n-            \"FROM CompUser o \" +\r\n-            \"WHERE LENGTH(o.address.country) = 3\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(1, result.size());\r\n-        assertTrue(result.contains(\"Shannon \"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testArithmFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        CompUser user = em.find(CompUser.class, userid1);\r\n-\r\n-        assertNotNull(user);\r\n-        assertEquals(\"Seetha\", user.getName());\r\n-        assertEquals(36, user.getAge());\r\n-\r\n-        String query =\r\n-            \"UPDATE CompUser e SET e.age = ABS(e.age) WHERE e.name='Seetha'\";\r\n-        int num = em.createQuery(query).executeUpdate();\r\n-\r\n-        assertNotNull(num);\r\n-        assertEquals(1, num);\r\n-\r\n-        user = em.find(CompUser.class, userid1);\r\n-        em.refresh(user);\r\n-\r\n-        assertEquals(36, user.getAge());\r\n-\r\n-        //----------------------ABS Tested\r\n-\r\n-        query =\r\n-            \"UPDATE CompUser e SET e.age = SQRT(e.age) WHERE e.name='Seetha'\";\r\n-        num = em.createQuery(query).executeUpdate();\r\n-\r\n-        assertNotNull(num);\r\n-        assertEquals(1, num);\r\n-\r\n-        user = em.find(CompUser.class, userid1);\r\n-        em.refresh(user);\r\n-\r\n-        assertEquals(6, user.getAge());\r\n-\r\n-        //-------------------------SQRT Tested\r\n-\r\n-        query =\r\n-            \"UPDATE CompUser e SET e.age = MOD(e.age, 4) WHERE e.name='Seetha'\";\r\n-        num = em.createQuery(query).executeUpdate();\r\n-\r\n-        assertNotNull(num);\r\n-        assertEquals(1, num);\r\n-\r\n-        user = em.find(CompUser.class, userid1);\r\n-        em.refresh(user);\r\n-\r\n-        assertEquals(2, user.getAge());\r\n-\r\n-        //-------------------------MOD Tested\r\n-\r\n-        query = \"SELECT e.name FROM CompUser e WHERE SIZE(e.nicknames) = 6\";\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(0, result.size());\r\n-\r\n-        //------------------------SIZE Tested\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testGroupByHavingClause() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT c.name FROM CompUser c GROUP BY c.name HAVING c.name LIKE 'S%'\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(3, result.size());\r\n-        assertTrue(result.contains(\"Shannon \"));\r\n-        assertTrue(result.contains(\"Shade\"));\r\n-        assertTrue(result.contains(\"Seetha\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testOrderByClause() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query =\r\n-            \"SELECT c.name FROM CompUser c WHERE c.name LIKE 'S%' ORDER BY c.name\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(3, result.size());\r\n-        assertTrue(result.contains(\"Shannon \"));\r\n-        assertTrue(result.contains(\"Seetha\"));\r\n-        assertTrue(result.contains(\"Shade\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testAVGAggregFunc() {\r\n-        /**\r\n-         * To be Tested: AVG, COUNT, MAX, MIN, SUM\r\n-         */\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT AVG(e.age) FROM CompUser e\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(1, result.size());\r\n-        assertTrue(result.contains(25));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testCOUNTAggregFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT COUNT(c.name) FROM CompUser c\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(1, result.size());\r\n-        assertTrue(result.contains(6l));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testMAXAggregFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT DISTINCT MAX(c.age) FROM CompUser c\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(1, result.size());\r\n-        assertTrue(result.contains(36));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testMINAggregFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT DISTINCT MIN(c.age) FROM CompUser c\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(1, result.size());\r\n-        assertTrue(result.contains(10));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testSUMAggregFunc() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT SUM(c.age) FROM CompUser c\";\r\n-\r\n-        List result = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(result);\r\n-        assertEquals(1, result.size());\r\n-        assertTrue(result.contains(153l));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public CompUser createUser(String name, String cName, Address add, int age,\r\n-        boolean isMale) {\r\n-        CompUser user = null;\r\n-        if (isMale) {\r\n-            user = new MaleUser();\r\n-            user.setName(name);\r\n-            user.setComputerName(cName);\r\n-            user.setAddress(add);\r\n-            user.setAge(age);\r\n-        } else {\r\n-            user = new FemaleUser();\r\n-            user.setName(name);\r\n-            user.setComputerName(cName);\r\n-            user.setAddress(add);\r\n-            user.setAge(age);\r\n-        }\r\n-        return user;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.functions;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.sql.DBDictionary;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+import org.apache.openjpa.persistence.common.apps.Address;\n+import org.apache.openjpa.persistence.common.apps.CompUser;\n+import org.apache.openjpa.persistence.common.apps.FemaleUser;\n+import org.apache.openjpa.persistence.common.apps.MaleUser;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBQLFunction extends AbstractTestCase {\n+\n+    private int userid1, userid2, userid3, userid4, userid5, userid6;\n+\n+    public TestEJBQLFunction(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(CompUser.class);\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        Address[] add = new Address[]{\n+            new Address(\"43 Sansome\", \"SF\", \"United-Kingdom\", \"94104\"),\n+            new Address(\"24 Mink\", \"ANTIOCH\", \"USA\", \"94513\"),\n+            new Address(\"23 Ogbete\", \"CoalCamp\", \"NIGERIA\", \"00000\"),\n+            new Address(\"10 Wilshire\", \"Worcester\", \"CANADA\", \"80080\"),\n+            new Address(\"23 Bellflower\", \"Ogui\", null, \"02000\"),\n+            new Address(\"22 Montgomery\", \"SF\", null, \"50054\") };\n+\n+        CompUser user1 = createUser(\"Seetha\", \"MAC\", add[0], 36, true);\n+        CompUser user2 = createUser(\"Shannon \", \"PC\", add[1], 36, false);\n+        CompUser user3 = createUser(\"Ugo\", \"PC\", add[2], 19, true);\n+        CompUser user4 = createUser(\"_Jacob\", \"LINUX\", add[3], 10, true);\n+        CompUser user5 = createUser(\"Famzy\", \"UNIX\", add[4], 29, false);\n+        CompUser user6 = createUser(\"Shade\", \"UNIX\", add[5], 23, false);\n+\n+        em.persist(user1);\n+        userid1 = user1.getUserid();\n+        em.persist(user2);\n+        userid2 = user2.getUserid();\n+        em.persist(user3);\n+        userid3 = user3.getUserid();\n+        em.persist(user4);\n+        userid4 = user4.getUserid();\n+        em.persist(user5);\n+        userid5 = user5.getUserid();\n+        em.persist(user6);\n+        userid6 = user6.getUserid();\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testConcatSubStringFunc() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid1);\n+        assertNotNull(\"user is null\", user);\n+        assertEquals(\"the name is not seetha\", \"Seetha\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET e.name = \" +\n+            \"CONCAT('Ablahum', SUBSTRING(e.name, LOCATE('e', e.name), 4)) \" +\n+            \"WHERE e.name='Seetha'\";\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        assertEquals(\"the result is not 1\", 1, result);\n+\n+        user = em.find(CompUser.class, userid1);\n+        em.refresh(user);\n+\n+        assertNotNull(\"the user is null\", user);\n+        assertEquals(\"the users name is not AblahumSeet\", \"Ablahumeeth\",\n+            user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testConcatFunc2() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid1);\n+        assertNotNull(\"the user is null\", user);\n+        assertEquals(\"the users name is not seetha\", user.getName(), \"Seetha\");\n+\n+        String query = \"UPDATE CompUser e \" +\n+            \"SET e.name = \" +\n+            \"CONCAT('', '') WHERE e.name='Seetha'\";\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        assertEquals(1, result);\n+\n+        user = em.find(CompUser.class, userid1);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testTrimFunc3() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid2);\n+        assertNotNull(user);\n+        assertEquals(\"Shannon \", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+            \"e.name = Trim(e.name) WHERE \" +\n+            \"e.name='Shannon '\";\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid2);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"Shannon\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testLowerFunc() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid3);\n+        assertNotNull(user);\n+        assertEquals(\"Ugo\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+            \"e.name = LOWER(e.name) WHERE e.name='Ugo'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid3);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"ugo\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testLowerClobFunc() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) currentEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+                \"e.name = LOWER(e.name) WHERE LOWER(e.nameAsLob)='famzy'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"famzy\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testUpperFunc() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid3);\n+        assertNotNull(user);\n+        assertEquals(\"Ugo\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+            \"e.name = UPPER(e.name) WHERE e.name='Ugo'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid3);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"UGO\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testUpperClobFunc() {\n+        OpenJPAEntityManagerSPI em = (OpenJPAEntityManagerSPI) currentEntityManager();\n+        // some databases do not support case conversion on LOBs,\n+        // just skip this test case\n+        DBDictionary dict = ((JDBCConfiguration) em.getConfiguration())\n+            .getDBDictionaryInstance();\n+        if (!dict.supportsCaseConversionForLob) {\n+            return;\n+        }\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid5);\n+        assertNotNull(user);\n+        assertEquals(\"Famzy\", user.getName());\n+\n+        String query = \"UPDATE CompUser e SET \" +\n+                \"e.name = UPPER(e.name) WHERE UPPER(e.nameAsLob)='FAMZY'\";\n+\n+        int result = em.createQuery(query).executeUpdate();\n+\n+        user = em.find(CompUser.class, userid5);\n+        em.refresh(user);\n+        assertNotNull(user);\n+        assertEquals(\"FAMZY\", user.getName());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testLengthFunc() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT o.name \" +\n+            \"FROM CompUser o \" +\n+            \"WHERE LENGTH(o.address.country) = 3\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertTrue(result.contains(\"Shannon \"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testArithmFunc() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        CompUser user = em.find(CompUser.class, userid1);\n+\n+        assertNotNull(user);\n+        assertEquals(\"Seetha\", user.getName());\n+        assertEquals(36, user.getAge());\n+\n+        String query =\n+            \"UPDATE CompUser e SET e.age = ABS(e.age) WHERE e.name='Seetha'\";\n+        int num = em.createQuery(query).executeUpdate();\n+\n+        assertNotNull(num);\n+        assertEquals(1, num);\n+\n+        user = em.find(CompUser.class, userid1);\n+        em.refresh(user);\n+\n+        assertEquals(36, user.getAge());\n+\n+        //----------------------ABS Tested\n+\n+        query =\n+            \"UPDATE CompUser e SET e.age = SQRT(e.age) WHERE e.name='Seetha'\";\n+        num = em.createQuery(query).executeUpdate();\n+\n+        assertNotNull(num);\n+        assertEquals(1, num);\n+\n+        user = em.find(CompUser.class, userid1);\n+        em.refresh(user);\n+\n+        assertEquals(6, user.getAge());\n+\n+        //-------------------------SQRT Tested\n+\n+        query =\n+            \"UPDATE CompUser e SET e.age = MOD(e.age, 4) WHERE e.name='Seetha'\";\n+        num = em.createQuery(query).executeUpdate();\n+\n+        assertNotNull(num);\n+        assertEquals(1, num);\n+\n+        user = em.find(CompUser.class, userid1);\n+        em.refresh(user);\n+\n+        assertEquals(2, user.getAge());\n+\n+        //-------------------------MOD Tested\n+\n+        query = \"SELECT e.name FROM CompUser e WHERE SIZE(e.nicknames) = 6\";\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(0, result.size());\n+\n+        //------------------------SIZE Tested\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testGroupByHavingClause() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT c.name FROM CompUser c GROUP BY c.name HAVING c.name LIKE 'S%'\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(3, result.size());\n+        assertTrue(result.contains(\"Shannon \"));\n+        assertTrue(result.contains(\"Shade\"));\n+        assertTrue(result.contains(\"Seetha\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testOrderByClause() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query =\n+            \"SELECT c.name FROM CompUser c WHERE c.name LIKE 'S%' ORDER BY c.name\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(3, result.size());\n+        assertTrue(result.contains(\"Shannon \"));\n+        assertTrue(result.contains(\"Seetha\"));\n+        assertTrue(result.contains(\"Shade\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testAVGAggregFunc() {\n+        /**\n+         * To be Tested: AVG, COUNT, MAX, MIN, SUM\n+         */\n+\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT AVG(e.age) FROM CompUser e\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertTrue(result.contains(25));\n+\n+        endEm(em);\n+    }\n+\n+    public void testCOUNTAggregFunc() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT COUNT(c.name) FROM CompUser c\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertTrue(result.contains(6l));\n+\n+        endEm(em);\n+    }\n+\n+    public void testMAXAggregFunc() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT DISTINCT MAX(c.age) FROM CompUser c\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertTrue(result.contains(36));\n+\n+        endEm(em);\n+    }\n+\n+    public void testMINAggregFunc() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT DISTINCT MIN(c.age) FROM CompUser c\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertTrue(result.contains(10));\n+\n+        endEm(em);\n+    }\n+\n+    public void testSUMAggregFunc() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT SUM(c.age) FROM CompUser c\";\n+\n+        List result = em.createQuery(query).getResultList();\n+\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        assertTrue(result.contains(153l));\n+\n+        endEm(em);\n+    }\n+\n+    public CompUser createUser(String name, String cName, Address add, int age,\n+        boolean isMale) {\n+        CompUser user = null;\n+        if (isMale) {\n+            user = new MaleUser();\n+            user.setName(name);\n+            user.setComputerName(cName);\n+            user.setAddress(add);\n+            user.setAge(age);\n+            user.setNameAsLob(name);\n+        } else {\n+            user = new FemaleUser();\n+            user.setName(name);\n+            user.setComputerName(cName);\n+            user.setAddress(add);\n+            user.setAge(age);\n+            user.setNameAsLob(name);\n+        }\n+        return user;\n+    }\n+}"},{"sha":"360c81d20ecf71119495088c242aee2a5613bb30","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","status":"modified","additions":180,"deletions":180,"changes":360,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jpql/joins/TestEJBJoins.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,180 +1,180 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.jpql.joins;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.common.apps.ArtCourse;\r\n-import org.apache.openjpa.persistence.common.apps.Course;\r\n-import org.apache.openjpa.persistence.common.apps.Department;\r\n-import org.apache.openjpa.persistence.common.apps.Student;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBJoins extends AbstractTestCase {\r\n-\r\n-    public TestEJBJoins(String name) {\r\n-        super(name, \"jpqlclausescactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(Course.class);\r\n-        deleteAll(Student.class);\r\n-        deleteAll(Department.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        String name = \"\";\r\n-        List<Course> clist = new ArrayList<Course>();\r\n-        List<Department> dlist = new ArrayList<Department>();\r\n-\r\n-        for (int i = 0; i < 5; i++) {\r\n-            Course curr = new Course(\"Math \" + i, i * 2, i);\r\n-            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\r\n-            Department durr = new Department(\"CompSci\" + i, null, i + 2);\r\n-            clist.add(curr);\r\n-            clist.add(acurr);\r\n-            dlist.add(durr);\r\n-        }\r\n-\r\n-        Student stud = new Student(\"Jonathan\", clist, dlist);\r\n-        Student stud2 = new Student(\"Stam\", null, dlist);\r\n-        Student stud3 = new Student(\"John\", clist, null);\r\n-        Student stud4 = new Student(\"Bill\", null, null);\r\n-\r\n-        em.persist(stud);\r\n-        em.persist(stud2);\r\n-        em.persist(stud3);\r\n-        em.persist(stud4);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testInnerJoin() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT distinct o.name from Student o JOIN \" +\r\n-            \"o.course d WHERE d.name\" +\r\n-            \"='Math 4'\";\r\n-\r\n-        List ls = (List) em.createQuery(query)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-\r\n-        if (ls != null) {\r\n-            assertEquals(2, ls.size());\r\n-        }\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testOuterJoin() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT distinct s.name FROM Student \" +\r\n-            \"s LEFT JOIN s.department d\";\r\n-\r\n-        List ls = (List) em.createQuery(query)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(4, ls.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testFetchJoin1() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT s FROM Student s JOIN FETCH s.name\";\r\n-\r\n-        List ls = em.createQuery(query).getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(4, ls.size());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testFetchJoin2() {\r\n-        EntityManager em = currentEntityManager();\r\n-        String query = \"SELECT s \" +\r\n-            \"FROM Student s \" +\r\n-            \"JOIN FETCH s.name d\";\r\n-\r\n-        try {\r\n-            List ls = em.createQuery(query).getResultList();\r\n-            fail(\r\n-                \"Not permitted to specify an id variable for entities ref. by the right side of fetch join\");\r\n-        }\r\n-        catch (Exception e) {\r\n-            //suppose to throw an exception..should not pass\r\n-        }\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testLeftOuterJoin() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String ljoin =\r\n-            \"SELECT DISTINCT s.name FROM Student s LEFT OUTER JOIN s.department d \" +\r\n-                \"WHERE d.name = 'CompSci2'\";\r\n-\r\n-        List ls = em.createQuery(ljoin).getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(2, ls.size());\r\n-\r\n-        assertTrue(ls.contains(\"Jonathan\"));\r\n-        assertTrue(ls.contains(\"Stam\"));\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testInnerJoinFetch() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT s FROM Student \" +\r\n-            \"s JOIN FETCH s.department\";\r\n-\r\n-        List ls = (List) em.createQuery(query)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(2, ls.size());\r\n-\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testLeftJoinFetch() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        String query = \"SELECT s FROM Student \" +\r\n-            \"s LEFT JOIN FETCH s.department\";\r\n-\r\n-        List ls = (List) em.createQuery(query)\r\n-            .getResultList();\r\n-\r\n-        assertNotNull(ls);\r\n-        assertEquals(4, ls.size());\r\n-\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.jpql.joins;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.common.apps.ArtCourse;\n+import org.apache.openjpa.persistence.common.apps.Course;\n+import org.apache.openjpa.persistence.common.apps.Department;\n+import org.apache.openjpa.persistence.common.apps.Student;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBJoins extends AbstractTestCase {\n+\n+    public TestEJBJoins(String name) {\n+        super(name, \"jpqlclausescactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(Course.class);\n+        deleteAll(Student.class);\n+        deleteAll(Department.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        String name = \"\";\n+        List<Course> clist = new ArrayList<Course>();\n+        List<Department> dlist = new ArrayList<Department>();\n+\n+        for (int i = 0; i < 5; i++) {\n+            Course curr = new Course(\"Math \" + i, i * 2, i);\n+            Course acurr = new ArtCourse(i + 20, \"English\" + (2 * i));\n+            Department durr = new Department(\"CompSci\" + i, null, i + 2);\n+            clist.add(curr);\n+            clist.add(acurr);\n+            dlist.add(durr);\n+        }\n+\n+        Student stud = new Student(\"Jonathan\", clist, dlist);\n+        Student stud2 = new Student(\"Stam\", null, dlist);\n+        Student stud3 = new Student(\"John\", clist, null);\n+        Student stud4 = new Student(\"Bill\", null, null);\n+\n+        em.persist(stud);\n+        em.persist(stud2);\n+        em.persist(stud3);\n+        em.persist(stud4);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testInnerJoin() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT distinct o.name from Student o JOIN \" +\n+            \"o.course d WHERE d.name\" +\n+            \"='Math 4'\";\n+\n+        List ls = (List) em.createQuery(query)\n+            .getResultList();\n+\n+        assertNotNull(ls);\n+\n+        if (ls != null) {\n+            assertEquals(2, ls.size());\n+        }\n+        endEm(em);\n+    }\n+\n+    public void testOuterJoin() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT distinct s.name FROM Student \" +\n+            \"s LEFT JOIN s.department d\";\n+\n+        List ls = (List) em.createQuery(query)\n+            .getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(4, ls.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testFetchJoin1() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT s FROM Student s JOIN FETCH s.name\";\n+\n+        List ls = em.createQuery(query).getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(4, ls.size());\n+\n+        endEm(em);\n+    }\n+\n+    public void testFetchJoin2() {\n+        EntityManager em = currentEntityManager();\n+        String query = \"SELECT s \" +\n+            \"FROM Student s \" +\n+            \"JOIN FETCH s.name d\";\n+\n+        try {\n+            List ls = em.createQuery(query).getResultList();\n+            fail(\n+                \"Not permitted to specify an id variable for entities ref. by the right side of fetch join\");\n+        }\n+        catch (Exception e) {\n+            //suppose to throw an exception..should not pass\n+        }\n+\n+        endEm(em);\n+    }\n+\n+    public void testLeftOuterJoin() {\n+        EntityManager em = currentEntityManager();\n+\n+        String ljoin =\n+            \"SELECT DISTINCT s.name FROM Student s LEFT OUTER JOIN s.department d \" +\n+                \"WHERE d.name = 'CompSci2'\";\n+\n+        List ls = em.createQuery(ljoin).getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(2, ls.size());\n+\n+        assertTrue(ls.contains(\"Jonathan\"));\n+        assertTrue(ls.contains(\"Stam\"));\n+\n+        endEm(em);\n+    }\n+\n+    public void testInnerJoinFetch() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT s FROM Student \" +\n+            \"s JOIN FETCH s.department\";\n+\n+        List ls = (List) em.createQuery(query)\n+            .getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(2, ls.size());\n+\n+        em.close();\n+    }\n+\n+    public void testLeftJoinFetch() {\n+        EntityManager em = currentEntityManager();\n+\n+        String query = \"SELECT s FROM Student \" +\n+            \"s LEFT JOIN FETCH s.department\";\n+\n+        List ls = (List) em.createQuery(query)\n+            .getResultList();\n+\n+        assertNotNull(ls);\n+        assertEquals(4, ls.size());\n+\n+        em.close();\n+    }\n+}"},{"sha":"c3817cf30314537f5bb3c107356cbc9e37b4682f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","status":"modified","additions":207,"deletions":207,"changes":414,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/BaseKernelTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,207 +1,207 @@\n-/*\r\n- * BaseKernelTest.java\r\n- *\r\n- * Created on October 9, 2006, 12:56 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.beans.BeanInfo;\r\n-import java.beans.Introspector;\r\n-import java.beans.PropertyDescriptor;\r\n-import java.lang.reflect.InvocationTargetException;\r\n-import java.lang.reflect.Method;\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.*;\r\n-import javax.management.IntrospectionException;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.*;\r\n-import java.lang.annotation.Annotation;\r\n-import junit.framework.*;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-\r\n-public abstract class BaseKernelTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase\r\n-{    \r\n-    private static Map _sysprops = new HashMap();    \r\n-    \r\n-    /** Creates a new instance of BaseKernelTest */\r\n-    public BaseKernelTest() {\r\n-    }\r\n-    \r\n-    public BaseKernelTest(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-    \r\n-    protected OpenJPAEntityManager getPM() {\r\n-        return currentEntityManager();\r\n-    }\r\n-    \r\n-    protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues) \r\n-    {\r\n-        OpenJPAEntityManager em = currentEntityManager();\r\n-        em.setNontransactionalRead(true);\r\n-        em.setRetainState(retainValues);\r\n-        if(em.getTransaction().isActive())\r\n-        {\r\n-            em.getTransaction().commit();\r\n-            em.setOptimistic(optimistic);\r\n-        }\r\n-\r\n-        return em;\r\n-    }\r\n-    \r\n-    protected Object persist(Object ob) {\r\n-        //FIXME  - this is just a workaround \r\n-        //  Broker broker = .getBrokerFactory().newBroker();\r\n-        Broker broker = JPAFacadeHelper.toBroker(currentEntityManager());\r\n-        broker.begin();\r\n-        broker.persist(ob, null);\r\n-        Object id = broker.getObjectId(ob);\r\n-        broker.commit();\r\n-        broker.close();\r\n-        return id;\r\n-    }\r\n-    \r\n-\r\n-    protected Properties getProperties() {\r\n-        return getProperties(null);\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the runtime properties, optionally overriding or setting\r\n-     * some via the given array, which should be in the form\r\n-     * { key, val, key, val, ... }.\r\n-     */\r\n-    protected synchronized Properties getProperties(String[] props) {\r\n-        Properties p = new Properties(System.getProperties());\r\n-        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\r\n-        if (str != null && str.length() > 0) {\r\n-            // cache system properties to reduce load on file system\r\n-            Properties loaded = (Properties) _sysprops.get(str);\r\n-            if (loaded == null) {\r\n-                loaded = new Properties();\r\n-                ConfigurationProvider cp = (ConfigurationProvider) Configurations.getProperty(str, null);\r\n-\r\n-                if (cp != null)\r\n-                    loaded.putAll(cp.getProperties());\r\n-                _sysprops.put(str, loaded);\r\n-            }\r\n-            p.putAll(loaded);\r\n-        }\r\n-\r\n-        for (int i = 0; props != null && i < props.length; i += 2) {\r\n-            if (props[i + 1] != null) {\r\n-                // remove any duplicate kodo/openjpa property so we don't clash\r\n-                if (props[i].startsWith(\"openjpa.\"))\r\n-                    p.remove(\"openjpa.\" + props[i].substring(5));\r\n-                else if (props[i].startsWith(\"openjpa.\"))\r\n-                    p.remove(\"openjpa.\" + props[i].substring(8));\r\n-\r\n-                p.setProperty(props[i], props[i + 1]);\r\n-            } else {\r\n-                p.remove(props[i]);\r\n-            }\r\n-        }\r\n-        return p;\r\n-    }\r\n-//\r\n-//\r\n-//    /**\r\n-//     * Assert that the given List contain the exact same\r\n-//     * elements. This is different than the normal List contract, which\r\n-//     * states that list1.equals(list2) if each element e1.equals(e2).\r\n-//     * This method asserts that e1 == n2.\r\n-//     */\r\n-//    public static void assertIdentical(List c1, List c2) {\r\n-//        assertEquals(c1.size(), c2.size());\r\n-//        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\r\n-//            i1.hasNext() && i2.hasNext();)\r\n-//            assertTrue(i1.next() == i2.next());\r\n-//    }\r\n-//\r\n-//    /**\r\n-//     * Assert that the collection parameter is already ordered\r\n-//     * according to the specified comparator.\r\n-//     */\r\n-//    public void assertOrdered(Collection c, Comparator comp) {\r\n-//        List l1 = new LinkedList(c);\r\n-//        List l2 = new LinkedList(c);\r\n-//        assertEquals(l1, l2);\r\n-//        Collections.sort(l2, comp);\r\n-//        assertEquals(l1, l2);\r\n-//        Collections.sort(l1, comp);\r\n-//        assertEquals(l1, l2);\r\n-//    }\r\n-//\r\n-//    ////////////////////\r\n-//    // Assertion Helpers\r\n-//    ////////////////////\r\n-//\r\n-//    public void assertNotEquals(Object a, Object b) {\r\n-//        if (a == null && b != null)\r\n-//            return;\r\n-//        if (a != null && b == null)\r\n-//            return;\r\n-//        if (!(a.equals(b)))\r\n-//            return;\r\n-//        if (!(b.equals(a)))\r\n-//            return;\r\n-//\r\n-//        fail(\"expected !<\" + a + \">.equals(<\" + b + \">)\");\r\n-//    }\r\n-//\r\n-//    public void assertSize(int size, Object ob) {\r\n-//        if (ob == null) {\r\n-//            assertEquals(size, 0);\r\n-//            return;\r\n-//        }\r\n-//\r\n-//        if (ob instanceof Collection)\r\n-//            ob = ((Collection) ob).iterator();\r\n-//        if (ob instanceof Iterator) {\r\n-//            Iterator i = (Iterator) ob;\r\n-//            int count = 0;\r\n-//            while (i.hasNext()) {\r\n-//                count++;\r\n-//                i.next();\r\n-//            }\r\n-//\r\n-//            assertEquals(size, count);\r\n-//        } else\r\n-//            fail(\"assertSize: expected Collection, Iterator, \"\r\n-//                + \"Query, or Extent, but got \"\r\n-//                + ob.getClass().getName());\r\n-//    }\r\n-    \r\n-}\r\n+/*\n+ * BaseKernelTest.java\n+ *\n+ * Created on October 9, 2006, 12:56 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.*;\n+import javax.management.IntrospectionException;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.kernel.common.apps.*;\n+import java.lang.annotation.Annotation;\n+import junit.framework.*;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+\n+public abstract class BaseKernelTest extends org.apache.openjpa.persistence.common.utils.AbstractTestCase\n+{    \n+    private static Map _sysprops = new HashMap();    \n+    \n+    /** Creates a new instance of BaseKernelTest */\n+    public BaseKernelTest() {\n+    }\n+    \n+    public BaseKernelTest(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+    \n+    protected OpenJPAEntityManager getPM() {\n+        return currentEntityManager();\n+    }\n+    \n+    protected OpenJPAEntityManager getPM(boolean optimistic,boolean retainValues) \n+    {\n+        OpenJPAEntityManager em = currentEntityManager();\n+        em.setNontransactionalRead(true);\n+        em.setRetainState(retainValues);\n+        if(em.getTransaction().isActive())\n+        {\n+            em.getTransaction().commit();\n+            em.setOptimistic(optimistic);\n+        }\n+\n+        return em;\n+    }\n+    \n+    protected Object persist(Object ob) {\n+        //FIXME  - this is just a workaround \n+        //  Broker broker = .getBrokerFactory().newBroker();\n+        Broker broker = JPAFacadeHelper.toBroker(currentEntityManager());\n+        broker.begin();\n+        broker.persist(ob, null);\n+        Object id = broker.getObjectId(ob);\n+        broker.commit();\n+        broker.close();\n+        return id;\n+    }\n+    \n+\n+    protected Properties getProperties() {\n+        return getProperties(null);\n+    }\n+\n+    /**\n+     * Return the runtime properties, optionally overriding or setting\n+     * some via the given array, which should be in the form\n+     * { key, val, key, val, ... }.\n+     */\n+    protected synchronized Properties getProperties(String[] props) {\n+        Properties p = new Properties(System.getProperties());\n+        String str = p.getProperty(\"openjpa.properties\", \"kodo.properties\");\n+        if (str != null && str.length() > 0) {\n+            // cache system properties to reduce load on file system\n+            Properties loaded = (Properties) _sysprops.get(str);\n+            if (loaded == null) {\n+                loaded = new Properties();\n+                ConfigurationProvider cp = (ConfigurationProvider) Configurations.getProperty(str, null);\n+\n+                if (cp != null)\n+                    loaded.putAll(cp.getProperties());\n+                _sysprops.put(str, loaded);\n+            }\n+            p.putAll(loaded);\n+        }\n+\n+        for (int i = 0; props != null && i < props.length; i += 2) {\n+            if (props[i + 1] != null) {\n+                // remove any duplicate kodo/openjpa property so we don't clash\n+                if (props[i].startsWith(\"openjpa.\"))\n+                    p.remove(\"openjpa.\" + props[i].substring(5));\n+                else if (props[i].startsWith(\"openjpa.\"))\n+                    p.remove(\"openjpa.\" + props[i].substring(8));\n+\n+                p.setProperty(props[i], props[i + 1]);\n+            } else {\n+                p.remove(props[i]);\n+            }\n+        }\n+        return p;\n+    }\n+//\n+//\n+//    /**\n+//     * Assert that the given List contain the exact same\n+//     * elements. This is different than the normal List contract, which\n+//     * states that list1.equals(list2) if each element e1.equals(e2).\n+//     * This method asserts that e1 == n2.\n+//     */\n+//    public static void assertIdentical(List c1, List c2) {\n+//        assertEquals(c1.size(), c2.size());\n+//        for (Iterator i1 = c1.iterator(), i2 = c2.iterator();\n+//            i1.hasNext() && i2.hasNext();)\n+//            assertTrue(i1.next() == i2.next());\n+//    }\n+//\n+//    /**\n+//     * Assert that the collection parameter is already ordered\n+//     * according to the specified comparator.\n+//     */\n+//    public void assertOrdered(Collection c, Comparator comp) {\n+//        List l1 = new LinkedList(c);\n+//        List l2 = new LinkedList(c);\n+//        assertEquals(l1, l2);\n+//        Collections.sort(l2, comp);\n+//        assertEquals(l1, l2);\n+//        Collections.sort(l1, comp);\n+//        assertEquals(l1, l2);\n+//    }\n+//\n+//    ////////////////////\n+//    // Assertion Helpers\n+//    ////////////////////\n+//\n+//    public void assertNotEquals(Object a, Object b) {\n+//        if (a == null && b != null)\n+//            return;\n+//        if (a != null && b == null)\n+//            return;\n+//        if (!(a.equals(b)))\n+//            return;\n+//        if (!(b.equals(a)))\n+//            return;\n+//\n+//        fail(\"expected !<\" + a + \">.equals(<\" + b + \">)\");\n+//    }\n+//\n+//    public void assertSize(int size, Object ob) {\n+//        if (ob == null) {\n+//            assertEquals(size, 0);\n+//            return;\n+//        }\n+//\n+//        if (ob instanceof Collection)\n+//            ob = ((Collection) ob).iterator();\n+//        if (ob instanceof Iterator) {\n+//            Iterator i = (Iterator) ob;\n+//            int count = 0;\n+//            while (i.hasNext()) {\n+//                count++;\n+//                i.next();\n+//            }\n+//\n+//            assertEquals(size, count);\n+//        } else\n+//            fail(\"assertSize: expected Collection, Iterator, \"\n+//                + \"Query, or Extent, but got \"\n+//                + ob.getClass().getName());\n+//    }\n+    \n+}"},{"sha":"e7bf9842875cf20b2c8871c3dd6eaf769e03701a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","status":"modified","additions":135,"deletions":135,"changes":270,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/Test2EJBConcurrency.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,135 +1,135 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.Entity1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class Test2EJBConcurrency extends AbstractTestCase {\r\n-\r\n-    private Object _id = null;\r\n-\r\n-    public Test2EJBConcurrency(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        deleteAll(Entity1.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        Entity1 b = new Entity1(3, \"STRING\", 10);\r\n-        em.persist(b);\r\n-        em.flush();\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    /**\r\n-     * Test optimistic concurrency.\r\n-     */\r\n-    public void testOptConcurrency1()\r\n-        throws Exception {\r\n-        EntityManager em1 = currentEntityManager();\r\n-        startTx(em1);\r\n-\r\n-        EntityManager em2 = currentEntityManager();\r\n-        startTx(em2);\r\n-\r\n-        Entity1 b1 = (Entity1) em1.find(Entity1.class, 3);\r\n-        b1.setStringField(\"STRING2\");\r\n-        endTx(em1);\r\n-        assertEquals(\"b1.getstringField is not STRING2 as exp.\", \"STRING2\",\r\n-            b1.getStringField());\r\n-\r\n-        Entity1 b2 = (Entity1) em2.find(Entity1.class, 3);\r\n-        assertEquals(\"b2.getstringField is not STRING2 as exp.\", \"STRING2\",\r\n-            b2.getStringField());\r\n-        b2.setStringField(\"STRING3\");\r\n-        endTx(em2);\r\n-        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\r\n-            b2.getStringField());\r\n-\r\n-        startTx(em1);\r\n-        b1 = (Entity1) em1.find(Entity1.class, 3);\r\n-        em1.refresh(b1);\r\n-        assertEquals(\"b1.getstringField is not STRING3 as exp.\", \"STRING2\",\r\n-            b1.getStringField());\r\n-        b1.setStringField(\"STRING4\");\r\n-        endTx(em1);\r\n-\r\n-        b2 = (Entity1) em2.find(Entity1.class, 3);\r\n-        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\r\n-            b2.getStringField());\r\n-\r\n-        endEm(em1);\r\n-        endEm(em2);\r\n-    }\r\n-\r\n-    /**\r\n-     *\tTest optimistic concurrency.\r\n-     */\r\n-//\tpublic void testOptConcurrency2 ()\r\n-//\t\tthrows Exception\r\n-//\t{\r\n-//\t\tEntityManager em1 = currentEntityManager();\t\t\r\n-//\t\tstartTx(em1);\r\n-//\r\n-//\t\tEntityManager em2 = currentEntityManager();\t\t\r\n-//\t\tstartTx(em2);\r\n-//\r\n-//\t\tEntity1 b1 = (Entity1) em1.find (Entity1.class, 3);\r\n-//\t\tEntity1 b2 = (Entity1) em2.find (Entity1.class, 3);\r\n-//\r\n-//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING\", b1.getStringField ());\r\n-//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\r\n-//\r\n-//\t\tb1.setStringField (\"STRING2\");\r\n-//\t\tendTx(em1);\r\n-//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING2\", b1.getStringField ());\r\n-//\r\n-//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\r\n-//\t\tb2.setStringField (\"STRING3\");\r\n-//\r\n-//\t\ttry\r\n-//\t\t{\r\n-//\t\t\tendTx(em2);\r\n-//\t\t\tfail (\"OL Violation\");\r\n-//\t\t}\r\n-//\t\tcatch (Exception ole)\r\n-//\t\t{\r\n-//\t\t\t// expected\r\n-//\t\t}\r\n-//\t\t\r\n-//\t\trollbackTx(em2);\r\n-//\t\t\r\n-//\r\n-//    \tb2 = (Entity1) em2.find (Entity1.class, 3);\r\n-//\t\tassertEquals (\"b2.getstringField is not STRING2 as exp.\",\"STRING2\", b2.getStringField ());\r\n-//    \t\r\n-//\t\tendEm(em1);\r\n-//\t\tendEm(em2);\r\n-//\t}\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.Entity1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class Test2EJBConcurrency extends AbstractTestCase {\n+\n+    private Object _id = null;\n+\n+    public Test2EJBConcurrency(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() throws Exception {\n+        deleteAll(Entity1.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        Entity1 b = new Entity1(3, \"STRING\", 10);\n+        em.persist(b);\n+        em.flush();\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    /**\n+     * Test optimistic concurrency.\n+     */\n+    public void testOptConcurrency1()\n+        throws Exception {\n+        EntityManager em1 = currentEntityManager();\n+        startTx(em1);\n+\n+        EntityManager em2 = currentEntityManager();\n+        startTx(em2);\n+\n+        Entity1 b1 = (Entity1) em1.find(Entity1.class, 3);\n+        b1.setStringField(\"STRING2\");\n+        endTx(em1);\n+        assertEquals(\"b1.getstringField is not STRING2 as exp.\", \"STRING2\",\n+            b1.getStringField());\n+\n+        Entity1 b2 = (Entity1) em2.find(Entity1.class, 3);\n+        assertEquals(\"b2.getstringField is not STRING2 as exp.\", \"STRING2\",\n+            b2.getStringField());\n+        b2.setStringField(\"STRING3\");\n+        endTx(em2);\n+        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\n+            b2.getStringField());\n+\n+        startTx(em1);\n+        b1 = (Entity1) em1.find(Entity1.class, 3);\n+        em1.refresh(b1);\n+        assertEquals(\"b1.getstringField is not STRING3 as exp.\", \"STRING2\",\n+            b1.getStringField());\n+        b1.setStringField(\"STRING4\");\n+        endTx(em1);\n+\n+        b2 = (Entity1) em2.find(Entity1.class, 3);\n+        assertEquals(\"b2.getstringField is not STRING3 as exp.\", \"STRING3\",\n+            b2.getStringField());\n+\n+        endEm(em1);\n+        endEm(em2);\n+    }\n+\n+    /**\n+     *\tTest optimistic concurrency.\n+     */\n+//\tpublic void testOptConcurrency2 ()\n+//\t\tthrows Exception\n+//\t{\n+//\t\tEntityManager em1 = currentEntityManager();\t\t\n+//\t\tstartTx(em1);\n+//\n+//\t\tEntityManager em2 = currentEntityManager();\t\t\n+//\t\tstartTx(em2);\n+//\n+//\t\tEntity1 b1 = (Entity1) em1.find (Entity1.class, 3);\n+//\t\tEntity1 b2 = (Entity1) em2.find (Entity1.class, 3);\n+//\n+//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING\", b1.getStringField ());\n+//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\n+//\n+//\t\tb1.setStringField (\"STRING2\");\n+//\t\tendTx(em1);\n+//\t\tassertEquals (\"b1.getstringField is not STRING as exp.\",\"STRING2\", b1.getStringField ());\n+//\n+//\t\tassertEquals (\"b2.getstringField is not STRING as exp.\",\"STRING\", b2.getStringField ());\n+//\t\tb2.setStringField (\"STRING3\");\n+//\n+//\t\ttry\n+//\t\t{\n+//\t\t\tendTx(em2);\n+//\t\t\tfail (\"OL Violation\");\n+//\t\t}\n+//\t\tcatch (Exception ole)\n+//\t\t{\n+//\t\t\t// expected\n+//\t\t}\n+//\t\t\n+//\t\trollbackTx(em2);\n+//\t\t\n+//\n+//    \tb2 = (Entity1) em2.find (Entity1.class, 3);\n+//\t\tassertEquals (\"b2.getstringField is not STRING2 as exp.\",\"STRING2\", b2.getStringField ());\n+//    \t\n+//\t\tendEm(em1);\n+//\t\tendEm(em2);\n+//\t}\n+}\n+"},{"sha":"ae112788785c9d2fbb3ffa4c8207c6c93476666e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestAbstractMappedAppIdSuper.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,85 +1,85 @@\n-/*\r\n- * TestAbstractMappedAppIdSuper.java\r\n- *\r\n- * Created on October 16, 2006, 2:00 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-public class TestAbstractMappedAppIdSuper extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestAbstractMappedAppIdSuper\r\n-     */\r\n-    public TestAbstractMappedAppIdSuper(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    /* Fix Me - aokeke - Takes so much time to run */\r\n-//    public void testQuerySubclassWithDifferentIdClass()\r\n-//    throws Exception {\r\n-//        ConcreteMappedAppIdSub pc = new ConcreteMappedAppIdSub();\r\n-//        String pk = String.valueOf(System.currentTimeMillis());\r\n-//        pc.setPk(pk);\r\n-//        pc.setName(\"name\");\r\n-//        \r\n-//        OpenJPAEntityManager pm = getPM();\r\n-//        pm.begin();\r\n-//        pm.persist(pc);\r\n-//        pm.commit();\r\n-//        String pkd = pc.getPk();\r\n-//        Object oid = pm.getObjectId(pc);\r\n-//        endEm(pm,());\r\n-//        \r\n-//        pm = getPM();\r\n-//        String query = \"SELECT DISTINCT o FROM ConcreteMappedAppIdSub o WHERE o.pk = :p \";\r\n-//        OpenJPAQuery q = pm.createQuery(query);\r\n-//        \r\n-////        OpenJPAQuery q = pm.createNativeQuery(\"pk == :p\", ConcreteMappedAppIdSub.class);\r\n-//        //FIXME jthomas\r\n-//        \r\n-//        try \r\n-//        {\r\n-//            pc = (ConcreteMappedAppIdSub) q.setParameter(\"p\", pkd).getSingleResult();\r\n-//        } \r\n-//        catch (RuntimeException re) \r\n-//        {\r\n-////            bug(1170, re, \"Cannot query subclass of abstract mapped \"\r\n-////                    + \"appid type.\");\r\n-////            return;\r\n-//        }\r\n-//         \r\n-//        assertNotNull(pc);\r\n-//        assertEquals(pk, pc.getPk());\r\n-//        \r\n-//        pm.begin();\r\n-//        pm.remove(pc);\r\n-//        pm.commit();\r\n-//        endEm(pm,());\r\n-//    }\r\n-}\r\n+/*\n+ * TestAbstractMappedAppIdSuper.java\n+ *\n+ * Created on October 16, 2006, 2:00 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+\n+\n+public class TestAbstractMappedAppIdSuper extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestAbstractMappedAppIdSuper\n+     */\n+    public TestAbstractMappedAppIdSuper(String name) {\n+        super(name);\n+    }\n+\n+    /* Fix Me - aokeke - Takes so much time to run */\n+//    public void testQuerySubclassWithDifferentIdClass()\n+//    throws Exception {\n+//        ConcreteMappedAppIdSub pc = new ConcreteMappedAppIdSub();\n+//        String pk = String.valueOf(System.currentTimeMillis());\n+//        pc.setPk(pk);\n+//        pc.setName(\"name\");\n+//        \n+//        OpenJPAEntityManager pm = getPM();\n+//        pm.begin();\n+//        pm.persist(pc);\n+//        pm.commit();\n+//        String pkd = pc.getPk();\n+//        Object oid = pm.getObjectId(pc);\n+//        endEm(pm,());\n+//        \n+//        pm = getPM();\n+//        String query = \"SELECT DISTINCT o FROM ConcreteMappedAppIdSub o WHERE o.pk = :p \";\n+//        OpenJPAQuery q = pm.createQuery(query);\n+//        \n+////        OpenJPAQuery q = pm.createNativeQuery(\"pk == :p\", ConcreteMappedAppIdSub.class);\n+//        //FIXME jthomas\n+//        \n+//        try \n+//        {\n+//            pc = (ConcreteMappedAppIdSub) q.setParameter(\"p\", pkd).getSingleResult();\n+//        } \n+//        catch (RuntimeException re) \n+//        {\n+////            bug(1170, re, \"Cannot query subclass of abstract mapped \"\n+////                    + \"appid type.\");\n+////            return;\n+//        }\n+//         \n+//        assertNotNull(pc);\n+//        assertEquals(pk, pc.getPk());\n+//        \n+//        pm.begin();\n+//        pm.remove(pc);\n+//        pm.commit();\n+//        endEm(pm,());\n+//    }\n+}"},{"sha":"8d6383d0f5e00125997a316bfb8c72bbaba08aac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","status":"modified","additions":466,"deletions":466,"changes":932,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestArrayValues2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,466 +1,466 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.lang.reflect.Array;\r\n-import java.text.Collator;\r\n-import java.util.Arrays;\r\n-import java.util.Comparator;\r\n-import java.util.Date;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ArraysTest;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import junit.framework.AssertionFailedError;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-/**\r\n- * Test varying kinds of array values.\r\n- *\r\n- * @author Marc Prud'hommeaux\r\n- * @author Abe White\r\n- */\r\n-public class TestArrayValues2 extends BaseKernelTest {\r\n-\r\n-    private static double DOUBLE_PRECISION = 0.01D;\r\n-    public static float FLOAT_PRECISION = 0.01F;\r\n-\r\n-    public void testStringArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        String[] array = new String[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomString();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testLongArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Long[] array = new Long[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomLong();\r\n-        try {\r\n-            saveArray(array, false, false);\r\n-        } catch (AssertionFailedError afe) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testLongPrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        long[] array = new long[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomLong().longValue();\r\n-        try {\r\n-            saveArray(array, true, false);\r\n-        } catch (AssertionFailedError afe) {\r\n-        }\r\n-    }\r\n-\r\n-    public void testShortArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Short[] array = new Short[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomShort();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testShortPrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        short[] array = new short[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomShort().shortValue();\r\n-        saveArray(array, true, false);\r\n-    }\r\n-\r\n-    public void testIntArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Integer[] array = new Integer[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomInt();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testIntPrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        int[] array = new int[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomInt().intValue();\r\n-        saveArray(array, true, false);\r\n-    }\r\n-// FixMe: Both tests hangs on Mysql\r\n-    /*public void testByteArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Byte[] array = new Byte[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomByte();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testBytePrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        byte[] array = new byte[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomByte().byteValue();\r\n-        saveArray(array, true, false);\r\n-    }*/\r\n-\r\n-    public void testBooleanArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Boolean[] array = new Boolean[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomBoolean();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testCharacterArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Character[] array = new Character[max];\r\n-        array[0] = new Character((char) 1);\r\n-        for (int i = 1; i < max; i++)\r\n-            array[i] = randomChar();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testCharacterPrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        char[] array = new char[max];\r\n-        array[0] = 1;\r\n-        for (int i = 1; i < max; i++)\r\n-            array[i] = randomChar().charValue();\r\n-        saveArray(array, true, false);\r\n-    }\r\n-\r\n-    public void testCharacterPrimitiveClobArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        char[] array = new char[max];\r\n-        array[0] = 1;\r\n-        for (int i = 1; i < max; i++)\r\n-            array[i] = randomChar().charValue();\r\n-        saveArray(array, true, true);\r\n-    }\r\n-\r\n-    public void testBooleanPrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        boolean[] array = new boolean[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomBoolean().booleanValue();\r\n-        saveArray(array, true, false);\r\n-    }\r\n-\r\n-    public void testFloatArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Float[] array = new Float[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomFloat();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testFloatPrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        float[] array = new float[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomFloat().floatValue();\r\n-        saveArray(array, true, false);\r\n-    }\r\n-\r\n-    public void testDoubleArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Double[] array = new Double[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomDouble();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    public void testDoublePrimitiveArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        double[] array = new double[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomDouble().doubleValue();\r\n-        saveArray(array, true, false);\r\n-    }\r\n-\r\n-    public void testDateArray()\r\n-        throws Exception {\r\n-        int max = ((int) (Math.random() * 20)) + 5;\r\n-        Date[] array = new Date[max];\r\n-        for (int i = 0; i < max; i++)\r\n-            array[i] = randomDate();\r\n-        saveArray(array, false, false);\r\n-    }\r\n-\r\n-    /*Fix Me aokeke - Takes a lot of time to run */\r\n-//    public void testFirstClassObjectArray()throws Exception \r\n-//    {\r\n-//        int max = ((int) (Math.random() * 20)) + 5;\r\n-//        ArraysTest[] array = new ArraysTest[max];\r\n-//        for (int i = 0; i < max; i++)\r\n-//            array[i] = new ArraysTest();\r\n-//        saveArray(array, false, false);\r\n-//    }\r\n-\r\n-    private void saveArray(Object array, boolean primitive, boolean lob)\r\n-        throws Exception {\r\n-        try {\r\n-            saveArrayInternal(array, primitive, lob);\r\n-        } catch (Exception e) {\r\n-            throw e;\r\n-        } catch (Error error) {\r\n-            throw error;\r\n-        } finally {\r\n-            //\r\n-        }\r\n-    }\r\n-\r\n-    private void saveArrayInternal(Object vals, boolean primitive, boolean lob)\r\n-        throws Exception {\r\n-        Object[] array;\r\n-        if (primitive)\r\n-            array = convertPrimitiveArray(vals);\r\n-        else\r\n-            array = (Object[]) vals;\r\n-        Arrays.sort(array, new TestArraySorter());\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        ArraysTest test = new ArraysTest();\r\n-        pm.persist(test);\r\n-        int testID = test.getId();\r\n-\r\n-        setGetTestArray(test, vals, primitive, lob, true);\r\n-        endTx(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        ArraysTest retrievedObject = pm.find(ArraysTest.class, testID);\r\n-\r\n-        Object retrievedVals = setGetTestArray(retrievedObject, vals,\r\n-            primitive, lob, false);\r\n-        Object[] retrievedArray;\r\n-        if (primitive)\r\n-            retrievedArray = convertPrimitiveArray(retrievedVals);\r\n-        else\r\n-            retrievedArray = (Object[]) retrievedVals;\r\n-\r\n-        assertNotNull(retrievedArray);\r\n-        assertTrue(array.length != 0);\r\n-        assertEquals(array.length, retrievedArray.length);\r\n-        assertNotNull(array[0]);\r\n-        assertNotNull(retrievedArray[0]);\r\n-\r\n-        // make sure the classes of the keys are the same.\r\n-        assertEquals(array[0].getClass(), retrievedArray[0].getClass());\r\n-        Arrays.sort(retrievedArray, new TestArraySorter());\r\n-        for (int i = 0; i < array.length; i++)\r\n-            assertClassAndValueEquals(array[i], retrievedArray[i]);\r\n-\r\n-        pm.remove(retrievedObject);\r\n-        endTx(pm);\r\n-    }\r\n-\r\n-    private Object[] convertPrimitiveArray(Object array) throws Exception {\r\n-        int length = Array.getLength(array);\r\n-        Class type = Array.get(array, 0).getClass();\r\n-\r\n-        Object[] copy = (Object[]) Array.newInstance(type, length);\r\n-        for (int i = 0; i < length; i++)\r\n-            copy[i] = Array.get(array, i);\r\n-\r\n-        return copy;\r\n-    }\r\n-\r\n-    private void assertClassAndValueEquals(Object o1, Object o2) {\r\n-        assertTrue(\"First object was null\", o1 != null);\r\n-        assertTrue(\"Second object was null\", o2 != null);\r\n-\r\n-        assertTrue(\"Types did not match (class1=\"\r\n-            + o1.getClass().getName() + \", class2=\"\r\n-            + o2.getClass().getName() + \")\",\r\n-            o1.getClass().isAssignableFrom(o2.getClass()));\r\n-\r\n-        // floats and doubles are a little special: we only\r\n-        // compare them to a certain precision, after which\r\n-        // we give up.\r\n-        if (o1 instanceof Double)\r\n-            assertEquals(((Double) o1).doubleValue(),\r\n-                ((Double) o2).doubleValue(),\r\n-                DOUBLE_PRECISION);\r\n-        else if (o1 instanceof Float)\r\n-            assertEquals(((Float) o1).floatValue(),\r\n-                ((Float) o2).floatValue(),\r\n-                FLOAT_PRECISION);\r\n-        else\r\n-            assertEquals(\"Object did not match (class1=\"\r\n-                + o1.getClass().getName() + \", class2=\"\r\n-                + o2.getClass().getName() + \")\",\r\n-                o1, o2);\r\n-    }\r\n-\r\n-    /**\r\n-     * Generic setter/getter for setting the array.\r\n-     */\r\n-    private Object setGetTestArray(ArraysTest test, Object array,\r\n-        boolean primitive, boolean lob, boolean doSet)\r\n-        throws Exception {\r\n-        if (array == null)\r\n-            return null;\r\n-\r\n-        Object first = Array.get(array, 0);\r\n-        if (first instanceof Date) {\r\n-            if (doSet)\r\n-                test.setDate((Date[]) array);\r\n-            return test.getDate();\r\n-        } else if (first instanceof String) {\r\n-            if (doSet)\r\n-                test.setString((String[]) array);\r\n-            return test.getString();\r\n-        } else if (first instanceof Character) {\r\n-            if (doSet && !primitive)\r\n-                test.setCharacter((Character[]) array);\r\n-            else if (doSet && !lob)\r\n-                test.setCharacterP((char[]) array);\r\n-            else if (doSet)\r\n-                test.setCharacterPClob((char[]) array);\r\n-            else if (!primitive)\r\n-                return test.getCharacter();\r\n-            else if (!lob)\r\n-                return test.getCharacterP();\r\n-            else\r\n-                return test.getCharacterPClob();\r\n-            return null;\r\n-        } else if (first instanceof Double) {\r\n-            if (doSet && !primitive)\r\n-                test.setDouble((Double[]) array);\r\n-            else if (doSet)\r\n-                test.setDoubleP((double[]) array);\r\n-            else if (!primitive)\r\n-                return test.getDouble();\r\n-            else\r\n-                return test.getDoubleP();\r\n-            return null;\r\n-        } else if (first instanceof Byte) {\r\n-            if (doSet && !primitive)\r\n-                test.setByte((Byte[]) array);\r\n-            else if (doSet)\r\n-                test.setByteP((byte[]) array);\r\n-            else if (!primitive)\r\n-                return test.getByte();\r\n-            else\r\n-                return test.getByteP();\r\n-            return null;\r\n-        } else if (first instanceof Float) {\r\n-            if (doSet && !primitive)\r\n-                test.setFloat((Float[]) array);\r\n-            else if (doSet)\r\n-                test.setFloatP((float[]) array);\r\n-            else if (!primitive)\r\n-                return test.getFloat();\r\n-            else\r\n-                return test.getFloatP();\r\n-            return null;\r\n-        } else if (first instanceof Long) {\r\n-            if (doSet && !primitive)\r\n-                test.setLong((Long[]) array);\r\n-            else if (doSet)\r\n-                test.setLongP((long[]) array);\r\n-            else if (!primitive)\r\n-                return test.getLong();\r\n-            else\r\n-                return test.getLongP();\r\n-            return null;\r\n-        } else if (first instanceof Integer) {\r\n-            if (doSet && !primitive)\r\n-                test.setInt((Integer[]) array);\r\n-            else if (doSet)\r\n-                test.setIntP((int[]) array);\r\n-            else if (!primitive)\r\n-                return test.getInt();\r\n-            else\r\n-                return test.getIntP();\r\n-            return null;\r\n-        } else if (first instanceof Short) {\r\n-            if (doSet && !primitive)\r\n-                test.setShort((Short[]) array);\r\n-            else if (doSet)\r\n-                test.setShortP((short[]) array);\r\n-            else if (!primitive)\r\n-                return test.getShort();\r\n-            else\r\n-                return test.getShortP();\r\n-            return null;\r\n-        } else if (first instanceof Boolean) {\r\n-            if (doSet && !primitive)\r\n-                test.setBoolean((Boolean[]) array);\r\n-            else if (doSet)\r\n-                test.setBooleanP((boolean[]) array);\r\n-            else if (!primitive)\r\n-                return test.getBoolean();\r\n-            else\r\n-                return test.getBooleanP();\r\n-            return null;\r\n-        } else if (first instanceof ArraysTest) {\r\n-            if (doSet)\r\n-                test.setArraysTest((ArraysTest[]) array);\r\n-            return test.getArraysTest();\r\n-        }\r\n-\r\n-        fail(\"Unknown array type\");\r\n-        return null;\r\n-    }\r\n-\r\n-    private static class TestArraySorter\r\n-        implements Comparator {\r\n-\r\n-        private Collator collator = Collator.getInstance();\r\n-\r\n-        public int compare(Object o1, Object o2) {\r\n-            if (o1.equals(o2))\r\n-                return 0;\r\n-\r\n-            if (o1 instanceof Number) {\r\n-                return ((Number) o1).doubleValue() >\r\n-                    ((Number) o2).doubleValue() ? 1 : -1;\r\n-            } else if (o1 instanceof Date) {\r\n-                return ((Date) o1).before((Date) o2) ? 1 : -1;\r\n-            } else if (o1 instanceof ArraysTest) {\r\n-                return ((ArraysTest) o1).compareTo(o2);\r\n-            }\r\n-            return collator.compare(o1.toString(), o2.toString());\r\n-        }\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.lang.reflect.Array;\n+import java.text.Collator;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Date;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.ArraysTest;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import junit.framework.AssertionFailedError;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+/**\n+ * Test varying kinds of array values.\n+ *\n+ * @author Marc Prud'hommeaux\n+ * @author Abe White\n+ */\n+public class TestArrayValues2 extends BaseKernelTest {\n+\n+    private static double DOUBLE_PRECISION = 0.01D;\n+    public static float FLOAT_PRECISION = 0.01F;\n+\n+    public void testStringArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        String[] array = new String[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomString();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testLongArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Long[] array = new Long[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomLong();\n+        try {\n+            saveArray(array, false, false);\n+        } catch (AssertionFailedError afe) {\n+        }\n+    }\n+\n+    public void testLongPrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        long[] array = new long[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomLong().longValue();\n+        try {\n+            saveArray(array, true, false);\n+        } catch (AssertionFailedError afe) {\n+        }\n+    }\n+\n+    public void testShortArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Short[] array = new Short[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomShort();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testShortPrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        short[] array = new short[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomShort().shortValue();\n+        saveArray(array, true, false);\n+    }\n+\n+    public void testIntArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Integer[] array = new Integer[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomInt();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testIntPrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        int[] array = new int[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomInt().intValue();\n+        saveArray(array, true, false);\n+    }\n+// FixMe: Both tests hangs on Mysql\n+    /*public void testByteArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Byte[] array = new Byte[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomByte();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testBytePrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        byte[] array = new byte[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomByte().byteValue();\n+        saveArray(array, true, false);\n+    }*/\n+\n+    public void testBooleanArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Boolean[] array = new Boolean[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomBoolean();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testCharacterArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Character[] array = new Character[max];\n+        array[0] = new Character((char) 1);\n+        for (int i = 1; i < max; i++)\n+            array[i] = randomChar();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testCharacterPrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        char[] array = new char[max];\n+        array[0] = 1;\n+        for (int i = 1; i < max; i++)\n+            array[i] = randomChar().charValue();\n+        saveArray(array, true, false);\n+    }\n+\n+    public void testCharacterPrimitiveClobArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        char[] array = new char[max];\n+        array[0] = 1;\n+        for (int i = 1; i < max; i++)\n+            array[i] = randomChar().charValue();\n+        saveArray(array, true, true);\n+    }\n+\n+    public void testBooleanPrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        boolean[] array = new boolean[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomBoolean().booleanValue();\n+        saveArray(array, true, false);\n+    }\n+\n+    public void testFloatArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Float[] array = new Float[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomFloat();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testFloatPrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        float[] array = new float[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomFloat().floatValue();\n+        saveArray(array, true, false);\n+    }\n+\n+    public void testDoubleArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Double[] array = new Double[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomDouble();\n+        saveArray(array, false, false);\n+    }\n+\n+    public void testDoublePrimitiveArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        double[] array = new double[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomDouble().doubleValue();\n+        saveArray(array, true, false);\n+    }\n+\n+    public void testDateArray()\n+        throws Exception {\n+        int max = ((int) (Math.random() * 20)) + 5;\n+        Date[] array = new Date[max];\n+        for (int i = 0; i < max; i++)\n+            array[i] = randomDate();\n+        saveArray(array, false, false);\n+    }\n+\n+    /*Fix Me aokeke - Takes a lot of time to run */\n+//    public void testFirstClassObjectArray()throws Exception \n+//    {\n+//        int max = ((int) (Math.random() * 20)) + 5;\n+//        ArraysTest[] array = new ArraysTest[max];\n+//        for (int i = 0; i < max; i++)\n+//            array[i] = new ArraysTest();\n+//        saveArray(array, false, false);\n+//    }\n+\n+    private void saveArray(Object array, boolean primitive, boolean lob)\n+        throws Exception {\n+        try {\n+            saveArrayInternal(array, primitive, lob);\n+        } catch (Exception e) {\n+            throw e;\n+        } catch (Error error) {\n+            throw error;\n+        } finally {\n+            //\n+        }\n+    }\n+\n+    private void saveArrayInternal(Object vals, boolean primitive, boolean lob)\n+        throws Exception {\n+        Object[] array;\n+        if (primitive)\n+            array = convertPrimitiveArray(vals);\n+        else\n+            array = (Object[]) vals;\n+        Arrays.sort(array, new TestArraySorter());\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+\n+        ArraysTest test = new ArraysTest();\n+        pm.persist(test);\n+        int testID = test.getId();\n+\n+        setGetTestArray(test, vals, primitive, lob, true);\n+        endTx(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        ArraysTest retrievedObject = pm.find(ArraysTest.class, testID);\n+\n+        Object retrievedVals = setGetTestArray(retrievedObject, vals,\n+            primitive, lob, false);\n+        Object[] retrievedArray;\n+        if (primitive)\n+            retrievedArray = convertPrimitiveArray(retrievedVals);\n+        else\n+            retrievedArray = (Object[]) retrievedVals;\n+\n+        assertNotNull(retrievedArray);\n+        assertTrue(array.length != 0);\n+        assertEquals(array.length, retrievedArray.length);\n+        assertNotNull(array[0]);\n+        assertNotNull(retrievedArray[0]);\n+\n+        // make sure the classes of the keys are the same.\n+        assertEquals(array[0].getClass(), retrievedArray[0].getClass());\n+        Arrays.sort(retrievedArray, new TestArraySorter());\n+        for (int i = 0; i < array.length; i++)\n+            assertClassAndValueEquals(array[i], retrievedArray[i]);\n+\n+        pm.remove(retrievedObject);\n+        endTx(pm);\n+    }\n+\n+    private Object[] convertPrimitiveArray(Object array) throws Exception {\n+        int length = Array.getLength(array);\n+        Class type = Array.get(array, 0).getClass();\n+\n+        Object[] copy = (Object[]) Array.newInstance(type, length);\n+        for (int i = 0; i < length; i++)\n+            copy[i] = Array.get(array, i);\n+\n+        return copy;\n+    }\n+\n+    private void assertClassAndValueEquals(Object o1, Object o2) {\n+        assertTrue(\"First object was null\", o1 != null);\n+        assertTrue(\"Second object was null\", o2 != null);\n+\n+        assertTrue(\"Types did not match (class1=\"\n+            + o1.getClass().getName() + \", class2=\"\n+            + o2.getClass().getName() + \")\",\n+            o1.getClass().isAssignableFrom(o2.getClass()));\n+\n+        // floats and doubles are a little special: we only\n+        // compare them to a certain precision, after which\n+        // we give up.\n+        if (o1 instanceof Double)\n+            assertEquals(((Double) o1).doubleValue(),\n+                ((Double) o2).doubleValue(),\n+                DOUBLE_PRECISION);\n+        else if (o1 instanceof Float)\n+            assertEquals(((Float) o1).floatValue(),\n+                ((Float) o2).floatValue(),\n+                FLOAT_PRECISION);\n+        else\n+            assertEquals(\"Object did not match (class1=\"\n+                + o1.getClass().getName() + \", class2=\"\n+                + o2.getClass().getName() + \")\",\n+                o1, o2);\n+    }\n+\n+    /**\n+     * Generic setter/getter for setting the array.\n+     */\n+    private Object setGetTestArray(ArraysTest test, Object array,\n+        boolean primitive, boolean lob, boolean doSet)\n+        throws Exception {\n+        if (array == null)\n+            return null;\n+\n+        Object first = Array.get(array, 0);\n+        if (first instanceof Date) {\n+            if (doSet)\n+                test.setDate((Date[]) array);\n+            return test.getDate();\n+        } else if (first instanceof String) {\n+            if (doSet)\n+                test.setString((String[]) array);\n+            return test.getString();\n+        } else if (first instanceof Character) {\n+            if (doSet && !primitive)\n+                test.setCharacter((Character[]) array);\n+            else if (doSet && !lob)\n+                test.setCharacterP((char[]) array);\n+            else if (doSet)\n+                test.setCharacterPClob((char[]) array);\n+            else if (!primitive)\n+                return test.getCharacter();\n+            else if (!lob)\n+                return test.getCharacterP();\n+            else\n+                return test.getCharacterPClob();\n+            return null;\n+        } else if (first instanceof Double) {\n+            if (doSet && !primitive)\n+                test.setDouble((Double[]) array);\n+            else if (doSet)\n+                test.setDoubleP((double[]) array);\n+            else if (!primitive)\n+                return test.getDouble();\n+            else\n+                return test.getDoubleP();\n+            return null;\n+        } else if (first instanceof Byte) {\n+            if (doSet && !primitive)\n+                test.setByte((Byte[]) array);\n+            else if (doSet)\n+                test.setByteP((byte[]) array);\n+            else if (!primitive)\n+                return test.getByte();\n+            else\n+                return test.getByteP();\n+            return null;\n+        } else if (first instanceof Float) {\n+            if (doSet && !primitive)\n+                test.setFloat((Float[]) array);\n+            else if (doSet)\n+                test.setFloatP((float[]) array);\n+            else if (!primitive)\n+                return test.getFloat();\n+            else\n+                return test.getFloatP();\n+            return null;\n+        } else if (first instanceof Long) {\n+            if (doSet && !primitive)\n+                test.setLong((Long[]) array);\n+            else if (doSet)\n+                test.setLongP((long[]) array);\n+            else if (!primitive)\n+                return test.getLong();\n+            else\n+                return test.getLongP();\n+            return null;\n+        } else if (first instanceof Integer) {\n+            if (doSet && !primitive)\n+                test.setInt((Integer[]) array);\n+            else if (doSet)\n+                test.setIntP((int[]) array);\n+            else if (!primitive)\n+                return test.getInt();\n+            else\n+                return test.getIntP();\n+            return null;\n+        } else if (first instanceof Short) {\n+            if (doSet && !primitive)\n+                test.setShort((Short[]) array);\n+            else if (doSet)\n+                test.setShortP((short[]) array);\n+            else if (!primitive)\n+                return test.getShort();\n+            else\n+                return test.getShortP();\n+            return null;\n+        } else if (first instanceof Boolean) {\n+            if (doSet && !primitive)\n+                test.setBoolean((Boolean[]) array);\n+            else if (doSet)\n+                test.setBooleanP((boolean[]) array);\n+            else if (!primitive)\n+                return test.getBoolean();\n+            else\n+                return test.getBooleanP();\n+            return null;\n+        } else if (first instanceof ArraysTest) {\n+            if (doSet)\n+                test.setArraysTest((ArraysTest[]) array);\n+            return test.getArraysTest();\n+        }\n+\n+        fail(\"Unknown array type\");\n+        return null;\n+    }\n+\n+    private static class TestArraySorter\n+        implements Comparator {\n+\n+        private Collator collator = Collator.getInstance();\n+\n+        public int compare(Object o1, Object o2) {\n+            if (o1.equals(o2))\n+                return 0;\n+\n+            if (o1 instanceof Number) {\n+                return ((Number) o1).doubleValue() >\n+                    ((Number) o2).doubleValue() ? 1 : -1;\n+            } else if (o1 instanceof Date) {\n+                return ((Date) o1).before((Date) o2) ? 1 : -1;\n+            } else if (o1 instanceof ArraysTest) {\n+                return ((ArraysTest) o1).compareTo(o2);\n+            }\n+            return collator.compare(o1.toString(), o2.toString());\n+        }\n+    }\n+}\n+"},{"sha":"6a4415e5507c53e98955f58248607a5096df39f6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBigDecimals.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,125 +1,125 @@\n-/*\r\n- * TestBigDecimals.java\r\n- *\r\n- * Created on October 9, 2006, 6:07 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.math.BigDecimal;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n-import junit.framework.AssertionFailedError;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestBigDecimals extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestBigDecimals\r\n-     */\r\n-    public TestBigDecimals() {\r\n-    }\r\n-\r\n-    public TestBigDecimals(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void testBigDecimalDataIntegrity()\r\n-        throws Exception {\r\n-        try {\r\n-            BigDecimal bd = new BigDecimal(Math.random() * 10000000 + \"\");\r\n-            bd = bd.setScale(100);\r\n-            for (int i = 0; i < 50; i++) {\r\n-                bd = bd.movePointLeft(1);\r\n-                bigDecimalTest(bd);\r\n-            }\r\n-        }\r\n-        catch (AssertionFailedError e) {\r\n-            bug(3, e, \"Precision loss for BigDecimals\");\r\n-        }\r\n-    }\r\n-//    FixMe aokeke: Passes but takes a long time --commenting for resource sake\r\n-//    public void testBigBigDecimals()\r\n-//        throws Exception {\r\n-//        try {\r\n-//            BigDecimal bd = new BigDecimal(\"1234567890.\"\r\n-//                + \"12345678901234567890123456789012345678901234567890\"\r\n-//                + \"12345678901234567890123456789012345678901234567890\");\r\n-//\r\n-//            bigDecimalTest(bd);\r\n-//        } catch (AssertionFailedError e) {\r\n-//            bug(3, e, \"Precision loss for BigDecimals\");\r\n-//        }\r\n-//    }\r\n-\r\n-    public void bigDecimalTest(final BigDecimal bd) {\r\n-        OpenJPAEntityManager pm = null, pm2 = null;\r\n-\r\n-        try {\r\n-            pm = getPM();\r\n-            startTx(pm);\r\n-            AllFieldTypesTest aftt = new AllFieldTypesTest();\r\n-            aftt.setTestBigDecimal(bd);\r\n-            pm.persist(aftt);\r\n-            endTx(pm);\r\n-            Object id = pm.getObjectId(aftt);\r\n-            pm.evict(aftt);\r\n-\r\n-            pm2 = getPM();\r\n-            startTx(pm);\r\n-            AllFieldTypesTest aftt2 = (AllFieldTypesTest) pm2.getObjectId(id);\r\n-\r\n-            // why wouldn't they be two different objects?\r\n-            assertTrue(\"identitcal field values\",\r\n-                bd != aftt2.getTestBigDecimal());\r\n-\r\n-            // this should always succeed\r\n-            assertEquals(bd,\r\n-                aftt2.getTestBigDecimal().setScale(bd.scale()));\r\n-\r\n-            // this will fail if we are losing scale\r\n-            assertEquals(bd, aftt2.getTestBigDecimal());\r\n-\r\n-            rollbackTx(pm);\r\n-        } catch (Throwable afe) {\r\n-            bug(3, afe, \"floating point precision loss\");\r\n-        } finally {\r\n-            if (pm != null) {\r\n-                //if (pm.getTransaction().isActive())\r\n-                //rollbackTx(pm,());\r\n-                endEm(pm);\r\n-            }\r\n-\r\n-            if (pm2 != null) {\r\n-                //if (pm2.getTransaction().isActive())\r\n-                //rollbackTx(pm2,());\r\n-                //pm2.close();\r\n-                endEm(pm2);\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * TestBigDecimals.java\n+ *\n+ * Created on October 9, 2006, 6:07 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.math.BigDecimal;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestBigDecimals extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestBigDecimals\n+     */\n+    public TestBigDecimals() {\n+    }\n+\n+    public TestBigDecimals(String name) {\n+        super(name);\n+    }\n+\n+    public void testBigDecimalDataIntegrity()\n+        throws Exception {\n+        try {\n+            BigDecimal bd = new BigDecimal(Math.random() * 10000000 + \"\");\n+            bd = bd.setScale(100);\n+            for (int i = 0; i < 50; i++) {\n+                bd = bd.movePointLeft(1);\n+                bigDecimalTest(bd);\n+            }\n+        }\n+        catch (AssertionFailedError e) {\n+            bug(3, e, \"Precision loss for BigDecimals\");\n+        }\n+    }\n+//    FixMe aokeke: Passes but takes a long time --commenting for resource sake\n+//    public void testBigBigDecimals()\n+//        throws Exception {\n+//        try {\n+//            BigDecimal bd = new BigDecimal(\"1234567890.\"\n+//                + \"12345678901234567890123456789012345678901234567890\"\n+//                + \"12345678901234567890123456789012345678901234567890\");\n+//\n+//            bigDecimalTest(bd);\n+//        } catch (AssertionFailedError e) {\n+//            bug(3, e, \"Precision loss for BigDecimals\");\n+//        }\n+//    }\n+\n+    public void bigDecimalTest(final BigDecimal bd) {\n+        OpenJPAEntityManager pm = null, pm2 = null;\n+\n+        try {\n+            pm = getPM();\n+            startTx(pm);\n+            AllFieldTypesTest aftt = new AllFieldTypesTest();\n+            aftt.setTestBigDecimal(bd);\n+            pm.persist(aftt);\n+            endTx(pm);\n+            Object id = pm.getObjectId(aftt);\n+            pm.evict(aftt);\n+\n+            pm2 = getPM();\n+            startTx(pm);\n+            AllFieldTypesTest aftt2 = (AllFieldTypesTest) pm2.getObjectId(id);\n+\n+            // why wouldn't they be two different objects?\n+            assertTrue(\"identitcal field values\",\n+                bd != aftt2.getTestBigDecimal());\n+\n+            // this should always succeed\n+            assertEquals(bd,\n+                aftt2.getTestBigDecimal().setScale(bd.scale()));\n+\n+            // this will fail if we are losing scale\n+            assertEquals(bd, aftt2.getTestBigDecimal());\n+\n+            rollbackTx(pm);\n+        } catch (Throwable afe) {\n+            bug(3, afe, \"floating point precision loss\");\n+        } finally {\n+            if (pm != null) {\n+                //if (pm.getTransaction().isActive())\n+                //rollbackTx(pm,());\n+                endEm(pm);\n+            }\n+\n+            if (pm2 != null) {\n+                //if (pm2.getTransaction().isActive())\n+                //rollbackTx(pm2,());\n+                //pm2.close();\n+                endEm(pm2);\n+            }\n+        }\n+    }\n+}"},{"sha":"78b0e703945dc6fe5003e71466361673bd3bbdb7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestBrokerFactoryPooling.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * TestBrokerFactoryPooling.java\r\n- *\r\n- * Created on October 9, 2006, 6:10 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.kernel.Bootstrap;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-\r\n-public class TestBrokerFactoryPooling extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestBrokerFactoryPooling\r\n-     */\r\n-    public TestBrokerFactoryPooling(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void testPooling() {\r\n-        BrokerFactory bf0 = Bootstrap.getBrokerFactory();\r\n-        BrokerFactory bf1 = Bootstrap.getBrokerFactory();\r\n-        assertSame(bf0, bf1);\r\n-    }\r\n-}\r\n+/*\n+ * TestBrokerFactoryPooling.java\n+ *\n+ * Created on October 9, 2006, 6:10 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+\n+import org.apache.openjpa.kernel.Bootstrap;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+\n+public class TestBrokerFactoryPooling extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestBrokerFactoryPooling\n+     */\n+    public TestBrokerFactoryPooling(String name) {\n+        super(name);\n+    }\n+\n+    public void testPooling() {\n+        BrokerFactory bf0 = Bootstrap.getBrokerFactory();\n+        BrokerFactory bf1 = Bootstrap.getBrokerFactory();\n+        assertSame(bf0, bf1);\n+    }\n+}"},{"sha":"b0920bb58d16f5f5d4806c5daeaa0f72e204bd94","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","status":"modified","additions":242,"deletions":242,"changes":484,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCalendarFields.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,242 +1,242 @@\n-/*\r\n- * TestCalendarFields.java\r\n- *\r\n- * Created on October 9, 2006, 6:12 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-import java.util.TimeZone;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.CalendarFields;\r\n-\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.lib.util.JavaVersions;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestCalendarFields extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestCalendarFields\r\n-     */\r\n-    public TestCalendarFields(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(CalendarFields.class);\r\n-    }\r\n-\r\n-    public void testFieldDefaultTimeZone() {\r\n-        CalendarFields cal = new CalendarFields();\r\n-\r\n-        OpenJPAEntityManager pm;\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        cal.setSingapore(Calendar.\r\n-            getInstance(TimeZone.getTimeZone(\"America/New_York\")));\r\n-        pm.persist(cal);\r\n-        int id = cal.getId();\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        cal = (CalendarFields) pm.find(CalendarFields.class, id);\r\n-        assertEquals(TimeZone.getTimeZone(\"Asia/Singapore\"),\r\n-            cal.getSingapore().getTimeZone());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testTimeZoneEquals() {\r\n-        CalendarFields c1 = new CalendarFields();\r\n-        CalendarFields c2 = new CalendarFields();\r\n-        assertTimeZonesEquals(c1, c2);\r\n-\r\n-        OpenJPAEntityManager pm;\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(c2);\r\n-        int id2 = c2.getId();\r\n-        assertTimeZonesEquals(c1, c2);\r\n-        endTx(pm);\r\n-        assertTimeZonesEquals(c1, c2);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        c2 = (CalendarFields) pm.find(CalendarFields.class, id2);\r\n-        assertTimeZonesEquals(c1, c2);\r\n-        assertTimeZonesEquals(c1, (CalendarFields) pm.detach(c2));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testCalendarQuery() {\r\n-        long time = 1136660560572L;\r\n-\r\n-        CalendarFields cal = new CalendarFields();\r\n-\r\n-        OpenJPAEntityManager pm;\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        cal.getSingapore().setTime(new Date(time));\r\n-        pm.persist(cal);\r\n-        int id = cal.getId();\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-\r\n-        //FIXME jthomas       \r\n-        Date date = new Date(time + 100000);\r\n-        Calendar cals = Calendar.getInstance();\r\n-        cals.setTime(date);\r\n-\r\n-        String query =\r\n-            \"SELECT o FROM CalendarFields o WHERE o.singapore < :cal\";\r\n-        int size = pm.createQuery(query).setParameter(\"cal\", cals).\r\n-            getResultList().size();\r\n-\r\n-        assertEquals(1, size);\r\n-\r\n-//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(new Date(time - 100000)));\r\n-//\r\n-//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time + 100000)));\r\n-//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time - 100000)));\r\n-//\r\n-//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time + 100000), null)));\r\n-//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time - 100000), null)));\r\n-//\r\n-//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time + 100000), null)));\r\n-//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time - 100000), null)));\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    private static Calendar newCalendar(Date date, String tz) {\r\n-        Calendar cal = Calendar.getInstance(\r\n-            tz == null ? TimeZone.getDefault() : TimeZone.getTimeZone(tz));\r\n-        cal.setTime(date);\r\n-        return cal;\r\n-    }\r\n-\r\n-    public void testMutateCalendarDirties() {\r\n-        CalendarFields c1 = new CalendarFields();\r\n-\r\n-        OpenJPAEntityManager pm;\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(c1);\r\n-        int id = c1.getId();\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        c1 = pm.find(CalendarFields.class, id);\r\n-\r\n-        startTx(pm);\r\n-\r\n-        OpenJPAStateManager sm = getStateManager(c1, pm);\r\n-\r\n-        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"gmt\").getIndex()));\r\n-\r\n-        // test setting to same value doesn't dirty the field\r\n-        /*\r\n-        setTimeInMillis(c1.getGmtc1.getGmt().getTime().getTime());\r\n-        c1.getGmt().setTime(c1.getGmt().getTime());\r\n-        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"gmt\").getIndex()));\r\n-        */\r\n-\r\n-        // test changing time\r\n-        setTimeInMillis(c1.getGmt(), 12345);\r\n-        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"gmt\").getIndex()));\r\n-\r\n-        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"newYork\").getIndex()));\r\n-        // test mutate via \"add()\" method\r\n-        c1.getNewYork().add(Calendar.SECOND, -1);\r\n-        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"newYork\").getIndex()));\r\n-\r\n-        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"berlin\").getIndex()));\r\n-        // test mutate via \"setTimeZone()\" method\r\n-        c1.getBerlin().setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n-        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"berlin\").getIndex()));\r\n-\r\n-        // Calendar.set can only be subclassed in JDK 1.4+ (it is final in\r\n-        // 1.3), so we only run this test in JDK 1.4+\r\n-        if (JavaVersions.VERSION >= 4) {\r\n-            assertFalse(sm.getDirty().get(sm.getMetaData().\r\n-                getField(\"singapore\").getIndex()));\r\n-            // test mutate via \"set()\" method\r\n-            c1.getSingapore().set(Calendar.YEAR, 1998);\r\n-            assertTrue(sm.getDirty().get(sm.getMetaData().\r\n-                getField(\"singapore\").getIndex()));\r\n-        }\r\n-\r\n-        assertFalse(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"pacific\").getIndex()));\r\n-        // test mutate via \"roll()\" method\r\n-        c1.getPacific().roll(Calendar.YEAR, 5);\r\n-        assertTrue(sm.getDirty().get(sm.getMetaData().\r\n-            getField(\"pacific\").getIndex()));\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    private static void setTimeInMillis(Calendar cal, long millis) {\r\n-        // \"setTimeInMillis\" is protected in JDK 1.3, put public in 1.4 & 1.5\r\n-        try {\r\n-            // Equivalent to: cal.setTimeInMillis (millis);\r\n-            cal.getClass().getMethod(\"setTimeInMillis\",\r\n-                new Class[]{ long.class }).invoke(cal,\r\n-                new Object[]{ new Long(millis) });\r\n-        } catch (Exception e) {\r\n-            cal.setTime(new Date(millis));\r\n-        }\r\n-    }\r\n-\r\n-    private void assertTimeZonesEquals(CalendarFields c1, CalendarFields c2) {\r\n-        for (int i = 0; i < c1.getCalendars().size(); i++) {\r\n-            Calendar cal1 = (Calendar) c1.getCalendars().get(i);\r\n-            Calendar cal2 = (Calendar) c2.getCalendars().get(i);\r\n-\r\n-            if (cal1 != null && cal2 != null)\r\n-                assertEquals(cal1.getTimeZone().getID(),\r\n-                    cal2.getTimeZone().getID());\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * TestCalendarFields.java\n+ *\n+ * Created on October 9, 2006, 6:12 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.CalendarFields;\n+\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.util.JavaVersions;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestCalendarFields extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestCalendarFields\n+     */\n+    public TestCalendarFields(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(CalendarFields.class);\n+    }\n+\n+    public void testFieldDefaultTimeZone() {\n+        CalendarFields cal = new CalendarFields();\n+\n+        OpenJPAEntityManager pm;\n+\n+        pm = getPM();\n+        startTx(pm);\n+        cal.setSingapore(Calendar.\n+            getInstance(TimeZone.getTimeZone(\"America/New_York\")));\n+        pm.persist(cal);\n+        int id = cal.getId();\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        cal = (CalendarFields) pm.find(CalendarFields.class, id);\n+        assertEquals(TimeZone.getTimeZone(\"Asia/Singapore\"),\n+            cal.getSingapore().getTimeZone());\n+        endEm(pm);\n+    }\n+\n+    public void testTimeZoneEquals() {\n+        CalendarFields c1 = new CalendarFields();\n+        CalendarFields c2 = new CalendarFields();\n+        assertTimeZonesEquals(c1, c2);\n+\n+        OpenJPAEntityManager pm;\n+\n+        pm = getPM();\n+        startTx(pm);\n+        pm.persist(c2);\n+        int id2 = c2.getId();\n+        assertTimeZonesEquals(c1, c2);\n+        endTx(pm);\n+        assertTimeZonesEquals(c1, c2);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        c2 = (CalendarFields) pm.find(CalendarFields.class, id2);\n+        assertTimeZonesEquals(c1, c2);\n+        assertTimeZonesEquals(c1, (CalendarFields) pm.detach(c2));\n+        endEm(pm);\n+    }\n+\n+    public void testCalendarQuery() {\n+        long time = 1136660560572L;\n+\n+        CalendarFields cal = new CalendarFields();\n+\n+        OpenJPAEntityManager pm;\n+\n+        pm = getPM();\n+        startTx(pm);\n+        cal.getSingapore().setTime(new Date(time));\n+        pm.persist(cal);\n+        int id = cal.getId();\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+\n+        //FIXME jthomas       \n+        Date date = new Date(time + 100000);\n+        Calendar cals = Calendar.getInstance();\n+        cals.setTime(date);\n+\n+        String query =\n+            \"SELECT o FROM CalendarFields o WHERE o.singapore < :cal\";\n+        int size = pm.createQuery(query).setParameter(\"cal\", cals).\n+            getResultList().size();\n+\n+        assertEquals(1, size);\n+\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(new Date(time - 100000)));\n+//\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time + 100000)));\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(new Date(time - 100000)));\n+//\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time + 100000), null)));\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore < :date\").execute(newCalendar(new Date(time - 100000), null)));\n+//\n+//        assertSize(0, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time + 100000), null)));\n+//        assertSize(1, pm.newQuery(CalendarFields.class, \"singapore > :date\").execute(newCalendar(new Date(time - 100000), null)));\n+\n+        endEm(pm);\n+    }\n+\n+    private static Calendar newCalendar(Date date, String tz) {\n+        Calendar cal = Calendar.getInstance(\n+            tz == null ? TimeZone.getDefault() : TimeZone.getTimeZone(tz));\n+        cal.setTime(date);\n+        return cal;\n+    }\n+\n+    public void testMutateCalendarDirties() {\n+        CalendarFields c1 = new CalendarFields();\n+\n+        OpenJPAEntityManager pm;\n+\n+        pm = getPM();\n+        startTx(pm);\n+        pm.persist(c1);\n+        int id = c1.getId();\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        c1 = pm.find(CalendarFields.class, id);\n+\n+        startTx(pm);\n+\n+        OpenJPAStateManager sm = getStateManager(c1, pm);\n+\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\n+            getField(\"gmt\").getIndex()));\n+\n+        // test setting to same value doesn't dirty the field\n+        /*\n+        setTimeInMillis(c1.getGmtc1.getGmt().getTime().getTime());\n+        c1.getGmt().setTime(c1.getGmt().getTime());\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\n+            getField(\"gmt\").getIndex()));\n+        */\n+\n+        // test changing time\n+        setTimeInMillis(c1.getGmt(), 12345);\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\n+            getField(\"gmt\").getIndex()));\n+\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\n+            getField(\"newYork\").getIndex()));\n+        // test mutate via \"add()\" method\n+        c1.getNewYork().add(Calendar.SECOND, -1);\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\n+            getField(\"newYork\").getIndex()));\n+\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\n+            getField(\"berlin\").getIndex()));\n+        // test mutate via \"setTimeZone()\" method\n+        c1.getBerlin().setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\n+            getField(\"berlin\").getIndex()));\n+\n+        // Calendar.set can only be subclassed in JDK 1.4+ (it is final in\n+        // 1.3), so we only run this test in JDK 1.4+\n+        if (JavaVersions.VERSION >= 4) {\n+            assertFalse(sm.getDirty().get(sm.getMetaData().\n+                getField(\"singapore\").getIndex()));\n+            // test mutate via \"set()\" method\n+            c1.getSingapore().set(Calendar.YEAR, 1998);\n+            assertTrue(sm.getDirty().get(sm.getMetaData().\n+                getField(\"singapore\").getIndex()));\n+        }\n+\n+        assertFalse(sm.getDirty().get(sm.getMetaData().\n+            getField(\"pacific\").getIndex()));\n+        // test mutate via \"roll()\" method\n+        c1.getPacific().roll(Calendar.YEAR, 5);\n+        assertTrue(sm.getDirty().get(sm.getMetaData().\n+            getField(\"pacific\").getIndex()));\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    private static void setTimeInMillis(Calendar cal, long millis) {\n+        // \"setTimeInMillis\" is protected in JDK 1.3, put public in 1.4 & 1.5\n+        try {\n+            // Equivalent to: cal.setTimeInMillis (millis);\n+            cal.getClass().getMethod(\"setTimeInMillis\",\n+                new Class[]{ long.class }).invoke(cal,\n+                new Object[]{ new Long(millis) });\n+        } catch (Exception e) {\n+            cal.setTime(new Date(millis));\n+        }\n+    }\n+\n+    private void assertTimeZonesEquals(CalendarFields c1, CalendarFields c2) {\n+        for (int i = 0; i < c1.getCalendars().size(); i++) {\n+            Calendar cal1 = (Calendar) c1.getCalendars().get(i);\n+            Calendar cal2 = (Calendar) c2.getCalendars().get(i);\n+\n+            if (cal1 != null && cal2 != null)\n+                assertEquals(cal1.getTimeZone().getID(),\n+                    cal2.getTimeZone().getID());\n+        }\n+    }\n+}"},{"sha":"47206acf5c8e00ab17306746fd352917672a61cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","status":"modified","additions":404,"deletions":404,"changes":808,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestCheckConsistency.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,404 +1,404 @@\n-/*\r\n- * TestCheckConsistency.java\r\n- *\r\n- * Created on October 9, 2006, 6:23 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestCheckConsistency extends BaseKernelTest {\r\n-\r\n-    private Object _oid = null;\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestCheckConsistency\r\n-     */\r\n-    public TestCheckConsistency(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        RuntimeTest1 pc = new RuntimeTest1();\r\n-        pc.setIntField(1);\r\n-        pc.setIntField1(1);\r\n-        _oid = persist(pc);\r\n-    }\r\n-\r\n-    public void testConsistentDatastoreTransaction() {\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.setOptimistic(false);\r\n-        pm.validateChanges();        // no-op outside trans\r\n-        startTx(pm);\r\n-\r\n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n-        pc.setIntField1(100);\r\n-\r\n-        RuntimeTest1 npc = new RuntimeTest1();\r\n-        npc.setIntField(2);\r\n-        npc.setIntField1(2);\r\n-        pm.persist(npc);\r\n-        pm.validateChanges();\r\n-\r\n-        assertEquals(100, pc.getIntField1());\r\n-        assertTrue(pm.isPersistent(npc));\r\n-\r\n-        pc.setIntField1(200);\r\n-        npc.setIntField1(300);\r\n-        endTx(pm);\r\n-\r\n-        assertEquals(200, pc.getIntField1());\r\n-        assertTrue(pm.isPersistent(npc));\r\n-        assertEquals(300, npc.getIntField1());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testConsistentDatastoreTransactionWithRollback() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.setOptimistic(false);\r\n-        pm.validateChanges();        // no-op outside trans\r\n-        startTx(pm);\r\n-\r\n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n-        pc.setIntField1(100);\r\n-\r\n-        RuntimeTest1 npc = new RuntimeTest1();\r\n-        pm.persist(npc);\r\n-        Object noid = pm.getObjectId(npc);\r\n-\r\n-        pm.validateChanges();\r\n-        assertEquals(100, pc.getIntField1());\r\n-        assertTrue(pm.isPersistent(npc));\r\n-\r\n-        pc.setIntField1(200);\r\n-        npc.setIntField1(300);\r\n-        rollbackTx(pm);\r\n-\r\n-        assertEquals(1, pc.getIntField1());\r\n-        assertFalse(pm.isPersistent(npc));\r\n-        assertEquals(0, npc.getIntField1());\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        try {\r\n-            RuntimeTest1 temp =\r\n-                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\r\n-            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\r\n-                temp.getIntField1());\r\n-        } catch (Exception jonfe) {\r\n-        }\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    //FIXME jthomas\r\n-/*    \r\n-    public void testInconsistentDatastoreTransaction() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\r\n-        pm.setOptimistic(false);\r\n-        pm.setRetainState(false);\r\n-        pm.validateChanges();        // no-op outside trans\r\n-        pm.begin();\r\n-  */\r\n-    //FIXME jthomas\r\n-    /*\r\n-   fetch.setReadLockLevel(pm.LOCK_NONE);\r\n-   fetch.setWriteLockLevel(pm.LOCK_NONE);\r\n-    */\r\n-    /*\r\n-RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n-pc.setIntField(100);\r\n-\r\n-OpenJPAEntityManager pm2 = getPM();\r\n-pm2.begin();\r\n-RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n-copy.setIntField(-1);\r\n-pm2.commit();\r\n-pm2.close();\r\n-\r\n-RuntimeTest1 npc = new RuntimeTest1();\r\n-pm.persist(npc);\r\n-\r\n-try {\r\n-   pm.validateChanges();\r\n-   fail(\"Didn't find inconsistency.\");\r\n-} catch (Exception jove) {\r\n-   //FIXME\r\n-   /*\r\n-   Throwable[] t = jove.getNestedExceptions();\r\n-   assertEquals(1, t.length);\r\n-   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n-    */\r\n-//        }\r\n-\r\n-    /*        assertTrue(pm.getRollbackOnly());\r\n-           pm.rollback();\r\n-\r\n-           assertEquals(-1, pc.getIntField());\r\n-           assertFalse(pm.isPersistent(npc));\r\n-           endEm(pm,());\r\n-       }\r\n-    */\r\n-    public void testConsistentOptimisticTransaction() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.setOptimistic(true);\r\n-        pm.validateChanges();        // no-op outside trans\r\n-        startTx(pm);\r\n-        boolean hasConn = hasConnection(pm);\r\n-\r\n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n-        pc.setIntField1(100);\r\n-\r\n-        RuntimeTest1 npc = new RuntimeTest1();\r\n-        npc.setIntField(2);\r\n-        npc.setIntField1(2);\r\n-        pm.persist(npc);\r\n-\r\n-        pm.validateChanges();\r\n-        if (!hasConn)\r\n-            assertFalse(hasConnection(pm));\r\n-\r\n-        assertEquals(100, pc.getIntField1());\r\n-        assertTrue(pm.isPersistent(npc));\r\n-\r\n-        pc.setIntField1(200);\r\n-        npc.setIntField1(300);\r\n-        endTx(pm);\r\n-\r\n-        assertEquals(200, pc.getIntField1());\r\n-        assertTrue(pm.isPersistent(npc));\r\n-        assertEquals(300, npc.getIntField1());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    private boolean hasConnection(OpenJPAEntityManager pm) {\r\n-        return JPAFacadeHelper.toBroker(pm).hasConnection();\r\n-    }\r\n-\r\n-    public void testConsistentOptimisticTransactionWithRollback() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.setOptimistic(true);\r\n-        pm.validateChanges();        // no-op outside trans\r\n-        startTx(pm);\r\n-        boolean hasConn = hasConnection(pm);\r\n-\r\n-        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\r\n-        pc.setIntField1(100);\r\n-\r\n-        RuntimeTest1 npc = new RuntimeTest1();\r\n-        pm.persist(npc);\r\n-        Object noid = pm.getObjectId(npc);\r\n-\r\n-        pm.validateChanges();\r\n-        if (!hasConn)\r\n-            assertFalse(hasConnection(pm));\r\n-\r\n-        assertEquals(100, pc.getIntField1());\r\n-        assertTrue(pm.isPersistent(npc));\r\n-\r\n-        pc.setIntField1(200);\r\n-        npc.setIntField1(300);\r\n-        rollbackTx(pm);\r\n-\r\n-        assertEquals(1, pc.getIntField1());\r\n-        assertFalse(pm.isPersistent(npc));\r\n-        assertEquals(0, npc.getIntField1());\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        try {\r\n-            RuntimeTest1 temp =\r\n-                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\r\n-\r\n-            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\r\n-                temp.getIntField1());\r\n-        } catch (Exception jonfe) {\r\n-        }\r\n-    }\r\n-//FIXME \r\n-    /*\r\n-public void testInconsistentOptimisticTransactionWithoutRefresh() {\r\n-OpenJPAEntityManager pm = getPM();\r\n-pm.setRetainState(false);\r\n-pm.setOptimistic(true);\r\n-pm.validateChanges();        // no-op outside trans\r\n-pm.begin();\r\n-\r\n-RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n-pc.setIntField(100);\r\n-\r\n-OpenJPAEntityManager pm2 = getPM();\r\n-pm2.begin();\r\n-RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n-copy.setIntField(-1);\r\n-pm2.commit();\r\n-pm2.close();\r\n-\r\n-RuntimeTest1 npc = new RuntimeTest1();\r\n-pm.persist(npc);\r\n-Object noid = pm.getObjectId(npc);\r\n-\r\n-try {\r\n-   pm.validateChanges();\r\n-   fail(\"Didn't find inconsistency.\");\r\n-} catch (Exception jove) {\r\n-   //FIXME jthomas\r\n-   /*\r\n-   Throwable[] t = jove.getNestedExceptions();\r\n-   assertEquals(1, t.length);\r\n-   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n-    */\r\n-    //     }\r\n-/*     assertFalse(pm.getRollbackOnly());\r\n-        \r\n-        try {\r\n-            pm.commit();\r\n-            fail(\"Committed inconsistent transaction.\");\r\n-        } catch (Exception je) {\r\n-        }\r\n-        \r\n-        assertEquals(-1, pc.getIntField());\r\n-        assertFalse(pm.isPersistent(npc));\r\n-        endEm(pm,());\r\n-        \r\n-        pm = getPM();\r\n-        try {\r\n-            pm.find(RuntimeTest1.class,noid);\r\n-            fail(\"Object should not exist.\");\r\n-        } catch (Exception jonfe) {\r\n-        }\r\n-        endEm(pm,());\r\n-    }\r\n- */\r\n-\r\n-//FIXME \r\n-/*    \r\n-    public void testInconsistentOptimisticTransactionWithRefresh() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.setOptimistic(true);\r\n-        pm.validateChanges();        // no-op outside trans\r\n-        pm.begin();\r\n-        \r\n-        RuntimeTest1 pc = pm.find(RuntimeTest1.class,_oid);\r\n-        pc.setIntField(100);\r\n-        \r\n-        OpenJPAEntityManager pm2 = getPM();\r\n-        pm2.begin();\r\n-        RuntimeTest1 copy = pm2.find(RuntimeTest1.class,_oid);\r\n-        copy.setIntField(-1);\r\n-        pm2.commit();\r\n-        pm2.close();\r\n-        \r\n-        RuntimeTest1 npc = new RuntimeTest1();\r\n-        pm.persist(npc);\r\n-        try {\r\n-            pm.validateChanges();\r\n-            fail(\"Didn't find inconsistency.\");\r\n-        } catch (Exception jove) {\r\n-            //FIXME jthomas\r\n-            /*\r\n-            Throwable[] t = jove.getNestedExceptions();\r\n-            assertEquals(1, t.length);\r\n-            assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n-             */\r\n-    //      }\r\n-    /*       assertFalse(pm.getRollbackOnly());\r\n-         pm.refresh(pc);\r\n-\r\n-         assertEquals(-1, pc.getIntField());\r\n-         assertTrue(pm.isPersistent(npc));\r\n-\r\n-         pc.setIntField(200);\r\n-         npc.setIntField(300);\r\n-         pm.commit();\r\n-\r\n-         assertEquals(200, pc.getIntField());\r\n-         assertTrue(pm.isPersistent(npc));\r\n-         assertEquals(300, npc.getIntField());\r\n-         endEm(pm,());\r\n-     }\r\n-    */\r\n-\r\n-//FIXME \r\n-\r\n-/*    \r\n-public void testInconsistentOptimisticTransactionWithRollback() {\r\n-OpenJPAEntityManager pm = getPM();\r\n-pm.setRetainState(false);\r\n-pm.setOptimistic(true);\r\n-pm.validateChanges();        // no-op outside trans\r\n-pm.begin();\r\n-\r\n-RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\r\n-pc.setIntField(100);\r\n-\r\n-OpenJPAEntityManager pm2 = getPM();\r\n-pm2.begin();\r\n-RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\r\n-copy.setIntField(-1);\r\n-pm2.commit();\r\n-pm2.close();\r\n-\r\n-RuntimeTest1 npc = new RuntimeTest1();\r\n-pm.persist(npc);\r\n-Object noid = pm.getObjectId(npc);\r\n-\r\n-try {\r\n-pm.validateChanges();\r\n-fail(\"Didn't find inconsistency.\");\r\n-} catch (Exception jove) {\r\n-//FIXME jthomas\r\n-/*\r\n-Throwable[] t = jove.getNestedExceptions();\r\n-assertEquals(1, t.length);\r\n-assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\r\n-*/\r\n-    //      }\r\n-    /*       assertFalse(pm.getRollbackOnly());\r\n-          pm.rollback();\r\n-\r\n-          assertEquals(-1, pc.getIntField());\r\n-          assertFalse(pm.isPersistent(npc));\r\n-          endEm(pm,());\r\n-\r\n-          pm = getPM();\r\n-          try {\r\n-              pm.find(RuntimeTest1.class,_oid);\r\n-              fail(\"Object should not exist.\");\r\n-          } catch (Exception jonfe) {\r\n-          }\r\n-          endEm(pm,());\r\n-      }\r\n-\r\n-    */\r\n-}\r\n+/*\n+ * TestCheckConsistency.java\n+ *\n+ * Created on October 9, 2006, 6:23 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestCheckConsistency extends BaseKernelTest {\n+\n+    private Object _oid = null;\n+\n+    /**\n+     * Creates a new instance of TestCheckConsistency\n+     */\n+    public TestCheckConsistency(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        RuntimeTest1 pc = new RuntimeTest1();\n+        pc.setIntField(1);\n+        pc.setIntField1(1);\n+        _oid = persist(pc);\n+    }\n+\n+    public void testConsistentDatastoreTransaction() {\n+\n+        OpenJPAEntityManager pm = getPM();\n+        pm.setOptimistic(false);\n+        pm.validateChanges();        // no-op outside trans\n+        startTx(pm);\n+\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        pc.setIntField1(100);\n+\n+        RuntimeTest1 npc = new RuntimeTest1();\n+        npc.setIntField(2);\n+        npc.setIntField1(2);\n+        pm.persist(npc);\n+        pm.validateChanges();\n+\n+        assertEquals(100, pc.getIntField1());\n+        assertTrue(pm.isPersistent(npc));\n+\n+        pc.setIntField1(200);\n+        npc.setIntField1(300);\n+        endTx(pm);\n+\n+        assertEquals(200, pc.getIntField1());\n+        assertTrue(pm.isPersistent(npc));\n+        assertEquals(300, npc.getIntField1());\n+        endEm(pm);\n+    }\n+\n+    public void testConsistentDatastoreTransactionWithRollback() {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.setOptimistic(false);\n+        pm.validateChanges();        // no-op outside trans\n+        startTx(pm);\n+\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        pc.setIntField1(100);\n+\n+        RuntimeTest1 npc = new RuntimeTest1();\n+        pm.persist(npc);\n+        Object noid = pm.getObjectId(npc);\n+\n+        pm.validateChanges();\n+        assertEquals(100, pc.getIntField1());\n+        assertTrue(pm.isPersistent(npc));\n+\n+        pc.setIntField1(200);\n+        npc.setIntField1(300);\n+        rollbackTx(pm);\n+\n+        assertEquals(1, pc.getIntField1());\n+        assertFalse(pm.isPersistent(npc));\n+        assertEquals(0, npc.getIntField1());\n+        endEm(pm);\n+\n+        pm = getPM();\n+        try {\n+            RuntimeTest1 temp =\n+                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\n+            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\n+                temp.getIntField1());\n+        } catch (Exception jonfe) {\n+        }\n+        endEm(pm);\n+    }\n+\n+    //FIXME jthomas\n+/*    \n+    public void testInconsistentDatastoreTransaction() {\n+        OpenJPAEntityManager pm = getPM();\n+        FetchPlan fetch = (FetchPlan) pm.getFetchPlan();\n+        pm.setOptimistic(false);\n+        pm.setRetainState(false);\n+        pm.validateChanges();        // no-op outside trans\n+        pm.begin();\n+  */\n+    //FIXME jthomas\n+    /*\n+   fetch.setReadLockLevel(pm.LOCK_NONE);\n+   fetch.setWriteLockLevel(pm.LOCK_NONE);\n+    */\n+    /*\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\n+pc.setIntField(100);\n+\n+OpenJPAEntityManager pm2 = getPM();\n+pm2.begin();\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\n+copy.setIntField(-1);\n+pm2.commit();\n+pm2.close();\n+\n+RuntimeTest1 npc = new RuntimeTest1();\n+pm.persist(npc);\n+\n+try {\n+   pm.validateChanges();\n+   fail(\"Didn't find inconsistency.\");\n+} catch (Exception jove) {\n+   //FIXME\n+   /*\n+   Throwable[] t = jove.getNestedExceptions();\n+   assertEquals(1, t.length);\n+   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\n+    */\n+//        }\n+\n+    /*        assertTrue(pm.getRollbackOnly());\n+           pm.rollback();\n+\n+           assertEquals(-1, pc.getIntField());\n+           assertFalse(pm.isPersistent(npc));\n+           endEm(pm,());\n+       }\n+    */\n+    public void testConsistentOptimisticTransaction() {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.setOptimistic(true);\n+        pm.validateChanges();        // no-op outside trans\n+        startTx(pm);\n+        boolean hasConn = hasConnection(pm);\n+\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        pc.setIntField1(100);\n+\n+        RuntimeTest1 npc = new RuntimeTest1();\n+        npc.setIntField(2);\n+        npc.setIntField1(2);\n+        pm.persist(npc);\n+\n+        pm.validateChanges();\n+        if (!hasConn)\n+            assertFalse(hasConnection(pm));\n+\n+        assertEquals(100, pc.getIntField1());\n+        assertTrue(pm.isPersistent(npc));\n+\n+        pc.setIntField1(200);\n+        npc.setIntField1(300);\n+        endTx(pm);\n+\n+        assertEquals(200, pc.getIntField1());\n+        assertTrue(pm.isPersistent(npc));\n+        assertEquals(300, npc.getIntField1());\n+        endEm(pm);\n+    }\n+\n+    private boolean hasConnection(OpenJPAEntityManager pm) {\n+        return JPAFacadeHelper.toBroker(pm).hasConnection();\n+    }\n+\n+    public void testConsistentOptimisticTransactionWithRollback() {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.setOptimistic(true);\n+        pm.validateChanges();        // no-op outside trans\n+        startTx(pm);\n+        boolean hasConn = hasConnection(pm);\n+\n+        RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class, _oid);\n+        pc.setIntField1(100);\n+\n+        RuntimeTest1 npc = new RuntimeTest1();\n+        pm.persist(npc);\n+        Object noid = pm.getObjectId(npc);\n+\n+        pm.validateChanges();\n+        if (!hasConn)\n+            assertFalse(hasConnection(pm));\n+\n+        assertEquals(100, pc.getIntField1());\n+        assertTrue(pm.isPersistent(npc));\n+\n+        pc.setIntField1(200);\n+        npc.setIntField1(300);\n+        rollbackTx(pm);\n+\n+        assertEquals(1, pc.getIntField1());\n+        assertFalse(pm.isPersistent(npc));\n+        assertEquals(0, npc.getIntField1());\n+        endEm(pm);\n+\n+        pm = getPM();\n+        try {\n+            RuntimeTest1 temp =\n+                (RuntimeTest1) pm.find(RuntimeTest1.class, noid);\n+\n+            fail(\"Object should not exist.\" + temp.getIntField() + \"::\" +\n+                temp.getIntField1());\n+        } catch (Exception jonfe) {\n+        }\n+    }\n+//FIXME \n+    /*\n+public void testInconsistentOptimisticTransactionWithoutRefresh() {\n+OpenJPAEntityManager pm = getPM();\n+pm.setRetainState(false);\n+pm.setOptimistic(true);\n+pm.validateChanges();        // no-op outside trans\n+pm.begin();\n+\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\n+pc.setIntField(100);\n+\n+OpenJPAEntityManager pm2 = getPM();\n+pm2.begin();\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\n+copy.setIntField(-1);\n+pm2.commit();\n+pm2.close();\n+\n+RuntimeTest1 npc = new RuntimeTest1();\n+pm.persist(npc);\n+Object noid = pm.getObjectId(npc);\n+\n+try {\n+   pm.validateChanges();\n+   fail(\"Didn't find inconsistency.\");\n+} catch (Exception jove) {\n+   //FIXME jthomas\n+   /*\n+   Throwable[] t = jove.getNestedExceptions();\n+   assertEquals(1, t.length);\n+   assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\n+    */\n+    //     }\n+/*     assertFalse(pm.getRollbackOnly());\n+        \n+        try {\n+            pm.commit();\n+            fail(\"Committed inconsistent transaction.\");\n+        } catch (Exception je) {\n+        }\n+        \n+        assertEquals(-1, pc.getIntField());\n+        assertFalse(pm.isPersistent(npc));\n+        endEm(pm,());\n+        \n+        pm = getPM();\n+        try {\n+            pm.find(RuntimeTest1.class,noid);\n+            fail(\"Object should not exist.\");\n+        } catch (Exception jonfe) {\n+        }\n+        endEm(pm,());\n+    }\n+ */\n+\n+//FIXME \n+/*    \n+    public void testInconsistentOptimisticTransactionWithRefresh() {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.setOptimistic(true);\n+        pm.validateChanges();        // no-op outside trans\n+        pm.begin();\n+        \n+        RuntimeTest1 pc = pm.find(RuntimeTest1.class,_oid);\n+        pc.setIntField(100);\n+        \n+        OpenJPAEntityManager pm2 = getPM();\n+        pm2.begin();\n+        RuntimeTest1 copy = pm2.find(RuntimeTest1.class,_oid);\n+        copy.setIntField(-1);\n+        pm2.commit();\n+        pm2.close();\n+        \n+        RuntimeTest1 npc = new RuntimeTest1();\n+        pm.persist(npc);\n+        try {\n+            pm.validateChanges();\n+            fail(\"Didn't find inconsistency.\");\n+        } catch (Exception jove) {\n+            //FIXME jthomas\n+            /*\n+            Throwable[] t = jove.getNestedExceptions();\n+            assertEquals(1, t.length);\n+            assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\n+             */\n+    //      }\n+    /*       assertFalse(pm.getRollbackOnly());\n+         pm.refresh(pc);\n+\n+         assertEquals(-1, pc.getIntField());\n+         assertTrue(pm.isPersistent(npc));\n+\n+         pc.setIntField(200);\n+         npc.setIntField(300);\n+         pm.commit();\n+\n+         assertEquals(200, pc.getIntField());\n+         assertTrue(pm.isPersistent(npc));\n+         assertEquals(300, npc.getIntField());\n+         endEm(pm,());\n+     }\n+    */\n+\n+//FIXME \n+\n+/*    \n+public void testInconsistentOptimisticTransactionWithRollback() {\n+OpenJPAEntityManager pm = getPM();\n+pm.setRetainState(false);\n+pm.setOptimistic(true);\n+pm.validateChanges();        // no-op outside trans\n+pm.begin();\n+\n+RuntimeTest1 pc = (RuntimeTest1) pm.find(RuntimeTest1.class,_oid);\n+pc.setIntField(100);\n+\n+OpenJPAEntityManager pm2 = getPM();\n+pm2.begin();\n+RuntimeTest1 copy = (RuntimeTest1) pm2.find(RuntimeTest1.class,_oid);\n+copy.setIntField(-1);\n+pm2.commit();\n+pm2.close();\n+\n+RuntimeTest1 npc = new RuntimeTest1();\n+pm.persist(npc);\n+Object noid = pm.getObjectId(npc);\n+\n+try {\n+pm.validateChanges();\n+fail(\"Didn't find inconsistency.\");\n+} catch (Exception jove) {\n+//FIXME jthomas\n+/*\n+Throwable[] t = jove.getNestedExceptions();\n+assertEquals(1, t.length);\n+assertEquals(pc, (((JDOException) t[0]).getFailedObject()));\n+*/\n+    //      }\n+    /*       assertFalse(pm.getRollbackOnly());\n+          pm.rollback();\n+\n+          assertEquals(-1, pc.getIntField());\n+          assertFalse(pm.isPersistent(npc));\n+          endEm(pm,());\n+\n+          pm = getPM();\n+          try {\n+              pm.find(RuntimeTest1.class,_oid);\n+              fail(\"Object should not exist.\");\n+          } catch (Exception jonfe) {\n+          }\n+          endEm(pm,());\n+      }\n+\n+    */\n+}"},{"sha":"0c8d683afcff7725d24dc181fadcd7cd8192baa2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestClassStringConstructor.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,61 +1,61 @@\n-/*\r\n- * TestClassStringConstructor.java\r\n- *\r\n- * Created on October 16, 2006, 2:48 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestClassStringConstructor extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestClassStringConstructor\r\n-     */\r\n-    public TestClassStringConstructor(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(AppIdClassString.class);\r\n-    }\r\n-\r\n-    public void testConstructor() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        AppIdClassString pc = new AppIdClassString(5);\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        pc = pm.find(AppIdClassString.class, new AppIdClassString.Idkey(\"5\"));\r\n-        assertEquals(5, pc.getPk());\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * TestClassStringConstructor.java\n+ *\n+ * Created on October 16, 2006, 2:48 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestClassStringConstructor extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestClassStringConstructor\n+     */\n+    public TestClassStringConstructor(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(AppIdClassString.class);\n+    }\n+\n+    public void testConstructor() {\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        AppIdClassString pc = new AppIdClassString(5);\n+        pm.persist(pc);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        pc = pm.find(AppIdClassString.class, new AppIdClassString.Idkey(\"5\"));\n+        assertEquals(5, pc.getPk());\n+        endEm(pm);\n+    }\n+}"},{"sha":"e0eba0117cb732be8fc40440880925a7deca9a1e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestConnectionRetainMode.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,118 +1,118 @@\n-/*\r\n- * TestConnectionRetainMode.java\r\n- *\r\n- * Created on October 10, 2006, 1:09 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-\r\n-public class TestConnectionRetainMode extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestConnectionRetainMode\r\n-     */\r\n-    public TestConnectionRetainMode() {\r\n-    }\r\n-\r\n-    public TestConnectionRetainMode(String str) {\r\n-        super(str);\r\n-    }\r\n-\r\n-    public void testOnDemand()\r\n-        throws Exception {\r\n-        doTest(\"on-demand\");\r\n-    }\r\n-\r\n-    public void testTransaction()\r\n-        throws Exception {\r\n-        doTest(\"transaction\");\r\n-    }\r\n-\r\n-    public void testPersistenceManager()\r\n-        throws Exception {\r\n-        doTest(\"persistence-manager\");\r\n-    }\r\n-\r\n-    public void doTest(String mode)\r\n-        throws Exception {\r\n-        Map props = new HashMap();\r\n-        props.put(\"openjpa.ConnectionRetainMode\", mode);\r\n-\r\n-        OpenJPAEntityManagerFactory factory = getEmf(props);\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) factory.createEntityManager();\r\n-        Object initialConnection = pm.getConnection();\r\n-\r\n-        try {\r\n-            checkPM(pm, initialConnection, mode);\r\n-\r\n-            pm.setOptimistic(true);\r\n-            startTx(pm);\r\n-\r\n-            Object optimisticConnection = pm.getConnection();\r\n-            checkPM(pm, initialConnection, mode);\r\n-            checkTransaction(pm, optimisticConnection, mode);\r\n-\r\n-            rollbackTx(pm);\r\n-            checkPM(pm, initialConnection, mode);\r\n-\r\n-            pm.setOptimistic(false);\r\n-            startTx(pm);\r\n-\r\n-            Object pessimisticConnection = pm.getConnection();\r\n-            checkPM(pm, initialConnection, mode);\r\n-            checkTransaction(pm, pessimisticConnection, mode);\r\n-\r\n-            rollbackTx(pm);\r\n-            checkPM(pm, initialConnection, mode);\r\n-        } finally {\r\n-\r\n-            rollbackTx(pm);\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-\r\n-    private void checkPM(OpenJPAEntityManager pm, Object c, String mode)\r\n-        throws Exception {\r\n-        if (\"persistence-manager\".equals(mode))\r\n-            assertEquals(c, pm.getConnection());\r\n-    }\r\n-\r\n-    private void checkTransaction(OpenJPAEntityManager pm, Object c,\r\n-        String mode)\r\n-        throws Exception {\r\n-        if (!\"on-demand\".equals(mode)\r\n-            || !pm.getOptimistic())\r\n-            assertEquals(c, pm.getConnection());\r\n-    }\r\n-}\r\n+/*\n+ * TestConnectionRetainMode.java\n+ *\n+ * Created on October 10, 2006, 1:09 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+public class TestConnectionRetainMode extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestConnectionRetainMode\n+     */\n+    public TestConnectionRetainMode() {\n+    }\n+\n+    public TestConnectionRetainMode(String str) {\n+        super(str);\n+    }\n+\n+    public void testOnDemand()\n+        throws Exception {\n+        doTest(\"on-demand\");\n+    }\n+\n+    public void testTransaction()\n+        throws Exception {\n+        doTest(\"transaction\");\n+    }\n+\n+    public void testPersistenceManager()\n+        throws Exception {\n+        doTest(\"persistence-manager\");\n+    }\n+\n+    public void doTest(String mode)\n+        throws Exception {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.ConnectionRetainMode\", mode);\n+\n+        OpenJPAEntityManagerFactory factory = getEmf(props);\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) factory.createEntityManager();\n+        Object initialConnection = pm.getConnection();\n+\n+        try {\n+            checkPM(pm, initialConnection, mode);\n+\n+            pm.setOptimistic(true);\n+            startTx(pm);\n+\n+            Object optimisticConnection = pm.getConnection();\n+            checkPM(pm, initialConnection, mode);\n+            checkTransaction(pm, optimisticConnection, mode);\n+\n+            rollbackTx(pm);\n+            checkPM(pm, initialConnection, mode);\n+\n+            pm.setOptimistic(false);\n+            startTx(pm);\n+\n+            Object pessimisticConnection = pm.getConnection();\n+            checkPM(pm, initialConnection, mode);\n+            checkTransaction(pm, pessimisticConnection, mode);\n+\n+            rollbackTx(pm);\n+            checkPM(pm, initialConnection, mode);\n+        } finally {\n+\n+            rollbackTx(pm);\n+            endEm(pm);\n+        }\n+    }\n+\n+    private void checkPM(OpenJPAEntityManager pm, Object c, String mode)\n+        throws Exception {\n+        if (\"persistence-manager\".equals(mode))\n+            assertEquals(c, pm.getConnection());\n+    }\n+\n+    private void checkTransaction(OpenJPAEntityManager pm, Object c,\n+        String mode)\n+        throws Exception {\n+        if (!\"on-demand\".equals(mode)\n+            || !pm.getOptimistic())\n+            assertEquals(c, pm.getConnection());\n+    }\n+}"},{"sha":"77d253f961bced02dc609e4b1f286ce57b897bbb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","status":"modified","additions":134,"deletions":134,"changes":268,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDateQueries.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,134 +1,134 @@\n-/*\r\n- * TestDateQueries.java\r\n- *\r\n- * Created on October 10, 2006, 1:28 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.text.SimpleDateFormat;\r\n-import java.util.Collection;\r\n-import java.util.Date;\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestDateQueries extends BaseKernelTest {\r\n-\r\n-    private OpenJPAEntityManager _pm = null;\r\n-    private Date _date = null;\r\n-    private Date _before = null;\r\n-    private Date _after = null;\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestDateQueries\r\n-     */\r\n-    public TestDateQueries() {\r\n-    }\r\n-\r\n-    public TestDateQueries(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        super.setUp();\r\n-\r\n-        SimpleDateFormat sdf = new SimpleDateFormat(\"MMMMM dd, yyyy\");\r\n-        _date = sdf.parse(\"April 26, 1978\");\r\n-        _before = sdf.parse(\"April 25, 1978\");\r\n-        _after = sdf.parse(\"April 27, 1978\");\r\n-        _pm = getPM();\r\n-\r\n-        // delete all existing instances\r\n-        deleteAll(AllFieldTypesTest.class);\r\n-\r\n-        // create some instances to query on\r\n-        startTx(_pm);\r\n-        AllFieldTypesTest test = new AllFieldTypesTest();\r\n-        test.setTestDate(_date);\r\n-        _pm.persist(test);\r\n-\r\n-        test = new AllFieldTypesTest();\r\n-        test.setTestDate(_before);\r\n-        _pm.persist(test);\r\n-\r\n-        test = new AllFieldTypesTest();\r\n-        test.setTestDate(_after);\r\n-        _pm.persist(test);\r\n-        endTx(_pm);\r\n-    }\r\n-\r\n-    public void testEquals() {\r\n-        Collection vals = executeQuery(\"testDate = :date\");\r\n-        assertEquals(1, vals.size());\r\n-        assertEquals(_date, ((AllFieldTypesTest) vals.iterator().next()).\r\n-            getTestDate());\r\n-    }\r\n-\r\n-    public void testNotEquals() {\r\n-        Collection vals = executeQuery(\"testDate <> :date\");\r\n-        assertEquals(2, vals.size());\r\n-    }\r\n-\r\n-    public void testBefore() {\r\n-        Collection vals = executeQuery(\"testDate < :date\");\r\n-        assertEquals(1, vals.size());\r\n-        assertEquals(_before, ((AllFieldTypesTest) vals.iterator().next()).\r\n-            getTestDate());\r\n-    }\r\n-\r\n-    public void testAfter() {\r\n-        Collection vals = executeQuery(\"testDate > :date\");\r\n-        assertEquals(1, vals.size());\r\n-        assertEquals(_after, ((AllFieldTypesTest) vals.iterator().next()).\r\n-            getTestDate());\r\n-    }\r\n-\r\n-    public void testOrderBy() {\r\n-        String query =\r\n-            \"SELECT o FROM AllFieldTypesTest o ORDER BY o.testDate ASC\";\r\n-        OpenJPAQuery q = _pm.createQuery(query);\r\n-        List vals = q.getResultList();\r\n-        assertEquals(3, vals.size());\r\n-\r\n-        Iterator i = vals.iterator();\r\n-        assertEquals(_before, ((AllFieldTypesTest) i.next()).getTestDate());\r\n-        assertEquals(_date, ((AllFieldTypesTest) i.next()).getTestDate());\r\n-        assertEquals(_after, ((AllFieldTypesTest) i.next()).getTestDate());\r\n-    }\r\n-\r\n-    private List executeQuery(String filter) {\r\n-        String query = \"SELECT o FROM AllFieldTypesTest o WHERE o.\" + filter;\r\n-        OpenJPAQuery q = _pm.createQuery(query);\r\n-        q.setParameter(\"date\", _date);\r\n-        return q.getResultList();\r\n-    }\r\n-}\r\n+/*\n+ * TestDateQueries.java\n+ *\n+ * Created on October 10, 2006, 1:28 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestDateQueries extends BaseKernelTest {\n+\n+    private OpenJPAEntityManager _pm = null;\n+    private Date _date = null;\n+    private Date _before = null;\n+    private Date _after = null;\n+\n+    /**\n+     * Creates a new instance of TestDateQueries\n+     */\n+    public TestDateQueries() {\n+    }\n+\n+    public TestDateQueries(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        super.setUp();\n+\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"MMMMM dd, yyyy\");\n+        _date = sdf.parse(\"April 26, 1978\");\n+        _before = sdf.parse(\"April 25, 1978\");\n+        _after = sdf.parse(\"April 27, 1978\");\n+        _pm = getPM();\n+\n+        // delete all existing instances\n+        deleteAll(AllFieldTypesTest.class);\n+\n+        // create some instances to query on\n+        startTx(_pm);\n+        AllFieldTypesTest test = new AllFieldTypesTest();\n+        test.setTestDate(_date);\n+        _pm.persist(test);\n+\n+        test = new AllFieldTypesTest();\n+        test.setTestDate(_before);\n+        _pm.persist(test);\n+\n+        test = new AllFieldTypesTest();\n+        test.setTestDate(_after);\n+        _pm.persist(test);\n+        endTx(_pm);\n+    }\n+\n+    public void testEquals() {\n+        Collection vals = executeQuery(\"testDate = :date\");\n+        assertEquals(1, vals.size());\n+        assertEquals(_date, ((AllFieldTypesTest) vals.iterator().next()).\n+            getTestDate());\n+    }\n+\n+    public void testNotEquals() {\n+        Collection vals = executeQuery(\"testDate <> :date\");\n+        assertEquals(2, vals.size());\n+    }\n+\n+    public void testBefore() {\n+        Collection vals = executeQuery(\"testDate < :date\");\n+        assertEquals(1, vals.size());\n+        assertEquals(_before, ((AllFieldTypesTest) vals.iterator().next()).\n+            getTestDate());\n+    }\n+\n+    public void testAfter() {\n+        Collection vals = executeQuery(\"testDate > :date\");\n+        assertEquals(1, vals.size());\n+        assertEquals(_after, ((AllFieldTypesTest) vals.iterator().next()).\n+            getTestDate());\n+    }\n+\n+    public void testOrderBy() {\n+        String query =\n+            \"SELECT o FROM AllFieldTypesTest o ORDER BY o.testDate ASC\";\n+        OpenJPAQuery q = _pm.createQuery(query);\n+        List vals = q.getResultList();\n+        assertEquals(3, vals.size());\n+\n+        Iterator i = vals.iterator();\n+        assertEquals(_before, ((AllFieldTypesTest) i.next()).getTestDate());\n+        assertEquals(_date, ((AllFieldTypesTest) i.next()).getTestDate());\n+        assertEquals(_after, ((AllFieldTypesTest) i.next()).getTestDate());\n+    }\n+\n+    private List executeQuery(String filter) {\n+        String query = \"SELECT o FROM AllFieldTypesTest o WHERE o.\" + filter;\n+        OpenJPAQuery q = _pm.createQuery(query);\n+        q.setParameter(\"date\", _date);\n+        return q.getResultList();\n+    }\n+}"},{"sha":"a598c93fe4c74261ab065ad48de439d897e33aa9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","status":"modified","additions":566,"deletions":566,"changes":1132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDependentFields2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,566 +1,566 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC;\r\n-import org.apache.openjpa.persistence.Extent;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-\r\n-public class TestDependentFields2 extends BaseKernelTest {\r\n-\r\n-    private static final int COMMIT = 0;\r\n-    private static final int ROLLBACK = 1;\r\n-    private static final int PRESTORE = 2;\r\n-\r\n-    private Object _root = null;\r\n-    private Object _rel = null;\r\n-    private Object _depRel = null;\r\n-    private Object _deep = null;\r\n-    private Object _coll = null;\r\n-    private Object _depColl = null;\r\n-    private Object _map = null;\r\n-    private Object _depMap = null;\r\n-    private Object _repeat = null;\r\n-\r\n-    public TestDependentFields2(String casename) {\r\n-        super(casename);\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        deleteAll(DependentFieldsPC.class);\r\n-\r\n-        DependentFieldsPC root = new DependentFieldsPC();\r\n-        root.setRelation(new DependentFieldsPC());\r\n-        root.getList().add(new DependentFieldsPC());\r\n-        root.getMap().put(\"key\", new DependentFieldsPC());\r\n-        root.setDependentRelation(new DependentFieldsPC());\r\n-        root.getDependentRelation().setDependentRelation\r\n-            (new DependentFieldsPC());\r\n-        root.getDependentList().add(new DependentFieldsPC());\r\n-        root.getDependentMap().put(\"key\", new DependentFieldsPC());\r\n-\r\n-        DependentFieldsPC repeat = new DependentFieldsPC();\r\n-        root.getDependentList().add(repeat);\r\n-        root.getDependentMap().put(\"repeat\", repeat);\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(root);\r\n-        endTx(pm);\r\n-\r\n-        _root = pm.getObjectId(root);\r\n-        assertNotNull(_root);\r\n-        _rel = pm.getObjectId(root.getRelation());\r\n-        _depRel = pm.getObjectId(root.getDependentRelation());\r\n-        _deep = pm.getObjectId(root.getDependentRelation().\r\n-            getDependentRelation());\r\n-        _coll = pm.getObjectId(root.getList().iterator().next());\r\n-        Iterator itr = root.getDependentList().iterator();\r\n-        _depColl = pm.getObjectId(itr.next());\r\n-        _repeat = pm.getObjectId(itr.next());\r\n-        _map = pm.getObjectId(root.getMap().get(\"key\"));\r\n-        _depMap = pm.getObjectId(root.getDependentMap().get(\"key\"));\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testDependentFieldsLoaded() {\r\n-        delete(true, COMMIT);\r\n-        checkFields();\r\n-    }\r\n-\r\n-    public void testDependentFieldsLoadedWithRollback() {\r\n-        delete(true, ROLLBACK);\r\n-        checkFields();\r\n-    }\r\n-\r\n-    public void testDependentFieldsLoadedWithPreStore() {\r\n-        delete(true, PRESTORE);\r\n-        checkFields();\r\n-    }\r\n-\r\n-    public void testDependentFieldsUnloaded() {\r\n-        delete(false, COMMIT);\r\n-        checkFields();\r\n-    }\r\n-\r\n-    public void testDependentFieldsUnloadedWithRollback() {\r\n-        delete(false, ROLLBACK);\r\n-        checkFields();\r\n-    }\r\n-\r\n-    public void testDependentFieldsUnloadedWithPreStore() {\r\n-        delete(false, PRESTORE);\r\n-        checkFields();\r\n-    }\r\n-\r\n-    private void delete(boolean load, int action) {\r\n-        OpenJPAEntityManager pm = getPM(true, true);\r\n-        DependentFieldsPC root;\r\n-        Object rel = null;\r\n-        Object depRel = null;\r\n-        Object coll = null;\r\n-        Object depColl = null;\r\n-        Object map = null;\r\n-        Object depMap = null;\r\n-        Object repeat = null;\r\n-        Object deep = null;\r\n-        while (true) {\r\n-            startTx(pm);\r\n-            root = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n-            if (load) {\r\n-                rel = root.getRelation();\r\n-                assertNotNull(rel);\r\n-                depRel = root.getDependentRelation();\r\n-                assertNotNull(depRel);\r\n-                deep = ((DependentFieldsPC) depRel).getDependentRelation();\r\n-                assertNotNull(deep);\r\n-                coll = root.getList().iterator().next();\r\n-                assertNotNull(coll);\r\n-                Iterator itr = root.getDependentList().iterator();\r\n-                depColl = itr.next();\r\n-                repeat = itr.next();\r\n-                assertNotNull(depColl);\r\n-                assertNotNull(repeat);\r\n-                map = root.getMap().get(\"key\");\r\n-                assertNotNull(map);\r\n-                depMap = root.getDependentMap().get(\"key\");\r\n-                assertNotNull(depMap);\r\n-\r\n-                // pcl: test both depColl and repeat, since they might\r\n-                // have been out of order above.\r\n-                Object o = root.getDependentMap().get(\"repeat\");\r\n-                if (o != repeat)\r\n-                    fail(\"dependent map does not contain 'repeat'\");\r\n-            }\r\n-            pm.remove(root);\r\n-\r\n-            if (action == ROLLBACK) {\r\n-                rollbackTx(pm);\r\n-                action = COMMIT;\r\n-            } else if (action == COMMIT) {\r\n-                endTx(pm);\r\n-                break;\r\n-            } else {\r\n-                pm.preFlush();\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        if (load) {\r\n-            if (action == PRESTORE) {\r\n-                assertFalse(pm.isRemoved(rel));\r\n-                assertFalse(pm.isRemoved(coll));\r\n-                assertFalse(pm.isRemoved(map));\r\n-                assertTrue(pm.isRemoved(depRel));\r\n-                assertTrue(pm.isRemoved(deep));\r\n-                assertTrue(pm.isRemoved(depColl));\r\n-                assertTrue(pm.isRemoved(depMap));\r\n-                assertTrue(pm.isRemoved(repeat));\r\n-            } else {\r\n-                assertNotNull(OpenJPAPersistence.getEntityManager(rel));\r\n-                assertNotNull(OpenJPAPersistence.getEntityManager(coll));\r\n-                assertNotNull(OpenJPAPersistence.getEntityManager(map));\r\n-                assertNull(OpenJPAPersistence.getEntityManager(depRel));\r\n-                assertNull(OpenJPAPersistence.getEntityManager(deep));\r\n-                assertNull(OpenJPAPersistence.getEntityManager(depColl));\r\n-                assertNull(OpenJPAPersistence.getEntityManager(depMap));\r\n-                assertNull(OpenJPAPersistence.getEntityManager(repeat));\r\n-            }\r\n-        }\r\n-\r\n-        if (action == PRESTORE)\r\n-            endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    private void checkFields() {\r\n-        OpenJPAEntityManager pm = getPM(true, true);\r\n-        assertNotNull(pm.find(DependentFieldsPC.class, _rel));\r\n-        assertNotNull(pm.find(DependentFieldsPC.class, _coll));\r\n-        assertNotNull(pm.find(DependentFieldsPC.class, _map));\r\n-        assertNull(pm.find(DependentFieldsPC.class, _depRel));\r\n-        assertNull(pm.find(DependentFieldsPC.class, _deep));\r\n-        assertNull(pm.find(DependentFieldsPC.class, _depColl));\r\n-        assertNull(pm.find(DependentFieldsPC.class, _depMap));\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNullDeletesDependent() {\r\n-        nullDeletesDependent(COMMIT);\r\n-    }\r\n-\r\n-    public void testNullDeletesDependentWithRollback() {\r\n-        nullDeletesDependent(ROLLBACK);\r\n-    }\r\n-\r\n-    public void testNullDeletesDependentWithPreStore() {\r\n-        nullDeletesDependent(PRESTORE);\r\n-    }\r\n-\r\n-    private void nullDeletesDependent(int action) {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        DependentFieldsPC pc;\r\n-        DependentFieldsPC depRel;\r\n-        while (true) {\r\n-            startTx(pm);\r\n-            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n-            depRel = pc.getDependentRelation();\r\n-            assertEquals(_depRel, pm.getObjectId(depRel));\r\n-            pc.setDependentRelation(null);\r\n-            if (action == ROLLBACK) {\r\n-                rollbackTx(pm);\r\n-                action = COMMIT;\r\n-            } else if (action == COMMIT) {\r\n-                endTx(pm);\r\n-                break;\r\n-            } else {\r\n-                pm.preFlush();\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        if (action == PRESTORE) {\r\n-            assertTrue(pm.isRemoved(depRel));\r\n-            endTx(pm);\r\n-        }\r\n-\r\n-        assertTrue(!pm.isPersistent(depRel));\r\n-        assertNull(pm.find(DependentFieldsPC.class, _depRel));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testRemoveDeletesDependent() {\r\n-        removeDeletesDependent(COMMIT);\r\n-    }\r\n-\r\n-    public void testRemoveDeletesDependentWithRollback() {\r\n-        removeDeletesDependent(ROLLBACK);\r\n-    }\r\n-\r\n-    public void testRemoveDeletesDependentWithPreStore() {\r\n-        removeDeletesDependent(PRESTORE);\r\n-    }\r\n-\r\n-    private void removeDeletesDependent(int action) {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        DependentFieldsPC pc;\r\n-        DependentFieldsPC depColl;\r\n-        DependentFieldsPC depMap;\r\n-        List list;\r\n-        Map map;\r\n-        while (true) {\r\n-            startTx(pm);\r\n-            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n-            list = pc.getDependentList();\r\n-            assertEquals(\"list size =! 2\", 2, list.size());\r\n-            depColl = (DependentFieldsPC) list.remove(0);\r\n-            assertEquals(\"_depColl is not pm.getObjectId(depColl)\", _depColl,\r\n-                pm.getObjectId(depColl));\r\n-\r\n-            map = pc.getDependentMap();\r\n-            assertEquals(\"map size =! 2\", 2, map.size());\r\n-            depMap = (DependentFieldsPC) map.remove(\"key\");\r\n-            assertEquals(\"_depMap is not pm.getObjectId(depMap)\", _depMap,\r\n-                pm.getObjectId(depMap));\r\n-\r\n-            if (action == ROLLBACK) {\r\n-                rollbackTx(pm);\r\n-                action = COMMIT;\r\n-            } else if (action == COMMIT) {\r\n-                endTx(pm);\r\n-                break;\r\n-            } else {\r\n-                pm.preFlush();\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        if (action == PRESTORE) {\r\n-            assertTrue(pm.isRemoved(depColl));\r\n-            assertTrue(pm.isRemoved(depMap));\r\n-            endTx(pm);\r\n-        }\r\n-\r\n-//        assertTrue(\"depcoll is persistence\", !pm.isPersistent(depColl));\r\n-        assertNull(pm.find(DependentFieldsPC.class, _depColl));\r\n-\r\n-//        assertTrue(\"depMap is persistence\", !pm.isPersistent(depMap));\r\n-        assertNull(pm.find(DependentFieldsPC.class, _depMap));\r\n-\r\n-        assertNotNull(\"repeat is null\",\r\n-            pm.find(DependentFieldsPC.class, _repeat));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testMoveDependentInContainer() {\r\n-        moveDependentInContainer(COMMIT);\r\n-    }\r\n-\r\n-    public void testMoveDependentInContainerWithRollback() {\r\n-        moveDependentInContainer(ROLLBACK);\r\n-    }\r\n-\r\n-    public void testMoveDependentInContainerWithPreStore() {\r\n-        moveDependentInContainer(PRESTORE);\r\n-    }\r\n-\r\n-    private void moveDependentInContainer(int action) {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        DependentFieldsPC pc;\r\n-        DependentFieldsPC depColl;\r\n-        DependentFieldsPC depMap;\r\n-        List list;\r\n-        Map map;\r\n-        while (true) {\r\n-            startTx(pm);\r\n-            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n-            list = pc.getDependentList();\r\n-            assertEquals(2, list.size());\r\n-            depColl = (DependentFieldsPC) list.get(0);\r\n-            assertEquals(_depColl, pm.getObjectId(depColl));\r\n-            list.remove(0);\r\n-            list.add(depColl);\r\n-\r\n-            map = pc.getDependentMap();\r\n-            assertEquals(2, map.size());\r\n-            depMap = (DependentFieldsPC) map.get(\"key\");\r\n-            assertEquals(_depMap, pm.getObjectId(depMap));\r\n-            map.remove(\"key\");\r\n-            map.put(\"newkey\", depMap);\r\n-\r\n-            if (action == ROLLBACK) {\r\n-                rollbackTx(pm);\r\n-                action = COMMIT;\r\n-            } else if (action == COMMIT) {\r\n-                endTx(pm);\r\n-                break;\r\n-            } else {\r\n-                pm.preFlush();\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        if (action == PRESTORE) {\r\n-            assertFalse(pm.isRemoved(depColl));\r\n-            assertFalse(pm.isRemoved(depMap));\r\n-            endTx(pm);\r\n-        }\r\n-\r\n-        assertTrue(pm.isPersistent(depColl));\r\n-        assertNotNull(pm.find(DependentFieldsPC.class, _depColl));\r\n-        assertTrue(pm.isPersistent(depMap));\r\n-        assertNotNull(pm.find(DependentFieldsPC.class, _depMap));\r\n-        assertNotNull(pm.find(DependentFieldsPC.class, _repeat));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testRefedDependentNotDeleted() {\r\n-        refedDependentNotDeleted(COMMIT);\r\n-    }\r\n-\r\n-    public void testRefedDependentNotDeletedWithRollback() {\r\n-        refedDependentNotDeleted(ROLLBACK);\r\n-    }\r\n-\r\n-    public void testRefedDependentNotDeletedWithPreStore() {\r\n-        refedDependentNotDeleted(PRESTORE);\r\n-    }\r\n-\r\n-    private void refedDependentNotDeleted(int action) {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        DependentFieldsPC pc;\r\n-        DependentFieldsPC newPC = null;\r\n-        DependentFieldsPC depRel;\r\n-        while (true) {\r\n-            startTx(pm);\r\n-            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n-            if (newPC == null)\r\n-                newPC = new DependentFieldsPC();\r\n-            depRel = pc.getDependentRelation();\r\n-            newPC.setDependentRelation(depRel);\r\n-            pc.setDependentRelation(null);\r\n-            pm.persist(newPC);\r\n-\r\n-            if (action == ROLLBACK) {\r\n-                rollbackTx(pm);\r\n-                action = COMMIT;\r\n-            } else if (action == COMMIT) {\r\n-                endTx(pm);\r\n-                break;\r\n-            } else {\r\n-                pm.preFlush();\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        if (action == PRESTORE) {\r\n-            assertFalse(pm.isRemoved(depRel));\r\n-            endTx(pm);\r\n-        }\r\n-\r\n-        assertTrue(pm.isPersistent(depRel));\r\n-        assertNotNull(pm.find(DependentFieldsPC.class, _depRel));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNullSharedDependent() {\r\n-        nullSharedDependent(COMMIT);\r\n-    }\r\n-\r\n-    public void testNullSharedDependentWithRollback() {\r\n-        nullSharedDependent(ROLLBACK);\r\n-    }\r\n-\r\n-    public void testNullSharedDependentWithPreStore() {\r\n-        nullSharedDependent(PRESTORE);\r\n-    }\r\n-\r\n-    private void nullSharedDependent(int action) {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        DependentFieldsPC pc;\r\n-        DependentFieldsPC repeat;\r\n-        List list;\r\n-        Map map;\r\n-        while (true) {\r\n-            startTx(pm);\r\n-            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\r\n-            list = pc.getDependentList();\r\n-            assertEquals(2, list.size());\r\n-            repeat = (DependentFieldsPC) list.get(1);\r\n-            assertEquals(_repeat, pm.getObjectId(repeat));\r\n-            list.remove(1);\r\n-\r\n-            map = pc.getDependentMap();\r\n-            assertEquals(2, map.size());\r\n-            assertEquals(repeat, (DependentFieldsPC) map.remove(\"repeat\"));\r\n-\r\n-            if (action == PRESTORE)\r\n-                pm.preFlush();\r\n-            else\r\n-                pm.flush();\r\n-            assertTrue(pm.isRemoved(repeat));\r\n-\r\n-            // now after deleting on flush, assigning to another field and\r\n-            // attempting to commit should throw an error -- can't undelete an\r\n-            // object\r\n-            pc.getList().add(repeat);\r\n-\r\n-            if (action == ROLLBACK) {\r\n-                rollbackTx(pm);\r\n-                action = COMMIT;\r\n-            } else {\r\n-                try {\r\n-                    pm.getTransaction().commit();\r\n-                    fail(\"Committed with ref to deleted dependent object\");\r\n-                } catch (Exception je) {\r\n-                    rollbackTx(pm);\r\n-                } finally {\r\n-                }\r\n-                break;\r\n-            }\r\n-        }\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testClearMappedDependentOfDetached() {\r\n-        clearDependentOfDetachedTest(true);\r\n-    }\r\n-\r\n-    public void testClearInverseKeyDependentOfDetached() {\r\n-        clearDependentOfDetachedTest(false);\r\n-    }\r\n-\r\n-    private void clearDependentOfDetachedTest(boolean mapped) {\r\n-        deleteAll(DependentFieldsPC.class);\r\n-\r\n-        DependentFieldsPC owner = new DependentFieldsPC();\r\n-        for (int i = 0; i < 2; i++) {\r\n-            DependentFieldsPC child = new DependentFieldsPC();\r\n-            if (mapped) {\r\n-                owner.getDependentMappedList().add(child);\r\n-                child.setOwner(owner);\r\n-            } else\r\n-                owner.getDependentInverseKeyList().add(child);\r\n-        }\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(owner);\r\n-        endTx(pm);\r\n-        Object oid = pm.getObjectId(owner);\r\n-        assertEquals(3,\r\n-            ((Extent) pm.createExtent(DependentFieldsPC.class, true))\r\n-                .list().size());\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        owner = (DependentFieldsPC) pm.find(DependentFieldsPC.class, oid);\r\n-        if (mapped)\r\n-            assertEquals(2, owner.getDependentMappedList().size());\r\n-        else\r\n-            assertEquals(2, owner.getDependentInverseKeyList().size());\r\n-        DependentFieldsPC detached = (DependentFieldsPC) pm.detach(owner);\r\n-        endEm(pm);\r\n-\r\n-        if (mapped) {\r\n-            assertEquals(2, detached.getDependentMappedList().size());\r\n-            detached.getDependentMappedList().clear();\r\n-        } else {\r\n-            assertEquals(2, detached.getDependentInverseKeyList().size());\r\n-            detached.getDependentInverseKeyList().clear();\r\n-        }\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        startTx(pm);\r\n-        owner = (DependentFieldsPC) pm.merge(detached);\r\n-        if (mapped)\r\n-            assertEquals(0, owner.getDependentMappedList().size());\r\n-        else\r\n-            assertEquals(0, owner.getDependentInverseKeyList().size());\r\n-        endTx(pm);\r\n-        assertEquals(1,\r\n-            ((Extent) pm.createExtent(DependentFieldsPC.class, true)).\r\n-                list().size());\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) currentEntityManager();\r\n-        owner = (DependentFieldsPC) pm.find(DependentFieldsPC.class, oid);\r\n-        if (mapped)\r\n-            assertEquals(0, owner.getDependentMappedList().size());\r\n-        else\r\n-            assertEquals(0, owner.getDependentInverseKeyList().size());\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC;\n+import org.apache.openjpa.persistence.Extent;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+\n+public class TestDependentFields2 extends BaseKernelTest {\n+\n+    private static final int COMMIT = 0;\n+    private static final int ROLLBACK = 1;\n+    private static final int PRESTORE = 2;\n+\n+    private Object _root = null;\n+    private Object _rel = null;\n+    private Object _depRel = null;\n+    private Object _deep = null;\n+    private Object _coll = null;\n+    private Object _depColl = null;\n+    private Object _map = null;\n+    private Object _depMap = null;\n+    private Object _repeat = null;\n+\n+    public TestDependentFields2(String casename) {\n+        super(casename);\n+    }\n+\n+    public void setUp() throws Exception {\n+        deleteAll(DependentFieldsPC.class);\n+\n+        DependentFieldsPC root = new DependentFieldsPC();\n+        root.setRelation(new DependentFieldsPC());\n+        root.getList().add(new DependentFieldsPC());\n+        root.getMap().put(\"key\", new DependentFieldsPC());\n+        root.setDependentRelation(new DependentFieldsPC());\n+        root.getDependentRelation().setDependentRelation\n+            (new DependentFieldsPC());\n+        root.getDependentList().add(new DependentFieldsPC());\n+        root.getDependentMap().put(\"key\", new DependentFieldsPC());\n+\n+        DependentFieldsPC repeat = new DependentFieldsPC();\n+        root.getDependentList().add(repeat);\n+        root.getDependentMap().put(\"repeat\", repeat);\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(root);\n+        endTx(pm);\n+\n+        _root = pm.getObjectId(root);\n+        assertNotNull(_root);\n+        _rel = pm.getObjectId(root.getRelation());\n+        _depRel = pm.getObjectId(root.getDependentRelation());\n+        _deep = pm.getObjectId(root.getDependentRelation().\n+            getDependentRelation());\n+        _coll = pm.getObjectId(root.getList().iterator().next());\n+        Iterator itr = root.getDependentList().iterator();\n+        _depColl = pm.getObjectId(itr.next());\n+        _repeat = pm.getObjectId(itr.next());\n+        _map = pm.getObjectId(root.getMap().get(\"key\"));\n+        _depMap = pm.getObjectId(root.getDependentMap().get(\"key\"));\n+\n+        endEm(pm);\n+    }\n+\n+    public void testDependentFieldsLoaded() {\n+        delete(true, COMMIT);\n+        checkFields();\n+    }\n+\n+    public void testDependentFieldsLoadedWithRollback() {\n+        delete(true, ROLLBACK);\n+        checkFields();\n+    }\n+\n+    public void testDependentFieldsLoadedWithPreStore() {\n+        delete(true, PRESTORE);\n+        checkFields();\n+    }\n+\n+    public void testDependentFieldsUnloaded() {\n+        delete(false, COMMIT);\n+        checkFields();\n+    }\n+\n+    public void testDependentFieldsUnloadedWithRollback() {\n+        delete(false, ROLLBACK);\n+        checkFields();\n+    }\n+\n+    public void testDependentFieldsUnloadedWithPreStore() {\n+        delete(false, PRESTORE);\n+        checkFields();\n+    }\n+\n+    private void delete(boolean load, int action) {\n+        OpenJPAEntityManager pm = getPM(true, true);\n+        DependentFieldsPC root;\n+        Object rel = null;\n+        Object depRel = null;\n+        Object coll = null;\n+        Object depColl = null;\n+        Object map = null;\n+        Object depMap = null;\n+        Object repeat = null;\n+        Object deep = null;\n+        while (true) {\n+            startTx(pm);\n+            root = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\n+            if (load) {\n+                rel = root.getRelation();\n+                assertNotNull(rel);\n+                depRel = root.getDependentRelation();\n+                assertNotNull(depRel);\n+                deep = ((DependentFieldsPC) depRel).getDependentRelation();\n+                assertNotNull(deep);\n+                coll = root.getList().iterator().next();\n+                assertNotNull(coll);\n+                Iterator itr = root.getDependentList().iterator();\n+                depColl = itr.next();\n+                repeat = itr.next();\n+                assertNotNull(depColl);\n+                assertNotNull(repeat);\n+                map = root.getMap().get(\"key\");\n+                assertNotNull(map);\n+                depMap = root.getDependentMap().get(\"key\");\n+                assertNotNull(depMap);\n+\n+                // pcl: test both depColl and repeat, since they might\n+                // have been out of order above.\n+                Object o = root.getDependentMap().get(\"repeat\");\n+                if (o != repeat)\n+                    fail(\"dependent map does not contain 'repeat'\");\n+            }\n+            pm.remove(root);\n+\n+            if (action == ROLLBACK) {\n+                rollbackTx(pm);\n+                action = COMMIT;\n+            } else if (action == COMMIT) {\n+                endTx(pm);\n+                break;\n+            } else {\n+                pm.preFlush();\n+                break;\n+            }\n+        }\n+\n+        if (load) {\n+            if (action == PRESTORE) {\n+                assertFalse(pm.isRemoved(rel));\n+                assertFalse(pm.isRemoved(coll));\n+                assertFalse(pm.isRemoved(map));\n+                assertTrue(pm.isRemoved(depRel));\n+                assertTrue(pm.isRemoved(deep));\n+                assertTrue(pm.isRemoved(depColl));\n+                assertTrue(pm.isRemoved(depMap));\n+                assertTrue(pm.isRemoved(repeat));\n+            } else {\n+                assertNotNull(OpenJPAPersistence.getEntityManager(rel));\n+                assertNotNull(OpenJPAPersistence.getEntityManager(coll));\n+                assertNotNull(OpenJPAPersistence.getEntityManager(map));\n+                assertNull(OpenJPAPersistence.getEntityManager(depRel));\n+                assertNull(OpenJPAPersistence.getEntityManager(deep));\n+                assertNull(OpenJPAPersistence.getEntityManager(depColl));\n+                assertNull(OpenJPAPersistence.getEntityManager(depMap));\n+                assertNull(OpenJPAPersistence.getEntityManager(repeat));\n+            }\n+        }\n+\n+        if (action == PRESTORE)\n+            endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    private void checkFields() {\n+        OpenJPAEntityManager pm = getPM(true, true);\n+        assertNotNull(pm.find(DependentFieldsPC.class, _rel));\n+        assertNotNull(pm.find(DependentFieldsPC.class, _coll));\n+        assertNotNull(pm.find(DependentFieldsPC.class, _map));\n+        assertNull(pm.find(DependentFieldsPC.class, _depRel));\n+        assertNull(pm.find(DependentFieldsPC.class, _deep));\n+        assertNull(pm.find(DependentFieldsPC.class, _depColl));\n+        assertNull(pm.find(DependentFieldsPC.class, _depMap));\n+\n+        endEm(pm);\n+    }\n+\n+    public void testNullDeletesDependent() {\n+        nullDeletesDependent(COMMIT);\n+    }\n+\n+    public void testNullDeletesDependentWithRollback() {\n+        nullDeletesDependent(ROLLBACK);\n+    }\n+\n+    public void testNullDeletesDependentWithPreStore() {\n+        nullDeletesDependent(PRESTORE);\n+    }\n+\n+    private void nullDeletesDependent(int action) {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        DependentFieldsPC pc;\n+        DependentFieldsPC depRel;\n+        while (true) {\n+            startTx(pm);\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\n+            depRel = pc.getDependentRelation();\n+            assertEquals(_depRel, pm.getObjectId(depRel));\n+            pc.setDependentRelation(null);\n+            if (action == ROLLBACK) {\n+                rollbackTx(pm);\n+                action = COMMIT;\n+            } else if (action == COMMIT) {\n+                endTx(pm);\n+                break;\n+            } else {\n+                pm.preFlush();\n+                break;\n+            }\n+        }\n+\n+        if (action == PRESTORE) {\n+            assertTrue(pm.isRemoved(depRel));\n+            endTx(pm);\n+        }\n+\n+        assertTrue(!pm.isPersistent(depRel));\n+        assertNull(pm.find(DependentFieldsPC.class, _depRel));\n+        endEm(pm);\n+    }\n+\n+    public void testRemoveDeletesDependent() {\n+        removeDeletesDependent(COMMIT);\n+    }\n+\n+    public void testRemoveDeletesDependentWithRollback() {\n+        removeDeletesDependent(ROLLBACK);\n+    }\n+\n+    public void testRemoveDeletesDependentWithPreStore() {\n+        removeDeletesDependent(PRESTORE);\n+    }\n+\n+    private void removeDeletesDependent(int action) {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        DependentFieldsPC pc;\n+        DependentFieldsPC depColl;\n+        DependentFieldsPC depMap;\n+        List list;\n+        Map map;\n+        while (true) {\n+            startTx(pm);\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\n+            list = pc.getDependentList();\n+            assertEquals(\"list size =! 2\", 2, list.size());\n+            depColl = (DependentFieldsPC) list.remove(0);\n+            assertEquals(\"_depColl is not pm.getObjectId(depColl)\", _depColl,\n+                pm.getObjectId(depColl));\n+\n+            map = pc.getDependentMap();\n+            assertEquals(\"map size =! 2\", 2, map.size());\n+            depMap = (DependentFieldsPC) map.remove(\"key\");\n+            assertEquals(\"_depMap is not pm.getObjectId(depMap)\", _depMap,\n+                pm.getObjectId(depMap));\n+\n+            if (action == ROLLBACK) {\n+                rollbackTx(pm);\n+                action = COMMIT;\n+            } else if (action == COMMIT) {\n+                endTx(pm);\n+                break;\n+            } else {\n+                pm.preFlush();\n+                break;\n+            }\n+        }\n+\n+        if (action == PRESTORE) {\n+            assertTrue(pm.isRemoved(depColl));\n+            assertTrue(pm.isRemoved(depMap));\n+            endTx(pm);\n+        }\n+\n+//        assertTrue(\"depcoll is persistence\", !pm.isPersistent(depColl));\n+        assertNull(pm.find(DependentFieldsPC.class, _depColl));\n+\n+//        assertTrue(\"depMap is persistence\", !pm.isPersistent(depMap));\n+        assertNull(pm.find(DependentFieldsPC.class, _depMap));\n+\n+        assertNotNull(\"repeat is null\",\n+            pm.find(DependentFieldsPC.class, _repeat));\n+        endEm(pm);\n+    }\n+\n+    public void testMoveDependentInContainer() {\n+        moveDependentInContainer(COMMIT);\n+    }\n+\n+    public void testMoveDependentInContainerWithRollback() {\n+        moveDependentInContainer(ROLLBACK);\n+    }\n+\n+    public void testMoveDependentInContainerWithPreStore() {\n+        moveDependentInContainer(PRESTORE);\n+    }\n+\n+    private void moveDependentInContainer(int action) {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        DependentFieldsPC pc;\n+        DependentFieldsPC depColl;\n+        DependentFieldsPC depMap;\n+        List list;\n+        Map map;\n+        while (true) {\n+            startTx(pm);\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\n+            list = pc.getDependentList();\n+            assertEquals(2, list.size());\n+            depColl = (DependentFieldsPC) list.get(0);\n+            assertEquals(_depColl, pm.getObjectId(depColl));\n+            list.remove(0);\n+            list.add(depColl);\n+\n+            map = pc.getDependentMap();\n+            assertEquals(2, map.size());\n+            depMap = (DependentFieldsPC) map.get(\"key\");\n+            assertEquals(_depMap, pm.getObjectId(depMap));\n+            map.remove(\"key\");\n+            map.put(\"newkey\", depMap);\n+\n+            if (action == ROLLBACK) {\n+                rollbackTx(pm);\n+                action = COMMIT;\n+            } else if (action == COMMIT) {\n+                endTx(pm);\n+                break;\n+            } else {\n+                pm.preFlush();\n+                break;\n+            }\n+        }\n+\n+        if (action == PRESTORE) {\n+            assertFalse(pm.isRemoved(depColl));\n+            assertFalse(pm.isRemoved(depMap));\n+            endTx(pm);\n+        }\n+\n+        assertTrue(pm.isPersistent(depColl));\n+        assertNotNull(pm.find(DependentFieldsPC.class, _depColl));\n+        assertTrue(pm.isPersistent(depMap));\n+        assertNotNull(pm.find(DependentFieldsPC.class, _depMap));\n+        assertNotNull(pm.find(DependentFieldsPC.class, _repeat));\n+        endEm(pm);\n+    }\n+\n+    public void testRefedDependentNotDeleted() {\n+        refedDependentNotDeleted(COMMIT);\n+    }\n+\n+    public void testRefedDependentNotDeletedWithRollback() {\n+        refedDependentNotDeleted(ROLLBACK);\n+    }\n+\n+    public void testRefedDependentNotDeletedWithPreStore() {\n+        refedDependentNotDeleted(PRESTORE);\n+    }\n+\n+    private void refedDependentNotDeleted(int action) {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        DependentFieldsPC pc;\n+        DependentFieldsPC newPC = null;\n+        DependentFieldsPC depRel;\n+        while (true) {\n+            startTx(pm);\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\n+            if (newPC == null)\n+                newPC = new DependentFieldsPC();\n+            depRel = pc.getDependentRelation();\n+            newPC.setDependentRelation(depRel);\n+            pc.setDependentRelation(null);\n+            pm.persist(newPC);\n+\n+            if (action == ROLLBACK) {\n+                rollbackTx(pm);\n+                action = COMMIT;\n+            } else if (action == COMMIT) {\n+                endTx(pm);\n+                break;\n+            } else {\n+                pm.preFlush();\n+                break;\n+            }\n+        }\n+\n+        if (action == PRESTORE) {\n+            assertFalse(pm.isRemoved(depRel));\n+            endTx(pm);\n+        }\n+\n+        assertTrue(pm.isPersistent(depRel));\n+        assertNotNull(pm.find(DependentFieldsPC.class, _depRel));\n+        endEm(pm);\n+    }\n+\n+    public void testNullSharedDependent() {\n+        nullSharedDependent(COMMIT);\n+    }\n+\n+    public void testNullSharedDependentWithRollback() {\n+        nullSharedDependent(ROLLBACK);\n+    }\n+\n+    public void testNullSharedDependentWithPreStore() {\n+        nullSharedDependent(PRESTORE);\n+    }\n+\n+    private void nullSharedDependent(int action) {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        DependentFieldsPC pc;\n+        DependentFieldsPC repeat;\n+        List list;\n+        Map map;\n+        while (true) {\n+            startTx(pm);\n+            pc = (DependentFieldsPC) pm.find(DependentFieldsPC.class, _root);\n+            list = pc.getDependentList();\n+            assertEquals(2, list.size());\n+            repeat = (DependentFieldsPC) list.get(1);\n+            assertEquals(_repeat, pm.getObjectId(repeat));\n+            list.remove(1);\n+\n+            map = pc.getDependentMap();\n+            assertEquals(2, map.size());\n+            assertEquals(repeat, (DependentFieldsPC) map.remove(\"repeat\"));\n+\n+            if (action == PRESTORE)\n+                pm.preFlush();\n+            else\n+                pm.flush();\n+            assertTrue(pm.isRemoved(repeat));\n+\n+            // now after deleting on flush, assigning to another field and\n+            // attempting to commit should throw an error -- can't undelete an\n+            // object\n+            pc.getList().add(repeat);\n+\n+            if (action == ROLLBACK) {\n+                rollbackTx(pm);\n+                action = COMMIT;\n+            } else {\n+                try {\n+                    pm.getTransaction().commit();\n+                    fail(\"Committed with ref to deleted dependent object\");\n+                } catch (Exception je) {\n+                    rollbackTx(pm);\n+                } finally {\n+                }\n+                break;\n+            }\n+        }\n+\n+        endEm(pm);\n+    }\n+\n+    public void testClearMappedDependentOfDetached() {\n+        clearDependentOfDetachedTest(true);\n+    }\n+\n+    public void testClearInverseKeyDependentOfDetached() {\n+        clearDependentOfDetachedTest(false);\n+    }\n+\n+    private void clearDependentOfDetachedTest(boolean mapped) {\n+        deleteAll(DependentFieldsPC.class);\n+\n+        DependentFieldsPC owner = new DependentFieldsPC();\n+        for (int i = 0; i < 2; i++) {\n+            DependentFieldsPC child = new DependentFieldsPC();\n+            if (mapped) {\n+                owner.getDependentMappedList().add(child);\n+                child.setOwner(owner);\n+            } else\n+                owner.getDependentInverseKeyList().add(child);\n+        }\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        pm.persist(owner);\n+        endTx(pm);\n+        Object oid = pm.getObjectId(owner);\n+        assertEquals(3,\n+            ((Extent) pm.createExtent(DependentFieldsPC.class, true))\n+                .list().size());\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        owner = (DependentFieldsPC) pm.find(DependentFieldsPC.class, oid);\n+        if (mapped)\n+            assertEquals(2, owner.getDependentMappedList().size());\n+        else\n+            assertEquals(2, owner.getDependentInverseKeyList().size());\n+        DependentFieldsPC detached = (DependentFieldsPC) pm.detach(owner);\n+        endEm(pm);\n+\n+        if (mapped) {\n+            assertEquals(2, detached.getDependentMappedList().size());\n+            detached.getDependentMappedList().clear();\n+        } else {\n+            assertEquals(2, detached.getDependentInverseKeyList().size());\n+            detached.getDependentInverseKeyList().clear();\n+        }\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        startTx(pm);\n+        owner = (DependentFieldsPC) pm.merge(detached);\n+        if (mapped)\n+            assertEquals(0, owner.getDependentMappedList().size());\n+        else\n+            assertEquals(0, owner.getDependentInverseKeyList().size());\n+        endTx(pm);\n+        assertEquals(1,\n+            ((Extent) pm.createExtent(DependentFieldsPC.class, true)).\n+                list().size());\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) currentEntityManager();\n+        owner = (DependentFieldsPC) pm.find(DependentFieldsPC.class, oid);\n+        if (mapped)\n+            assertEquals(0, owner.getDependentMappedList().size());\n+        else\n+            assertEquals(0, owner.getDependentInverseKeyList().size());\n+        endEm(pm);\n+    }\n+}"},{"sha":"230afe3e5c200fd21e5785a34208444654a033d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","status":"modified","additions":542,"deletions":542,"changes":1084,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestDetachedStateManager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,542 +1,542 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.Map;\r\n-import java.util.Properties;\r\n-import java.util.TreeMap;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachA;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachB;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachD;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachE;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\r\n-import org.apache.openjpa.enhance.PCEnhancer;\r\n-import org.apache.openjpa.enhance.PersistenceCapable;\r\n-import org.apache.openjpa.kernel.DetachedStateManager;\r\n-import org.apache.openjpa.lib.util.Options;\r\n-import org.apache.openjpa.persistence.DetachStateType;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-\r\n-public class TestDetachedStateManager extends BaseKernelTest {\r\n-\r\n-    private static boolean enhanced = false;\r\n-\r\n-    private int oid;\r\n-    private int doid;\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestDetachedStateManager\r\n-     */\r\n-    public TestDetachedStateManager(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    private void deleteAll() {\r\n-        deleteAll(AttachA.class);\r\n-        deleteAll(AttachD.class);\r\n-    }\r\n-\r\n-    public OpenJPAEntityManager getPM() {\r\n-        OpenJPAEntityManager pm = super.getPM();\r\n-        //FIXME jthomas\r\n-        //pm.currentTransaction().setRestoreValues(false);\r\n-        return pm;\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        super.setUp();\r\n-\r\n-        deleteAll();\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        AttachB b = new AttachB();\r\n-        pm.persist(b);\r\n-        b.setAint(5);\r\n-        b.setBstr(\"5\");\r\n-        b.getStringIntMap().put(\"5\", new Integer(5));\r\n-\r\n-        AttachE e = new AttachE();\r\n-        e.setEstr(\"E\");\r\n-        e.setEint(5);\r\n-\r\n-        AttachD d = new AttachD();\r\n-        d.setDint(5);\r\n-        d.setEmbeddedE(e);\r\n-        b.getDs().add(d);\r\n-\r\n-        pm.persist(d);\r\n-\r\n-        oid = b.getId();\r\n-        doid = d.getId();\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testDetach() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachB b = pm.find(AttachB.class, oid);\r\n-\r\n-        assertNotNull(\"b is null in testDetach\", b);\r\n-\r\n-        b = (AttachB) pm.detach(b);\r\n-        endEm(pm);\r\n-\r\n-        assertTrue(pm.isDetached(b));\r\n-        assertEquals(5, b.getAint());\r\n-        assertEquals(\"5\", b.getBstr());\r\n-        assertNull(b.getStringIntMap());\r\n-\r\n-        b.setAint(12);\r\n-        b.setBstr(\"12\");\r\n-        TreeMap map = new TreeMap();\r\n-        map.put(\"12\", new Integer(12));\r\n-        b.setStringIntMap(map);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachB attached = (AttachB) pm.merge(b);\r\n-        assertEquals(12, attached.getAint());\r\n-        assertEquals(\"12\", attached.getBstr());\r\n-        assertNull(attached.getStringIntMap().get(\"12\"));\r\n-        assertEquals(new Integer(5), attached.getStringIntMap().get(\"5\"));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        b = pm.find(AttachB.class, oid);\r\n-        assertEquals(12, b.getAint());\r\n-        assertEquals(\"12\", b.getBstr());\r\n-        assertNull(b.getStringIntMap().get(\"12\"));\r\n-        assertEquals(new Integer(5), b.getStringIntMap().get(\"5\"));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testDetachWithGroups() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        //FIXME jthomas\r\n-//        pm.getFetchPlan().setDetachmentOptions(FetchPlanImpl.DETACH_LOAD_FIELDS | FetchPlanImpl.DETACH_UNLOAD_FIELDS);\r\n-        pm.setDetachState(DetachStateType.FETCH_GROUPS);\r\n-        pm.getFetchPlan().addFetchGroup(\"all\");\r\n-        AttachB b = pm.find(AttachB.class, oid);\r\n-\r\n-        assertNotNull(\"b is null in testDetachWithGroups\", b);\r\n-\r\n-        b = (AttachB) pm.detach(b);\r\n-        endEm(pm);\r\n-\r\n-        assertTrue(pm.isDetached(b));\r\n-        assertEquals(\"b.getAint() not 5\", 5, b.getAint());\r\n-        assertEquals(\"b.getAint() not 5str\", \"5\", b.getBstr());\r\n-        assertEquals(\"b.getStringIntMap().size() not equal to 1\", 1,\r\n-            b.getStringIntMap().size());\r\n-\r\n-        b.setAint(12);\r\n-        b.setBstr(\"12\");\r\n-        b.getStringIntMap().put(\"12\", new Integer(12));\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachB attached = (AttachB) pm.merge(b);\r\n-        assertEquals(\"not 12\", 12, attached.getAint());\r\n-        assertEquals(\"not 12str\", \"12\", attached.getBstr());\r\n-        assertEquals(\"not newInteger(12)\", new Integer(12),\r\n-            attached.getStringIntMap().get(\"12\"));\r\n-        assertEquals(\"not newInteger(5)\", new Integer(5),\r\n-            attached.getStringIntMap().get(\"5\"));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        b = (AttachB) pm.find(AttachB.class, oid);\r\n-        assertEquals(\"not equal 12\", 12, b.getAint());\r\n-        assertEquals(\"not equal 12str\", \"12\", b.getBstr());\r\n-        assertEquals(\"not equal newinteger(12)\", new Integer(12),\r\n-            b.getStringIntMap().get(\"12\"));\r\n-        assertEquals(\"not equal newInteger(5)\", new Integer(5),\r\n-            b.getStringIntMap().get(\"5\"));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testDetachNoOverwrite() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n-        b = (AttachB) pm.detach(b);\r\n-        endEm(pm);\r\n-\r\n-        b.setBstr(\"12\");\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachB orig = pm.find(AttachB.class, oid);\r\n-        orig.setAint(50);\r\n-\r\n-        AttachB attached = (AttachB) pm.merge(b);\r\n-        assertEquals(attached, orig);\r\n-        assertEquals(50, attached.getAint());\r\n-        assertEquals(\"12\", attached.getBstr());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        b = (AttachB) pm.find(AttachB.class, oid);\r\n-        assertEquals(50, b.getAint());\r\n-        assertEquals(\"12\", b.getBstr());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testOptimisticLock() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n-\r\n-        assertNotNull(\"b is null in testOptimisticLock\", b);\r\n-\r\n-        b = (AttachB) pm.detach(b);\r\n-        endEm(pm);\r\n-\r\n-        b.setAint(12);\r\n-        b.setBstr(\"12\");\r\n-        TreeMap map = new TreeMap();\r\n-        map.put(\"12\", new Integer(12));\r\n-        b.setStringIntMap(map);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachB b2 = (AttachB) pm.find(AttachB.class, oid);\r\n-        b2.setAint(15);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        try {\r\n-            pm.merge(b);\r\n-            endTx(pm);\r\n-            fail(\"OL expected.\");\r\n-        } catch (Exception jove) {\r\n-            rollbackTx(pm);\r\n-        }\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testEmbedded() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachD d = pm.find(AttachD.class, doid);\r\n-\r\n-        assertNotNull(\"d is null in testEmbedded\", d);\r\n-\r\n-        d.getEmbeddedE().getEstr();\r\n-        d = (AttachD) pm.detach(d);\r\n-        endEm(pm);\r\n-\r\n-        d.getEmbeddedE().setEstr(\"E12\");\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachD d2 = (AttachD) pm.merge(d);\r\n-        assertNotEquals(d.getEmbeddedE(), d2.getEmbeddedE());\r\n-        assertEquals(\"E12\", d2.getEmbeddedE().getEstr());\r\n-        assertEquals(5, d2.getEmbeddedE().getEint());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        d2 = (AttachD) pm.find(AttachD.class, doid);\r\n-\r\n-        assertNotNull(\"d2 is null in testEmbedded\", d2);\r\n-\r\n-        assertEquals(\"E12\", d2.getEmbeddedE().getEstr());\r\n-        assertEquals(5, d2.getEmbeddedE().getEint());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNullEmbedded() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachD d = (AttachD) pm.find(AttachD.class, doid);\r\n-\r\n-        assertNotNull(\"d is null in testNullEmbedded\", d);\r\n-        d.getEmbeddedE().getEstr();\r\n-        d = (AttachD) pm.detach(d);\r\n-        endEm(pm);\r\n-\r\n-        d.setEmbeddedE(null);\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachD d2 = (AttachD) pm.merge(d);\r\n-        assertNull(d2.getEmbeddedE());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        d2 = (AttachD) pm.find(AttachD.class, doid);\r\n-\r\n-        assertNotNull(\"d2 is null in testNullEmbedded\", d2);\r\n-        // no null ind\r\n-        if (d2.getEmbeddedE() != null) {\r\n-            assertNull(d2.getEmbeddedE().getEstr());\r\n-            assertEquals(0, d2.getEmbeddedE().getEint());\r\n-        }\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNullEmbeddedRelated() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachD d = (AttachD) pm.find(AttachD.class, doid);\r\n-\r\n-        assertNotNull(\"d is null in testNullEmbeddedRelated\", d);\r\n-\r\n-        d.getEmbeddedE().getEstr();\r\n-        d = (AttachD) pm.detach(d);\r\n-        endEm(pm);\r\n-\r\n-        d.getEmbeddedE().setEstr(null);\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachD d2 = (AttachD) pm.merge(d);\r\n-        assertNull(\"d2.getEmbeddedE().getEstr() is not null\",\r\n-            d2.getEmbeddedE().getEstr());\r\n-        assertEquals(\"d2.getEmbeddedE().getEint() is not equal to 5\", 5,\r\n-            d2.getEmbeddedE().getEint());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        d2 = (AttachD) pm.find(AttachD.class, doid);\r\n-        assertNull(\"d2.getEmbeddedE().getEstr() is not null\",\r\n-            d2.getEmbeddedE().getEstr());\r\n-        assertEquals(\"d2.getEmbeddedE().getEint() is not 5\", 5,\r\n-            d2.getEmbeddedE().getEint());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNullCollection() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n-        b.getDs();\r\n-        b = (AttachB) pm.detach(b);\r\n-        endEm(pm);\r\n-\r\n-        assertEquals(1, b.getDs().size());\r\n-        b.setDs(null);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        b = (AttachB) pm.merge(b);\r\n-        assertNull(b.getDs());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        b = (AttachB) pm.find(AttachB.class, oid);\r\n-        assertTrue(b.getDs() == null || b.getDs().size() == 0);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testCollectionAdd() {\r\n-        doCollectionTest(false);\r\n-    }\r\n-\r\n-    public void testCollectionChanges() {\r\n-        doCollectionTest(true);\r\n-    }\r\n-\r\n-    private void doCollectionTest(boolean remove) {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        AttachB b = (AttachB) pm.find(AttachB.class, oid);\r\n-\r\n-        assertNotNull(\"b is null in doCollectionTest\", b);\r\n-        b.getDs();\r\n-        b = (AttachB) pm.detach(b);\r\n-        endEm(pm);\r\n-\r\n-        assertEquals(\"b is null in doCollectionTest\", 1, b.getDs().size());\r\n-        if (remove) {\r\n-            for (Iterator it = b.getDs().iterator(); it.hasNext();) {\r\n-                it.next();\r\n-                it.remove();\r\n-            }\r\n-        }\r\n-        AttachD d = new AttachD();\r\n-        d.setDint(12);\r\n-        b.getDs().add(d);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        b = (AttachB) pm.merge(b);\r\n-        assertSize(remove ? 1 : 2, b.getDs());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        b = (AttachB) pm.find(AttachB.class, oid);\r\n-        assertSize(remove ? 1 : 2, b.getDs());\r\n-        boolean found1 = false;\r\n-        boolean found2 = false;\r\n-        for (Iterator it = b.getDs().iterator(); it.hasNext();) {\r\n-            d = (AttachD) it.next();\r\n-            switch (d.getDint()) {\r\n-                case 5:\r\n-                    if (found1)\r\n-                        fail(\"Refound.\");\r\n-                    found1 = true;\r\n-                    break;\r\n-                case 12:\r\n-                    if (found2)\r\n-                        fail(\"Refound.\");\r\n-                    found2 = true;\r\n-                    break;\r\n-                default:\r\n-                    fail(\"Unknown d:\" + d.getDint());\r\n-            }\r\n-        }\r\n-\r\n-        if (remove)\r\n-            assertFalse(found1);\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /*\r\n-   //###\r\n-   // No time to get these working right now.  Have to figure out how to\r\n-   // enhance certain classes with different DetachState settings in autobuild.\r\n-   public void testSerialization ()\r\n-       throws Exception\r\n-   {\r\n-       doSerializationTest (false);\r\n-   }\r\n-\r\n-\r\n-   public void testSerializationAuto ()\r\n-       throws Exception\r\n-   {\r\n-       doSerializationTest (true);\r\n-   }\r\n-    */\r\n-\r\n-    private void doSerializationTest(boolean auto) throws Exception {\r\n-        enhance();\r\n-        Map props = new HashMap();\r\n-        props.put(\"openjpa.DetachState\", \"DetachedStateField=true\");\r\n-\r\n-        OpenJPAEntityManagerFactory factory =\r\n-            (OpenJPAEntityManagerFactory) getEmf(props);\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) factory.createEntityManager();\r\n-\r\n-        startTx(pm);\r\n-        DetachSMPC pc = new DetachSMPC();\r\n-        pc.setIntField(1);\r\n-        DetachSMPC rel = new DetachSMPC();\r\n-        rel.setIntField(2);\r\n-        pc.getRelSet().add(rel);\r\n-        pc.getStringIntMap().put(\"a\", new Integer(99));\r\n-        pm.persist(pc);\r\n-        endTx(pm);\r\n-        Object pcoid = pm.getObjectId(pc);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) factory.createEntityManager();\r\n-        pc = (DetachSMPC) pm.find(DetachSMPC.class, pcoid);\r\n-        pc.getRelSet();\r\n-        pc.getStringIntMap();\r\n-        if (!auto) {\r\n-            pc = (DetachSMPC) pm.detach(pc);\r\n-            assertDetachedSM(pc);\r\n-        }\r\n-        pc = (DetachSMPC) roundtrip(pc, false);\r\n-        assertDetachedSM(pc);\r\n-        endEm(pm);\r\n-\r\n-        assertDetachedSM(pc);\r\n-        assertSize(1, pc.getRelSet());\r\n-        assertEquals(1, pc.getStringIntMap().size());\r\n-\r\n-        pc.setIntField(3);\r\n-        ((DetachSMPC) pc.getRelSet().iterator().next()).setIntField(4);\r\n-        pc.getStringIntMap().put(\"b\", new Integer(100));\r\n-\r\n-        pc = (DetachSMPC) roundtrip(pc, false);\r\n-\r\n-        assertDetachedSM(pc);\r\n-        assertEquals(3, pc.getIntField());\r\n-        assertSize(1, pc.getRelSet());\r\n-        //assertDetachedSM (b.getDs ().iterator ().next ());\r\n-        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\r\n-            .getIntField());\r\n-        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\r\n-\r\n-        pm = (OpenJPAEntityManager) factory.createEntityManager();\r\n-        startTx(pm);\r\n-        pc = (DetachSMPC) pm.merge(pc);\r\n-        assertEquals(3, pc.getIntField());\r\n-        assertSize(1, pc.getRelSet());\r\n-        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\r\n-            .getIntField());\r\n-        assertEquals(2, pc.getStringIntMap().size());\r\n-        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = (OpenJPAEntityManager) factory.createEntityManager();\r\n-        pc = (DetachSMPC) pm.find(DetachSMPC.class, pcoid);\r\n-        assertEquals(3, pc.getIntField());\r\n-        assertSize(1, pc.getRelSet());\r\n-        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\r\n-            .getIntField());\r\n-        assertEquals(2, pc.getStringIntMap().size());\r\n-        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\r\n-\r\n-        startTx(pm);\r\n-        deleteAll(DetachSMPC.class, pm);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-        factory.close();\r\n-    }\r\n-\r\n-    private void enhance() throws Exception {\r\n-        Properties props = getProperties(new String[]{\r\n-            \"openjpa.DetachState\", \"DetachedStateField=true\",\r\n-        });\r\n-        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl(true, false);\r\n-        conf.fromProperties(props);\r\n-\r\n-        Options opts = new Options();\r\n-        opts.put(\"jdo\", \"true\");\r\n-        PCEnhancer.run(conf, new String[]{\r\n-            \"org.apache.openjpa.persistence.kernel.noenhance.DetachSMPC\" }, opts);\r\n-    }\r\n-\r\n-    private void assertDetachedSM(Object obj) {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        assertTrue(pm.isDetached(obj));\r\n-        PersistenceCapable pc = (PersistenceCapable) obj;\r\n-        assertEquals(DetachedStateManager.class,\r\n-            pc.pcGetStateManager().getClass());\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.TreeMap;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachA;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachB;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachD;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachE;\n+import org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.enhance.PCEnhancer;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.DetachedStateManager;\n+import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.persistence.DetachStateType;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+public class TestDetachedStateManager extends BaseKernelTest {\n+\n+    private static boolean enhanced = false;\n+\n+    private int oid;\n+    private int doid;\n+\n+    /**\n+     * Creates a new instance of TestDetachedStateManager\n+     */\n+    public TestDetachedStateManager(String name) {\n+        super(name);\n+    }\n+\n+    private void deleteAll() {\n+        deleteAll(AttachA.class);\n+        deleteAll(AttachD.class);\n+    }\n+\n+    public OpenJPAEntityManager getPM() {\n+        OpenJPAEntityManager pm = super.getPM();\n+        //FIXME jthomas\n+        //pm.currentTransaction().setRestoreValues(false);\n+        return pm;\n+    }\n+\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        deleteAll();\n+\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        AttachB b = new AttachB();\n+        pm.persist(b);\n+        b.setAint(5);\n+        b.setBstr(\"5\");\n+        b.getStringIntMap().put(\"5\", new Integer(5));\n+\n+        AttachE e = new AttachE();\n+        e.setEstr(\"E\");\n+        e.setEint(5);\n+\n+        AttachD d = new AttachD();\n+        d.setDint(5);\n+        d.setEmbeddedE(e);\n+        b.getDs().add(d);\n+\n+        pm.persist(d);\n+\n+        oid = b.getId();\n+        doid = d.getId();\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testDetach() {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachB b = pm.find(AttachB.class, oid);\n+\n+        assertNotNull(\"b is null in testDetach\", b);\n+\n+        b = (AttachB) pm.detach(b);\n+        endEm(pm);\n+\n+        assertTrue(pm.isDetached(b));\n+        assertEquals(5, b.getAint());\n+        assertEquals(\"5\", b.getBstr());\n+        assertNull(b.getStringIntMap());\n+\n+        b.setAint(12);\n+        b.setBstr(\"12\");\n+        TreeMap map = new TreeMap();\n+        map.put(\"12\", new Integer(12));\n+        b.setStringIntMap(map);\n+\n+        pm = getPM();\n+        startTx(pm);\n+        AttachB attached = (AttachB) pm.merge(b);\n+        assertEquals(12, attached.getAint());\n+        assertEquals(\"12\", attached.getBstr());\n+        assertNull(attached.getStringIntMap().get(\"12\"));\n+        assertEquals(new Integer(5), attached.getStringIntMap().get(\"5\"));\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        b = pm.find(AttachB.class, oid);\n+        assertEquals(12, b.getAint());\n+        assertEquals(\"12\", b.getBstr());\n+        assertNull(b.getStringIntMap().get(\"12\"));\n+        assertEquals(new Integer(5), b.getStringIntMap().get(\"5\"));\n+        endEm(pm);\n+    }\n+\n+    public void testDetachWithGroups() {\n+        OpenJPAEntityManager pm = getPM();\n+        //FIXME jthomas\n+//        pm.getFetchPlan().setDetachmentOptions(FetchPlanImpl.DETACH_LOAD_FIELDS | FetchPlanImpl.DETACH_UNLOAD_FIELDS);\n+        pm.setDetachState(DetachStateType.FETCH_GROUPS);\n+        pm.getFetchPlan().addFetchGroup(\"all\");\n+        AttachB b = pm.find(AttachB.class, oid);\n+\n+        assertNotNull(\"b is null in testDetachWithGroups\", b);\n+\n+        b = (AttachB) pm.detach(b);\n+        endEm(pm);\n+\n+        assertTrue(pm.isDetached(b));\n+        assertEquals(\"b.getAint() not 5\", 5, b.getAint());\n+        assertEquals(\"b.getAint() not 5str\", \"5\", b.getBstr());\n+        assertEquals(\"b.getStringIntMap().size() not equal to 1\", 1,\n+            b.getStringIntMap().size());\n+\n+        b.setAint(12);\n+        b.setBstr(\"12\");\n+        b.getStringIntMap().put(\"12\", new Integer(12));\n+\n+        pm = getPM();\n+        startTx(pm);\n+        AttachB attached = (AttachB) pm.merge(b);\n+        assertEquals(\"not 12\", 12, attached.getAint());\n+        assertEquals(\"not 12str\", \"12\", attached.getBstr());\n+        assertEquals(\"not newInteger(12)\", new Integer(12),\n+            attached.getStringIntMap().get(\"12\"));\n+        assertEquals(\"not newInteger(5)\", new Integer(5),\n+            attached.getStringIntMap().get(\"5\"));\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        b = (AttachB) pm.find(AttachB.class, oid);\n+        assertEquals(\"not equal 12\", 12, b.getAint());\n+        assertEquals(\"not equal 12str\", \"12\", b.getBstr());\n+        assertEquals(\"not equal newinteger(12)\", new Integer(12),\n+            b.getStringIntMap().get(\"12\"));\n+        assertEquals(\"not equal newInteger(5)\", new Integer(5),\n+            b.getStringIntMap().get(\"5\"));\n+        endEm(pm);\n+    }\n+\n+    public void testDetachNoOverwrite() {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\n+        b = (AttachB) pm.detach(b);\n+        endEm(pm);\n+\n+        b.setBstr(\"12\");\n+\n+        pm = getPM();\n+        startTx(pm);\n+        AttachB orig = pm.find(AttachB.class, oid);\n+        orig.setAint(50);\n+\n+        AttachB attached = (AttachB) pm.merge(b);\n+        assertEquals(attached, orig);\n+        assertEquals(50, attached.getAint());\n+        assertEquals(\"12\", attached.getBstr());\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        b = (AttachB) pm.find(AttachB.class, oid);\n+        assertEquals(50, b.getAint());\n+        assertEquals(\"12\", b.getBstr());\n+        endEm(pm);\n+    }\n+\n+    public void testOptimisticLock() {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\n+\n+        assertNotNull(\"b is null in testOptimisticLock\", b);\n+\n+        b = (AttachB) pm.detach(b);\n+        endEm(pm);\n+\n+        b.setAint(12);\n+        b.setBstr(\"12\");\n+        TreeMap map = new TreeMap();\n+        map.put(\"12\", new Integer(12));\n+        b.setStringIntMap(map);\n+\n+        pm = getPM();\n+        startTx(pm);\n+        AttachB b2 = (AttachB) pm.find(AttachB.class, oid);\n+        b2.setAint(15);\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        startTx(pm);\n+        try {\n+            pm.merge(b);\n+            endTx(pm);\n+            fail(\"OL expected.\");\n+        } catch (Exception jove) {\n+            rollbackTx(pm);\n+        }\n+        endEm(pm);\n+    }\n+\n+    public void testEmbedded() {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachD d = pm.find(AttachD.class, doid);\n+\n+        assertNotNull(\"d is null in testEmbedded\", d);\n+\n+        d.getEmbeddedE().getEstr();\n+        d = (AttachD) pm.detach(d);\n+        endEm(pm);\n+\n+        d.getEmbeddedE().setEstr(\"E12\");\n+        pm = getPM();\n+        startTx(pm);\n+        AttachD d2 = (AttachD) pm.merge(d);\n+        assertNotEquals(d.getEmbeddedE(), d2.getEmbeddedE());\n+        assertEquals(\"E12\", d2.getEmbeddedE().getEstr());\n+        assertEquals(5, d2.getEmbeddedE().getEint());\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        d2 = (AttachD) pm.find(AttachD.class, doid);\n+\n+        assertNotNull(\"d2 is null in testEmbedded\", d2);\n+\n+        assertEquals(\"E12\", d2.getEmbeddedE().getEstr());\n+        assertEquals(5, d2.getEmbeddedE().getEint());\n+        endEm(pm);\n+    }\n+\n+    public void testNullEmbedded() {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachD d = (AttachD) pm.find(AttachD.class, doid);\n+\n+        assertNotNull(\"d is null in testNullEmbedded\", d);\n+        d.getEmbeddedE().getEstr();\n+        d = (AttachD) pm.detach(d);\n+        endEm(pm);\n+\n+        d.setEmbeddedE(null);\n+        pm = getPM();\n+        startTx(pm);\n+        AttachD d2 = (AttachD) pm.merge(d);\n+        assertNull(d2.getEmbeddedE());\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        d2 = (AttachD) pm.find(AttachD.class, doid);\n+\n+        assertNotNull(\"d2 is null in testNullEmbedded\", d2);\n+        // no null ind\n+        if (d2.getEmbeddedE() != null) {\n+            assertNull(d2.getEmbeddedE().getEstr());\n+            assertEquals(0, d2.getEmbeddedE().getEint());\n+        }\n+        endEm(pm);\n+    }\n+\n+    public void testNullEmbeddedRelated() {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachD d = (AttachD) pm.find(AttachD.class, doid);\n+\n+        assertNotNull(\"d is null in testNullEmbeddedRelated\", d);\n+\n+        d.getEmbeddedE().getEstr();\n+        d = (AttachD) pm.detach(d);\n+        endEm(pm);\n+\n+        d.getEmbeddedE().setEstr(null);\n+        pm = getPM();\n+        startTx(pm);\n+        AttachD d2 = (AttachD) pm.merge(d);\n+        assertNull(\"d2.getEmbeddedE().getEstr() is not null\",\n+            d2.getEmbeddedE().getEstr());\n+        assertEquals(\"d2.getEmbeddedE().getEint() is not equal to 5\", 5,\n+            d2.getEmbeddedE().getEint());\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        d2 = (AttachD) pm.find(AttachD.class, doid);\n+        assertNull(\"d2.getEmbeddedE().getEstr() is not null\",\n+            d2.getEmbeddedE().getEstr());\n+        assertEquals(\"d2.getEmbeddedE().getEint() is not 5\", 5,\n+            d2.getEmbeddedE().getEint());\n+        endEm(pm);\n+    }\n+\n+    public void testNullCollection() {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\n+        b.getDs();\n+        b = (AttachB) pm.detach(b);\n+        endEm(pm);\n+\n+        assertEquals(1, b.getDs().size());\n+        b.setDs(null);\n+\n+        pm = getPM();\n+        startTx(pm);\n+        b = (AttachB) pm.merge(b);\n+        assertNull(b.getDs());\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        b = (AttachB) pm.find(AttachB.class, oid);\n+        assertTrue(b.getDs() == null || b.getDs().size() == 0);\n+        endEm(pm);\n+    }\n+\n+    public void testCollectionAdd() {\n+        doCollectionTest(false);\n+    }\n+\n+    public void testCollectionChanges() {\n+        doCollectionTest(true);\n+    }\n+\n+    private void doCollectionTest(boolean remove) {\n+        OpenJPAEntityManager pm = getPM();\n+        AttachB b = (AttachB) pm.find(AttachB.class, oid);\n+\n+        assertNotNull(\"b is null in doCollectionTest\", b);\n+        b.getDs();\n+        b = (AttachB) pm.detach(b);\n+        endEm(pm);\n+\n+        assertEquals(\"b is null in doCollectionTest\", 1, b.getDs().size());\n+        if (remove) {\n+            for (Iterator it = b.getDs().iterator(); it.hasNext();) {\n+                it.next();\n+                it.remove();\n+            }\n+        }\n+        AttachD d = new AttachD();\n+        d.setDint(12);\n+        b.getDs().add(d);\n+\n+        pm = getPM();\n+        startTx(pm);\n+        b = (AttachB) pm.merge(b);\n+        assertSize(remove ? 1 : 2, b.getDs());\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        b = (AttachB) pm.find(AttachB.class, oid);\n+        assertSize(remove ? 1 : 2, b.getDs());\n+        boolean found1 = false;\n+        boolean found2 = false;\n+        for (Iterator it = b.getDs().iterator(); it.hasNext();) {\n+            d = (AttachD) it.next();\n+            switch (d.getDint()) {\n+                case 5:\n+                    if (found1)\n+                        fail(\"Refound.\");\n+                    found1 = true;\n+                    break;\n+                case 12:\n+                    if (found2)\n+                        fail(\"Refound.\");\n+                    found2 = true;\n+                    break;\n+                default:\n+                    fail(\"Unknown d:\" + d.getDint());\n+            }\n+        }\n+\n+        if (remove)\n+            assertFalse(found1);\n+\n+        endEm(pm);\n+    }\n+\n+    /*\n+   //###\n+   // No time to get these working right now.  Have to figure out how to\n+   // enhance certain classes with different DetachState settings in autobuild.\n+   public void testSerialization ()\n+       throws Exception\n+   {\n+       doSerializationTest (false);\n+   }\n+\n+\n+   public void testSerializationAuto ()\n+       throws Exception\n+   {\n+       doSerializationTest (true);\n+   }\n+    */\n+\n+    private void doSerializationTest(boolean auto) throws Exception {\n+        enhance();\n+        Map props = new HashMap();\n+        props.put(\"openjpa.DetachState\", \"DetachedStateField=true\");\n+\n+        OpenJPAEntityManagerFactory factory =\n+            (OpenJPAEntityManagerFactory) getEmf(props);\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) factory.createEntityManager();\n+\n+        startTx(pm);\n+        DetachSMPC pc = new DetachSMPC();\n+        pc.setIntField(1);\n+        DetachSMPC rel = new DetachSMPC();\n+        rel.setIntField(2);\n+        pc.getRelSet().add(rel);\n+        pc.getStringIntMap().put(\"a\", new Integer(99));\n+        pm.persist(pc);\n+        endTx(pm);\n+        Object pcoid = pm.getObjectId(pc);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) factory.createEntityManager();\n+        pc = (DetachSMPC) pm.find(DetachSMPC.class, pcoid);\n+        pc.getRelSet();\n+        pc.getStringIntMap();\n+        if (!auto) {\n+            pc = (DetachSMPC) pm.detach(pc);\n+            assertDetachedSM(pc);\n+        }\n+        pc = (DetachSMPC) roundtrip(pc, false);\n+        assertDetachedSM(pc);\n+        endEm(pm);\n+\n+        assertDetachedSM(pc);\n+        assertSize(1, pc.getRelSet());\n+        assertEquals(1, pc.getStringIntMap().size());\n+\n+        pc.setIntField(3);\n+        ((DetachSMPC) pc.getRelSet().iterator().next()).setIntField(4);\n+        pc.getStringIntMap().put(\"b\", new Integer(100));\n+\n+        pc = (DetachSMPC) roundtrip(pc, false);\n+\n+        assertDetachedSM(pc);\n+        assertEquals(3, pc.getIntField());\n+        assertSize(1, pc.getRelSet());\n+        //assertDetachedSM (b.getDs ().iterator ().next ());\n+        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\n+            .getIntField());\n+        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\n+\n+        pm = (OpenJPAEntityManager) factory.createEntityManager();\n+        startTx(pm);\n+        pc = (DetachSMPC) pm.merge(pc);\n+        assertEquals(3, pc.getIntField());\n+        assertSize(1, pc.getRelSet());\n+        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\n+            .getIntField());\n+        assertEquals(2, pc.getStringIntMap().size());\n+        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = (OpenJPAEntityManager) factory.createEntityManager();\n+        pc = (DetachSMPC) pm.find(DetachSMPC.class, pcoid);\n+        assertEquals(3, pc.getIntField());\n+        assertSize(1, pc.getRelSet());\n+        assertEquals(4, ((DetachSMPC) pc.getRelSet().iterator().next())\n+            .getIntField());\n+        assertEquals(2, pc.getStringIntMap().size());\n+        assertEquals(new Integer(100), pc.getStringIntMap().get(\"b\"));\n+\n+        startTx(pm);\n+        deleteAll(DetachSMPC.class, pm);\n+        endTx(pm);\n+        endEm(pm);\n+        factory.close();\n+    }\n+\n+    private void enhance() throws Exception {\n+        Properties props = getProperties(new String[]{\n+            \"openjpa.DetachState\", \"DetachedStateField=true\",\n+        });\n+        OpenJPAConfiguration conf = new OpenJPAConfigurationImpl(true, false);\n+        conf.fromProperties(props);\n+\n+        Options opts = new Options();\n+        opts.put(\"jdo\", \"true\");\n+        PCEnhancer.run(conf, new String[]{\n+            \"org.apache.openjpa.persistence.kernel.noenhance.DetachSMPC\" }, opts);\n+    }\n+\n+    private void assertDetachedSM(Object obj) {\n+        OpenJPAEntityManager pm = getPM();\n+        assertTrue(pm.isDetached(obj));\n+        PersistenceCapable pc = (PersistenceCapable) obj;\n+        assertEquals(DetachedStateManager.class,\n+            pc.pcGetStateManager().getClass());\n+        endEm(pm);\n+    }\n+}"},{"sha":"30b10a6ee7f8f08c2e8126babc4ddfdd7da2b84b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","status":"modified","additions":245,"deletions":245,"changes":490,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEmbedded.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,246 +1,246 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC;\r\n-\r\n-public class TestEJBEmbedded extends BaseKernelTest {\r\n-\r\n-    private Object _oid1 = null;\r\n-    private Object _oid2 = null;\r\n-\r\n-    EmbeddedOwnerPC.EmbKey id1;\r\n-    EmbeddedOwnerPC.EmbKey id2;\r\n-\r\n-    public TestEJBEmbedded(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public void setUp() {\r\n-        deleteAll(EmbeddedOwnerPC.class);\r\n-        deleteAll(EmbeddedPC.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        EmbeddedOwnerPC pc1 = new EmbeddedOwnerPC(1, 2);\r\n-        pc1.setStringField(\"string1\");\r\n-        EmbeddedPC embed1 = new EmbeddedPC();\r\n-        embed1.setStringField(\"embedString1\");\r\n-        embed1.setIntField(1);\r\n-        pc1.setEmbedded(embed1);\r\n-\r\n-        EmbeddedPC embed2 = new EmbeddedPC();\r\n-        embed2.setStringField(\"embedString2\");\r\n-        embed2.setIntField(2);\r\n-\r\n-        EmbeddedOwnerPC pc2 = new EmbeddedOwnerPC(3, 4);\r\n-\r\n-        em.persist(pc1);\r\n-        em.persist(pc2);\r\n-\r\n-        endTx(em);\r\n-\r\n-        id1 = new EmbeddedOwnerPC.EmbKey(\"1:2\");\r\n-\r\n-        id2 = new EmbeddedOwnerPC.EmbKey();\r\n-        id2.id1 = 3;\r\n-        id2.id2 = 4;\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testInsert() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        EmbeddedOwnerPC pc = pm.find(EmbeddedOwnerPC.class, id1);\r\n-        EmbeddedOwnerPC pc2 = pm.find(EmbeddedOwnerPC.class, id2);\r\n-        assertNotNull(\"pc is null in testInsert\", pc);\r\n-        assertNotNull(\"p2 is null in testInsert\", pc2);\r\n-\r\n-        assertEquals(\"string1\", pc.getStringField());\r\n-        assertNotNull(pc.getEmbedded());\r\n-        assertEquals(\"embedString1\", pc.getEmbedded().getStringField());\r\n-        assertEquals(1, pc.getEmbedded().getIntField());\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testDelete() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        EmbeddedOwnerPC pc =\r\n-            (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\r\n-\r\n-        assertNotNull(\"pc is null in testDelete\", pc);\r\n-\r\n-        EmbeddedPC embed = pc.getEmbedded();\r\n-\r\n-        pc.setEmbedded(null);\r\n-\r\n-        endTx(pm);\r\n-\r\n-        endEm(pm);\r\n-\r\n-        pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        pc = (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\r\n-\r\n-        assertEquals(\"the expt strng is not string1\", \"string1\",\r\n-            pc.getStringField());\r\n-        assertNull(\"pc's embedded is null\", pc.getEmbedded());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testUpdateRetain() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        EmbeddedOwnerPC pc =\r\n-            (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\r\n-\r\n-        assertNotNull(\"pc is null testUpdateRetain\", pc);\r\n-\r\n-        pc.setStringField(\"string2\");\r\n-        pc.getEmbedded().setStringField(\"embedString2\");\r\n-\r\n-        endTx(pm);\r\n-\r\n-        assertEquals(\"string2\", pc.getStringField());\r\n-        assertNotNull(pc.getEmbedded());\r\n-        assertEquals(\"embedString2\", pc.getEmbedded().getStringField());\r\n-        assertEquals(1, pc.getEmbedded().getIntField());\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testReplace() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        EmbeddedOwnerPC pc = pm.find(EmbeddedOwnerPC.class, id1);\r\n-\r\n-        EmbeddedPC newEmbed = new EmbeddedPC();\r\n-        newEmbed.setStringField(\"embedString2\");\r\n-        pc.setEmbedded(newEmbed);\r\n-\r\n-        ComplexEmbeddedPC newComplexEmbed = new ComplexEmbeddedPC();\r\n-        newEmbed = new EmbeddedPC();\r\n-        newEmbed.setStringField(\"embedString3\");\r\n-        newComplexEmbed.setStringField(\"complexEmbedString3\");\r\n-        newComplexEmbed.setOwnerField(new EmbeddedOwnerPC(5, 6));\r\n-        pc.setComplexEmbedded(newComplexEmbed);\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        pc = pm.find(EmbeddedOwnerPC.class, id1);\r\n-        assertEquals(\"string1\", pc.getStringField());\r\n-        assertNotNull(pc.getEmbedded());\r\n-        assertEquals(\"the exp strng is not embedString1\", \"embedString1\",\r\n-            pc.getEmbedded().getStringField());\r\n-        assertEquals(\"intfield is not 1\", 1, pc.getEmbedded().getIntField());\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testShare() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        EmbeddedOwnerPC pc1 = pm.find(EmbeddedOwnerPC.class, id1);\r\n-        assertNotNull(\"pc1 is null in testshare\", pc1);\r\n-\r\n-        EmbeddedOwnerPC pc2 = pm.find(EmbeddedOwnerPC.class, id2);\r\n-        assertNotNull(\"pc2 is null in testshare\", pc2);\r\n-\r\n-        EmbeddedPC embed1 = pc1.getEmbedded();\r\n-\r\n-        pm.persist(embed1);\r\n-        Integer oid = new Integer(1);\r\n-        endTx(pm);\r\n-\r\n-        assertEquals(\"embedString1\", embed1.getStringField());\r\n-        assertEquals(\"embedString1\", pc1.getEmbedded().getStringField());\r\n-\r\n-        endEm(pm);\r\n-\r\n-        // make sure the changes stick\r\n-        pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        pc1 = pm.find(EmbeddedOwnerPC.class, id1);\r\n-        assertNotNull(\"pc1 is null in testshare 2nd find\", pc1);\r\n-        pc2 = pm.find(EmbeddedOwnerPC.class, id2);\r\n-        assertNotNull(\"pc2 is null in testshare 2nd find\", pc2);\r\n-        embed1 = pm.find(EmbeddedPC.class, oid.intValue());\r\n-\r\n-        if (embed1 != null) {\r\n-            assertEquals(\"embedString1\", embed1.getStringField());\r\n-            assertEquals(\"embedString1\", pc1.getEmbedded().getStringField());\r\n-        }\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testOptimisticLocking2() {\r\n-        EntityManager pm1 = getPM(true, false);\r\n-        startTx(pm1);\r\n-\r\n-        EmbeddedOwnerPC pc1 = pm1.find(EmbeddedOwnerPC.class, id1);\r\n-        assertNotNull(\"pc1 is null in testoptlock2\", pc1);\r\n-\r\n-        EntityManager pm2 = currentEntityManager();\r\n-\r\n-        startTx(pm2);\r\n-        EmbeddedOwnerPC pc2 = pm1.find(EmbeddedOwnerPC.class, id1);\r\n-\r\n-        assertNotNull(\"pc2 is null in testoptlock2\", pc2);\r\n-\r\n-        EmbeddedPC embed2 = pc2.getEmbedded();\r\n-        embed2.setStringField(\"xxxx\");\r\n-\r\n-        endTx(pm2);\r\n-        endEm(pm2);\r\n-\r\n-        EmbeddedPC embed1 = pc1.getEmbedded();\r\n-        embed1.setStringField(\"yyyy\");\r\n-        try {\r\n-            endTx(pm1);\r\n-            fail(\"Should have thrown an OL exception.\");\r\n-        }\r\n-        catch (Exception ove) {\r\n-        }\r\n-        finally {\r\n-            endEm(pm1);\r\n-        }\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC;\n+import org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC;\n+import org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC;\n+\n+public class TestEJBEmbedded extends BaseKernelTest {\n+\n+    private Object _oid1 = null;\n+    private Object _oid2 = null;\n+\n+    EmbeddedOwnerPC.EmbKey id1;\n+    EmbeddedOwnerPC.EmbKey id2;\n+\n+    public TestEJBEmbedded(String name) {\n+        super(name);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void setUp() {\n+        deleteAll(EmbeddedOwnerPC.class);\n+        deleteAll(EmbeddedPC.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        EmbeddedOwnerPC pc1 = new EmbeddedOwnerPC(1, 2);\n+        pc1.setStringField(\"string1\");\n+        EmbeddedPC embed1 = new EmbeddedPC();\n+        embed1.setStringField(\"embedString1\");\n+        embed1.setIntField(1);\n+        pc1.setEmbedded(embed1);\n+\n+        EmbeddedPC embed2 = new EmbeddedPC();\n+        embed2.setStringField(\"embedString2\");\n+        embed2.setIntField(2);\n+\n+        EmbeddedOwnerPC pc2 = new EmbeddedOwnerPC(3, 4);\n+\n+        em.persist(pc1);\n+        em.persist(pc2);\n+\n+        endTx(em);\n+\n+        id1 = new EmbeddedOwnerPC.EmbKey(\"1:2\");\n+\n+        id2 = new EmbeddedOwnerPC.EmbKey();\n+        id2.id1 = 3;\n+        id2.id2 = 4;\n+\n+        endEm(em);\n+    }\n+\n+    public void testInsert() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+\n+        EmbeddedOwnerPC pc = pm.find(EmbeddedOwnerPC.class, id1);\n+        EmbeddedOwnerPC pc2 = pm.find(EmbeddedOwnerPC.class, id2);\n+        assertNotNull(\"pc is null in testInsert\", pc);\n+        assertNotNull(\"p2 is null in testInsert\", pc2);\n+\n+        assertEquals(\"string1\", pc.getStringField());\n+        assertNotNull(pc.getEmbedded());\n+        assertEquals(\"embedString1\", pc.getEmbedded().getStringField());\n+        assertEquals(1, pc.getEmbedded().getIntField());\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testDelete() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        EmbeddedOwnerPC pc =\n+            (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\n+\n+        assertNotNull(\"pc is null in testDelete\", pc);\n+\n+        EmbeddedPC embed = pc.getEmbedded();\n+\n+        pc.setEmbedded(null);\n+\n+        endTx(pm);\n+\n+        endEm(pm);\n+\n+        pm = currentEntityManager();\n+        startTx(pm);\n+        pc = (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\n+\n+        assertEquals(\"the expt strng is not string1\", \"string1\",\n+            pc.getStringField());\n+        assertNull(\"pc's embedded is null\", pc.getEmbedded());\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testUpdateRetain() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        EmbeddedOwnerPC pc =\n+            (EmbeddedOwnerPC) pm.find(EmbeddedOwnerPC.class, id1);\n+\n+        assertNotNull(\"pc is null testUpdateRetain\", pc);\n+\n+        pc.setStringField(\"string2\");\n+        pc.getEmbedded().setStringField(\"embedString2\");\n+\n+        endTx(pm);\n+\n+        assertEquals(\"string2\", pc.getStringField());\n+        assertNotNull(pc.getEmbedded());\n+        assertEquals(\"embedString2\", pc.getEmbedded().getStringField());\n+        assertEquals(1, pc.getEmbedded().getIntField());\n+\n+        endEm(pm);\n+    }\n+\n+    public void testReplace() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+\n+        EmbeddedOwnerPC pc = pm.find(EmbeddedOwnerPC.class, id1);\n+\n+        EmbeddedPC newEmbed = new EmbeddedPC();\n+        newEmbed.setStringField(\"embedString2\");\n+        pc.setEmbedded(newEmbed);\n+\n+        ComplexEmbeddedPC newComplexEmbed = new ComplexEmbeddedPC();\n+        newEmbed = new EmbeddedPC();\n+        newEmbed.setStringField(\"embedString3\");\n+        newComplexEmbed.setStringField(\"complexEmbedString3\");\n+        newComplexEmbed.setOwnerField(new EmbeddedOwnerPC(5, 6));\n+        pc.setComplexEmbedded(newComplexEmbed);\n+\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = currentEntityManager();\n+        startTx(pm);\n+\n+        pc = pm.find(EmbeddedOwnerPC.class, id1);\n+        assertEquals(\"string1\", pc.getStringField());\n+        assertNotNull(pc.getEmbedded());\n+        assertEquals(\"the exp strng is not embedString1\", \"embedString1\",\n+            pc.getEmbedded().getStringField());\n+        assertEquals(\"intfield is not 1\", 1, pc.getEmbedded().getIntField());\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testShare() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+\n+        EmbeddedOwnerPC pc1 = pm.find(EmbeddedOwnerPC.class, id1);\n+        assertNotNull(\"pc1 is null in testshare\", pc1);\n+\n+        EmbeddedOwnerPC pc2 = pm.find(EmbeddedOwnerPC.class, id2);\n+        assertNotNull(\"pc2 is null in testshare\", pc2);\n+\n+        EmbeddedPC embed1 = pc1.getEmbedded();\n+\n+        pm.persist(embed1);\n+        Integer oid = new Integer(1);\n+        endTx(pm);\n+\n+        assertEquals(\"embedString1\", embed1.getStringField());\n+        assertEquals(\"embedString1\", pc1.getEmbedded().getStringField());\n+\n+        endEm(pm);\n+\n+        // make sure the changes stick\n+        pm = currentEntityManager();\n+        startTx(pm);\n+        pc1 = pm.find(EmbeddedOwnerPC.class, id1);\n+        assertNotNull(\"pc1 is null in testshare 2nd find\", pc1);\n+        pc2 = pm.find(EmbeddedOwnerPC.class, id2);\n+        assertNotNull(\"pc2 is null in testshare 2nd find\", pc2);\n+        embed1 = pm.find(EmbeddedPC.class, oid.intValue());\n+\n+        if (embed1 != null) {\n+            assertEquals(\"embedString1\", embed1.getStringField());\n+            assertEquals(\"embedString1\", pc1.getEmbedded().getStringField());\n+        }\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testOptimisticLocking2() {\n+        EntityManager pm1 = getPM(true, false);\n+        startTx(pm1);\n+\n+        EmbeddedOwnerPC pc1 = pm1.find(EmbeddedOwnerPC.class, id1);\n+        assertNotNull(\"pc1 is null in testoptlock2\", pc1);\n+\n+        EntityManager pm2 = currentEntityManager();\n+\n+        startTx(pm2);\n+        EmbeddedOwnerPC pc2 = pm1.find(EmbeddedOwnerPC.class, id1);\n+\n+        assertNotNull(\"pc2 is null in testoptlock2\", pc2);\n+\n+        EmbeddedPC embed2 = pc2.getEmbedded();\n+        embed2.setStringField(\"xxxx\");\n+\n+        endTx(pm2);\n+        endEm(pm2);\n+\n+        EmbeddedPC embed1 = pc1.getEmbedded();\n+        embed1.setStringField(\"yyyy\");\n+        try {\n+            endTx(pm1);\n+            fail(\"Should have thrown an OL exception.\");\n+        }\n+        catch (Exception ove) {\n+        }\n+        finally {\n+            endEm(pm1);\n+        }\n+    }\n }\n\\ No newline at end of file"},{"sha":"e497d6a93e5fc381c674a77241998f47ac045ee2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBEntityManager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,142 +1,142 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBEntityManager extends AbstractTestCase {\r\n-\r\n-    private Object _id = null;\r\n-\r\n-    private Object _id2 = null;\r\n-\r\n-    public TestEJBEntityManager(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 a = new RuntimeTest1(\"STRING\", 10);\r\n-        RuntimeTest2 b = new RuntimeTest2(\"STRING2\", 11);\r\n-        em.persist(a);\r\n-        em.persist(b);\r\n-        _id = a.getIntField();\r\n-        _id2 = b.getIntField();\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that the PM throws Exceptions on usage attempts after it has been\r\n-     * closed.\r\n-     */\r\n-    /* Fix Me - aokeke - takes a lot of time to run */\r\n-    // public void testClosed ()\r\n-    // {\r\n-    // EntityManager em = currentEntityManager();\r\n-    // startTx(em);\r\n-    // endEm(em);\r\n-    //\r\n-    // try\r\n-    // {\r\n-    // // this is the only method that should succeed\r\n-    // if(em.isOpen ())\r\n-    // fail(\"Supposed to be closed...but cannot be closed inside\r\n-    // container..closed at the end of funct\");\r\n-    // }\r\n-    // catch (RuntimeException re)\r\n-    // {\r\n-    // fail (\"isClosed\");\r\n-    // }\r\n-    // try\r\n-    // {\r\n-    // em.find(RuntimeTest1.class, _id);\r\n-    // fail (\"find\");\r\n-    // }\r\n-    // catch (RuntimeException re)\r\n-    // {\r\n-    // }\r\n-    // }\r\n-    public void testMultipleCloseThreaded() throws Throwable {\r\n-        final EntityManager em = currentEntityManager();\r\n-        final List result = new ArrayList();\r\n-        // EntityTransaction t = em.getTransaction();\r\n-        // t.begin ();\r\n-\r\n-        em.close();\r\n-\r\n-        new Thread() {\r\n-            @SuppressWarnings(\"unchecked\")\r\n-            public void run() {\r\n-                try {\r\n-                    em.close();\r\n-                    result.add(new Integer(0));\r\n-                }\r\n-                catch (Exception jdoe) {\r\n-                    result.add(jdoe);\r\n-                }\r\n-                catch (Throwable t) {\r\n-                    result.add(t);\r\n-                }\r\n-            }\r\n-        }.start();\r\n-\r\n-        while (result.size() == 0)\r\n-            Thread.currentThread().yield(); // wait for results\r\n-        Object ret = result.get(0);\r\n-\r\n-        if (ret instanceof Exception)\r\n-            return; // good\r\n-\r\n-        if (ret instanceof Throwable)\r\n-            throw (Throwable) ret;\r\n-    }\r\n-\r\n-    /**\r\n-     * This method tries to perform operations that should lead to illegal\r\n-     * states, such as persisting instances outside of transactions, etc.\r\n-     */\r\n-    public void testIllegalState() {\r\n-        EntityManager em = currentEntityManager();\r\n-\r\n-        RuntimeTest1 a = new RuntimeTest1(\"foo\", 10);\r\n-        RuntimeTest1 a2 = (RuntimeTest1) em.find(RuntimeTest1.class, _id);\r\n-\r\n-        try {\r\n-            em.persist(a);\r\n-            fail(\"persist...\");\r\n-        }\r\n-        catch (Exception ise) {\r\n-        }\r\n-\r\n-        endEm(em);\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBEntityManager extends AbstractTestCase {\n+\n+    private Object _id = null;\n+\n+    private Object _id2 = null;\n+\n+    public TestEJBEntityManager(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() throws Exception {\n+        deleteAll(RuntimeTest1.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 a = new RuntimeTest1(\"STRING\", 10);\n+        RuntimeTest2 b = new RuntimeTest2(\"STRING2\", 11);\n+        em.persist(a);\n+        em.persist(b);\n+        _id = a.getIntField();\n+        _id2 = b.getIntField();\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    /**\n+     * Tests that the PM throws Exceptions on usage attempts after it has been\n+     * closed.\n+     */\n+    /* Fix Me - aokeke - takes a lot of time to run */\n+    // public void testClosed ()\n+    // {\n+    // EntityManager em = currentEntityManager();\n+    // startTx(em);\n+    // endEm(em);\n+    //\n+    // try\n+    // {\n+    // // this is the only method that should succeed\n+    // if(em.isOpen ())\n+    // fail(\"Supposed to be closed...but cannot be closed inside\n+    // container..closed at the end of funct\");\n+    // }\n+    // catch (RuntimeException re)\n+    // {\n+    // fail (\"isClosed\");\n+    // }\n+    // try\n+    // {\n+    // em.find(RuntimeTest1.class, _id);\n+    // fail (\"find\");\n+    // }\n+    // catch (RuntimeException re)\n+    // {\n+    // }\n+    // }\n+    public void testMultipleCloseThreaded() throws Throwable {\n+        final EntityManager em = currentEntityManager();\n+        final List result = new ArrayList();\n+        // EntityTransaction t = em.getTransaction();\n+        // t.begin ();\n+\n+        em.close();\n+\n+        new Thread() {\n+            @SuppressWarnings(\"unchecked\")\n+            public void run() {\n+                try {\n+                    em.close();\n+                    result.add(new Integer(0));\n+                }\n+                catch (Exception jdoe) {\n+                    result.add(jdoe);\n+                }\n+                catch (Throwable t) {\n+                    result.add(t);\n+                }\n+            }\n+        }.start();\n+\n+        while (result.size() == 0)\n+            Thread.currentThread().yield(); // wait for results\n+        Object ret = result.get(0);\n+\n+        if (ret instanceof Exception)\n+            return; // good\n+\n+        if (ret instanceof Throwable)\n+            throw (Throwable) ret;\n+    }\n+\n+    /**\n+     * This method tries to perform operations that should lead to illegal\n+     * states, such as persisting instances outside of transactions, etc.\n+     */\n+    public void testIllegalState() {\n+        EntityManager em = currentEntityManager();\n+\n+        RuntimeTest1 a = new RuntimeTest1(\"foo\", 10);\n+        RuntimeTest1 a2 = (RuntimeTest1) em.find(RuntimeTest1.class, _id);\n+\n+        try {\n+            em.persist(a);\n+            fail(\"persist...\");\n+        }\n+        catch (Exception ise) {\n+        }\n+\n+        endEm(em);\n+    }\n }\n\\ No newline at end of file"},{"sha":"a807c6ce1fb8ca537997ff051b9a94b6b7978bac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBGetObjectByIdValue.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,90 +1,90 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AImplB;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBGetObjectByIdValue extends AbstractTestCase {\r\n-\r\n-    private Object[] oids;\r\n-\r\n-    public TestEJBGetObjectByIdValue(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(AImplB.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        em.flush();\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testDatastore() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        RuntimeTest1 pc = new RuntimeTest1(1);\r\n-        pc.setStringField(\"foo\");\r\n-        em.persist(pc);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        pc = (RuntimeTest1) em.find(RuntimeTest1.class, 1);\r\n-        assertEquals(\"foo\", pc.getStringField());\r\n-        em.close();\r\n-\r\n-        em = currentEntityManager();\r\n-        pc = (RuntimeTest1) em.find(RuntimeTest1.class, pc.getIntField());\r\n-        assertEquals(\"foo\", pc.getStringField());\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testAppId() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        AImplB pc = new AImplB(\"foo\", 1, \"pk\");\r\n-        em.persist(pc);\r\n-        AImplB.Idkey oid = new AImplB.Idkey();\r\n-        oid.pk1 = 1;\r\n-        oid.pk2 = \"pk\";\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        pc = (AImplB) em.find(AImplB.class, oid);\r\n-        assertEquals(\"foo\", pc.getName());\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        pc = (AImplB) em.find(AImplB.class, oid.toString());\r\n-        assertEquals(\"foo\", pc.getName());\r\n-        endEm(em);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AImplB;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBGetObjectByIdValue extends AbstractTestCase {\n+\n+    private Object[] oids;\n+\n+    public TestEJBGetObjectByIdValue(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() throws Exception {\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(AImplB.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        em.flush();\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testDatastore() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        RuntimeTest1 pc = new RuntimeTest1(1);\n+        pc.setStringField(\"foo\");\n+        em.persist(pc);\n+\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        pc = (RuntimeTest1) em.find(RuntimeTest1.class, 1);\n+        assertEquals(\"foo\", pc.getStringField());\n+        em.close();\n+\n+        em = currentEntityManager();\n+        pc = (RuntimeTest1) em.find(RuntimeTest1.class, pc.getIntField());\n+        assertEquals(\"foo\", pc.getStringField());\n+        endEm(em);\n+    }\n+\n+    public void testAppId() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        AImplB pc = new AImplB(\"foo\", 1, \"pk\");\n+        em.persist(pc);\n+        AImplB.Idkey oid = new AImplB.Idkey();\n+        oid.pk1 = 1;\n+        oid.pk2 = \"pk\";\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        pc = (AImplB) em.find(AImplB.class, oid);\n+        assertEquals(\"foo\", pc.getName());\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        pc = (AImplB) em.find(AImplB.class, oid.toString());\n+        assertEquals(\"foo\", pc.getName());\n+        endEm(em);\n+    }\n+}"},{"sha":"5db5402435c2f7fd4216cdd253bbd8396c3d44da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBIncrementalFlushes.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBIncrementalFlushes extends AbstractTestCase {\r\n-\r\n-    public TestEJBIncrementalFlushes(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-//\tpublic void testBasicJdoPreStore ()\r\n-//\t{\r\n-//\t\tEntityManager em = getEm ();\r\n-//\t\tem.getTransaction ().begin ();\r\n-//\t\tInstanceCallbacksTest a = new InstanceCallbacksTest (\"foo\", 10);\r\n-//\t\tem.persist(a);\r\n-//\t\tem.flush ();\r\n-//\t\tassertTrue (a.preStoreCalled);\r\n-//\t\tem.getTransaction ().commit ();\r\n-//\t}\r\n-\r\n-    public void testFlushNoChange() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        InstanceCallbacksTest a = new InstanceCallbacksTest(\"foo\", 10);\r\n-        em.persist(a);\r\n-        em.flush();\r\n-        endTx(em);\r\n-        //assertTrue (a.preStoreCalled);\r\n-        assertEquals(10, a.getIntField());\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    public void testOptimisticLockGivesCorrectError() {\r\n-        EntityManager pm1 = currentEntityManager();\r\n-        EntityManager pm2 = currentEntityManager();\r\n-\r\n-        RuntimeTest1 a1 = new RuntimeTest1(\"foo\", 10);\r\n-        startTx(pm1);\r\n-        pm1.persist(a1);\r\n-        endTx(pm1);\r\n-\r\n-        RuntimeTest1 a2 = (RuntimeTest1) pm2.find(RuntimeTest1.class, 10);\r\n-        startTx(pm2);\r\n-        a2.setStringField(\"foobar\");\r\n-        startTx(pm2);\r\n-\r\n-        startTx(pm1);\r\n-        a1.setStringField(\"foobarbaz\");\r\n-        try {\r\n-            endTx(pm1);\r\n-        }\r\n-        catch (Exception ole) {\r\n-            // expected case\r\n-        }\r\n-        finally {\r\n-            if (pm1.getTransaction().isActive())\r\n-                pm1.getTransaction().rollback();\r\n-\r\n-            endEm(pm1);\r\n-            endEm(pm2);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBIncrementalFlushes extends AbstractTestCase {\n+\n+    public TestEJBIncrementalFlushes(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+//\tpublic void testBasicJdoPreStore ()\n+//\t{\n+//\t\tEntityManager em = getEm ();\n+//\t\tem.getTransaction ().begin ();\n+//\t\tInstanceCallbacksTest a = new InstanceCallbacksTest (\"foo\", 10);\n+//\t\tem.persist(a);\n+//\t\tem.flush ();\n+//\t\tassertTrue (a.preStoreCalled);\n+//\t\tem.getTransaction ().commit ();\n+//\t}\n+\n+    public void testFlushNoChange() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        InstanceCallbacksTest a = new InstanceCallbacksTest(\"foo\", 10);\n+        em.persist(a);\n+        em.flush();\n+        endTx(em);\n+        //assertTrue (a.preStoreCalled);\n+        assertEquals(10, a.getIntField());\n+\n+        endTx(em);\n+        endEm(em);\n+    }\n+\n+    public void testOptimisticLockGivesCorrectError() {\n+        EntityManager pm1 = currentEntityManager();\n+        EntityManager pm2 = currentEntityManager();\n+\n+        RuntimeTest1 a1 = new RuntimeTest1(\"foo\", 10);\n+        startTx(pm1);\n+        pm1.persist(a1);\n+        endTx(pm1);\n+\n+        RuntimeTest1 a2 = (RuntimeTest1) pm2.find(RuntimeTest1.class, 10);\n+        startTx(pm2);\n+        a2.setStringField(\"foobar\");\n+        startTx(pm2);\n+\n+        startTx(pm1);\n+        a1.setStringField(\"foobarbaz\");\n+        try {\n+            endTx(pm1);\n+        }\n+        catch (Exception ole) {\n+            // expected case\n+        }\n+        finally {\n+            if (pm1.getTransaction().isActive())\n+                pm1.getTransaction().rollback();\n+\n+            endEm(pm1);\n+            endEm(pm2);\n+        }\n+    }\n+}"},{"sha":"70893c4780bd4b7e8da11c4fc1ad71c1c42036d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","status":"modified","additions":120,"deletions":120,"changes":240,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBInterfaces.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,121 +1,121 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-/**\r\n- * Test for persistent interfaces.\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-public class TestEJBInterfaces extends AbstractTestCase {\r\n-\r\n-    public TestEJBInterfaces(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public void testInterfaceField() {\r\n-        try {\r\n-            deleteAll(InterfaceTestImpl1.class);\r\n-            deleteAll(InterfaceTestImpl2.class);\r\n-            deleteAll(InterfaceHolder.class);\r\n-        }\r\n-        catch (Exception e) {\r\n-        }\r\n-\r\n-        EntityManager em2 = currentEntityManager();\r\n-        startTx(em2);\r\n-\r\n-        em2.flush();\r\n-        endTx(em2);\r\n-        endEm(em2);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-        InterfaceHolder holder = new InterfaceHolder(1);\r\n-        em.persist(holder);\r\n-        holder.setIntf(new InterfaceTestImpl1(\"intf-1-field\"));\r\n-        assertEquals(\"intf-1-field\", holder.getIntf().getStringField());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        startTx(em);\r\n-        InterfaceHolder hold =\r\n-            (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n-        assertNotNull(hold.getIntf());\r\n-        assertEquals(\"intf-1-field\", hold.getIntf().getStringField());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        startTx(em);\r\n-        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n-        hold.setIntf(null);\r\n-        assertNull(hold.getIntf());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        startTx(em);\r\n-        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n-        assertNull(hold.getIntf());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        startTx(em);\r\n-        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n-        hold.setIntf(new InterfaceTestImpl2(\"intf-2-field\"));\r\n-        assertEquals(\"intf-2-field\", hold.getIntf().getStringField());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        startTx(em);\r\n-        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n-        assertNotNull(hold.getIntf());\r\n-        assertEquals(\"intf-2-field\", hold.getIntf().getStringField());\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        em = currentEntityManager();\r\n-        startTx(em);\r\n-        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\r\n-        hold.getIntfs().add(new InterfaceTestImpl1(\"intf-1-set\"));\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-//\t\tem = currentEntityManager();\r\n-//\t\tstartTx(em);\r\n-//\t\thold = (InterfaceHolder)em.find(InterfaceHolder.class, 1);\r\n-//\t\tassertEquals (1, hold.getIntfs ().size ());\r\n-//\t\tassertEquals (\"intf-1-set\", ((InterfaceTest) hold.getIntfs ().iterator ().next ()).getStringField ());\r\n-//\t\tendTx(em);\r\n-//\t\tendEm(em);\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder;\n+import org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1;\n+import org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+/**\n+ * Test for persistent interfaces.\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+public class TestEJBInterfaces extends AbstractTestCase {\n+\n+    public TestEJBInterfaces(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInterfaceField() {\n+        try {\n+            deleteAll(InterfaceTestImpl1.class);\n+            deleteAll(InterfaceTestImpl2.class);\n+            deleteAll(InterfaceHolder.class);\n+        }\n+        catch (Exception e) {\n+        }\n+\n+        EntityManager em2 = currentEntityManager();\n+        startTx(em2);\n+\n+        em2.flush();\n+        endTx(em2);\n+        endEm(em2);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+        InterfaceHolder holder = new InterfaceHolder(1);\n+        em.persist(holder);\n+        holder.setIntf(new InterfaceTestImpl1(\"intf-1-field\"));\n+        assertEquals(\"intf-1-field\", holder.getIntf().getStringField());\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        startTx(em);\n+        InterfaceHolder hold =\n+            (InterfaceHolder) em.find(InterfaceHolder.class, 1);\n+        assertNotNull(hold.getIntf());\n+        assertEquals(\"intf-1-field\", hold.getIntf().getStringField());\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        startTx(em);\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\n+        hold.setIntf(null);\n+        assertNull(hold.getIntf());\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        startTx(em);\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\n+        assertNull(hold.getIntf());\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        startTx(em);\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\n+        hold.setIntf(new InterfaceTestImpl2(\"intf-2-field\"));\n+        assertEquals(\"intf-2-field\", hold.getIntf().getStringField());\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        startTx(em);\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\n+        assertNotNull(hold.getIntf());\n+        assertEquals(\"intf-2-field\", hold.getIntf().getStringField());\n+        endTx(em);\n+        endEm(em);\n+\n+        em = currentEntityManager();\n+        startTx(em);\n+        hold = (InterfaceHolder) em.find(InterfaceHolder.class, 1);\n+        hold.getIntfs().add(new InterfaceTestImpl1(\"intf-1-set\"));\n+        endTx(em);\n+        endEm(em);\n+\n+//\t\tem = currentEntityManager();\n+//\t\tstartTx(em);\n+//\t\thold = (InterfaceHolder)em.find(InterfaceHolder.class, 1);\n+//\t\tassertEquals (1, hold.getIntfs ().size ());\n+//\t\tassertEquals (\"intf-1-set\", ((InterfaceTest) hold.getIntfs ().iterator ().next ()).getStringField ());\n+//\t\tendTx(em);\n+//\t\tendEm(em);\n+    }\n }\n\\ No newline at end of file"},{"sha":"cd9c95f8c37ce13a26960cd9c0de3489111ecd52","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","status":"modified","additions":176,"deletions":176,"changes":352,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLobs.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,176 +1,176 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBLobs extends AbstractTestCase {\r\n-\r\n-    private EntityManager _pm = null;\r\n-    private Inner _inner = null;\r\n-\r\n-    public TestEJBLobs(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        deleteAll(Inner.class);\r\n-        deleteAll(Inner2.class);\r\n-\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        endTx(em);\r\n-        endEm(em);\r\n-\r\n-        Inner inner = new Inner();\r\n-        inner.setString(\"string\");\r\n-        inner.setClob(\"clobField\");\r\n-        inner.setEBlob(\"eblob\");\r\n-\r\n-        Inner2 inner2 = new Inner2();\r\n-        inner2.string = \"inner2\";\r\n-        inner.setBlob(inner2);\r\n-\r\n-        _pm = currentEntityManager();\r\n-        startTx(_pm);\r\n-        _pm.persist(inner);\r\n-        try {\r\n-            endTx(_pm);\r\n-        }\r\n-        catch (Exception jdoe) {\r\n-            System.out.println(\r\n-                \"An exception was thrown while persisting the entity : \\n\" +\r\n-                    getStackTrace(jdoe));\r\n-        }\r\n-        endEm(_pm);\r\n-\r\n-        _pm = currentEntityManager();\r\n-        _inner = (Inner) _pm.find(Inner.class, \"string\");\r\n-    }\r\n-\r\n-    public void testOtherFields() {\r\n-        assertEquals(\"string\", _inner.getString());\r\n-    }\r\n-\r\n-    public void testClob() {\r\n-        assertEquals(\"clobField\", _inner.getClob());\r\n-    }\r\n-\r\n-    public void testBlob() {\r\n-        assertNotNull(_inner.getBlob());\r\n-        assertEquals(\"inner2\", _inner.getBlob().string);\r\n-    }\r\n-\r\n-    public void testSetNull() {\r\n-        startTx(_pm);\r\n-        _inner.setClob(null);\r\n-        _inner.setBlob(null);\r\n-        endTx(_pm);\r\n-\r\n-        assertEquals(null, _inner.getBlob());\r\n-        assertEquals(null, _inner.getClob());\r\n-    }\r\n-\r\n-    public void testDelete() {\r\n-        deleteAll(Inner.class);\r\n-    }\r\n-\r\n-    public void testUpdate() {\r\n-        startTx(_pm);\r\n-        _inner.setClob(\"newvalue\");\r\n-        Inner2 inner2 = new Inner2();\r\n-        inner2.string = \"newinner2\";\r\n-        _inner.setBlob(inner2);\r\n-        endTx(_pm);\r\n-\r\n-        assertEquals(\"newvalue\", _inner.getClob());\r\n-        assertEquals(\"newinner2\", _inner.getBlob().string);\r\n-    }\r\n-\r\n-    @Entity\r\n-    @Table(name = \"inntable\")\r\n-    public static class Inner {\r\n-\r\n-        @Id\r\n-        private String string = null;\r\n-        private String clobField = null;\r\n-        private Object eblob = null;\r\n-\r\n-        @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-        private Inner2 blobField = null;\r\n-\r\n-        public String getString() {\r\n-            return string;\r\n-        }\r\n-\r\n-        public void setString(String val) {\r\n-            string = val;\r\n-        }\r\n-\r\n-        public String getClob() {\r\n-            return clobField;\r\n-        }\r\n-\r\n-        public void setClob(String val) {\r\n-            clobField = val;\r\n-        }\r\n-\r\n-        public String getEBlob() {\r\n-            return ((String) eblob);\r\n-        }\r\n-\r\n-        public void setEBlob(String val) {\r\n-            eblob = val;\r\n-        }\r\n-\r\n-        public Inner2 getBlob() {\r\n-            return blobField;\r\n-        }\r\n-\r\n-        public void setBlob(Inner2 val) {\r\n-            blobField = val;\r\n-        }\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"serial\")\r\n-    @Entity\r\n-    @Table(name=\"Inner2\")\r\n-    public static class Inner2 implements Serializable {\r\n-\r\n-        @Id\r\n-        public String string = null;\r\n-\r\n-        public String getString() {\r\n-            return string;\r\n-        }\r\n-\r\n-        public void setString(String string) {\r\n-            this.string = string;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.io.Serializable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBLobs extends AbstractTestCase {\n+\n+    private EntityManager _pm = null;\n+    private Inner _inner = null;\n+\n+    public TestEJBLobs(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() throws Exception {\n+        deleteAll(Inner.class);\n+        deleteAll(Inner2.class);\n+\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        endTx(em);\n+        endEm(em);\n+\n+        Inner inner = new Inner();\n+        inner.setString(\"string\");\n+        inner.setClob(\"clobField\");\n+        inner.setEBlob(\"eblob\");\n+\n+        Inner2 inner2 = new Inner2();\n+        inner2.string = \"inner2\";\n+        inner.setBlob(inner2);\n+\n+        _pm = currentEntityManager();\n+        startTx(_pm);\n+        _pm.persist(inner);\n+        try {\n+            endTx(_pm);\n+        }\n+        catch (Exception jdoe) {\n+            System.out.println(\n+                \"An exception was thrown while persisting the entity : \\n\" +\n+                    getStackTrace(jdoe));\n+        }\n+        endEm(_pm);\n+\n+        _pm = currentEntityManager();\n+        _inner = (Inner) _pm.find(Inner.class, \"string\");\n+    }\n+\n+    public void testOtherFields() {\n+        assertEquals(\"string\", _inner.getString());\n+    }\n+\n+    public void testClob() {\n+        assertEquals(\"clobField\", _inner.getClob());\n+    }\n+\n+    public void testBlob() {\n+        assertNotNull(_inner.getBlob());\n+        assertEquals(\"inner2\", _inner.getBlob().string);\n+    }\n+\n+    public void testSetNull() {\n+        startTx(_pm);\n+        _inner.setClob(null);\n+        _inner.setBlob(null);\n+        endTx(_pm);\n+\n+        assertEquals(null, _inner.getBlob());\n+        assertEquals(null, _inner.getClob());\n+    }\n+\n+    public void testDelete() {\n+        deleteAll(Inner.class);\n+    }\n+\n+    public void testUpdate() {\n+        startTx(_pm);\n+        _inner.setClob(\"newvalue\");\n+        Inner2 inner2 = new Inner2();\n+        inner2.string = \"newinner2\";\n+        _inner.setBlob(inner2);\n+        endTx(_pm);\n+\n+        assertEquals(\"newvalue\", _inner.getClob());\n+        assertEquals(\"newinner2\", _inner.getBlob().string);\n+    }\n+\n+    @Entity\n+    @Table(name = \"inntable\")\n+    public static class Inner {\n+\n+        @Id\n+        private String string = null;\n+        private String clobField = null;\n+        private Object eblob = null;\n+\n+        @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+        private Inner2 blobField = null;\n+\n+        public String getString() {\n+            return string;\n+        }\n+\n+        public void setString(String val) {\n+            string = val;\n+        }\n+\n+        public String getClob() {\n+            return clobField;\n+        }\n+\n+        public void setClob(String val) {\n+            clobField = val;\n+        }\n+\n+        public String getEBlob() {\n+            return ((String) eblob);\n+        }\n+\n+        public void setEBlob(String val) {\n+            eblob = val;\n+        }\n+\n+        public Inner2 getBlob() {\n+            return blobField;\n+        }\n+\n+        public void setBlob(Inner2 val) {\n+            blobField = val;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    @Entity\n+    @Table(name=\"Inner2\")\n+    public static class Inner2 implements Serializable {\n+\n+        @Id\n+        public String string = null;\n+\n+        public String getString() {\n+            return string;\n+        }\n+\n+        public void setString(String string) {\n+            this.string = string;\n+        }\n+    }\n+}"},{"sha":"478c0414a75dc94f798e64365e86db0db728edd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBLocales.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,80 +1,80 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-import java.util.Locale;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBLocales extends AbstractTestCase {\r\n-\r\n-    public TestEJBLocales(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-    }\r\n-\r\n-    public void testLocales() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        RuntimeTest1 t1 = new RuntimeTest1(1);\r\n-        t1.setLocaleField(new Locale(Locale.FRANCE.getCountry(),\r\n-            Locale.FRENCH.getLanguage()));\r\n-        pm.persist(t1);\r\n-        pm.persist(new RuntimeTest1(2));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = currentEntityManager();\r\n-        List c = findAll(RuntimeTest1.class, pm);\r\n-        assertEquals(2, c.size());\r\n-\r\n-        boolean foundNull = false;\r\n-        boolean foundFrance = false;\r\n-        Locale locale;\r\n-\r\n-        for (Iterator iter = c.iterator(); iter.hasNext();) {\r\n-            t1 = (RuntimeTest1) iter.next();\r\n-            locale = t1.getLocaleField();\r\n-            if (locale == null)\r\n-                foundNull = true;\r\n-            else if (\r\n-                (locale.getCountry().equals(Locale.FRANCE.getCountry())) &&\r\n-                    (locale.getLanguage().equals(Locale.FRANCE.getLanguage())))\r\n-                foundFrance = true;\r\n-        }\r\n-\r\n-        assertTrue(foundNull);\r\n-        assertTrue(foundFrance);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public List findAll(Class c, EntityManager em) {\r\n-        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\r\n-            .getResultList();\r\n-        return l;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBLocales extends AbstractTestCase {\n+\n+    public TestEJBLocales(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+    }\n+\n+    public void testLocales() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        RuntimeTest1 t1 = new RuntimeTest1(1);\n+        t1.setLocaleField(new Locale(Locale.FRANCE.getCountry(),\n+            Locale.FRENCH.getLanguage()));\n+        pm.persist(t1);\n+        pm.persist(new RuntimeTest1(2));\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = currentEntityManager();\n+        List c = findAll(RuntimeTest1.class, pm);\n+        assertEquals(2, c.size());\n+\n+        boolean foundNull = false;\n+        boolean foundFrance = false;\n+        Locale locale;\n+\n+        for (Iterator iter = c.iterator(); iter.hasNext();) {\n+            t1 = (RuntimeTest1) iter.next();\n+            locale = t1.getLocaleField();\n+            if (locale == null)\n+                foundNull = true;\n+            else if (\n+                (locale.getCountry().equals(Locale.FRANCE.getCountry())) &&\n+                    (locale.getLanguage().equals(Locale.FRANCE.getLanguage())))\n+                foundFrance = true;\n+        }\n+\n+        assertTrue(foundNull);\n+        assertTrue(foundFrance);\n+        endEm(pm);\n+    }\n+\n+    public List findAll(Class c, EntityManager em) {\n+        List l = em.createQuery(\"Select object(o) from RuntimeTest1 o\")\n+            .getResultList();\n+        return l;\n+    }\n+}"},{"sha":"290072392e130ad34cccc3ed8eae33cff960a974","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","status":"modified","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBManagedInverses.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,93 +1,93 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.InverseA;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.InverseB;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBManagedInverses extends AbstractTestCase {\r\n-\r\n-    public TestEJBManagedInverses(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(InverseA.class);\r\n-        deleteAll(InverseB.class);\r\n-    }\r\n-\r\n-    public void testOneOne() {\r\n-        oneOneTest(true);\r\n-    }\r\n-\r\n-    public void testOneOneWithPreStore() {\r\n-        oneOneTest(false);\r\n-    }\r\n-\r\n-    private void oneOneTest(boolean flush) {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        InverseA a = new InverseA();\r\n-        InverseA a2 = new InverseA();\r\n-        InverseA a3 = new InverseA();\r\n-        a.setOneOne(a2);\r\n-        a.setOneOneOwner(a2);\r\n-        pm.persist(a);\r\n-        pm.persist(a3);\r\n-\r\n-//\t\tassertEquals (a, a2.getOneOne ());\r\n-//\t\tassertEquals (a, a2.getOneOneOwner ());\r\n-        assertEquals(\"a.getOneOne is not a2\", a2, a.getOneOne());\r\n-        assertEquals(\"a.getOneOneOwner is not a2\", a2, a.getOneOneOwner());\r\n-        endTx(pm);\r\n-\r\n-        startTx(pm);\r\n-        a2.setOneOne(a3);\r\n-        a2.setOneOneOwner(a3);\r\n-\r\n-//\t\tassertEquals (a2, a3.getOneOne ());\r\n-//\t\tassertEquals (a2, a3.getOneOneOwner ());\r\n-        assertEquals(a3, a2.getOneOne());\r\n-        assertEquals(a3, a2.getOneOneOwner());\r\n-        endTx(pm);\r\n-\r\n-        // make sure commit doesn't retrigger changes\r\n-//\t\tassertEquals (a2, a3.getOneOne ());\r\n-//\t\tassertEquals (a2, a3.getOneOneOwner ());\r\n-        assertEquals(a3, a2.getOneOne());\r\n-        assertEquals(a3, a2.getOneOneOwner());\r\n-\r\n-        // test persistent -> dirty\r\n-        startTx(pm);\r\n-        a2.setOneOne(null);\r\n-        a2.setOneOneOwner(null);\r\n-//\t\tif (flush)\r\n-//\t\t\tpm.flush ();\r\n-//\t\telse\r\n-//\t\t\tpm.setFlushMode(FlushModeType.AUTO);\r\n-//\t\tassertNull (a3.getOneOne ());\r\n-//\t\tassertNull (a3.getOneOneOwner ());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.InverseA;\n+import org.apache.openjpa.persistence.kernel.common.apps.InverseB;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBManagedInverses extends AbstractTestCase {\n+\n+    public TestEJBManagedInverses(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(InverseA.class);\n+        deleteAll(InverseB.class);\n+    }\n+\n+    public void testOneOne() {\n+        oneOneTest(true);\n+    }\n+\n+    public void testOneOneWithPreStore() {\n+        oneOneTest(false);\n+    }\n+\n+    private void oneOneTest(boolean flush) {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        InverseA a = new InverseA();\n+        InverseA a2 = new InverseA();\n+        InverseA a3 = new InverseA();\n+        a.setOneOne(a2);\n+        a.setOneOneOwner(a2);\n+        pm.persist(a);\n+        pm.persist(a3);\n+\n+//\t\tassertEquals (a, a2.getOneOne ());\n+//\t\tassertEquals (a, a2.getOneOneOwner ());\n+        assertEquals(\"a.getOneOne is not a2\", a2, a.getOneOne());\n+        assertEquals(\"a.getOneOneOwner is not a2\", a2, a.getOneOneOwner());\n+        endTx(pm);\n+\n+        startTx(pm);\n+        a2.setOneOne(a3);\n+        a2.setOneOneOwner(a3);\n+\n+//\t\tassertEquals (a2, a3.getOneOne ());\n+//\t\tassertEquals (a2, a3.getOneOneOwner ());\n+        assertEquals(a3, a2.getOneOne());\n+        assertEquals(a3, a2.getOneOneOwner());\n+        endTx(pm);\n+\n+        // make sure commit doesn't retrigger changes\n+//\t\tassertEquals (a2, a3.getOneOne ());\n+//\t\tassertEquals (a2, a3.getOneOneOwner ());\n+        assertEquals(a3, a2.getOneOne());\n+        assertEquals(a3, a2.getOneOneOwner());\n+\n+        // test persistent -> dirty\n+        startTx(pm);\n+        a2.setOneOne(null);\n+        a2.setOneOneOwner(null);\n+//\t\tif (flush)\n+//\t\t\tpm.flush ();\n+//\t\telse\n+//\t\t\tpm.setFlushMode(FlushModeType.AUTO);\n+//\t\tassertNull (a3.getOneOne ());\n+//\t\tassertNull (a3.getOneOneOwner ());\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+}"},{"sha":"afca6c93dd3ece07419ce31efd5abaf8a66248c4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNoPersistentFields.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,106 +1,106 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.io.Serializable;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-import javax.persistence.Table;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBNoPersistentFields extends AbstractTestCase {\r\n-\r\n-    private Nholder holder;\r\n-\r\n-    public TestEJBNoPersistentFields(String test) {\r\n-        super(test, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        deleteAll(Nholder.class);\r\n-    }\r\n-\r\n-    public void testNoPersistentFields() {\r\n-        EntityManager em = currentEntityManager();\r\n-        startTx(em);\r\n-\r\n-        holder = new Nholder();\r\n-        holder.setNpf(new NoPersistentFieldsPC());\r\n-        holder.setIdKey(1);\r\n-\r\n-        em.persist(holder);\r\n-        endTx(em);\r\n-\r\n-        Nholder holder2 = em.find(Nholder.class, 1);\r\n-        assertEquals(1, holder2.getIdKey());\r\n-        assertNotNull(holder2);\r\n-        assertNotNull(holder2.getNpf());\r\n-\r\n-        endEm(em);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"serial\")\r\n-    @Entity\r\n-    @Table(name = \"nholder2\")\r\n-    public static class Nholder implements Serializable {\r\n-\r\n-        @Id\r\n-        private int idkey;\r\n-\r\n-        @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\r\n-        private NoPersistentFieldsPC npf;\r\n-\r\n-        public Nholder() {\r\n-        }\r\n-\r\n-        public Nholder(NoPersistentFieldsPC npf, int idkey) {\r\n-            this.npf = npf;\r\n-            this.idkey = idkey;\r\n-        }\r\n-\r\n-        public void setNpf(NoPersistentFieldsPC npf) {\r\n-            this.npf = npf;\r\n-        }\r\n-\r\n-        public NoPersistentFieldsPC getNpf() {\r\n-            return this.npf;\r\n-        }\r\n-\r\n-        public int getIdKey() {\r\n-            return idkey;\r\n-        }\r\n-\r\n-        public void setIdKey(int idkey) {\r\n-            this.idkey = idkey;\r\n-        }\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"serial\")\r\n-    @Entity\r\n-    @Table(name = \"npfp\")\r\n-    public static class NoPersistentFieldsPC implements Serializable {\r\n-\r\n-        public transient int blankInt;\r\n-        public transient String blankString;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.io.Serializable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.EntityManager;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBNoPersistentFields extends AbstractTestCase {\n+\n+    private Nholder holder;\n+\n+    public TestEJBNoPersistentFields(String test) {\n+        super(test, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() throws Exception {\n+        deleteAll(Nholder.class);\n+    }\n+\n+    public void testNoPersistentFields() {\n+        EntityManager em = currentEntityManager();\n+        startTx(em);\n+\n+        holder = new Nholder();\n+        holder.setNpf(new NoPersistentFieldsPC());\n+        holder.setIdKey(1);\n+\n+        em.persist(holder);\n+        endTx(em);\n+\n+        Nholder holder2 = em.find(Nholder.class, 1);\n+        assertEquals(1, holder2.getIdKey());\n+        assertNotNull(holder2);\n+        assertNotNull(holder2.getNpf());\n+\n+        endEm(em);\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    @Entity\n+    @Table(name = \"nholder2\")\n+    public static class Nholder implements Serializable {\n+\n+        @Id\n+        private int idkey;\n+\n+        @OneToOne(cascade = { CascadeType.PERSIST, CascadeType.REMOVE })\n+        private NoPersistentFieldsPC npf;\n+\n+        public Nholder() {\n+        }\n+\n+        public Nholder(NoPersistentFieldsPC npf, int idkey) {\n+            this.npf = npf;\n+            this.idkey = idkey;\n+        }\n+\n+        public void setNpf(NoPersistentFieldsPC npf) {\n+            this.npf = npf;\n+        }\n+\n+        public NoPersistentFieldsPC getNpf() {\n+            return this.npf;\n+        }\n+\n+        public int getIdKey() {\n+            return idkey;\n+        }\n+\n+        public void setIdKey(int idkey) {\n+            this.idkey = idkey;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    @Entity\n+    @Table(name = \"npfp\")\n+    public static class NoPersistentFieldsPC implements Serializable {\n+\n+        public transient int blankInt;\n+        public transient String blankString;\n+    }\n+}"},{"sha":"510a63d6ebe914bd9096e612a7508ad7cf7ad393","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBNullValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.Inner;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBNullValues extends AbstractTestCase {\r\n-\r\n-    public TestEJBNullValues(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(Inner.class);\r\n-    }\r\n-\r\n-    public void testException() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(new Inner());\r\n-        try {\r\n-            endTx(pm);\r\n-            fail(\"Null value allowed\");\r\n-        }\r\n-        catch (Exception jfe) {\r\n-            System.out\r\n-                .println(\"Exception expected...Null value not allowed...\");\r\n-        }\r\n-        endEm(pm);\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.Inner;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBNullValues extends AbstractTestCase {\n+\n+    public TestEJBNullValues(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(Inner.class);\n+    }\n+\n+    public void testException() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        pm.persist(new Inner());\n+        try {\n+            endTx(pm);\n+            fail(\"Null value allowed\");\n+        }\n+        catch (Exception jfe) {\n+            System.out\n+                .println(\"Exception expected...Null value not allowed...\");\n+        }\n+        endEm(pm);\n+    }\n }\n\\ No newline at end of file"},{"sha":"87edfd15509340de55e8456baf79196723c065b6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBObjectCollections.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,76 +1,76 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.HashSet;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-/**\r\n- * Tests that Collections of type {@link Object} can hold all\r\n- * sorts of stuff (heterogeneous classes, persistent classes).\r\n- *\r\n- * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\r\n- */\r\n-public class TestEJBObjectCollections extends AbstractTestCase {\r\n-\r\n-    public TestEJBObjectCollections(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void testHashSet() {\r\n-        assertEquals(1, add(new Object[]{ \"Foo\" }, 1).getHashSet().size());\r\n-        assertEquals(1, add(new Object[]{ \"Foo\" }, 2).getHashSet().size());\r\n-\r\n-        assertEquals(2, add(\r\n-            new Object[]{ \"Foo\", new AllFieldsTypeTest() }, 3)\r\n-            .getHashSet().size());\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(ObjectCollectionHolder.class);\r\n-        deleteAll(AllFieldsTypeTest.class);\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public ObjectCollectionHolder add(Object[] objects, int id) {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        ObjectCollectionHolder holder = new ObjectCollectionHolder();\r\n-        holder.setId(id);\r\n-        pm.persist(holder);\r\n-        holder.setHashSet(new HashSet(Arrays.asList(objects)));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        return (ObjectCollectionHolder) pm\r\n-            .find(ObjectCollectionHolder.class, id);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest;\n+import org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+/**\n+ * Tests that Collections of type {@link Object} can hold all\n+ * sorts of stuff (heterogeneous classes, persistent classes).\n+ *\n+ * @author <a href=\"mailto:marc@solarmetric.com\">Marc Prud'hommeaux</a>\n+ */\n+public class TestEJBObjectCollections extends AbstractTestCase {\n+\n+    public TestEJBObjectCollections(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void testHashSet() {\n+        assertEquals(1, add(new Object[]{ \"Foo\" }, 1).getHashSet().size());\n+        assertEquals(1, add(new Object[]{ \"Foo\" }, 2).getHashSet().size());\n+\n+        assertEquals(2, add(\n+            new Object[]{ \"Foo\", new AllFieldsTypeTest() }, 3)\n+            .getHashSet().size());\n+    }\n+\n+    public void setUp() {\n+        deleteAll(ObjectCollectionHolder.class);\n+        deleteAll(AllFieldsTypeTest.class);\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectCollectionHolder add(Object[] objects, int id) {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        ObjectCollectionHolder holder = new ObjectCollectionHolder();\n+        holder.setId(id);\n+        pm.persist(holder);\n+        holder.setHashSet(new HashSet(Arrays.asList(objects)));\n+        endTx(pm);\n+        endEm(pm);\n+\n+        pm = currentEntityManager();\n+        startTx(pm);\n+        return (ObjectCollectionHolder) pm\n+            .find(ObjectCollectionHolder.class, id);\n+    }\n+}"},{"sha":"82294f86a86f6b035331fddf7376efaa604feee5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBRetainValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.List;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBRetainValues extends AbstractTestCase {\r\n-\r\n-    public TestEJBRetainValues(String testName) {\r\n-        super(testName, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-    }\r\n-\r\n-    /**\r\n-     * tests the behavior of the same object being viewed from\r\n-     * different PersistenceManagers with RetainValues set to true\r\n-     */\r\n-    public void testRetainValues() {\r\n-        // persist the object with field == \"x\"\r\n-        RuntimeTest1 test = new RuntimeTest1();\r\n-        test.setStringField(\"x\");\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        pm.persist(test);\r\n-        endTx(pm);\r\n-\r\n-        //\tfind the object in a different PM\r\n-        EntityManager pm2 = currentEntityManager();\r\n-        List l = (buildSelectQuery(pm2, \"x\"));\r\n-        assertNotNull(\"l is null in testRetainValues\", l);\r\n-        RuntimeTest1 sameThing = (RuntimeTest1) l.iterator().next();\r\n-\r\n-        assertEquals(\"x\", sameThing.getStringField());\r\n-        assertEquals(\"x\", test.getStringField());\r\n-\r\n-        //\tset the second object field to \"y\"\r\n-        startTx(pm2);\r\n-        sameThing.setStringField(\"y\");\r\n-        endTx(pm2);\r\n-        assertEquals(\"y\", sameThing.getStringField());\r\n-        assertEquals(\"x\", test.getStringField());\r\n-\r\n-        //\tdo some searching in the first PM\r\n-        List l2 = buildSelectQuery(pm, \"x\");\r\n-        assertEquals(0,\r\n-            l2.size());  //should be zero if retainvalue is set to true but that is kodo specific.\r\n-\r\n-        List l3 = buildSelectQuery(pm, \"y\");\r\n-        assertEquals(1, l3.size());\r\n-        assertEquals(test, l3.iterator().next());\r\n-        assertEquals(\"x\", test.getStringField());\r\n-\r\n-        endEm(pm2);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public static List buildSelectQuery(EntityManager em, String param) {\r\n-        return em.createQuery(\r\n-            \"SELECT c FROM RuntimeTest1 c where c.stringField = :username\")\r\n-            .setParameter(\"username\", param)\r\n-            .getResultList();\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.List;\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBRetainValues extends AbstractTestCase {\n+\n+    public TestEJBRetainValues(String testName) {\n+        super(testName, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+    }\n+\n+    /**\n+     * tests the behavior of the same object being viewed from\n+     * different PersistenceManagers with RetainValues set to true\n+     */\n+    public void testRetainValues() {\n+        // persist the object with field == \"x\"\n+        RuntimeTest1 test = new RuntimeTest1();\n+        test.setStringField(\"x\");\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        pm.persist(test);\n+        endTx(pm);\n+\n+        //\tfind the object in a different PM\n+        EntityManager pm2 = currentEntityManager();\n+        List l = (buildSelectQuery(pm2, \"x\"));\n+        assertNotNull(\"l is null in testRetainValues\", l);\n+        RuntimeTest1 sameThing = (RuntimeTest1) l.iterator().next();\n+\n+        assertEquals(\"x\", sameThing.getStringField());\n+        assertEquals(\"x\", test.getStringField());\n+\n+        //\tset the second object field to \"y\"\n+        startTx(pm2);\n+        sameThing.setStringField(\"y\");\n+        endTx(pm2);\n+        assertEquals(\"y\", sameThing.getStringField());\n+        assertEquals(\"x\", test.getStringField());\n+\n+        //\tdo some searching in the first PM\n+        List l2 = buildSelectQuery(pm, \"x\");\n+        assertEquals(0,\n+            l2.size());  //should be zero if retainvalue is set to true but that is kodo specific.\n+\n+        List l3 = buildSelectQuery(pm, \"y\");\n+        assertEquals(1, l3.size());\n+        assertEquals(test, l3.iterator().next());\n+        assertEquals(\"x\", test.getStringField());\n+\n+        endEm(pm2);\n+        endEm(pm);\n+    }\n+\n+    public static List buildSelectQuery(EntityManager em, String param) {\n+        return em.createQuery(\n+            \"SELECT c FROM RuntimeTest1 c where c.stringField = :username\")\n+            .setParameter(\"username\", param)\n+            .getResultList();\n+\t}\n+}"},{"sha":"747d17baae083c3afbd7465a2e7a5162144ba634","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBState.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.math.BigDecimal;\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBState extends AbstractTestCase {\r\n-\r\n-    private static final int INSERT_COUNT = 20;\r\n-\r\n-    public TestEJBState(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(AllFieldsTypeTest.class);\r\n-    }\r\n-\r\n-    public void testBigDecimalsLoseTrailingZeros() {\r\n-        EntityManager pm1 = currentEntityManager();\r\n-        startTx(pm1);\r\n-        AllFieldsTypeTest aftt = new AllFieldsTypeTest();\r\n-        aftt.setId(1);\r\n-        aftt.setTestBigDecimal(new BigDecimal(\"5.760000\"));\r\n-        pm1.persist(aftt);\r\n-\r\n-        endTx(pm1);\r\n-\r\n-        EntityManager pm2 = currentEntityManager();\r\n-        startTx(pm2);\r\n-\r\n-        Object retrieved = pm2.find(AllFieldsTypeTest.class, 1);\r\n-        assertEquals(aftt, retrieved);\r\n-        endTx(pm2);\r\n-        endEm(pm2);\r\n-        endEm(pm1);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.math.BigDecimal;\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBState extends AbstractTestCase {\n+\n+    private static final int INSERT_COUNT = 20;\n+\n+    public TestEJBState(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() {\n+        deleteAll(AllFieldsTypeTest.class);\n+    }\n+\n+    public void testBigDecimalsLoseTrailingZeros() {\n+        EntityManager pm1 = currentEntityManager();\n+        startTx(pm1);\n+        AllFieldsTypeTest aftt = new AllFieldsTypeTest();\n+        aftt.setId(1);\n+        aftt.setTestBigDecimal(new BigDecimal(\"5.760000\"));\n+        pm1.persist(aftt);\n+\n+        endTx(pm1);\n+\n+        EntityManager pm2 = currentEntityManager();\n+        startTx(pm2);\n+\n+        Object retrieved = pm2.find(AllFieldsTypeTest.class, 1);\n+        assertEquals(aftt, retrieved);\n+        endTx(pm2);\n+        endEm(pm2);\n+        endEm(pm1);\n+    }\n+}"},{"sha":"459e50f985a4ddd8a8dda13e3b2dc344e9873ec6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactionalClass.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.TransactionalClassPC;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBTransactionalClass extends AbstractTestCase {\r\n-\r\n-    public TestEJBTransactionalClass(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void testTransactional() {\r\n-        TransactionalClassPC pc = new TransactionalClassPC();\r\n-        pc.setIntField(1);\r\n-\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-        //pm.makeTransactional (pc);\r\n-        pc.setIntField(2);\r\n-        endTx(pm);\r\n-\r\n-        assertEquals(2, pc.getIntField());\r\n-\r\n-        startTx(pm);\r\n-        pc.setIntField(3);\r\n-        pm.getTransaction().rollback();\r\n-\r\n-        assertEquals(3, pc.getIntField());\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import javax.persistence.EntityManager;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.TransactionalClassPC;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBTransactionalClass extends AbstractTestCase {\n+\n+    public TestEJBTransactionalClass(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void testTransactional() {\n+        TransactionalClassPC pc = new TransactionalClassPC();\n+        pc.setIntField(1);\n+\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+        //pm.makeTransactional (pc);\n+        pc.setIntField(2);\n+        endTx(pm);\n+\n+        assertEquals(2, pc.getIntField());\n+\n+        startTx(pm);\n+        pc.setIntField(3);\n+        pm.getTransaction().rollback();\n+\n+        assertEquals(3, pc.getIntField());\n+        endEm(pm);\n+    }\n+}"},{"sha":"07afd5f785124e8ef46acef53ba8e3631ef15997","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestEJBTransactions.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,119 +1,119 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.ArrayList;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-\r\n-public class TestEJBTransactions extends AbstractTestCase {\r\n-\r\n-    public TestEJBTransactions(String name) {\r\n-        super(name, \"kernelcactusapp\");\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-    }\r\n-\r\n-    public void testTxCannotBeCommittedTwiceInDiffThreads() throws Throwable {\r\n-        final ArrayList list = new ArrayList();\r\n-\r\n-        final EntityManager em = currentEntityManager();\r\n-        final EntityTransaction tx;\r\n-\r\n-        tx = em.getTransaction();\r\n-        if (tx.isActive())\r\n-            tx.rollback();\r\n-        tx.begin();\r\n-        endTx(em);\r\n-\r\n-        Thread thread = new Thread() {\r\n-            @SuppressWarnings(\"unchecked\")\r\n-            public void run() {\r\n-                try {\r\n-                    endTx(em);\r\n-                    list.add(new Integer(0));\r\n-                }\r\n-                catch (Exception e) {\r\n-                    list.add(e);\r\n-                }\r\n-                catch (Throwable t) {\r\n-                    list.add(t);\r\n-                }\r\n-            }\r\n-        };\r\n-\r\n-        thread.start();\r\n-\r\n-        while (list.size() == 0) ;\r\n-\r\n-        Object result = list.get(0);\r\n-\r\n-        if (!(result instanceof Exception)) {\r\n-            if (result instanceof Throwable)\r\n-                throw (Throwable) result;\r\n-        }\r\n-        thread.join();\r\n-    }\r\n-\r\n-    public void testTransactionsCannotBeCommittedTwice() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        rollbackTx(pm);\r\n-\r\n-        startTx(pm);\r\n-        endTx(pm);\r\n-\r\n-        try {\r\n-            // second commit\r\n-            endTx(pm);\r\n-        }\r\n-        catch (Exception e) {\r\n-            // good: we should be throwing an exception here\r\n-            System.out.println(\"Exception should be thrown here...\" +\r\n-                \"Transactions cannot be committed twice...\");\r\n-        }\r\n-    }\r\n-\r\n-    public void testTransactionsCannotBeRolledBackTwice() {\r\n-        EntityManager pm = currentEntityManager();\r\n-        startTx(pm);\r\n-\r\n-        EntityTransaction t;\r\n-        t = pm.getTransaction();\r\n-\r\n-        if (t.isActive()) {\r\n-            t.rollback();\r\n-        } else {\r\n-            t.begin();\r\n-            t.rollback();\r\n-        }\r\n-\r\n-        try {\r\n-            // second rollback\r\n-            t.rollback();\r\n-        }\r\n-        catch (Exception e) {\r\n-            // good: we should be throwing an exception here\r\n-            System.out.println(\"Exception should be thrown here...\" +\r\n-                \"Transactions cannot be rolled back twice...\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.ArrayList;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityTransaction;\n+\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+\n+public class TestEJBTransactions extends AbstractTestCase {\n+\n+    public TestEJBTransactions(String name) {\n+        super(name, \"kernelcactusapp\");\n+    }\n+\n+    public void setUp() {\n+    }\n+\n+    public void testTxCannotBeCommittedTwiceInDiffThreads() throws Throwable {\n+        final ArrayList list = new ArrayList();\n+\n+        final EntityManager em = currentEntityManager();\n+        final EntityTransaction tx;\n+\n+        tx = em.getTransaction();\n+        if (tx.isActive())\n+            tx.rollback();\n+        tx.begin();\n+        endTx(em);\n+\n+        Thread thread = new Thread() {\n+            @SuppressWarnings(\"unchecked\")\n+            public void run() {\n+                try {\n+                    endTx(em);\n+                    list.add(new Integer(0));\n+                }\n+                catch (Exception e) {\n+                    list.add(e);\n+                }\n+                catch (Throwable t) {\n+                    list.add(t);\n+                }\n+            }\n+        };\n+\n+        thread.start();\n+\n+        while (list.size() == 0) ;\n+\n+        Object result = list.get(0);\n+\n+        if (!(result instanceof Exception)) {\n+            if (result instanceof Throwable)\n+                throw (Throwable) result;\n+        }\n+        thread.join();\n+    }\n+\n+    public void testTransactionsCannotBeCommittedTwice() {\n+        EntityManager pm = currentEntityManager();\n+        rollbackTx(pm);\n+\n+        startTx(pm);\n+        endTx(pm);\n+\n+        try {\n+            // second commit\n+            endTx(pm);\n+        }\n+        catch (Exception e) {\n+            // good: we should be throwing an exception here\n+            System.out.println(\"Exception should be thrown here...\" +\n+                \"Transactions cannot be committed twice...\");\n+        }\n+    }\n+\n+    public void testTransactionsCannotBeRolledBackTwice() {\n+        EntityManager pm = currentEntityManager();\n+        startTx(pm);\n+\n+        EntityTransaction t;\n+        t = pm.getTransaction();\n+\n+        if (t.isActive()) {\n+            t.rollback();\n+        } else {\n+            t.begin();\n+            t.rollback();\n+        }\n+\n+        try {\n+            // second rollback\n+            t.rollback();\n+        }\n+        catch (Exception e) {\n+            // good: we should be throwing an exception here\n+            System.out.println(\"Exception should be thrown here...\" +\n+                \"Transactions cannot be rolled back twice...\");\n+        }\n+    }\n+}"},{"sha":"60b63c37fb8af246db0f596136ac3b116efe173f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,125 +1,125 @@\n-/*\r\n- * TestExtents.java\r\n- *\r\n- * Created on October 10, 2006, 4:34 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Iterator;\r\n-import java.util.LinkedList;\r\n-import java.util.List;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\r\n-\r\n-import org.apache.openjpa.persistence.Extent;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestExtents extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestExtents\r\n-     */\r\n-    public TestExtents() {\r\n-    }\r\n-\r\n-    public TestExtents(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-\r\n-        RuntimeTest1 b = new RuntimeTest1(\"STRING\", 10);\r\n-        RuntimeTest2 c = new RuntimeTest2(\"STRING2\", 11);\r\n-        pm.persist(b);\r\n-        pm.persist(c);\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testExtent1() {\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n-\r\n-        assertEquals(pm, ext.getEntityManager());\r\n-\r\n-        assertEquals(RuntimeTest1.class, ext.getElementClass());\r\n-        assertTrue(!ext.hasSubclasses());\r\n-    }\r\n-\r\n-    public void testExtent2() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n-\r\n-        boolean found = false;\r\n-        for (Iterator i = ext.iterator(); i.hasNext(); found = true)\r\n-            assertEquals(RuntimeTest1.class, i.next().getClass());\r\n-        assertTrue(found);\r\n-    }\r\n-\r\n-    public void testExtent3() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        Extent ext = pm.createExtent(RuntimeTest1.class, true);\r\n-\r\n-        boolean foundB = false;\r\n-        for (Iterator i = ext.iterator(); i.hasNext();)\r\n-            if (i.next().getClass().equals(RuntimeTest2.class))\r\n-                foundB = true;\r\n-        assertTrue(foundB);\r\n-    }\r\n-\r\n-    public void testExtent4() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        Extent ext = (Extent) pm.createExtent(RuntimeTest1.class, true);\r\n-\r\n-        List all = new LinkedList();\r\n-        for (Iterator i = ext.iterator(); i.hasNext();)\r\n-            all.add(i.next());\r\n-\r\n-        List aList = ext.list();\r\n-        assertEquals(all.size(), aList.size());\r\n-        assertContainsSame(all, aList);\r\n-    }\r\n-\r\n-    private void assertContainsSame(List l, Collection c) {\r\n-        int size = 0;\r\n-        for (Iterator iter = c.iterator(); iter.hasNext(); iter.next())\r\n-            size++;\r\n-\r\n-        assertEquals(l.size(), size);\r\n-\r\n-        for (Iterator iter = l.iterator(); iter.hasNext();)\r\n-            assertTrue(c.contains(iter.next()));\r\n-    }\r\n-}\r\n+/*\n+ * TestExtents.java\n+ *\n+ * Created on October 10, 2006, 4:34 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\n+\n+import org.apache.openjpa.persistence.Extent;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestExtents extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestExtents\n+     */\n+    public TestExtents() {\n+    }\n+\n+    public TestExtents(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+\n+        RuntimeTest1 b = new RuntimeTest1(\"STRING\", 10);\n+        RuntimeTest2 c = new RuntimeTest2(\"STRING2\", 11);\n+        pm.persist(b);\n+        pm.persist(c);\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testExtent1() {\n+\n+        OpenJPAEntityManager pm = getPM();\n+        Extent ext = pm.createExtent(RuntimeTest1.class, false);\n+\n+        assertEquals(pm, ext.getEntityManager());\n+\n+        assertEquals(RuntimeTest1.class, ext.getElementClass());\n+        assertTrue(!ext.hasSubclasses());\n+    }\n+\n+    public void testExtent2() {\n+        OpenJPAEntityManager pm = getPM();\n+        Extent ext = pm.createExtent(RuntimeTest1.class, false);\n+\n+        boolean found = false;\n+        for (Iterator i = ext.iterator(); i.hasNext(); found = true)\n+            assertEquals(RuntimeTest1.class, i.next().getClass());\n+        assertTrue(found);\n+    }\n+\n+    public void testExtent3() {\n+        OpenJPAEntityManager pm = getPM();\n+        Extent ext = pm.createExtent(RuntimeTest1.class, true);\n+\n+        boolean foundB = false;\n+        for (Iterator i = ext.iterator(); i.hasNext();)\n+            if (i.next().getClass().equals(RuntimeTest2.class))\n+                foundB = true;\n+        assertTrue(foundB);\n+    }\n+\n+    public void testExtent4() {\n+        OpenJPAEntityManager pm = getPM();\n+        Extent ext = (Extent) pm.createExtent(RuntimeTest1.class, true);\n+\n+        List all = new LinkedList();\n+        for (Iterator i = ext.iterator(); i.hasNext();)\n+            all.add(i.next());\n+\n+        List aList = ext.list();\n+        assertEquals(all.size(), aList.size());\n+        assertContainsSame(all, aList);\n+    }\n+\n+    private void assertContainsSame(List l, Collection c) {\n+        int size = 0;\n+        for (Iterator iter = c.iterator(); iter.hasNext(); iter.next())\n+            size++;\n+\n+        assertEquals(l.size(), size);\n+\n+        for (Iterator iter = l.iterator(); iter.hasNext();)\n+            assertTrue(c.contains(iter.next()));\n+    }\n+}"},{"sha":"98d2cef3b5b5730549bde5617f7b93f9bc05a4be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","status":"modified","additions":199,"deletions":199,"changes":398,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestExtents2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,199 +1,199 @@\n-/*\r\n- * TestExtents2.java\r\n- *\r\n- * Created on October 10, 2006, 5:30 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Iterator;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3;\r\n-\r\n-import org.apache.openjpa.persistence.Extent;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestExtents2 extends BaseKernelTest {\r\n-\r\n-    private Object _oid1 = null;\r\n-    private Object _oid2 = null;\r\n-    private Object _oid3 = null;\r\n-\r\n-    public TestExtents2(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestExtents2\r\n-     */\r\n-    public TestExtents2() {\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        RuntimeTest1 test1 = new RuntimeTest1();\r\n-        test1.setIntField(1);\r\n-        RuntimeTest2 test2 = new RuntimeTest2();\r\n-        test2.setIntField(2);\r\n-        test2.setIntField2(2);\r\n-        RuntimeTest3 test3 = new RuntimeTest3();\r\n-        test3.setIntField(3);\r\n-        test3.setIntField3(3);\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(test1);\r\n-        pm.persist(test2);\r\n-        pm.persist(test3);\r\n-        _oid1 = pm.getObjectId(test1);\r\n-        _oid2 = pm.getObjectId(test2);\r\n-        _oid3 = pm.getObjectId(test3);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testProperties() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        Extent ext = pm.createExtent(RuntimeTest2.class, false);\r\n-        assertEquals(pm, ext.getEntityManager());\r\n-        assertEquals(RuntimeTest2.class, ext.getElementClass());\r\n-        assertTrue(!ext.hasSubclasses());\r\n-\r\n-        ext = pm.createExtent(RuntimeTest1.class, true);\r\n-        assertEquals(pm, ext.getEntityManager());\r\n-        assertEquals(RuntimeTest1.class, ext.getElementClass());\r\n-        assertTrue(ext.hasSubclasses());\r\n-    }\r\n-\r\n-    public void testNoSubclasses() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n-        Iterator itr = ext.iterator();\r\n-        assertTrue(itr.hasNext());\r\n-        assertEquals(_oid1, pm.getObjectId(itr.next()));\r\n-        assertTrue(!itr.hasNext());\r\n-        ext.closeAll();\r\n-    }\r\n-\r\n-    public void testSubclasses() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        Extent ext = pm.createExtent(RuntimeTest1.class, true);\r\n-\r\n-        int test1Count = 0;\r\n-        int test2Count = 0;\r\n-        int test3Count = 0;\r\n-        Object next;\r\n-        for (Iterator itr = ext.iterator(); itr.hasNext();) {\r\n-            next = pm.getObjectId(itr.next());\r\n-            if (_oid1.equals(next))\r\n-                test1Count++;\r\n-            else if (_oid2.equals(next))\r\n-                test2Count++;\r\n-            else if (_oid3.equals(next))\r\n-                test3Count++;\r\n-        }\r\n-        ext.closeAll();\r\n-        assertEquals(1, test1Count);\r\n-        assertEquals(1, test2Count);\r\n-        assertEquals(1, test3Count);\r\n-    }\r\n-\r\n-    public void testContainsNewlyPersisted() {\r\n-        RuntimeTest1 test1 = new RuntimeTest1();\r\n-        RuntimeTest1 test2 = new RuntimeTest2();\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-\r\n-        // pcl: 14 Oct 2003: default in 3.0 is now true, but this test\r\n-        // assumes false somewhere.\r\n-\r\n-        pm.setIgnoreChanges(false);\r\n-        startTx(pm);\r\n-        try {\r\n-            pm.persist(test1);\r\n-            pm.persist(test2);\r\n-            Object newOid = pm.getObjectId(test1);\r\n-\r\n-            Extent ext = pm.createExtent(RuntimeTest1.class, false);\r\n-            boolean foundOid1 = false;\r\n-            boolean foundNew = false;\r\n-            Object next;\r\n-            for (Iterator itr = ext.iterator(); itr.hasNext();) {\r\n-                next = pm.getObjectId(itr.next());\r\n-                if (_oid1.equals(next))\r\n-                    foundOid1 = true;\r\n-                else if (newOid.equals(next))\r\n-                    foundNew = true;\r\n-                else\r\n-                    fail(\"Bad object in extent.\");\r\n-            }\r\n-            ext.closeAll();\r\n-            assertTrue(foundOid1);\r\n-            assertTrue(foundNew);\r\n-        } finally {\r\n-            rollbackTx(pm);\r\n-        }\r\n-    }\r\n-\r\n-    public void testNotContainsNewlyDeleted() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-\r\n-        // pcl: 14 Oct 2003: default in 3.0 is now true, but this test\r\n-        // assumes false somewhere.\r\n-        pm.setIgnoreChanges(false);\r\n-        startTx(pm);\r\n-        try {\r\n-            RuntimeTest2 test2 =\r\n-                (RuntimeTest2) pm.find(RuntimeTest2.class, _oid2);\r\n-            pm.remove(test2);\r\n-            RuntimeTest1 test1 = new RuntimeTest1();\r\n-            pm.persist(test1);\r\n-            pm.remove(test1);\r\n-\r\n-            Extent ext = pm.createExtent(RuntimeTest1.class, true);\r\n-            boolean foundOid1 = false;\r\n-            boolean foundOid3 = false;\r\n-            Object next;\r\n-            for (Iterator itr = ext.iterator(); itr.hasNext();) {\r\n-                next = pm.getObjectId(itr.next());\r\n-                if (_oid1.equals(next))\r\n-                    foundOid1 = true;\r\n-                else if (_oid3.equals(next))\r\n-                    foundOid3 = true;\r\n-                else\r\n-                    fail(\"Bad object in extent.\");\r\n-            }\r\n-            ext.closeAll();\r\n-            assertTrue(foundOid1);\r\n-            assertTrue(foundOid3);\r\n-        } finally {\r\n-            rollbackTx(pm);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * TestExtents2.java\n+ *\n+ * Created on October 10, 2006, 5:30 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Iterator;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3;\n+\n+import org.apache.openjpa.persistence.Extent;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestExtents2 extends BaseKernelTest {\n+\n+    private Object _oid1 = null;\n+    private Object _oid2 = null;\n+    private Object _oid3 = null;\n+\n+    public TestExtents2(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Creates a new instance of TestExtents2\n+     */\n+    public TestExtents2() {\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        RuntimeTest1 test1 = new RuntimeTest1();\n+        test1.setIntField(1);\n+        RuntimeTest2 test2 = new RuntimeTest2();\n+        test2.setIntField(2);\n+        test2.setIntField2(2);\n+        RuntimeTest3 test3 = new RuntimeTest3();\n+        test3.setIntField(3);\n+        test3.setIntField3(3);\n+\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        pm.persist(test1);\n+        pm.persist(test2);\n+        pm.persist(test3);\n+        _oid1 = pm.getObjectId(test1);\n+        _oid2 = pm.getObjectId(test2);\n+        _oid3 = pm.getObjectId(test3);\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testProperties() {\n+        OpenJPAEntityManager pm = getPM();\n+        Extent ext = pm.createExtent(RuntimeTest2.class, false);\n+        assertEquals(pm, ext.getEntityManager());\n+        assertEquals(RuntimeTest2.class, ext.getElementClass());\n+        assertTrue(!ext.hasSubclasses());\n+\n+        ext = pm.createExtent(RuntimeTest1.class, true);\n+        assertEquals(pm, ext.getEntityManager());\n+        assertEquals(RuntimeTest1.class, ext.getElementClass());\n+        assertTrue(ext.hasSubclasses());\n+    }\n+\n+    public void testNoSubclasses() {\n+        OpenJPAEntityManager pm = getPM();\n+        Extent ext = pm.createExtent(RuntimeTest1.class, false);\n+        Iterator itr = ext.iterator();\n+        assertTrue(itr.hasNext());\n+        assertEquals(_oid1, pm.getObjectId(itr.next()));\n+        assertTrue(!itr.hasNext());\n+        ext.closeAll();\n+    }\n+\n+    public void testSubclasses() {\n+        OpenJPAEntityManager pm = getPM();\n+        Extent ext = pm.createExtent(RuntimeTest1.class, true);\n+\n+        int test1Count = 0;\n+        int test2Count = 0;\n+        int test3Count = 0;\n+        Object next;\n+        for (Iterator itr = ext.iterator(); itr.hasNext();) {\n+            next = pm.getObjectId(itr.next());\n+            if (_oid1.equals(next))\n+                test1Count++;\n+            else if (_oid2.equals(next))\n+                test2Count++;\n+            else if (_oid3.equals(next))\n+                test3Count++;\n+        }\n+        ext.closeAll();\n+        assertEquals(1, test1Count);\n+        assertEquals(1, test2Count);\n+        assertEquals(1, test3Count);\n+    }\n+\n+    public void testContainsNewlyPersisted() {\n+        RuntimeTest1 test1 = new RuntimeTest1();\n+        RuntimeTest1 test2 = new RuntimeTest2();\n+\n+        OpenJPAEntityManager pm = getPM();\n+\n+        // pcl: 14 Oct 2003: default in 3.0 is now true, but this test\n+        // assumes false somewhere.\n+\n+        pm.setIgnoreChanges(false);\n+        startTx(pm);\n+        try {\n+            pm.persist(test1);\n+            pm.persist(test2);\n+            Object newOid = pm.getObjectId(test1);\n+\n+            Extent ext = pm.createExtent(RuntimeTest1.class, false);\n+            boolean foundOid1 = false;\n+            boolean foundNew = false;\n+            Object next;\n+            for (Iterator itr = ext.iterator(); itr.hasNext();) {\n+                next = pm.getObjectId(itr.next());\n+                if (_oid1.equals(next))\n+                    foundOid1 = true;\n+                else if (newOid.equals(next))\n+                    foundNew = true;\n+                else\n+                    fail(\"Bad object in extent.\");\n+            }\n+            ext.closeAll();\n+            assertTrue(foundOid1);\n+            assertTrue(foundNew);\n+        } finally {\n+            rollbackTx(pm);\n+        }\n+    }\n+\n+    public void testNotContainsNewlyDeleted() {\n+        OpenJPAEntityManager pm = getPM();\n+\n+        // pcl: 14 Oct 2003: default in 3.0 is now true, but this test\n+        // assumes false somewhere.\n+        pm.setIgnoreChanges(false);\n+        startTx(pm);\n+        try {\n+            RuntimeTest2 test2 =\n+                (RuntimeTest2) pm.find(RuntimeTest2.class, _oid2);\n+            pm.remove(test2);\n+            RuntimeTest1 test1 = new RuntimeTest1();\n+            pm.persist(test1);\n+            pm.remove(test1);\n+\n+            Extent ext = pm.createExtent(RuntimeTest1.class, true);\n+            boolean foundOid1 = false;\n+            boolean foundOid3 = false;\n+            Object next;\n+            for (Iterator itr = ext.iterator(); itr.hasNext();) {\n+                next = pm.getObjectId(itr.next());\n+                if (_oid1.equals(next))\n+                    foundOid1 = true;\n+                else if (_oid3.equals(next))\n+                    foundOid3 = true;\n+                else\n+                    fail(\"Bad object in extent.\");\n+            }\n+            ext.closeAll();\n+            assertTrue(foundOid1);\n+            assertTrue(foundOid3);\n+        } finally {\n+            rollbackTx(pm);\n+        }\n+    }\n+}"},{"sha":"8df8554cda685d6ea21aecf4a43d3f5ecc95a6ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","status":"modified","additions":402,"deletions":402,"changes":804,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroups.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,403 +1,403 @@\n-/*\r\n- * TestFetchGroups.java\r\n- *\r\n- * Created on October 10, 2006, 5:46 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.BitSet;\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.Map;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachA;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachB;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachC;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachD;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachE;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AttachF;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\r\n-\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.persistence.FetchPlan;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-\r\n-public class TestFetchGroups extends BaseKernelTest {\r\n-\r\n-    private int oid1;\r\n-    private int oid2;\r\n-    private int oidc1;\r\n-\r\n-    public TestFetchGroups(String s) {\r\n-        super(s);\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestFetchGroups\r\n-     */\r\n-    public TestFetchGroups() {\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(FetchGroupTestObject.class);\r\n-\r\n-        FetchGroupTestObject o1 = new FetchGroupTestObject();\r\n-        // the value that 'a' is set to is important -- TestFetchGroupsExtent\r\n-        // and TestFetchGroupsQuery rely on this\r\n-        o1.setA(5);\r\n-        o1.setB(\"foo\");\r\n-        //o1.setC (new BigInteger (89));\r\n-        o1.setD(new Date());\r\n-        o1.setE(\"e-foo\");\r\n-        o1.setF(\"f-foo\");\r\n-\r\n-        FetchGroupTestObject o2 = new FetchGroupTestObject();\r\n-        // the value that 'a' is set to is important -- TestFetchGroupsExtent\r\n-        // and TestFetchGroupsQuery rely on this\r\n-        o2.setA(3);\r\n-        o2.setB(\"bar\");\r\n-        //o2.setC (new BigInteger (13));\r\n-        o2.setD(new Date());\r\n-        o2.setE(\"e-bar\");\r\n-        o2.setF(\"f-bar\");\r\n-        o2.setG(o1);\r\n-        o2.setH(o1);\r\n-\r\n-        FetchGroupTestObjectChild c1 = new FetchGroupTestObjectChild();\r\n-        // the value that 'a' is set to is important -- TestFetchGroupsExtent\r\n-        // and TestFetchGroupsQuery rely on this\r\n-        c1.setA(4);\r\n-        c1.setB(\"child\");\r\n-        c1.setD(new Date());\r\n-        c1.setE(\"e-baz\");\r\n-        c1.setF(\"f-baz\");\r\n-        c1.setG(o1);\r\n-        c1.setH(o1);\r\n-        c1.setChildA(1);\r\n-        c1.setChildB(2);\r\n-        c1.setChildC(3);\r\n-        c1.setChildD(4);\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-\r\n-        pm.persist(o1);\r\n-        pm.persist(o2);\r\n-        pm.persist(c1);\r\n-        endTx(pm);\r\n-\r\n-        oid1 = o1.getId();\r\n-        oid2 = o2.getId();\r\n-        oidc1 = c1.getId();\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testFetchGroupsFromConfiguration() {\r\n-        Map props = new HashMap();\r\n-        props.put(\"openjpa.FetchGroups\", \"default,fg1,fg2\");\r\n-        OpenJPAEntityManagerFactory factory = getEmf(props);\r\n-\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) factory.createEntityManager();\r\n-        checkGroups(pm, new String[]{ \"fg1\", \"fg2\" });\r\n-        factory.close();\r\n-    }\r\n-\r\n-    public void testFetchGroupsNoConfiguration() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-\r\n-        FetchGroupTestObject o1 = getO1(pm);\r\n-        FetchGroupTestObject o2 = getO2(pm);\r\n-\r\n-        // only field a should be loaded.\r\n-        checkObject(pm, o1, true, false, false, false, false, false);\r\n-\r\n-        // upon loading field b, fields c and d should also be loaded,\r\n-        // but e and f should not.\r\n-        o1.getB();\r\n-        checkObject(pm, o1, true, true, true, true, false, false);\r\n-\r\n-        // loading field h should not cause any of the others to be loaded.\r\n-        assertEquals(o1, o2.getH());\r\n-        checkObject(pm, o2, true, false, false, false, false, false);\r\n-\r\n-        // loading field g should cause e and f to be loaded.\r\n-        assertEquals(o1, o2.getG());\r\n-        checkObject(pm, o2, true, false, false, false, true, true);\r\n-    }\r\n-\r\n-    public void testRetrieveAll() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-\r\n-        FetchGroupTestObject o1 = getO1(pm);\r\n-        FetchGroupTestObject o2 = getO2(pm);\r\n-\r\n-        // only field a should be loaded.\r\n-        checkObject(pm, o1, true, false, false, false, false, false);\r\n-        checkObject(pm, o2, true, false, false, false, false, false);\r\n-\r\n-        // only field a should be loaded.\r\n-        pm.retrieve(o1);\r\n-        checkObject(pm, o1, true, false, false, false, false, false);\r\n-\r\n-        // Add groups 1 and 3 to the default fetch configuration.\r\n-        pm.getFetchPlan().addFetchGroup(\"g1\");\r\n-        pm.getFetchPlan().addFetchGroup(\"g3\");\r\n-\r\n-        // Retrieve o1's \"DFG\" which will actually do all configured\r\n-        // fetch groups.\r\n-        // DFG fields and fields in groups 1 and 3 should be loaded\r\n-        pm.retrieve(o1);\r\n-        checkObject(pm, o1, true, true, true, true, false, false);\r\n-    }\r\n-\r\n-    public void testFetchGroupConfiguration() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        FetchPlan fetch = pm.getFetchPlan();\r\n-\r\n-        checkGroups(pm, new String[0]);\r\n-\r\n-        fetch.addFetchGroup(\"foo\");\r\n-        checkGroups(pm, new String[]{ \"foo\" });\r\n-\r\n-        fetch.addFetchGroup(\"bar\");\r\n-        fetch.addFetchGroup(\"baz\");\r\n-        checkGroups(pm, new String[]{ \"foo\", \"bar\", \"baz\" });\r\n-\r\n-        fetch.addFetchGroup(\"a\");\r\n-        fetch.addFetchGroup(\"b\");\r\n-        fetch.addFetchGroup(\"c\");\r\n-        fetch.addFetchGroup(\"d\");\r\n-        checkGroups(pm, new String[]\r\n-            { \"foo\", \"bar\", \"baz\", \"a\", \"b\", \"c\", \"d\" });\r\n-\r\n-        fetch.removeFetchGroup(\"bar\");\r\n-        checkGroups(pm, new String[]{ \"foo\", \"baz\", \"a\", \"b\", \"c\", \"d\" });\r\n-\r\n-        fetch.removeFetchGroup(\"baz\");\r\n-        fetch.removeFetchGroup(\"c\");\r\n-        checkGroups(pm, new String[]{ \"foo\", \"a\", \"b\", \"d\" });\r\n-\r\n-        fetch.clearFetchGroups().addFetchGroup(FetchPlan.GROUP_DEFAULT);\r\n-        checkGroups(pm, new String[0]);\r\n-    }\r\n-\r\n-    private void checkGroups(OpenJPAEntityManager pm, String[] groups) {\r\n-        HashSet groupSet = new HashSet(Arrays.asList(groups));\r\n-        groupSet.add(FetchPlan.GROUP_DEFAULT);\r\n-        assertEquals(\"groupSet dont match\", groupSet,\r\n-            new HashSet(pm.getFetchPlan().getFetchGroups()));\r\n-    }\r\n-\r\n-    public void testFetchGroupsChildWithConfiguration() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.getFetchPlan().addFetchGroup(\"g1\");\r\n-        pm.getFetchPlan().addFetchGroup(\"g3\");\r\n-\r\n-        // get this so that h's value is loaded into cache.\r\n-        FetchGroupTestObject o1 = getO1(pm);\r\n-\r\n-        FetchGroupTestObjectChild c1 = getC1(pm);\r\n-\r\n-        // DFG fields and fields in groups 1 and 3 should be loaded\r\n-        checkChildObject(pm, c1, true, true, true, true, false, false,\r\n-            true, true, false, true);\r\n-\r\n-        // upon accessing field b, nothing should change.\r\n-        c1.getB();\r\n-        checkChildObject(pm, c1, true, true, true, true, false, false,\r\n-            true, true, false, true);\r\n-\r\n-        c1.getH();\r\n-    }\r\n-\r\n-    public void testFetchGroupsWithConfiguration() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-\r\n-        pm.getFetchPlan().addFetchGroup(\"g1\");\r\n-        pm.getFetchPlan().addFetchGroup(\"g3\");\r\n-\r\n-        FetchGroupTestObject o1 = getO1(pm);\r\n-        FetchGroupTestObject o2 = getO2(pm);\r\n-\r\n-        // DFG fields and fields in groups 1 and 3 should be loaded\r\n-        checkObject(pm, o1, true, true, true, true, false, false);\r\n-\r\n-        // upon accessing field b, nothing should change.\r\n-        o1.getB();\r\n-        checkObject(pm, o1, true, true, true, true, false, false);\r\n-\r\n-        // loading field h should not cause any of the others to be loaded.\r\n-        assertEquals(o1, o2.getH());\r\n-        checkObject(pm, o2, true, true, true, true, false, false);\r\n-\r\n-        // loading field g should cause e and f to be loaded.\r\n-        assertEquals(o1, o2.getG());\r\n-        checkObject(pm, o2, true, true, true, true, true, true);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that relation fields are loaded immediately when\r\n-     * they are in one of the PM's configured fetch groups.\r\n-     */\r\n-    public void testRelationsLoaded() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.getFetchPlan().addFetchGroup(\"g2\");\r\n-\r\n-        // note: important the o1 is *not* in pm's cache at this point, so that\r\n-        // we know it takes another datastore trip to get o1\r\n-\r\n-        // load o2 and retrieve its state manager\r\n-        OpenJPAStateManager sm = getStateManager(getO2(pm), pm);\r\n-        assertNotNull(\"SM is NULL\", sm);\r\n-\r\n-        // 'g' is the name of a 1-1 relation field to o1 in configured\r\n-        // fetch group 'g2'; make sure it is loaded\r\n-        int field = sm.getMetaData().getField(\"g\").getIndex();\r\n-        try {\r\n-            assertTrue(sm.getLoaded().get(field));\r\n-            assertEquals(oid1,\r\n-                ((FetchGroupTestObject) sm.fetchObjectField(field)).getId());\r\n-        } catch (junit.framework.AssertionFailedError afe) {\r\n-            bug(623, afe, \"One to one mappings do not work with custom \"\r\n-                + \"fetch groups\");\r\n-        }\r\n-    }\r\n-\r\n-    protected void checkObject(OpenJPAEntityManager pm,\r\n-        FetchGroupTestObject o, boolean a, boolean b,\r\n-        boolean c, boolean d, boolean e, boolean f) {\r\n-        OpenJPAStateManager sm = getStateManager(o, pm);\r\n-        BitSet loaded = sm.getLoaded();\r\n-\r\n-        FieldMetaData[] fmds = sm.getMetaData().getFields();\r\n-        int i = 0;\r\n-        for (; i < fmds.length; i++) {\r\n-            if (fmds[i].getName().equals(\"a\"))\r\n-                assertEquals(a, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"b\"))\r\n-                assertEquals(b, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"c\"))\r\n-                assertEquals(c, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"d\"))\r\n-                assertEquals(d, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"e\"))\r\n-                assertEquals(e, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"f\"))\r\n-                assertEquals(f, loaded.get(i));\r\n-        }\r\n-    }\r\n-\r\n-    protected void checkChildObject(OpenJPAEntityManager pm,\r\n-        FetchGroupTestObjectChild o, boolean a, boolean b,\r\n-        boolean c, boolean d, boolean e, boolean f, boolean childA,\r\n-        boolean childB, boolean childC, boolean childD) {\r\n-        checkObject(pm, o, a, b, c, d, e, f);\r\n-\r\n-        OpenJPAStateManager sm = getStateManager(o, pm);\r\n-        BitSet loaded = sm.getLoaded();\r\n-\r\n-        FieldMetaData[] fmds = sm.getMetaData().getFields();\r\n-        int i = 0;\r\n-        for (; i < fmds.length; i++) {\r\n-            if (fmds[i].getName().equals(\"childA\"))\r\n-                assertEquals(childA, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"childB\"))\r\n-                assertEquals(childB, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"childC\"))\r\n-                assertEquals(childC, loaded.get(i));\r\n-            else if (fmds[i].getName().equals(\"childD\"))\r\n-                assertEquals(childD, loaded.get(i));\r\n-        }\r\n-    }\r\n-\r\n-    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\r\n-        return pm.find(FetchGroupTestObject.class, oid1);\r\n-    }\r\n-\r\n-    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\r\n-        return pm.find(FetchGroupTestObject.class, oid2);\r\n-    }\r\n-\r\n-    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\r\n-        return pm.find(FetchGroupTestObjectChild.class, oidc1);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that named fetch groups actually bring in the\r\n-     * managed object.\r\n-     */\r\n-    public void testFetchGroupInstantiated() {\r\n-        deleteAll(AttachA.class);\r\n-        deleteAll(AttachB.class);\r\n-        deleteAll(AttachC.class);\r\n-        deleteAll(AttachD.class);\r\n-        deleteAll(AttachE.class);\r\n-        deleteAll(AttachF.class);\r\n-\r\n-        OpenJPAEntityManager pm;\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        AttachE e = new AttachE();\r\n-        AttachB b = new AttachB();\r\n-        e.setB(b);\r\n-        pm.persist(e);\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        Object ob;\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        assertSize(0, pm.getManagedObjects());\r\n-        ob = pm.createExtent(AttachE.class, true).iterator().next();\r\n-        // make sure relation is not loaded\r\n-        assertSize(1, pm.getManagedObjects());\r\n-        rollbackTx(pm);\r\n-        endEm(pm);\r\n-\r\n-        pm = getPM();\r\n-        startTx(pm);\r\n-        // now make sure we load relations\r\n-        pm.getFetchPlan().addFetchGroup(\"all\");\r\n-        assertSize(0, pm.getManagedObjects());\r\n-        ob = pm.createExtent(AttachE.class, true).iterator().next();\r\n-        // make sure relation is loaded\r\n-        assertSize(2, pm.getManagedObjects());\r\n-        rollbackTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * TestFetchGroups.java\n+ *\n+ * Created on October 10, 2006, 5:46 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachA;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachB;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachC;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachD;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachE;\n+import org.apache.openjpa.persistence.kernel.common.apps.AttachF;\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\n+\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+\n+public class TestFetchGroups extends BaseKernelTest {\n+\n+    private int oid1;\n+    private int oid2;\n+    private int oidc1;\n+\n+    public TestFetchGroups(String s) {\n+        super(s);\n+    }\n+\n+    /**\n+     * Creates a new instance of TestFetchGroups\n+     */\n+    public TestFetchGroups() {\n+    }\n+\n+    public void setUp() {\n+        deleteAll(FetchGroupTestObject.class);\n+\n+        FetchGroupTestObject o1 = new FetchGroupTestObject();\n+        // the value that 'a' is set to is important -- TestFetchGroupsExtent\n+        // and TestFetchGroupsQuery rely on this\n+        o1.setA(5);\n+        o1.setB(\"foo\");\n+        //o1.setC (new BigInteger (89));\n+        o1.setD(new Date());\n+        o1.setE(\"e-foo\");\n+        o1.setF(\"f-foo\");\n+\n+        FetchGroupTestObject o2 = new FetchGroupTestObject();\n+        // the value that 'a' is set to is important -- TestFetchGroupsExtent\n+        // and TestFetchGroupsQuery rely on this\n+        o2.setA(3);\n+        o2.setB(\"bar\");\n+        //o2.setC (new BigInteger (13));\n+        o2.setD(new Date());\n+        o2.setE(\"e-bar\");\n+        o2.setF(\"f-bar\");\n+        o2.setG(o1);\n+        o2.setH(o1);\n+\n+        FetchGroupTestObjectChild c1 = new FetchGroupTestObjectChild();\n+        // the value that 'a' is set to is important -- TestFetchGroupsExtent\n+        // and TestFetchGroupsQuery rely on this\n+        c1.setA(4);\n+        c1.setB(\"child\");\n+        c1.setD(new Date());\n+        c1.setE(\"e-baz\");\n+        c1.setF(\"f-baz\");\n+        c1.setG(o1);\n+        c1.setH(o1);\n+        c1.setChildA(1);\n+        c1.setChildB(2);\n+        c1.setChildC(3);\n+        c1.setChildD(4);\n+\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+\n+        pm.persist(o1);\n+        pm.persist(o2);\n+        pm.persist(c1);\n+        endTx(pm);\n+\n+        oid1 = o1.getId();\n+        oid2 = o2.getId();\n+        oidc1 = c1.getId();\n+\n+        endEm(pm);\n+    }\n+\n+    public void testFetchGroupsFromConfiguration() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.FetchGroups\", \"default,fg1,fg2\");\n+        OpenJPAEntityManagerFactory factory = getEmf(props);\n+\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) factory.createEntityManager();\n+        checkGroups(pm, new String[]{ \"fg1\", \"fg2\" });\n+        factory.close();\n+    }\n+\n+    public void testFetchGroupsNoConfiguration() {\n+        OpenJPAEntityManager pm = getPM();\n+\n+        FetchGroupTestObject o1 = getO1(pm);\n+        FetchGroupTestObject o2 = getO2(pm);\n+\n+        // only field a should be loaded.\n+        checkObject(pm, o1, true, false, false, false, false, false);\n+\n+        // upon loading field b, fields c and d should also be loaded,\n+        // but e and f should not.\n+        o1.getB();\n+        checkObject(pm, o1, true, true, true, true, false, false);\n+\n+        // loading field h should not cause any of the others to be loaded.\n+        assertEquals(o1, o2.getH());\n+        checkObject(pm, o2, true, false, false, false, false, false);\n+\n+        // loading field g should cause e and f to be loaded.\n+        assertEquals(o1, o2.getG());\n+        checkObject(pm, o2, true, false, false, false, true, true);\n+    }\n+\n+    public void testRetrieveAll() {\n+        OpenJPAEntityManager pm = getPM();\n+\n+        FetchGroupTestObject o1 = getO1(pm);\n+        FetchGroupTestObject o2 = getO2(pm);\n+\n+        // only field a should be loaded.\n+        checkObject(pm, o1, true, false, false, false, false, false);\n+        checkObject(pm, o2, true, false, false, false, false, false);\n+\n+        // only field a should be loaded.\n+        pm.retrieve(o1);\n+        checkObject(pm, o1, true, false, false, false, false, false);\n+\n+        // Add groups 1 and 3 to the default fetch configuration.\n+        pm.getFetchPlan().addFetchGroup(\"g1\");\n+        pm.getFetchPlan().addFetchGroup(\"g3\");\n+\n+        // Retrieve o1's \"DFG\" which will actually do all configured\n+        // fetch groups.\n+        // DFG fields and fields in groups 1 and 3 should be loaded\n+        pm.retrieve(o1);\n+        checkObject(pm, o1, true, true, true, true, false, false);\n+    }\n+\n+    public void testFetchGroupConfiguration() {\n+        OpenJPAEntityManager pm = getPM();\n+        FetchPlan fetch = pm.getFetchPlan();\n+\n+        checkGroups(pm, new String[0]);\n+\n+        fetch.addFetchGroup(\"foo\");\n+        checkGroups(pm, new String[]{ \"foo\" });\n+\n+        fetch.addFetchGroup(\"bar\");\n+        fetch.addFetchGroup(\"baz\");\n+        checkGroups(pm, new String[]{ \"foo\", \"bar\", \"baz\" });\n+\n+        fetch.addFetchGroup(\"a\");\n+        fetch.addFetchGroup(\"b\");\n+        fetch.addFetchGroup(\"c\");\n+        fetch.addFetchGroup(\"d\");\n+        checkGroups(pm, new String[]\n+            { \"foo\", \"bar\", \"baz\", \"a\", \"b\", \"c\", \"d\" });\n+\n+        fetch.removeFetchGroup(\"bar\");\n+        checkGroups(pm, new String[]{ \"foo\", \"baz\", \"a\", \"b\", \"c\", \"d\" });\n+\n+        fetch.removeFetchGroup(\"baz\");\n+        fetch.removeFetchGroup(\"c\");\n+        checkGroups(pm, new String[]{ \"foo\", \"a\", \"b\", \"d\" });\n+\n+        fetch.clearFetchGroups().addFetchGroup(FetchPlan.GROUP_DEFAULT);\n+        checkGroups(pm, new String[0]);\n+    }\n+\n+    private void checkGroups(OpenJPAEntityManager pm, String[] groups) {\n+        HashSet groupSet = new HashSet(Arrays.asList(groups));\n+        groupSet.add(FetchPlan.GROUP_DEFAULT);\n+        assertEquals(\"groupSet dont match\", groupSet,\n+            new HashSet(pm.getFetchPlan().getFetchGroups()));\n+    }\n+\n+    public void testFetchGroupsChildWithConfiguration() {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.getFetchPlan().addFetchGroup(\"g1\");\n+        pm.getFetchPlan().addFetchGroup(\"g3\");\n+\n+        // get this so that h's value is loaded into cache.\n+        FetchGroupTestObject o1 = getO1(pm);\n+\n+        FetchGroupTestObjectChild c1 = getC1(pm);\n+\n+        // DFG fields and fields in groups 1 and 3 should be loaded\n+        checkChildObject(pm, c1, true, true, true, true, false, false,\n+            true, true, false, true);\n+\n+        // upon accessing field b, nothing should change.\n+        c1.getB();\n+        checkChildObject(pm, c1, true, true, true, true, false, false,\n+            true, true, false, true);\n+\n+        c1.getH();\n+    }\n+\n+    public void testFetchGroupsWithConfiguration() {\n+        OpenJPAEntityManager pm = getPM();\n+\n+        pm.getFetchPlan().addFetchGroup(\"g1\");\n+        pm.getFetchPlan().addFetchGroup(\"g3\");\n+\n+        FetchGroupTestObject o1 = getO1(pm);\n+        FetchGroupTestObject o2 = getO2(pm);\n+\n+        // DFG fields and fields in groups 1 and 3 should be loaded\n+        checkObject(pm, o1, true, true, true, true, false, false);\n+\n+        // upon accessing field b, nothing should change.\n+        o1.getB();\n+        checkObject(pm, o1, true, true, true, true, false, false);\n+\n+        // loading field h should not cause any of the others to be loaded.\n+        assertEquals(o1, o2.getH());\n+        checkObject(pm, o2, true, true, true, true, false, false);\n+\n+        // loading field g should cause e and f to be loaded.\n+        assertEquals(o1, o2.getG());\n+        checkObject(pm, o2, true, true, true, true, true, true);\n+    }\n+\n+    /**\n+     * Tests that relation fields are loaded immediately when\n+     * they are in one of the PM's configured fetch groups.\n+     */\n+    public void testRelationsLoaded() {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.getFetchPlan().addFetchGroup(\"g2\");\n+\n+        // note: important the o1 is *not* in pm's cache at this point, so that\n+        // we know it takes another datastore trip to get o1\n+\n+        // load o2 and retrieve its state manager\n+        OpenJPAStateManager sm = getStateManager(getO2(pm), pm);\n+        assertNotNull(\"SM is NULL\", sm);\n+\n+        // 'g' is the name of a 1-1 relation field to o1 in configured\n+        // fetch group 'g2'; make sure it is loaded\n+        int field = sm.getMetaData().getField(\"g\").getIndex();\n+        try {\n+            assertTrue(sm.getLoaded().get(field));\n+            assertEquals(oid1,\n+                ((FetchGroupTestObject) sm.fetchObjectField(field)).getId());\n+        } catch (junit.framework.AssertionFailedError afe) {\n+            bug(623, afe, \"One to one mappings do not work with custom \"\n+                + \"fetch groups\");\n+        }\n+    }\n+\n+    protected void checkObject(OpenJPAEntityManager pm,\n+        FetchGroupTestObject o, boolean a, boolean b,\n+        boolean c, boolean d, boolean e, boolean f) {\n+        OpenJPAStateManager sm = getStateManager(o, pm);\n+        BitSet loaded = sm.getLoaded();\n+\n+        FieldMetaData[] fmds = sm.getMetaData().getFields();\n+        int i = 0;\n+        for (; i < fmds.length; i++) {\n+            if (fmds[i].getName().equals(\"a\"))\n+                assertEquals(a, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"b\"))\n+                assertEquals(b, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"c\"))\n+                assertEquals(c, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"d\"))\n+                assertEquals(d, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"e\"))\n+                assertEquals(e, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"f\"))\n+                assertEquals(f, loaded.get(i));\n+        }\n+    }\n+\n+    protected void checkChildObject(OpenJPAEntityManager pm,\n+        FetchGroupTestObjectChild o, boolean a, boolean b,\n+        boolean c, boolean d, boolean e, boolean f, boolean childA,\n+        boolean childB, boolean childC, boolean childD) {\n+        checkObject(pm, o, a, b, c, d, e, f);\n+\n+        OpenJPAStateManager sm = getStateManager(o, pm);\n+        BitSet loaded = sm.getLoaded();\n+\n+        FieldMetaData[] fmds = sm.getMetaData().getFields();\n+        int i = 0;\n+        for (; i < fmds.length; i++) {\n+            if (fmds[i].getName().equals(\"childA\"))\n+                assertEquals(childA, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"childB\"))\n+                assertEquals(childB, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"childC\"))\n+                assertEquals(childC, loaded.get(i));\n+            else if (fmds[i].getName().equals(\"childD\"))\n+                assertEquals(childD, loaded.get(i));\n+        }\n+    }\n+\n+    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\n+        return pm.find(FetchGroupTestObject.class, oid1);\n+    }\n+\n+    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\n+        return pm.find(FetchGroupTestObject.class, oid2);\n+    }\n+\n+    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\n+        return pm.find(FetchGroupTestObjectChild.class, oidc1);\n+    }\n+\n+    /**\n+     * Tests that named fetch groups actually bring in the\n+     * managed object.\n+     */\n+    public void testFetchGroupInstantiated() {\n+        deleteAll(AttachA.class);\n+        deleteAll(AttachB.class);\n+        deleteAll(AttachC.class);\n+        deleteAll(AttachD.class);\n+        deleteAll(AttachE.class);\n+        deleteAll(AttachF.class);\n+\n+        OpenJPAEntityManager pm;\n+\n+        pm = getPM();\n+        startTx(pm);\n+        AttachE e = new AttachE();\n+        AttachB b = new AttachB();\n+        e.setB(b);\n+        pm.persist(e);\n+\n+        endTx(pm);\n+        endEm(pm);\n+\n+        Object ob;\n+\n+        pm = getPM();\n+        startTx(pm);\n+        assertSize(0, pm.getManagedObjects());\n+        ob = pm.createExtent(AttachE.class, true).iterator().next();\n+        // make sure relation is not loaded\n+        assertSize(1, pm.getManagedObjects());\n+        rollbackTx(pm);\n+        endEm(pm);\n+\n+        pm = getPM();\n+        startTx(pm);\n+        // now make sure we load relations\n+        pm.getFetchPlan().addFetchGroup(\"all\");\n+        assertSize(0, pm.getManagedObjects());\n+        ob = pm.createExtent(AttachE.class, true).iterator().next();\n+        // make sure relation is loaded\n+        assertSize(2, pm.getManagedObjects());\n+        rollbackTx(pm);\n+        endEm(pm);\n+    }\n+}\n  \n\\ No newline at end of file"},{"sha":"9823033d58260337036b72bcde19db4435d2a318","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsExtent.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,91 +1,91 @@\n-/*\r\n- * TestFetchGroupsExtent.java\r\n- *\r\n- * Created on October 12, 2006, 9:54 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.List;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\r\n-\r\n-import org.apache.openjpa.persistence.Extent;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestFetchGroupsExtent extends TestFetchGroups {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestFetchGroupsExtent\r\n-     */\r\n-    public TestFetchGroupsExtent() {\r\n-    }\r\n-\r\n-    public TestFetchGroupsExtent(String s) {\r\n-        super(s);\r\n-    }\r\n-\r\n-    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\r\n-        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\r\n-            true);\r\n-        List l = e.list();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 5\");\r\n-        q.setCandidateCollection(l);\r\n-\r\n-        return (FetchGroupTestObject)\r\n-            ((Collection) q.getResultList()).iterator().next();\r\n-    }\r\n-\r\n-    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\r\n-        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\r\n-            true);\r\n-        List l = e.list();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 3\");\r\n-        q.setCandidateCollection(l);\r\n-\r\n-        return (FetchGroupTestObject)\r\n-            ((Collection) q.getResultList()).iterator().next();\r\n-    }\r\n-\r\n-    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\r\n-        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\r\n-            true);\r\n-        List l = e.list();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"SELECT o FROM FetchGroupTestObjectChild o WHERE o.a = 4\");\r\n-        q.setCandidateCollection(l);\r\n-\r\n-        return (FetchGroupTestObjectChild)\r\n-            ((Collection) q.getResultList()).iterator().next();\r\n-    }\r\n-}\r\n+/*\n+ * TestFetchGroupsExtent.java\n+ *\n+ * Created on October 12, 2006, 9:54 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\n+\n+import org.apache.openjpa.persistence.Extent;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestFetchGroupsExtent extends TestFetchGroups {\n+\n+    /**\n+     * Creates a new instance of TestFetchGroupsExtent\n+     */\n+    public TestFetchGroupsExtent() {\n+    }\n+\n+    public TestFetchGroupsExtent(String s) {\n+        super(s);\n+    }\n+\n+    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\n+        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\n+            true);\n+        List l = e.list();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 5\");\n+        q.setCandidateCollection(l);\n+\n+        return (FetchGroupTestObject)\n+            ((Collection) q.getResultList()).iterator().next();\n+    }\n+\n+    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\n+        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\n+            true);\n+        List l = e.list();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 3\");\n+        q.setCandidateCollection(l);\n+\n+        return (FetchGroupTestObject)\n+            ((Collection) q.getResultList()).iterator().next();\n+    }\n+\n+    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\n+        Extent e = (Extent) pm.createExtent(FetchGroupTestObject.class,\n+            true);\n+        List l = e.list();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"SELECT o FROM FetchGroupTestObjectChild o WHERE o.a = 4\");\n+        q.setCandidateCollection(l);\n+\n+        return (FetchGroupTestObjectChild)\n+            ((Collection) q.getResultList()).iterator().next();\n+    }\n+}"},{"sha":"8c07d5aa75f122e513d25a674be4b00e47763c53","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchGroupsQuery.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * TestFetchGroupsQuery.java\r\n- *\r\n- * Created on October 12, 2006, 10:09 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.List;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestFetchGroupsQuery extends TestFetchGroups {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestFetchGroupsQuery\r\n-     */\r\n-    public TestFetchGroupsQuery() {\r\n-    }\r\n-\r\n-    public TestFetchGroupsQuery(String s) {\r\n-        super(s);\r\n-    }\r\n-\r\n-    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\r\n-//        OpenJPAQuery q = pm.createNativeQuery(\"a == 5\",FetchGroupTestObject.class);\r\n-//        return (FetchGroupTestObject)\r\n-//        ((Collection) q.getResultList()).iterator().next();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 5\");\r\n-        List l = q.getResultList();\r\n-\r\n-        return (FetchGroupTestObject) (l.iterator().next());\r\n-    }\r\n-\r\n-    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\r\n-//        OpenJPAQuery q = pm.createNativeQuery(\"a == 3\",FetchGroupTestObject.class);\r\n-//        return (FetchGroupTestObject)\r\n-//        ((Collection) q.getResultList()).iterator().next();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 3\");\r\n-        List l = q.getResultList();\r\n-\r\n-        return (FetchGroupTestObject) (l.iterator().next());\r\n-    }\r\n-\r\n-    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\r\n-//        OpenJPAQuery q = pm.createNativeQuery(\"a == 4\",FetchGroupTestObjectChild.class);\r\n-//        return (FetchGroupTestObjectChild)\r\n-//        ((Collection) q.getResultList()).iterator().next();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"SELECT o FROM FetchGroupTestObjectChild o WHERE o.a = 4\");\r\n-        List l = q.getResultList();\r\n-\r\n-        return (FetchGroupTestObjectChild) (l.iterator().next());\r\n-    }\r\n-}\r\n+/*\n+ * TestFetchGroupsQuery.java\n+ *\n+ * Created on October 12, 2006, 10:09 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.List;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject;\n+import org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestFetchGroupsQuery extends TestFetchGroups {\n+\n+    /**\n+     * Creates a new instance of TestFetchGroupsQuery\n+     */\n+    public TestFetchGroupsQuery() {\n+    }\n+\n+    public TestFetchGroupsQuery(String s) {\n+        super(s);\n+    }\n+\n+    protected FetchGroupTestObject getO1(OpenJPAEntityManager pm) {\n+//        OpenJPAQuery q = pm.createNativeQuery(\"a == 5\",FetchGroupTestObject.class);\n+//        return (FetchGroupTestObject)\n+//        ((Collection) q.getResultList()).iterator().next();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 5\");\n+        List l = q.getResultList();\n+\n+        return (FetchGroupTestObject) (l.iterator().next());\n+    }\n+\n+    protected FetchGroupTestObject getO2(OpenJPAEntityManager pm) {\n+//        OpenJPAQuery q = pm.createNativeQuery(\"a == 3\",FetchGroupTestObject.class);\n+//        return (FetchGroupTestObject)\n+//        ((Collection) q.getResultList()).iterator().next();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"SELECT o FROM FetchGroupTestObject o WHERE o.a = 3\");\n+        List l = q.getResultList();\n+\n+        return (FetchGroupTestObject) (l.iterator().next());\n+    }\n+\n+    protected FetchGroupTestObjectChild getC1(OpenJPAEntityManager pm) {\n+//        OpenJPAQuery q = pm.createNativeQuery(\"a == 4\",FetchGroupTestObjectChild.class);\n+//        return (FetchGroupTestObjectChild)\n+//        ((Collection) q.getResultList()).iterator().next();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"SELECT o FROM FetchGroupTestObjectChild o WHERE o.a = 4\");\n+        List l = q.getResultList();\n+\n+        return (FetchGroupTestObjectChild) (l.iterator().next());\n+    }\n+}"},{"sha":"207f7971c14d438dd27d49b15be16a1065f1bc51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","status":"modified","additions":526,"deletions":526,"changes":1052,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFetchPlan.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,526 +1,526 @@\n-/*\r\n- * TestFetchPlan.java\r\n- *\r\n- * Created on October 16, 2006, 3:02 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCAddress;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCCompany;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCCountry;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCDepartment;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCDirectory;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCEmployee;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCFile;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.PCPerson;\r\n-\r\n-import org.apache.openjpa.persistence.FetchPlan;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestFetchPlan extends BaseKernelTest {\r\n-\r\n-    static Object _rootDirId;\r\n-    static Object _rootCompanyId;\r\n-\r\n-    static final int MAX_DEPTH = 5; // Maximum depth of the directories\r\n-    static final int MAX_CHILD = 3; // Maximum number of files/directory\r\n-    static final String quote = \"\\\"\";\r\n-    private static boolean firstTime = true;\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestFetchPlan\r\n-     */\r\n-    public TestFetchPlan() {\r\n-    }\r\n-\r\n-    public TestFetchPlan(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    /**\r\n-     * Clears past data and creates new data for test.\r\n-     * Clear test data before and not <em>after</em> such that one can analyze\r\n-     * the database for test failures.\r\n-     */\r\n-    public void setUp() throws Exception {\r\n-        if (firstTime) {\r\n-            firstTime = false;\r\n-            clearTestData();\r\n-            createTestData();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Create a directory tree of MAX_DEPTH with each directory having a single\r\n-     * directory and MAX_CHILD files.\r\n-     * Creates typical Employee-Department-Company-Address instances.\r\n-     *\r\n-     * @return the persitent identifier of the root directory.\r\n-     */\r\n-    void createTestData() {\r\n-        // create a tree of directories with files in them\r\n-        PCDirectory rootDir = new PCDirectory(getDirectoryName(0));\r\n-        PCDirectory parent = rootDir;\r\n-        for (int i = 1; i <= MAX_DEPTH; i++) {\r\n-            PCDirectory dir = new PCDirectory(getDirectoryName(i));\r\n-            parent.add(dir);\r\n-\r\n-            for (int j = 0; j < MAX_CHILD; j++)\r\n-                parent.add(getFileName(j));\r\n-\r\n-            parent = dir;\r\n-        }\r\n-\r\n-        // create a graph\r\n-        //      | ---address-country\r\n-        //      |\r\n-        //  company-dept-employee-address-country\r\n-        //\r\n-        PCCountry country1 = new PCCountry(\"100\", \"Employee 1 Country\");\r\n-        PCCountry country2 = new PCCountry(\"200\", \"Employee 2 Country\");\r\n-        PCCountry ccountry = new PCCountry(\"300\", \"Company Country\");\r\n-\r\n-        PCCompany company = new PCCompany(\"Company\");\r\n-\r\n-        PCDepartment dept1 = new PCDepartment(\"Department1\");\r\n-        PCDepartment dept2 = new PCDepartment(\"Department2\");\r\n-\r\n-        PCEmployee emp1 = new PCEmployee(\"Employee1\");\r\n-        PCEmployee emp2 = new PCEmployee(\"Employee2\");\r\n-\r\n-        PCAddress addr1 = new PCAddress(\"Street1\", \"city1\", country1);\r\n-        PCAddress addr2 = new PCAddress(\"Street2\", \"city2\", country2);\r\n-        PCAddress caddr = new PCAddress(\"Street3\", \"city3\", ccountry);\r\n-\r\n-        dept1.addEmployee(emp1);\r\n-        dept2.addEmployee(emp2);\r\n-\r\n-        company.addDepartment(dept1);\r\n-        company.addDepartment(dept2);\r\n-\r\n-        company.setAddress(caddr);\r\n-\r\n-        emp1.setAddress(addr1);\r\n-        emp2.setAddress(addr2);\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(rootDir);\r\n-        pm.persist(company);\r\n-//        _rootDirId     = pm.getObjectId(rootDir);\r\n-        _rootDirId = rootDir.getId();\r\n-        assertNotNull(_rootDirId);\r\n-//        _rootCompanyId = pm.getObjectId(company);\r\n-        _rootCompanyId = company.getId();\r\n-        assertNotNull(_rootCompanyId);\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * Test that the single valued field (_parent) is not traversed when the\r\n-     * fecth group selects only the _name field.\r\n-     */\r\n-    public void testZeroRecursionDepthSingleValuedField() {\r\n-        genericTestForSingleValuedRecursiveField(\"name\", 4, 0);\r\n-    }\r\n-\r\n-    /**\r\n-     * Test that the single valued field (_parent) is traversed once and only\r\n-     * once when the fecth group selects the _parent field with recursion depth\r\n-     * of 1 (default).\r\n-     */\r\n-    public void testOneRecursionDepthSingleValuedField() {\r\n-        genericTestForSingleValuedRecursiveField(\"name+parent\", 4, 1);\r\n-    }\r\n-\r\n-    /**\r\n-     * Test that the single valued field (_parent) is traversed twice and only\r\n-     * twice when the fecth group selects the _parent field with recursion depth\r\n-     * of 2.\r\n-     */\r\n-    public void testTwoRecursionDepthSingleValuedField() {\r\n-        genericTestForSingleValuedRecursiveField(\"name+parent+grandparent\",\r\n-            4, 2);\r\n-    }\r\n-\r\n-    public void testThreeRecursionDepthSingleValuedField() {\r\n-        genericTestForSingleValuedRecursiveField\r\n-            (\"name+parent+grandparent+greatgrandparent\", 4, 3);\r\n-    }\r\n-\r\n-    public void testInfiniteRecursionDepthSingleValuedField() {\r\n-        genericTestForSingleValuedRecursiveField(\"allparents\", 4, -1);\r\n-    }\r\n-\r\n-    /**\r\n-     * Generically tests recursive traversal of single-valued parent field.\r\n-     *\r\n-     * @param plan a plan that fetches L parents and no children\r\n-     * @param rd the recursion depth of directory from the root\r\n-     * @param fd the fetch depth = number of parents fetched\r\n-     */\r\n-    public void genericTestForSingleValuedRecursiveField(String plan, int rd,\r\n-        int fd) {\r\n-        PCDirectory result = queryDirectoryWithPlan(plan, rd, fd);\r\n-\r\n-        checkParents(result, rd, fd);\r\n-\r\n-        Object children = PCDirectory.reflect(result, \"_children\");\r\n-        assertNull(children);\r\n-    }\r\n-\r\n-    /**\r\n-     * Query to obtain a single directory at the given depth.\r\n-     * The directory name is constructed by the depth it occurs (d0 for root,\r\n-     * d1 for depth 1 and so on).<BR>\r\n-     * Checks the result for for matching name and size of the result (must\r\n-     * be one).\r\n-     *\r\n-     * @param plan name of a fetch plan\r\n-     * @param depth depth of the directory to be queried\r\n-     * @return the selected directory.\r\n-     */\r\n-    PCDirectory queryDirectoryWithPlan(String plan, int rd, int fd) {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.getFetchPlan().addFetchGroup(plan);\r\n-        if (fd != 0)\r\n-            pm.getFetchPlan().setMaxFetchDepth(fd);\r\n-\r\n-//        String filter = \"_name == \" + quoted(getDirectoryName(rd));        \r\n-//        OpenJPAQuery query = pm.createNativeQuery(filter,PCDirectory.class);\r\n-//        List result = (List) query.getResultList();\r\n-\r\n-        String query = \"SELECT o FROM PCDirectory o WHERE o._name = '\" +\r\n-            getDirectoryName(rd) + \"'\";\r\n-        List fresult = ((OpenJPAQuery) pm.createQuery(query)).getResultList();\r\n-\r\n-        assertEquals(1, fresult.size());\r\n-        PCDirectory dir = (PCDirectory) fresult.get(0);\r\n-\r\n-        return dir;\r\n-    }\r\n-\r\n-    /**\r\n-     * Asserts that\r\n-     * <LI> the given directory name matches the directory name at depth D.\r\n-     * <LI> the parents upto L recursion is not null and beyond is\r\n-     * null.\r\n-     *\r\n-     * @param result a directory to test\r\n-     * @param D depth at which this directory appears\r\n-     * @param L the number of live (fetched) parents. -1 denotes infinite\r\n-     */\r\n-    void checkParents(PCDirectory result, int D, int L) {\r\n-\r\n-        assertEquals(\"ge\", getDirectoryName(D),\r\n-            PCDirectory.reflect(result, \"_name\"));\r\n-        PCDirectory[] parents = getParents(result, D);\r\n-        int N = (L == -1) ? D : L;\r\n-        for (int i = 0; i < N; i++) {\r\n-            assertNotNull(i + \"-th parent at depth \" + D + \" is null\",\r\n-                parents[i]);\r\n-            assertEquals(getDirectoryName(D - i - 1),\r\n-                PCDirectory.reflect(parents[i], \"_name\"));\r\n-        }\r\n-        for (int i = N; i < D; i++)\r\n-            assertNull(i + \"-th parent at depth \" + D + \" is not null \" +\r\n-                parents[i], parents[i]);\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets an array of parents of the given directory. The zeroth element\r\n-     * is the parent of the given directory and (i+1)-th element is the\r\n-     * parent of the i-th element. Uses reflection to ensure that the\r\n-     * side-effect does not cause a database access for the field.\r\n-     *\r\n-     * @param dir a starting directory\r\n-     * @param depth depth to recurse. must be positive.\r\n-     * @return\r\n-     */\r\n-    PCDirectory[] getParents(PCDirectory dir, int depth) {\r\n-        PCDirectory[] result = new PCDirectory[depth];\r\n-        PCDirectory current = dir;\r\n-        for (int i = 0; i < depth; i++) {\r\n-            result[i] = (PCDirectory) PCDirectory.reflect(current, \"_parent\");\r\n-            current = result[i];\r\n-        }\r\n-        return result;\r\n-    }\r\n-\r\n-    /**\r\n-     * Checks that the first L elements of the given array is non-null and\r\n-     * the rest are null.\r\n-     *\r\n-     * @param depth\r\n-     */\r\n-    void assertNullParent(PCDirectory[] parents, int L) {\r\n-        for (int i = 0; i < L; i++)\r\n-            assertNotNull(parents[i]);\r\n-        for (int i = L; i < parents.length; i++)\r\n-            assertNull(parents[i]);\r\n-    }\r\n-\r\n-    String getDirectoryName(int depth) {\r\n-        return \"d\" + depth;\r\n-    }\r\n-\r\n-    String getFileName(int depth) {\r\n-        return \"f\" + depth;\r\n-    }\r\n-\r\n-    String quoted(String s) {\r\n-        return quote + s + quote;\r\n-    }\r\n-\r\n-    /**\r\n-     * Defines a fetch plan that has several fetch groups to traverse a chain\r\n-     * of relationships.\r\n-     * After getting the root by an extent query, checks (by reflection) that\r\n-     * all the relations in the chain are fetched.\r\n-     * The fetch depth is kept infinite, so what would be fetched is essentially\r\n-     * controlled by the fetch groups.\r\n-     */\r\n-    public void testRelationTraversal() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        FetchPlan plan = pm.getFetchPlan();\r\n-        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n-        plan.addFetchGroup(\"employee.department\");\r\n-        plan.addFetchGroup(\"department.company\");\r\n-        plan.addFetchGroup(\"company.address\");\r\n-        plan.addFetchGroup(\"address.country\");\r\n-\r\n-        Iterator employees = pm.createExtent(PCEmployee.class, true).iterator();\r\n-        while (employees.hasNext()) {\r\n-            PCEmployee emp = (PCEmployee) employees.next();\r\n-\r\n-            PCDepartment dept = (PCDepartment) PCEmployee.reflect(emp,\r\n-                \"department\");\r\n-            assertNotNull(dept);\r\n-\r\n-            PCCompany company = (PCCompany) PCDepartment.reflect(dept,\r\n-                \"company\");\r\n-            assertNotNull(company);\r\n-\r\n-            PCAddress addr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n-            assertNotNull(addr);\r\n-\r\n-            PCCountry country = (PCCountry) PCAddress.reflect(addr, \"country\");\r\n-            assertNotNull(country);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Defines a fetch plan that has several fetch groups to traverse a chain\r\n-     * of relationships but truncated at the last relation.\r\n-     * After getting the root by an extent query, checks (by reflection) that\r\n-     * all but the last relation in the chain are fetched.\r\n-     * The fetch depth is kept infinite, so what would be fetched is essentially\r\n-     * controlled by the fetch groups.\r\n-     */\r\n-    public void testRelationTraversalTruncated() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        FetchPlan plan = pm.getFetchPlan();\r\n-        pm.getFetchPlan().setMaxFetchDepth(-1);\r\n-        plan.addFetchGroup(\"employee.department\");\r\n-        plan.addFetchGroup(\"department.company\");\r\n-        plan.addFetchGroup(\"company.address\");\r\n-\r\n-        Iterator employees = pm.createExtent(PCEmployee.class, true).iterator();\r\n-        while (employees.hasNext()) {\r\n-            PCEmployee emp = (PCEmployee) employees.next();\r\n-\r\n-            PCDepartment dept = (PCDepartment) PCEmployee.reflect(emp,\r\n-                \"department\");\r\n-            assertNotNull(dept);\r\n-\r\n-            PCCompany company = (PCCompany) PCDepartment.reflect(dept,\r\n-                \"company\");\r\n-            assertNotNull(company);\r\n-\r\n-            PCAddress addr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n-            assertNotNull(addr);\r\n-\r\n-            PCCountry country = (PCCountry) PCAddress.reflect(addr, \"country\");\r\n-            assertNull(country);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets a Compnay object by getObjectById() method as opposed to query.\r\n-     * The active fetch groups should bring in the multi-valued relationships.\r\n-     * The address->country relationship can be reached in two alternate\r\n-     * paths -- one as company->address->country and the other is\r\n-     * company->department->employee->address->country.\r\n-     * Though active fetch groups allow both the paths -- the max fetch depth\r\n-     * is set such that the shorter path is taken but not the longer one.\r\n-     * Hence the company's address->country should be loaded but not the\r\n-     * employee's.\r\n-     */\r\n-    public void testRelationTraversalWithCompanyAsRoot() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        FetchPlan plan = pm.getFetchPlan();\r\n-\r\n-        plan.setMaxFetchDepth(2);\r\n-        plan.addFetchGroup(\"company.departments\");\r\n-        plan.addFetchGroup(\"company.address\");\r\n-        plan.addFetchGroup(\"department.employees\");\r\n-        plan.addFetchGroup(\"person.address\");\r\n-        plan.addFetchGroup(\"address.country\");\r\n-\r\n-        PCCompany company =\r\n-            (PCCompany) pm.find(PCCompany.class, _rootCompanyId);\r\n-        Set departments = (Set) PCCompany.reflect(company, \"departments\");\r\n-        assertNotNull(\"department is null\", departments);\r\n-        assertEquals(\"exp. depart size is not 2\", 2, departments.size());\r\n-        PCDepartment dept = (PCDepartment) departments.iterator().next();\r\n-        assertNotNull(\"dept is null\", dept);\r\n-        Set employees = (Set) PCDepartment.reflect(dept, \"employees\");\r\n-        assertNotNull(\"employees is null\", employees);\r\n-        assertEquals(1, employees.size());\r\n-        PCEmployee emp = (PCEmployee) employees.iterator().next();\r\n-        assertNotNull(\"emp is not null\", emp);\r\n-        PCAddress eaddr = (PCAddress) PCPerson.reflect(emp, \"address\");\r\n-        PCAddress caddr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n-        assertNull(\"eaddr is not null\", eaddr);\r\n-        assertNotNull(\"caddr is null\", caddr);\r\n-        PCCountry country = (PCCountry) PCAddress.reflect(caddr, \"country\");\r\n-        assertNotNull(\"country is null\", country);\r\n-    }\r\n-\r\n-    /**\r\n-     * Same as above but the root compnay instance is detached.\r\n-     */\r\n-    public void testDetachedRelationTraversalWithCompanyAsRoot() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        FetchPlan plan = pm.getFetchPlan();\r\n-        pm.getFetchPlan().setMaxFetchDepth(2);\r\n-        plan.addFetchGroup(\"company.departments\");\r\n-        plan.addFetchGroup(\"company.address\");\r\n-        plan.addFetchGroup(\"department.employees\");\r\n-        plan.addFetchGroup(\"person.address\");\r\n-        plan.addFetchGroup(\"address.country\");\r\n-\r\n-        PCCompany company1 =\r\n-            (PCCompany) pm.find(PCCompany.class, _rootCompanyId);\r\n-\r\n-        PCCompany company = (PCCompany) pm.detach(company1);\r\n-        assertTrue(\"company is equal company1\", company != company1);\r\n-        Set departments = (Set) PCCompany.reflect(company, \"departments\");\r\n-        assertNotNull(\"department is null\", departments);\r\n-        assertEquals(\"department size is not 2\", 2, departments.size());\r\n-        PCDepartment dept = (PCDepartment) departments.iterator().next();\r\n-        assertNotNull(\"dept is null\", dept);\r\n-        Set employees = (Set) PCDepartment.reflect(dept, \"employees\");\r\n-        assertNotNull(\"employee is null\", employees);\r\n-        assertEquals(\"employees size not 1\", 1, employees.size());\r\n-        PCEmployee emp = (PCEmployee) employees.iterator().next();\r\n-        assertNotNull(\"emp is null\", emp);\r\n-        PCAddress eaddr = (PCAddress) PCPerson.reflect(emp, \"address\");\r\n-        PCAddress caddr = (PCAddress) PCCompany.reflect(company, \"address\");\r\n-        assertNull(\"eaddr is not null\", eaddr);\r\n-        assertNotNull(\"caddr is null\", caddr);\r\n-        PCCountry country = (PCCountry) PCAddress.reflect(caddr, \"country\");\r\n-        assertNotNull(\"country is null\", country);\r\n-    }\r\n-\r\n-    public void testDefaultFetchGroup() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-\r\n-        String squery =\r\n-            \"SELECT DISTINCT o FROM PCEmployee o WHERE o.name = 'Employee1'\";\r\n-        OpenJPAQuery q = pm.createQuery(squery);\r\n-\r\n-        //FIXME jthomas\r\n-        PCEmployee person = (PCEmployee) q.getSingleResult();\r\n-        assertEquals(\"Exp. String is not employee1\", \"Employee1\",\r\n-            PCPerson.reflect(person, \"name\"));\r\n-    }\r\n-\r\n-    public void testDefaultFetchGroupExistsByDefault() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        assertTrue(\"pm does not contain default fetchplan\",\r\n-            pm.getFetchPlan().getFetchGroups().contains(\r\n-                FetchPlan.GROUP_DEFAULT));\r\n-    }\r\n-\r\n-    public void testDefaultFetchGroupCanBeRemoved() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        assertTrue(\"does not contain default fetchplan\",\r\n-            pm.getFetchPlan().getFetchGroups().contains(\r\n-                FetchPlan.GROUP_DEFAULT));\r\n-\r\n-        pm.getFetchPlan().removeFetchGroup(FetchPlan.GROUP_DEFAULT);\r\n-        assertFalse(\"does contain default fetchplan\",\r\n-            pm.getFetchPlan().getFetchGroups().contains(\r\n-                FetchPlan.GROUP_DEFAULT));\r\n-\r\n-        OpenJPAEntityManager pm2 = getPM();\r\n-        assertTrue(\"pm2 does not contain default fetchplan\",\r\n-            pm2.getFetchPlan().getFetchGroups().contains(\r\n-                FetchPlan.GROUP_DEFAULT));\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    private void clearTestData() throws Exception {\r\n-//        OpenJPAEntityManagerFactory pmf =(OpenJPAEntityManagerFactory) getEmf();\r\n-//        OpenJPAConfiguration conf=pmf.getConfiguration();\r\n-//        \r\n-//        Class.forName(pmf.getConfiguration().getConnection2DriverName());\r\n-//        String url=conf.getConnection2URL();\r\n-//        String user=conf.getConnection2UserName();\r\n-//        String pass=conf.getConnection2Password();\r\n-//        \r\n-//        Connection con = DriverManager.getConnection(\r\n-//                url,\r\n-//                user,\r\n-//                pass);\r\n-//        con.setAutoCommit(true);\r\n-//        con.prepareStatement(\"DELETE FROM PCDIRECTORY\").executeUpdate();\r\n-//        con.prepareStatement(\"DELETE FROM PCFILE\").executeUpdate();\r\n-//        con.prepareStatement(\"DELETE FROM PCPERSON\").executeUpdate();\r\n-//        con.prepareStatement(\"DELETE FROM PCDEPARTMENT\").executeUpdate();\r\n-//        con.prepareStatement(\"DELETE FROM PCCOMPANY\").executeUpdate();\r\n-//        con.prepareStatement(\"DELETE FROM PCADDRESS\").executeUpdate();\r\n-//        con.prepareStatement(\"DELETE FROM PCCOUNTRY\").executeUpdate();\r\n-\r\n-        deleteAll(PCDirectory.class);\r\n-        deleteAll(PCFile.class);\r\n-        deleteAll(PCPerson.class);\r\n-        deleteAll(PCDepartment.class);\r\n-        deleteAll(PCCompany.class);\r\n-        deleteAll(PCAddress.class);\r\n-        deleteAll(PCCountry.class);\r\n-        deleteAll(PCEmployee.class);\r\n-    }\r\n-}\r\n+/*\n+ * TestFetchPlan.java\n+ *\n+ * Created on October 16, 2006, 3:02 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.PCAddress;\n+import org.apache.openjpa.persistence.kernel.common.apps.PCCompany;\n+import org.apache.openjpa.persistence.kernel.common.apps.PCCountry;\n+import org.apache.openjpa.persistence.kernel.common.apps.PCDepartment;\n+import org.apache.openjpa.persistence.kernel.common.apps.PCDirectory;\n+import org.apache.openjpa.persistence.kernel.common.apps.PCEmployee;\n+import org.apache.openjpa.persistence.kernel.common.apps.PCFile;\n+import org.apache.openjpa.persistence.kernel.common.apps.PCPerson;\n+\n+import org.apache.openjpa.persistence.FetchPlan;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestFetchPlan extends BaseKernelTest {\n+\n+    static Object _rootDirId;\n+    static Object _rootCompanyId;\n+\n+    static final int MAX_DEPTH = 5; // Maximum depth of the directories\n+    static final int MAX_CHILD = 3; // Maximum number of files/directory\n+    static final String quote = \"\\\"\";\n+    private static boolean firstTime = true;\n+\n+    /**\n+     * Creates a new instance of TestFetchPlan\n+     */\n+    public TestFetchPlan() {\n+    }\n+\n+    public TestFetchPlan(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Clears past data and creates new data for test.\n+     * Clear test data before and not <em>after</em> such that one can analyze\n+     * the database for test failures.\n+     */\n+    public void setUp() throws Exception {\n+        if (firstTime) {\n+            firstTime = false;\n+            clearTestData();\n+            createTestData();\n+        }\n+    }\n+\n+    /**\n+     * Create a directory tree of MAX_DEPTH with each directory having a single\n+     * directory and MAX_CHILD files.\n+     * Creates typical Employee-Department-Company-Address instances.\n+     *\n+     * @return the persitent identifier of the root directory.\n+     */\n+    void createTestData() {\n+        // create a tree of directories with files in them\n+        PCDirectory rootDir = new PCDirectory(getDirectoryName(0));\n+        PCDirectory parent = rootDir;\n+        for (int i = 1; i <= MAX_DEPTH; i++) {\n+            PCDirectory dir = new PCDirectory(getDirectoryName(i));\n+            parent.add(dir);\n+\n+            for (int j = 0; j < MAX_CHILD; j++)\n+                parent.add(getFileName(j));\n+\n+            parent = dir;\n+        }\n+\n+        // create a graph\n+        //      | ---address-country\n+        //      |\n+        //  company-dept-employee-address-country\n+        //\n+        PCCountry country1 = new PCCountry(\"100\", \"Employee 1 Country\");\n+        PCCountry country2 = new PCCountry(\"200\", \"Employee 2 Country\");\n+        PCCountry ccountry = new PCCountry(\"300\", \"Company Country\");\n+\n+        PCCompany company = new PCCompany(\"Company\");\n+\n+        PCDepartment dept1 = new PCDepartment(\"Department1\");\n+        PCDepartment dept2 = new PCDepartment(\"Department2\");\n+\n+        PCEmployee emp1 = new PCEmployee(\"Employee1\");\n+        PCEmployee emp2 = new PCEmployee(\"Employee2\");\n+\n+        PCAddress addr1 = new PCAddress(\"Street1\", \"city1\", country1);\n+        PCAddress addr2 = new PCAddress(\"Street2\", \"city2\", country2);\n+        PCAddress caddr = new PCAddress(\"Street3\", \"city3\", ccountry);\n+\n+        dept1.addEmployee(emp1);\n+        dept2.addEmployee(emp2);\n+\n+        company.addDepartment(dept1);\n+        company.addDepartment(dept2);\n+\n+        company.setAddress(caddr);\n+\n+        emp1.setAddress(addr1);\n+        emp2.setAddress(addr2);\n+\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        pm.persist(rootDir);\n+        pm.persist(company);\n+//        _rootDirId     = pm.getObjectId(rootDir);\n+        _rootDirId = rootDir.getId();\n+        assertNotNull(_rootDirId);\n+//        _rootCompanyId = pm.getObjectId(company);\n+        _rootCompanyId = company.getId();\n+        assertNotNull(_rootCompanyId);\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * Test that the single valued field (_parent) is not traversed when the\n+     * fecth group selects only the _name field.\n+     */\n+    public void testZeroRecursionDepthSingleValuedField() {\n+        genericTestForSingleValuedRecursiveField(\"name\", 4, 0);\n+    }\n+\n+    /**\n+     * Test that the single valued field (_parent) is traversed once and only\n+     * once when the fecth group selects the _parent field with recursion depth\n+     * of 1 (default).\n+     */\n+    public void testOneRecursionDepthSingleValuedField() {\n+        genericTestForSingleValuedRecursiveField(\"name+parent\", 4, 1);\n+    }\n+\n+    /**\n+     * Test that the single valued field (_parent) is traversed twice and only\n+     * twice when the fecth group selects the _parent field with recursion depth\n+     * of 2.\n+     */\n+    public void testTwoRecursionDepthSingleValuedField() {\n+        genericTestForSingleValuedRecursiveField(\"name+parent+grandparent\",\n+            4, 2);\n+    }\n+\n+    public void testThreeRecursionDepthSingleValuedField() {\n+        genericTestForSingleValuedRecursiveField\n+            (\"name+parent+grandparent+greatgrandparent\", 4, 3);\n+    }\n+\n+    public void testInfiniteRecursionDepthSingleValuedField() {\n+        genericTestForSingleValuedRecursiveField(\"allparents\", 4, -1);\n+    }\n+\n+    /**\n+     * Generically tests recursive traversal of single-valued parent field.\n+     *\n+     * @param plan a plan that fetches L parents and no children\n+     * @param rd the recursion depth of directory from the root\n+     * @param fd the fetch depth = number of parents fetched\n+     */\n+    public void genericTestForSingleValuedRecursiveField(String plan, int rd,\n+        int fd) {\n+        PCDirectory result = queryDirectoryWithPlan(plan, rd, fd);\n+\n+        checkParents(result, rd, fd);\n+\n+        Object children = PCDirectory.reflect(result, \"_children\");\n+        assertNull(children);\n+    }\n+\n+    /**\n+     * Query to obtain a single directory at the given depth.\n+     * The directory name is constructed by the depth it occurs (d0 for root,\n+     * d1 for depth 1 and so on).<BR>\n+     * Checks the result for for matching name and size of the result (must\n+     * be one).\n+     *\n+     * @param plan name of a fetch plan\n+     * @param depth depth of the directory to be queried\n+     * @return the selected directory.\n+     */\n+    PCDirectory queryDirectoryWithPlan(String plan, int rd, int fd) {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.getFetchPlan().addFetchGroup(plan);\n+        if (fd != 0)\n+            pm.getFetchPlan().setMaxFetchDepth(fd);\n+\n+//        String filter = \"_name == \" + quoted(getDirectoryName(rd));        \n+//        OpenJPAQuery query = pm.createNativeQuery(filter,PCDirectory.class);\n+//        List result = (List) query.getResultList();\n+\n+        String query = \"SELECT o FROM PCDirectory o WHERE o._name = '\" +\n+            getDirectoryName(rd) + \"'\";\n+        List fresult = ((OpenJPAQuery) pm.createQuery(query)).getResultList();\n+\n+        assertEquals(1, fresult.size());\n+        PCDirectory dir = (PCDirectory) fresult.get(0);\n+\n+        return dir;\n+    }\n+\n+    /**\n+     * Asserts that\n+     * <LI> the given directory name matches the directory name at depth D.\n+     * <LI> the parents upto L recursion is not null and beyond is\n+     * null.\n+     *\n+     * @param result a directory to test\n+     * @param D depth at which this directory appears\n+     * @param L the number of live (fetched) parents. -1 denotes infinite\n+     */\n+    void checkParents(PCDirectory result, int D, int L) {\n+\n+        assertEquals(\"ge\", getDirectoryName(D),\n+            PCDirectory.reflect(result, \"_name\"));\n+        PCDirectory[] parents = getParents(result, D);\n+        int N = (L == -1) ? D : L;\n+        for (int i = 0; i < N; i++) {\n+            assertNotNull(i + \"-th parent at depth \" + D + \" is null\",\n+                parents[i]);\n+            assertEquals(getDirectoryName(D - i - 1),\n+                PCDirectory.reflect(parents[i], \"_name\"));\n+        }\n+        for (int i = N; i < D; i++)\n+            assertNull(i + \"-th parent at depth \" + D + \" is not null \" +\n+                parents[i], parents[i]);\n+    }\n+\n+    /**\n+     * Gets an array of parents of the given directory. The zeroth element\n+     * is the parent of the given directory and (i+1)-th element is the\n+     * parent of the i-th element. Uses reflection to ensure that the\n+     * side-effect does not cause a database access for the field.\n+     *\n+     * @param dir a starting directory\n+     * @param depth depth to recurse. must be positive.\n+     * @return\n+     */\n+    PCDirectory[] getParents(PCDirectory dir, int depth) {\n+        PCDirectory[] result = new PCDirectory[depth];\n+        PCDirectory current = dir;\n+        for (int i = 0; i < depth; i++) {\n+            result[i] = (PCDirectory) PCDirectory.reflect(current, \"_parent\");\n+            current = result[i];\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Checks that the first L elements of the given array is non-null and\n+     * the rest are null.\n+     *\n+     * @param depth\n+     */\n+    void assertNullParent(PCDirectory[] parents, int L) {\n+        for (int i = 0; i < L; i++)\n+            assertNotNull(parents[i]);\n+        for (int i = L; i < parents.length; i++)\n+            assertNull(parents[i]);\n+    }\n+\n+    String getDirectoryName(int depth) {\n+        return \"d\" + depth;\n+    }\n+\n+    String getFileName(int depth) {\n+        return \"f\" + depth;\n+    }\n+\n+    String quoted(String s) {\n+        return quote + s + quote;\n+    }\n+\n+    /**\n+     * Defines a fetch plan that has several fetch groups to traverse a chain\n+     * of relationships.\n+     * After getting the root by an extent query, checks (by reflection) that\n+     * all the relations in the chain are fetched.\n+     * The fetch depth is kept infinite, so what would be fetched is essentially\n+     * controlled by the fetch groups.\n+     */\n+    public void testRelationTraversal() {\n+        OpenJPAEntityManager pm = getPM();\n+        FetchPlan plan = pm.getFetchPlan();\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\n+        plan.addFetchGroup(\"employee.department\");\n+        plan.addFetchGroup(\"department.company\");\n+        plan.addFetchGroup(\"company.address\");\n+        plan.addFetchGroup(\"address.country\");\n+\n+        Iterator employees = pm.createExtent(PCEmployee.class, true).iterator();\n+        while (employees.hasNext()) {\n+            PCEmployee emp = (PCEmployee) employees.next();\n+\n+            PCDepartment dept = (PCDepartment) PCEmployee.reflect(emp,\n+                \"department\");\n+            assertNotNull(dept);\n+\n+            PCCompany company = (PCCompany) PCDepartment.reflect(dept,\n+                \"company\");\n+            assertNotNull(company);\n+\n+            PCAddress addr = (PCAddress) PCCompany.reflect(company, \"address\");\n+            assertNotNull(addr);\n+\n+            PCCountry country = (PCCountry) PCAddress.reflect(addr, \"country\");\n+            assertNotNull(country);\n+        }\n+    }\n+\n+    /**\n+     * Defines a fetch plan that has several fetch groups to traverse a chain\n+     * of relationships but truncated at the last relation.\n+     * After getting the root by an extent query, checks (by reflection) that\n+     * all but the last relation in the chain are fetched.\n+     * The fetch depth is kept infinite, so what would be fetched is essentially\n+     * controlled by the fetch groups.\n+     */\n+    public void testRelationTraversalTruncated() {\n+        OpenJPAEntityManager pm = getPM();\n+        FetchPlan plan = pm.getFetchPlan();\n+        pm.getFetchPlan().setMaxFetchDepth(-1);\n+        plan.addFetchGroup(\"employee.department\");\n+        plan.addFetchGroup(\"department.company\");\n+        plan.addFetchGroup(\"company.address\");\n+\n+        Iterator employees = pm.createExtent(PCEmployee.class, true).iterator();\n+        while (employees.hasNext()) {\n+            PCEmployee emp = (PCEmployee) employees.next();\n+\n+            PCDepartment dept = (PCDepartment) PCEmployee.reflect(emp,\n+                \"department\");\n+            assertNotNull(dept);\n+\n+            PCCompany company = (PCCompany) PCDepartment.reflect(dept,\n+                \"company\");\n+            assertNotNull(company);\n+\n+            PCAddress addr = (PCAddress) PCCompany.reflect(company, \"address\");\n+            assertNotNull(addr);\n+\n+            PCCountry country = (PCCountry) PCAddress.reflect(addr, \"country\");\n+            assertNull(country);\n+        }\n+    }\n+\n+    /**\n+     * Gets a Compnay object by getObjectById() method as opposed to query.\n+     * The active fetch groups should bring in the multi-valued relationships.\n+     * The address->country relationship can be reached in two alternate\n+     * paths -- one as company->address->country and the other is\n+     * company->department->employee->address->country.\n+     * Though active fetch groups allow both the paths -- the max fetch depth\n+     * is set such that the shorter path is taken but not the longer one.\n+     * Hence the company's address->country should be loaded but not the\n+     * employee's.\n+     */\n+    public void testRelationTraversalWithCompanyAsRoot() {\n+        OpenJPAEntityManager pm = getPM();\n+        FetchPlan plan = pm.getFetchPlan();\n+\n+        plan.setMaxFetchDepth(2);\n+        plan.addFetchGroup(\"company.departments\");\n+        plan.addFetchGroup(\"company.address\");\n+        plan.addFetchGroup(\"department.employees\");\n+        plan.addFetchGroup(\"person.address\");\n+        plan.addFetchGroup(\"address.country\");\n+\n+        PCCompany company =\n+            (PCCompany) pm.find(PCCompany.class, _rootCompanyId);\n+        Set departments = (Set) PCCompany.reflect(company, \"departments\");\n+        assertNotNull(\"department is null\", departments);\n+        assertEquals(\"exp. depart size is not 2\", 2, departments.size());\n+        PCDepartment dept = (PCDepartment) departments.iterator().next();\n+        assertNotNull(\"dept is null\", dept);\n+        Set employees = (Set) PCDepartment.reflect(dept, \"employees\");\n+        assertNotNull(\"employees is null\", employees);\n+        assertEquals(1, employees.size());\n+        PCEmployee emp = (PCEmployee) employees.iterator().next();\n+        assertNotNull(\"emp is not null\", emp);\n+        PCAddress eaddr = (PCAddress) PCPerson.reflect(emp, \"address\");\n+        PCAddress caddr = (PCAddress) PCCompany.reflect(company, \"address\");\n+        assertNull(\"eaddr is not null\", eaddr);\n+        assertNotNull(\"caddr is null\", caddr);\n+        PCCountry country = (PCCountry) PCAddress.reflect(caddr, \"country\");\n+        assertNotNull(\"country is null\", country);\n+    }\n+\n+    /**\n+     * Same as above but the root compnay instance is detached.\n+     */\n+    public void testDetachedRelationTraversalWithCompanyAsRoot() {\n+        OpenJPAEntityManager pm = getPM();\n+        FetchPlan plan = pm.getFetchPlan();\n+        pm.getFetchPlan().setMaxFetchDepth(2);\n+        plan.addFetchGroup(\"company.departments\");\n+        plan.addFetchGroup(\"company.address\");\n+        plan.addFetchGroup(\"department.employees\");\n+        plan.addFetchGroup(\"person.address\");\n+        plan.addFetchGroup(\"address.country\");\n+\n+        PCCompany company1 =\n+            (PCCompany) pm.find(PCCompany.class, _rootCompanyId);\n+\n+        PCCompany company = (PCCompany) pm.detach(company1);\n+        assertTrue(\"company is equal company1\", company != company1);\n+        Set departments = (Set) PCCompany.reflect(company, \"departments\");\n+        assertNotNull(\"department is null\", departments);\n+        assertEquals(\"department size is not 2\", 2, departments.size());\n+        PCDepartment dept = (PCDepartment) departments.iterator().next();\n+        assertNotNull(\"dept is null\", dept);\n+        Set employees = (Set) PCDepartment.reflect(dept, \"employees\");\n+        assertNotNull(\"employee is null\", employees);\n+        assertEquals(\"employees size not 1\", 1, employees.size());\n+        PCEmployee emp = (PCEmployee) employees.iterator().next();\n+        assertNotNull(\"emp is null\", emp);\n+        PCAddress eaddr = (PCAddress) PCPerson.reflect(emp, \"address\");\n+        PCAddress caddr = (PCAddress) PCCompany.reflect(company, \"address\");\n+        assertNull(\"eaddr is not null\", eaddr);\n+        assertNotNull(\"caddr is null\", caddr);\n+        PCCountry country = (PCCountry) PCAddress.reflect(caddr, \"country\");\n+        assertNotNull(\"country is null\", country);\n+    }\n+\n+    public void testDefaultFetchGroup() {\n+        OpenJPAEntityManager pm = getPM();\n+\n+        String squery =\n+            \"SELECT DISTINCT o FROM PCEmployee o WHERE o.name = 'Employee1'\";\n+        OpenJPAQuery q = pm.createQuery(squery);\n+\n+        //FIXME jthomas\n+        PCEmployee person = (PCEmployee) q.getSingleResult();\n+        assertEquals(\"Exp. String is not employee1\", \"Employee1\",\n+            PCPerson.reflect(person, \"name\"));\n+    }\n+\n+    public void testDefaultFetchGroupExistsByDefault() {\n+        OpenJPAEntityManager pm = getPM();\n+        assertTrue(\"pm does not contain default fetchplan\",\n+            pm.getFetchPlan().getFetchGroups().contains(\n+                FetchPlan.GROUP_DEFAULT));\n+    }\n+\n+    public void testDefaultFetchGroupCanBeRemoved() {\n+        OpenJPAEntityManager pm = getPM();\n+        assertTrue(\"does not contain default fetchplan\",\n+            pm.getFetchPlan().getFetchGroups().contains(\n+                FetchPlan.GROUP_DEFAULT));\n+\n+        pm.getFetchPlan().removeFetchGroup(FetchPlan.GROUP_DEFAULT);\n+        assertFalse(\"does contain default fetchplan\",\n+            pm.getFetchPlan().getFetchGroups().contains(\n+                FetchPlan.GROUP_DEFAULT));\n+\n+        OpenJPAEntityManager pm2 = getPM();\n+        assertTrue(\"pm2 does not contain default fetchplan\",\n+            pm2.getFetchPlan().getFetchGroups().contains(\n+                FetchPlan.GROUP_DEFAULT));\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    private void clearTestData() throws Exception {\n+//        OpenJPAEntityManagerFactory pmf =(OpenJPAEntityManagerFactory) getEmf();\n+//        OpenJPAConfiguration conf=pmf.getConfiguration();\n+//        \n+//        Class.forName(pmf.getConfiguration().getConnection2DriverName());\n+//        String url=conf.getConnection2URL();\n+//        String user=conf.getConnection2UserName();\n+//        String pass=conf.getConnection2Password();\n+//        \n+//        Connection con = DriverManager.getConnection(\n+//                url,\n+//                user,\n+//                pass);\n+//        con.setAutoCommit(true);\n+//        con.prepareStatement(\"DELETE FROM PCDIRECTORY\").executeUpdate();\n+//        con.prepareStatement(\"DELETE FROM PCFILE\").executeUpdate();\n+//        con.prepareStatement(\"DELETE FROM PCPERSON\").executeUpdate();\n+//        con.prepareStatement(\"DELETE FROM PCDEPARTMENT\").executeUpdate();\n+//        con.prepareStatement(\"DELETE FROM PCCOMPANY\").executeUpdate();\n+//        con.prepareStatement(\"DELETE FROM PCADDRESS\").executeUpdate();\n+//        con.prepareStatement(\"DELETE FROM PCCOUNTRY\").executeUpdate();\n+\n+        deleteAll(PCDirectory.class);\n+        deleteAll(PCFile.class);\n+        deleteAll(PCPerson.class);\n+        deleteAll(PCDepartment.class);\n+        deleteAll(PCCompany.class);\n+        deleteAll(PCAddress.class);\n+        deleteAll(PCCountry.class);\n+        deleteAll(PCEmployee.class);\n+    }\n+}"},{"sha":"6f684b6f5b9af814ef66775e1b051a160e43e534","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","status":"modified","additions":383,"deletions":383,"changes":766,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,383 +1,383 @@\n-/*\r\n- * TestFieldRange.java\r\n- *\r\n- * Created on October 12, 2006, 10:14 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.io.Serializable;\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.Date;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n-import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\r\n-import junit.framework.Assert;\r\n-import junit.framework.AssertionFailedError;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestFieldRange extends BaseKernelTest {\r\n-\r\n-    protected static String RANDOM_STRING =\r\n-        \"This is my test String with all \"\r\n-            + \"kinds of wierd characters: \"\r\n-            + \"!@@#$\\\\%^&\\\"*()-=\\\\|\\\"\\\"\\\"\\\"\\\"+_/?.>,<~`\"\r\n-            + \"'''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n-            + \"''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n-            + \"!@@#$\\\\%^&\\\"*()-=\\\\|+_/?.>,<~`\";\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestFieldRange\r\n-     */\r\n-    public TestFieldRange() {\r\n-    }\r\n-\r\n-    public TestFieldRange(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        super.setUp();\r\n-        deleteAll(AllFieldTypesTest.class);\r\n-    }\r\n-\r\n-    public void testSaveState()\r\n-        throws Exception {\r\n-        allFieldSaveState(\r\n-            (int) 259645,\r\n-            (short) 50849,\r\n-            (long) 2349847982L,\r\n-            (float) 43273423.0234723F,\r\n-            (double) 34678.02384723D,\r\n-            (byte) -120,\r\n-            (boolean) true,\r\n-            (char) '%',\r\n-            (Date) new Date(),\r\n-            (Serializable) new StringBuffer(5000),\r\n-            (String) RANDOM_STRING,\r\n-            randomBigInteger(),\r\n-            randomBigDecimal());\r\n-    }\r\n-\r\n-    /**\r\n-     * Test to make sure all the numeric fields can accept the maximum\r\n-     * values for their data size. Note that we subtract one from\r\n-     * each of the values because some databases (like InstantDB)\r\n-     * may consider them to be equivalent to NULL.\r\n-     * FixMe: Hangs for some mysterious reason. aokeke\r\n-     */\r\n-\r\n-//    public void testLargeNumbers()\r\n-//    throws Exception {\r\n-//        try {\r\n-//            allFieldSaveState(\r\n-//                    (int) (Integer.MAX_VALUE - 1),\r\n-//                    (short) (Short.MAX_VALUE - 1),\r\n-//                    (long) (Long.MAX_VALUE - 1l),\r\n-//                    (float) (Float.MAX_VALUE - 1.0f),\r\n-//                    (double) (Double.MAX_VALUE - 1.0d),\r\n-//                    (byte) (Byte.MAX_VALUE),\r\n-//                    (boolean) true,\r\n-//                    (char) 'q',\r\n-//                    (Date) new Date(),\r\n-//                    (Serializable) new StringBuffer(5000),\r\n-//                    (String) RANDOM_STRING,\r\n-//                    randomBigInteger(),\r\n-//                    randomBigDecimal());\r\n-//        } catch (Throwable e) {\r\n-//            bug(3, e, \"doubles and floats\");\r\n-//        }\r\n-//    }\r\n-\r\n-    /**\r\n-     * Test to make sure all the numeric fields can be set to\r\n-     * very low values. We add one to the minimim value because\r\n-     * some databases (such as InstantDB) consider the MIN_VALUE\r\n-     * to be equivalent to null. This is arguably a bug, but\r\n-     * not a killer one.\r\n-     */\r\n-    public void testLargeNumbersNegative()\r\n-        throws Exception {\r\n-        allFieldSaveState(\r\n-            (int) (Integer.MIN_VALUE + 1),\r\n-            (short) (Short.MIN_VALUE + 1),\r\n-            (long) (Long.MIN_VALUE + 1l),\r\n-            (float) (Float.MIN_VALUE + 1.0f),\r\n-            (double) (Double.MIN_VALUE + 1.0d),\r\n-            (byte) (Byte.MIN_VALUE + 1),\r\n-            (boolean) true,\r\n-            (char) 'q',\r\n-            (Date) new Date(),\r\n-            (Serializable) new StringBuffer(5000),\r\n-            (String) RANDOM_STRING,\r\n-            randomBigInteger(),\r\n-            randomBigDecimal());\r\n-    }\r\n-\r\n-    public void testDoubleAndFloatPrecision()\r\n-        throws Exception {\r\n-        allFieldSaveState(\r\n-            (int) (0),\r\n-            (short) (0),\r\n-            (long) (0l),\r\n-            (float) (10.0f / 3.0f),\r\n-            (double) (100.0d / 3.0d),\r\n-            (byte) (0),\r\n-            (boolean) true,\r\n-            (char) 'q',\r\n-            (Date) new Date(),\r\n-            (Serializable) new StringBuffer(5000),\r\n-            (String) RANDOM_STRING,\r\n-            randomBigInteger(),\r\n-            randomBigDecimal());\r\n-    }\r\n-\r\n-    public void testZeroNumbers()\r\n-        throws Exception {\r\n-        allFieldSaveState(\r\n-            (int) (0),\r\n-            (short) (0),\r\n-            (long) (0l),\r\n-            (float) (0.0f),\r\n-            (double) (0.0d),\r\n-            (byte) (0),\r\n-            (boolean) true,\r\n-            (char) 'q',\r\n-            (Date) new Date(),\r\n-            (Serializable) new StringBuffer(5000),\r\n-            (String) RANDOM_STRING,\r\n-            new BigInteger(\"0\"),\r\n-            new BigDecimal(\"0.0\"));\r\n-    }\r\n-\r\n-    public void testLowDate()\r\n-        throws Exception {\r\n-        dateTest(0);\r\n-    }\r\n-\r\n-    public void testCurDate()\r\n-        throws Exception {\r\n-        dateTest(System.currentTimeMillis());\r\n-    }\r\n-\r\n-    public void testHighDate()\r\n-        throws Exception {\r\n-        try {\r\n-            // postgres will sometimes store the String \"invalid\" if the\r\n-            // date is too high, which will prevent us from even reading\r\n-            // the records that contain this corrupt value (thus breaking\r\n-            // any subsequent attempts to read instances of AllFieldTypesTest).\r\n-            // An Example of a date like this is:\r\n-            //   (Timestamp) 2038-02-08 22:20:07.65\r\n-            if (getCurrentPlatform() ==\r\n-                AbstractTestCase.Platform.POSTGRESQL)\r\n-                fail(\"Postgres can't even try to store a high date\");\r\n-\r\n-            dateTest(System.currentTimeMillis() * 2);\r\n-        } catch (AssertionFailedError e) {\r\n-            bug(6, e, \"Some data stores cannot deal \"\r\n-                + \"with very high dates\");\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Some date instances that have been known to have problems.\r\n-     */\r\n-    public void testProblematicDates()\r\n-        throws Exception {\r\n-        dateTest(1047744639);        // pointbase had probs with this\r\n-    }\r\n-\r\n-    private void dateTest(long l)\r\n-        throws Exception {\r\n-        Date d = new Date(l);\r\n-\r\n-        allFieldSaveState(\r\n-            (int) 10,\r\n-            (short) 10,\r\n-            (long) 10,\r\n-            (float) 0,\r\n-            (double) 0,\r\n-            (byte) 10,\r\n-            (boolean) true,\r\n-            (char) 'x',\r\n-            (Date) d,\r\n-            (Serializable) new StringBuffer(10),\r\n-            (String) RANDOM_STRING,\r\n-            new BigInteger(\"0\"),\r\n-            new BigDecimal(\"0\"));\r\n-    }\r\n-\r\n-    public void allFieldSaveState(int testint, short testshort, long testlong,\r\n-        float testfloat, double testdouble, byte testbyte,\r\n-        boolean testboolean, char testchar, Date testDate,\r\n-        Serializable testObject, String testString,\r\n-        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n-        throws Exception {\r\n-        try {\r\n-            allFieldSaveStateInternal(testint, testshort, testlong,\r\n-                testfloat, testdouble, testbyte,\r\n-                testboolean, testchar, testDate,\r\n-                testObject, testString, testBigInteger, testBigDecimal);\r\n-        } finally {\r\n-            try {\r\n-                // make *sure* we do not leave a transaction open\r\n-                rollbackTx(getPM(true, false));\r\n-            } catch (Throwable t) {\r\n-\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public void allFieldSaveStateInternal(\r\n-        int testint, short testshort, long testlong,\r\n-        float testfloat, double testdouble, byte testbyte,\r\n-        boolean testboolean, char testchar, Date testDate,\r\n-        Serializable testObject, String testString,\r\n-        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-\r\n-        AllFieldTypesTest test = new AllFieldTypesTest();\r\n-        pm.persist(test);\r\n-        Object testID = pm.getObjectId(test);\r\n-\r\n-        test.setTestint(testint);\r\n-        test.setTestlong(testlong);\r\n-        test.setTestdouble(testdouble);\r\n-        test.setTestshort(testshort);\r\n-        test.setTestfloat(testfloat);\r\n-        test.setTestbyte(testbyte);\r\n-        test.setTestboolean(testboolean);\r\n-        test.setTestchar(testchar);\r\n-        test.setTestString(testString);\r\n-        test.setTestDate(testDate);\r\n-        test.setTestObject(testObject);\r\n-        test.setTestBigInteger(testBigInteger);\r\n-        test.setTestBigDecimal(testBigDecimal);\r\n-\r\n-        try {\r\n-            endTx(pm);\r\n-        } catch (Exception e) {\r\n-            if (e instanceof Exception &&\r\n-                ((Exception) e).getMessage().indexOf\r\n-                    (\"Maximum length is 8000\") != -1) {\r\n-                bug(AbstractTestCase.Platform.SQLSERVER, 5, e,\r\n-                    \"SQLServer cannot deal\"\r\n-                        + \" with numbers with more than 8000 digits\");\r\n-            } else {\r\n-                throw e;\r\n-            }\r\n-        }\r\n-\r\n-        endEm(pm);\r\n-\r\n-        //assertPersistent (test, true, false, false, false);\r\n-\r\n-        pm = getPM(true, false);\r\n-        startTx(pm);\r\n-\r\n-        AllFieldTypesTest retrievedObject =\r\n-            (AllFieldTypesTest) pm.find(AllFieldTypesTest.class, testID);\r\n-\r\n-        assertEquals(\"Field type int\", testint,\r\n-            retrievedObject.getTestint());\r\n-        assertEquals(\"Field type short\", testshort,\r\n-            retrievedObject.getTestshort());\r\n-        assertEquals(\"Field type boolean\", testboolean,\r\n-            retrievedObject.getTestboolean());\r\n-        assertEquals(\"Field type char\", testchar,\r\n-            retrievedObject.getTestchar());\r\n-        assertEquals(\"Field type long\", testlong,\r\n-            retrievedObject.getTestlong());\r\n-\r\n-        assertEquals(\"Field type byte\", testbyte,\r\n-            retrievedObject.getTestbyte());\r\n-        assertEquals(\"Field type String\", testString,\r\n-            retrievedObject.getTestString());\r\n-\r\n-        int i1 = (int) (testDate.getTime() / 1000);\r\n-        int i2 = (int) (retrievedObject.getTestDate().getTime() / 1000);\r\n-\r\n-        int testDateDay = testDate.getDay();\r\n-        int testDateMonth = testDate.getMonth();\r\n-        int testDateYear = testDate.getYear();\r\n-\r\n-        int retrievedObjectDay = retrievedObject.getTestDate().getDay();\r\n-        int retrievedObjectMonth = retrievedObject.getTestDate().getMonth();\r\n-        int retrievedObjectYear = retrievedObject.getTestDate().getYear();\r\n-\r\n-        System.out.println(\"i1 : \" + i1 + \"\\ni2 : \" + i2);\r\n-\r\n-        //CR346162. In this CR, it was stated that @Temporal(DATE) fields will be equal for year, month, day but not for hours, \r\n-        //minutes, seconds. So, we removed the time check and checked only for the equality of day, month and year\r\n-\r\n-        /* assertEquals(\"Field type Date: \"\r\n-     + testDate.getTime() + \"!=\"\r\n-     + retrievedObject.getTestDate().getTime()\r\n-     + \"[\" + new Date(testDate.getTime()) + \" != \"\r\n-     + new Date(retrievedObject.getTestDate().getTime()) + \"]\",\r\n-     (int) (testDate.getTime() / 1000),\r\n-     (int) (retrievedObject.getTestDate().getTime() / 1000));*/\r\n-\r\n-        if ((testDateDay != retrievedObjectDay) ||\r\n-            (testDateMonth != retrievedObjectMonth) ||\r\n-            (testDateYear != retrievedObjectYear)) {\r\n-            Assert.fail(\r\n-                \"Field type Date not stored properly. One or more of the components of the date (day, month or year) do not match. \\n\" +\r\n-                    \" Value that should be stored : \" + testDate.toGMTString() +\r\n-                    \". \\nValue that is actually\" +\r\n-                    \"stored : \" + retrievedObject.getTestDate().toGMTString());\r\n-        }\r\n-        //assertEquals (\"Field type Object\", testObject,\r\n-        //retrievedObject.getTestObject ());\r\n-        assertEquals(\"Field type BigInteger\", testBigInteger,\r\n-            retrievedObject.getTestBigInteger());\r\n-\r\n-        try {\r\n-            assertEquals(\"Field type BigDecimal (BigInteger part)\",\r\n-                testBigDecimal.toBigInteger(),\r\n-                retrievedObject.getTestBigDecimal().toBigInteger());\r\n-\r\n-            assertEquals(\"Field type BigDecimal\",\r\n-                testBigDecimal,\r\n-                retrievedObject.getTestBigDecimal());\r\n-\r\n-            assertEquals(\"Field type float\", testfloat,\r\n-                retrievedObject.getTestfloat(), 0.01f);\r\n-            assertEquals(\"Field type double\", testdouble,\r\n-                retrievedObject.getTestdouble(), 0.01d);\r\n-        } catch (AssertionFailedError afe) {\r\n-            bug(3, afe,\r\n-                \"Doubles and Floats lose precision in some data stores\");\r\n-        }\r\n-\r\n-        rollbackTx(pm);\r\n-    }\r\n-}\r\n+/*\n+ * TestFieldRange.java\n+ *\n+ * Created on October 12, 2006, 10:14 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\n+import org.apache.openjpa.persistence.common.utils.AbstractTestCase;\n+import junit.framework.Assert;\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestFieldRange extends BaseKernelTest {\n+\n+    protected static String RANDOM_STRING =\n+        \"This is my test String with all \"\n+            + \"kinds of wierd characters: \"\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|\\\"\\\"\\\"\\\"\\\"+_/?.>,<~`\"\n+            + \"'''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n+            + \"''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|+_/?.>,<~`\";\n+\n+    /**\n+     * Creates a new instance of TestFieldRange\n+     */\n+    public TestFieldRange() {\n+    }\n+\n+    public TestFieldRange(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        super.setUp();\n+        deleteAll(AllFieldTypesTest.class);\n+    }\n+\n+    public void testSaveState()\n+        throws Exception {\n+        allFieldSaveState(\n+            (int) 259645,\n+            (short) 50849,\n+            (long) 2349847982L,\n+            (float) 43273423.0234723F,\n+            (double) 34678.02384723D,\n+            (byte) -120,\n+            (boolean) true,\n+            (char) '%',\n+            (Date) new Date(),\n+            (Serializable) new StringBuffer(5000),\n+            (String) RANDOM_STRING,\n+            randomBigInteger(),\n+            randomBigDecimal());\n+    }\n+\n+    /**\n+     * Test to make sure all the numeric fields can accept the maximum\n+     * values for their data size. Note that we subtract one from\n+     * each of the values because some databases (like InstantDB)\n+     * may consider them to be equivalent to NULL.\n+     * FixMe: Hangs for some mysterious reason. aokeke\n+     */\n+\n+//    public void testLargeNumbers()\n+//    throws Exception {\n+//        try {\n+//            allFieldSaveState(\n+//                    (int) (Integer.MAX_VALUE - 1),\n+//                    (short) (Short.MAX_VALUE - 1),\n+//                    (long) (Long.MAX_VALUE - 1l),\n+//                    (float) (Float.MAX_VALUE - 1.0f),\n+//                    (double) (Double.MAX_VALUE - 1.0d),\n+//                    (byte) (Byte.MAX_VALUE),\n+//                    (boolean) true,\n+//                    (char) 'q',\n+//                    (Date) new Date(),\n+//                    (Serializable) new StringBuffer(5000),\n+//                    (String) RANDOM_STRING,\n+//                    randomBigInteger(),\n+//                    randomBigDecimal());\n+//        } catch (Throwable e) {\n+//            bug(3, e, \"doubles and floats\");\n+//        }\n+//    }\n+\n+    /**\n+     * Test to make sure all the numeric fields can be set to\n+     * very low values. We add one to the minimim value because\n+     * some databases (such as InstantDB) consider the MIN_VALUE\n+     * to be equivalent to null. This is arguably a bug, but\n+     * not a killer one.\n+     */\n+    public void testLargeNumbersNegative()\n+        throws Exception {\n+        allFieldSaveState(\n+            (int) (Integer.MIN_VALUE + 1),\n+            (short) (Short.MIN_VALUE + 1),\n+            (long) (Long.MIN_VALUE + 1l),\n+            (float) (Float.MIN_VALUE + 1.0f),\n+            (double) (Double.MIN_VALUE + 1.0d),\n+            (byte) (Byte.MIN_VALUE + 1),\n+            (boolean) true,\n+            (char) 'q',\n+            (Date) new Date(),\n+            (Serializable) new StringBuffer(5000),\n+            (String) RANDOM_STRING,\n+            randomBigInteger(),\n+            randomBigDecimal());\n+    }\n+\n+    public void testDoubleAndFloatPrecision()\n+        throws Exception {\n+        allFieldSaveState(\n+            (int) (0),\n+            (short) (0),\n+            (long) (0l),\n+            (float) (10.0f / 3.0f),\n+            (double) (100.0d / 3.0d),\n+            (byte) (0),\n+            (boolean) true,\n+            (char) 'q',\n+            (Date) new Date(),\n+            (Serializable) new StringBuffer(5000),\n+            (String) RANDOM_STRING,\n+            randomBigInteger(),\n+            randomBigDecimal());\n+    }\n+\n+    public void testZeroNumbers()\n+        throws Exception {\n+        allFieldSaveState(\n+            (int) (0),\n+            (short) (0),\n+            (long) (0l),\n+            (float) (0.0f),\n+            (double) (0.0d),\n+            (byte) (0),\n+            (boolean) true,\n+            (char) 'q',\n+            (Date) new Date(),\n+            (Serializable) new StringBuffer(5000),\n+            (String) RANDOM_STRING,\n+            new BigInteger(\"0\"),\n+            new BigDecimal(\"0.0\"));\n+    }\n+\n+    public void testLowDate()\n+        throws Exception {\n+        dateTest(0);\n+    }\n+\n+    public void testCurDate()\n+        throws Exception {\n+        dateTest(System.currentTimeMillis());\n+    }\n+\n+    public void testHighDate()\n+        throws Exception {\n+        try {\n+            // postgres will sometimes store the String \"invalid\" if the\n+            // date is too high, which will prevent us from even reading\n+            // the records that contain this corrupt value (thus breaking\n+            // any subsequent attempts to read instances of AllFieldTypesTest).\n+            // An Example of a date like this is:\n+            //   (Timestamp) 2038-02-08 22:20:07.65\n+            if (getCurrentPlatform() ==\n+                AbstractTestCase.Platform.POSTGRESQL)\n+                fail(\"Postgres can't even try to store a high date\");\n+\n+            dateTest(System.currentTimeMillis() * 2);\n+        } catch (AssertionFailedError e) {\n+            bug(6, e, \"Some data stores cannot deal \"\n+                + \"with very high dates\");\n+        }\n+    }\n+\n+    /**\n+     * Some date instances that have been known to have problems.\n+     */\n+    public void testProblematicDates()\n+        throws Exception {\n+        dateTest(1047744639);        // pointbase had probs with this\n+    }\n+\n+    private void dateTest(long l)\n+        throws Exception {\n+        Date d = new Date(l);\n+\n+        allFieldSaveState(\n+            (int) 10,\n+            (short) 10,\n+            (long) 10,\n+            (float) 0,\n+            (double) 0,\n+            (byte) 10,\n+            (boolean) true,\n+            (char) 'x',\n+            (Date) d,\n+            (Serializable) new StringBuffer(10),\n+            (String) RANDOM_STRING,\n+            new BigInteger(\"0\"),\n+            new BigDecimal(\"0\"));\n+    }\n+\n+    public void allFieldSaveState(int testint, short testshort, long testlong,\n+        float testfloat, double testdouble, byte testbyte,\n+        boolean testboolean, char testchar, Date testDate,\n+        Serializable testObject, String testString,\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\n+        throws Exception {\n+        try {\n+            allFieldSaveStateInternal(testint, testshort, testlong,\n+                testfloat, testdouble, testbyte,\n+                testboolean, testchar, testDate,\n+                testObject, testString, testBigInteger, testBigDecimal);\n+        } finally {\n+            try {\n+                // make *sure* we do not leave a transaction open\n+                rollbackTx(getPM(true, false));\n+            } catch (Throwable t) {\n+\n+            }\n+        }\n+    }\n+\n+    public void allFieldSaveStateInternal(\n+        int testint, short testshort, long testlong,\n+        float testfloat, double testdouble, byte testbyte,\n+        boolean testboolean, char testchar, Date testDate,\n+        Serializable testObject, String testString,\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\n+        throws Exception {\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+\n+        AllFieldTypesTest test = new AllFieldTypesTest();\n+        pm.persist(test);\n+        Object testID = pm.getObjectId(test);\n+\n+        test.setTestint(testint);\n+        test.setTestlong(testlong);\n+        test.setTestdouble(testdouble);\n+        test.setTestshort(testshort);\n+        test.setTestfloat(testfloat);\n+        test.setTestbyte(testbyte);\n+        test.setTestboolean(testboolean);\n+        test.setTestchar(testchar);\n+        test.setTestString(testString);\n+        test.setTestDate(testDate);\n+        test.setTestObject(testObject);\n+        test.setTestBigInteger(testBigInteger);\n+        test.setTestBigDecimal(testBigDecimal);\n+\n+        try {\n+            endTx(pm);\n+        } catch (Exception e) {\n+            if (e instanceof Exception &&\n+                ((Exception) e).getMessage().indexOf\n+                    (\"Maximum length is 8000\") != -1) {\n+                bug(AbstractTestCase.Platform.SQLSERVER, 5, e,\n+                    \"SQLServer cannot deal\"\n+                        + \" with numbers with more than 8000 digits\");\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        endEm(pm);\n+\n+        //assertPersistent (test, true, false, false, false);\n+\n+        pm = getPM(true, false);\n+        startTx(pm);\n+\n+        AllFieldTypesTest retrievedObject =\n+            (AllFieldTypesTest) pm.find(AllFieldTypesTest.class, testID);\n+\n+        assertEquals(\"Field type int\", testint,\n+            retrievedObject.getTestint());\n+        assertEquals(\"Field type short\", testshort,\n+            retrievedObject.getTestshort());\n+        assertEquals(\"Field type boolean\", testboolean,\n+            retrievedObject.getTestboolean());\n+        assertEquals(\"Field type char\", testchar,\n+            retrievedObject.getTestchar());\n+        assertEquals(\"Field type long\", testlong,\n+            retrievedObject.getTestlong());\n+\n+        assertEquals(\"Field type byte\", testbyte,\n+            retrievedObject.getTestbyte());\n+        assertEquals(\"Field type String\", testString,\n+            retrievedObject.getTestString());\n+\n+        int i1 = (int) (testDate.getTime() / 1000);\n+        int i2 = (int) (retrievedObject.getTestDate().getTime() / 1000);\n+\n+        int testDateDay = testDate.getDay();\n+        int testDateMonth = testDate.getMonth();\n+        int testDateYear = testDate.getYear();\n+\n+        int retrievedObjectDay = retrievedObject.getTestDate().getDay();\n+        int retrievedObjectMonth = retrievedObject.getTestDate().getMonth();\n+        int retrievedObjectYear = retrievedObject.getTestDate().getYear();\n+\n+        System.out.println(\"i1 : \" + i1 + \"\\ni2 : \" + i2);\n+\n+        //CR346162. In this CR, it was stated that @Temporal(DATE) fields will be equal for year, month, day but not for hours, \n+        //minutes, seconds. So, we removed the time check and checked only for the equality of day, month and year\n+\n+        /* assertEquals(\"Field type Date: \"\n+     + testDate.getTime() + \"!=\"\n+     + retrievedObject.getTestDate().getTime()\n+     + \"[\" + new Date(testDate.getTime()) + \" != \"\n+     + new Date(retrievedObject.getTestDate().getTime()) + \"]\",\n+     (int) (testDate.getTime() / 1000),\n+     (int) (retrievedObject.getTestDate().getTime() / 1000));*/\n+\n+        if ((testDateDay != retrievedObjectDay) ||\n+            (testDateMonth != retrievedObjectMonth) ||\n+            (testDateYear != retrievedObjectYear)) {\n+            Assert.fail(\n+                \"Field type Date not stored properly. One or more of the components of the date (day, month or year) do not match. \\n\" +\n+                    \" Value that should be stored : \" + testDate.toGMTString() +\n+                    \". \\nValue that is actually\" +\n+                    \"stored : \" + retrievedObject.getTestDate().toGMTString());\n+        }\n+        //assertEquals (\"Field type Object\", testObject,\n+        //retrievedObject.getTestObject ());\n+        assertEquals(\"Field type BigInteger\", testBigInteger,\n+            retrievedObject.getTestBigInteger());\n+\n+        try {\n+            assertEquals(\"Field type BigDecimal (BigInteger part)\",\n+                testBigDecimal.toBigInteger(),\n+                retrievedObject.getTestBigDecimal().toBigInteger());\n+\n+            assertEquals(\"Field type BigDecimal\",\n+                testBigDecimal,\n+                retrievedObject.getTestBigDecimal());\n+\n+            assertEquals(\"Field type float\", testfloat,\n+                retrievedObject.getTestfloat(), 0.01f);\n+            assertEquals(\"Field type double\", testdouble,\n+                retrievedObject.getTestdouble(), 0.01d);\n+        } catch (AssertionFailedError afe) {\n+            bug(3, afe,\n+                \"Doubles and Floats lose precision in some data stores\");\n+        }\n+\n+        rollbackTx(pm);\n+    }\n+}"},{"sha":"9103fbf55eb47f406caa29ca10f5bf4fb069cb60","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","status":"modified","additions":232,"deletions":232,"changes":464,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldRange2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,232 +1,232 @@\n-/*\r\n- * TestFieldRange.java\r\n- *\r\n- * Created on October 12, 2006, 10:14 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.io.Serializable;\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.Date;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\r\n-import junit.framework.AssertionFailedError;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestFieldRange2 extends BaseKernelTest {\r\n-\r\n-    protected static String RANDOM_STRING =\r\n-        \"This is my test String with all \"\r\n-            + \"kinds of wierd characters: \"\r\n-            + \"!@@#$\\\\%^&\\\"*()-=\\\\|\\\"\\\"\\\"\\\"\\\"+_/?.>,<~`\"\r\n-            + \"'''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n-            + \"''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\r\n-            + \"!@@#$\\\\%^&\\\"*()-=\\\\|+_/?.>,<~`\";\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestFieldRange\r\n-     */\r\n-    public TestFieldRange2() {\r\n-    }\r\n-\r\n-    public TestFieldRange2(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        super.setUp();\r\n-        deleteAll(AllFieldTypesTest.class);\r\n-    }\r\n-\r\n-    public void testSaveState()\r\n-        throws Exception {\r\n-        allFieldSaveState(\r\n-            (int) 259645,\r\n-            (short) 50849,\r\n-            (long) 2349847982L,\r\n-            (float) 43273423.0234723F,\r\n-            (double) 34678.02384723D,\r\n-            (byte) -120,\r\n-            (boolean) true,\r\n-            (char) '%',\r\n-            (Date) new Date(),\r\n-            (Serializable) new StringBuffer(5000),\r\n-            (String) RANDOM_STRING,\r\n-            randomBigInteger(),\r\n-            randomBigDecimal());\r\n-    }\r\n-\r\n-    private void dateTest(long l)\r\n-        throws Exception {\r\n-        Date d = new Date(l);\r\n-\r\n-        allFieldSaveState(\r\n-            (int) 10,\r\n-            (short) 10,\r\n-            (long) 10,\r\n-            (float) 0,\r\n-            (double) 0,\r\n-            (byte) 10,\r\n-            (boolean) true,\r\n-            (char) 'x',\r\n-            (Date) d,\r\n-            (Serializable) new StringBuffer(10),\r\n-            (String) RANDOM_STRING,\r\n-            new BigInteger(\"0\"),\r\n-            new BigDecimal(\"0\"));\r\n-    }\r\n-\r\n-    public void allFieldSaveState(int testint, short testshort, long testlong,\r\n-        float testfloat, double testdouble, byte testbyte,\r\n-        boolean testboolean, char testchar, Date testDate,\r\n-        Serializable testObject, String testString,\r\n-        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n-        throws Exception {\r\n-        try {\r\n-            allFieldSaveStateInternal(testint, testshort, testlong,\r\n-                testfloat, testdouble, testbyte,\r\n-                testboolean, testchar, testDate,\r\n-                testObject, testString, testBigInteger, testBigDecimal);\r\n-        } finally {\r\n-            try {\r\n-                // make *sure* we do not leave a transaction open\r\n-                rollbackTx(getPM(true, false));\r\n-            } catch (Throwable t) {\r\n-\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public void allFieldSaveStateInternal(\r\n-        int testint, short testshort, long testlong,\r\n-        float testfloat, double testdouble, byte testbyte,\r\n-        boolean testboolean, char testchar, Date testDate,\r\n-        Serializable testObject, String testString,\r\n-        BigInteger testBigInteger, BigDecimal testBigDecimal)\r\n-        throws Exception {\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-\r\n-        AllFieldTypesTest test = new AllFieldTypesTest();\r\n-        //pm.persist(test);\r\n-        //Object testID = pm.getObjectId(test);\r\n-\r\n-        test.setTestint(testint);\r\n-        test.setTestlong(testlong);\r\n-        test.setTestdouble(testdouble);\r\n-        test.setTestshort(testshort);\r\n-        test.setTestfloat(testfloat);\r\n-        test.setTestbyte(testbyte);\r\n-        test.setTestboolean(testboolean);\r\n-        test.setTestchar(testchar);\r\n-        test.setTestString(testString);\r\n-        test.setTestDate(testDate);\r\n-        test.setTestObject(testObject);\r\n-        test.setTestBigInteger(testBigInteger);\r\n-        test.setTestBigDecimal(testBigDecimal);\r\n-\r\n-        pm.persist(test);\r\n-        Object testID = pm.getObjectId(test);\r\n-\r\n-        try {\r\n-            endTx(pm);\r\n-        } catch (Exception e) {\r\n-            if (e instanceof Exception &&\r\n-                ((Exception) e).getMessage().indexOf\r\n-                    (\"Maximum length is 8000\") != -1) {\r\n-                bug(5, e, \"SQLServer cannot deal\"\r\n-                        + \" with numbers with more than 8000 digits\");\r\n-            } else {\r\n-                throw e;\r\n-            }\r\n-        }\r\n-\r\n-        endEm(pm);\r\n-\r\n-        //assertPersistent (test, true, false, false, false);\r\n-\r\n-        pm = getPM(true, false);\r\n-        startTx(pm);\r\n-\r\n-        AllFieldTypesTest retrievedObject =\r\n-            (AllFieldTypesTest) pm.find(AllFieldTypesTest.class, testID);\r\n-\r\n-        assertEquals(\"Field type int\", testint,\r\n-            retrievedObject.getTestint());\r\n-        assertEquals(\"Field type short\", testshort,\r\n-            retrievedObject.getTestshort());\r\n-        assertEquals(\"Field type boolean\", testboolean,\r\n-            retrievedObject.getTestboolean());\r\n-        assertEquals(\"Field type char\", testchar,\r\n-            retrievedObject.getTestchar());\r\n-        assertEquals(\"Field type long\", testlong,\r\n-            retrievedObject.getTestlong());\r\n-\r\n-        assertEquals(\"Field type byte\", testbyte,\r\n-            retrievedObject.getTestbyte());\r\n-        assertEquals(\"Field type String\", testString,\r\n-            retrievedObject.getTestString());\r\n-\r\n-        int i1 = (int) (testDate.getTime() / 1000);\r\n-        int i2 = (int) (retrievedObject.getTestDate().getTime() / 1000);\r\n-\r\n-        System.out.println(\"i1 : \" + i1 + \"\\ni2 : \" + i2);\r\n-        assertEquals(\"Field type Date: \"\r\n-            + testDate.getTime() + \"!=\"\r\n-            + retrievedObject.getTestDate().getTime()\r\n-            + \"[\" + new Date(testDate.getTime()) + \" != \"\r\n-            + new Date(retrievedObject.getTestDate().getTime()) + \"]\",\r\n-            (int) (testDate.getTime() / 1000),\r\n-            (int) (retrievedObject.getTestDate().getTime() / 1000));\r\n-        //assertEquals (\"Field type Object\", testObject,\r\n-        //retrievedObject.getTestObject ());\r\n-        assertEquals(\"Field type BigInteger\", testBigInteger,\r\n-            retrievedObject.getTestBigInteger());\r\n-\r\n-        try {\r\n-            assertEquals(\"Field type BigDecimal (BigInteger part)\",\r\n-                testBigDecimal.toBigInteger(),\r\n-                retrievedObject.getTestBigDecimal().toBigInteger());\r\n-\r\n-            assertEquals(\"Field type BigDecimal\",\r\n-                testBigDecimal,\r\n-                retrievedObject.getTestBigDecimal());\r\n-\r\n-            assertEquals(\"Field type float\", testfloat,\r\n-                retrievedObject.getTestfloat(), 0.01f);\r\n-            assertEquals(\"Field type double\", testdouble,\r\n-                retrievedObject.getTestdouble(), 0.01d);\r\n-        } catch (AssertionFailedError afe) {\r\n-            bug(3, afe,\r\n-                \"Doubles and Floats lose precision in some data stores\");\r\n-        }\r\n-\r\n-        rollbackTx(pm);\r\n-    }\r\n-}\r\n+/*\n+ * TestFieldRange.java\n+ *\n+ * Created on October 12, 2006, 10:14 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.io.Serializable;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Date;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest;\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestFieldRange2 extends BaseKernelTest {\n+\n+    protected static String RANDOM_STRING =\n+        \"This is my test String with all \"\n+            + \"kinds of wierd characters: \"\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|\\\"\\\"\\\"\\\"\\\"+_/?.>,<~`\"\n+            + \"'''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n+            + \"''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\n+            + \"!@@#$\\\\%^&\\\"*()-=\\\\|+_/?.>,<~`\";\n+\n+    /**\n+     * Creates a new instance of TestFieldRange\n+     */\n+    public TestFieldRange2() {\n+    }\n+\n+    public TestFieldRange2(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        super.setUp();\n+        deleteAll(AllFieldTypesTest.class);\n+    }\n+\n+    public void testSaveState()\n+        throws Exception {\n+        allFieldSaveState(\n+            (int) 259645,\n+            (short) 50849,\n+            (long) 2349847982L,\n+            (float) 43273423.0234723F,\n+            (double) 34678.02384723D,\n+            (byte) -120,\n+            (boolean) true,\n+            (char) '%',\n+            (Date) new Date(),\n+            (Serializable) new StringBuffer(5000),\n+            (String) RANDOM_STRING,\n+            randomBigInteger(),\n+            randomBigDecimal());\n+    }\n+\n+    private void dateTest(long l)\n+        throws Exception {\n+        Date d = new Date(l);\n+\n+        allFieldSaveState(\n+            (int) 10,\n+            (short) 10,\n+            (long) 10,\n+            (float) 0,\n+            (double) 0,\n+            (byte) 10,\n+            (boolean) true,\n+            (char) 'x',\n+            (Date) d,\n+            (Serializable) new StringBuffer(10),\n+            (String) RANDOM_STRING,\n+            new BigInteger(\"0\"),\n+            new BigDecimal(\"0\"));\n+    }\n+\n+    public void allFieldSaveState(int testint, short testshort, long testlong,\n+        float testfloat, double testdouble, byte testbyte,\n+        boolean testboolean, char testchar, Date testDate,\n+        Serializable testObject, String testString,\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\n+        throws Exception {\n+        try {\n+            allFieldSaveStateInternal(testint, testshort, testlong,\n+                testfloat, testdouble, testbyte,\n+                testboolean, testchar, testDate,\n+                testObject, testString, testBigInteger, testBigDecimal);\n+        } finally {\n+            try {\n+                // make *sure* we do not leave a transaction open\n+                rollbackTx(getPM(true, false));\n+            } catch (Throwable t) {\n+\n+            }\n+        }\n+    }\n+\n+    public void allFieldSaveStateInternal(\n+        int testint, short testshort, long testlong,\n+        float testfloat, double testdouble, byte testbyte,\n+        boolean testboolean, char testchar, Date testDate,\n+        Serializable testObject, String testString,\n+        BigInteger testBigInteger, BigDecimal testBigDecimal)\n+        throws Exception {\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+\n+        AllFieldTypesTest test = new AllFieldTypesTest();\n+        //pm.persist(test);\n+        //Object testID = pm.getObjectId(test);\n+\n+        test.setTestint(testint);\n+        test.setTestlong(testlong);\n+        test.setTestdouble(testdouble);\n+        test.setTestshort(testshort);\n+        test.setTestfloat(testfloat);\n+        test.setTestbyte(testbyte);\n+        test.setTestboolean(testboolean);\n+        test.setTestchar(testchar);\n+        test.setTestString(testString);\n+        test.setTestDate(testDate);\n+        test.setTestObject(testObject);\n+        test.setTestBigInteger(testBigInteger);\n+        test.setTestBigDecimal(testBigDecimal);\n+\n+        pm.persist(test);\n+        Object testID = pm.getObjectId(test);\n+\n+        try {\n+            endTx(pm);\n+        } catch (Exception e) {\n+            if (e instanceof Exception &&\n+                ((Exception) e).getMessage().indexOf\n+                    (\"Maximum length is 8000\") != -1) {\n+                bug(5, e, \"SQLServer cannot deal\"\n+                        + \" with numbers with more than 8000 digits\");\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        endEm(pm);\n+\n+        //assertPersistent (test, true, false, false, false);\n+\n+        pm = getPM(true, false);\n+        startTx(pm);\n+\n+        AllFieldTypesTest retrievedObject =\n+            (AllFieldTypesTest) pm.find(AllFieldTypesTest.class, testID);\n+\n+        assertEquals(\"Field type int\", testint,\n+            retrievedObject.getTestint());\n+        assertEquals(\"Field type short\", testshort,\n+            retrievedObject.getTestshort());\n+        assertEquals(\"Field type boolean\", testboolean,\n+            retrievedObject.getTestboolean());\n+        assertEquals(\"Field type char\", testchar,\n+            retrievedObject.getTestchar());\n+        assertEquals(\"Field type long\", testlong,\n+            retrievedObject.getTestlong());\n+\n+        assertEquals(\"Field type byte\", testbyte,\n+            retrievedObject.getTestbyte());\n+        assertEquals(\"Field type String\", testString,\n+            retrievedObject.getTestString());\n+\n+        int i1 = (int) (testDate.getTime() / 1000);\n+        int i2 = (int) (retrievedObject.getTestDate().getTime() / 1000);\n+\n+        System.out.println(\"i1 : \" + i1 + \"\\ni2 : \" + i2);\n+        assertEquals(\"Field type Date: \"\n+            + testDate.getTime() + \"!=\"\n+            + retrievedObject.getTestDate().getTime()\n+            + \"[\" + new Date(testDate.getTime()) + \" != \"\n+            + new Date(retrievedObject.getTestDate().getTime()) + \"]\",\n+            (int) (testDate.getTime() / 1000),\n+            (int) (retrievedObject.getTestDate().getTime() / 1000));\n+        //assertEquals (\"Field type Object\", testObject,\n+        //retrievedObject.getTestObject ());\n+        assertEquals(\"Field type BigInteger\", testBigInteger,\n+            retrievedObject.getTestBigInteger());\n+\n+        try {\n+            assertEquals(\"Field type BigDecimal (BigInteger part)\",\n+                testBigDecimal.toBigInteger(),\n+                retrievedObject.getTestBigDecimal().toBigInteger());\n+\n+            assertEquals(\"Field type BigDecimal\",\n+                testBigDecimal,\n+                retrievedObject.getTestBigDecimal());\n+\n+            assertEquals(\"Field type float\", testfloat,\n+                retrievedObject.getTestfloat(), 0.01f);\n+            assertEquals(\"Field type double\", testdouble,\n+                retrievedObject.getTestdouble(), 0.01d);\n+        } catch (AssertionFailedError afe) {\n+            bug(3, afe,\n+                \"Doubles and Floats lose precision in some data stores\");\n+        }\n+\n+        rollbackTx(pm);\n+    }\n+}"},{"sha":"095be9638e7ee57a575f67824333a7e26d04913f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestFieldState.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,81 +1,81 @@\n-/*\r\n- * TestFieldState.java\r\n- *\r\n- * Created on October 12, 2006, 10:22 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestFieldState extends BaseKernelTest {\r\n-\r\n-    private Object oid;\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestFieldState\r\n-     */\r\n-    public TestFieldState() {\r\n-    }\r\n-\r\n-    public TestFieldState(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-\r\n-        // create a test object\r\n-        RuntimeTest1 a = new RuntimeTest1(\"foo\", 3);\r\n-        pm.persist(a);\r\n-\r\n-        endTx(pm);\r\n-\r\n-        oid = pm.getObjectId(a);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testNotDirtyAfterSameChange() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-\r\n-        RuntimeTest1 a = (RuntimeTest1) pm.find(RuntimeTest1.class, oid);\r\n-        a.setStringField(a.getStringField());\r\n-        OpenJPAStateManager sm = getStateManager(a, pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\r\n-        assertTrue(sm.getDirty().get(fmd.getIndex()) == false);\r\n-\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * TestFieldState.java\n+ *\n+ * Created on October 12, 2006, 10:22 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestFieldState extends BaseKernelTest {\n+\n+    private Object oid;\n+\n+    /**\n+     * Creates a new instance of TestFieldState\n+     */\n+    public TestFieldState() {\n+    }\n+\n+    public TestFieldState(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+\n+        // create a test object\n+        RuntimeTest1 a = new RuntimeTest1(\"foo\", 3);\n+        pm.persist(a);\n+\n+        endTx(pm);\n+\n+        oid = pm.getObjectId(a);\n+        endEm(pm);\n+    }\n+\n+    public void testNotDirtyAfterSameChange() {\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+\n+        RuntimeTest1 a = (RuntimeTest1) pm.find(RuntimeTest1.class, oid);\n+        a.setStringField(a.getStringField());\n+        OpenJPAStateManager sm = getStateManager(a, pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\n+        assertTrue(sm.getDirty().get(fmd.getIndex()) == false);\n+\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+}"},{"sha":"b6c78636018569a55a5af5e49a98ec41618ced6a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestGetObjectsById.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,88 +1,88 @@\n-/*\r\n- * TestGetObjectsById.java\r\n- *\r\n- * Created on October 12, 2006, 10:49 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestGetObjectsById extends BaseKernelTest {\r\n-\r\n-    private Object[] oids;\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestGetObjectsById\r\n-     */\r\n-    public TestGetObjectsById(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest5.class);\r\n-        deleteAll(RuntimeTest4.class);\r\n-\r\n-        RuntimeTest4 rt4 = new RuntimeTest4(\"foo\");\r\n-\r\n-        RuntimeTest5 related0 = new RuntimeTest5(\"bar\");\r\n-        related0.setRuntimeTest4(rt4);\r\n-        rt4.getRuntimeTest5s().add(related0);\r\n-\r\n-        RuntimeTest5 related1 = new RuntimeTest5(\"baz\");\r\n-        related1.setRuntimeTest4(rt4);\r\n-        rt4.getRuntimeTest5s().add(related1);\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(rt4);\r\n-        endTx(pm);\r\n-        oids = new Object[]\r\n-            {\r\n-                pm.getObjectId(rt4),\r\n-                pm.getObjectId(related0),\r\n-                pm.getObjectId(related1),\r\n-            };\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testGetObjectsByIdInvocation() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        try {\r\n-            Object[] pcs = pm.findAll(Object.class, oids);\r\n-            assertEquals(oids.length, pcs.length);\r\n-            for (int i = 0; i < oids.length; i++)\r\n-                assertEquals(oids[i], pm.getObjectId(pcs[i]));\r\n-        } catch (Exception e) {\r\n-            bug(1017, e, \"getObjectsById() bug\");\r\n-        } finally {\r\n-            endEm(pm);\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * TestGetObjectsById.java\n+ *\n+ * Created on October 12, 2006, 10:49 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestGetObjectsById extends BaseKernelTest {\n+\n+    private Object[] oids;\n+\n+    /**\n+     * Creates a new instance of TestGetObjectsById\n+     */\n+    public TestGetObjectsById(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest5.class);\n+        deleteAll(RuntimeTest4.class);\n+\n+        RuntimeTest4 rt4 = new RuntimeTest4(\"foo\");\n+\n+        RuntimeTest5 related0 = new RuntimeTest5(\"bar\");\n+        related0.setRuntimeTest4(rt4);\n+        rt4.getRuntimeTest5s().add(related0);\n+\n+        RuntimeTest5 related1 = new RuntimeTest5(\"baz\");\n+        related1.setRuntimeTest4(rt4);\n+        rt4.getRuntimeTest5s().add(related1);\n+\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        pm.persist(rt4);\n+        endTx(pm);\n+        oids = new Object[]\n+            {\n+                pm.getObjectId(rt4),\n+                pm.getObjectId(related0),\n+                pm.getObjectId(related1),\n+            };\n+        endEm(pm);\n+    }\n+\n+    public void testGetObjectsByIdInvocation() {\n+        OpenJPAEntityManager pm = getPM();\n+        try {\n+            Object[] pcs = pm.findAll(Object.class, oids);\n+            assertEquals(oids.length, pcs.length);\n+            for (int i = 0; i < oids.length; i++)\n+                assertEquals(oids[i], pm.getObjectId(pcs[i]));\n+        } catch (Exception e) {\n+            bug(1017, e, \"getObjectsById() bug\");\n+        } finally {\n+            endEm(pm);\n+        }\n+    }\n+}"},{"sha":"84816f3555a250b6a986a4e11bd90fa79059dbfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","status":"modified","additions":448,"deletions":448,"changes":896,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushes.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,448 +1,448 @@\n-/*\r\n- * TestIncrementalFlushes.java\r\n- *\r\n- * Created on October 12, 2006, 11:24 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1;\r\n-\r\n-import org.apache.openjpa.event.AbstractTransactionListener;\r\n-import org.apache.openjpa.event.TransactionEvent;\r\n-import org.apache.openjpa.kernel.PCState;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\r\n-\r\n-public class TestIncrementalFlushes extends BaseKernelTest {\r\n-\r\n-    public TestIncrementalFlushes(String str) {\r\n-        super(str);\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestIncrementalFlushes\r\n-     */\r\n-    public TestIncrementalFlushes() {\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(ModRuntimeTest1.class);\r\n-//        deleteAll(ModInstanceCallbackTests.class);\r\n-    }\r\n-\r\n-    public void testBasicJdoPreStore() {\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n-        pm.persist(a);\r\n-        pm.flush();\r\n-        assertTrue(a.preStoreCalled);\r\n-        endTx(pm);\r\n-    }\r\n-\r\n-    public void testNoFlush() {\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n-        pm.persist(a);\r\n-        endTx(pm);\r\n-        assertTrue(a.preStoreCalled);\r\n-    }\r\n-\r\n-    public void testFlushNoChange() {\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n-        pm.persist(a);\r\n-        pm.flush();\r\n-        endTx(pm);\r\n-        assertTrue(a.preStoreCalled);\r\n-        assertEquals(10, a.getIntField());\r\n-    }\r\n-\r\n-    /**\r\n-     * Helper method for some common test cases. See utilizations of\r\n-     * this below.\r\n-     */\r\n-    private void basicHelper(boolean update, boolean multi, boolean dfg,\r\n-        boolean nonDFG) {\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-\r\n-        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n-        pm.persist(a);\r\n-        if (update) {\r\n-            endTx(pm);\r\n-            Object oid = pm.getObjectId(a);\r\n-            endEm(pm);\r\n-            pm = getPM(true, false);\r\n-            startTx(pm);\r\n-            a = (ModInstanceCallbackTests) pm\r\n-                .find(ModInstanceCallbackTests.class, oid);\r\n-        } else {\r\n-            pm.flush();\r\n-        }\r\n-\r\n-        if (dfg)\r\n-            a.setIntField(11);\r\n-        if (nonDFG)\r\n-            a.setNonDFGField(11);\r\n-\r\n-        if (multi) {\r\n-            pm.flush();\r\n-\r\n-            if (dfg)\r\n-                a.setIntField(12);\r\n-            if (nonDFG)\r\n-                a.setNonDFGField(12);\r\n-        }\r\n-\r\n-        endTx(pm);\r\n-\r\n-        // if no changes were made and we're in update mode, then this\r\n-        // object won't have had jdoPreStore() called.\r\n-//        if (!(update && (!dfg && !nonDFG)))\r\n-//            assertTrue(\"a.prestoreCalled is false\", a.preStoreCalled);\r\n-\r\n-        if (multi) {\r\n-            if (dfg)\r\n-                assertEquals(\"a.getIntField is not 12\", 12, a.getIntField());\r\n-            if (nonDFG)\r\n-                assertEquals(\"a.getNonDFGField is not 12\", 12,\r\n-                    a.getNonDFGField());\r\n-        } else {\r\n-            if (dfg)\r\n-                assertEquals(\"a.getIntField is not 12\", 11, a.getIntField());\r\n-            if (nonDFG)\r\n-                assertEquals(\"a.getNonDFGField is not 12\", 11,\r\n-                    a.getNonDFGField());\r\n-        }\r\n-    }\r\n-\r\n-    public void testFlushStorePrimaryDFGChange() {\r\n-        basicHelper(false, false, true, false);\r\n-        basicHelper(false, true, true, false);\r\n-        basicHelper(true, false, true, false);\r\n-        basicHelper(true, true, true, false);\r\n-    }\r\n-\r\n-    public void testFlushStorePrimaryNonDFGChange() {\r\n-        basicHelper(false, false, false, true);\r\n-        basicHelper(false, true, false, true);\r\n-        basicHelper(true, false, false, true);\r\n-        basicHelper(true, true, false, true);\r\n-    }\r\n-\r\n-    public void testFlushStorePrimaryNonDFGAndDFGChange() {\r\n-        basicHelper(false, false, true, true);\r\n-        basicHelper(false, true, true, true);\r\n-        basicHelper(true, false, true, true);\r\n-        basicHelper(true, true, true, true);\r\n-    }\r\n-\r\n-    public void testFlushStorePrimaryNoChanges() {\r\n-        basicHelper(false, false, false, false);\r\n-        basicHelper(false, true, false, false);\r\n-        basicHelper(true, false, false, false);\r\n-        basicHelper(true, true, false, false);\r\n-    }\r\n-\r\n-    public void testJdoPreStoreWithModificationBeforeFlush() {\r\n-        tjpswmHelper(true);\r\n-    }\r\n-\r\n-    public void testJdoPreStoreWithModificationAfterFlush() {\r\n-        tjpswmHelper(false);\r\n-    }\r\n-\r\n-    private void tjpswmHelper(boolean before) {\r\n-        // set retainvalues to false so that we can ensure that the\r\n-        // data in the database is correct, and that we're not just\r\n-        // testing that the JVM data is correct.\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n-        pm.persist(a);\r\n-\r\n-        // by setting the name to 'bar', the jdoPreStore() invocation\r\n-        // will set the parent to a new object. This ensures that new\r\n-        // objects created in jdoPreStore() make their way into the DB\r\n-        // during commit.\r\n-        if (before) {\r\n-            a.setStringField(\"bar\");\r\n-            pm.flush();\r\n-        } else {\r\n-            pm.flush();\r\n-            a.setStringField(\"bar\");\r\n-        }\r\n-        endTx(pm);\r\n-        assertTrue(\"a.preStoreCalled is false\", a.preStoreCalled);\r\n-        assertNotNull(\"a.getOneOne is null\", a.getOneOne());\r\n-        assertTrue(\"getOneOne().getstrngfld.equals(jdoPrestore) is false\",\r\n-            a.getOneOne().getStringField().equals(\"jdoPreStore\"));\r\n-    }\r\n-\r\n-    public void testOneToOneBefore() {\r\n-        totoHelper(true, true, false);\r\n-        totoHelper(true, false, false);\r\n-        totoHelper(true, true, true);\r\n-        totoHelper(true, false, true);\r\n-    }\r\n-\r\n-    public void testOneToOneAfter() {\r\n-        totoHelper(false, true, false);\r\n-        totoHelper(false, false, false);\r\n-        totoHelper(false, true, true);\r\n-        totoHelper(false, false, true);\r\n-    }\r\n-\r\n-    private void totoHelper(boolean before, boolean persist,\r\n-        boolean multi) {\r\n-        // set retainvalues to false so that we can ensure that the\r\n-        // data in the database is correct, and that we're not just\r\n-        // testing that the JVM data is correct.\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\r\n-        pm.persist(a);\r\n-\r\n-        ModRuntimeTest1 parent = new ModRuntimeTest1(\"baz\", 11);\r\n-        if (!before)\r\n-            pm.flush();\r\n-\r\n-        if (persist)\r\n-            pm.persist(parent);\r\n-\r\n-        a.setOneOne(parent);\r\n-\r\n-        if (before)\r\n-            pm.flush();\r\n-\r\n-        ModRuntimeTest1 oldParent = null;\r\n-        if (multi) {\r\n-            oldParent = parent;\r\n-            parent = new ModRuntimeTest1(\"newParent\", 12);\r\n-\r\n-            if (!before)\r\n-                pm.flush();\r\n-\r\n-            if (persist)\r\n-                pm.persist(parent);\r\n-\r\n-            a.setOneOne(parent);\r\n-\r\n-            if (before)\r\n-                pm.flush();\r\n-        }\r\n-\r\n-        endTx(pm);\r\n-        assertTrue(\"a.preStoreCalled is false\", a.preStoreCalled);\r\n-        assertNotNull(\"a.getOneOne is null\", a.getOneOne());\r\n-        if (!multi)\r\n-            assertTrue(\"a.getOneOne().getStringField().equals(baz) is false\",\r\n-                a.getOneOne().getStringField().equals(\"baz\"));\r\n-        else {\r\n-            assertTrue(\r\n-                \"a.getOneOne().getStringField().equals(newParent) is false\",\r\n-                a.getOneOne().getStringField().equals(\"newParent\"));\r\n-\r\n-            // if multi, then we really should delete the baz\r\n-            // parent. This isn't happening right now.\r\n-            // ### should be a bug\r\n-            //assertTrue (JDOHelper.isDeleted (oldParent));\r\n-        }\r\n-    }\r\n-\r\n-    private void assertState(Object o, PCState state, OpenJPAEntityManager pm) {\r\n-        assertEquals(state, getStateManager(o, pm).getPCState());\r\n-    }\r\n-\r\n-    private void commitAndTestDelete(OpenJPAEntityManager pm, Object o) {\r\n-        Object oid = pm.getObjectId(o);\r\n-        endTx(pm);\r\n-\r\n-        pm = getPM();\r\n-        try {\r\n-            pm.find(Object.class, oid);\r\n-            fail(\"should not be able to load deleted object\");\r\n-        } catch (Exception e) {\r\n-            // expected case\r\n-        }\r\n-    }\r\n-\r\n-    public void testDeleteNew() {\r\n-        OpenJPAEntityManager pm = getPM(true, false);\r\n-        startTx(pm);\r\n-        ModRuntimeTest1 a = new ModRuntimeTest1(\"foo\", 10);\r\n-        pm.persist(a);\r\n-        pm.remove(a);\r\n-        assertState(a, PCState.PNEWDELETED, pm);\r\n-    }\r\n-\r\n-    public void testOptimisticLockGivesCorrectError() {\r\n-        OpenJPAEntityManager pm1 = getPM(true, false);\r\n-        OpenJPAEntityManager pm2 = getPM(true, false);\r\n-\r\n-        ModRuntimeTest1 a1 = new ModRuntimeTest1(\"foo\", 10);\r\n-        startTx(pm1);\r\n-        pm1.persist(a1);\r\n-        endTx(pm1);\r\n-\r\n-        ModRuntimeTest1 a2 = (ModRuntimeTest1)\r\n-            pm2.find(ModRuntimeTest1.class, pm2.getObjectId(a1));\r\n-        startTx(pm2);\r\n-        a2.setStringField(\"foobar\");\r\n-        endTx(pm2);\r\n-\r\n-        startTx(pm1);\r\n-        a1.setStringField(\"foobarbaz\");\r\n-        try {\r\n-            endTx(pm1);\r\n-        } catch (Exception ole) {\r\n-            // expected case\r\n-        } finally {\r\n-            rollbackTx(pm1);\r\n-\r\n-            pm1.close();\r\n-            pm2.close();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Verify that flushes to the datastore are isolated from other\r\n-     * PersistenceManagers. This is mostly a test of the underlying\r\n-     * datastore's transactional isolation capabilities.\r\n-     * <p/>\r\n-     * Disabled: this hangs on Sybase.\r\n-     */\r\n-    public void XXXtestFlushesAreIsolated() {\r\n-        final String name = \"testFlushesAreIsolated\";\r\n-\r\n-        deleteAll(ModRuntimeTest1.class);\r\n-\r\n-        OpenJPAEntityManager flushPM = getPM(true, false);\r\n-        startTx(flushPM);\r\n-\r\n-        OpenJPAEntityManager readPM = getPM(true, false);\r\n-        startTx(readPM);\r\n-\r\n-        assertSize(0, flushPM.createNativeQuery(\"stringField == '\" + name + \"'\",\r\n-            ModRuntimeTest1.class));\r\n-        assertSize(0, readPM.createNativeQuery(\"stringField == '\" + name + \"'\",\r\n-            ModRuntimeTest1.class));\r\n-\r\n-        ModRuntimeTest1 a = new ModRuntimeTest1(name, randomInt().intValue());\r\n-\r\n-        flushPM.persist(a);\r\n-\r\n-        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n-            ModRuntimeTest1.class));\r\n-\r\n-        flushPM.flush();\r\n-\r\n-        // make sure the other pm doesn't see the flushed object\r\n-        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n-            ModRuntimeTest1.class));\r\n-\r\n-        flushPM.remove(a);\r\n-\r\n-        assertSize(0, flushPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n-            ModRuntimeTest1.class));\r\n-        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\r\n-            ModRuntimeTest1.class));\r\n-\r\n-        endTx(flushPM);\r\n-        endEm(flushPM);\r\n-\r\n-        endTx(readPM);\r\n-        endEm(readPM);\r\n-    }\r\n-\r\n-    public void testEmptyFlush() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        TListener listener = new TListener();\r\n-        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\r\n-        startTx(pm);\r\n-        ModRuntimeTest1 pc = new ModRuntimeTest1();\r\n-        pm.persist(pc);\r\n-        pm.flush();\r\n-        assertEquals(1, listener.flushes);\r\n-        assertEquals(0, listener.commits);\r\n-\r\n-        pm.flush();\r\n-        assertEquals(1, listener.flushes);\r\n-        assertEquals(0, listener.commits);\r\n-\r\n-        pc.setIntField(3);\r\n-        pm.flush();\r\n-        assertEquals(2, listener.flushes);\r\n-        assertEquals(0, listener.commits);\r\n-\r\n-        endTx(pm);\r\n-        assertEquals(2, listener.flushes);\r\n-        assertEquals(1, listener.commits);\r\n-\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testEmptyRollback() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        TListener listener = new TListener();\r\n-        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\r\n-        startTx(pm);\r\n-        pm.flush();\r\n-        rollbackTx(pm);\r\n-        assertEquals(0, listener.flushes);\r\n-        assertEquals(0, listener.commits);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testEmptyCommit() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        TListener listener = new TListener();\r\n-        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\r\n-        startTx(pm);\r\n-        endTx(pm);\r\n-        assertEquals(0, listener.flushes);\r\n-        assertEquals(1, listener.commits);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    private static class TListener\r\n-        extends AbstractTransactionListener {\r\n-\r\n-        public int flushes = 0;\r\n-        public int commits = 0;\r\n-\r\n-        protected void eventOccurred(TransactionEvent event) {\r\n-            if (event.getType() == event.BEFORE_FLUSH)\r\n-                flushes++;\r\n-            else if (event.getType() == event.BEFORE_COMMIT)\r\n-                commits++;\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * TestIncrementalFlushes.java\n+ *\n+ * Created on October 12, 2006, 11:24 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests;\n+import org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1;\n+\n+import org.apache.openjpa.event.AbstractTransactionListener;\n+import org.apache.openjpa.event.TransactionEvent;\n+import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerSPI;\n+\n+public class TestIncrementalFlushes extends BaseKernelTest {\n+\n+    public TestIncrementalFlushes(String str) {\n+        super(str);\n+    }\n+\n+    /**\n+     * Creates a new instance of TestIncrementalFlushes\n+     */\n+    public TestIncrementalFlushes() {\n+    }\n+\n+    public void setUp() {\n+        deleteAll(ModRuntimeTest1.class);\n+//        deleteAll(ModInstanceCallbackTests.class);\n+    }\n+\n+    public void testBasicJdoPreStore() {\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\n+        pm.persist(a);\n+        pm.flush();\n+        assertTrue(a.preStoreCalled);\n+        endTx(pm);\n+    }\n+\n+    public void testNoFlush() {\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\n+        pm.persist(a);\n+        endTx(pm);\n+        assertTrue(a.preStoreCalled);\n+    }\n+\n+    public void testFlushNoChange() {\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\n+        pm.persist(a);\n+        pm.flush();\n+        endTx(pm);\n+        assertTrue(a.preStoreCalled);\n+        assertEquals(10, a.getIntField());\n+    }\n+\n+    /**\n+     * Helper method for some common test cases. See utilizations of\n+     * this below.\n+     */\n+    private void basicHelper(boolean update, boolean multi, boolean dfg,\n+        boolean nonDFG) {\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\n+        pm.persist(a);\n+        if (update) {\n+            endTx(pm);\n+            Object oid = pm.getObjectId(a);\n+            endEm(pm);\n+            pm = getPM(true, false);\n+            startTx(pm);\n+            a = (ModInstanceCallbackTests) pm\n+                .find(ModInstanceCallbackTests.class, oid);\n+        } else {\n+            pm.flush();\n+        }\n+\n+        if (dfg)\n+            a.setIntField(11);\n+        if (nonDFG)\n+            a.setNonDFGField(11);\n+\n+        if (multi) {\n+            pm.flush();\n+\n+            if (dfg)\n+                a.setIntField(12);\n+            if (nonDFG)\n+                a.setNonDFGField(12);\n+        }\n+\n+        endTx(pm);\n+\n+        // if no changes were made and we're in update mode, then this\n+        // object won't have had jdoPreStore() called.\n+//        if (!(update && (!dfg && !nonDFG)))\n+//            assertTrue(\"a.prestoreCalled is false\", a.preStoreCalled);\n+\n+        if (multi) {\n+            if (dfg)\n+                assertEquals(\"a.getIntField is not 12\", 12, a.getIntField());\n+            if (nonDFG)\n+                assertEquals(\"a.getNonDFGField is not 12\", 12,\n+                    a.getNonDFGField());\n+        } else {\n+            if (dfg)\n+                assertEquals(\"a.getIntField is not 12\", 11, a.getIntField());\n+            if (nonDFG)\n+                assertEquals(\"a.getNonDFGField is not 12\", 11,\n+                    a.getNonDFGField());\n+        }\n+    }\n+\n+    public void testFlushStorePrimaryDFGChange() {\n+        basicHelper(false, false, true, false);\n+        basicHelper(false, true, true, false);\n+        basicHelper(true, false, true, false);\n+        basicHelper(true, true, true, false);\n+    }\n+\n+    public void testFlushStorePrimaryNonDFGChange() {\n+        basicHelper(false, false, false, true);\n+        basicHelper(false, true, false, true);\n+        basicHelper(true, false, false, true);\n+        basicHelper(true, true, false, true);\n+    }\n+\n+    public void testFlushStorePrimaryNonDFGAndDFGChange() {\n+        basicHelper(false, false, true, true);\n+        basicHelper(false, true, true, true);\n+        basicHelper(true, false, true, true);\n+        basicHelper(true, true, true, true);\n+    }\n+\n+    public void testFlushStorePrimaryNoChanges() {\n+        basicHelper(false, false, false, false);\n+        basicHelper(false, true, false, false);\n+        basicHelper(true, false, false, false);\n+        basicHelper(true, true, false, false);\n+    }\n+\n+    public void testJdoPreStoreWithModificationBeforeFlush() {\n+        tjpswmHelper(true);\n+    }\n+\n+    public void testJdoPreStoreWithModificationAfterFlush() {\n+        tjpswmHelper(false);\n+    }\n+\n+    private void tjpswmHelper(boolean before) {\n+        // set retainvalues to false so that we can ensure that the\n+        // data in the database is correct, and that we're not just\n+        // testing that the JVM data is correct.\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\n+        pm.persist(a);\n+\n+        // by setting the name to 'bar', the jdoPreStore() invocation\n+        // will set the parent to a new object. This ensures that new\n+        // objects created in jdoPreStore() make their way into the DB\n+        // during commit.\n+        if (before) {\n+            a.setStringField(\"bar\");\n+            pm.flush();\n+        } else {\n+            pm.flush();\n+            a.setStringField(\"bar\");\n+        }\n+        endTx(pm);\n+        assertTrue(\"a.preStoreCalled is false\", a.preStoreCalled);\n+        assertNotNull(\"a.getOneOne is null\", a.getOneOne());\n+        assertTrue(\"getOneOne().getstrngfld.equals(jdoPrestore) is false\",\n+            a.getOneOne().getStringField().equals(\"jdoPreStore\"));\n+    }\n+\n+    public void testOneToOneBefore() {\n+        totoHelper(true, true, false);\n+        totoHelper(true, false, false);\n+        totoHelper(true, true, true);\n+        totoHelper(true, false, true);\n+    }\n+\n+    public void testOneToOneAfter() {\n+        totoHelper(false, true, false);\n+        totoHelper(false, false, false);\n+        totoHelper(false, true, true);\n+        totoHelper(false, false, true);\n+    }\n+\n+    private void totoHelper(boolean before, boolean persist,\n+        boolean multi) {\n+        // set retainvalues to false so that we can ensure that the\n+        // data in the database is correct, and that we're not just\n+        // testing that the JVM data is correct.\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+        ModInstanceCallbackTests a = new ModInstanceCallbackTests(\"foo\", 10);\n+        pm.persist(a);\n+\n+        ModRuntimeTest1 parent = new ModRuntimeTest1(\"baz\", 11);\n+        if (!before)\n+            pm.flush();\n+\n+        if (persist)\n+            pm.persist(parent);\n+\n+        a.setOneOne(parent);\n+\n+        if (before)\n+            pm.flush();\n+\n+        ModRuntimeTest1 oldParent = null;\n+        if (multi) {\n+            oldParent = parent;\n+            parent = new ModRuntimeTest1(\"newParent\", 12);\n+\n+            if (!before)\n+                pm.flush();\n+\n+            if (persist)\n+                pm.persist(parent);\n+\n+            a.setOneOne(parent);\n+\n+            if (before)\n+                pm.flush();\n+        }\n+\n+        endTx(pm);\n+        assertTrue(\"a.preStoreCalled is false\", a.preStoreCalled);\n+        assertNotNull(\"a.getOneOne is null\", a.getOneOne());\n+        if (!multi)\n+            assertTrue(\"a.getOneOne().getStringField().equals(baz) is false\",\n+                a.getOneOne().getStringField().equals(\"baz\"));\n+        else {\n+            assertTrue(\n+                \"a.getOneOne().getStringField().equals(newParent) is false\",\n+                a.getOneOne().getStringField().equals(\"newParent\"));\n+\n+            // if multi, then we really should delete the baz\n+            // parent. This isn't happening right now.\n+            // ### should be a bug\n+            //assertTrue (JDOHelper.isDeleted (oldParent));\n+        }\n+    }\n+\n+    private void assertState(Object o, PCState state, OpenJPAEntityManager pm) {\n+        assertEquals(state, getStateManager(o, pm).getPCState());\n+    }\n+\n+    private void commitAndTestDelete(OpenJPAEntityManager pm, Object o) {\n+        Object oid = pm.getObjectId(o);\n+        endTx(pm);\n+\n+        pm = getPM();\n+        try {\n+            pm.find(Object.class, oid);\n+            fail(\"should not be able to load deleted object\");\n+        } catch (Exception e) {\n+            // expected case\n+        }\n+    }\n+\n+    public void testDeleteNew() {\n+        OpenJPAEntityManager pm = getPM(true, false);\n+        startTx(pm);\n+        ModRuntimeTest1 a = new ModRuntimeTest1(\"foo\", 10);\n+        pm.persist(a);\n+        pm.remove(a);\n+        assertState(a, PCState.PNEWDELETED, pm);\n+    }\n+\n+    public void testOptimisticLockGivesCorrectError() {\n+        OpenJPAEntityManager pm1 = getPM(true, false);\n+        OpenJPAEntityManager pm2 = getPM(true, false);\n+\n+        ModRuntimeTest1 a1 = new ModRuntimeTest1(\"foo\", 10);\n+        startTx(pm1);\n+        pm1.persist(a1);\n+        endTx(pm1);\n+\n+        ModRuntimeTest1 a2 = (ModRuntimeTest1)\n+            pm2.find(ModRuntimeTest1.class, pm2.getObjectId(a1));\n+        startTx(pm2);\n+        a2.setStringField(\"foobar\");\n+        endTx(pm2);\n+\n+        startTx(pm1);\n+        a1.setStringField(\"foobarbaz\");\n+        try {\n+            endTx(pm1);\n+        } catch (Exception ole) {\n+            // expected case\n+        } finally {\n+            rollbackTx(pm1);\n+\n+            pm1.close();\n+            pm2.close();\n+        }\n+    }\n+\n+    /**\n+     * Verify that flushes to the datastore are isolated from other\n+     * PersistenceManagers. This is mostly a test of the underlying\n+     * datastore's transactional isolation capabilities.\n+     * <p/>\n+     * Disabled: this hangs on Sybase.\n+     */\n+    public void XXXtestFlushesAreIsolated() {\n+        final String name = \"testFlushesAreIsolated\";\n+\n+        deleteAll(ModRuntimeTest1.class);\n+\n+        OpenJPAEntityManager flushPM = getPM(true, false);\n+        startTx(flushPM);\n+\n+        OpenJPAEntityManager readPM = getPM(true, false);\n+        startTx(readPM);\n+\n+        assertSize(0, flushPM.createNativeQuery(\"stringField == '\" + name + \"'\",\n+            ModRuntimeTest1.class));\n+        assertSize(0, readPM.createNativeQuery(\"stringField == '\" + name + \"'\",\n+            ModRuntimeTest1.class));\n+\n+        ModRuntimeTest1 a = new ModRuntimeTest1(name, randomInt().intValue());\n+\n+        flushPM.persist(a);\n+\n+        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\n+            ModRuntimeTest1.class));\n+\n+        flushPM.flush();\n+\n+        // make sure the other pm doesn't see the flushed object\n+        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\n+            ModRuntimeTest1.class));\n+\n+        flushPM.remove(a);\n+\n+        assertSize(0, flushPM.createNativeQuery(\"name == '\" + name + \"'\",\n+            ModRuntimeTest1.class));\n+        assertSize(0, readPM.createNativeQuery(\"name == '\" + name + \"'\",\n+            ModRuntimeTest1.class));\n+\n+        endTx(flushPM);\n+        endEm(flushPM);\n+\n+        endTx(readPM);\n+        endEm(readPM);\n+    }\n+\n+    public void testEmptyFlush() {\n+        OpenJPAEntityManager pm = getPM();\n+        TListener listener = new TListener();\n+        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\n+        startTx(pm);\n+        ModRuntimeTest1 pc = new ModRuntimeTest1();\n+        pm.persist(pc);\n+        pm.flush();\n+        assertEquals(1, listener.flushes);\n+        assertEquals(0, listener.commits);\n+\n+        pm.flush();\n+        assertEquals(1, listener.flushes);\n+        assertEquals(0, listener.commits);\n+\n+        pc.setIntField(3);\n+        pm.flush();\n+        assertEquals(2, listener.flushes);\n+        assertEquals(0, listener.commits);\n+\n+        endTx(pm);\n+        assertEquals(2, listener.flushes);\n+        assertEquals(1, listener.commits);\n+\n+        endEm(pm);\n+    }\n+\n+    public void testEmptyRollback() {\n+        OpenJPAEntityManager pm = getPM();\n+        TListener listener = new TListener();\n+        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\n+        startTx(pm);\n+        pm.flush();\n+        rollbackTx(pm);\n+        assertEquals(0, listener.flushes);\n+        assertEquals(0, listener.commits);\n+        endEm(pm);\n+    }\n+\n+    public void testEmptyCommit() {\n+        OpenJPAEntityManager pm = getPM();\n+        TListener listener = new TListener();\n+        ((OpenJPAEntityManagerSPI) pm).addTransactionListener(listener);\n+        startTx(pm);\n+        endTx(pm);\n+        assertEquals(0, listener.flushes);\n+        assertEquals(1, listener.commits);\n+        endEm(pm);\n+    }\n+\n+    private static class TListener\n+        extends AbstractTransactionListener {\n+\n+        public int flushes = 0;\n+        public int commits = 0;\n+\n+        protected void eventOccurred(TransactionEvent event) {\n+            if (event.getType() == event.BEFORE_FLUSH)\n+                flushes++;\n+            else if (event.getType() == event.BEFORE_COMMIT)\n+                commits++;\n+        }\n+    }\n+}"},{"sha":"538645825a2c796cd8e64280d07cfd5dd2ad6ba6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","status":"modified","additions":137,"deletions":137,"changes":274,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestIncrementalFlushesDeletes.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,137 +1,137 @@\n-/*\r\n- * TestIncrementalFlushesDeletes.java\r\n- *\r\n- * Created on October 12, 2006, 11:38 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.PCState;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestIncrementalFlushesDeletes extends BaseKernelTest {\r\n-\r\n-    private OpenJPAEntityManager pm;\r\n-    private Object oid;\r\n-    private RuntimeTest1 a;\r\n-\r\n-    public TestIncrementalFlushesDeletes(String str) {\r\n-        super(str);\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestIncrementalFlushesDeletes\r\n-     */\r\n-    public TestIncrementalFlushesDeletes() {\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        pm = getPM(true, false);\r\n-        startTx(pm);\r\n-        a = new RuntimeTest1(\"foo\", 10);\r\n-        pm.persist(a);\r\n-        oid = pm.getObjectId(a);\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        endTx(pm);\r\n-\r\n-        OpenJPAEntityManager newPm = getPM();\r\n-        try {\r\n-            Object o = newPm.find(RuntimeTest1.class, oid);\r\n-            if (o != null) {\r\n-                fail(\"should not be able to load deleted object\");\r\n-            }\r\n-        } catch (Exception e) {\r\n-            // expected case\r\n-        }\r\n-\r\n-        endEm(newPm);\r\n-        endEm(pm);\r\n-\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    private void assertState(PCState state, boolean flushed) {\r\n-        OpenJPAStateManager sm = getStateManager(a, pm);\r\n-        assertNotNull(sm);\r\n-        assertEquals(flushed, sm.isFlushed());\r\n-        assertEquals(state, sm.getPCState());\r\n-    }\r\n-\r\n-    /**\r\n-     * PNew => PNewDeleted\r\n-     */\r\n-    public void testNewDeleted() {\r\n-        pm.remove(a);\r\n-        assertState(PCState.PNEWDELETED, false);\r\n-    }\r\n-\r\n-    /**\r\n-     * PNew => PNewDeleted => PNewDeletedFlushed\r\n-     */\r\n-    public void testNewDeletedFlushed() {\r\n-        pm.remove(a);\r\n-        assertState(PCState.PNEWDELETED, false);\r\n-        pm.flush();\r\n-        assertState(PCState.PNEWDELETED, true);\r\n-    }\r\n-\r\n-    /**\r\n-     * PNew => PNewFlushed => PNewFlushedDeleted\r\n-     */\r\n-    public void testNewFlushedDeleted() {\r\n-        pm.flush();\r\n-        assertState(PCState.PNEW, true);\r\n-        pm.remove(a);\r\n-        assertState(PCState.PNEWFLUSHEDDELETED, true);\r\n-    }\r\n-\r\n-    /**\r\n-     * PNew => PNewFlushed => PNewFlushedDeleted => PNewFlushedDeletedFlushed\r\n-     */\r\n-    public void testNewFlushedDeletedFlushed() {\r\n-        pm.flush();\r\n-        assertState(PCState.PNEW, true);\r\n-        pm.remove(a);\r\n-        assertState(PCState.PNEWFLUSHEDDELETED, true);\r\n-        pm.flush();\r\n-        assertState(PCState.PNEWFLUSHEDDELETEDFLUSHED, true);\r\n-    }\r\n-\r\n-/*\r\n-* \t### some remaining test deletes:\r\n-*\t\tPDirty => PDeleted => PDeletedFlushed\r\n-*\t\tPDirty => (change and flush) PDirty => PDeleted => PDeletedFlushed\r\n-*\t\tPClean => PDeleted => PDeletedFlushed\r\n-*\t\tHollow => PDeleted => PDeletedFlushed\r\n-*/\r\n-}\r\n+/*\n+ * TestIncrementalFlushesDeletes.java\n+ *\n+ * Created on October 12, 2006, 11:38 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.PCState;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestIncrementalFlushesDeletes extends BaseKernelTest {\n+\n+    private OpenJPAEntityManager pm;\n+    private Object oid;\n+    private RuntimeTest1 a;\n+\n+    public TestIncrementalFlushesDeletes(String str) {\n+        super(str);\n+    }\n+\n+    /**\n+     * Creates a new instance of TestIncrementalFlushesDeletes\n+     */\n+    public TestIncrementalFlushesDeletes() {\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        pm = getPM(true, false);\n+        startTx(pm);\n+        a = new RuntimeTest1(\"foo\", 10);\n+        pm.persist(a);\n+        oid = pm.getObjectId(a);\n+    }\n+\n+    public void tearDown() throws Exception {\n+        endTx(pm);\n+\n+        OpenJPAEntityManager newPm = getPM();\n+        try {\n+            Object o = newPm.find(RuntimeTest1.class, oid);\n+            if (o != null) {\n+                fail(\"should not be able to load deleted object\");\n+            }\n+        } catch (Exception e) {\n+            // expected case\n+        }\n+\n+        endEm(newPm);\n+        endEm(pm);\n+\n+        super.tearDown();\n+    }\n+\n+    private void assertState(PCState state, boolean flushed) {\n+        OpenJPAStateManager sm = getStateManager(a, pm);\n+        assertNotNull(sm);\n+        assertEquals(flushed, sm.isFlushed());\n+        assertEquals(state, sm.getPCState());\n+    }\n+\n+    /**\n+     * PNew => PNewDeleted\n+     */\n+    public void testNewDeleted() {\n+        pm.remove(a);\n+        assertState(PCState.PNEWDELETED, false);\n+    }\n+\n+    /**\n+     * PNew => PNewDeleted => PNewDeletedFlushed\n+     */\n+    public void testNewDeletedFlushed() {\n+        pm.remove(a);\n+        assertState(PCState.PNEWDELETED, false);\n+        pm.flush();\n+        assertState(PCState.PNEWDELETED, true);\n+    }\n+\n+    /**\n+     * PNew => PNewFlushed => PNewFlushedDeleted\n+     */\n+    public void testNewFlushedDeleted() {\n+        pm.flush();\n+        assertState(PCState.PNEW, true);\n+        pm.remove(a);\n+        assertState(PCState.PNEWFLUSHEDDELETED, true);\n+    }\n+\n+    /**\n+     * PNew => PNewFlushed => PNewFlushedDeleted => PNewFlushedDeletedFlushed\n+     */\n+    public void testNewFlushedDeletedFlushed() {\n+        pm.flush();\n+        assertState(PCState.PNEW, true);\n+        pm.remove(a);\n+        assertState(PCState.PNEWFLUSHEDDELETED, true);\n+        pm.flush();\n+        assertState(PCState.PNEWFLUSHEDDELETEDFLUSHED, true);\n+    }\n+\n+/*\n+* \t### some remaining test deletes:\n+*\t\tPDirty => PDeleted => PDeletedFlushed\n+*\t\tPDirty => (change and flush) PDirty => PDeleted => PDeletedFlushed\n+*\t\tPClean => PDeleted => PDeletedFlushed\n+*\t\tHollow => PDeleted => PDeletedFlushed\n+*/\n+}"},{"sha":"485d0771c9da5b4cb96fbc380af9936336ec0879","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","status":"modified","additions":148,"deletions":148,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInheritance.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,148 +1,148 @@\n-/*\r\n- * TestInheritance.java\r\n- *\r\n- * Created on October 12, 2006, 11:46 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Collection;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestInheritance extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestInheritance\r\n-     */\r\n-    public TestInheritance() {\r\n-    }\r\n-\r\n-    public TestInheritance(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp()\r\n-        throws Exception {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        deleteAll(RuntimeTest2.class);\r\n-        deleteAll(RuntimeTest3.class);\r\n-\r\n-        // create some instances to query on\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        pm.persist(new RuntimeTest1(\"RuntimeTest1-instance\", 2));\r\n-        pm.persist(new RuntimeTest2(\"RuntimeTest2-instance\", 3));\r\n-        pm.persist(new RuntimeTest3(\"RuntimeTest3-instance\", 4));\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that we can get all three objects via an extent.\r\n-     */\r\n-    public void testGetAllRuntimeTest1s() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest1 o\");\r\n-        Collection c = (Collection) q.getResultList();\r\n-        assertEquals(3, c.size());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that we can get all RuntimeTest2 objects via an extent.\r\n-     */\r\n-    public void testGetAllRuntimeTest2s() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest2 o\");\r\n-        Collection c = (Collection) q.getResultList();\r\n-        assertEquals(2, c.size());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that we can get all RuntimeTest3 objects via an extent.\r\n-     */\r\n-    public void testGetAllRuntimeTest3s() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest3 o\");\r\n-        Collection c = (Collection) q.getResultList();\r\n-        assertEquals(1, c.size());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that we can get just RuntimeTest1s via an extent.\r\n-     */\r\n-    public void testGetJustRuntimeTest1s() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest1 o\");\r\n-        q.setSubclasses(false);\r\n-\r\n-//        OpenJPAQuery q = pm.createNativeQuery(\"\",RuntimeTest1.class);\r\n-//        FIXME jthomas\r\n-//        q.setCandidates(pm.getExtent(RuntimeTest1.class, false));\r\n-        Collection c = (Collection) q.getResultList();\r\n-        assertEquals(1, c.size());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that we can get just RuntimeTest2s via an extent.\r\n-     */\r\n-    public void testGetJustRuntimeTest2s() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest2 o\");\r\n-        q.setSubclasses(false);\r\n-\r\n-//        FIXME jthomas        \r\n-//        OpenJPAQuery q = pm.createNativeQuery(\"\",RuntimeTest2.class);\r\n-//        q.setCandidates(pm.createExtent(RuntimeTest2.class, false));\r\n-        Collection c = (Collection) q.getResultList();\r\n-        assertEquals(1, c.size());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    /**\r\n-     * Tests that we can get just RuntimeTest3s via an extent.\r\n-     */\r\n-    public void testGetJustRuntimeTest3() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest3 o\");\r\n-        q.setSubclasses(false);\r\n-\r\n-//      FIXME jthomas\r\n-//        OpenJPAQuery q = pm.createNativeQuery(\"\",RuntimeTest3.class);\r\n-//        q.setCandidates(pm.getExtent(RuntimeTest3.class, false));\r\n-        Collection c = (Collection) q.getResultList();\r\n-        assertEquals(1, c.size());\r\n-        endEm(pm);\r\n-    }\r\n-}\r\n+/*\n+ * TestInheritance.java\n+ *\n+ * Created on October 12, 2006, 11:46 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Collection;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestInheritance extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestInheritance\n+     */\n+    public TestInheritance() {\n+    }\n+\n+    public TestInheritance(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp()\n+        throws Exception {\n+        deleteAll(RuntimeTest1.class);\n+        deleteAll(RuntimeTest2.class);\n+        deleteAll(RuntimeTest3.class);\n+\n+        // create some instances to query on\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        pm.persist(new RuntimeTest1(\"RuntimeTest1-instance\", 2));\n+        pm.persist(new RuntimeTest2(\"RuntimeTest2-instance\", 3));\n+        pm.persist(new RuntimeTest3(\"RuntimeTest3-instance\", 4));\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * Tests that we can get all three objects via an extent.\n+     */\n+    public void testGetAllRuntimeTest1s() {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest1 o\");\n+        Collection c = (Collection) q.getResultList();\n+        assertEquals(3, c.size());\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * Tests that we can get all RuntimeTest2 objects via an extent.\n+     */\n+    public void testGetAllRuntimeTest2s() {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest2 o\");\n+        Collection c = (Collection) q.getResultList();\n+        assertEquals(2, c.size());\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * Tests that we can get all RuntimeTest3 objects via an extent.\n+     */\n+    public void testGetAllRuntimeTest3s() {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest3 o\");\n+        Collection c = (Collection) q.getResultList();\n+        assertEquals(1, c.size());\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * Tests that we can get just RuntimeTest1s via an extent.\n+     */\n+    public void testGetJustRuntimeTest1s() {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest1 o\");\n+        q.setSubclasses(false);\n+\n+//        OpenJPAQuery q = pm.createNativeQuery(\"\",RuntimeTest1.class);\n+//        FIXME jthomas\n+//        q.setCandidates(pm.getExtent(RuntimeTest1.class, false));\n+        Collection c = (Collection) q.getResultList();\n+        assertEquals(1, c.size());\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * Tests that we can get just RuntimeTest2s via an extent.\n+     */\n+    public void testGetJustRuntimeTest2s() {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest2 o\");\n+        q.setSubclasses(false);\n+\n+//        FIXME jthomas        \n+//        OpenJPAQuery q = pm.createNativeQuery(\"\",RuntimeTest2.class);\n+//        q.setCandidates(pm.createExtent(RuntimeTest2.class, false));\n+        Collection c = (Collection) q.getResultList();\n+        assertEquals(1, c.size());\n+        endEm(pm);\n+    }\n+\n+    /**\n+     * Tests that we can get just RuntimeTest3s via an extent.\n+     */\n+    public void testGetJustRuntimeTest3() {\n+        OpenJPAEntityManager pm = getPM();\n+        OpenJPAQuery q = pm.createQuery(\"SELECT o FROM RuntimeTest3 o\");\n+        q.setSubclasses(false);\n+\n+//      FIXME jthomas\n+//        OpenJPAQuery q = pm.createNativeQuery(\"\",RuntimeTest3.class);\n+//        q.setCandidates(pm.getExtent(RuntimeTest3.class, false));\n+        Collection c = (Collection) q.getResultList();\n+        assertEquals(1, c.size());\n+        endEm(pm);\n+    }\n+}"},{"sha":"86a31b229dc874ef5ad9cb8192646e0b7227b1d0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","status":"modified","additions":181,"deletions":181,"changes":362,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInitialValueFetching.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,181 +1,181 @@\n-/*\r\n- * TestInitialValueFetching.java\r\n- *\r\n- * Created on October 12, 2006, 11:58 AM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.Date;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.RestoreStateType;\r\n-\r\n-public class TestInitialValueFetching extends BaseKernelTest {\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestInitialValueFetching\r\n-     */\r\n-    public TestInitialValueFetching(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        RuntimeTest1 rt1 = new RuntimeTest1(\"TestInitialValueFetching\", 10);\r\n-        pm.persist(rt1);\r\n-\r\n-        rt1.setDateField(new Date());\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testInitialValueString() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        RuntimeTest1 rt1 = getObject(pm);\r\n-        OpenJPAStateManager sm = getStateManager(rt1, pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\r\n-        assertEquals(\"TestInitialValueFetching\",\r\n-            sm.fetchInitialField(fmd.getIndex()));\r\n-        rt1.setStringField(\"TestInitialValueFetching-2\");\r\n-        assertEquals(\"TestInitialValueFetching\",\r\n-            sm.fetchInitialField(fmd.getIndex()));\r\n-        endTx(pm);\r\n-        assertEquals(\"TestInitialValueFetching-2\",\r\n-            sm.fetchInitialField(fmd.getIndex()));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testInitialValueInt() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm);\r\n-        RuntimeTest1 rt1 = getObject(pm);\r\n-        OpenJPAStateManager sm = getStateManager(rt1, pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"intField1\");\r\n-        assertEquals(10,\r\n-            ((Integer) sm.fetchInitialField(fmd.getIndex())).intValue());\r\n-        rt1.setIntField1(11);\r\n-        assertEquals(10,\r\n-            ((Integer) sm.fetchInitialField(fmd.getIndex())).intValue());\r\n-        endTx(pm);\r\n-        assertEquals(11,\r\n-            ((Integer) sm.fetchInitialField(fmd.getIndex())).intValue());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testInitialValueMutableValueFailures() {\r\n-        Map props = new HashMap();\r\n-        props.put(\"openjpa.RestoreMutableValues\", \"false\");\r\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\r\n-            getEmf(props);\r\n-\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)\r\n-            pmf.createEntityManager();\r\n-        RuntimeTest1 rt1 = getObject(pm);\r\n-\r\n-        Date d = rt1.getDateField();\r\n-        OpenJPAStateManager sm = getStateManager(rt1, pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"dateField\");\r\n-        try {\r\n-            sm.fetchInitialField(fmd.getIndex());\r\n-            fail(\"should get an exception if RestoreMutableValues is false\");\r\n-        } catch (org.apache.openjpa.util.UserException e) {\r\n-            // expected\r\n-        }\r\n-        endEm(pm);\r\n-        pmf.close();\r\n-    }\r\n-\r\n-    public void testInitialValueDate() {\r\n-        Map props = new HashMap();\r\n-        props.put(\"openjpa.RestoreState\", \"all\");\r\n-        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\r\n-            getEmf(props);\r\n-        OpenJPAEntityManager pm = (OpenJPAEntityManager)\r\n-            pmf.createEntityManager();\r\n-        startTx(pm);\r\n-        RuntimeTest1 rt1 = getObject(pm);\r\n-\r\n-        Date d = rt1.getDateField();\r\n-\r\n-        OpenJPAStateManager sm = getStateManager(rt1, pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"dateField\");\r\n-        assertEquals(d, sm.fetchInitialField(fmd.getIndex()));\r\n-\r\n-        // == should pass here since we haven't made any modifications.\r\n-        assertTrue(\"mutable object fails == test; should not\",\r\n-            d == sm.fetchInitialField(fmd.getIndex()));\r\n-\r\n-        Date d2 = new Date();\r\n-        rt1.setDateField(d2);\r\n-        assertEquals(d, sm.fetchInitialField(fmd.getIndex()));\r\n-        endTx(pm);\r\n-        assertEquals(d2, sm.fetchInitialField(fmd.getIndex()));\r\n-        assertTrue(\"mutable object passes == test; should not\",\r\n-            d2 != sm.fetchInitialField(fmd.getIndex()));\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testInitialValueExceptions() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        pm.setRestoreState(RestoreStateType.NONE);\r\n-        startTx(pm);\r\n-        RuntimeTest1 rt1 = getObject(pm);\r\n-        OpenJPAStateManager sm = getStateManager(rt1, pm);\r\n-        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\r\n-        try {\r\n-            sm.fetchInitialField(fmd.getIndex());\r\n-            fail(\"exception should be thrown by KodoSM.fetchInitialField\");\r\n-        } catch (org.apache.openjpa.util.UserException e) {\r\n-            // expected case\r\n-        }\r\n-        endTx(pm);\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    private RuntimeTest1 getObject(OpenJPAEntityManager pm) {\r\n-//        return (RuntimeTest1) ((Collection) \r\n-//        \t\tpm.createNativeQuery( \"stringField == \\\"TestInitialValueFetching\\\"\",RuntimeTest1.class)\r\n-//        .getResultList()).iterator().next();\r\n-\r\n-        OpenJPAQuery q = pm.createQuery(\r\n-            \"SELECT o FROM RuntimeTest1 o WHERE o.stringField = \\'TestInitialValueFetching\\'\");\r\n-        List l = q.getResultList();\r\n-\r\n-        return (RuntimeTest1) l.iterator().next();\r\n-    }\r\n-}\r\n+/*\n+ * TestInitialValueFetching.java\n+ *\n+ * Created on October 12, 2006, 11:58 AM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.RestoreStateType;\n+\n+public class TestInitialValueFetching extends BaseKernelTest {\n+\n+    /**\n+     * Creates a new instance of TestInitialValueFetching\n+     */\n+    public TestInitialValueFetching(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        RuntimeTest1 rt1 = new RuntimeTest1(\"TestInitialValueFetching\", 10);\n+        pm.persist(rt1);\n+\n+        rt1.setDateField(new Date());\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    public void testInitialValueString() {\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        RuntimeTest1 rt1 = getObject(pm);\n+        OpenJPAStateManager sm = getStateManager(rt1, pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\n+        assertEquals(\"TestInitialValueFetching\",\n+            sm.fetchInitialField(fmd.getIndex()));\n+        rt1.setStringField(\"TestInitialValueFetching-2\");\n+        assertEquals(\"TestInitialValueFetching\",\n+            sm.fetchInitialField(fmd.getIndex()));\n+        endTx(pm);\n+        assertEquals(\"TestInitialValueFetching-2\",\n+            sm.fetchInitialField(fmd.getIndex()));\n+        endEm(pm);\n+    }\n+\n+    public void testInitialValueInt() {\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm);\n+        RuntimeTest1 rt1 = getObject(pm);\n+        OpenJPAStateManager sm = getStateManager(rt1, pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"intField1\");\n+        assertEquals(10,\n+            ((Integer) sm.fetchInitialField(fmd.getIndex())).intValue());\n+        rt1.setIntField1(11);\n+        assertEquals(10,\n+            ((Integer) sm.fetchInitialField(fmd.getIndex())).intValue());\n+        endTx(pm);\n+        assertEquals(11,\n+            ((Integer) sm.fetchInitialField(fmd.getIndex())).intValue());\n+        endEm(pm);\n+    }\n+\n+    public void testInitialValueMutableValueFailures() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.RestoreMutableValues\", \"false\");\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n+            getEmf(props);\n+\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)\n+            pmf.createEntityManager();\n+        RuntimeTest1 rt1 = getObject(pm);\n+\n+        Date d = rt1.getDateField();\n+        OpenJPAStateManager sm = getStateManager(rt1, pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"dateField\");\n+        try {\n+            sm.fetchInitialField(fmd.getIndex());\n+            fail(\"should get an exception if RestoreMutableValues is false\");\n+        } catch (org.apache.openjpa.util.UserException e) {\n+            // expected\n+        }\n+        endEm(pm);\n+        pmf.close();\n+    }\n+\n+    public void testInitialValueDate() {\n+        Map props = new HashMap();\n+        props.put(\"openjpa.RestoreState\", \"all\");\n+        OpenJPAEntityManagerFactory pmf = (OpenJPAEntityManagerFactory)\n+            getEmf(props);\n+        OpenJPAEntityManager pm = (OpenJPAEntityManager)\n+            pmf.createEntityManager();\n+        startTx(pm);\n+        RuntimeTest1 rt1 = getObject(pm);\n+\n+        Date d = rt1.getDateField();\n+\n+        OpenJPAStateManager sm = getStateManager(rt1, pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"dateField\");\n+        assertEquals(d, sm.fetchInitialField(fmd.getIndex()));\n+\n+        // == should pass here since we haven't made any modifications.\n+        assertTrue(\"mutable object fails == test; should not\",\n+            d == sm.fetchInitialField(fmd.getIndex()));\n+\n+        Date d2 = new Date();\n+        rt1.setDateField(d2);\n+        assertEquals(d, sm.fetchInitialField(fmd.getIndex()));\n+        endTx(pm);\n+        assertEquals(d2, sm.fetchInitialField(fmd.getIndex()));\n+        assertTrue(\"mutable object passes == test; should not\",\n+            d2 != sm.fetchInitialField(fmd.getIndex()));\n+        endEm(pm);\n+    }\n+\n+    public void testInitialValueExceptions() {\n+        OpenJPAEntityManager pm = getPM();\n+        pm.setRestoreState(RestoreStateType.NONE);\n+        startTx(pm);\n+        RuntimeTest1 rt1 = getObject(pm);\n+        OpenJPAStateManager sm = getStateManager(rt1, pm);\n+        FieldMetaData fmd = sm.getMetaData().getField(\"stringField\");\n+        try {\n+            sm.fetchInitialField(fmd.getIndex());\n+            fail(\"exception should be thrown by KodoSM.fetchInitialField\");\n+        } catch (org.apache.openjpa.util.UserException e) {\n+            // expected case\n+        }\n+        endTx(pm);\n+        endEm(pm);\n+    }\n+\n+    private RuntimeTest1 getObject(OpenJPAEntityManager pm) {\n+//        return (RuntimeTest1) ((Collection) \n+//        \t\tpm.createNativeQuery( \"stringField == \\\"TestInitialValueFetching\\\"\",RuntimeTest1.class)\n+//        .getResultList()).iterator().next();\n+\n+        OpenJPAQuery q = pm.createQuery(\n+            \"SELECT o FROM RuntimeTest1 o WHERE o.stringField = \\'TestInitialValueFetching\\'\");\n+        List l = q.getResultList();\n+\n+        return (RuntimeTest1) l.iterator().next();\n+    }\n+}"},{"sha":"888d1569fcff36a987af4f691cedda0e187bc8eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","status":"modified","additions":291,"deletions":291,"changes":582,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestInstanceCallbacks.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,291 +1,291 @@\n-/*\r\n- * TestInstanceCallbacks.java\r\n- *\r\n- * Created on October 12, 2006, 1:19 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest;\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import junit.framework.AssertionFailedError;\r\n-\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-\r\n-public class TestInstanceCallbacks extends BaseKernelTest {\r\n-\r\n-    private static final int COMMIT = 0;\r\n-    private static final int FLUSH = 1;\r\n-    private static final int PRESTORE = 2;\r\n-\r\n-    private OpenJPAEntityManager _pm = null;\r\n-    private InstanceCallbacksTest _callbacks = null;\r\n-\r\n-    public TestInstanceCallbacks(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestInstanceCallbacks\r\n-     */\r\n-    public TestInstanceCallbacks() {\r\n-    }\r\n-\r\n-    public void setUp() throws Exception {\r\n-        deleteAll(InstanceCallbacksTest.class);\r\n-        deleteAll(RuntimeTest1.class);\r\n-        _pm = getPM(true, true);\r\n-        startTx(_pm);\r\n-        _callbacks = new InstanceCallbacksTest();\r\n-        _callbacks.setStringField(\"foo\");\r\n-        _pm.persist(_callbacks);\r\n-        Object id = _pm.getObjectId(_callbacks);\r\n-        endTx(_pm);\r\n-        endEm(_pm);\r\n-\r\n-        // re-find with different PM\r\n-        _pm = getPM();\r\n-        _callbacks =\r\n-            (InstanceCallbacksTest) _pm.find(InstanceCallbacksTest.class, id);\r\n-    }\r\n-\r\n-    public void tearDown() throws Exception {\r\n-        rollbackTx(_pm);\r\n-        endEm(_pm);\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testPostLoad() {\r\n-        _callbacks.getStringField();\r\n-        assertTrue(_callbacks.postLoadCalled);\r\n-    }\r\n-\r\n-    public void testPreStore() {\r\n-        preStoreTest(COMMIT);\r\n-    }\r\n-\r\n-    public void testPreStoreWithFlush() {\r\n-        preStoreTest(FLUSH);\r\n-    }\r\n-\r\n-    public void testPreStoreWithPreStore() {\r\n-        preStoreTest(PRESTORE);\r\n-    }\r\n-\r\n-    private void preStoreTest(int action) {\r\n-        assertNoCallbacksInvoked(_callbacks);\r\n-//        _pm.begin();\r\n-        startTx(_pm);\r\n-\r\n-        _callbacks.setStringField(\"bar\");\r\n-        Object oid = _pm.getObjectId(_callbacks);\r\n-        if (action == COMMIT) {\r\n-            _pm.flush();\r\n-            endTx(_pm);\r\n-        } else if (action == FLUSH)\r\n-            _pm.flush();\r\n-        else if (action == PRESTORE)\r\n-            _pm.preFlush();\r\n-        assertTrue(\"prestore wasnt called\", _callbacks.preStoreCalled);\r\n-        if (action != COMMIT) {\r\n-//            _pm.commit();\r\n-            if (action != FLUSH)\r\n-                _pm.flush();\r\n-            endTx(_pm);\r\n-        }\r\n-\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        InstanceCallbacksTest callbacks = (InstanceCallbacksTest)\r\n-            pm.find(InstanceCallbacksTest.class, oid);\r\n-        assertNoCallbacksInvoked(callbacks);\r\n-        assertEquals(\"getonetoone strng is not jdoprestore\", \"jdoPreStore\",\r\n-            callbacks.getOneOne().getStringField());\r\n-        endEm(pm);\r\n-    }\r\n-\r\n-    public void testPreDelete() {\r\n-        assertNoCallbacksInvoked(_callbacks);\r\n-        startTx(_pm);\r\n-        _pm.remove(_callbacks);\r\n-        assertTrue(_callbacks.preDeleteCalled);\r\n-        endTx(_pm);\r\n-    }\r\n-\r\n-    public void testPreDeleteRecursion() {\r\n-        assertNoCallbacksInvoked(_callbacks);\r\n-        startTx(_pm);\r\n-        _callbacks.preDeleteCycle = 0;\r\n-        _pm.remove(_callbacks);\r\n-        assertEquals(1, _callbacks.preDeleteCycle);\r\n-        endTx(_pm);\r\n-    }\r\n-\r\n-    public void testSetRelatedReferenceInPreStore() {\r\n-        assertNull(_callbacks.getRelId());\r\n-        InstanceCallbacksTest callbacks2 = new InstanceCallbacksTest();\r\n-        callbacks2.setRelId(_pm.getObjectId(_callbacks));\r\n-        startTx(_pm);\r\n-        _pm.persist(callbacks2);\r\n-        _pm.flush();\r\n-        endTx(_pm);\r\n-        assertEquals(8888, _callbacks.getIntField());\r\n-        try {\r\n-            assertEquals(callbacks2, _callbacks.getRel());\r\n-        } catch (AssertionFailedError afe) {\r\n-            bug(1162, afe, \"Setting a related object reference in \"\r\n-                + \"preStore fails\");\r\n-        }\r\n-    }\r\n-\r\n-    public void testFlushCausesFlush() {\r\n-        //### JDO2MIG : this is failing because we're consuming exceptions\r\n-        // throws from callbacks; need to decide what to do with them\r\n-        causeFlushTest(FLUSH);\r\n-    }\r\n-\r\n-    public void testPreStoreCausesFlush() {\r\n-        //### JDO2MIG : this is failing because we're consuming exceptions\r\n-        // throws from callbacks; need to decide what to do with them\r\n-        causeFlushTest(PRESTORE);\r\n-    }\r\n-\r\n-    private void causeFlushTest(int action) {\r\n-        startTx(_pm);\r\n-        _callbacks.setStringField(\"sss\");\r\n-        _callbacks.flushInPreStore = true;\r\n-        try {\r\n-            if (action == FLUSH)\r\n-                _pm.flush();\r\n-            else\r\n-                _pm.preFlush();\r\n-\r\n-            bug(1139, \"Recursive flush allowed because exception swallowed\");\r\n-        } catch (Exception je) {\r\n-        }\r\n-        rollbackTx(_pm);\r\n-    }\r\n-\r\n-    private void assertNoCallbacksInvoked(InstanceCallbacksTest pc) {\r\n-        OpenJPAEntityManager pm =\r\n-            (OpenJPAEntityManager) currentEntityManager();\r\n-\r\n-        assertFalse(\"Expected preDelete to not have been called for object ID \"\r\n-            + pm.getObjectId(pc), pc.preDeleteCalled);\r\n-        assertFalse(\"Expected preClear to not have been called for object ID \"\r\n-            + pm.getObjectId(pc), pc.preClearCalled);\r\n-        assertFalse(\"Expected preStore to not have been called for object ID \"\r\n-            + pm.getObjectId(pc), pc.preStoreCalled);\r\n-    }\r\n-\r\n-    /* \r\n-    // no JPA equivalent\r\n-\r\n-    public void testDetachAttach()\r\n-    throws Exception {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        DetachAttachEvent pc = (DetachAttachEvent) pm.find\r\n-                (DetachAttachEvent.class,createDetachableId(4));\r\n-        DetachAttachEvent.EVENTS.clear();\r\n-        pc = (DetachAttachEvent) pm.detach(pc);\r\n-        assertDetachEvents(new String[]{ \"PRED4\", \"POSTD4\" });\r\n-        endEm(pm,());\r\n-        \r\n-        assertTrue(pm.isDetached(pc));\r\n-        \r\n-        pm = getPM();\r\n-        startTx(pm,());\r\n-        //FIXME jthomas\r\n-        \r\n-//        pm.addInstanceLifecycleListener(new CreateLifecycleListener() {\r\n-//            public void postCreate(InstanceLifecycleEvent ev) {\r\n-//                fail(\"No post create necessary\");\r\n-//            }\r\n-//        }, null);\r\n-        pm.persist(pc);\r\n-        assertDetachEvents(new String[]{ \"PREA4\", \"POSTA4\" });\r\n-        endTx(pm,());\r\n-        endEm(pm,());\r\n-    }\r\n-    \r\n-    public void testDetachAttachRelations() {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm,());\r\n-        DetachAttachEvent pc = (DetachAttachEvent) pm.find\r\n-                (DetachAttachEvent.class,createDetachableId(2));\r\n-        pc.setOneOne((DetachAttachEvent) pm.find\r\n-                (DetachAttachEvent.class,createDetachableId(4)));\r\n-        endTx(pm,());\r\n-        DetachAttachEvent.EVENTS.clear();\r\n-        pc = (DetachAttachEvent) pm.detach(pc);\r\n-        endEm(pm,());\r\n-        assertDetachEvents(\r\n-                new String[]{ \"PRED2\", \"PRED4\", \"POSTD2\", \"POSTD4\" });\r\n-        \r\n-        pm = getPM();\r\n-        startTx(pm,());\r\n-        pm.persist(pc);\r\n-        assertDetachEvents(\r\n-                new String[]{ \"PREA2\", \"PREA4\", \"POSTA2\", \"POSTA4\" });\r\n-        rollbackTx(pm,());\r\n-        endEm(pm,());\r\n-    }\r\n-    \r\n-    private void assertDetachEvents(String[] expected) {\r\n-        Collection events = DetachAttachEvent.EVENTS;\r\n-        if (expected.length != events.size()) {\r\n-            StringBuffer buf = new StringBuffer();\r\n-            for (int i = 0; i < expected.length; i++)\r\n-                buf.append(expected[i]).append(\",\");\r\n-            buf.append(\"!=\");\r\n-            for (Iterator it = events.iterator(); it.hasNext();)\r\n-                buf.append(it.next()).append(\",\");\r\n-            fail(\"mismatch event count:\" + buf);\r\n-        }\r\n-        String event;\r\n-        for (int i = 0; i < expected.length; i++) {\r\n-            if (!events.remove(expected[i]))\r\n-                fail(\"Event not fired:\" + expected[i]);\r\n-            if (events.contains(expected[i]))\r\n-                fail(\"Event fired twice:\" + expected[i]);\r\n-        }\r\n-        if (!events.isEmpty())\r\n-            fail(\"Excess events fired:\" + events);\r\n-        DetachAttachEvent.EVENTS.clear();\r\n-    }\r\n-    \r\n-    private Object createDetachableId(int field) {\r\n-        OpenJPAEntityManager pm = getPM();\r\n-        startTx(pm,());\r\n-        DetachAttachEvent pc = new DetachAttachEvent();\r\n-        pc.setIntField(field);\r\n-        pm.persist(pc);\r\n-        endTx(pm,());\r\n-        endEm(pm,());\r\n-//        return pm.getObjectId(pc);\r\n-        return pc.getId();\r\n-    }\r\n-    */\r\n-}\r\n+/*\n+ * TestInstanceCallbacks.java\n+ *\n+ * Created on October 12, 2006, 1:19 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest;\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+\n+public class TestInstanceCallbacks extends BaseKernelTest {\n+\n+    private static final int COMMIT = 0;\n+    private static final int FLUSH = 1;\n+    private static final int PRESTORE = 2;\n+\n+    private OpenJPAEntityManager _pm = null;\n+    private InstanceCallbacksTest _callbacks = null;\n+\n+    public TestInstanceCallbacks(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Creates a new instance of TestInstanceCallbacks\n+     */\n+    public TestInstanceCallbacks() {\n+    }\n+\n+    public void setUp() throws Exception {\n+        deleteAll(InstanceCallbacksTest.class);\n+        deleteAll(RuntimeTest1.class);\n+        _pm = getPM(true, true);\n+        startTx(_pm);\n+        _callbacks = new InstanceCallbacksTest();\n+        _callbacks.setStringField(\"foo\");\n+        _pm.persist(_callbacks);\n+        Object id = _pm.getObjectId(_callbacks);\n+        endTx(_pm);\n+        endEm(_pm);\n+\n+        // re-find with different PM\n+        _pm = getPM();\n+        _callbacks =\n+            (InstanceCallbacksTest) _pm.find(InstanceCallbacksTest.class, id);\n+    }\n+\n+    public void tearDown() throws Exception {\n+        rollbackTx(_pm);\n+        endEm(_pm);\n+        super.tearDown();\n+    }\n+\n+    public void testPostLoad() {\n+        _callbacks.getStringField();\n+        assertTrue(_callbacks.postLoadCalled);\n+    }\n+\n+    public void testPreStore() {\n+        preStoreTest(COMMIT);\n+    }\n+\n+    public void testPreStoreWithFlush() {\n+        preStoreTest(FLUSH);\n+    }\n+\n+    public void testPreStoreWithPreStore() {\n+        preStoreTest(PRESTORE);\n+    }\n+\n+    private void preStoreTest(int action) {\n+        assertNoCallbacksInvoked(_callbacks);\n+//        _pm.begin();\n+        startTx(_pm);\n+\n+        _callbacks.setStringField(\"bar\");\n+        Object oid = _pm.getObjectId(_callbacks);\n+        if (action == COMMIT) {\n+            _pm.flush();\n+            endTx(_pm);\n+        } else if (action == FLUSH)\n+            _pm.flush();\n+        else if (action == PRESTORE)\n+            _pm.preFlush();\n+        assertTrue(\"prestore wasnt called\", _callbacks.preStoreCalled);\n+        if (action != COMMIT) {\n+//            _pm.commit();\n+            if (action != FLUSH)\n+                _pm.flush();\n+            endTx(_pm);\n+        }\n+\n+        OpenJPAEntityManager pm = getPM();\n+        InstanceCallbacksTest callbacks = (InstanceCallbacksTest)\n+            pm.find(InstanceCallbacksTest.class, oid);\n+        assertNoCallbacksInvoked(callbacks);\n+        assertEquals(\"getonetoone strng is not jdoprestore\", \"jdoPreStore\",\n+            callbacks.getOneOne().getStringField());\n+        endEm(pm);\n+    }\n+\n+    public void testPreDelete() {\n+        assertNoCallbacksInvoked(_callbacks);\n+        startTx(_pm);\n+        _pm.remove(_callbacks);\n+        assertTrue(_callbacks.preDeleteCalled);\n+        endTx(_pm);\n+    }\n+\n+    public void testPreDeleteRecursion() {\n+        assertNoCallbacksInvoked(_callbacks);\n+        startTx(_pm);\n+        _callbacks.preDeleteCycle = 0;\n+        _pm.remove(_callbacks);\n+        assertEquals(1, _callbacks.preDeleteCycle);\n+        endTx(_pm);\n+    }\n+\n+    public void testSetRelatedReferenceInPreStore() {\n+        assertNull(_callbacks.getRelId());\n+        InstanceCallbacksTest callbacks2 = new InstanceCallbacksTest();\n+        callbacks2.setRelId(_pm.getObjectId(_callbacks));\n+        startTx(_pm);\n+        _pm.persist(callbacks2);\n+        _pm.flush();\n+        endTx(_pm);\n+        assertEquals(8888, _callbacks.getIntField());\n+        try {\n+            assertEquals(callbacks2, _callbacks.getRel());\n+        } catch (AssertionFailedError afe) {\n+            bug(1162, afe, \"Setting a related object reference in \"\n+                + \"preStore fails\");\n+        }\n+    }\n+\n+    public void testFlushCausesFlush() {\n+        //### JDO2MIG : this is failing because we're consuming exceptions\n+        // throws from callbacks; need to decide what to do with them\n+        causeFlushTest(FLUSH);\n+    }\n+\n+    public void testPreStoreCausesFlush() {\n+        //### JDO2MIG : this is failing because we're consuming exceptions\n+        // throws from callbacks; need to decide what to do with them\n+        causeFlushTest(PRESTORE);\n+    }\n+\n+    private void causeFlushTest(int action) {\n+        startTx(_pm);\n+        _callbacks.setStringField(\"sss\");\n+        _callbacks.flushInPreStore = true;\n+        try {\n+            if (action == FLUSH)\n+                _pm.flush();\n+            else\n+                _pm.preFlush();\n+\n+            bug(1139, \"Recursive flush allowed because exception swallowed\");\n+        } catch (Exception je) {\n+        }\n+        rollbackTx(_pm);\n+    }\n+\n+    private void assertNoCallbacksInvoked(InstanceCallbacksTest pc) {\n+        OpenJPAEntityManager pm =\n+            (OpenJPAEntityManager) currentEntityManager();\n+\n+        assertFalse(\"Expected preDelete to not have been called for object ID \"\n+            + pm.getObjectId(pc), pc.preDeleteCalled);\n+        assertFalse(\"Expected preClear to not have been called for object ID \"\n+            + pm.getObjectId(pc), pc.preClearCalled);\n+        assertFalse(\"Expected preStore to not have been called for object ID \"\n+            + pm.getObjectId(pc), pc.preStoreCalled);\n+    }\n+\n+    /* \n+    // no JPA equivalent\n+\n+    public void testDetachAttach()\n+    throws Exception {\n+        OpenJPAEntityManager pm = getPM();\n+        DetachAttachEvent pc = (DetachAttachEvent) pm.find\n+                (DetachAttachEvent.class,createDetachableId(4));\n+        DetachAttachEvent.EVENTS.clear();\n+        pc = (DetachAttachEvent) pm.detach(pc);\n+        assertDetachEvents(new String[]{ \"PRED4\", \"POSTD4\" });\n+        endEm(pm,());\n+        \n+        assertTrue(pm.isDetached(pc));\n+        \n+        pm = getPM();\n+        startTx(pm,());\n+        //FIXME jthomas\n+        \n+//        pm.addInstanceLifecycleListener(new CreateLifecycleListener() {\n+//            public void postCreate(InstanceLifecycleEvent ev) {\n+//                fail(\"No post create necessary\");\n+//            }\n+//        }, null);\n+        pm.persist(pc);\n+        assertDetachEvents(new String[]{ \"PREA4\", \"POSTA4\" });\n+        endTx(pm,());\n+        endEm(pm,());\n+    }\n+    \n+    public void testDetachAttachRelations() {\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm,());\n+        DetachAttachEvent pc = (DetachAttachEvent) pm.find\n+                (DetachAttachEvent.class,createDetachableId(2));\n+        pc.setOneOne((DetachAttachEvent) pm.find\n+                (DetachAttachEvent.class,createDetachableId(4)));\n+        endTx(pm,());\n+        DetachAttachEvent.EVENTS.clear();\n+        pc = (DetachAttachEvent) pm.detach(pc);\n+        endEm(pm,());\n+        assertDetachEvents(\n+                new String[]{ \"PRED2\", \"PRED4\", \"POSTD2\", \"POSTD4\" });\n+        \n+        pm = getPM();\n+        startTx(pm,());\n+        pm.persist(pc);\n+        assertDetachEvents(\n+                new String[]{ \"PREA2\", \"PREA4\", \"POSTA2\", \"POSTA4\" });\n+        rollbackTx(pm,());\n+        endEm(pm,());\n+    }\n+    \n+    private void assertDetachEvents(String[] expected) {\n+        Collection events = DetachAttachEvent.EVENTS;\n+        if (expected.length != events.size()) {\n+            StringBuffer buf = new StringBuffer();\n+            for (int i = 0; i < expected.length; i++)\n+                buf.append(expected[i]).append(\",\");\n+            buf.append(\"!=\");\n+            for (Iterator it = events.iterator(); it.hasNext();)\n+                buf.append(it.next()).append(\",\");\n+            fail(\"mismatch event count:\" + buf);\n+        }\n+        String event;\n+        for (int i = 0; i < expected.length; i++) {\n+            if (!events.remove(expected[i]))\n+                fail(\"Event not fired:\" + expected[i]);\n+            if (events.contains(expected[i]))\n+                fail(\"Event fired twice:\" + expected[i]);\n+        }\n+        if (!events.isEmpty())\n+            fail(\"Excess events fired:\" + events);\n+        DetachAttachEvent.EVENTS.clear();\n+    }\n+    \n+    private Object createDetachableId(int field) {\n+        OpenJPAEntityManager pm = getPM();\n+        startTx(pm,());\n+        DetachAttachEvent pc = new DetachAttachEvent();\n+        pc.setIntField(field);\n+        pm.persist(pc);\n+        endTx(pm,());\n+        endEm(pm,());\n+//        return pm.getObjectId(pc);\n+        return pc.getId();\n+    }\n+    */\n+}"},{"sha":"9e57ee81eb678f1435517d4e8639b9f4b7cab3ab","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","status":"modified","additions":148,"deletions":148,"changes":296,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultiThreaded.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,148 +1,148 @@\n-/*\r\n- * TestMultiThreaded.java\r\n- *\r\n- * Created on October 12, 2006, 2:21 PM\r\n- *\r\n- * To change this template, choose Tools | Template Manager\r\n- * and open the template in the editor.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.kernel;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Iterator;\r\n-import java.util.Map;\r\n-\r\n-\r\n-\r\n-import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-\r\n-public class TestMultiThreaded extends BaseKernelTest {\r\n-\r\n-    static int serial = 5;\r\n-    static int threads = 5;\r\n-    static int iterations = 5;\r\n-\r\n-    private OpenJPAEntityManager pm;\r\n-    private Object id;\r\n-    private String name;\r\n-\r\n-    /**\r\n-     * Creates a new instance of TestMultiThreaded\r\n-     */\r\n-    public TestMultiThreaded() {\r\n-    }\r\n-\r\n-    public TestMultiThreaded(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    public void setUp() {\r\n-        deleteAll(RuntimeTest1.class);\r\n-\r\n-        OpenJPAEntityManager pm2 = getPM();\r\n-        startTx(pm2);\r\n-        name = \"testMultiThreaded\" + Math.random();\r\n-        RuntimeTest1 a = new RuntimeTest1(name,\r\n-            (int) (Math.random() * Integer.MAX_VALUE));\r\n-        pm2.persist(a);\r\n-        id = pm2.getObjectId(a);\r\n-        endTx(pm2);\r\n-\r\n-        Map props = new HashMap();\r\n-        props.put(\"openjpa.Multithreaded\", \"true\");\r\n-        OpenJPAEntityManagerFactory pmf =\r\n-            (OpenJPAEntityManagerFactory) getEmf(props);\r\n-        pm = pmf.createEntityManager();\r\n-        startTx(pm);\r\n-    }\r\n-\r\n-    public void tearDown()\r\n-        throws Exception {\r\n-        try {\r\n-            rollbackTx(pm);\r\n-            endEm(pm);\r\n-        } catch (Exception e) {\r\n-            // this is not what we are testing\r\n-        }\r\n-        super.tearDown();\r\n-    }\r\n-\r\n-    public void testgetTransaction() {\r\n-        mttest(serial, threads, iterations);\r\n-        pm.getTransaction();\r\n-    }\r\n-\r\n-    public void testGetObjectById() {\r\n-        mttest(serial, threads, iterations);\r\n-        assertNotNull(pm.find(RuntimeTest1.class, id));\r\n-    }\r\n-\r\n-    public void testQueryExecution() {\r\n-        mttest(serial, threads, iterations);\r\n-        OpenJPAQuery q = pm.createQuery(\"select o from RuntimeTest1 o \"\r\n-            + \"where o.stringField = '\" + name + \"'\");\r\n-        assertEquals(1, q.getResultList().size());\r\n-    }\r\n-\r\n-    public void testDeletePersistent() {\r\n-        mttest(serial, threads, iterations);\r\n-        pm.removeAll(pm.createQuery(\"select o from RuntimeTest1 o \"\r\n-            + \"where o.stringField = '\" + name + \"'\").getResultList());\r\n-    }\r\n-\r\n-    public void testRefreshAll() {\r\n-        mttest(serial, threads, iterations);\r\n-        pm.refreshAll();\r\n-    }\r\n-\r\n-    public void testEvictAll() {\r\n-        mttest(serial, threads, iterations);\r\n-        pm.evictAll();\r\n-    }\r\n-\r\n-    public void testIterateExtent()\r\n-        throws Throwable {\r\n-        if (timeout(120 * 1000)) return;\r\n-\r\n-        mttest(serial, threads, iterations);\r\n-\r\n-        assertTrue(\"Transaction should have been active\",\r\n-            pm.getTransaction().isActive());\r\n-\r\n-        for (int i = 0; i < 3; i++) {\r\n-            pm.persist(new RuntimeTest1(\"testIterateExtent\" + Math.random(),\r\n-                (int) (Math.random() * Integer.MAX_VALUE)));\r\n-        }\r\n-\r\n-        assertTrue(\"Transaction should have been active\",\r\n-            pm.getTransaction().isActive());\r\n-\r\n-        for (Iterator i = pm.createExtent(RuntimeTest1.class, true).iterator();\r\n-            i.hasNext(); i.next())\r\n-            ;\r\n-\r\n-        assertTrue(\"Transaction should have been active\",\r\n-            pm.getTransaction().isActive());\r\n-    }\r\n-}\r\n+/*\n+ * TestMultiThreaded.java\n+ *\n+ * Created on October 12, 2006, 2:21 PM\n+ *\n+ * To change this template, choose Tools | Template Manager\n+ * and open the template in the editor.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.kernel;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+\n+\n+import org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactory;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+\n+public class TestMultiThreaded extends BaseKernelTest {\n+\n+    static int serial = 5;\n+    static int threads = 5;\n+    static int iterations = 5;\n+\n+    private OpenJPAEntityManager pm;\n+    private Object id;\n+    private String name;\n+\n+    /**\n+     * Creates a new instance of TestMultiThreaded\n+     */\n+    public TestMultiThreaded() {\n+    }\n+\n+    public TestMultiThreaded(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        deleteAll(RuntimeTest1.class);\n+\n+        OpenJPAEntityManager pm2 = getPM();\n+        startTx(pm2);\n+        name = \"testMultiThreaded\" + Math.random();\n+        RuntimeTest1 a = new RuntimeTest1(name,\n+            (int) (Math.random() * Integer.MAX_VALUE));\n+        pm2.persist(a);\n+        id = pm2.getObjectId(a);\n+        endTx(pm2);\n+\n+        Map props = new HashMap();\n+        props.put(\"openjpa.Multithreaded\", \"true\");\n+        OpenJPAEntityManagerFactory pmf =\n+            (OpenJPAEntityManagerFactory) getEmf(props);\n+        pm = pmf.createEntityManager();\n+        startTx(pm);\n+    }\n+\n+    public void tearDown()\n+        throws Exception {\n+        try {\n+            rollbackTx(pm);\n+            endEm(pm);\n+        } catch (Exception e) {\n+            // this is not what we are testing\n+        }\n+        super.tearDown();\n+    }\n+\n+    public void testgetTransaction() {\n+        mttest(serial, threads, iterations);\n+        pm.getTransaction();\n+    }\n+\n+    public void testGetObjectById() {\n+        mttest(serial, threads, iterations);\n+        assertNotNull(pm.find(RuntimeTest1.class, id));\n+    }\n+\n+    public void testQueryExecution() {\n+        mttest(serial, threads, iterations);\n+        OpenJPAQuery q = pm.createQuery(\"select o from RuntimeTest1 o \"\n+            + \"where o.stringField = '\" + name + \"'\");\n+        assertEquals(1, q.getResultList().size());\n+    }\n+\n+    public void testDeletePersistent() {\n+        mttest(serial, threads, iterations);\n+        pm.removeAll(pm.createQuery(\"select o from RuntimeTest1 o \"\n+            + \"where o.stringField = '\" + name + \"'\").getResultList());\n+    }\n+\n+    public void testRefreshAll() {\n+        mttest(serial, threads, iterations);\n+        pm.refreshAll();\n+    }\n+\n+    public void testEvictAll() {\n+        mttest(serial, threads, iterations);\n+        pm.evictAll();\n+    }\n+\n+    public void testIterateExtent()\n+        throws Throwable {\n+        if (timeout(120 * 1000)) return;\n+\n+        mttest(serial, threads, iterations);\n+\n+        assertTrue(\"Transaction should have been active\",\n+            pm.getTransaction().isActive());\n+\n+        for (int i = 0; i < 3; i++) {\n+            pm.persist(new RuntimeTest1(\"testIterateExtent\" + Math.random(),\n+                (int) (Math.random() * Integer.MAX_VALUE)));\n+        }\n+\n+        assertTrue(\"Transaction should have been active\",\n+            pm.getTransaction().isActive());\n+\n+        for (Iterator i = pm.createExtent(RuntimeTest1.class, true).iterator();\n+            i.hasNext(); i.next())\n+            ;\n+\n+        assertTrue(\"Transaction should have been active\",\n+            pm.getTransaction().isActive());\n+    }\n+}"},{"sha":"e107596eee021af8aea17c1ba3e0b6e2171a6558","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestMultipleInsertDeleteSameId.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"189b2ddaf985836d7180628ce375555542750685","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","status":"modified","additions":110,"deletions":110,"changes":220,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestNTW.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"36a656ab84add2c163beb166e4f1987b3f25f054","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOpenResultsCommit.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"cf4cf1102ce6b897b7125e47b9b2837452b65df7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","status":"modified","additions":358,"deletions":358,"changes":716,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestOptimisticLockGroups.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"84ec4b4ff4c7669a0393670d986ebc5f642f2590","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","status":"modified","additions":156,"deletions":156,"changes":312,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPCClass.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f820cc0129c8d9b9d75af127534987b9b308d0e9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","status":"modified","additions":296,"deletions":296,"changes":592,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPMMemory.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"0dde414c9219454cf52756db24cc705364d851c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","status":"modified","additions":431,"deletions":431,"changes":862,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"72cc7dad135c52ae48c177103f118a77824f4cbb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","status":"modified","additions":229,"deletions":229,"changes":458,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistenceManagerFactoryImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c2148309ba7118d43a6f2bf0c1bc0d27836d1bad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","status":"modified","additions":352,"deletions":352,"changes":704,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPersistentMaps.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"5c24b494e0ec8b53a8ec1561813a0a4610d9eb57","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","status":"modified","additions":274,"deletions":274,"changes":548,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPessimisticLocking.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1aec2fe1a3191ab6c77babffb205f03213c21ea4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestPojoWithoutAnnotationsCannotBePersisted.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"933ffaf9531491bf243f44bbf16fc8c4804718fd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","status":"modified","additions":526,"deletions":526,"changes":1052,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestProxies2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1aa5be740078705c29b3cf3c4e8a5cbd33b8552c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","status":"modified","additions":224,"deletions":224,"changes":448,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestQueries.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"913bcf9688e713594fbfe8cf1353f16ec63830af","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","status":"modified","additions":142,"deletions":142,"changes":284,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRestoreValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d8aac1d8f5c8cd237448229e4bfab062c37e40bc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","status":"modified","additions":183,"deletions":183,"changes":366,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestRetainValuesInOptimistic.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ee3bf894fd6494f5ef32e71acc44e56bcd0b7c68","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","status":"modified","additions":300,"deletions":300,"changes":600,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbedded.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"bcd51d56e272e16510533da9bcbfd6eb03dfa966","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointEmbeddedPreFlush.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f0d0ab391dcfb5dd289076d06f7a973876dd0b8d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepointOrdering.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2d0758e7d50e0d81167a19f87ba539d4e78ea375","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","status":"modified","additions":509,"deletions":509,"changes":1018,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSavepoints.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"425e9cf0e5391542f646f0595a5698c451dab7b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","status":"modified","additions":780,"deletions":780,"changes":1560,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecondClassValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"094fd710e60c847afee2af4547ac31e483474aae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","status":"modified","additions":286,"deletions":286,"changes":572,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSecurityContext.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"682b17aae45af9aa1e94ce6ba349a0a894b81ad1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSequence.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"60743ede8a430edd4b3b6170a868aada7eaf0440","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","status":"modified","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSerialize.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c1b574756f25d8012a41aff5545d1521a1038975","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","status":"modified","additions":136,"deletions":136,"changes":272,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSimple.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"022d526221bc89fb67b8e38b6c7059bed6617adb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","status":"modified","additions":315,"deletions":315,"changes":630,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"af2f8e50ebdf21cbfa1b0b6a89d1fe40ec043cee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","status":"modified","additions":285,"deletions":285,"changes":570,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestSpecialNumbers2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"68cc3650803047d81893407759ceff27fddadc3c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","status":"modified","additions":193,"deletions":193,"changes":386,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStateManagerImplData.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"dd09b918af09b5ab5c3d355bc606a7f15a08fd37","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","status":"modified","additions":141,"deletions":141,"changes":282,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStaticInnerClasses.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"5657ee31dcb1c90bc65a81ad2cfbbf2c46b02298","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestStoreBlob.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"201b48f883c60beb5d693207b83392eb6521bbc3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","status":"modified","additions":994,"deletions":994,"changes":1988,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/TestTransition2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d10ad43fb46e3bcb7329986a110a66ab4980a14a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AImplB.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"5de5f8c9666165964fbc574145dcaf5268cf4886","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AIntf.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"34da30eb38ec53366a3cf9985ed4093ea88d8c51","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AbstractMappedAppIdSuper.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"696627043eb6f23f1ddc887ed886c52e84f2018f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","status":"modified","additions":303,"deletions":303,"changes":606,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"486c6d6ffd1b832b3ccb05f651ca23b1d4160be8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","status":"modified","additions":269,"deletions":269,"changes":538,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldsTypeTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"adceb19d746ba0824025fa729c4be266a526d573","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","status":"modified","additions":72,"deletions":72,"changes":144,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdClassString.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"98e51cb6c7a32ff690b9016ed7be8fc07982acb7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","status":"modified","additions":179,"deletions":179,"changes":358,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdHolder.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1f2cf0cf967927e6d983b0121e3606c86e31d00f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","status":"modified","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubA.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3b027a166061c9d7229b6f261c73b24f27bc27eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubB.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c297bc786a44c8d4ce133d8c0194fd46fb3afdbc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","status":"modified","additions":113,"deletions":113,"changes":226,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1b53fc82d0bf555aaa8ba403f291d1aba2c6ead4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubD.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e7b77f48d1383cc148c4a213c16b6a3ba31aa6fe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubE.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"4200a7e0ce7f912c282b0fd6dddb989be7686096","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSubF.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"322d1b30b83c4bc629bbe82475fa0a61e85644ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AppIdSuper.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"073bb36e5df34886460a286303280c833e5d839e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","status":"modified","additions":277,"deletions":277,"changes":554,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ArraysTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1898552ebfd2ca900ace76788ce2acbf12f6eebb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachA.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9a5c2fca9b29ae2528efe21cf22047b7fb54e6b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","status":"modified","additions":100,"deletions":100,"changes":200,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachB.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c643ac5978c6c24c4301427126b950a617b1d30f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2923164e21eb34cfeba928d4b7a790ea782ab7b2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","status":"modified","additions":174,"deletions":174,"changes":348,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachD.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1684a70af004c360a038b5f278e4955c56d259f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","status":"modified","additions":127,"deletions":127,"changes":254,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachE.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9da171e9adad87d8e9227c9e1ecb0352df759f9f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","status":"modified","additions":166,"deletions":166,"changes":332,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachF.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2d27496afcd46434567af9ae7cbb723ae2aa1bec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionA.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"eaf1cec8927cb99047e3697e690325ccd4e1724a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionB.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"659892230f52e2f7985210f91b0f175a1f071db6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AttachVersionC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e2716409e016d476d6f7581b147f62559e1ea933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/BlobTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"4837432b4567b7bbf55c89f2b2fad4b891de831b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ByteArray.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"4ba008e3828ac6498ccc6d1eb6940ab67c644d0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/CalendarFields.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"6253465010fdd1baa1bca3e5f41e89d7eb81a502","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ColumnIOPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"52532637288a9223861e6970ad0895bb7bed3a8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ComplexEmbeddedPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1257ff0df8b006ce4cec869693683b78ab0f2523","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ConcreteMappedAppIdSub.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"de22f8fb230f545e49eed9bce23c8b636caadc95","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DateVersion.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"505c54f6412f96dc39fe9164963d84d9a57784da","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","status":"modified","additions":155,"deletions":155,"changes":310,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DependentFieldsPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"cf68771d855c19fc0641de807d7187b7a03ae90d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/DetachSMPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e2f30141084ea6588042f46510871c2c9ef244ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedOwnerPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9a2404d9c34cc7b1c4d85f2b2bfe086b42c83f0e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/EmbeddedPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8d7cf8f7ea76ff1d0c1ad4cf375771a0c9450ef9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8c199b6ab3e9fc3022fe3d8dec18f96c1791736d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Entity2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"424da9d069a58ccadebd10a3a0130fe704fdbf54","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","status":"modified","additions":129,"deletions":129,"changes":258,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ExternalValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"66461e53cc6b41b0669a6a33501dab8947a688b0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","status":"modified","additions":157,"deletions":157,"changes":314,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObject.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1eb3e9329b53ed8b1c284656a8478b9e30101997","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/FetchGroupTestObjectChild.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"779fbfaa0065c66929622fb4b11394ff9a2cb459","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Inner.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2f057b33d0d889530cb73ce87edeabbc295a9859","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","status":"modified","additions":186,"deletions":186,"changes":372,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InstanceCallbacksTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b6301523c160aec17aa29fa47f3c5d325cfc40ed","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","status":"modified","additions":85,"deletions":85,"changes":170,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceHolder.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3507abfd370d8544d2aa5845cc29a109967ff47a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"880842924eb9c348229bb88fca59f278593a4957","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"20eadee808f7b40868ffb001c4034c75303afda6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a587064b07db315932d528549c43eb76016ad8cd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"14da1b7b899f4eab2330088b03c2e216e116757c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"0801d457d78b02d480bb199fad9fd0f2d8973227","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InterfaceTestImpl4.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3a92ab8652f0e2c3419d8b0215e1db51abe25af7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseA.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ad9884e507e7a2bcb21db5861dc970d20aa959f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/InverseB.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"647be156f388cbdfadb7bb82007d7d11b0c4ab15","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","status":"modified","additions":77,"deletions":77,"changes":154,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/Lobs.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"dd0db4db6a1c46df695f9a5bc0f3c8896f48dabe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","status":"modified","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a293740284bd41d551ea9282a30d4deb497cd1d1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPC2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f193df343cbc82182dc68bee783287279da1c2d5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","status":"modified","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/LockGroupPCKnownSubclass.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7b700b5624b5c7bd0138d0c1c06b61260c8cce87","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"dfc58064717299331cad90abbd5af964ba9a35eb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceAppId.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3061c8b050717d7d30ba60770b31b0de7c502e32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceEmbed.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d31da3157bda47c8434732e6cffd9af25bf2066b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwner.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3c1c3955da11d47ab22df1f6e0b34c21afafbf64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceOwnerAppId.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2f53e6325ef1909004511d659eb33e10fac86acd","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSup.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8081aeb3ba08302a69e70da4e3ffa09044146806","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ManagedInterfaceSupAppId.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ff32fd616c119f11983daa4bc57d2aa6b748fd96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","status":"modified","additions":24,"deletions":24,"changes":48,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementIntf.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"fb26d26f88a3e2de52d35fd2061e829adecd834b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"32d9eb54fad96bcbc44ddfa6447f4b1396b0867b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MapElementPCChild.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b4eb8dcf419c82445d234c97eb67113a93a6d1be","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"4ad85ad788fa5a3b80b3dde66accfe5f02253b1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/MixedInterfaceImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"cc728c579e797fd2e386ac9fa582565166e7dcfb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","status":"modified","additions":186,"deletions":186,"changes":372,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModInstanceCallbackTests.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"edbf318ba5008eff2b8d4dec0d5f7ab6ef061819","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"85840185e14bd740700822e9f87897710b3f90a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ModRuntimeTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ccc608c9e01b8213b435e7b66819e57c04b0361f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"df366940f692faa50a449374f93869729982e340","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/NonMappedInterfaceImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"29074c687d0ed2d1d569aa3a5dced0704f7700f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ObjectCollectionHolder.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d15a2edd9f3bf5b2489cadeef2c66ead04c59e62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/OuterJoinValuePC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"cecb8081bce6edf6fe2ed9ab3e05f6e5a73bec9b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCAddress.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e407d2417b893f70b0742153cff4bcd381437e5c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"0f29767dbe0fe219073e33bc2b9e0a6b5f74c7b3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","status":"modified","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCClassPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"03a2e8b4cbe48910e494ca8e471471b0263643cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCompany.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ed9f91f574cbcb04afe2ecd10b8830ba8d9a6831","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCCountry.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9ea46adadca1135b0ef859918d4e1a095f2ffde8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDepartment.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3087418fd723f8a5f2be4d4eed9702ae880989df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","status":"modified","additions":178,"deletions":178,"changes":356,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCDirectory.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e03fc9f79b2a8cfc959246cff75812dcc12cbf65","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCEmployee.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"781981f3e8c66f608d754d32ea2ec3464bcc1be7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","status":"modified","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCFile.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ecdbb4ab5162808faa276a378a93dd70f58810a0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PCPerson.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"05ef8e6a3d31e4332bebaad8d24bb51b42fdf433","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistenceAware.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b63b80cefbff1c24cd386462ffba3320227fe598","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","status":"modified","additions":118,"deletions":118,"changes":236,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/PersistentMapHolder.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e47abdffb7f32692cf6b7845e09d7bc3e6fcab36","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","status":"modified","additions":179,"deletions":179,"changes":358,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ProxiesPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"5411d4770661fc6797b2fe99c162f9807280b02f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RecursivelyEmbeddedPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c1a50d5f0a2a0efd666e993f478a5dd9d897c96d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","status":"modified","additions":158,"deletions":158,"changes":316,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a16bf36a4b4838b7c378e86ef846ec244571e1c1","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"666530c7ae42e574b4c6f5f9d7a7a6be3f27ac04","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7ba7ad88e23586df8c380fd61ccfef99405d13a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest4.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a56c03d0bc824eb0f5dc58ea92a53568b2225c3d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/RuntimeTest5.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c01c8dd30083c936efe0bc3ddd40de111db88739","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","status":"modified","additions":291,"deletions":291,"changes":582,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SCOTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"75e6c2d8f1b6c12709a7a359889d13aca9b1e0bf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SecondaryTab.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8a11e701655691772f1d669695c0d12b3b5f39ec","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"74a33ea6c1f1c27d96f9c334c1e8ad199ff8ec45","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c42357e89eabc623d25ff3cf7a48bbd79f36828c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SequenceAssigned3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ba30ad1f2094c3a8912da6b3f9f819c50850c3b9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleId.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f88fe0e3604132ada24c13bd92ede8bb687c8620","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdByte.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"21ddee61f2dc060e3ae6d09c1308ac690dcec232","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdChar.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"0d3da3e86c9e641339c662a7b6893bbc56123786","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdInt.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"751462a8e26538bc96625cc453486b9fd3d95b9d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdLong.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"608f907303bb879048dbec355adabcc814d83cc5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdShort.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3c3d7cbfc765b56320dad73cad2ac73596667908","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdString.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"494eddc7ea11113a244c1197e84f30d2308bd6b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/SingleIdWrapper.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a5edf616020c1a8d3cb22c4cb1ce8267fa97d606","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/TransactionalClassPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b18820c8cfdae336cce55622af97accc5fb2d0c5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/UnAnnotPojo.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"57e4077ae6f585bc2332430ebedbcd6c6ebd7388","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","status":"modified","additions":132,"deletions":132,"changes":264,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/ValueStrategyPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7d95204d0c9f6ab91ceab338ea9a49bca7f3ca6c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","status":"modified","additions":74,"deletions":74,"changes":148,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestMergeAndPersistWithManagedRelation.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"6b7ec8d7f2e001dcd7a14435a799906d125339d3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/lifecycle/TestPessimisticPNonTransToPDirty.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"08ca30dc9072d917afa2068aa525539ccc06cabc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedIface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9687be61d97a4dcaf389cef91cd6bfacfa65ac2b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceEmbed.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1bd4efbbc3bda231ed38c76476278dd1634bac44","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceOwner.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d9e553bf995940f37757f351bd0b7ef348e5e312","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/ManagedInterfaceSup.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"92b2f9ff5d35c985426a905578cfcf32c7ed0983","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"3c907cff2f96597f276c9f560ed3a7a3db934611","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/MixedInterfaceImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7d11ab70d78d5d27da7bc65abb77082b18f767ee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"cfd83aa07ea469e049d351bc5fd87951c4775b83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/NonMappedInterfaceImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"db606a463a78a03d498bc2fb049ab38bc1787dfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/SimpleManagedInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e378fe1c926fabfc459c768ac9ab0652d41069ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","status":"modified","additions":463,"deletions":463,"changes":926,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestManagedInterfaces.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"12648156ee44e05fad7708cde53595f8b433ceaf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","status":"modified","additions":91,"deletions":91,"changes":182,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/managedinterface/TestSimpleManagedInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"87cd9cd84a29069632ce557ea9e0aa6e92e4ddfe","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java","status":"added","additions":150,"deletions":0,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/TestCascadeOneToManyMerge.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"dab4156ea4b84723f6ba19629b1e19ec21656e74","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/Toy.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a42027aea05acc1d034b097f2229b80e1157bceb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/merge/featureSelection/ToyBox.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b90de89a8252e8868476290f2815f05b1e607567","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","status":"modified","additions":309,"deletions":309,"changes":618,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestClassMetaData.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2b14f0935623b8531ffb5e5499db3ebc1eeb18e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","status":"modified","additions":195,"deletions":195,"changes":390,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestExternalValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"640eb30a72d1ede3db09a473f62089954314b53e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestFieldDeclarationOrder.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8d8f134c47a17f75aafa741bb1a7bcfcc9e546d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","status":"modified","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestNonPersistentFields.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"66bb501349d1418779d97fd5a77c8e2444d278ac","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","status":"modified","additions":283,"deletions":283,"changes":566,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestOrderBy.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9d83833e23621716f06b6f139b275efd648bf291","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestPersistentClasses.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ed81e63208d0610696bf6abb9d92a0a0bfe8fa80","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","status":"modified","additions":172,"deletions":172,"changes":344,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestSequenceAssigned.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"dce945df09a057f0648a6f95a94262bf8983f1f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","status":"modified","additions":404,"deletions":404,"changes":808,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestValueStrategies.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c0669d5de9a090da319257813ad16efb151c38e6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/TestXMLPersistenceMetaDataSerializer.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2e1a9997dceeb0faa5b3541d442e55bd2e369f91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","status":"modified","additions":126,"deletions":126,"changes":252,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ExternalValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"055796e5d379be079888d35623f02a7433a2130a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"af785368be37a3a83e56e179057712de7d2065a3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","status":"modified","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/FieldOrderPCSubclass.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"13a513f6ae6d88e294cfae07befa510abcbeb515","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"10d9405a55de8f5e097fdda1b7ebb22f9ccd0f7a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1917ae9fe8235d5149cb51d494d9e1c7957b793d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9780cb3c75f26faaf3cae013d0a1a458ae738f07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest4.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b6515b658af90bb34631910711594bc4e95d683c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest5.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"451cb4f8b842b837ae4f8f01ad3af189a83b873e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","status":"modified","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/MetaTest6.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2204e121fcee31e3fde5091544930603d1e46073","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/NonPersistentFieldsPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7e747930f293e8efd219b4b9c69f5c2430f88f13","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"99f6b870daa2df9127fe0041aa28493f81bd91e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRel.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"4cac71a7d993a6fdbbac4f3d0568560213b9f8cc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/OrderByPCRelSub.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"be932397659be8b7bd74b4310a6425df5209f2e2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","status":"modified","additions":268,"deletions":268,"changes":536,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"4f3d441d7aeb78ff12a3809ee877c363cc4be18a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e4b2af8926c7ba2129259a64c36e1831a877a1c0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/RuntimeTest3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9329791130ceab04ce74bd8d411a8ddfa2a606ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","status":"modified","additions":70,"deletions":70,"changes":140,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"be621bacc7f9a5d965585ecd9d4829bedd600e29","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a4d48cbd6733de21f91e4ff0e40fd5703d4701c2","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/SequenceAssigned3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"47e2576b99e71c1d4fc8199c1eda003c93e5094f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/TransactionalClassPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9193f882d92c37a39b521407acf9849abd820ab5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","status":"modified","additions":89,"deletions":89,"changes":178,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/meta/common/apps/ValueStrategyPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a64bc7664d35ed188dd170378526e18eff101c8a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","status":"modified","additions":154,"deletions":154,"changes":308,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/NullValues.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"0dfbfaa484f683df16bbb6b444162b43ffb0e976","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","status":"modified","additions":117,"deletions":117,"changes":234,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/nullity/TestBasicFieldNullity.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e4fc151d753dcf1e3dca8d24684790cd03e2f845","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","status":"modified","additions":146,"deletions":146,"changes":292,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/BaseQueryTest.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"0e3b55e619fbf0decaf80b8d08bf73c75c0f096a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/Employee.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"30fdeb649e2ddce2c83252c5856fff8cc5265dfa","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","status":"modified","additions":296,"deletions":296,"changes":592,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/GroupingTestCase.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b580beb7e594e6887d1dd9183824826531236a83","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntity.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b13cfcb10758e676a294c733e4d0bd6f2dc4e9f7","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/ManyOneEntitySub.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"43773aa251ba0c8a5341aedb321cbfe0f4a68f1a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/NamedQueryEntity.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"973d9150ad62805e002725d7494b0d8dce9617ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"fc389048adc795703cc174b638bf6cbf736ec8ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/SimpleEntity2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a0a2f5b3eae0fd35a8c58c7da0bbd520c4f15772","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestAccessPathsOfSubqueries.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c5024e20c8ff78b21b16f231142ff5d16e5a388b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","status":"modified","additions":292,"deletions":292,"changes":584,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestComplexQueries.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"43b22bf899d400fd83832e9d62c119191ef2b02d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDataStoreActions.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8fb0a383c7ff79e5b79c60781d4956e37d36f38e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestDistinctQueries.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8bef284f39df47a43a9cab57217cb46a81454013","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","status":"modified","additions":197,"deletions":197,"changes":394,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBDeleteUpdateImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"343ad59985bb66bd1b29d306a38fb1c825fbdf4e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBPolymorphicQuery.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"72abb7626daa2fefb8d837b573121f04bacc71df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","status":"modified","additions":151,"deletions":151,"changes":302,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEJBQueryInterface.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"46a7bbad0cc84700059dde18760576f43ef6844e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","status":"modified","additions":55,"deletions":55,"changes":110,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestEscapedSingleQuotesInJPQL.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"702292d4995e5669c6dcd65f838bf7107cf8af19","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestInMemoryQueryMatchEscapes.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c2c3660c98e0cf5c47e01a12a35767a04a236ac9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","status":"modified","additions":90,"deletions":90,"changes":180,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPAQuerySubclassFunc.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"99de6d7a40093ad6b42e1563a534b0764fdd86b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestJPQLWithoutIdentificationVariable.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9681e4e6e8160f1d2059274c09404465743774d8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMathQueries.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d0cdbddd6fe77833c5fe52624ac28a4bb34afaee","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestMethodQLQuery.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"127e6f6a7918a1ed163f7305ecf67a45c4dff939","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","status":"modified","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNamedQueries.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"012d1a290429834f8032e8c5229d9d37668a212a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","status":"modified","additions":133,"deletions":133,"changes":266,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestNewEntityAsQueryParameter.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"16ba10b3a1f8579d658cae4686146d166a2e73dc","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","status":"modified","additions":109,"deletions":109,"changes":218,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestProjectionQueryWithIdenticalResult.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c7b3595ea67cb6e3c4c5be4aabb9d5592974be7c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryEscapeCharacters.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f17c9f202ad30f213f98832e3067ab4fe24847b4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryExpressionSplit.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f99066761ba240356f995df8af297978d095d784","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","status":"modified","additions":625,"deletions":625,"changes":1250,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQueryResults.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"9955ee86e5d2193d7882632dca3aac267a57f325","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","status":"modified","additions":198,"deletions":198,"changes":396,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestQuotedNumbersInFilters2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"bae923d63353a73816b28848c876507f191cbca5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSimple.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"fda12191f75c974f47f46f5609c7d736752704f5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/TestSubstring.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b439aea80b17c9fff532fb8eddddd3859ab91e14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d7bd261dc1b853db4fc136dafecd9e1a08f24464","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CircularFKPC2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"713af3ffa9f18ddc3388dc10446238be3d20b2f3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexA.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1c00962e4ddb46a6ddf861c47f4262e59b9eb050","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexB.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"dfc0ab9db2d771dc54fcb33dbc29d042dc8c7f58","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f779867492a0f0a3f1856b4de787f47be0f1a672","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","status":"modified","additions":96,"deletions":96,"changes":192,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexD.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"388aa1f8830feedb953959f15b8b7fe25dd3ce99","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexE.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"39217b2f60d7b267f4657efdb1823570d4edd2a5","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","status":"modified","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexF.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c1283f5d50b1fd5dd836015ad71e72fc99f9cf5e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ComplexG.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"b8a0755afe888de7625bc74773cd2343ff47588d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","status":"modified","additions":111,"deletions":111,"changes":222,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/CompoundAppIdPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"33df25f5bd6d556e09d5bb6b4d82e158134bc978","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","status":"modified","additions":104,"deletions":104,"changes":208,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"fe0dc96d2aaf3c156995471eb7bfa4e0e6f4665c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","status":"modified","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Entity2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"df562ce5ea4749b737986a246462aa98ffa8b896","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","status":"modified","additions":124,"deletions":124,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"1631d1264d691264f02325c8748d5bb01baafc3e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/ModRuntimeTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"fdbd2e292b8ef44261292ade7d76a646e170c4e3","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Osoba.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"5cea02fadddc01a0d1cd9ac951347cec8abf9b91","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","status":"modified","additions":62,"deletions":62,"changes":124,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/Projekt.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"6d13ac1b045d3623aba652b49d10bb5a2f444940","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","status":"modified","additions":149,"deletions":149,"changes":298,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8cee8087a27a5207ead839bb4e5b6af2bc1fd296","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2963bed64e91036e7f11ca010adb18a9075d26ad","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"df456a3f1900007c07abe894965ec4e1480d4e43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/QueryTest4.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"95c5f1909927feac75075eba253e926bb0a6339c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","status":"modified","additions":283,"deletions":283,"changes":566,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest1.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"60d6bdb6bb9092591299f456abdfe290aed6629d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest2.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a36dd9ae7f62c5c408a5785e289dcd825a02c077","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest3.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7cd6d0f208dbb55a9682d0e45fcd30146ca5e613","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest4.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ddeb21785c5b3132e49ef505b5561523f64d41ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/RuntimeTest5.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e5053e88ba4c98a33d76dce37da7bf7832db879f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/SimpleAppIdPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"70ce9692ca89db65380333bbaad3802d6f594e9a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","status":"modified","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/query/common/apps/TransactionalClassPC.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"13aa958a7f9b883f22ec9e7b33cced57ce827b96","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","status":"modified","additions":61,"deletions":61,"changes":122,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/BasicEntity.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"4a50af786785888d07e254cf7ade30e9d73c18ae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyChild.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f61fce26ae83a3a13099dd57833111089347b60d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","status":"modified","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/CascadingOneManyParent.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"509804e90bd6b842b5986d678c0f9800cbcc190a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","status":"modified","additions":122,"deletions":122,"changes":244,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Customer.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"}]}

