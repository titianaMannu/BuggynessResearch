{"sha":"9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkMzRlZjlkZmMyN2Y5ZmQ1ZTcxMmUxYWZlN2YzYWMyNWQxMTk2NzU=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-13T20:45:02Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2010-01-13T20:45:02Z"},"message":"Copy for tag 1.2.2\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/tags/1.2.2@898935 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"325c1cf7148a4f90bf7a12fd3e521c5b0363f4a0","url":"https://api.github.com/repos/apache/openjpa/git/trees/325c1cf7148a4f90bf7a12fd3e521c5b0363f4a0"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","html_url":"https://github.com/apache/openjpa/commit/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"2e7a9e50a687cc2c6e4098885cf2f781e3e7eb40","url":"https://api.github.com/repos/apache/openjpa/commits/2e7a9e50a687cc2c6e4098885cf2f781e3e7eb40","html_url":"https://github.com/apache/openjpa/commit/2e7a9e50a687cc2c6e4098885cf2f781e3e7eb40"},{"sha":"08672c35f878f1de98ec1719eca850c41aa989a0","url":"https://api.github.com/repos/apache/openjpa/commits/08672c35f878f1de98ec1719eca850c41aa989a0","html_url":"https://github.com/apache/openjpa/commit/08672c35f878f1de98ec1719eca850c41aa989a0"}],"stats":{"total":312418,"additions":160725,"deletions":151693},"files":[{"sha":"88b94bd0101dcbe1a7ca48d008d4d8eb0d87063a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","status":"modified","additions":54,"deletions":54,"changes":108,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreBasicEntity.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,54 +1,54 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-import org.apache.openjpa.persistence.DataStoreId;\r\n-\r\n-@Entity\r\n-@DataStoreId\r\n-public class DataStoreBasicEntity {\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private BasicEntity rel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public BasicEntity getRel() { \r\n-        return rel; \r\n-    }\r\n-\r\n-    public void setRel(BasicEntity rel) { \r\n-        this.rel = rel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+import org.apache.openjpa.persistence.DataStoreId;\n+\n+@Entity\n+@DataStoreId\n+public class DataStoreBasicEntity {\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private BasicEntity rel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public BasicEntity getRel() { \n+        return rel; \n+    }\n+\n+    public void setRel(BasicEntity rel) { \n+        this.rel = rel; \n+    }\n+}"},{"sha":"bf5128c667b7be92e0d696ab98bb26d0c64d3884","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/DataStoreManyOneIdOwner.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class DataStoreManyOneIdOwner {\r\n-\r\n-    @Id\r\n-    @ManyToOne\r\n-    private DataStoreBasicEntity id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private DataStoreManyOneIdOwner selfRel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public DataStoreBasicEntity getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public void setId(DataStoreBasicEntity id) { \r\n-        this.id = id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public DataStoreManyOneIdOwner getSelfRel() { \r\n-        return selfRel; \r\n-    }\r\n-\r\n-    public void setSelfRel(DataStoreManyOneIdOwner selfRel) { \r\n-        this.selfRel = selfRel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class DataStoreManyOneIdOwner {\n+\n+    @Id\n+    @ManyToOne\n+    private DataStoreBasicEntity id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private DataStoreManyOneIdOwner selfRel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public DataStoreBasicEntity getId() { \n+        return id; \n+    }\n+\n+    public void setId(DataStoreBasicEntity id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public DataStoreManyOneIdOwner getSelfRel() { \n+        return selfRel; \n+    }\n+\n+    public void setSelfRel(DataStoreManyOneIdOwner selfRel) { \n+        this.selfRel = selfRel; \n+    }\n+}"},{"sha":"8906e9f48be51827186af0991034e859a277a097","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EmbeddableWithRelation.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-@Embeddable\r\n-public class EmbeddableWithRelation {\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(cascade=CascadeType.ALL)\r\n-    private MultipleSameTypedEmbedded rel;\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public MultipleSameTypedEmbedded getRel() { \r\n-        return rel; \r\n-    }\r\n-\r\n-    public void setRel(MultipleSameTypedEmbedded rel) { \r\n-        this.rel = rel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Embeddable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.ManyToOne;\n+\n+@Embeddable\n+public class EmbeddableWithRelation {\n+\n+    private String name;\n+\n+    @ManyToOne(cascade=CascadeType.ALL)\n+    private MultipleSameTypedEmbedded rel;\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public MultipleSameTypedEmbedded getRel() { \n+        return rel; \n+    }\n+\n+    public void setRel(MultipleSameTypedEmbedded rel) { \n+        this.rel = rel; \n+    }\n+}"},{"sha":"6e09d1138fc1c8da9fbc5d40619ab6fbe67ba9cb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA1InverseEager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.OneToMany;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"A1\")\r\n-public class EntityA1InverseEager extends EntityAInverseEager {\r\n-    private String name1;\r\n-\r\n-\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n-\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n-\t\r\n-\tpublic EntityA1InverseEager() {}\r\n-\t\r\n-\tpublic EntityA1InverseEager(String name) {\r\n-\t    super(name);\r\n-\t    this.name1 = name;\r\n-\t}\r\n-\r\n-\tpublic String getName1() {\r\n-        return name1;\r\n-    }\r\n-    \r\n-    public void setName1(String name1) {\r\n-        this.name1 = name1;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+@DiscriminatorValue(\"A1\")\n+public class EntityA1InverseEager extends EntityAInverseEager {\n+    private String name1;\n+\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\n+\t\n+\tpublic EntityA1InverseEager() {}\n+\t\n+\tpublic EntityA1InverseEager(String name) {\n+\t    super(name);\n+\t    this.name1 = name;\n+\t}\n+\n+\tpublic String getName1() {\n+        return name1;\n+    }\n+    \n+    public void setName1(String name1) {\n+        this.name1 = name1;\n+    }\n+}"},{"sha":"b3591f5a6ff208388b584669ab8458a212d9ad66","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityA2InverseEager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.DiscriminatorValue;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.OneToMany;\r\n-\r\n-@Entity\r\n-@DiscriminatorValue(\"A2\")\r\n-public class EntityA2InverseEager extends EntityAInverseEager {\r\n-    private String name2;\r\n-\r\n-\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n-\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n-\t\r\n-\tpublic EntityA2InverseEager() {}\r\n-\t\r\n-\tpublic EntityA2InverseEager(String name) {\r\n-\t    super(name);\r\n-\t    this.name2 = name;\r\n-\t}\r\n-\r\n-\tpublic String getName2() {\r\n-        return name2;\r\n-    }\r\n-    \r\n-    public void setName2(String name2) {\r\n-        this.name2 = name2;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+@DiscriminatorValue(\"A2\")\n+public class EntityA2InverseEager extends EntityAInverseEager {\n+    private String name2;\n+\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\n+\t\n+\tpublic EntityA2InverseEager() {}\n+\t\n+\tpublic EntityA2InverseEager(String name) {\n+\t    super(name);\n+\t    this.name2 = name;\n+\t}\n+\n+\tpublic String getName2() {\n+        return name2;\n+    }\n+    \n+    public void setName2(String name2) {\n+        this.name2 = name2;\n+    }\n+}"},{"sha":"24b37cf88678f7e55942cdfeed24a004b5b4e395","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityAInverseEager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,71 +1,71 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.DiscriminatorColumn;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Inheritance;\r\n-import javax.persistence.InheritanceType;\r\n-import javax.persistence.OneToMany;\r\n-\r\n-@Entity\r\n-@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\r\n-@DiscriminatorColumn(name=\"TYPE\")\r\n-public class EntityAInverseEager  {\r\n-\t@GeneratedValue\r\n-\t@Id private int id;\r\n-    \r\n-    private String name;\r\n-\r\n-\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\r\n-\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\r\n-\t\r\n-\tpublic EntityAInverseEager() {}\r\n-\t\r\n-\tpublic EntityAInverseEager(String name) {\r\n-\t    this.name = name;\r\n-\t}\r\n-\t\r\n-\tpublic List<EntityBInverseEager> getListB() {\r\n-\t\treturn listB;\r\n-\t}\r\n-\t\r\n-\tpublic List addB(EntityBInverseEager entityB) {\r\n-\t\tlistB.add(entityB);\r\n-\t\treturn listB;\r\n-\t}\r\n-\t\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    \r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.persistence.DiscriminatorColumn;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n+import javax.persistence.OneToMany;\n+\n+@Entity\n+@Inheritance(strategy=InheritanceType.SINGLE_TABLE)\n+@DiscriminatorColumn(name=\"TYPE\")\n+public class EntityAInverseEager  {\n+\t@GeneratedValue\n+\t@Id private int id;\n+    \n+    private String name;\n+\n+\t@OneToMany(fetch=FetchType.EAGER, mappedBy=\"entityA\")\n+\tprivate List<EntityBInverseEager> listB = new ArrayList<EntityBInverseEager>();\n+\t\n+\tpublic EntityAInverseEager() {}\n+\t\n+\tpublic EntityAInverseEager(String name) {\n+\t    this.name = name;\n+\t}\n+\t\n+\tpublic List<EntityBInverseEager> getListB() {\n+\t\treturn listB;\n+\t}\n+\t\n+\tpublic List addB(EntityBInverseEager entityB) {\n+\t\tlistB.add(entityB);\n+\t\treturn listB;\n+\t}\n+\t\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\t\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"42c36f6f34caa71e5a812274022cdbf6efeb1051","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityBInverseEager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,67 +1,67 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-\r\n-@Entity\r\n-public class EntityBInverseEager  {\r\n-\t@GeneratedValue\r\n-\t@Id private int id;\r\n-    \r\n-    private String name;\r\n-\r\n-\t@ManyToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)\r\n-\tprivate EntityAInverseEager entityA;\r\n-\t\r\n-    public EntityBInverseEager() {}\r\n-    \r\n-    public EntityBInverseEager(String name) {\r\n-        this.name = name;\r\n-    }\r\n-    \r\n-    public EntityAInverseEager getA() {\r\n-\t\treturn entityA;\r\n-\t}\r\n-\t\r\n-\tpublic void setA(EntityAInverseEager entityA) {\r\n-\t\tthis.entityA = entityA;\r\n-\t}\r\n-\t\r\n-    public int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    \r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-    \r\n-    \r\n-\t\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+\n+@Entity\n+public class EntityBInverseEager  {\n+\t@GeneratedValue\n+\t@Id private int id;\n+    \n+    private String name;\n+\n+\t@ManyToOne(fetch=FetchType.EAGER, cascade=CascadeType.ALL)\n+\tprivate EntityAInverseEager entityA;\n+\t\n+    public EntityBInverseEager() {}\n+    \n+    public EntityBInverseEager(String name) {\n+        this.name = name;\n+    }\n+    \n+    public EntityAInverseEager getA() {\n+\t\treturn entityA;\n+\t}\n+\t\n+\tpublic void setA(EntityAInverseEager entityA) {\n+\t\tthis.entityA = entityA;\n+\t}\n+\t\n+    public int getId() {\n+\t\treturn id;\n+\t}\n+\t\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+    \n+    \n+\t\n+}"},{"sha":"25efaee5675cc90b076f20aa05a59c8383bb96d4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","status":"modified","additions":88,"deletions":88,"changes":176,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityCInverseEager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,88 +1,88 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Entity\r\n-\r\n-public class EntityCInverseEager  {\r\n-\t@GeneratedValue\r\n-\t@Id private int id;\r\n-    \r\n-    private String name;\r\n-    \r\n-    private int age;\r\n-    \r\n-    private int balance;\r\n-    \r\n-\t@OneToOne(fetch=FetchType.EAGER, mappedBy=\"entityC\")\r\n-\tprivate EntityDInverseEager entityD = null;\r\n-\t\r\n-\tpublic EntityCInverseEager() {}\r\n-\t\r\n-\tpublic EntityCInverseEager(String name, int age, int balance) {\r\n-\t    this.name = name;\r\n-\t    this.age = age;\r\n-\t    this.balance = balance;\r\n-\t}\r\n-\t\r\n-\tpublic EntityDInverseEager getD() {\r\n-\t\treturn entityD;\r\n-\t}\r\n-\t\r\n-\tpublic void setD(EntityDInverseEager entityD) {\r\n-\t\tthis.entityD = entityD;\r\n-\t}\r\n-\t\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    \r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public int getAge() {\r\n-        return age;\r\n-    }\r\n-    \r\n-    public void setAge(int age) {\r\n-        this.age = age;\r\n-    }\r\n-\r\n-    public int getBalance() {\r\n-        return balance;\r\n-    }\r\n-    \r\n-    public void setBalance(int balance) {\r\n-        this.balance = balance;\r\n-    }\r\n-    \r\n-    \r\n-    \r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+\n+public class EntityCInverseEager  {\n+\t@GeneratedValue\n+\t@Id private int id;\n+    \n+    private String name;\n+    \n+    private int age;\n+    \n+    private int balance;\n+    \n+\t@OneToOne(fetch=FetchType.EAGER, mappedBy=\"entityC\")\n+\tprivate EntityDInverseEager entityD = null;\n+\t\n+\tpublic EntityCInverseEager() {}\n+\t\n+\tpublic EntityCInverseEager(String name, int age, int balance) {\n+\t    this.name = name;\n+\t    this.age = age;\n+\t    this.balance = balance;\n+\t}\n+\t\n+\tpublic EntityDInverseEager getD() {\n+\t\treturn entityD;\n+\t}\n+\t\n+\tpublic void setD(EntityDInverseEager entityD) {\n+\t\tthis.entityD = entityD;\n+\t}\n+\t\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\t\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public int getAge() {\n+        return age;\n+    }\n+    \n+    public void setAge(int age) {\n+        this.age = age;\n+    }\n+\n+    public int getBalance() {\n+        return balance;\n+    }\n+    \n+    public void setBalance(int balance) {\n+        this.balance = balance;\n+    }\n+    \n+    \n+    \n+\n+}"},{"sha":"7bc2337a22eab3c03bd85e1ca467f7848ab85f05","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","status":"modified","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/EntityDInverseEager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,98 +1,98 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.OneToOne;\r\n-\r\n-@Entity\r\n-\r\n-public class EntityDInverseEager  {\r\n-\t@GeneratedValue\r\n-\t@Id private int id;\r\n-    \r\n-    private String name;\r\n-    \r\n-    private int loginCount;\r\n-    \r\n-    private int logoutCount;\r\n-    \r\n-    private String email;\r\n-    \r\n-\r\n-\t@OneToOne(fetch=FetchType.EAGER)\r\n-\tprivate EntityCInverseEager entityC = null;\r\n-\t\r\n-\tpublic EntityDInverseEager() {}\r\n-\t\r\n-\tpublic EntityDInverseEager(String name, String email, int loginCount, \r\n-\t    int logoutCount) {\r\n-\t    this.name = name;\r\n-\t    this.email = email;\r\n-\t    this.loginCount = loginCount;\r\n-\t    this.logoutCount = logoutCount;\r\n-    \r\n-\t}\r\n-\t\r\n-\tpublic EntityCInverseEager getC() {\r\n-\t\treturn entityC;\r\n-\t}\r\n-\t\r\n-\tpublic void setC(EntityCInverseEager entityC) {\r\n-\t\tthis.entityC = entityC;\r\n-\t}\r\n-\t\r\n-\tpublic int getId() {\r\n-\t\treturn id;\r\n-\t}\r\n-\t\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    \r\n-    public void setName(String name) {\r\n-        this.name = name;\r\n-    }\r\n-\r\n-    public String getEmail() {\r\n-        return email;\r\n-    }\r\n-    \r\n-    public void setEmail(String email) {\r\n-        this.email = email;\r\n-    }\r\n-\r\n-    public int getLoginCount() {\r\n-        return loginCount;\r\n-    }\r\n-    \r\n-    public void setLoginCount(int loginCount) {\r\n-        this.loginCount = loginCount;\r\n-    }\r\n-\r\n-    public int getLogoutCount() {\r\n-        return logoutCount;\r\n-    }\r\n-    \r\n-    public void setLogoutCount(int logoutCount) {\r\n-        this.logoutCount = logoutCount;\r\n-    }}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+\n+public class EntityDInverseEager  {\n+\t@GeneratedValue\n+\t@Id private int id;\n+    \n+    private String name;\n+    \n+    private int loginCount;\n+    \n+    private int logoutCount;\n+    \n+    private String email;\n+    \n+\n+\t@OneToOne(fetch=FetchType.EAGER)\n+\tprivate EntityCInverseEager entityC = null;\n+\t\n+\tpublic EntityDInverseEager() {}\n+\t\n+\tpublic EntityDInverseEager(String name, String email, int loginCount, \n+\t    int logoutCount) {\n+\t    this.name = name;\n+\t    this.email = email;\n+\t    this.loginCount = loginCount;\n+\t    this.logoutCount = logoutCount;\n+    \n+\t}\n+\t\n+\tpublic EntityCInverseEager getC() {\n+\t\treturn entityC;\n+\t}\n+\t\n+\tpublic void setC(EntityCInverseEager entityC) {\n+\t\tthis.entityC = entityC;\n+\t}\n+\t\n+\tpublic int getId() {\n+\t\treturn id;\n+\t}\n+\t\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+    \n+    public void setEmail(String email) {\n+        this.email = email;\n+    }\n+\n+    public int getLoginCount() {\n+        return loginCount;\n+    }\n+    \n+    public void setLoginCount(int loginCount) {\n+        this.loginCount = loginCount;\n+    }\n+\n+    public int getLogoutCount() {\n+        return logoutCount;\n+    }\n+    \n+    public void setLogoutCount(int logoutCount) {\n+        this.logoutCount = logoutCount;\n+    }}"},{"sha":"eada11c85428ae596d62fbe58209ae9f1e2ade64","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","status":"modified","additions":39,"deletions":39,"changes":78,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerCollectionInstance.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,39 +1,39 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.HashSet;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentCollection;\r\n-\r\n-@Entity\r\n-public class HandlerCollectionInstance {\r\n-    @Id\r\n-    private int id;\r\n-\r\n-    @PersistentCollection\r\n-    private Collection<String> collection = new HashSet<String>();\r\n-\r\n-    public Collection<String> getCollection() {\r\n-        return collection;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentCollection;\n+\n+@Entity\n+public class HandlerCollectionInstance {\n+    @Id\n+    private int id;\n+\n+    @PersistentCollection\n+    private Collection<String> collection = new HashSet<String>();\n+\n+    public Collection<String> getCollection() {\n+        return collection;\n+    }\n+}"},{"sha":"6b20211332ba57b35e383ce5ad87f9b9e8cadb62","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToHandlerMapInstance.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentMap;\r\n-import org.apache.openjpa.persistence.jdbc.ContainerTable;\r\n-\r\n-@Entity\r\n-public class HandlerToHandlerMapInstance {\r\n-    @Id\r\n-    private int id;\r\n-\r\n-    @PersistentMap\r\n-    @ContainerTable(name=\"NONSTD_MAPPING_MAP\")\r\n-    private Map<String,String> map = new HashMap<String,String>();\r\n-\r\n-    public Map<String,String> getMap() {\r\n-        return map;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentMap;\n+import org.apache.openjpa.persistence.jdbc.ContainerTable;\n+\n+@Entity\n+public class HandlerToHandlerMapInstance {\n+    @Id\n+    private int id;\n+\n+    @PersistentMap\n+    @ContainerTable(name=\"NONSTD_MAPPING_MAP\")\n+    private Map<String,String> map = new HashMap<String,String>();\n+\n+    public Map<String,String> getMap() {\n+        return map;\n+    }\n }\n\\ No newline at end of file"},{"sha":"61630e900199706d5ef7c1198bc5f7dee4f4c2cf","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","status":"modified","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/HandlerToRelationMapInstance.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,41 +1,41 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentMap;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-\r\n-@Entity\r\n-public class HandlerToRelationMapInstance {\r\n-    @Id\r\n-    private int id;\r\n-\r\n-    @PersistentMap(elementCascade = CascadeType.PERSIST)\r\n-    private Map<String,AllFieldTypes> map = new HashMap<String,AllFieldTypes>();\r\n-\r\n-    public Map<String,AllFieldTypes> getMap() {\r\n-        return map;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentMap;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+\n+@Entity\n+public class HandlerToRelationMapInstance {\n+    @Id\n+    private int id;\n+\n+    @PersistentMap(elementCascade = CascadeType.PERSIST)\n+    private Map<String,AllFieldTypes> map = new HashMap<String,AllFieldTypes>();\n+\n+    public Map<String,AllFieldTypes> getMap() {\n+        return map;\n+    }\n }\n\\ No newline at end of file"},{"sha":"0bbf14cc56cd9e744f7e888b5156392787f542df","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","status":"modified","additions":75,"deletions":75,"changes":150,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneCompoundIdOwner.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,75 +1,75 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.IdClass;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@IdClass(ManyOneCompoundIdOwnerId.class)\r\n-public class ManyOneCompoundIdOwner {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long longId;\r\n-\r\n-    @Id\r\n-    @ManyToOne\r\n-    private BasicEntity entityId;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private ManyOneCompoundIdOwner selfRel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getLongId() {\r\n-        return longId;\r\n-    }\r\n-\r\n-    public BasicEntity getEntityId() { \r\n-        return entityId; \r\n-    }\r\n-\r\n-    public void setEntityId(BasicEntity entityId) { \r\n-        this.entityId = entityId; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public ManyOneCompoundIdOwner getSelfRel() { \r\n-        return selfRel; \r\n-    }\r\n-\r\n-    public void setSelfRel(ManyOneCompoundIdOwner selfRel) { \r\n-        this.selfRel = selfRel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.IdClass;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+@IdClass(ManyOneCompoundIdOwnerId.class)\n+public class ManyOneCompoundIdOwner {\n+\n+    @Id\n+    @GeneratedValue\n+    private long longId;\n+\n+    @Id\n+    @ManyToOne\n+    private BasicEntity entityId;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private ManyOneCompoundIdOwner selfRel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getLongId() {\n+        return longId;\n+    }\n+\n+    public BasicEntity getEntityId() { \n+        return entityId; \n+    }\n+\n+    public void setEntityId(BasicEntity entityId) { \n+        this.entityId = entityId; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public ManyOneCompoundIdOwner getSelfRel() { \n+        return selfRel; \n+    }\n+\n+    public void setSelfRel(ManyOneCompoundIdOwner selfRel) { \n+        this.selfRel = selfRel; \n+    }\n+}"},{"sha":"ef4b09e5a8beb90a101ad8078c1a9cdbea472502","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/ManyOneIdOwner.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class ManyOneIdOwner {\r\n-\r\n-    @Id\r\n-    @ManyToOne\r\n-    private BasicEntity id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne\r\n-    private ManyOneIdOwner selfRel;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public BasicEntity getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public void setId(BasicEntity id) { \r\n-        this.id = id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-\r\n-    public ManyOneIdOwner getSelfRel() { \r\n-        return selfRel; \r\n-    }\r\n-\r\n-    public void setSelfRel(ManyOneIdOwner selfRel) { \r\n-        this.selfRel = selfRel; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class ManyOneIdOwner {\n+\n+    @Id\n+    @ManyToOne\n+    private BasicEntity id;\n+\n+    private String name;\n+\n+    @ManyToOne\n+    private ManyOneIdOwner selfRel;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public BasicEntity getId() { \n+        return id; \n+    }\n+\n+    public void setId(BasicEntity id) { \n+        this.id = id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+\n+    public ManyOneIdOwner getSelfRel() { \n+        return selfRel; \n+    }\n+\n+    public void setSelfRel(ManyOneIdOwner selfRel) { \n+        this.selfRel = selfRel; \n+    }\n+}"},{"sha":"6ab328b509cf4e292cf71e0fd3e6e2baedb7be01","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","status":"modified","additions":80,"deletions":80,"changes":160,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/MultipleSameTypedEmbedded.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,80 +1,80 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.AttributeOverride;\r\n-import javax.persistence.AssociationOverride;\r\n-import javax.persistence.Column;\r\n-import javax.persistence.Embedded;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.JoinColumn;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class MultipleSameTypedEmbedded { \r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @Embedded\r\n-    @AttributeOverride(name=\"name\", column=@Column(name=\"E1_NAME\"))\r\n-    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E1_REL\"))\r\n-    private EmbeddableWithRelation embed1;\r\n-\r\n-    @Embedded\r\n-    @AttributeOverride(name=\"name\", column=@Column(name=\"E2_NAME\"))\r\n-    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E2_REL\"))\r\n-    private EmbeddableWithRelation embed2;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public EmbeddableWithRelation getEmbed1() {\r\n-        return embed1; \r\n-    }\r\n-\r\n-    public void setEmbed1(EmbeddableWithRelation embed1) {\r\n-        this.embed1 = embed1; \r\n-    }\r\n-\r\n-    public EmbeddableWithRelation getEmbed2() {\r\n-        return embed2; \r\n-    }\r\n-\r\n-    public void setEmbed2(EmbeddableWithRelation embed2) {\r\n-        this.embed2 = embed2; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.AttributeOverride;\n+import javax.persistence.AssociationOverride;\n+import javax.persistence.Column;\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class MultipleSameTypedEmbedded { \n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @Embedded\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E1_NAME\"))\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E1_REL\"))\n+    private EmbeddableWithRelation embed1;\n+\n+    @Embedded\n+    @AttributeOverride(name=\"name\", column=@Column(name=\"E2_NAME\"))\n+    @AssociationOverride(name=\"rel\", joinColumns=@JoinColumn(name=\"E2_REL\"))\n+    private EmbeddableWithRelation embed2;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public EmbeddableWithRelation getEmbed1() {\n+        return embed1; \n+    }\n+\n+    public void setEmbed1(EmbeddableWithRelation embed1) {\n+        this.embed1 = embed1; \n+    }\n+\n+    public EmbeddableWithRelation getEmbed2() {\n+        return embed2; \n+    }\n+\n+    public void setEmbed2(EmbeddableWithRelation embed2) {\n+        this.embed2 = embed2; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"5757a9daddb46ef5a797a56fd3a1e4d92ddcd7b8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","status":"modified","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/Order.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,87 +1,87 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.GenerationType;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Table;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-@Table(name=\"OrderTbl\")\r\n-public class Order {\r\n-    @Id \r\n-    @GeneratedValue\r\n-    int oid;\r\n-\r\n-    double amount;\r\n-    boolean delivered;\r\n-\r\n-    @ManyToOne (fetch=FetchType.EAGER)\r\n-    Customer customer;\r\n-\r\n-    @Version\r\n-    long version;\r\n-\r\n-    public Order(){}\r\n-\r\n-    public Order(  double amt, boolean delivered, Customer c){\r\n-        amount=amt;\r\n-        this.delivered=delivered;\r\n-        customer=c;\r\n-        if (c!=null) c.getOrders().add(this);\r\n-    }\r\n-\r\n-    public double getAmount() {\r\n-        return amount;\r\n-    }\r\n-    \r\n-    public void setAmount(double amount) {\r\n-        this.amount = amount;\r\n-    }\r\n-    \r\n-    public Customer getCustomer() {\r\n-        return customer;\r\n-    }\r\n-    \r\n-    public void setCustomer(Customer customer) {\r\n-        this.customer = customer;\r\n-    }\r\n-    \r\n-    public boolean isDelivered() {\r\n-        return delivered;\r\n-    }\r\n-    \r\n-    public void setDelivered(boolean delivered) {\r\n-        this.delivered = delivered;\r\n-    }\r\n-    \r\n-    public int getOid() {\r\n-        return oid;\r\n-    }\r\n-\r\n-    public String toString(){\r\n-        return \"Order:\"+oid+\" amount:\"+amount+\" delivered:\"+delivered+\" customer:\"+\r\n-        ( customer!=null ? customer.getCid()  :  -1 );\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.Version;\n+\n+@Entity\n+@Table(name=\"OrderTbl\")\n+public class Order {\n+    @Id \n+    @GeneratedValue\n+    int oid;\n+\n+    double amount;\n+    boolean delivered;\n+\n+    @ManyToOne (fetch=FetchType.EAGER)\n+    Customer customer;\n+\n+    @Version\n+    long version;\n+\n+    public Order(){}\n+\n+    public Order(  double amt, boolean delivered, Customer c){\n+        amount=amt;\n+        this.delivered=delivered;\n+        customer=c;\n+        if (c!=null) c.getOrders().add(this);\n+    }\n+\n+    public double getAmount() {\n+        return amount;\n+    }\n+    \n+    public void setAmount(double amount) {\n+        this.amount = amount;\n+    }\n+    \n+    public Customer getCustomer() {\n+        return customer;\n+    }\n+    \n+    public void setCustomer(Customer customer) {\n+        this.customer = customer;\n+    }\n+    \n+    public boolean isDelivered() {\n+        return delivered;\n+    }\n+    \n+    public void setDelivered(boolean delivered) {\n+        this.delivered = delivered;\n+    }\n+    \n+    public int getOid() {\n+        return oid;\n+    }\n+\n+    public String toString(){\n+        return \"Order:\"+oid+\" amount:\"+amount+\" delivered:\"+delivered+\" customer:\"+\n+        ( customer!=null ? customer.getCid()  :  -1 );\n+    }\n+}"},{"sha":"4c70ba91bd7a8b70705edc924a8c0d4e94bb804e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","status":"modified","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToHandlerMapInstance.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentMap;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-\r\n-@Entity\r\n-public class RelationToHandlerMapInstance {\r\n-    @Id\r\n-    private int id;\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST)\r\n-\r\n-    private Map<AllFieldTypes,String> aftMap =\r\n-        new HashMap<AllFieldTypes,String>();\r\n-\r\n-    public Map<AllFieldTypes,String> getMap() {\r\n-        return aftMap;\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentMap;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+\n+@Entity\n+public class RelationToHandlerMapInstance {\n+    @Id\n+    private int id;\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST)\n+\n+    private Map<AllFieldTypes,String> aftMap =\n+        new HashMap<AllFieldTypes,String>();\n+\n+    public Map<AllFieldTypes,String> getMap() {\n+        return aftMap;\n+    }\n }\n\\ No newline at end of file"},{"sha":"aba949dcc761fabc7b6de1d1f1c414cc6bc33ae4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/RelationToRelationMapInstance.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,43 +1,43 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.Id;\r\n-\r\n-import org.apache.openjpa.persistence.PersistentMap;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-\r\n-@Entity\r\n-public class RelationToRelationMapInstance {\r\n-    @Id\r\n-    private int id;\r\n-\r\n-    @PersistentMap(keyCascade = CascadeType.PERSIST,\r\n-        elementCascade = CascadeType.PERSIST)\r\n-    private Map<AllFieldTypes,AllFieldTypes> map =\r\n-        new HashMap<AllFieldTypes,AllFieldTypes>();\r\n-\r\n-    public Map<AllFieldTypes,AllFieldTypes> getMap() {\r\n-        return map;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+\n+import org.apache.openjpa.persistence.PersistentMap;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+\n+@Entity\n+public class RelationToRelationMapInstance {\n+    @Id\n+    private int id;\n+\n+    @PersistentMap(keyCascade = CascadeType.PERSIST,\n+        elementCascade = CascadeType.PERSIST)\n+    private Map<AllFieldTypes,AllFieldTypes> map =\n+        new HashMap<AllFieldTypes,AllFieldTypes>();\n+\n+    public Map<AllFieldTypes,AllFieldTypes> getMap() {\n+        return map;\n+    }\n+}"},{"sha":"d8f1d504f63e951b7c9e7293a9a71d4c2fe74975","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/SimpleEmbeddable.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,34 +1,34 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.Embeddable;\r\n-\r\n-@Embeddable\r\n-public class SimpleEmbeddable {\r\n-    private String embeddedString;\r\n-\r\n-    protected SimpleEmbeddable() {\r\n-        // for JPA\r\n-    }\r\n-\r\n-    public SimpleEmbeddable(String s) {\r\n-        embeddedString = s;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.Embeddable;\n+\n+@Embeddable\n+public class SimpleEmbeddable {\n+    private String embeddedString;\n+\n+    protected SimpleEmbeddable() {\n+        // for JPA\n+    }\n+\n+    public SimpleEmbeddable(String s) {\n+        embeddedString = s;\n+    }\n+}"},{"sha":"ae0891dbe3db032c29c7b476f9b67cb8dc259933","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","status":"modified","additions":64,"deletions":64,"changes":128,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TargetedIFaceRelationParent.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,64 +1,64 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.CascadeType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity\r\n-public class TargetedIFaceRelationParent \r\n-    implements IFace {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @ManyToOne(targetEntity=TargetedIFaceRelationParent.class,\r\n-        cascade=CascadeType.ALL)\r\n-    private IFace iface;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public IFace getIFace() {\r\n-        return iface; \r\n-    }\r\n-\r\n-    public void setIFace(IFace iface) {\r\n-        this.iface = iface; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Version;\n+\n+@Entity\n+public class TargetedIFaceRelationParent \n+    implements IFace {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @ManyToOne(targetEntity=TargetedIFaceRelationParent.class,\n+        cascade=CascadeType.ALL)\n+    private IFace iface;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public IFace getIFace() {\n+        return iface; \n+    }\n+\n+    public void setIFace(IFace iface) {\n+        this.iface = iface; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"cc8b2bac8b03b473648c92a2bc6eeb4e199ae201","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestBulkUpdatesAndEmbeddedFields.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-/**\r\n- * Tests OPENJPA-199\r\n- */\r\n-public class TestBulkUpdatesAndEmbeddedFields\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(MultipleSameTypedEmbedded.class, EmbeddableWithRelation.class,\r\n-            CLEAR_TABLES);\r\n-\r\n-        em.getTransaction().begin();\r\n-        MultipleSameTypedEmbedded pc = new MultipleSameTypedEmbedded();\r\n-        pc.setEmbed1(new EmbeddableWithRelation());\r\n-        pc.getEmbed1().setName(\"foo\");\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-    }\r\n-\r\n-    public void testBulkUpdateOfEmbeddedField() {\r\n-        em.getTransaction().begin();\r\n-        assertEquals(1, em.createQuery(\r\n-            \"UPDATE MultipleSameTypedEmbedded o SET o.embed1.name = 'bar'\")\r\n-            .executeUpdate());\r\n-        em.getTransaction().commit();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * Tests OPENJPA-199\n+ */\n+public class TestBulkUpdatesAndEmbeddedFields\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(MultipleSameTypedEmbedded.class, EmbeddableWithRelation.class,\n+            CLEAR_TABLES);\n+\n+        em.getTransaction().begin();\n+        MultipleSameTypedEmbedded pc = new MultipleSameTypedEmbedded();\n+        pc.setEmbed1(new EmbeddableWithRelation());\n+        pc.getEmbed1().setName(\"foo\");\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+    }\n+\n+    public void testBulkUpdateOfEmbeddedField() {\n+        em.getTransaction().begin();\n+        assertEquals(1, em.createQuery(\n+            \"UPDATE MultipleSameTypedEmbedded o SET o.embed1.name = 'bar'\")\n+            .executeUpdate());\n+        em.getTransaction().commit();\n+    }\n }\n\\ No newline at end of file"},{"sha":"0f255b49ba48efd7476d6e447851f74973bc6df4","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerCollections.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.HandlerCollectionTableFieldStrategy;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestHandlerCollections\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(HandlerCollectionInstance.class,\r\n-            CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testHandlerCollections() {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n-            HandlerCollectionInstance.class);\r\n-        assertEquals(HandlerCollectionTableFieldStrategy.class,\r\n-            cm.getFieldMapping(\"collection\").getStrategy().getClass());\r\n-\r\n-        HandlerCollectionInstance o = new HandlerCollectionInstance();\r\n-        o.getCollection().add(\"foo\");\r\n-        em.getTransaction().begin();\r\n-        em.persist(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerCollectionTableFieldStrategy;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestHandlerCollections\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(HandlerCollectionInstance.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testHandlerCollections() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\n+            HandlerCollectionInstance.class);\n+        assertEquals(HandlerCollectionTableFieldStrategy.class,\n+            cm.getFieldMapping(\"collection\").getStrategy().getClass());\n+\n+        HandlerCollectionInstance o = new HandlerCollectionInstance();\n+        o.getCollection().add(\"foo\");\n+        em.getTransaction().begin();\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"93c82ca4aa4dacfe44ae54fab86520545a24e435","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToHandlerMaps.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.HandlerHandlerMapTableFieldStrategy;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestHandlerToHandlerMaps\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(HandlerToHandlerMapInstance.class,\r\n-            CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testHandlerToHandlerMaps() {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n-            HandlerToHandlerMapInstance.class);\r\n-        FieldMapping fm = cm.getFieldMapping(\"map\");\r\n-        assertEquals(HandlerHandlerMapTableFieldStrategy.class,\r\n-            fm.getStrategy().getClass());\r\n-        assertEquals(\"NONSTD_MAPPING_MAP\", fm.getTable().getName());\r\n-\r\n-        HandlerToHandlerMapInstance o = new HandlerToHandlerMapInstance();\r\n-        o.getMap().put(\"foo\", \"bar\");\r\n-        em.getTransaction().begin();\r\n-        em.persist(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerHandlerMapTableFieldStrategy;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestHandlerToHandlerMaps\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(HandlerToHandlerMapInstance.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testHandlerToHandlerMaps() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\n+            HandlerToHandlerMapInstance.class);\n+        FieldMapping fm = cm.getFieldMapping(\"map\");\n+        assertEquals(HandlerHandlerMapTableFieldStrategy.class,\n+            fm.getStrategy().getClass());\n+        assertEquals(\"NONSTD_MAPPING_MAP\", fm.getTable().getName());\n+\n+        HandlerToHandlerMapInstance o = new HandlerToHandlerMapInstance();\n+        o.getMap().put(\"foo\", \"bar\");\n+        em.getTransaction().begin();\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"936d8a2732dada6100f91b47cdc036d41ee16f32","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestHandlerToRelationMaps.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,48 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestHandlerToRelationMaps\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(HandlerToRelationMapInstance.class, AllFieldTypes.class,\r\n-            CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testHandlerToRelationMaps() {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n-            HandlerToRelationMapInstance.class);\r\n-        assertEquals(HandlerRelationMapTableFieldStrategy.class,\r\n-            cm.getFieldMapping(\"map\").getStrategy().getClass());\r\n-\r\n-        HandlerToRelationMapInstance o = new HandlerToRelationMapInstance();\r\n-        o.getMap().put(\"foo\", new AllFieldTypes());\r\n-        em.getTransaction().begin();\r\n-        em.persist(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerRelationMapTableFieldStrategy;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestHandlerToRelationMaps\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(HandlerToRelationMapInstance.class, AllFieldTypes.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testHandlerToRelationMaps() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\n+            HandlerToRelationMapInstance.class);\n+        assertEquals(HandlerRelationMapTableFieldStrategy.class,\n+            cm.getFieldMapping(\"map\").getStrategy().getClass());\n+\n+        HandlerToRelationMapInstance o = new HandlerToRelationMapInstance();\n+        o.getMap().put(\"foo\", new AllFieldTypes());\n+        em.getTransaction().begin();\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"a6bcd1869d1714777139d2b986542526e21e3d7f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","status":"modified","additions":258,"deletions":258,"changes":516,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestInverseEagerSQL.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,258 +1,258 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.util.Collection;\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.Query;\r\n-\r\n-import junit.textui.TestRunner;\r\n-import org.apache.openjpa.persistence.OpenJPAEntityManager;\r\n-import org.apache.openjpa.persistence.OpenJPAQuery;\r\n-import org.apache.openjpa.persistence.query.Magazine;\r\n-import org.apache.openjpa.persistence.query.Publisher;\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-\r\n-\r\n-public class TestInverseEagerSQL\r\n-    extends SQLListenerTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(Customer.class, Customer.CustomerKey.class, Order.class, \r\n-        \tEntityAInverseEager.class, EntityA1InverseEager.class, EntityA2InverseEager.class, \r\n-        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class,\r\n-            Publisher.class, Magazine.class);\r\n-        \r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-\r\n-        Customer.CustomerKey ck = new Customer.CustomerKey(\"USA\", 1);\r\n-        Customer c = new Customer();\r\n-        c.setCid(ck);\r\n-        c.setName(\"customer1\");\r\n-        em.persist(c);\r\n-        \r\n-        for (int i = 0; i < 4; i++) {\r\n-            Order order = new Order();\r\n-            order.setCustomer(c);\r\n-            em.persist(order);\r\n-        }\r\n-\r\n-        EntityAInverseEager a = new EntityAInverseEager(\"a\");\r\n-        em.persist(a);\r\n-        \r\n-        EntityA1InverseEager a1 = new EntityA1InverseEager(\"a1\");\r\n-        em.persist(a1);\r\n-        \r\n-        EntityA2InverseEager a2 = new EntityA2InverseEager(\"a2\");\r\n-        em.persist(a2);\r\n-\r\n-        for (int i = 0; i < 4; i++) {\r\n-            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n-            a.addB(b);\r\n-            b.setA(a);\r\n-            em.persist(b);\r\n-        }\r\n-        \r\n-        for (int i = 4; i < 8; i++) {\r\n-            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n-            a1.addB(b);\r\n-            b.setA(a1);\r\n-            em.persist(b);\r\n-        }\r\n-\r\n-        for (int i = 8; i < 12; i++) {\r\n-            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\r\n-            a2.addB(b);\r\n-            b.setA(a2);\r\n-            em.persist(b);\r\n-        }\r\n-        \r\n-        for (int i = 0; i < 4; i++) {\r\n-            EntityCInverseEager c1 = new EntityCInverseEager(\"c\"+i, i, i);\r\n-            em.persist(c1);\r\n-\r\n-            EntityDInverseEager d1 = new EntityDInverseEager(\"d\"+i, \"d\"+i, i, i);\r\n-            em.persist(d1);\r\n-\r\n-            c1.setD(d1);\r\n-            d1.setC(c1);\r\n-        }\r\n-\r\n-        Publisher p1 = new Publisher();\r\n-        p1.setName(\"publisher1\");\r\n-        em.persist(p1);\r\n-   \r\n-        for (int i = 0; i < 4; i++) {\r\n-            Magazine magazine = new Magazine();\r\n-            magazine.setIdPublisher(p1);\r\n-            magazine.setName(\"magagine\"+i+\"_\"+p1.getName());\r\n-            em.persist(magazine);\r\n-        }\r\n-\r\n-        Publisher p2 = new Publisher();\r\n-        p2.setName(\"publisher2\");\r\n-        em.persist(p2);\r\n-   \r\n-        for (int i = 0; i < 4; i++) {\r\n-            Magazine magazine = new Magazine();\r\n-            magazine.setIdPublisher(p2);\r\n-            magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\r\n-            em.persist(magazine);\r\n-        }\r\n-\r\n-        em.flush();\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOneToManyInverseEagerQuery() {\r\n-        sql.clear();\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        OpenJPAQuery q = em.createQuery(\"SELECT c FROM Customer c \");\r\n-        List<Customer> res = q.getResultList(); \r\n-\r\n-        assertEquals(1, res.size());\r\n-\r\n-        for (int i = 0; i < res.size(); i++) {\r\n-            Customer c = (Customer)res.get(i);\r\n-            Collection<Order> orders = c.getOrders();\r\n-            for (Iterator<Order> iter=orders.iterator(); iter.hasNext();) {\r\n-                Order order = (Order)iter.next();\r\n-                assertEquals(order.getCustomer(), c);\r\n-            }\r\n-        }\r\n-        \r\n-        assertEquals(2, sql.size());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOneToOneInverseEagerQuery() {\r\n-        sql.clear();\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        String query = \"select c FROM EntityCInverseEager c\";\r\n-        Query q = em.createQuery(query);\r\n-        List<EntityCInverseEager> res = q.getResultList();\r\n-        assertEquals(4, res.size());\r\n-\r\n-        for (int i = 0; i < res.size(); i++) {\r\n-            EntityCInverseEager c = (EntityCInverseEager)res.get(i);\r\n-            EntityDInverseEager d = c.getD();\r\n-            assertEquals(c, d.getC());\r\n-        }\r\n-\r\n-        assertEquals(1, sql.size());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOneToManyInheritanceQuery() {\r\n-        sql.clear();\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        String query = \"select a FROM EntityA1InverseEager a\";\r\n-        Query q = em.createQuery(query);\r\n-        List list = q.getResultList();\r\n-        assertEquals(1, list.size());\r\n-        for (int i = 0; i < list.size(); i++) {\r\n-            EntityA1InverseEager a1 = (EntityA1InverseEager)list.get(i);\r\n-            Collection<EntityBInverseEager> listB = a1.getListB();\r\n-            assertEquals(4, listB.size());\r\n-            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n-                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n-                EntityAInverseEager a = b.getA();\r\n-                assertEquals(a1, a);\r\n-            }\r\n-        }\r\n-        assertEquals(3, sql.size());\r\n-        sql.clear();\r\n-\r\n-        query = \"select a FROM EntityA2InverseEager a\";\r\n-        q = em.createQuery(query);\r\n-        list = q.getResultList();\r\n-        assertEquals(1, list.size());\r\n-        for (int i = 0; i < list.size(); i++) {\r\n-            EntityA2InverseEager a2 = (EntityA2InverseEager)list.get(i);\r\n-            Collection listB = a2.getListB();\r\n-            assertEquals(4, listB.size());\r\n-            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n-                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n-                EntityAInverseEager a = b.getA();\r\n-                assertEquals(a2, a);\r\n-            }\r\n-        }\r\n-        assertEquals(3, sql.size());\r\n-        sql.clear();\r\n-        \r\n-        query = \"select a FROM EntityAInverseEager a\";\r\n-        q = em.createQuery(query);\r\n-        list = q.getResultList();\r\n-        assertEquals(3, list.size());\r\n-        for (int i = 0; i < list.size(); i++) {\r\n-            EntityAInverseEager a0 = (EntityAInverseEager)list.get(i);\r\n-            Collection listB = a0.getListB();\r\n-            assertEquals(4, listB.size());\r\n-            for (Iterator iter=listB.iterator(); iter.hasNext();) {\r\n-                EntityBInverseEager b = (EntityBInverseEager)iter.next();\r\n-                EntityAInverseEager a = b.getA();\r\n-                assertEquals(a0, a);\r\n-            }\r\n-        }\r\n-        \r\n-        assertEquals(2, sql.size());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public void testOneToManyEagerInverseLazyQuery() {\r\n-        sql.clear();\r\n-\r\n-        OpenJPAEntityManager em = emf.createEntityManager();\r\n-        String query = \"select p FROM Publisher p\";\r\n-        Query q = em.createQuery(query);\r\n-        List list = q.getResultList();\r\n-        assertEquals(2, list.size());\r\n-        assertEquals(2, sql.size());\r\n-\r\n-        sql.clear();\r\n-        em.clear();\r\n-        for (int i = 0; i < list.size(); i++) {\r\n-            Publisher p = (Publisher) list.get(i);\r\n-            Set<Magazine> magazines = p.getMagazineCollection();\r\n-            assertEquals(4, magazines.size());\r\n-            for (Iterator iter = magazines.iterator(); iter.hasNext();) {\r\n-                Magazine m = (Magazine) iter.next();\r\n-                Publisher mp = m.getIdPublisher();\r\n-                assertEquals(p, mp);\r\n-            }\r\n-        }\r\n-\r\n-        assertEquals(0, sql.size());\r\n-        em.close();\r\n-    }\r\n-\r\n-    public static void main(String[] args) {\r\n-        TestRunner.run(TestInverseEagerSQL.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.Query;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.OpenJPAEntityManager;\n+import org.apache.openjpa.persistence.OpenJPAQuery;\n+import org.apache.openjpa.persistence.query.Magazine;\n+import org.apache.openjpa.persistence.query.Publisher;\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+\n+\n+public class TestInverseEagerSQL\n+    extends SQLListenerTestCase {\n+\n+    public void setUp() {\n+        setUp(Customer.class, Customer.CustomerKey.class, Order.class, \n+        \tEntityAInverseEager.class, EntityA1InverseEager.class, EntityA2InverseEager.class, \n+        \tEntityBInverseEager.class, EntityCInverseEager.class, EntityDInverseEager.class,\n+            Publisher.class, Magazine.class);\n+        \n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+\n+        Customer.CustomerKey ck = new Customer.CustomerKey(\"USA\", 1);\n+        Customer c = new Customer();\n+        c.setCid(ck);\n+        c.setName(\"customer1\");\n+        em.persist(c);\n+        \n+        for (int i = 0; i < 4; i++) {\n+            Order order = new Order();\n+            order.setCustomer(c);\n+            em.persist(order);\n+        }\n+\n+        EntityAInverseEager a = new EntityAInverseEager(\"a\");\n+        em.persist(a);\n+        \n+        EntityA1InverseEager a1 = new EntityA1InverseEager(\"a1\");\n+        em.persist(a1);\n+        \n+        EntityA2InverseEager a2 = new EntityA2InverseEager(\"a2\");\n+        em.persist(a2);\n+\n+        for (int i = 0; i < 4; i++) {\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\n+            a.addB(b);\n+            b.setA(a);\n+            em.persist(b);\n+        }\n+        \n+        for (int i = 4; i < 8; i++) {\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\n+            a1.addB(b);\n+            b.setA(a1);\n+            em.persist(b);\n+        }\n+\n+        for (int i = 8; i < 12; i++) {\n+            EntityBInverseEager b = new EntityBInverseEager(\"b\" + i);\n+            a2.addB(b);\n+            b.setA(a2);\n+            em.persist(b);\n+        }\n+        \n+        for (int i = 0; i < 4; i++) {\n+            EntityCInverseEager c1 = new EntityCInverseEager(\"c\"+i, i, i);\n+            em.persist(c1);\n+\n+            EntityDInverseEager d1 = new EntityDInverseEager(\"d\"+i, \"d\"+i, i, i);\n+            em.persist(d1);\n+\n+            c1.setD(d1);\n+            d1.setC(c1);\n+        }\n+\n+        Publisher p1 = new Publisher();\n+        p1.setName(\"publisher1\");\n+        em.persist(p1);\n+   \n+        for (int i = 0; i < 4; i++) {\n+            Magazine magazine = new Magazine();\n+            magazine.setIdPublisher(p1);\n+            magazine.setName(\"magagine\"+i+\"_\"+p1.getName());\n+            em.persist(magazine);\n+        }\n+\n+        Publisher p2 = new Publisher();\n+        p2.setName(\"publisher2\");\n+        em.persist(p2);\n+   \n+        for (int i = 0; i < 4; i++) {\n+            Magazine magazine = new Magazine();\n+            magazine.setIdPublisher(p2);\n+            magazine.setName(\"magagine\"+i+\"_\"+p2.getName());\n+            em.persist(magazine);\n+        }\n+\n+        em.flush();\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+\n+    public void testOneToManyInverseEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        OpenJPAQuery q = em.createQuery(\"SELECT c FROM Customer c \");\n+        List<Customer> res = q.getResultList(); \n+\n+        assertEquals(1, res.size());\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            Customer c = (Customer)res.get(i);\n+            Collection<Order> orders = c.getOrders();\n+            for (Iterator<Order> iter=orders.iterator(); iter.hasNext();) {\n+                Order order = (Order)iter.next();\n+                assertEquals(order.getCustomer(), c);\n+            }\n+        }\n+        \n+        assertEquals(2, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToOneInverseEagerQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select c FROM EntityCInverseEager c\";\n+        Query q = em.createQuery(query);\n+        List<EntityCInverseEager> res = q.getResultList();\n+        assertEquals(4, res.size());\n+\n+        for (int i = 0; i < res.size(); i++) {\n+            EntityCInverseEager c = (EntityCInverseEager)res.get(i);\n+            EntityDInverseEager d = c.getD();\n+            assertEquals(c, d.getC());\n+        }\n+\n+        assertEquals(1, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToManyInheritanceQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select a FROM EntityA1InverseEager a\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(1, list.size());\n+        for (int i = 0; i < list.size(); i++) {\n+            EntityA1InverseEager a1 = (EntityA1InverseEager)list.get(i);\n+            Collection<EntityBInverseEager> listB = a1.getListB();\n+            assertEquals(4, listB.size());\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\n+                EntityAInverseEager a = b.getA();\n+                assertEquals(a1, a);\n+            }\n+        }\n+        assertEquals(3, sql.size());\n+        sql.clear();\n+\n+        query = \"select a FROM EntityA2InverseEager a\";\n+        q = em.createQuery(query);\n+        list = q.getResultList();\n+        assertEquals(1, list.size());\n+        for (int i = 0; i < list.size(); i++) {\n+            EntityA2InverseEager a2 = (EntityA2InverseEager)list.get(i);\n+            Collection listB = a2.getListB();\n+            assertEquals(4, listB.size());\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\n+                EntityAInverseEager a = b.getA();\n+                assertEquals(a2, a);\n+            }\n+        }\n+        assertEquals(3, sql.size());\n+        sql.clear();\n+        \n+        query = \"select a FROM EntityAInverseEager a\";\n+        q = em.createQuery(query);\n+        list = q.getResultList();\n+        assertEquals(3, list.size());\n+        for (int i = 0; i < list.size(); i++) {\n+            EntityAInverseEager a0 = (EntityAInverseEager)list.get(i);\n+            Collection listB = a0.getListB();\n+            assertEquals(4, listB.size());\n+            for (Iterator iter=listB.iterator(); iter.hasNext();) {\n+                EntityBInverseEager b = (EntityBInverseEager)iter.next();\n+                EntityAInverseEager a = b.getA();\n+                assertEquals(a0, a);\n+            }\n+        }\n+        \n+        assertEquals(2, sql.size());\n+        em.close();\n+    }\n+\n+    public void testOneToManyEagerInverseLazyQuery() {\n+        sql.clear();\n+\n+        OpenJPAEntityManager em = emf.createEntityManager();\n+        String query = \"select p FROM Publisher p\";\n+        Query q = em.createQuery(query);\n+        List list = q.getResultList();\n+        assertEquals(2, list.size());\n+        assertEquals(2, sql.size());\n+\n+        sql.clear();\n+        em.clear();\n+        for (int i = 0; i < list.size(); i++) {\n+            Publisher p = (Publisher) list.get(i);\n+            Set<Magazine> magazines = p.getMagazineCollection();\n+            assertEquals(4, magazines.size());\n+            for (Iterator iter = magazines.iterator(); iter.hasNext();) {\n+                Magazine m = (Magazine) iter.next();\n+                Publisher mp = m.getIdPublisher();\n+                assertEquals(p, mp);\n+            }\n+        }\n+\n+        assertEquals(0, sql.size());\n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestInverseEagerSQL.class);\n+    }\n+}\n+"},{"sha":"5b0acadedd793074ac73b26a88e563d5d4b8fc1c","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestLazyManyToOne.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n-import org.apache.openjpa.enhance.PersistenceCapable;\r\n-import org.apache.openjpa.enhance.DynamicPersistenceCapable;\r\n-\r\n-public class TestLazyManyToOne extends SQLListenerTestCase {\r\n-\r\n-    private int id;\r\n-\r\n-    public void setUp() {\r\n-        setUp(BasicEntity.class, UnidirectionalManyToOne.class, CLEAR_TABLES);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        UnidirectionalManyToOne pc = new UnidirectionalManyToOne();\r\n-        pc.setRelated(new BasicEntity());\r\n-        pc.getRelated().setName(\"foo\");\r\n-        em.persist(pc);\r\n-        em.getTransaction().commit();\r\n-        id = pc.getId();\r\n-        em.close();\r\n-\r\n-        sql.clear();\r\n-    }\r\n-\r\n-    public void testLazyManyToOne() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        UnidirectionalManyToOne pc = em.find(UnidirectionalManyToOne.class, id);\r\n-        if (pc instanceof PersistenceCapable // unenhanced has inefficiencies\r\n-            && !(pc instanceof DynamicPersistenceCapable))\r\n-            assertEquals(1, sql.size());\r\n-        assertNotNull(pc.getRelated());\r\n-        if (pc instanceof PersistenceCapable // unenhanced has inefficiencies\r\n-            && !(pc instanceof DynamicPersistenceCapable))\r\n-            assertEquals(2, sql.size());\r\n-        em.close();\r\n-    }\r\n-\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.enhance.DynamicPersistenceCapable;\n+\n+public class TestLazyManyToOne extends SQLListenerTestCase {\n+\n+    private int id;\n+\n+    public void setUp() {\n+        setUp(BasicEntity.class, UnidirectionalManyToOne.class, CLEAR_TABLES);\n+\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        UnidirectionalManyToOne pc = new UnidirectionalManyToOne();\n+        pc.setRelated(new BasicEntity());\n+        pc.getRelated().setName(\"foo\");\n+        em.persist(pc);\n+        em.getTransaction().commit();\n+        id = pc.getId();\n+        em.close();\n+\n+        sql.clear();\n+    }\n+\n+    public void testLazyManyToOne() {\n+        EntityManager em = emf.createEntityManager();\n+        UnidirectionalManyToOne pc = em.find(UnidirectionalManyToOne.class, id);\n+        if (pc instanceof PersistenceCapable // unenhanced has inefficiencies\n+            && !(pc instanceof DynamicPersistenceCapable))\n+            assertEquals(1, sql.size());\n+        assertNotNull(pc.getRelated());\n+        if (pc instanceof PersistenceCapable // unenhanced has inefficiencies\n+            && !(pc instanceof DynamicPersistenceCapable))\n+            assertEquals(2, sql.size());\n+        em.close();\n+    }\n+\n+}"},{"sha":"80543501f23d76e7a475416c2757d0950aca4247","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestMapCollectionToBlob.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,52 +1,52 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.sql.Types;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.FieldMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.HandlerFieldStrategy;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestMapCollectionToBlob\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(HandlerToHandlerMapInstance.class, CLEAR_TABLES,\r\n-            \"openjpa.Compatibility\", \"StoreMapCollectionInEntityAsBlob=true\");\r\n-    }\r\n-\r\n-    public void testHandlerToHandlerMaps() {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n-            HandlerToHandlerMapInstance.class);\r\n-        FieldMapping fm = cm.getFieldMapping(\"map\");        \r\n-        assertEquals(HandlerFieldStrategy.class, fm.getStrategy().getClass());\r\n-        assertEquals(\"NONSTD_MAPPING_MAP\", fm.getTable().getName());\r\n-        assertEquals(fm.getTable().getColumn(\"MAP\").getType(), Types.BLOB);\r\n-\r\n-        HandlerToHandlerMapInstance o = new HandlerToHandlerMapInstance();\r\n-        o.getMap().put(\"foo\", \"bar\");\r\n-        em.getTransaction().begin();\r\n-        em.persist(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.sql.Types;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.FieldMapping;\n+import org.apache.openjpa.jdbc.meta.strats.HandlerFieldStrategy;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestMapCollectionToBlob\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(HandlerToHandlerMapInstance.class, CLEAR_TABLES,\n+            \"openjpa.Compatibility\", \"StoreMapCollectionInEntityAsBlob=true\");\n+    }\n+\n+    public void testHandlerToHandlerMaps() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\n+            HandlerToHandlerMapInstance.class);\n+        FieldMapping fm = cm.getFieldMapping(\"map\");        \n+        assertEquals(HandlerFieldStrategy.class, fm.getStrategy().getClass());\n+        assertEquals(\"NONSTD_MAPPING_MAP\", fm.getTable().getName());\n+        assertEquals(fm.getTable().getColumn(\"MAP\").getType(), Types.BLOB);\n+\n+        HandlerToHandlerMapInstance o = new HandlerToHandlerMapInstance();\n+        o.getMap().put(\"foo\", \"bar\");\n+        em.getTransaction().begin();\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n+}"},{"sha":"a3fdee303d98b4c9d4da5e97a4f8049eced7e5ea","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToHandlerMaps.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import java.net.MalformedURLException;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.RelationHandlerMapTableFieldStrategy;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestRelationToHandlerMaps\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(RelationToHandlerMapInstance.class, AllFieldTypes.class,\r\n-            CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testRelationToHandlerMaps() throws MalformedURLException {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n-            RelationToHandlerMapInstance.class);\r\n-        assertEquals(RelationHandlerMapTableFieldStrategy.class,\r\n-            cm.getFieldMapping(\"aftMap\").getStrategy().getClass());\r\n-\r\n-        RelationToHandlerMapInstance o = new RelationToHandlerMapInstance();\r\n-        AllFieldTypes key = new AllFieldTypes();\r\n-        o.getMap().put(key, \"foo\");\r\n-        em.getTransaction().begin();\r\n-        em.persist(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import java.net.MalformedURLException;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.RelationHandlerMapTableFieldStrategy;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestRelationToHandlerMaps\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(RelationToHandlerMapInstance.class, AllFieldTypes.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testRelationToHandlerMaps() throws MalformedURLException {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\n+            RelationToHandlerMapInstance.class);\n+        assertEquals(RelationHandlerMapTableFieldStrategy.class,\n+            cm.getFieldMapping(\"aftMap\").getStrategy().getClass());\n+\n+        RelationToHandlerMapInstance o = new RelationToHandlerMapInstance();\n+        AllFieldTypes key = new AllFieldTypes();\n+        o.getMap().put(key, \"foo\");\n+        em.getTransaction().begin();\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"eab1f9c4f66547492bc71b81235e3de6c1597258","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/TestRelationToRelationMaps.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import org.apache.openjpa.jdbc.meta.ClassMapping;\r\n-import org.apache.openjpa.jdbc.meta.strats.RelationRelationMapTableFieldStrategy;\r\n-import org.apache.openjpa.persistence.JPAFacadeHelper;\r\n-import org.apache.openjpa.persistence.simple.AllFieldTypes;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-public class TestRelationToRelationMaps\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(RelationToRelationMapInstance.class, AllFieldTypes.class,\r\n-            CLEAR_TABLES);\r\n-    }\r\n-\r\n-    public void testRelationToRelationMaps() {\r\n-        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\r\n-            RelationToRelationMapInstance.class);\r\n-        assertEquals(RelationRelationMapTableFieldStrategy.class,\r\n-            cm.getFieldMapping(\"map\").getStrategy().getClass());\r\n-\r\n-        RelationToRelationMapInstance o = new RelationToRelationMapInstance();\r\n-        AllFieldTypes key = new AllFieldTypes();\r\n-        AllFieldTypes val = new AllFieldTypes();\r\n-        o.getMap().put(key, val);\r\n-        em.getTransaction().begin();\r\n-        em.persist(o);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-    }\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import org.apache.openjpa.jdbc.meta.ClassMapping;\n+import org.apache.openjpa.jdbc.meta.strats.RelationRelationMapTableFieldStrategy;\n+import org.apache.openjpa.persistence.JPAFacadeHelper;\n+import org.apache.openjpa.persistence.simple.AllFieldTypes;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+public class TestRelationToRelationMaps\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(RelationToRelationMapInstance.class, AllFieldTypes.class,\n+            CLEAR_TABLES);\n+    }\n+\n+    public void testRelationToRelationMaps() {\n+        ClassMapping cm = (ClassMapping) JPAFacadeHelper.getMetaData(em,\n+            RelationToRelationMapInstance.class);\n+        assertEquals(RelationRelationMapTableFieldStrategy.class,\n+            cm.getFieldMapping(\"map\").getStrategy().getClass());\n+\n+        RelationToRelationMapInstance o = new RelationToRelationMapInstance();\n+        AllFieldTypes key = new AllFieldTypes();\n+        AllFieldTypes val = new AllFieldTypes();\n+        o.getMap().put(key, val);\n+        em.getTransaction().begin();\n+        em.persist(o);\n+        em.getTransaction().commit();\n+        em.close();\n+    }\n }\n\\ No newline at end of file"},{"sha":"4bec8e3f3622af54ebb42d552f03d1d33afaa4a8","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/relations/UnidirectionalManyToOne.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,53 +1,53 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.relations;\r\n-\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToOne;\r\n-import javax.persistence.FetchType;\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.CascadeType;\r\n-\r\n-@Entity\r\n-public class UnidirectionalManyToOne {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private int id;\r\n-\r\n-    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\r\n-    private BasicEntity related;\r\n-\r\n-    public void setRelated(BasicEntity related) {\r\n-        this.related = related;\r\n-    }\r\n-\r\n-    public BasicEntity getRelated() {\r\n-        return related;\r\n-    }\r\n-\r\n-    public int getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public void setId(int id) {\r\n-        this.id = id;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.relations;\n+\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.FetchType;\n+import javax.persistence.Entity;\n+import javax.persistence.CascadeType;\n+\n+@Entity\n+public class UnidirectionalManyToOne {\n+\n+    @Id\n+    @GeneratedValue\n+    private int id;\n+\n+    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)\n+    private BasicEntity related;\n+\n+    public void setRelated(BasicEntity related) {\n+        this.related = related;\n+    }\n+\n+    public BasicEntity getRelated() {\n+        return related;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+}"},{"sha":"8980e6611d5af5ab01362040ce7d7e15c4b6e42e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java","status":"added","additions":138,"deletions":0,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityEmployee.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+/**\n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+@Entity\n+@Table(name=\"ENTITY_EMPLOYEE\")\n+public class EntityEmployee implements Serializable {\n+\n+    private static final long serialVersionUID = 2961572787273807912L;\n+    \n+    @Id\n+    @SequenceGenerator(name=\"SeqEmployee\", sequenceName=\"test_native_sequence\")\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqEmployee\")\n+    private int id; \n+    private String firstName;\n+    private String lastName;\n+    private float salary;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    public float getSalary() {\n+        return salary;\n+    }\n+\n+    public void setSalary(float salary) {\n+        this.salary = salary;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"EntityEmployee: Employee id: \" + getId() + \n+               \" firstName: \" + getFirstName() +\n+               \" lastName: \" + getLastName() +\n+               \" salary: \" + getSalary();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+            + ((getFirstName() == null) ? 0 : getFirstName().hashCode());\n+        result = prime * result + getId();\n+        result = prime * result\n+            + ((getLastName() == null) ? 0 : getLastName().hashCode());\n+        result = prime * result + Float.floatToIntBits(getSalary());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final EntityEmployee other = (EntityEmployee) obj;\n+        if (getId() != other.getId()) {\n+            return false;\n+        }\n+        if (getFirstName() == null) {\n+            if (other.getFirstName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getFirstName().equals(other.getFirstName())) {\n+            return false;\n+        }\n+        if (getLastName() == null) {\n+            if (other.getLastName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getLastName().equals(other.getLastName())) {\n+            return false;\n+        }\n+        if (Float.floatToIntBits(getSalary()) != Float.floatToIntBits(other\n+            .getSalary())) {\n+            return false;\n+        }\n+        return true;\n+    }\n+}"},{"sha":"e8c925c4a5ab3aa813cf48705cb36f1944268365","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/EntityPerson.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import java.io.Serializable;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+/**\n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+@Entity\n+@Table(name=\"ENTITY_PERSON\")\n+public class EntityPerson implements Serializable {\n+\n+    private static final long serialVersionUID = 3772049669261731520L;\n+    \n+    @Id\n+    @SequenceGenerator(name=\"SeqPerson\", sequenceName=\"test_native_sequence\")\n+    @GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\"SeqPerson\")\n+    private int id; \n+    private String firstName;\n+    private String lastName;\n+\n+\n+    public EntityPerson() {\n+    }\n+\n+    public EntityPerson(String firstName, String lastName) {\n+        this.firstName = firstName;\n+        this.lastName = lastName;\n+    }\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getFirstName() {\n+        return firstName;\n+    }\n+\n+    public void setFirstName(String firstName) {\n+        this.firstName = firstName;\n+    }\n+\n+    public String getLastName() {\n+        return lastName;\n+    }\n+\n+    public void setLastName(String lastName) {\n+        this.lastName = lastName;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"EntityPerson: Person id: \" + getId() + \n+               \" firstName: \" + getFirstName() +\n+               \" lastName: \" + getLastName();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result\n+            + ((getFirstName() == null) ? 0 : getFirstName().hashCode());\n+        result = prime * result + getId();\n+        result = prime * result\n+            + ((getLastName() == null) ? 0 : getLastName().hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final EntityPerson other = (EntityPerson) obj;\n+        if (getId() != other.getId()) {\n+            return false;\n+        }\n+        if (getFirstName() == null) {\n+            if (other.getFirstName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getFirstName().equals(other.getFirstName())) {\n+            return false;\n+        }\n+        if (getLastName() == null) {\n+            if (other.getLastName() != null) {\n+                return false;\n+            }\n+        }\n+        else if (!getLastName().equals(other.getLastName())) {\n+            return false;\n+        }\n+        return true;\n+    } \n+}"},{"sha":"ee9075ad36dffaad785e8469053c80f0e78d2a14","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java","status":"added","additions":543,"deletions":0,"changes":543,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/sequence/TestSequence.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -0,0 +1,543 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agEmployee_Last_Name to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.sequence;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * @author Tim McConnell\n+ * @since 2.0.0\n+ */\n+public class TestSequence extends SingleEMFTestCase {\n+\n+    private String multiThreadExecuting = null;\n+    private static final int NUMBER_ENTITIES = 5000;\n+\n+    public void setUp() {\n+        setUp(EntityPerson.class, EntityEmployee.class, CLEAR_TABLES,\n+            \"openjpa.Multithreaded\", \"true\");\n+    }\n+\n+    // Override teardown to preserve database contents\n+    @Override\n+    public void tearDown() throws Exception {\n+    }\n+\n+    public void testMultiThreadedNativeSequences() throws Exception {\n+        boolean supportsNativeSequence = false;\n+\n+        try {\n+            supportsNativeSequence = ((JDBCConfiguration) emf\n+                .getConfiguration()).getDBDictionaryInstance()\n+                .nextSequenceQuery != null;\n+        } catch (Throwable t) {\n+            supportsNativeSequence = false;\n+        }\n+\n+        if (supportsNativeSequence) {\n+            mttest(6, 8);\n+            switch ((int) (Math.random() * 7)) {\n+            case 0:\n+                createAndRemove();\n+                break;\n+            case 1:\n+                createManyPersonsInSeparateTransactions();\n+                break;\n+            case 2:\n+                createManyEmployeesInSeparateTransactions();\n+                break;\n+            case 3:\n+                createManyPersonsAndEmployeesInSeparateTransactions();\n+                break;\n+            case 4:\n+                createManyPersonsInSingleTransaction();\n+                break;\n+            case 5:\n+                createManyEmployeesInSingleTransaction();\n+                break;\n+            case 6:\n+                createManyPersonsAndEmployeesInSingleTransaction();\n+                break;\n+            }\n+        }\n+    }\n+\n+    private void createAndRemove() {\n+        int person_id;\n+        int employee_id;\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        EntityPerson person = new EntityPerson();\n+        person.setFirstName(\"Person_First_Name\");\n+        person.setLastName(\"Person_Last_Name\");\n+\n+        EntityEmployee employee = new EntityEmployee();\n+        employee.setFirstName(\"Employee_First_Name\");\n+        employee.setLastName(\"Employee_Last_Name\");\n+        employee.setSalary(NUMBER_ENTITIES);\n+\n+        em.getTransaction().begin();\n+        em.persist(person);\n+        em.persist(employee);\n+        em.getTransaction().commit();\n+\n+        em.refresh(person);\n+        em.refresh(employee);\n+        person_id = person.getId();\n+        employee_id = employee.getId();\n+\n+        person = em.find(EntityPerson.class, person_id);\n+        assertTrue(person != null);\n+        assertTrue(person.getId() == person_id);\n+        assertTrue(person.getFirstName().equals(\"Person_First_Name\"));\n+        assertTrue(person.getLastName().equals(\"Person_Last_Name\"));\n+\n+        employee = em.find(EntityEmployee.class, employee_id);\n+        assertTrue(employee != null);\n+        assertTrue(employee.getId() == employee_id);\n+        assertTrue(employee.getFirstName().equals(\"Employee_First_Name\"));\n+        assertTrue(employee.getLastName().equals(\"Employee_Last_Name\"));\n+        assertTrue(employee.getSalary() == NUMBER_ENTITIES);\n+\n+        em.getTransaction().begin();\n+        em.remove(person);\n+        em.remove(employee);\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsInSeparateTransactions() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"1_First_name_\" + ii);\n+            person.setLastName(\"1_Last_name_\" + ii);\n+\n+            em.getTransaction().begin();\n+            em.persist(person);\n+            em.getTransaction().commit();\n+        }\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyEmployeesInSeparateTransactions() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"2_First_name_\" + ii);\n+            employee.setLastName(\"2_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.getTransaction().begin();\n+            em.persist(employee);\n+            em.getTransaction().commit();\n+        }\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsAndEmployeesInSeparateTransactions() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"3_First_name_\" + ii);\n+            person.setLastName(\"3_Last_name_\" + ii);\n+\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"4_First_name_\" + ii);\n+            employee.setLastName(\"4_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.getTransaction().begin();\n+            em.persist(person);\n+            em.persist(employee);\n+            em.getTransaction().commit();\n+        }\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsInSingleTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"5_First_name_\" + ii);\n+            person.setLastName(\"5_Last_name_\" + ii);\n+\n+            em.persist(person);\n+        }\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyEmployeesInSingleTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"6_First_name_\" + ii);\n+            employee.setLastName(\"6_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.persist(employee);\n+        }\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    private void createManyPersonsAndEmployeesInSingleTransaction() {\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        for (int ii = 0; ii < NUMBER_ENTITIES; ii++) {\n+            EntityPerson person = new EntityPerson();\n+            person.setFirstName(\"7_First_name_\" + ii);\n+            person.setLastName(\"7_Last_name_\" + ii);\n+\n+            EntityEmployee employee = new EntityEmployee();\n+            employee.setFirstName(\"8_First_name_\" + ii);\n+            employee.setLastName(\"8_Last_name_\" + ii);\n+            employee.setSalary(ii);\n+\n+            em.persist(person);\n+            em.persist(employee);\n+        }\n+        em.getTransaction().commit();\n+\n+        em.clear();\n+        em.close();\n+    }\n+\n+    /**\n+     * Re-execute the invoking method a random number of times in a random\n+     * number of Threads.\n+     */\n+    public void mttest() throws ThreadingException {\n+        // 6 iterations in 8 threads is a good trade-off between\n+        // tests taking way too long and having a decent chance of\n+        // identifying MT problems.\n+        int iterations = 6;\n+        int threads = 8;\n+\n+        mttest(threads, iterations);\n+    }\n+\n+    /**\n+     * Execute the calling method <code>iterations</code> times in\n+     * <code>threads</code> Threads.\n+     */\n+    public void mttest(int threads, int iterations) {\n+        mttest(0, threads, iterations);\n+    }\n+\n+    public void mttest(int serialCount, int threads, int iterations)\n+        throws ThreadingException {\n+        String methodName = callingMethod(\"mttest\");\n+        mttest(serialCount, threads, iterations, methodName, new Object[0]);\n+    }\n+\n+    /**\n+     * Execute a test method in multiple threads.\n+     * \n+     * @param threads\n+     *            the number of Threads to run in\n+     * @param iterations\n+     *            the number of times the method should be execute in a single\n+     *            Thread\n+     * @param method\n+     *            the name of the method to execute\n+     * @param args\n+     *            the arguments to pass to the method\n+     * @throws ThreadingException\n+     *             if an errors occur in any of the Threads. The actual\n+     *             exceptions will be embedded in the exception. Note that this\n+     *             means that assert() failures will be treated as errors rather\n+     *             than warnings.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public void mttest(int threads, int iterations, final String method,\n+        final Object[] args) throws ThreadingException {\n+        mttest(0, threads, iterations, method, args);\n+    }\n+\n+    public void mttest(int serialCount, int threads, int iterations,\n+        final String method, final Object[] args) throws ThreadingException {\n+        if (multiThreadExecuting != null \n+            && multiThreadExecuting.equals(method)) {\n+            // we are currently executing in multi-threaded mode:\n+            // don't deadlock!\n+            return;\n+        }\n+\n+        multiThreadExecuting = method;\n+\n+        try {\n+            Class<?>[] paramClasses = new Class[args.length];\n+            for (int i = 0; i < paramClasses.length; i++)\n+                paramClasses[i] = args[i].getClass();\n+\n+            final Method meth;\n+\n+            try {\n+                meth = getClass().getMethod(method, paramClasses);\n+            } catch (NoSuchMethodException nsme) {\n+                throw new ThreadingException(nsme.toString(), nsme);\n+            }\n+\n+            final Object thiz = this;\n+\n+            mttest(\"reflection invocation: (\" + method + \")\", serialCount,\n+                threads, iterations, new VolatileRunnable() {\n+                    public void run() throws Exception {\n+                        meth.invoke(thiz, args);\n+                    }\n+                });\n+        } finally {\n+            multiThreadExecuting = null;\n+        }\n+    }\n+\n+    public void mttest(String title, final int threads, final int iterations,\n+        final VolatileRunnable runner) throws ThreadingException {\n+        mttest(title, 0, threads, iterations, runner);\n+    }\n+\n+    /**\n+     * Execute a test method in multiple threads.\n+     * \n+     * @param title\n+     *            a description of the test, for inclusion in the error message\n+     * @param serialCount\n+     *            the number of times to run the method serially before spawning\n+     *            threads.\n+     * @param threads\n+     *            the number of Threads to run in\n+     * @param iterations\n+     *            the number of times the method should\n+     * @param runner\n+     *            the VolatileRunnable that will execute the actual test from\n+     *            within the Thread.\n+     * @throws ThreadingException\n+     *             if an errors occur in any of the Threads. The actual\n+     *             exceptions will be embedded in the exception. Note that this\n+     *             means that assert() failures will be treated as errors rather\n+     *             than warnings.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public void mttest(String title, final int serialCount, final int threads,\n+        final int iterations, final VolatileRunnable runner)\n+        throws ThreadingException {\n+        final List exceptions = Collections.synchronizedList(new LinkedList());\n+\n+        Thread[] runners = new Thread[threads];\n+\n+        final long startMillis = System.currentTimeMillis() + 1000;\n+\n+        for (int i = 1; i <= threads; i++) {\n+            final int thisThread = i;\n+\n+            runners[i - 1] = new Thread(title + \" [\" + i + \" of \" + threads\n+                + \"]\") {\n+                public void run() {\n+                    // do our best to have all threads start at the exact\n+                    // same time. This is imperfect, but the closer we\n+                    // get to everyone starting at the same time, the\n+                    // better chance we have for identifying MT problems.\n+                    while (System.currentTimeMillis() < startMillis)\n+                        yield();\n+\n+                    int thisIteration = 1;\n+                    try {\n+                        for (; thisIteration <= iterations; thisIteration++) {\n+                            // go go go!\n+                            runner.run();\n+                        }\n+                    } catch (Throwable error) {\n+                        synchronized (exceptions) {\n+                            // embed the exception into something that gives\n+                            // us some more information about the threading\n+                            // environment\n+                            exceptions.add(new ThreadingException(\"thread=\"\n+                                + this.toString() + \";threadNum=\" + thisThread\n+                                + \";maxThreads=\" + threads + \";iteration=\"\n+                                + thisIteration + \";maxIterations=\"\n+                                + iterations, error));\n+                        }\n+                    }\n+                }\n+            };\n+        }\n+\n+        // start the serial tests(does not spawn the threads)\n+        for (int i = 0; i < serialCount; i++) {\n+            runners[0].run();\n+        }\n+\n+        // start the multithreaded\n+        for (int i = 0; i < threads; i++) {\n+            runners[i].start();\n+        }\n+\n+        // wait for them all to complete\n+        for (int i = 0; i < threads; i++) {\n+            try {\n+                runners[i].join();\n+            } catch (InterruptedException e) {\n+            }\n+        }\n+\n+        if (exceptions.size() == 0)\n+            return; // sweeeeeeeet: no errors\n+\n+        // embed all the exceptions that were throws into a\n+        // ThreadingException\n+        Throwable[] errors = (Throwable[]) exceptions.toArray(new Throwable[0]);\n+        throw new ThreadingException(\"The \" + errors.length\n+            + \" embedded errors \" + \"occured in the execution of \" + iterations\n+            + \" iterations \" + \"of \" + threads + \" threads: [\" + title + \"]\",\n+            errors);\n+    }\n+\n+    /**\n+     * Check to see if we are in the top-level execution stack.\n+     */\n+    public boolean isRootThread() {\n+        return multiThreadExecuting == null;\n+    }\n+\n+    /**\n+     * A Runnable that can throw an Exception: used to test cases.\n+     */\n+    public static interface VolatileRunnable {\n+\n+        public void run() throws Exception;\n+    }\n+\n+    /**\n+     * Exception for errors caught during threading tests.\n+     */\n+    public class ThreadingException extends RuntimeException {\n+\n+        private static final long serialVersionUID = -1911769845552507956L;\n+        private final Throwable[] _nested;\n+\n+        public ThreadingException(String msg, Throwable nested) {\n+            super(msg);\n+            if (nested == null)\n+                _nested = new Throwable[0];\n+            else\n+                _nested = new Throwable[] { nested };\n+        }\n+\n+        public ThreadingException(String msg, Throwable[] nested) {\n+            super(msg);\n+            if (nested == null)\n+                _nested = new Throwable[0];\n+            else\n+                _nested = nested;\n+        }\n+\n+        public void printStackTrace() {\n+            printStackTrace(System.out);\n+        }\n+\n+        public void printStackTrace(PrintStream out) {\n+            printStackTrace(new PrintWriter(out));\n+        }\n+\n+        public void printStackTrace(PrintWriter out) {\n+            super.printStackTrace(out);\n+            for (int i = 0; i < _nested.length; i++) {\n+                out.print(\"Nested Throwable #\" + (i + 1) + \": \");\n+                _nested[i].printStackTrace(out);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Return the last method name that called this one by parsing the current\n+     * stack trace.\n+     * \n+     * @param exclude\n+     *            a method name to skip\n+     * @throws IllegalStateException\n+     *             If the calling method could not be identified.\n+     * @author Marc Prud'hommeaux\n+     */\n+    public String callingMethod(String exclude) {\n+        // determine the currently executing method by\n+        // looking at the stack track. Hackish, but convenient.\n+        StringWriter sw = new StringWriter();\n+        new Exception().printStackTrace(new PrintWriter(sw));\n+        for (StringTokenizer stackTrace = new StringTokenizer(sw.toString(),\n+            System.getProperty(\"line.separator\"))\n+            ; stackTrace.hasMoreTokens() ; ) {\n+            String line = stackTrace.nextToken().trim();\n+\n+            // not a stack trace element\n+            if (!(line.startsWith(\"at \")))\n+                continue;\n+\n+            String fullMethodName = line.substring(0, line.indexOf(\"(\"));\n+\n+            String shortMethodName = fullMethodName.substring(fullMethodName\n+                .lastIndexOf(\".\") + 1);\n+\n+            // skip our own methods!\n+            if (shortMethodName.equals(\"callingMethod\"))\n+                continue;\n+            if (exclude != null && shortMethodName.equals(exclude))\n+                continue;\n+\n+            return shortMethodName;\n+        }\n+\n+        throw new IllegalStateException(\"Could not identify calling \"\n+            + \"method in stack trace\");\n+    }\n+}"},{"sha":"425d4fa19d3df7d677652579e32dcf9336b12886","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/NamedEntity.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,49 +1,49 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Version;\r\n-\r\n-@Entity(name=\"named\")\r\n-public class NamedEntity {\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private long id;\r\n-\r\n-    private String name;\r\n-\r\n-    @Version\r\n-    private Integer optLock;\r\n-\r\n-    public long getId() { \r\n-        return id; \r\n-    }\r\n-\r\n-    public String getName() { \r\n-        return name; \r\n-    }\r\n-\r\n-    public void setName(String name) { \r\n-        this.name = name; \r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Version;\n+\n+@Entity(name=\"named\")\n+public class NamedEntity {\n+\n+    @Id\n+    @GeneratedValue\n+    private long id;\n+\n+    private String name;\n+\n+    @Version\n+    private Integer optLock;\n+\n+    public long getId() { \n+        return id; \n+    }\n+\n+    public String getName() { \n+        return name; \n+    }\n+\n+    public void setName(String name) { \n+        this.name = name; \n+    }\n+}"},{"sha":"3c44eb6be10df5e254df5973dc824630640bca43","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestBasicAnnotation.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,92 +1,92 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import java.math.BigDecimal;\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import junit.textui.TestRunner;\r\n-import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n-\r\n-/**\r\n- * Simple test case to test the default values associated with the @Basic \r\n- * annotation.\r\n- *\r\n- * @author Kevin Sutter\r\n- */\r\n-public class TestBasicAnnotation\r\n-    extends SingleEMFTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(CLEAR_TABLES, AllFieldTypes.class);\r\n-    }\r\n-\r\n-    public void testEagerFetchType() {\r\n-        EntityManager em = emf.createEntityManager();\r\n-        em.getTransaction().begin();\r\n-        AllFieldTypes aft = new AllFieldTypes();\r\n-        \r\n-        // Initialize a sampling of the types\r\n-        aft.setBigDecimalField(new BigDecimal(1));\r\n-        aft.setBooleanField(false);\r\n-        aft.setByteLob(new byte[1]);\r\n-        aft.setCalendarField(Calendar.getInstance());\r\n-        aft.setDateField(new Date());\r\n-        aft.setEnumField(AllFieldTypes.EnumType.Value1);\r\n-        aft.setSerializableField(new Date());\r\n-        aft.setSqlTimestampField(new java.sql.Timestamp(\r\n-                System.currentTimeMillis()));\r\n-        aft.setStringField(\"aft\");\r\n-        aft.setWByteLob(new Byte[1]);\r\n-        aft.setWDoubleField(new Double(1));\r\n-        \r\n-        em.persist(aft);\r\n-        em.getTransaction().commit();\r\n-        em.clear();\r\n-        \r\n-        AllFieldTypes aftQuery = (AllFieldTypes)em.createQuery\r\n-            (\"select x from AllFieldTypes x where x.stringField = 'aft'\").\r\n-            getSingleResult();\r\n-        em.clear();  // ensure detached\r\n-        assertFalse(em.contains(aftQuery));\r\n-        \r\n-        // assert that the sampling of fields are not null\r\n-        assertNotNull(aftQuery.getBigDecimalField());\r\n-        assertNotNull(aftQuery.getBooleanField());\r\n-        assertNotNull(aftQuery.getByteLob());\r\n-        assertNotNull(aftQuery.getCalendarField());\r\n-        assertNotNull(aftQuery.getDateField());\r\n-        assertNotNull(aftQuery.getEnumField());\r\n-        assertNotNull(aftQuery.getSerializableField());\r\n-        assertNotNull(aftQuery.getSqlTimestampField());\r\n-        assertNotNull(aftQuery.getStringField());\r\n-        assertNotNull(aftQuery.getWByteLob());\r\n-        assertNotNull(aftQuery.getWDoubleField());\r\n-        \r\n-        em.close();\r\n-    }\r\n-\r\n-    public static void main(String[] args) {\r\n-        TestRunner.run(TestBasicAnnotation.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import java.math.BigDecimal;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\n+\n+/**\n+ * Simple test case to test the default values associated with the @Basic \n+ * annotation.\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestBasicAnnotation\n+    extends SingleEMFTestCase {\n+\n+    public void setUp() {\n+        setUp(CLEAR_TABLES, AllFieldTypes.class);\n+    }\n+\n+    public void testEagerFetchType() {\n+        EntityManager em = emf.createEntityManager();\n+        em.getTransaction().begin();\n+        AllFieldTypes aft = new AllFieldTypes();\n+        \n+        // Initialize a sampling of the types\n+        aft.setBigDecimalField(new BigDecimal(1));\n+        aft.setBooleanField(false);\n+        aft.setByteLob(new byte[1]);\n+        aft.setCalendarField(Calendar.getInstance());\n+        aft.setDateField(new Date());\n+        aft.setEnumField(AllFieldTypes.EnumType.Value1);\n+        aft.setSerializableField(new Date());\n+        aft.setSqlTimestampField(new java.sql.Timestamp(\n+                System.currentTimeMillis()));\n+        aft.setStringField(\"aft\");\n+        aft.setWByteLob(new Byte[1]);\n+        aft.setWDoubleField(new Double(1));\n+        \n+        em.persist(aft);\n+        em.getTransaction().commit();\n+        em.clear();\n+        \n+        AllFieldTypes aftQuery = (AllFieldTypes)em.createQuery\n+            (\"select x from AllFieldTypes x where x.stringField = 'aft'\").\n+            getSingleResult();\n+        em.clear();  // ensure detached\n+        assertFalse(em.contains(aftQuery));\n+        \n+        // assert that the sampling of fields are not null\n+        assertNotNull(aftQuery.getBigDecimalField());\n+        assertNotNull(aftQuery.getBooleanField());\n+        assertNotNull(aftQuery.getByteLob());\n+        assertNotNull(aftQuery.getCalendarField());\n+        assertNotNull(aftQuery.getDateField());\n+        assertNotNull(aftQuery.getEnumField());\n+        assertNotNull(aftQuery.getSerializableField());\n+        assertNotNull(aftQuery.getSqlTimestampField());\n+        assertNotNull(aftQuery.getStringField());\n+        assertNotNull(aftQuery.getWByteLob());\n+        assertNotNull(aftQuery.getWDoubleField());\n+        \n+        em.close();\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(TestBasicAnnotation.class);\n+    }\n+}\n+"},{"sha":"47ae8de872b02e53be7b030465c7f950c537b23a","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","status":"modified","additions":115,"deletions":115,"changes":230,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/simple/TestEntityManagerMerge.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,115 +1,115 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence.simple;\r\n-\r\n-import javax.persistence.EntityManager;\r\n-\r\n-import junit.textui.TestRunner;\r\n-import org.apache.openjpa.persistence.test.SingleEMTestCase;\r\n-\r\n-/**\r\n- * Test case to ensure that the proper JPA merge semantics are processed.\r\n- *\r\n- * @author Kevin Sutter\r\n- */\r\n-public class TestEntityManagerMerge\r\n-    extends SingleEMTestCase {\r\n-\r\n-    public void setUp() {\r\n-        setUp(AllFieldTypes.class, Person.class);\r\n-    }\r\n-\r\n-    public void testMerge() {\r\n-        // Create EntityManager and Start a transaction (1)\r\n-        begin();\r\n-\r\n-        // Insert a new object into the PC\r\n-        AllFieldTypes testObject = new AllFieldTypes();\r\n-        testObject.setStringField(\"new test object\");\r\n-        persist(testObject);\r\n-        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n-        \r\n-        // Modify this object...\r\n-        testObject.setStringField(\"updated test object\");\r\n-\r\n-        // Attempt to merge this updated object into the PC.  Should be ignored.\r\n-        AllFieldTypes mergedObject = em.merge(testObject);\r\n-        assertTrue(\"mergedObject and testObject are not equal\", \r\n-                mergedObject.equals(testObject));\r\n-        assertTrue(\"mergedObject and testObject are not ==\", \r\n-                mergedObject == testObject);\r\n-        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n-        assertTrue(\"mergedObject not found in pc\", em.contains(mergedObject));\r\n-        \r\n-        // And, once again...\r\n-        testObject.setStringField(\"yet another update\");\r\n-        AllFieldTypes mergedObject2 = em.merge(testObject);\r\n-        assertTrue(\"mergedObject2 and testObject are not equal\", \r\n-                mergedObject2.equals(testObject));\r\n-        assertTrue(\"mergedObject2 and testObject are not ==\", \r\n-                mergedObject2 == testObject);\r\n-        assertTrue(\"testObject not found in pc\", em.contains(testObject));\r\n-        assertTrue(\"mergedObject2 not found in pc\", em.contains(mergedObject2));\r\n-        \r\n-        // Rollback\r\n-        rollback();\r\n-  \r\n-    }\r\n-    \r\n-    /**\r\n-     * This test verifies that persisting a new entity which matches an existing \r\n-     * row in the database succeeds. \r\n-     */\r\n-    public void testMergeExistingEntity() {\r\n-        Person p = new Person();\r\n-        p.setId(102);\r\n-\r\n-        EntityManager em = emf.createEntityManager();\r\n-\r\n-        em.getTransaction().begin();\r\n-        em.persist(p);\r\n-        em.getTransaction().commit();\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        p = new Person();\r\n-        p.setId(102);\r\n-        p.setForename(\"Jane\");\r\n-\r\n-        em.getTransaction().begin();\r\n-        em.merge(p);\r\n-        em.getTransaction().commit();\r\n-\r\n-        em.close();\r\n-\r\n-        em = emf.createEntityManager();\r\n-        p = (Person) em.createQuery(\"Select p from Person p where p.id = 102\")\r\n-                .getSingleResult();\r\n-\r\n-        assertNotNull(p);\r\n-        assertEquals(\"Jane\", p.getForename());\r\n-        \r\n-        em.close();\r\n-    }\r\n-    \r\n-    public static void main(String[] args) {\r\n-        TestRunner.run(TestEntityManagerMerge.class);\r\n-    }\r\n-}\r\n-\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence.simple;\n+\n+import javax.persistence.EntityManager;\n+\n+import junit.textui.TestRunner;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n+\n+/**\n+ * Test case to ensure that the proper JPA merge semantics are processed.\n+ *\n+ * @author Kevin Sutter\n+ */\n+public class TestEntityManagerMerge\n+    extends SingleEMTestCase {\n+\n+    public void setUp() {\n+        setUp(AllFieldTypes.class, Person.class);\n+    }\n+\n+    public void testMerge() {\n+        // Create EntityManager and Start a transaction (1)\n+        begin();\n+\n+        // Insert a new object into the PC\n+        AllFieldTypes testObject = new AllFieldTypes();\n+        testObject.setStringField(\"new test object\");\n+        persist(testObject);\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\n+        \n+        // Modify this object...\n+        testObject.setStringField(\"updated test object\");\n+\n+        // Attempt to merge this updated object into the PC.  Should be ignored.\n+        AllFieldTypes mergedObject = em.merge(testObject);\n+        assertTrue(\"mergedObject and testObject are not equal\", \n+                mergedObject.equals(testObject));\n+        assertTrue(\"mergedObject and testObject are not ==\", \n+                mergedObject == testObject);\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\n+        assertTrue(\"mergedObject not found in pc\", em.contains(mergedObject));\n+        \n+        // And, once again...\n+        testObject.setStringField(\"yet another update\");\n+        AllFieldTypes mergedObject2 = em.merge(testObject);\n+        assertTrue(\"mergedObject2 and testObject are not equal\", \n+                mergedObject2.equals(testObject));\n+        assertTrue(\"mergedObject2 and testObject are not ==\", \n+                mergedObject2 == testObject);\n+        assertTrue(\"testObject not found in pc\", em.contains(testObject));\n+        assertTrue(\"mergedObject2 not found in pc\", em.contains(mergedObject2));\n+        \n+        // Rollback\n+        rollback();\n+  \n+    }\n+    \n+    /**\n+     * This test verifies that persisting a new entity which matches an existing \n+     * row in the database succeeds. \n+     */\n+    public void testMergeExistingEntity() {\n+        Person p = new Person();\n+        p.setId(102);\n+\n+        EntityManager em = emf.createEntityManager();\n+\n+        em.getTransaction().begin();\n+        em.persist(p);\n+        em.getTransaction().commit();\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        p = new Person();\n+        p.setId(102);\n+        p.setForename(\"Jane\");\n+\n+        em.getTransaction().begin();\n+        em.merge(p);\n+        em.getTransaction().commit();\n+\n+        em.close();\n+\n+        em = emf.createEntityManager();\n+        p = (Person) em.createQuery(\"Select p from Person p where p.id = 102\")\n+                .getSingleResult();\n+\n+        assertNotNull(p);\n+        assertEquals(\"Jane\", p.getForename());\n+        \n+        em.close();\n+    }\n+    \n+    public static void main(String[] args) {\n+        TestRunner.run(TestEntityManagerMerge.class);\n+    }\n+}\n+"},{"sha":"6b666c80148f1241187449b43b7f188fdef8eeb6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","status":"modified","additions":44,"deletions":44,"changes":88,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/xml/TestPersistenceUnitWithoutXSD.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,44 +1,44 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence.xml;\r\n-\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-import org.apache.openjpa.persistence.test.PersistenceTestCase;\r\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\r\n-import org.apache.openjpa.enhance.PCEnhancer;\r\n-\r\n-public class TestPersistenceUnitWithoutXSD extends PersistenceTestCase {\r\n-\r\n-    public void testPersistenceUnitWithoutXSD() {\r\n-        EntityManagerFactory emf = OpenJPAPersistence\r\n-            .createEntityManagerFactory(\"incorrect-ordering-and-no-xsd\",\r\n-                \"org/apache/openjpa/persistence/xml/persistence-without-xsd.xml\");\r\n-        emf.createEntityManager().close();\r\n-        emf.close();\r\n-    }\r\n-\r\n-    public void testEnhancer() {\r\n-        PCEnhancer.main(new String[] {\r\n-            \"-p\",\r\n-            \"org/apache/openjpa/persistence/xml/persistence-without-xsd.xml\",\r\n-            SimpleXmlEntity.class.getName()\r\n-        });\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence.xml;\n+\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.persistence.test.PersistenceTestCase;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.enhance.PCEnhancer;\n+\n+public class TestPersistenceUnitWithoutXSD extends PersistenceTestCase {\n+\n+    public void testPersistenceUnitWithoutXSD() {\n+        EntityManagerFactory emf = OpenJPAPersistence\n+            .createEntityManagerFactory(\"incorrect-ordering-and-no-xsd\",\n+                \"org/apache/openjpa/persistence/xml/persistence-without-xsd.xml\");\n+        emf.createEntityManager().close();\n+        emf.close();\n+    }\n+\n+    public void testEnhancer() {\n+        PCEnhancer.main(new String[] {\n+            \"-p\",\n+            \"org/apache/openjpa/persistence/xml/persistence-without-xsd.xml\",\n+            SimpleXmlEntity.class.getName()\n+        });\n+    }\n+}"},{"sha":"fbab1f5518f9c50539d9dc3c30014d4221c74a36","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","status":"modified","additions":39,"deletions":36,"changes":75,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/listener-orm.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,37 +1,40 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\r\n-    version=\"1.0\">\r\n-    <persistence-unit-metadata>\r\n-        <persistence-unit-defaults>\r\n-            <entity-listeners>\r\n-                <entity-listener class=\r\n-                \t\"org.apache.openjpa.persistence.callbacks.ListenerImpl\">\r\n-                </entity-listener>\r\n-            </entity-listeners>\r\n-        </persistence-unit-defaults>\r\n-    </persistence-unit-metadata>\r\n-    <package>org.apache.openjpa.persistence.callbacks</package>\r\n-    <entity class=\"EntityListenerEntity\">\r\n-        <exclude-default-listeners/>\r\n-    </entity>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+    version=\"1.0\">\n+    <persistence-unit-metadata>\n+        <persistence-unit-defaults>\n+            <entity-listeners>\n+                <entity-listener class=\n+                \t\"org.apache.openjpa.persistence.callbacks.ListenerImpl\">\n+                </entity-listener>\n+            </entity-listeners>\n+        </persistence-unit-defaults>\n+    </persistence-unit-metadata>\n+    <package>org.apache.openjpa.persistence.callbacks</package>\n+    <entity class=\"EntityListenerEntity\">\n+        <exclude-default-listeners/>\n+    </entity>\n+    <entity class=\"Message\">\n+        <exclude-default-listeners/>\n+    </entity>\n </entity-mappings>\n\\ No newline at end of file"},{"sha":"12f6afe6117916914ea12e581be137fa0e2271cc","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -84,16 +84,17 @@\n         <mapping-file>META-INF/listener-orm.xml</mapping-file>\n         <class>org.apache.openjpa.persistence.callbacks.EntityListenerEntity</class>\n         <class>org.apache.openjpa.persistence.callbacks.GlobalListenerEntity</class>\n+        <class>org.apache.openjpa.persistence.callbacks.Message</class>\n         <properties>\n             <property name=\"openjpa.jdbc.SynchronizeMappings\"\n                   value=\"buildSchema(ForeignKeys=true)\"/>\n         </properties>\n-    </persistence-unit>\r\n-    \r\n-    <persistence-unit name=\"test-unique-constraint\">\r\n-        <mapping-file>org/apache/openjpa/persistence/jdbc/unique/orm.xml</mapping-file>\r\n-        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueA</class>\r\n-        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueB</class>\r\n-    </persistence-unit>\r\n+    </persistence-unit>\n+    \n+    <persistence-unit name=\"test-unique-constraint\">\n+        <mapping-file>org/apache/openjpa/persistence/jdbc/unique/orm.xml</mapping-file>\n+        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueA</class>\n+        <class>org.apache.openjpa.persistence.jdbc.unique.UniqueB</class>\n+    </persistence-unit>\n     \n </persistence>"},{"sha":"037365e080433dc77e5d9882c59ce3ae06113c6c","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/lib/conf/product-derivations-load.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,27 +1,27 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n-             version=\"1.0\">\r\n-\r\n-    <persistence-unit name=\"foo\"/>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n+             version=\"1.0\">\n+\n+    <persistence-unit name=\"foo\"/>\n </persistence>\n\\ No newline at end of file"},{"sha":"a79fc1f45a0bc6ce8d74032a1100aaead8969dcb","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","status":"modified","additions":160,"deletions":160,"changes":320,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/orm.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,160 +1,160 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \r\n-xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n-xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\r\n-                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \r\n-version=\"1.0\">\r\n-\r\n-<persistence-unit-metadata>\r\n-   <persistence-unit-defaults>\r\n-       <entity-listeners>\r\n-            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DefaultCallbackListener\">\r\n-                 <pre-persist method-name=\"prePersist\" />\r\n-                 <post-persist method-name=\"postPersist\" />\r\n-                 <pre-remove method-name=\"preRemove\" />\r\n-                 <post-remove method-name=\"postRemove\" />\r\n-                 <pre-update method-name=\"preUpdate\" />\r\n-                 <post-update method-name=\"postUpdate\" />\r\n-                 <post-load method-name=\"postLoad\" />\r\n-            </entity-listener>\r\n-        </entity-listeners> \r\n-   </persistence-unit-defaults>\r\n-</persistence-unit-metadata>\r\n-\r\n-<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tSchedule class represents the superclass of this app...\r\n-\t\t</description>\r\n-\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\r\n-\r\n-\t     <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"dob\">\r\n-\t\t\t\t<temporal>DATE</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"startDate\">\r\n-\t\t\t\t<temporal>TIME</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"endDate\">\r\n-\t\t\t\t<temporal>TIMESTAMP</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \r\n-\t\t</description>\r\n-\r\n-\t\t<table name=\"Flight_Sched\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>planeName</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"FlightNum\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"planeName\">\r\n-\t\t\t\t<column name=\"flight_name\"/>\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\r\n-\t\t<inheritance strategy=\"JOINED\" />\r\n-\r\n-\t\t<entity-listeners>\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\r\n-\t\t\t\t<post-remove method-name=\"validateNothing\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<transient name=\"syncTime\" />\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\r\n-\t</entity>  \r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\r\n-\t</entity> -->\r\n-\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\r\n-    <exclude-default-listeners />\r\n-    <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\r\n-\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\r\n-\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\r\n-\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\r\n-\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners>\r\n-\r\n-        <pre-persist method-name=\"verifyPrePersist\" />\r\n-        <post-persist method-name=\"verifyPostPersist\" />\r\n-        <pre-remove method-name=\"verifyPreRemove\" />\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"surname\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity> \r\n-</entity-mappings>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \n+xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\n+                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \n+version=\"1.0\">\n+\n+<persistence-unit-metadata>\n+   <persistence-unit-defaults>\n+       <entity-listeners>\n+            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DefaultCallbackListener\">\n+                 <pre-persist method-name=\"prePersist\" />\n+                 <post-persist method-name=\"postPersist\" />\n+                 <pre-remove method-name=\"preRemove\" />\n+                 <post-remove method-name=\"postRemove\" />\n+                 <pre-update method-name=\"preUpdate\" />\n+                 <post-update method-name=\"postUpdate\" />\n+                 <post-load method-name=\"postLoad\" />\n+            </entity-listener>\n+        </entity-listeners> \n+   </persistence-unit-defaults>\n+</persistence-unit-metadata>\n+\n+<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tSchedule class represents the superclass of this app...\n+\t\t</description>\n+\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\n+\n+\t     <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"dob\">\n+\t\t\t\t<temporal>DATE</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"startDate\">\n+\t\t\t\t<temporal>TIME</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"endDate\">\n+\t\t\t\t<temporal>TIMESTAMP</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \n+\t\t</description>\n+\n+\t\t<table name=\"Flight_Sched\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>planeName</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"FlightNum\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"planeName\">\n+\t\t\t\t<column name=\"flight_name\"/>\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\n+\t\t<inheritance strategy=\"JOINED\" />\n+\n+\t\t<entity-listeners>\n+\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\n+\t\t\t\t<post-remove method-name=\"validateNothing\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<transient name=\"syncTime\" />\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\n+\t</entity>  \n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\n+\t</entity> -->\n+\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\n+    <exclude-default-listeners />\n+    <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\n+\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\n+\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\n+\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\n+\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \n+\t\t\t</entity-listener>\n+\t\t</entity-listeners>\n+\n+        <pre-persist method-name=\"verifyPrePersist\" />\n+        <post-persist method-name=\"verifyPostPersist\" />\n+        <pre-remove method-name=\"verifyPreRemove\" />\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<basic name=\"surname\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity> \n+</entity-mappings>"},{"sha":"19dffcf74387241d0d5e1feaab9824ea2d698c17","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/annotype/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,48 +1,48 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedOwner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Generator</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.OrderByEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuperSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdClass</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuper</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedOwner</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.AnnoTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Flat2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Generator</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TablePerClass2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.OrderByEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuperSub</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.PropertyAccess1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbedValue2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddedIdClass</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.EmbeddableSuper</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"14a43af3aab47afa31d6001f2476389e97551886","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","status":"modified","additions":160,"deletions":160,"changes":320,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/orm.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,160 +1,160 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \r\n-xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n-xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\r\n-                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \r\n-version=\"1.0\">\r\n-\r\n-<persistence-unit-metadata>\r\n-   <persistence-unit-defaults>\r\n-       <entity-listeners>\r\n-            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.DefaultCallbackListener\">\r\n-                 <pre-persist method-name=\"prePersist\" />\r\n-                 <post-persist method-name=\"postPersist\" />\r\n-                 <pre-remove method-name=\"preRemove\" />\r\n-                 <post-remove method-name=\"postRemove\" />\r\n-                 <pre-update method-name=\"preUpdate\" />\r\n-                 <post-update method-name=\"postUpdate\" />\r\n-                 <post-load method-name=\"postLoad\" />\r\n-            </entity-listener>\r\n-        </entity-listeners> \r\n-   </persistence-unit-defaults>\r\n-</persistence-unit-metadata>\r\n-\r\n-<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tSchedule class represents the superclass of this app...\r\n-\t\t</description>\r\n-\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\r\n-\r\n-\t     <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"prePersist\" />\r\n-\t\t\t\t<post-persist method-name=\"postPersist\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"dob\">\r\n-\t\t\t\t<temporal>DATE</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"startDate\">\r\n-\t\t\t\t<temporal>TIME</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"endDate\">\r\n-\t\t\t\t<temporal>TIMESTAMP</temporal>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\r\n-\t\t<description>\r\n-\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \r\n-\t\t</description>\r\n-\r\n-\t\t<table name=\"Flight_Sched\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>planeName</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"FlightNum\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"planeName\">\r\n-\t\t\t\t<column name=\"flight_name\"/>\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\r\n-\t\t<inheritance strategy=\"JOINED\" />\r\n-\r\n-\t\t<entity-listeners>\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\r\n-\t\t\t\t<post-remove method-name=\"validateNothing\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\r\n-\t\t\t\t<pre-persist method-name=\"validateName\" />\r\n-\t\t\t\t<post-update method-name=\"testpost\" />\r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners> \r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<transient name=\"syncTime\" />\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\r\n-\t</entity>  \r\n-\r\n-\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\r\n-\t</entity> -->\r\n-\r\n-\r\n-  <!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\r\n-    <exclude-default-listeners />\r\n-    <entity-listeners>\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\r\n-\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\r\n-\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\r\n-\t\t\t</entity-listener>\r\n-\r\n-\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\r\n-\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\r\n-\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \r\n-\t\t\t</entity-listener>\r\n-\t\t</entity-listeners>\r\n-\r\n-        <pre-persist method-name=\"verifyPrePersist\" />\r\n-        <post-persist method-name=\"verifyPostPersist\" />\r\n-        <pre-remove method-name=\"verifyPreRemove\" />\r\n-\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"id\">\r\n-\t\t\t\t<generated-value strategy=\"AUTO\" />\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"name\">\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"surname\">\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity> -->\r\n-</entity-mappings>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\" \n+xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n+xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\n+                    http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\" \n+version=\"1.0\">\n+\n+<persistence-unit-metadata>\n+   <persistence-unit-defaults>\n+       <entity-listeners>\n+            <entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.DefaultCallbackListener\">\n+                 <pre-persist method-name=\"prePersist\" />\n+                 <post-persist method-name=\"postPersist\" />\n+                 <pre-remove method-name=\"preRemove\" />\n+                 <post-remove method-name=\"postRemove\" />\n+                 <pre-update method-name=\"preUpdate\" />\n+                 <post-update method-name=\"postUpdate\" />\n+                 <post-load method-name=\"postLoad\" />\n+            </entity-listener>\n+        </entity-listeners> \n+   </persistence-unit-defaults>\n+</persistence-unit-metadata>\n+\n+<!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Schedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tSchedule class represents the superclass of this app...\n+\t\t</description>\n+\t\t<inheritance strategy=\"TABLE_PER_CLASS\" />\n+\n+\t     <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.DateValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.StringValidator\">\n+\t\t\t\t<pre-persist method-name=\"prePersist\" />\n+\t\t\t\t<post-persist method-name=\"postPersist\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"dob\">\n+\t\t\t\t<temporal>DATE</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"startDate\">\n+\t\t\t\t<temporal>TIME</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"endDate\">\n+\t\t\t\t<temporal>TIMESTAMP</temporal>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.FlightSchedule\" metadata-complete=\"true\">\n+\t\t<description>\n+\t\t\tFlightSchedule, subclass of schedule specifies the real life flight schedule \n+\t\t</description>\n+\n+\t\t<table name=\"Flight_Sched\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>planeName</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"FlightNum\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"planeName\">\n+\t\t\t\t<column name=\"flight_name\"/>\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.Employee\" metadata-complete=\"true\">\n+\t\t<inheritance strategy=\"JOINED\" />\n+\n+\t\t<entity-listeners>\n+\t\t\t<entity-listener class=\"annotations.common.apps.NameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<pre-remove method-name=\"validateNothing1\" />\n+\t\t\t\t<post-remove method-name=\"validateNothing\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"annotations.common.apps.LongNameValidator\">\n+\t\t\t\t<pre-persist method-name=\"validateName\" />\n+\t\t\t\t<post-update method-name=\"testpost\" />\n+\t\t\t</entity-listener>\n+\t\t</entity-listeners> \n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<transient name=\"syncTime\" />\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.ContractEmployee\" metadata-complete=\"true\">\n+\t</entity>  \n+\n+\t<entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.annotype.TxRollbackEntity\" metadata-complete=\"true\">\n+\t</entity> -->\n+\n+\n+  <!-- <entity class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity\">\n+    <exclude-default-listeners />\n+    <entity-listeners>\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener\">\n+\t\t\t\t<post-remove method-name=\"verifyPostRemove\" />\n+\t\t\t\t<post-update method-name=\"verifyPostUpdate\" />\n+\t\t\t</entity-listener>\n+\n+\t\t\t<entity-listener class=\"org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.EntityDDListener2\">\n+\t\t\t\t<pre-update method-name=\"verifyPreUpdate\" />\n+\t\t\t\t<post-load method-name=\"verifyPostLoad\" /> \n+\t\t\t</entity-listener>\n+\t\t</entity-listeners>\n+\n+        <pre-persist method-name=\"verifyPrePersist\" />\n+        <post-persist method-name=\"verifyPostPersist\" />\n+        <pre-remove method-name=\"verifyPreRemove\" />\n+\n+\t\t<attributes>\n+\t\t\t<id name=\"id\">\n+\t\t\t\t<generated-value strategy=\"AUTO\" />\n+\t\t\t</id>\n+\t\t\t<basic name=\"name\">\n+\t\t\t</basic>\n+\t\t\t<basic name=\"surname\">\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity> -->\n+</entity-mappings>"},{"sha":"4806fcada76db3018e1b9fd782b7185dc51c90a6","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/annotations/common/apps/annotApp/ddtype/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,33 +1,33 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Employee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.ContractEmployee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.TxRollbackEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntitySub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity2</class>\r\n-\t</persistence-unit>\r\n-\r\n-</persistence>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Employee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.ContractEmployee</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.TxRollbackEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntity2</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.LifeCycleDDEntitySub</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.annotations.common.apps.annotApp.ddtype.Entity2</class>\n+\t</persistence-unit>\n+\n+</persistence>"},{"sha":"43b7badf9b02aae9476a1699074454c50e4aecf2","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/cache/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,29 +1,29 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n-  version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity1</class>\r\n-\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity2</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n+  version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity1</class>\n+\t    <class>org.apache.openjpa.persistence.cache.common.apps.Entity2</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"0dd7cff0024652d5cb9fa15c8d068b054aa4a169","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","status":"modified","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,45 +1,45 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Course</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Department</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Student</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.ArtCourse</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.ScienceCourse</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedOwnerPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.ComplexEmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.CompUser</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.MaleUser</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.Address</class>\r\n-\t\t<class>org.apache.openjpa.persistence.common.apps.FemaleUser</class>\r\n-\t\t<properties>\r\n-\t\t\t<property name=\"openjpa.ConnectionFactoryProperties\" value=\"MaxActive=110, MaxIdle=10, ValidationTimeout=50000, \r\n-                                                                     MaxCachedStatements=10, ValidationSQL='', MaxWait=10000, TestOnBorrow=true\" />\r\n-\t\t\t<property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\r\n-\t\t</properties>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Course</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Department</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Student</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.ArtCourse</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.ScienceCourse</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedOwnerPC</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.EmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.ComplexEmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.CompUser</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.MaleUser</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.Address</class>\n+\t\t<class>org.apache.openjpa.persistence.common.apps.FemaleUser</class>\n+\t\t<properties>\n+\t\t\t<property name=\"openjpa.ConnectionFactoryProperties\" value=\"MaxActive=110, MaxIdle=10, ValidationTimeout=50000, \n+                                                                     MaxCachedStatements=10, ValidationSQL='', MaxWait=10000, TestOnBorrow=true\" />\n+\t\t\t<property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+\t\t</properties>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"236adfc7bee82ba02c9b20928bfbe1556248b971","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","status":"modified","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/conf/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,25 +1,25 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"13aabf04a1a87d7caac73c57182e3a8f2dc7dc67","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","status":"modified","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/datacache/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,53 +1,53 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AppIdCacheObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachF</class>\r\n-<!--\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectInterface</class>-->\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectG</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectH</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectBChild1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.TransactionalClassPC</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AppIdCacheObject</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachA</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachB</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachC</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachD</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachE</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.AttachF</class>\n+<!--\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectInterface</class>-->\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectWithExternalizedFields</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectA</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectB</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectC</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectD</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectE</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectF</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectG</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectH</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectJ</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.FlushDataCacheObject</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild1</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectAChild2</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.CacheObjectBChild1</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.ScheduledEviction</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.SelfReferencingCacheTestObject</class>\n+\t\t<class>org.apache.openjpa.persistence.datacache.common.apps.TransactionalClassPC</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"0b3dca33792ae990bc64add0afbbb10e435e603b","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/enhance/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,41 +1,41 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.PCClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NonPCClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.SubclassClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoClone</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoNoArgs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No2NoArgs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No3NoArgs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BaseEntity</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachablePC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachableVersionedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity</class>\r\n-\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.PCClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NonPCClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.SubclassClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoClone</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.NoNoArgs</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No2NoArgs</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.No3NoArgs</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BackingFieldNameMismatchInstance</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BaseEntity</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.BasicSubclassInstance</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachablePC</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DetachableVersionedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.ManagedInverseTestInstance2</class>\n+\t\t<class>org.apache.openjpa.persistence.enhance.common.apps.DerivedEntity</class>\n+\n+\t</persistence-unit>\n+</persistence>"},{"sha":"6c03f8d75dc7f0b34221716b0d2e1b9fe024cf20","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/entityoperation/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,26 +1,26 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.entityoperation.common.apps.CascadesEntity</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.entityoperation.common.apps.CascadesEntity</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"36cb45dafee9b43c2ce65d32f5269e9ef6f9c288","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/event/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,29 +1,29 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.event.common.apps.TransactionalClassPC</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.RuntimeTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.event.common.apps.TransactionalClassPC</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"1e8e940df57218907b8bb1bf3f41b394b534ab0d","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","status":"modified","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,43 +1,43 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\r\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\r\n-  version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC</class>\r\n-        <class>org.apache.openjpa.persistence.jdbc.common.apps.DFGTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPCSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.InvertA</class>\r\n-        <class>org.apache.openjpa.persistence.jdbc.common.apps.InvertB</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n+  version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC1</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.AutoIncrementPC3</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC4</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.ConstantJoinPC5</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.CustomMappingPC</class>\n+        <class>org.apache.openjpa.persistence.jdbc.common.apps.DFGTest</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPC</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.EagerPCSub</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC3</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.HelperPC4</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.InvertA</class>\n+        <class>org.apache.openjpa.persistence.jdbc.common.apps.InvertB</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"9d482d044b8f313813e78f43d7cca7981b7a5637","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/common/apps/mappingApp/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,34 +1,34 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.EntityWithCompositeId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.OwnerOfEntityWithCompositeId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.RecursiveEntityWithCompositeId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapAddress</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapItem</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapOrder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapPerson</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity2</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.EntityWithCompositeId</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.OwnerOfEntityWithCompositeId</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.RecursiveEntityWithCompositeId</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapAddress</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapItem</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapOrder</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.SQLMapPerson</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.jdbc.common.apps.mappingApp.Entity2</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"297393cefe8bcc1ae6f8f46c416259ebe29b2f0f","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","status":"modified","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/jdbc/unique/orm.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,119 +1,119 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n-\tLicensed to the Apache Software Foundation (ASF) under one\r\n-\tor more contributor license agreements.  See the NOTICE file\r\n-\tdistributed with this work for additional information\r\n-\tregarding copyright ownership.  The ASF licenses this file\r\n-\tto you under the Apache License, Version 2.0 (the\r\n-\t\"License\"); you may not use this file except in compliance\r\n-\twith the License.  You may obtain a copy of the License at\r\n-\t\r\n-\thttp://www.apache.org/licenses/LICENSE-2.0\r\n-\t\r\n-\tUnless required by applicable law or agreed to in writing,\r\n-\tsoftware distributed under the License is distributed on an\r\n-\t\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-\tKIND, either express or implied.  See the License for the\r\n-\tspecific language governing permissions and limitations\r\n-\tunder the License.\r\n--->\r\n-<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\r\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\r\n-\tversion=\"1.0\">\r\n-\t\r\n-\t<persistence-unit-metadata>\r\n-\t\t<xml-mapping-metadata-complete/>\r\n-\t</persistence-unit-metadata>\r\n-\t\r\n-\t\r\n-\t<package>org.apache.openjpa.persistence.jdbc.unique</package>\r\n-\t<entity name=\"UniqueA\" class=\"UniqueA\">\r\n-\t\t<table name=\"UNIQUE_A_XML\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>a1x</column-name>\r\n-\t\t\t\t<column-name>a2x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>a3x</column-name>\r\n-\t\t\t\t<column-name>a4x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\t\t<secondary-table name=\"UNIQUE_SECONDARY_XML\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>sa1x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</secondary-table>\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"aid\">\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"a1\">\r\n-\t\t\t\t<column name=\"a1x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"a2\">\r\n-\t\t\t\t<column name=\"a2x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"a3\">\r\n-\t\t\t\t<column name=\"a3x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"a4\">\r\n-\t\t\t\t<column name=\"a4x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"a5\">\r\n-\t\t\t\t<column name=\"a5x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"a6\">\r\n-\t\t\t\t<column name=\"a6x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t\r\n-\t\t\t<basic name=\"sa1\">\r\n-\t\t\t\t<column name=\"sa1x\" table=\"UNIQUE_SECONDARY_XML\" />\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"sa2\">\r\n-\t\t\t\t<column name=\"sa2x\" table=\"UNIQUE_SECONDARY_XML\" />\r\n-\t\t\t</basic>\r\n-\r\n-\t\t\t<many-to-many name=\"bs\">\r\n-\t\t\t\t<join-table name=\"UNIQUE_JOINTABLE_XML\">\r\n-\t\t\t\t\t<join-column name=\"FK_A_XML\" referenced-column-name=\"aid\" nullable=\"false\"/>\r\n-\t\t\t\t\t<inverse-join-column name=\"FK_B_XML\" referenced-column-name=\"bid\" nullable=\"false\"/>\r\n-\t\t\t\t\t<unique-constraint>\r\n-\t\t\t\t\t\t<column-name>FK_A_XML</column-name>\r\n-\t\t\t\t\t\t<column-name>FK_B_XML</column-name>\r\n-\t\t\t\t\t</unique-constraint>\r\n-\t\t\t\t</join-table>\r\n-\t\t\t</many-to-many>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-\r\n-\t<entity name=\"UniqueB\" class=\"UniqueB\">\r\n-\t\t<table name=\"UNIQUE_B_XML\">\r\n-\t\t\t<unique-constraint>\r\n-\t\t\t\t<column-name>b1x</column-name>\r\n-\t\t\t\t<column-name>b2x</column-name>\r\n-\t\t\t</unique-constraint>\r\n-\t\t</table>\r\n-\t\t<attributes>\r\n-\t\t\t<id name=\"bid\">\r\n-\t\t\t\t<generated-value strategy=\"TABLE\"\r\n-\t\t\t\t\tgenerator=\"testGeneratorXML\" />\r\n-\t\t\t\t<table-generator name=\"testGeneratorXML\"\r\n-\t\t\t\t\ttable=\"UNIQUE_GENERATOR_XML\" pk-column-name=\"GEN1_XML\"\r\n-\t\t\t\t\tvalue-column-name=\"GEN2_XML\">\r\n-\t\t\t\t\t<unique-constraint>\r\n-\t\t\t\t\t\t<column-name>GEN1_XML</column-name>\r\n-\t\t\t\t\t\t<column-name>GEN2_XML</column-name>\r\n-\t\t\t\t\t</unique-constraint>\r\n-\t\t\t\t</table-generator>\r\n-\t\t\t</id>\r\n-\t\t\t<basic name=\"b1\">\r\n-\t\t\t\t<column name=\"b1x\"/>\r\n-\t\t\t</basic>\r\n-\t\t\t<basic name=\"b2\">\r\n-\t\t\t\t<column name=\"b2x\"/>\r\n-\t\t\t</basic>\r\n-\t\t</attributes>\r\n-\t</entity>\r\n-</entity-mappings>\r\n-\r\n-\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\tLicensed to the Apache Software Foundation (ASF) under one\n+\tor more contributor license agreements.  See the NOTICE file\n+\tdistributed with this work for additional information\n+\tregarding copyright ownership.  The ASF licenses this file\n+\tto you under the Apache License, Version 2.0 (the\n+\t\"License\"); you may not use this file except in compliance\n+\twith the License.  You may obtain a copy of the License at\n+\t\n+\thttp://www.apache.org/licenses/LICENSE-2.0\n+\t\n+\tUnless required by applicable law or agreed to in writing,\n+\tsoftware distributed under the License is distributed on an\n+\t\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+\tKIND, either express or implied.  See the License for the\n+\tspecific language governing permissions and limitations\n+\tunder the License.\n+-->\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm orm_1_0.xsd\"\n+\tversion=\"1.0\">\n+\t\n+\t<persistence-unit-metadata>\n+\t\t<xml-mapping-metadata-complete/>\n+\t</persistence-unit-metadata>\n+\t\n+\t\n+\t<package>org.apache.openjpa.persistence.jdbc.unique</package>\n+\t<entity name=\"UniqueA\" class=\"UniqueA\">\n+\t\t<table name=\"UNIQUE_A_XML\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>a1x</column-name>\n+\t\t\t\t<column-name>a2x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>a3x</column-name>\n+\t\t\t\t<column-name>a4x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\t\t<secondary-table name=\"UNIQUE_SECONDARY_XML\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>sa1x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</secondary-table>\n+\t\t<attributes>\n+\t\t\t<id name=\"aid\">\n+\t\t\t</id>\n+\t\t\t<basic name=\"a1\">\n+\t\t\t\t<column name=\"a1x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"a2\">\n+\t\t\t\t<column name=\"a2x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"a3\">\n+\t\t\t\t<column name=\"a3x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"a4\">\n+\t\t\t\t<column name=\"a4x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"a5\">\n+\t\t\t\t<column name=\"a5x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"a6\">\n+\t\t\t\t<column name=\"a6x\"/>\n+\t\t\t</basic>\n+\t\t\t\n+\t\t\t<basic name=\"sa1\">\n+\t\t\t\t<column name=\"sa1x\" table=\"UNIQUE_SECONDARY_XML\" />\n+\t\t\t</basic>\n+\t\t\t<basic name=\"sa2\">\n+\t\t\t\t<column name=\"sa2x\" table=\"UNIQUE_SECONDARY_XML\" />\n+\t\t\t</basic>\n+\n+\t\t\t<many-to-many name=\"bs\">\n+\t\t\t\t<join-table name=\"UNIQUE_JOINTABLE_XML\">\n+\t\t\t\t\t<join-column name=\"FK_A_XML\" referenced-column-name=\"aid\" nullable=\"false\"/>\n+\t\t\t\t\t<inverse-join-column name=\"FK_B_XML\" referenced-column-name=\"bid\" nullable=\"false\"/>\n+\t\t\t\t\t<unique-constraint>\n+\t\t\t\t\t\t<column-name>FK_A_XML</column-name>\n+\t\t\t\t\t\t<column-name>FK_B_XML</column-name>\n+\t\t\t\t\t</unique-constraint>\n+\t\t\t\t</join-table>\n+\t\t\t</many-to-many>\n+\t\t</attributes>\n+\t</entity>\n+\n+\t<entity name=\"UniqueB\" class=\"UniqueB\">\n+\t\t<table name=\"UNIQUE_B_XML\">\n+\t\t\t<unique-constraint>\n+\t\t\t\t<column-name>b1x</column-name>\n+\t\t\t\t<column-name>b2x</column-name>\n+\t\t\t</unique-constraint>\n+\t\t</table>\n+\t\t<attributes>\n+\t\t\t<id name=\"bid\">\n+\t\t\t\t<generated-value strategy=\"TABLE\"\n+\t\t\t\t\tgenerator=\"testGeneratorXML\" />\n+\t\t\t\t<table-generator name=\"testGeneratorXML\"\n+\t\t\t\t\ttable=\"UNIQUE_GENERATOR_XML\" pk-column-name=\"GEN1_XML\"\n+\t\t\t\t\tvalue-column-name=\"GEN2_XML\">\n+\t\t\t\t\t<unique-constraint>\n+\t\t\t\t\t\t<column-name>GEN1_XML</column-name>\n+\t\t\t\t\t\t<column-name>GEN2_XML</column-name>\n+\t\t\t\t\t</unique-constraint>\n+\t\t\t\t</table-generator>\n+\t\t\t</id>\n+\t\t\t<basic name=\"b1\">\n+\t\t\t\t<column name=\"b1x\"/>\n+\t\t\t</basic>\n+\t\t\t<basic name=\"b2\">\n+\t\t\t\t<column name=\"b2x\"/>\n+\t\t\t</basic>\n+\t\t</attributes>\n+\t</entity>\n+</entity-mappings>\n+\n+"},{"sha":"644dc52a0a8a2f1a1b833249ec4876a0cacd98c8","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","status":"modified","additions":124,"deletions":124,"changes":248,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/kernel/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,124 +1,124 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<!-- <class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class> -->\r\n-\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AImplB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ArraysTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.BlobTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ByteArray</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.CalendarFields</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ColumnIOPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ConcreteMappedAppIdSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DateVersion</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ExternalValues</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseB</class>\r\n-        \t<class>org.apache.openjpa.persistence.kernel.common.apps.Lobs</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPCKnownSubclass</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwnerAppId</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPCChild</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MixedInterfaceImpl</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.NonMappedInterfaceImpl</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCAddress</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCClassPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCompany</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCountry</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDepartment</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDirectory</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCEmployee</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCFile</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCPerson</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistenceAware</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistentMapHolder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ProxiesPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RecursivelyEmbeddedPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SCOTest</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SecondaryTab</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdByte</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdChar</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdInt</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdLong</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdShort</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdString</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdWrapper</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ValueStrategyPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest2</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<!-- <class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class> -->\n+\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AImplB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldsTypeTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AllFieldTypesTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdClassString</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AbstractMappedAppIdSuper</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubD</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubE</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AppIdSubF</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ArraysTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachA</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachD</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachE</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachF</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionA</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionB</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.AttachVersionC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.BlobTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ByteArray</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.CalendarFields</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ColumnIOPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ComplexEmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ConcreteMappedAppIdSub</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DateVersion</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DependentFieldsPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.DetachSMPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedOwnerPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.EmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ExternalValues</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObject</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.FetchGroupTestObjectChild</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InstanceCallbacksTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModInstanceCallbackTests</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl3</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InterfaceTestImpl4</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseA</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.InverseB</class>\n+        \t<class>org.apache.openjpa.persistence.kernel.common.apps.Lobs</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.LockGroupPCKnownSubclass</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ManagedInterfaceOwnerAppId</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MapElementPCChild</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.MixedInterfaceImpl</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.NonMappedInterfaceImpl</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ObjectCollectionHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.OuterJoinValuePC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCAddress</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCClassPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCompany</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCCountry</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDepartment</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCDirectory</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCEmployee</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCFile</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PCPerson</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistenceAware</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.PersistentMapHolder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ProxiesPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RecursivelyEmbeddedPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.RuntimeTest5</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SCOTest</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SecondaryTab</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SequenceAssigned3</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdByte</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdChar</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdInt</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdLong</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdShort</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdString</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.SingleIdWrapper</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ValueStrategyPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBLobs$Inner2</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestStaticInnerClasses$Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$Nholder</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.TestEJBNoPersistentFields$NoPersistentFieldsPC</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.kernel.common.apps.ModRuntimeTest2</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"4ad1096e65f59fbe995d30179761e032465137c2","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/meta/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,47 +1,47 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ExternalValues</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1$Inner</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest6</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.meta.common.apps.TransactionalClassPC</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ExternalValues</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.FieldOrderPCSubclass</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest1$Inner</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest5</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.MetaTest6</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.NonPersistentFieldsPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRel</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.OrderByPCRelSub</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.RuntimeTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned2</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.SequenceAssigned3</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.ValueStrategyPC</class>\n+\t\t<class>org.apache.openjpa.persistence.meta.common.apps.TransactionalClassPC</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"7d71ad1c2d71b2d8d12b10b3211b493e096bea47","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","status":"modified","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/query/common/apps/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,49 +1,49 @@\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\r\n-    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\r\n-\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\r\n-\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-        <class>org.apache.openjpa.persistence.query.common.apps.Entity1</class>\r\n-        <class>org.apache.openjpa.persistence.query.common.apps.Entity2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest5</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.SimpleAppIdPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest3</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest4</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexA</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexB</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexD</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexE</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexF</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexG</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC2</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest1</class>\r\n-\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest2</class>\r\n-\t</persistence-unit>\r\n-</persistence>\r\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<persistence xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n+    http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\" version=\"1.0\">\n+\t<persistence-unit name=\"TestConv\" transaction-type=\"RESOURCE_LOCAL\">\n+\t\t<provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+        <class>org.apache.openjpa.persistence.query.common.apps.Entity1</class>\n+        <class>org.apache.openjpa.persistence.query.common.apps.Entity2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.RuntimeTest5</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.SimpleAppIdPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest3</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.QueryTest4</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CompoundAppIdPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexA</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexB</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexD</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexE</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexF</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ComplexG</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.CircularFKPC2</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest1</class>\n+\t\t<class>org.apache.openjpa.persistence.query.common.apps.ModRuntimeTest2</class>\n+\t</persistence-unit>\n+</persistence>"},{"sha":"c687dc01998e7aa52e8f72ca1eb6f0135f8b66dc","filename":"openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","status":"modified","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/org/apache/openjpa/persistence/xml/persistence-without-xsd.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,28 +1,28 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n-\r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.\r\n--->\r\n-<persistence>\r\n-    <persistence-unit name=\"incorrect-ordering-and-no-xsd\">\r\n-        <properties>\r\n-            <property name=\"openjpa.Id\" value=\"incorrect-ordering-pu\"/>\r\n-        </properties>\r\n-        <class>org.apache.openjpa.persistence.xml.SimpleXmlEntity</class>\r\n-        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\r\n-    </persistence-unit>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.\n+-->\n+<persistence>\n+    <persistence-unit name=\"incorrect-ordering-and-no-xsd\">\n+        <properties>\n+            <property name=\"openjpa.Id\" value=\"incorrect-ordering-pu\"/>\n+        </properties>\n+        <class>org.apache.openjpa.persistence.xml.SimpleXmlEntity</class>\n+        <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n+    </persistence-unit>\n </persistence>\n\\ No newline at end of file"},{"sha":"8b36a57701b7c8a8c5484c1e5e71c4599c25a77a","filename":"openjpa-persistence/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/pom.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -31,7 +31,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.1</version>\n+        <version>1.2.2</version>\n     </parent>\n     <dependencies>\n         <dependency>"},{"sha":"f4691b5bf69239fd4385eca071956a19be4e8c22","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AnnotationPersistenceMetaDataParser.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -482,7 +482,10 @@ private ClassMetaData parseClassAnnotations() {\n             return null;\n \n         Entity entity = (Entity) _cls.getAnnotation(Entity.class);\n+        MappedSuperclass mapped = (MappedSuperclass)\n+        _cls.getAnnotation(MappedSuperclass.class);\n         if (isMetaDataMode()) {\n+            meta.setAbstract(mapped != null);\n             // while the spec only provides for embedded exclusive, it doesn't\n             // seem hard to support otherwise\n             if (entity == null)\n@@ -754,6 +757,8 @@ else if (cache.enabled())\n                 org.apache.openjpa.datacache.DataCache.NAME_DEFAULT);\n         else\n             meta.setDataCacheName(null);\n+        \n+        meta.setIsCacheable(cache.enabled(), true);\n     }\n \n     private void parseManagedInterface(ClassMetaData meta,"},{"sha":"e402a73631126dcf751d15120422e2cff4a7b26b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoClearType.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,56 +1,56 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.AutoClear;\r\n-\r\n-/**\r\n- * The possible settings for the auto-clear behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum AutoClearType {\r\n-    DATASTORE(AutoClear.CLEAR_DATASTORE),\r\n-    ALL(AutoClear.CLEAR_ALL);\r\n-\r\n-    private final int autoClearConstant;\r\n-\r\n-    private AutoClearType(int value) {\r\n-        autoClearConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return autoClearConstant;\r\n-    }\r\n-\r\n-    static AutoClearType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case AutoClear.CLEAR_DATASTORE:\r\n-                return DATASTORE;\r\n-\r\n-            case AutoClear.CLEAR_ALL:\r\n-                return ALL;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.AutoClear;\n+\n+/**\n+ * The possible settings for the auto-clear behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum AutoClearType {\n+    DATASTORE(AutoClear.CLEAR_DATASTORE),\n+    ALL(AutoClear.CLEAR_ALL);\n+\n+    private final int autoClearConstant;\n+\n+    private AutoClearType(int value) {\n+        autoClearConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return autoClearConstant;\n+    }\n+\n+    static AutoClearType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case AutoClear.CLEAR_DATASTORE:\n+                return DATASTORE;\n+\n+            case AutoClear.CLEAR_ALL:\n+                return ALL;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"88aa1adcf1d24afc34fc761c134f6833cb64513a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/AutoDetachType.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import org.apache.openjpa.kernel.AutoDetach;\r\n-\r\n-/**\r\n- * The possible settings for the auto-detach behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum AutoDetachType {\r\n-    CLOSE(AutoDetach.DETACH_CLOSE),\r\n-    COMMIT(AutoDetach.DETACH_COMMIT),\r\n-    NON_TRANSACTIONAL_READ(AutoDetach.DETACH_NONTXREAD),\r\n-    ROLLBACK(AutoDetach.DETACH_ROLLBACK);\r\n-\r\n-    private final int autoDetachConstant;\r\n-\r\n-    private AutoDetachType(int value) {\r\n-        autoDetachConstant = value;\r\n-    }\r\n-\r\n-    public static EnumSet<AutoDetachType> toEnumSet(int autoDetach) {\r\n-        EnumSet<AutoDetachType> types = EnumSet.noneOf(AutoDetachType.class);\r\n-        if ((autoDetach & AutoDetach.DETACH_CLOSE) != 0)\r\n-            types.add(CLOSE);\r\n-        if ((autoDetach & AutoDetach.DETACH_COMMIT) != 0)\r\n-            types.add(COMMIT);\r\n-        if ((autoDetach & AutoDetach.DETACH_NONTXREAD) != 0)\r\n-            types.add(NON_TRANSACTIONAL_READ);\r\n-        if ((autoDetach & AutoDetach.DETACH_ROLLBACK) != 0)\r\n-            types.add(ROLLBACK);\r\n-        return types;\r\n-    }\r\n-\r\n-    public static int fromEnumSet(EnumSet<AutoDetachType> types) {\r\n-        int autoDetach = 0;\r\n-        for (AutoDetachType type : types)\r\n-            autoDetach |= type.autoDetachConstant;\r\n-        return autoDetach;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import org.apache.openjpa.kernel.AutoDetach;\n+\n+/**\n+ * The possible settings for the auto-detach behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum AutoDetachType {\n+    CLOSE(AutoDetach.DETACH_CLOSE),\n+    COMMIT(AutoDetach.DETACH_COMMIT),\n+    NON_TRANSACTIONAL_READ(AutoDetach.DETACH_NONTXREAD),\n+    ROLLBACK(AutoDetach.DETACH_ROLLBACK);\n+\n+    private final int autoDetachConstant;\n+\n+    private AutoDetachType(int value) {\n+        autoDetachConstant = value;\n+    }\n+\n+    public static EnumSet<AutoDetachType> toEnumSet(int autoDetach) {\n+        EnumSet<AutoDetachType> types = EnumSet.noneOf(AutoDetachType.class);\n+        if ((autoDetach & AutoDetach.DETACH_CLOSE) != 0)\n+            types.add(CLOSE);\n+        if ((autoDetach & AutoDetach.DETACH_COMMIT) != 0)\n+            types.add(COMMIT);\n+        if ((autoDetach & AutoDetach.DETACH_NONTXREAD) != 0)\n+            types.add(NON_TRANSACTIONAL_READ);\n+        if ((autoDetach & AutoDetach.DETACH_ROLLBACK) != 0)\n+            types.add(ROLLBACK);\n+        return types;\n+    }\n+\n+    public static int fromEnumSet(EnumSet<AutoDetachType> types) {\n+        int autoDetach = 0;\n+        for (AutoDetachType type : types)\n+            autoDetach |= type.autoDetachConstant;\n+        return autoDetach;\n+    }\n+}"},{"sha":"02fe56f5f92a672db799f2222dd188cfbd1d18dd","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","status":"modified","additions":66,"deletions":66,"changes":132,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/CallbackMode.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,66 +1,66 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import org.apache.openjpa.event.CallbackModes;\r\n-\r\n-/**\r\n- * The possible settings for the callback behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum CallbackMode {\r\n-    FAIL_FAST(CallbackModes.CALLBACK_FAIL_FAST),\r\n-    IGNORE(CallbackModes.CALLBACK_IGNORE),\r\n-    LOG(CallbackModes.CALLBACK_LOG),\r\n-    RETHROW(CallbackModes.CALLBACK_RETHROW),\r\n-    ROLLBACK(CallbackModes.CALLBACK_ROLLBACK);\r\n-\r\n-    private final int callbackMode;\r\n-\r\n-    private CallbackMode(int value) {\r\n-        callbackMode = value;\r\n-    }\r\n-\r\n-    static EnumSet<CallbackMode> toEnumSet(int callback) {\r\n-        EnumSet<CallbackMode> modes = EnumSet.noneOf(CallbackMode.class);\r\n-        if ((callback & CallbackModes.CALLBACK_FAIL_FAST) != 0)\r\n-            modes.add(FAIL_FAST);\r\n-        if ((callback & CallbackModes.CALLBACK_IGNORE) != 0)\r\n-            modes.add(IGNORE);\r\n-        if ((callback & CallbackModes.CALLBACK_LOG) != 0)\r\n-            modes.add(LOG);\r\n-        if ((callback & CallbackModes.CALLBACK_RETHROW) != 0)\r\n-            modes.add(RETHROW);\r\n-        if ((callback & CallbackModes.CALLBACK_ROLLBACK) != 0)\r\n-            modes.add(ROLLBACK);\r\n-        return modes;\r\n-    }\r\n-\r\n-    static int fromEnumSet(EnumSet<CallbackMode> modes) {\r\n-        int callback = 0;\r\n-        for (CallbackMode mode : modes)\r\n-            callback |= mode.callbackMode;\r\n-        return callback;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import org.apache.openjpa.event.CallbackModes;\n+\n+/**\n+ * The possible settings for the callback behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum CallbackMode {\n+    FAIL_FAST(CallbackModes.CALLBACK_FAIL_FAST),\n+    IGNORE(CallbackModes.CALLBACK_IGNORE),\n+    LOG(CallbackModes.CALLBACK_LOG),\n+    RETHROW(CallbackModes.CALLBACK_RETHROW),\n+    ROLLBACK(CallbackModes.CALLBACK_ROLLBACK);\n+\n+    private final int callbackMode;\n+\n+    private CallbackMode(int value) {\n+        callbackMode = value;\n+    }\n+\n+    static EnumSet<CallbackMode> toEnumSet(int callback) {\n+        EnumSet<CallbackMode> modes = EnumSet.noneOf(CallbackMode.class);\n+        if ((callback & CallbackModes.CALLBACK_FAIL_FAST) != 0)\n+            modes.add(FAIL_FAST);\n+        if ((callback & CallbackModes.CALLBACK_IGNORE) != 0)\n+            modes.add(IGNORE);\n+        if ((callback & CallbackModes.CALLBACK_LOG) != 0)\n+            modes.add(LOG);\n+        if ((callback & CallbackModes.CALLBACK_RETHROW) != 0)\n+            modes.add(RETHROW);\n+        if ((callback & CallbackModes.CALLBACK_ROLLBACK) != 0)\n+            modes.add(ROLLBACK);\n+        return modes;\n+    }\n+\n+    static int fromEnumSet(EnumSet<CallbackMode> modes) {\n+        int callback = 0;\n+        for (CallbackMode mode : modes)\n+            callback |= mode.callbackMode;\n+        return callback;\n+    }\n+}"},{"sha":"5a77e82585e9f5d56c297ae3357bba6a25487f86","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/ConnectionRetainMode.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.ConnectionRetainModes;\r\n-\r\n-/**\r\n- * The possible values for use when configuring the connection retain\r\n- * behavior for an {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum ConnectionRetainMode {\r\n-    ON_DEMAND(ConnectionRetainModes.CONN_RETAIN_DEMAND),\r\n-    TRANSACTION(ConnectionRetainModes.CONN_RETAIN_TRANS),\r\n-    ALWAYS(ConnectionRetainModes.CONN_RETAIN_ALWAYS);\r\n-\r\n-    private final int connectionRetainConstant;\r\n-\r\n-    private ConnectionRetainMode(int value) {\r\n-        connectionRetainConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return connectionRetainConstant;\r\n-    }\r\n-\r\n-    static ConnectionRetainMode fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case ConnectionRetainModes.CONN_RETAIN_DEMAND:\r\n-                return ON_DEMAND;\r\n-\r\n-            case ConnectionRetainModes.CONN_RETAIN_ALWAYS:\r\n-                return ALWAYS;\r\n-\r\n-            case ConnectionRetainModes.CONN_RETAIN_TRANS:\r\n-                return TRANSACTION;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\n+\n+/**\n+ * The possible values for use when configuring the connection retain\n+ * behavior for an {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum ConnectionRetainMode {\n+    ON_DEMAND(ConnectionRetainModes.CONN_RETAIN_DEMAND),\n+    TRANSACTION(ConnectionRetainModes.CONN_RETAIN_TRANS),\n+    ALWAYS(ConnectionRetainModes.CONN_RETAIN_ALWAYS);\n+\n+    private final int connectionRetainConstant;\n+\n+    private ConnectionRetainMode(int value) {\n+        connectionRetainConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return connectionRetainConstant;\n+    }\n+\n+    static ConnectionRetainMode fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case ConnectionRetainModes.CONN_RETAIN_DEMAND:\n+                return ON_DEMAND;\n+\n+            case ConnectionRetainModes.CONN_RETAIN_ALWAYS:\n+                return ALWAYS;\n+\n+            case ConnectionRetainModes.CONN_RETAIN_TRANS:\n+                return TRANSACTION;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"db6a0fd0d243bd3e1f5ba93eec92af0d70b5e2e9","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/DetachStateType.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.DetachState;\r\n-\r\n-/**\r\n- * The possible settings for the detachment behavior of an\r\n- * {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum DetachStateType {\r\n-    FETCH_GROUPS(DetachState.DETACH_FETCH_GROUPS),\r\n-    LOADED(DetachState.DETACH_LOADED),\r\n-    ALL(DetachState.DETACH_ALL);\r\n-\r\n-    private final int detachStateConstant;\r\n-\r\n-    private DetachStateType(int value) {\r\n-        detachStateConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return detachStateConstant;\r\n-    }\r\n-\r\n-    static DetachStateType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case DetachState.DETACH_FETCH_GROUPS:\r\n-                return FETCH_GROUPS;\r\n-\r\n-            case DetachState.DETACH_LOADED:\r\n-                return LOADED;\r\n-\r\n-            case DetachState.DETACH_ALL:\r\n-                return ALL;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.DetachState;\n+\n+/**\n+ * The possible settings for the detachment behavior of an\n+ * {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum DetachStateType {\n+    FETCH_GROUPS(DetachState.DETACH_FETCH_GROUPS),\n+    LOADED(DetachState.DETACH_LOADED),\n+    ALL(DetachState.DETACH_ALL);\n+\n+    private final int detachStateConstant;\n+\n+    private DetachStateType(int value) {\n+        detachStateConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return detachStateConstant;\n+    }\n+\n+    static DetachStateType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case DetachState.DETACH_FETCH_GROUPS:\n+                return FETCH_GROUPS;\n+\n+            case DetachState.DETACH_LOADED:\n+                return LOADED;\n+\n+            case DetachState.DETACH_ALL:\n+                return ALL;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"88665905304ab0490522d96ab605dc6cc46f75fb","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","status":"modified","additions":1374,"deletions":1374,"changes":2748,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/EntityManagerImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,1374 +1,1374 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.io.ByteArrayInputStream;\r\n-import java.io.ByteArrayOutputStream;\r\n-import java.io.Externalizable;\r\n-import java.io.IOException;\r\n-import java.io.ObjectInput;\r\n-import java.io.ObjectInputStream;\r\n-import java.io.ObjectOutput;\r\n-import java.io.ObjectOutputStream;\r\n-import java.io.ObjectStreamClass;\r\n-import java.lang.reflect.Array;\r\n-import java.util.Arrays;\r\n-import java.util.Collection;\r\n-import java.util.EnumSet;\r\n-import java.util.Map;\r\n-import java.util.HashMap;\r\n-import java.util.IdentityHashMap;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.FlushModeType;\r\n-import javax.persistence.LockModeType;\r\n-import javax.persistence.Query;\r\n-\r\n-import org.apache.commons.lang.StringUtils;\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.ee.ManagedRuntime;\r\n-import org.apache.openjpa.enhance.PCEnhancer;\r\n-import org.apache.openjpa.enhance.PCRegistry;\r\n-import org.apache.openjpa.kernel.AbstractBrokerFactory;\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.DelegatingBroker;\r\n-import org.apache.openjpa.kernel.FindCallbacks;\r\n-import org.apache.openjpa.kernel.LockLevels;\r\n-import org.apache.openjpa.kernel.OpCallbacks;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.kernel.QueryFlushModes;\r\n-import org.apache.openjpa.kernel.QueryLanguages;\r\n-import org.apache.openjpa.kernel.Seq;\r\n-import org.apache.openjpa.kernel.FetchConfiguration;\r\n-import org.apache.openjpa.kernel.jpql.JPQLParser;\r\n-import org.apache.openjpa.lib.util.Closeable;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.meta.FieldMetaData;\r\n-import org.apache.openjpa.meta.QueryMetaData;\r\n-import org.apache.openjpa.meta.SequenceMetaData;\r\n-import org.apache.openjpa.util.Exceptions;\r\n-import org.apache.openjpa.util.ImplHelper;\r\n-import org.apache.openjpa.util.RuntimeExceptionTranslator;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * Implementation of {@link EntityManager} interface.\r\n- *\r\n- * @author Patrick Linskey\r\n- * @author Abe White\r\n- * @nojavadoc\r\n- */\r\n-public class EntityManagerImpl\r\n-    implements OpenJPAEntityManagerSPI, Externalizable,\r\n-    FindCallbacks, OpCallbacks, Closeable, OpenJPAEntityTransaction {\r\n-\r\n-    private static final Localizer _loc = Localizer.forPackage\r\n-        (EntityManagerImpl.class);\r\n-    private static final Object[] EMPTY_OBJECTS = new Object[0];\r\n-\r\n-    private DelegatingBroker _broker;\r\n-    private EntityManagerFactoryImpl _emf;\r\n-    private Map<FetchConfiguration,FetchPlan> _plans =\r\n-        new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\r\n-\r\n-    private RuntimeExceptionTranslator ret =\r\n-        PersistenceExceptions.getRollbackTranslator(this);\r\n-\r\n-    public EntityManagerImpl() {\r\n-        // for Externalizable\r\n-    }\r\n-\r\n-    /**\r\n-     * Constructor; supply factory and delegate.\r\n-     */\r\n-    public EntityManagerImpl(EntityManagerFactoryImpl factory,\r\n-        Broker broker) {\r\n-        initialize(factory, broker);\r\n-    }\r\n-\r\n-    private void initialize(EntityManagerFactoryImpl factory, Broker broker) {\r\n-        _emf = factory;\r\n-        _broker = new DelegatingBroker(broker, ret);\r\n-        _broker.setImplicitBehavior(this, ret);\r\n-    }\r\n-\r\n-    /**\r\n-     * Broker delegate.\r\n-     */\r\n-    public Broker getBroker() {\r\n-        return _broker.getDelegate();\r\n-    }\r\n-\r\n-    public OpenJPAEntityManagerFactory getEntityManagerFactory() {\r\n-        return _emf;\r\n-    }\r\n-\r\n-    public OpenJPAConfiguration getConfiguration() {\r\n-        return _broker.getConfiguration();\r\n-    }\r\n-\r\n-    public FetchPlan getFetchPlan() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock();\r\n-        try {\r\n-            FetchConfiguration fc = _broker.getFetchConfiguration();\r\n-            FetchPlan fp = _plans.get(fc);\r\n-            if (fp == null) {\r\n-                fp = _emf.toFetchPlan(_broker, fc);\r\n-                _plans.put(fc, fp);\r\n-            }\r\n-            return fp;\r\n-        } finally {\r\n-            _broker.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    public FetchPlan pushFetchPlan() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock();\r\n-        try {\r\n-            _broker.pushFetchConfiguration();\r\n-            return getFetchPlan();\r\n-        } finally {\r\n-            _broker.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    public void popFetchPlan() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock();\r\n-        try {\r\n-            _broker.popFetchConfiguration();\r\n-        } finally {\r\n-            _broker.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    public ConnectionRetainMode getConnectionRetainMode() {\r\n-        return ConnectionRetainMode.fromKernelConstant(\r\n-            _broker.getConnectionRetainMode());\r\n-    }\r\n-\r\n-    public boolean isTransactionManaged() {\r\n-        return _broker.isManaged();\r\n-    }\r\n-\r\n-    public boolean isManaged() {\r\n-        return _broker.isManaged();\r\n-    }\r\n-\r\n-    public ManagedRuntime getManagedRuntime() {\r\n-        return _broker.getManagedRuntime();\r\n-    }\r\n-\r\n-    public boolean getSyncWithManagedTransactions() {\r\n-        return _broker.getSyncWithManagedTransactions();\r\n-    }\r\n-\r\n-    public void setSyncWithManagedTransactions(boolean sync) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setSyncWithManagedTransactions(sync);\r\n-    }\r\n-\r\n-    public ClassLoader getClassLoader() {\r\n-        return _broker.getClassLoader();\r\n-    }\r\n-\r\n-    public String getConnectionUserName() {\r\n-        return _broker.getConnectionUserName();\r\n-    }\r\n-\r\n-    public String getConnectionPassword() {\r\n-        return _broker.getConnectionPassword();\r\n-    }\r\n-\r\n-    public boolean getMultithreaded() {\r\n-        return _broker.getMultithreaded();\r\n-    }\r\n-\r\n-    public void setMultithreaded(boolean multithreaded) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setMultithreaded(multithreaded);\r\n-    }\r\n-\r\n-    public boolean getIgnoreChanges() {\r\n-        return _broker.getIgnoreChanges();\r\n-    }\r\n-\r\n-    public void setIgnoreChanges(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setIgnoreChanges(val);\r\n-    }\r\n-\r\n-    public boolean getNontransactionalRead() {\r\n-        return _broker.getNontransactionalRead();\r\n-    }\r\n-\r\n-    public void setNontransactionalRead(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setNontransactionalRead(val);\r\n-    }\r\n-\r\n-    public boolean getNontransactionalWrite() {\r\n-        return _broker.getNontransactionalWrite();\r\n-    }\r\n-\r\n-    public void setNontransactionalWrite(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setNontransactionalWrite(val);\r\n-    }\r\n-\r\n-    public boolean getOptimistic() {\r\n-        return _broker.getOptimistic();\r\n-    }\r\n-\r\n-    public void setOptimistic(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setOptimistic(val);\r\n-    }\r\n-\r\n-    public RestoreStateType getRestoreState() {\r\n-        return RestoreStateType.fromKernelConstant(_broker.getRestoreState());\r\n-    }\r\n-\r\n-    public void setRestoreState(RestoreStateType val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setRestoreState(val.toKernelConstant());\r\n-    }\r\n-\r\n-    public void setRestoreState(int restore) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setRestoreState(restore);\r\n-    }\r\n-\r\n-    public boolean getRetainState() {\r\n-        return _broker.getRetainState();\r\n-    }\r\n-\r\n-    public void setRetainState(boolean val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setRetainState(val);\r\n-    }\r\n-\r\n-    public AutoClearType getAutoClear() {\r\n-        return AutoClearType.fromKernelConstant(_broker.getAutoClear());\r\n-    }\r\n-\r\n-    public void setAutoClear(AutoClearType val) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoClear(val.toKernelConstant());\r\n-    }\r\n-\r\n-    public void setAutoClear(int autoClear) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoClear(autoClear);\r\n-    }\r\n-\r\n-    public DetachStateType getDetachState() {\r\n-        return DetachStateType.fromKernelConstant(_broker.getDetachState());\r\n-    }\r\n-\r\n-    public void setDetachState(DetachStateType type) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setDetachState(type.toKernelConstant());\r\n-    }\r\n-\r\n-    public void setDetachState(int detach) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setDetachState(detach);\r\n-    }\r\n-\r\n-    public EnumSet<AutoDetachType> getAutoDetach() {\r\n-        return AutoDetachType.toEnumSet(_broker.getAutoDetach());\r\n-    }\r\n-\r\n-    public void setAutoDetach(AutoDetachType flag) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(flag)));\r\n-    }\r\n-\r\n-    public void setAutoDetach(EnumSet<AutoDetachType> flags) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(AutoDetachType.fromEnumSet(flags));\r\n-    }\r\n-\r\n-    public void setAutoDetach(int autoDetachFlags) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(autoDetachFlags);\r\n-    }\r\n-\r\n-    public void setAutoDetach(AutoDetachType value, boolean on) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(value)),on);\r\n-    }\r\n-\r\n-    public void setAutoDetach(int flag, boolean on) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setAutoDetach(flag, on);\r\n-    }\r\n-\r\n-    public boolean getEvictFromStoreCache() {\r\n-        return _broker.getEvictFromDataCache();\r\n-    }\r\n-\r\n-    public void setEvictFromStoreCache(boolean evict) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setEvictFromDataCache(evict);\r\n-    }\r\n-\r\n-    public boolean getPopulateStoreCache() {\r\n-        return _broker.getPopulateDataCache();\r\n-    }\r\n-\r\n-    public void setPopulateStoreCache(boolean cache) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setPopulateDataCache(cache);\r\n-    }\r\n-\r\n-    public boolean isTrackChangesByType() {\r\n-        return _broker.isTrackChangesByType();\r\n-    }\r\n-\r\n-    public void setTrackChangesByType(boolean trackByType) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setTrackChangesByType(trackByType);\r\n-    }\r\n-\r\n-    public boolean isLargeTransaction() {\r\n-        return isTrackChangesByType();\r\n-    }\r\n-\r\n-    public void setLargeTransaction(boolean value) {\r\n-        setTrackChangesByType(value);\r\n-    }\r\n-\r\n-    public Object getUserObject(Object key) {\r\n-        return _broker.getUserObject(key);\r\n-    }\r\n-\r\n-    public Object putUserObject(Object key, Object val) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.putUserObject(key, val);\r\n-    }\r\n-\r\n-    public void addTransactionListener(Object listener) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.addTransactionListener(listener);\r\n-    }\r\n-\r\n-    public void removeTransactionListener(Object listener) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.removeTransactionListener(listener);\r\n-    }\r\n-\r\n-    public EnumSet<CallbackMode> getTransactionListenerCallbackModes() {\r\n-        return CallbackMode.toEnumSet(\r\n-            _broker.getTransactionListenerCallbackMode());\r\n-    }\r\n-\r\n-    public void setTransactionListenerCallbackMode(CallbackMode mode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setTransactionListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(EnumSet.of(mode)));\r\n-    }\r\n-\r\n-    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes){\r\n-        assertNotCloseInvoked();\r\n-        _broker.setTransactionListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(modes));\r\n-    }\r\n-\r\n-    public int getTransactionListenerCallbackMode() {\r\n-        return _broker.getTransactionListenerCallbackMode();\r\n-    }\r\n-\r\n-    public void setTransactionListenerCallbackMode(int callbackMode) {\r\n-        throw new UnsupportedOperationException();\r\n-    }\r\n-\r\n-    public void addLifecycleListener(Object listener, Class... classes) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.addLifecycleListener(listener, classes);\r\n-    }\r\n-\r\n-    public void removeLifecycleListener(Object listener) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.removeLifecycleListener(listener);\r\n-    }\r\n-\r\n-    public EnumSet<CallbackMode> getLifecycleListenerCallbackModes() {\r\n-        return CallbackMode.toEnumSet(\r\n-            _broker.getLifecycleListenerCallbackMode());\r\n-    }\r\n-\r\n-    public void setLifecycleListenerCallbackMode(CallbackMode mode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setLifecycleListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(EnumSet.of(mode)));\r\n-    }\r\n-\r\n-    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setLifecycleListenerCallbackMode(\r\n-            CallbackMode.fromEnumSet(modes));\r\n-    }\r\n-\r\n-    public int getLifecycleListenerCallbackMode() {\r\n-        return _broker.getLifecycleListenerCallbackMode();\r\n-    }\r\n-\r\n-    public void setLifecycleListenerCallbackMode(int callbackMode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setLifecycleListenerCallbackMode(callbackMode);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T getReference(Class<T> cls, Object oid) {\r\n-        assertNotCloseInvoked();\r\n-        oid = _broker.newObjectId(cls, oid);\r\n-        return (T) _broker.find(oid, false, this);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T find(Class<T> cls, Object oid) {\r\n-        assertNotCloseInvoked();\r\n-        oid = _broker.newObjectId(cls, oid);\r\n-        return (T) _broker.find(oid, true, this);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T[] findAll(Class<T> cls, Object... oids) {\r\n-        if (oids.length == 0)\r\n-            return (T[]) Array.newInstance(cls, 0);\r\n-        Collection<T> ret = findAll(cls, Arrays.asList(oids));\r\n-        return ret.toArray((T[]) Array.newInstance(cls, ret.size()));\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> Collection<T> findAll(final Class<T> cls, Collection oids) {\r\n-        assertNotCloseInvoked();\r\n-        Object[] objs = _broker.findAll(oids, true, new FindCallbacks() {\r\n-            public Object processArgument(Object oid) {\r\n-                return _broker.newObjectId(cls, oid);\r\n-            }\r\n-\r\n-            public Object processReturn(Object oid, OpenJPAStateManager sm) {\r\n-                return EntityManagerImpl.this.processReturn(oid, sm);\r\n-            }\r\n-        });\r\n-        return (Collection<T>) Arrays.asList(objs);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T findCached(Class<T> cls, Object oid) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.findCached(_broker.newObjectId(cls, oid), this);\r\n-    }\r\n-\r\n-    public Class getObjectIdClass(Class cls) {\r\n-        assertNotCloseInvoked();\r\n-        if (cls == null)\r\n-            return null;\r\n-        return JPAFacadeHelper.fromOpenJPAObjectIdClass\r\n-                (_broker.getObjectIdType(cls));\r\n-    }\r\n-\r\n-    public OpenJPAEntityTransaction getTransaction() {\r\n-        if (_broker.isManaged())\r\n-            throw new InvalidStateException(_loc.get(\"get-managed-trans\"),\r\n-                null, null, false);\r\n-        return this;\r\n-    }\r\n-\r\n-    public void joinTransaction() {\r\n-        assertNotCloseInvoked();\r\n-        if (!_broker.syncWithManagedTransaction())\r\n-            throw new TransactionRequiredException(_loc.get\r\n-                (\"no-managed-trans\"), null, null, false);\r\n-    }\r\n-\r\n-    public void begin() {\r\n-        _broker.begin();\r\n-    }\r\n-\r\n-    public void commit() {\r\n-        try {\r\n-            _broker.commit();\r\n-        } catch (RollbackException e) {\r\n-            throw e;\r\n-        } catch (IllegalStateException e) {\r\n-            throw e;\r\n-        } catch (Exception e) {\r\n-            // RollbackExceptions are special and aren't handled by the\r\n-            // normal exception translator, since the spec says they\r\n-            // should be thrown whenever the commit fails for any reason at\r\n-            // all, wheras the exception translator handles exceptions that\r\n-            // are caused for specific reasons\r\n-            throw new RollbackException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public void rollback() {\r\n-        _broker.rollback();\r\n-    }\r\n-\r\n-    public void commitAndResume() {\r\n-        _broker.commitAndResume();\r\n-    }\r\n-\r\n-    public void rollbackAndResume() {\r\n-        _broker.rollbackAndResume();\r\n-    }\r\n-\r\n-    public Throwable getRollbackCause() {\r\n-        if (!isActive())\r\n-            throw new IllegalStateException(_loc.get(\"no-transaction\")\r\n-                .getMessage());\r\n-\r\n-        return _broker.getRollbackCause();\r\n-    }\r\n-\r\n-    public boolean getRollbackOnly() {\r\n-        if (!isActive())\r\n-            throw new IllegalStateException(_loc.get(\"no-transaction\")\r\n-                .getMessage());\r\n-\r\n-        return _broker.getRollbackOnly();\r\n-    }\r\n-\r\n-    public void setRollbackOnly() {\r\n-        _broker.setRollbackOnly();\r\n-    }\r\n-\r\n-    public void setRollbackOnly(Throwable cause) {\r\n-        _broker.setRollbackOnly(cause);\r\n-    }\r\n-\r\n-    public void setSavepoint(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setSavepoint(name);\r\n-    }\r\n-\r\n-    public void rollbackToSavepoint() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.rollbackToSavepoint();\r\n-    }\r\n-\r\n-    public void rollbackToSavepoint(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.rollbackToSavepoint(name);\r\n-    }\r\n-\r\n-    public void releaseSavepoint() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.releaseSavepoint();\r\n-    }\r\n-\r\n-    public void releaseSavepoint(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.releaseSavepoint(name);\r\n-    }\r\n-\r\n-    public void flush() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        _broker.assertActiveTransaction();\r\n-        _broker.flush();\r\n-    }\r\n-\r\n-    public void preFlush() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.preFlush();\r\n-    }\r\n-\r\n-    public void validateChanges() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.validateChanges();\r\n-    }\r\n-\r\n-    public boolean isActive() {\r\n-        return isOpen() && _broker.isActive();\r\n-    }\r\n-\r\n-    public boolean isStoreActive() {\r\n-        return _broker.isStoreActive();\r\n-    }\r\n-\r\n-    public void beginStore() {\r\n-        _broker.beginStore();\r\n-    }\r\n-\r\n-    public boolean contains(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        if (entity == null)\r\n-            return false;\r\n-        OpenJPAStateManager sm = _broker.getStateManager(entity);\r\n-        if (sm == null\r\n-            && !ImplHelper.isManagedType(getConfiguration(), entity.getClass()))\r\n-            throw new ArgumentException(_loc.get(\"not-entity\",\r\n-                entity.getClass()), null, null, true);\r\n-        return sm != null && !sm.isDeleted();\r\n-    }\r\n-\r\n-    public boolean containsAll(Object... entities) {\r\n-        for (Object entity : entities)\r\n-            if (!contains(entity))\r\n-                return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    public boolean containsAll(Collection entities) {\r\n-        for (Object entity : entities)\r\n-            if (!contains(entity))\r\n-                return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    public void persist(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.persist(entity, this);\r\n-    }\r\n-\r\n-    public void persistAll(Object... entities) {\r\n-        persistAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void persistAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.persistAll(entities, this);\r\n-    }\r\n-\r\n-    public void remove(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.delete(entity, this);\r\n-    }\r\n-\r\n-    public void removeAll(Object... entities) {\r\n-        removeAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void removeAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.deleteAll(entities, this);\r\n-    }\r\n-\r\n-    public void release(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.release(entity, this);\r\n-    }\r\n-\r\n-    public void releaseAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.releaseAll(entities, this);\r\n-    }\r\n-\r\n-    public void releaseAll(Object... entities) {\r\n-        releaseAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void refresh(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertWriteOperation();\r\n-        _broker.refresh(entity, this);\r\n-    }\r\n-\r\n-    public void refreshAll() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertWriteOperation();\r\n-        _broker.refreshAll(_broker.getTransactionalObjects(), this);\r\n-    }\r\n-\r\n-    public void refreshAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertWriteOperation();\r\n-        _broker.refreshAll(entities, this);\r\n-    }\r\n-\r\n-    public void refreshAll(Object... entities) {\r\n-        refreshAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void retrieve(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.retrieve(entity, true, this);\r\n-    }\r\n-\r\n-    public void retrieveAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.retrieveAll(entities, true, this);\r\n-    }\r\n-\r\n-    public void retrieveAll(Object... entities) {\r\n-        retrieveAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void evict(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evict(entity, this);\r\n-    }\r\n-\r\n-    public void evictAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(entities, this);\r\n-    }\r\n-\r\n-    public void evictAll(Object... entities) {\r\n-        evictAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void evictAll() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(this);\r\n-    }\r\n-\r\n-    public void evictAll(Class cls) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(_broker.newExtent(cls, true), this);\r\n-    }\r\n-\r\n-    public void evictAll(Extent extent) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.evictAll(((ExtentImpl) extent).getDelegate(), this);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T detach(T entity) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.detach(entity, this);\r\n-    }\r\n-\r\n-    public Object[] detachAll(Object... entities) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.detachAll(Arrays.asList(entities), this);\r\n-    }\r\n-\r\n-    public Collection detachAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        return Arrays.asList(_broker.detachAll(entities, this));\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public <T> T merge(T entity) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.attach(entity, true, this);\r\n-    }\r\n-\r\n-    public Object[] mergeAll(Object... entities) {\r\n-        if (entities.length == 0)\r\n-            return EMPTY_OBJECTS;\r\n-        return mergeAll(Arrays.asList(entities)).toArray();\r\n-    }\r\n-\r\n-    public Collection mergeAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        return Arrays.asList(_broker.attachAll(entities, true, this));\r\n-    }\r\n-\r\n-    public void transactional(Object entity, boolean updateVersion) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.transactional(entity, updateVersion, this);\r\n-    }\r\n-\r\n-    public void transactionalAll(Collection objs, boolean updateVersion) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.transactionalAll(objs, updateVersion, this);\r\n-    }\r\n-\r\n-    public void transactionalAll(Object[] objs, boolean updateVersion) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.transactionalAll(Arrays.asList(objs), updateVersion, this);\r\n-    }\r\n-\r\n-    public void nontransactional(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.nontransactional(entity, this);\r\n-    }\r\n-\r\n-    public void nontransactionalAll(Collection objs) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.nontransactionalAll(objs, this);\r\n-    }\r\n-\r\n-    public void nontransactionalAll(Object[] objs) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.nontransactionalAll(Arrays.asList(objs), this);\r\n-    }\r\n-\r\n-    public Generator getNamedGenerator(String name) {\r\n-        assertNotCloseInvoked();\r\n-        try {\r\n-            SequenceMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getSequenceMetaData(name,\r\n-                _broker.getClassLoader(), true);\r\n-            Seq seq = meta.getInstance(_broker.getClassLoader());\r\n-            return new GeneratorImpl(seq, name, _broker, null);\r\n-        } catch (RuntimeException re) {\r\n-            throw PersistenceExceptions.toPersistenceException(re);\r\n-        }\r\n-    }\r\n-\r\n-    public Generator getIdGenerator(Class forClass) {\r\n-        assertNotCloseInvoked();\r\n-        try {\r\n-            ClassMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getMetaData(forClass,\r\n-                _broker.getClassLoader(), true);\r\n-            Seq seq = _broker.getIdentitySequence(meta);\r\n-            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\r\n-                meta);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public Generator getFieldGenerator(Class forClass, String fieldName) {\r\n-        assertNotCloseInvoked();\r\n-        try {\r\n-            ClassMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getMetaData(forClass,\r\n-                _broker.getClassLoader(), true);\r\n-            FieldMetaData fmd = meta.getField(fieldName);\r\n-            if (fmd == null)\r\n-                throw new ArgumentException(_loc.get(\"no-named-field\",\r\n-                    forClass, fieldName), null, null, false);\r\n-\r\n-            Seq seq = _broker.getValueSequence(fmd);\r\n-            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\r\n-                meta);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public <T> Extent<T> createExtent(Class<T> cls, boolean subclasses) {\r\n-        assertNotCloseInvoked();\r\n-        return new ExtentImpl<T>(this, _broker.newExtent(cls, subclasses));\r\n-    }\r\n-\r\n-    public OpenJPAQuery createQuery(String query) {\r\n-        return createQuery(JPQLParser.LANG_JPQL, query);\r\n-    }\r\n-\r\n-    public OpenJPAQuery createQuery(String language, String query) {\r\n-        assertNotCloseInvoked();\r\n-        return new QueryImpl(this, ret, _broker.newQuery(language, query));\r\n-    }\r\n-\r\n-    public OpenJPAQuery createQuery(Query query) {\r\n-        if (query == null)\r\n-            return createQuery((String) null);\r\n-        assertNotCloseInvoked();\r\n-        org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\r\n-        return new QueryImpl(this, ret, _broker.newQuery(q.getLanguage(),\r\n-            q));\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNamedQuery(String name) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        try {\r\n-            QueryMetaData meta = _broker.getConfiguration().\r\n-                getMetaDataRepositoryInstance().getQueryMetaData(null, name,\r\n-                _broker.getClassLoader(), true);\r\n-            org.apache.openjpa.kernel.Query del =\r\n-                _broker.newQuery(meta.getLanguage(), null);\r\n-            meta.setInto(del);\r\n-            del.compile();\r\n-\r\n-            OpenJPAQuery q = new QueryImpl(this, ret, del);\r\n-            String[] hints = meta.getHintKeys();\r\n-            Object[] values = meta.getHintValues();\r\n-            for (int i = 0; i < hints.length; i++)\r\n-                q.setHint(hints[i], values[i]);\r\n-            return q;\r\n-        } catch (RuntimeException re) {\r\n-            throw PersistenceExceptions.toPersistenceException(re);\r\n-        }\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNativeQuery(String query) {\r\n-        validateSQL(query);\r\n-        return createQuery(QueryLanguages.LANG_SQL, query);\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNativeQuery(String query, Class cls) {\r\n-        return createNativeQuery(query).setResultClass(cls);\r\n-    }\r\n-\r\n-    public OpenJPAQuery createNativeQuery(String query, String mappingName) {\r\n-        assertNotCloseInvoked();\r\n-        validateSQL(query);\r\n-        org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\r\n-            QueryLanguages.LANG_SQL, query);\r\n-        kernelQuery.setResultMapping(null, mappingName);\r\n-        return new QueryImpl(this, ret, kernelQuery);\r\n-    }\r\n-\r\n-    /**\r\n-     * Validate that the user provided SQL.\r\n-     */\r\n-    private static void validateSQL(String query) {\r\n-        if (StringUtils.trimToNull(query) == null)\r\n-            throw new ArgumentException(_loc.get(\"no-sql\"), null, null, false);\r\n-    }\r\n-\r\n-    public void setFlushMode(FlushModeType flushMode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        _broker.getFetchConfiguration().setFlushBeforeQueries\r\n-            (toFlushBeforeQueries(flushMode));\r\n-    }\r\n-\r\n-    public FlushModeType getFlushMode() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.assertOpen();\r\n-        return fromFlushBeforeQueries(_broker.getFetchConfiguration().\r\n-            getFlushBeforeQueries());\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate our internal flush constant to a flush mode enum value.\r\n-     */\r\n-    static FlushModeType fromFlushBeforeQueries(int flush) {\r\n-        switch (flush) {\r\n-            case QueryFlushModes.FLUSH_TRUE:\r\n-                return FlushModeType.AUTO;\r\n-            case QueryFlushModes.FLUSH_FALSE:\r\n-                return FlushModeType.COMMIT;\r\n-            default:\r\n-                return null;\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate a flush mode enum value to our internal flush constant.\r\n-     */\r\n-    static int toFlushBeforeQueries(FlushModeType flushMode) {\r\n-        // choose default for null\r\n-        if (flushMode == null)\r\n-            return QueryFlushModes.FLUSH_WITH_CONNECTION;\r\n-        if (flushMode == FlushModeType.AUTO)\r\n-            return QueryFlushModes.FLUSH_TRUE;\r\n-        if (flushMode == FlushModeType.COMMIT)\r\n-            return QueryFlushModes.FLUSH_FALSE;\r\n-        throw new ArgumentException(flushMode.toString(), null, null, false);\r\n-    }\r\n-\r\n-    public void clear() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.detachAll(this, false);\r\n-    }\r\n-\r\n-    public Object getDelegate() {\r\n-        _broker.assertOpen();\r\n-        assertNotCloseInvoked();\r\n-        return this;\r\n-    }\r\n-\r\n-    public LockModeType getLockMode(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        return fromLockLevel(_broker.getLockLevel(entity));\r\n-    }\r\n-\r\n-    public void lock(Object entity, LockModeType mode) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock(entity, toLockLevel(mode), -1, this);\r\n-    }\r\n-\r\n-    public void lock(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock(entity, this);\r\n-    }\r\n-\r\n-    public void lock(Object entity, LockModeType mode, int timeout) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lock(entity, toLockLevel(mode), timeout, this);\r\n-    }\r\n-\r\n-    public void lockAll(Collection entities) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lockAll(entities, this);\r\n-    }\r\n-\r\n-    public void lockAll(Collection entities, LockModeType mode, int timeout) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.lockAll(entities, toLockLevel(mode), timeout, this);\r\n-    }\r\n-\r\n-    public void lockAll(Object... entities) {\r\n-        lockAll(Arrays.asList(entities));\r\n-    }\r\n-\r\n-    public void lockAll(Object[] entities, LockModeType mode, int timeout) {\r\n-        lockAll(Arrays.asList(entities), mode, timeout);\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate our internal lock level to a javax.persistence enum value.\r\n-     */\r\n-    static LockModeType fromLockLevel(int level) {\r\n-        if (level < LockLevels.LOCK_READ)\r\n-            return null;\r\n-        if (level < LockLevels.LOCK_WRITE)\r\n-            return LockModeType.READ;\r\n-        return LockModeType.WRITE;\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate the javax.persistence enum value to our internal lock level.\r\n-     */\r\n-    static int toLockLevel(LockModeType mode) {\r\n-        if (mode == null)\r\n-            return LockLevels.LOCK_NONE;\r\n-        if (mode == LockModeType.READ)\r\n-            return LockLevels.LOCK_READ;\r\n-        if (mode == LockModeType.WRITE)\r\n-            return LockLevels.LOCK_WRITE;\r\n-        throw new ArgumentException(mode.toString(), null, null, true);\r\n-    }\r\n-\r\n-    public boolean cancelAll() {\r\n-        return _broker.cancelAll();\r\n-    }\r\n-\r\n-    public Object getConnection() {\r\n-        return _broker.getConnection();\r\n-    }\r\n-\r\n-    public Collection getManagedObjects() {\r\n-        return _broker.getManagedObjects();\r\n-    }\r\n-\r\n-    public Collection getTransactionalObjects() {\r\n-        return _broker.getTransactionalObjects();\r\n-    }\r\n-\r\n-    public Collection getPendingTransactionalObjects() {\r\n-        return _broker.getPendingTransactionalObjects();\r\n-    }\r\n-\r\n-    public Collection getDirtyObjects() {\r\n-        return _broker.getDirtyObjects();\r\n-    }\r\n-\r\n-    public boolean getOrderDirtyObjects() {\r\n-        return _broker.getOrderDirtyObjects();\r\n-    }\r\n-\r\n-    public void setOrderDirtyObjects(boolean order) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.setOrderDirtyObjects(order);\r\n-    }\r\n-\r\n-    public void dirtyClass(Class cls) {\r\n-        assertNotCloseInvoked();\r\n-        _broker.dirtyType(cls);\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public Collection<Class> getPersistedClasses() {\r\n-        return (Collection<Class>) _broker.getPersistedTypes();\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public Collection<Class> getUpdatedClasses() {\r\n-        return (Collection<Class>) _broker.getUpdatedTypes();\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public Collection<Class> getRemovedClasses() {\r\n-        return (Collection<Class>) _broker.getDeletedTypes();\r\n-    }\r\n-\r\n-    public <T> T createInstance(Class<T> cls) {\r\n-        assertNotCloseInvoked();\r\n-        return (T) _broker.newInstance(cls);\r\n-    }\r\n-\r\n-    public void close() {\r\n-        assertNotCloseInvoked();\r\n-        _broker.close();\r\n-    }\r\n-\r\n-    public boolean isOpen() {\r\n-        return !_broker.isCloseInvoked();\r\n-    }\r\n-\r\n-    public void dirty(Object o, String field) {\r\n-        assertNotCloseInvoked();\r\n-        OpenJPAStateManager sm = _broker.getStateManager(o);\r\n-        try {\r\n-            if (sm != null)\r\n-                sm.dirty(field);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public Object getObjectId(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return JPAFacadeHelper.fromOpenJPAObjectId(_broker.getObjectId(o));\r\n-    }\r\n-\r\n-    public boolean isDirty(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isDirty(o);\r\n-    }\r\n-\r\n-    public boolean isTransactional(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isTransactional(o);\r\n-    }\r\n-\r\n-    public boolean isPersistent(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isPersistent(o);\r\n-    }\r\n-\r\n-    public boolean isNewlyPersistent(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isNew(o);\r\n-    }\r\n-\r\n-    public boolean isRemoved(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isDeleted(o);\r\n-    }\r\n-\r\n-    public boolean isDetached(Object entity) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.isDetached(entity);\r\n-    }\r\n-\r\n-    public Object getVersion(Object o) {\r\n-        assertNotCloseInvoked();\r\n-        return _broker.getVersion(o);\r\n-    }\r\n-\r\n-    /**\r\n-     * Throw appropriate exception if close has been invoked but the broker\r\n-     * is still open.  We test only for this because if the broker is already\r\n-     * closed, it will throw its own more informative exception when we \r\n-     * delegate the pending operation to it.\r\n-     */\r\n-    void assertNotCloseInvoked() {\r\n-        if (!_broker.isClosed() && _broker.isCloseInvoked())\r\n-            throw new InvalidStateException(_loc.get(\"close-invoked\"), null,\r\n-                null, true);\r\n-    }\r\n-\r\n-    ////////////////////////////////\r\n-    // FindCallbacks implementation\r\n-    ////////////////////////////////\r\n-\r\n-    public Object processArgument(Object arg) {\r\n-        return arg;\r\n-    }\r\n-\r\n-    public Object processReturn(Object oid, OpenJPAStateManager sm) {\r\n-        return (sm == null || sm.isDeleted()) ? null : sm.getManagedInstance();\r\n-    }\r\n-\r\n-    //////////////////////////////\r\n-    // OpCallbacks implementation\r\n-    //////////////////////////////\r\n-\r\n-    public int processArgument(int op, Object obj, OpenJPAStateManager sm) {\r\n-        switch (op) {\r\n-            case OP_DELETE:\r\n-                // cascade through non-persistent non-detached instances\r\n-                if (sm == null && !_broker.isDetached(obj))\r\n-                    return ACT_CASCADE;\r\n-                if (sm != null && !sm.isDetached() && !sm.isPersistent())\r\n-                    return ACT_CASCADE;\r\n-                // ignore deleted instances\r\n-                if (sm != null && sm.isDeleted())\r\n-                    return ACT_NONE;\r\n-                break;\r\n-            case OP_ATTACH:\r\n-                // die on removed\r\n-                if (sm != null && sm.isDeleted())\r\n-                    throw new UserException(_loc.get(\"removed\",\r\n-                        Exceptions.toString(obj))).setFailedObject(obj);\r\n-                // cascade through managed instances\r\n-                if (sm != null && !sm.isDetached())\r\n-                    return ACT_CASCADE;\r\n-                break;\r\n-            case OP_REFRESH:\r\n-                // die on unmanaged instances\r\n-                if (sm == null)\r\n-                    throw new UserException(_loc.get(\"not-managed\",\r\n-                        Exceptions.toString(obj))).setFailedObject(obj);\r\n-                break;\r\n-        }\r\n-        return ACT_RUN | ACT_CASCADE;\r\n-    }\r\n-\r\n-    public int hashCode() {\r\n-        return _broker.hashCode();\r\n-    }\r\n-\r\n-    public boolean equals(Object other) {\r\n-        if (other == this)\r\n-            return true;\r\n-        if (!(other instanceof EntityManagerImpl))\r\n-            return false;\r\n-        return _broker.equals(((EntityManagerImpl) other)._broker);\r\n-    }\r\n-\r\n-    public void readExternal(ObjectInput in)\r\n-        throws IOException, ClassNotFoundException {\r\n-        try {\r\n-            ret = PersistenceExceptions.getRollbackTranslator(this);\r\n-\r\n-            // this assumes that serialized Brokers are from something\r\n-            // that extends AbstractBrokerFactory.\r\n-            Object factoryKey = in.readObject();\r\n-            AbstractBrokerFactory factory =\r\n-                AbstractBrokerFactory.getPooledFactoryForKey(factoryKey);\r\n-            byte[] brokerBytes = (byte[]) in.readObject();\r\n-            ObjectInputStream innerIn = new BrokerBytesInputStream(brokerBytes,\r\n-                factory.getConfiguration());\r\n-\r\n-            Broker broker = (Broker) innerIn.readObject();\r\n-            EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\r\n-                JPAFacadeHelper.toEntityManagerFactory(\r\n-                    broker.getBrokerFactory());\r\n-            broker.putUserObject(JPAFacadeHelper.EM_KEY, this);\r\n-            initialize(emf, broker);\r\n-        } catch (RuntimeException re) {\r\n-            try {\r\n-                re = ret.translate(re);\r\n-            } catch (Exception e) {\r\n-                // ignore\r\n-            }\r\n-            throw re;\r\n-        }\r\n-    }\r\n-\r\n-    public void writeExternal(ObjectOutput out) throws IOException {\r\n-        try {\r\n-            // this requires that only AbstractBrokerFactory-sourced\r\n-            // brokers can be serialized\r\n-            Object factoryKey = ((AbstractBrokerFactory) _broker\r\n-                .getBrokerFactory()).getPoolKey();\r\n-            out.writeObject(factoryKey);\r\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n-            ObjectOutputStream innerOut = new ObjectOutputStream(baos);\r\n-            innerOut.writeObject(_broker.getDelegate());\r\n-            innerOut.flush();\r\n-            out.writeObject(baos.toByteArray());\r\n-        } catch (RuntimeException re) {\r\n-            try {\r\n-                re = ret.translate(re);\r\n-            } catch (Exception e) {\r\n-                // ignore\r\n-            }\r\n-            throw re;\r\n-        }\r\n-    }\r\n-\r\n-    private static class BrokerBytesInputStream extends ObjectInputStream {\r\n-\r\n-        private OpenJPAConfiguration conf;\r\n-\r\n-        BrokerBytesInputStream(byte[] bytes, OpenJPAConfiguration conf)\r\n-            throws IOException {\r\n-            super(new ByteArrayInputStream(bytes));\r\n-            if (conf == null)\r\n-                throw new IllegalArgumentException(\r\n-                    \"Illegal null argument to ObjectInputStreamWithLoader\");\r\n-            this.conf = conf;\r\n-        }\r\n-\r\n-        /**\r\n-         * Make a primitive array class\r\n-         */\r\n-        private Class primitiveType(char type) {\r\n-            switch (type) {\r\n-                case 'B': return byte.class;\r\n-                case 'C': return char.class;\r\n-                case 'D': return double.class;\r\n-                case 'F': return float.class;\r\n-                case 'I': return int.class;\r\n-                case 'J': return long.class;\r\n-                case 'S': return short.class;\r\n-                case 'Z': return boolean.class;\r\n-                default: return null;\r\n-            }\r\n-        }\r\n-\r\n-        protected Class resolveClass(ObjectStreamClass classDesc)\r\n-            throws IOException, ClassNotFoundException {\r\n-\r\n-            String cname = classDesc.getName();\r\n-            if (cname.startsWith(\"[\")) {\r\n-                // An array\r\n-                Class component;\t\t// component class\r\n-                int dcount;\t\t\t    // dimension\r\n-                for (dcount=1; cname.charAt(dcount)=='['; dcount++) ;\r\n-                if (cname.charAt(dcount) == 'L') {\r\n-                    component = lookupClass(cname.substring(dcount+1,\r\n-                        cname.length()-1));\r\n-                } else {\r\n-                    if (cname.length() != dcount+1) {\r\n-                        throw new ClassNotFoundException(cname);// malformed\r\n-                    }\r\n-                    component = primitiveType(cname.charAt(dcount));\r\n-                }\r\n-                int dim[] = new int[dcount];\r\n-                for (int i=0; i<dcount; i++) {\r\n-                    dim[i]=0;\r\n-                }\r\n-                return Array.newInstance(component, dim).getClass();\r\n-            } else {\r\n-                return lookupClass(cname);\r\n-            }\r\n-        }\r\n-\r\n-        /**\r\n-         * If this is a generated subclass, look up the corresponding Class\r\n-         * object via metadata.\r\n-         */\r\n-        private Class lookupClass(String className)\r\n-            throws ClassNotFoundException {\r\n-            try {\r\n-                return Class.forName(className);\r\n-            } catch (ClassNotFoundException e) {\r\n-                if (PCEnhancer.isPCSubclassName(className)) {\r\n-                    String superName = PCEnhancer.toManagedTypeName(className);\r\n-                    ClassMetaData[] metas = conf.getMetaDataRepositoryInstance()\r\n-                        .getMetaDatas();\r\n-                    for (int i = 0; i < metas.length; i++) {\r\n-                        if (superName.equals(\r\n-                            metas[i].getDescribedType().getName())) {\r\n-                            return PCRegistry.getPCType(\r\n-                                metas[i].getDescribedType());\r\n-                        }\r\n-                    }\r\n-\r\n-                    // if it's not found, try to look for it anyways\r\n-                    return Class.forName(className);\r\n-                } else {\r\n-                    throw e;\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.Externalizable;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutput;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamClass;\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.IdentityHashMap;\n+import javax.persistence.EntityManager;\n+import javax.persistence.FlushModeType;\n+import javax.persistence.LockModeType;\n+import javax.persistence.Query;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.ee.ManagedRuntime;\n+import org.apache.openjpa.enhance.PCEnhancer;\n+import org.apache.openjpa.enhance.PCRegistry;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.DelegatingBroker;\n+import org.apache.openjpa.kernel.FindCallbacks;\n+import org.apache.openjpa.kernel.LockLevels;\n+import org.apache.openjpa.kernel.OpCallbacks;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.kernel.QueryFlushModes;\n+import org.apache.openjpa.kernel.QueryLanguages;\n+import org.apache.openjpa.kernel.Seq;\n+import org.apache.openjpa.kernel.FetchConfiguration;\n+import org.apache.openjpa.kernel.jpql.JPQLParser;\n+import org.apache.openjpa.lib.util.Closeable;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.meta.FieldMetaData;\n+import org.apache.openjpa.meta.QueryMetaData;\n+import org.apache.openjpa.meta.SequenceMetaData;\n+import org.apache.openjpa.util.Exceptions;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.RuntimeExceptionTranslator;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Implementation of {@link EntityManager} interface.\n+ *\n+ * @author Patrick Linskey\n+ * @author Abe White\n+ * @nojavadoc\n+ */\n+public class EntityManagerImpl\n+    implements OpenJPAEntityManagerSPI, Externalizable,\n+    FindCallbacks, OpCallbacks, Closeable, OpenJPAEntityTransaction {\n+\n+    private static final Localizer _loc = Localizer.forPackage\n+        (EntityManagerImpl.class);\n+    private static final Object[] EMPTY_OBJECTS = new Object[0];\n+\n+    private DelegatingBroker _broker;\n+    private EntityManagerFactoryImpl _emf;\n+    private Map<FetchConfiguration,FetchPlan> _plans =\n+        new IdentityHashMap<FetchConfiguration,FetchPlan>(1);\n+\n+    private RuntimeExceptionTranslator ret =\n+        PersistenceExceptions.getRollbackTranslator(this);\n+\n+    public EntityManagerImpl() {\n+        // for Externalizable\n+    }\n+\n+    /**\n+     * Constructor; supply factory and delegate.\n+     */\n+    public EntityManagerImpl(EntityManagerFactoryImpl factory,\n+        Broker broker) {\n+        initialize(factory, broker);\n+    }\n+\n+    private void initialize(EntityManagerFactoryImpl factory, Broker broker) {\n+        _emf = factory;\n+        _broker = new DelegatingBroker(broker, ret);\n+        _broker.setImplicitBehavior(this, ret);\n+    }\n+\n+    /**\n+     * Broker delegate.\n+     */\n+    public Broker getBroker() {\n+        return _broker.getDelegate();\n+    }\n+\n+    public OpenJPAEntityManagerFactory getEntityManagerFactory() {\n+        return _emf;\n+    }\n+\n+    public OpenJPAConfiguration getConfiguration() {\n+        return _broker.getConfiguration();\n+    }\n+\n+    public FetchPlan getFetchPlan() {\n+        assertNotCloseInvoked();\n+        _broker.lock();\n+        try {\n+            FetchConfiguration fc = _broker.getFetchConfiguration();\n+            FetchPlan fp = _plans.get(fc);\n+            if (fp == null) {\n+                fp = _emf.toFetchPlan(_broker, fc);\n+                _plans.put(fc, fp);\n+            }\n+            return fp;\n+        } finally {\n+            _broker.unlock();\n+        }\n+    }\n+\n+    public FetchPlan pushFetchPlan() {\n+        assertNotCloseInvoked();\n+        _broker.lock();\n+        try {\n+            _broker.pushFetchConfiguration();\n+            return getFetchPlan();\n+        } finally {\n+            _broker.unlock();\n+        }\n+    }\n+\n+    public void popFetchPlan() {\n+        assertNotCloseInvoked();\n+        _broker.lock();\n+        try {\n+            _broker.popFetchConfiguration();\n+        } finally {\n+            _broker.unlock();\n+        }\n+    }\n+\n+    public ConnectionRetainMode getConnectionRetainMode() {\n+        return ConnectionRetainMode.fromKernelConstant(\n+            _broker.getConnectionRetainMode());\n+    }\n+\n+    public boolean isTransactionManaged() {\n+        return _broker.isManaged();\n+    }\n+\n+    public boolean isManaged() {\n+        return _broker.isManaged();\n+    }\n+\n+    public ManagedRuntime getManagedRuntime() {\n+        return _broker.getManagedRuntime();\n+    }\n+\n+    public boolean getSyncWithManagedTransactions() {\n+        return _broker.getSyncWithManagedTransactions();\n+    }\n+\n+    public void setSyncWithManagedTransactions(boolean sync) {\n+        assertNotCloseInvoked();\n+        _broker.setSyncWithManagedTransactions(sync);\n+    }\n+\n+    public ClassLoader getClassLoader() {\n+        return _broker.getClassLoader();\n+    }\n+\n+    public String getConnectionUserName() {\n+        return _broker.getConnectionUserName();\n+    }\n+\n+    public String getConnectionPassword() {\n+        return _broker.getConnectionPassword();\n+    }\n+\n+    public boolean getMultithreaded() {\n+        return _broker.getMultithreaded();\n+    }\n+\n+    public void setMultithreaded(boolean multithreaded) {\n+        assertNotCloseInvoked();\n+        _broker.setMultithreaded(multithreaded);\n+    }\n+\n+    public boolean getIgnoreChanges() {\n+        return _broker.getIgnoreChanges();\n+    }\n+\n+    public void setIgnoreChanges(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setIgnoreChanges(val);\n+    }\n+\n+    public boolean getNontransactionalRead() {\n+        return _broker.getNontransactionalRead();\n+    }\n+\n+    public void setNontransactionalRead(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setNontransactionalRead(val);\n+    }\n+\n+    public boolean getNontransactionalWrite() {\n+        return _broker.getNontransactionalWrite();\n+    }\n+\n+    public void setNontransactionalWrite(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setNontransactionalWrite(val);\n+    }\n+\n+    public boolean getOptimistic() {\n+        return _broker.getOptimistic();\n+    }\n+\n+    public void setOptimistic(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setOptimistic(val);\n+    }\n+\n+    public RestoreStateType getRestoreState() {\n+        return RestoreStateType.fromKernelConstant(_broker.getRestoreState());\n+    }\n+\n+    public void setRestoreState(RestoreStateType val) {\n+        assertNotCloseInvoked();\n+        _broker.setRestoreState(val.toKernelConstant());\n+    }\n+\n+    public void setRestoreState(int restore) {\n+        assertNotCloseInvoked();\n+        _broker.setRestoreState(restore);\n+    }\n+\n+    public boolean getRetainState() {\n+        return _broker.getRetainState();\n+    }\n+\n+    public void setRetainState(boolean val) {\n+        assertNotCloseInvoked();\n+        _broker.setRetainState(val);\n+    }\n+\n+    public AutoClearType getAutoClear() {\n+        return AutoClearType.fromKernelConstant(_broker.getAutoClear());\n+    }\n+\n+    public void setAutoClear(AutoClearType val) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoClear(val.toKernelConstant());\n+    }\n+\n+    public void setAutoClear(int autoClear) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoClear(autoClear);\n+    }\n+\n+    public DetachStateType getDetachState() {\n+        return DetachStateType.fromKernelConstant(_broker.getDetachState());\n+    }\n+\n+    public void setDetachState(DetachStateType type) {\n+        assertNotCloseInvoked();\n+        _broker.setDetachState(type.toKernelConstant());\n+    }\n+\n+    public void setDetachState(int detach) {\n+        assertNotCloseInvoked();\n+        _broker.setDetachState(detach);\n+    }\n+\n+    public EnumSet<AutoDetachType> getAutoDetach() {\n+        return AutoDetachType.toEnumSet(_broker.getAutoDetach());\n+    }\n+\n+    public void setAutoDetach(AutoDetachType flag) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(flag)));\n+    }\n+\n+    public void setAutoDetach(EnumSet<AutoDetachType> flags) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(AutoDetachType.fromEnumSet(flags));\n+    }\n+\n+    public void setAutoDetach(int autoDetachFlags) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(autoDetachFlags);\n+    }\n+\n+    public void setAutoDetach(AutoDetachType value, boolean on) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(AutoDetachType.fromEnumSet(EnumSet.of(value)),on);\n+    }\n+\n+    public void setAutoDetach(int flag, boolean on) {\n+        assertNotCloseInvoked();\n+        _broker.setAutoDetach(flag, on);\n+    }\n+\n+    public boolean getEvictFromStoreCache() {\n+        return _broker.getEvictFromDataCache();\n+    }\n+\n+    public void setEvictFromStoreCache(boolean evict) {\n+        assertNotCloseInvoked();\n+        _broker.setEvictFromDataCache(evict);\n+    }\n+\n+    public boolean getPopulateStoreCache() {\n+        return _broker.getPopulateDataCache();\n+    }\n+\n+    public void setPopulateStoreCache(boolean cache) {\n+        assertNotCloseInvoked();\n+        _broker.setPopulateDataCache(cache);\n+    }\n+\n+    public boolean isTrackChangesByType() {\n+        return _broker.isTrackChangesByType();\n+    }\n+\n+    public void setTrackChangesByType(boolean trackByType) {\n+        assertNotCloseInvoked();\n+        _broker.setTrackChangesByType(trackByType);\n+    }\n+\n+    public boolean isLargeTransaction() {\n+        return isTrackChangesByType();\n+    }\n+\n+    public void setLargeTransaction(boolean value) {\n+        setTrackChangesByType(value);\n+    }\n+\n+    public Object getUserObject(Object key) {\n+        return _broker.getUserObject(key);\n+    }\n+\n+    public Object putUserObject(Object key, Object val) {\n+        assertNotCloseInvoked();\n+        return _broker.putUserObject(key, val);\n+    }\n+\n+    public void addTransactionListener(Object listener) {\n+        assertNotCloseInvoked();\n+        _broker.addTransactionListener(listener);\n+    }\n+\n+    public void removeTransactionListener(Object listener) {\n+        assertNotCloseInvoked();\n+        _broker.removeTransactionListener(listener);\n+    }\n+\n+    public EnumSet<CallbackMode> getTransactionListenerCallbackModes() {\n+        return CallbackMode.toEnumSet(\n+            _broker.getTransactionListenerCallbackMode());\n+    }\n+\n+    public void setTransactionListenerCallbackMode(CallbackMode mode) {\n+        assertNotCloseInvoked();\n+        _broker.setTransactionListenerCallbackMode(\n+            CallbackMode.fromEnumSet(EnumSet.of(mode)));\n+    }\n+\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes){\n+        assertNotCloseInvoked();\n+        _broker.setTransactionListenerCallbackMode(\n+            CallbackMode.fromEnumSet(modes));\n+    }\n+\n+    public int getTransactionListenerCallbackMode() {\n+        return _broker.getTransactionListenerCallbackMode();\n+    }\n+\n+    public void setTransactionListenerCallbackMode(int callbackMode) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void addLifecycleListener(Object listener, Class... classes) {\n+        assertNotCloseInvoked();\n+        _broker.addLifecycleListener(listener, classes);\n+    }\n+\n+    public void removeLifecycleListener(Object listener) {\n+        assertNotCloseInvoked();\n+        _broker.removeLifecycleListener(listener);\n+    }\n+\n+    public EnumSet<CallbackMode> getLifecycleListenerCallbackModes() {\n+        return CallbackMode.toEnumSet(\n+            _broker.getLifecycleListenerCallbackMode());\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(CallbackMode mode) {\n+        assertNotCloseInvoked();\n+        _broker.setLifecycleListenerCallbackMode(\n+            CallbackMode.fromEnumSet(EnumSet.of(mode)));\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes) {\n+        assertNotCloseInvoked();\n+        _broker.setLifecycleListenerCallbackMode(\n+            CallbackMode.fromEnumSet(modes));\n+    }\n+\n+    public int getLifecycleListenerCallbackMode() {\n+        return _broker.getLifecycleListenerCallbackMode();\n+    }\n+\n+    public void setLifecycleListenerCallbackMode(int callbackMode) {\n+        assertNotCloseInvoked();\n+        _broker.setLifecycleListenerCallbackMode(callbackMode);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getReference(Class<T> cls, Object oid) {\n+        assertNotCloseInvoked();\n+        oid = _broker.newObjectId(cls, oid);\n+        return (T) _broker.find(oid, false, this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T find(Class<T> cls, Object oid) {\n+        assertNotCloseInvoked();\n+        oid = _broker.newObjectId(cls, oid);\n+        return (T) _broker.find(oid, true, this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T[] findAll(Class<T> cls, Object... oids) {\n+        if (oids.length == 0)\n+            return (T[]) Array.newInstance(cls, 0);\n+        Collection<T> ret = findAll(cls, Arrays.asList(oids));\n+        return ret.toArray((T[]) Array.newInstance(cls, ret.size()));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> Collection<T> findAll(final Class<T> cls, Collection oids) {\n+        assertNotCloseInvoked();\n+        Object[] objs = _broker.findAll(oids, true, new FindCallbacks() {\n+            public Object processArgument(Object oid) {\n+                return _broker.newObjectId(cls, oid);\n+            }\n+\n+            public Object processReturn(Object oid, OpenJPAStateManager sm) {\n+                return EntityManagerImpl.this.processReturn(oid, sm);\n+            }\n+        });\n+        return (Collection<T>) Arrays.asList(objs);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T findCached(Class<T> cls, Object oid) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.findCached(_broker.newObjectId(cls, oid), this);\n+    }\n+\n+    public Class getObjectIdClass(Class cls) {\n+        assertNotCloseInvoked();\n+        if (cls == null)\n+            return null;\n+        return JPAFacadeHelper.fromOpenJPAObjectIdClass\n+                (_broker.getObjectIdType(cls));\n+    }\n+\n+    public OpenJPAEntityTransaction getTransaction() {\n+        if (_broker.isManaged())\n+            throw new InvalidStateException(_loc.get(\"get-managed-trans\"),\n+                null, null, false);\n+        return this;\n+    }\n+\n+    public void joinTransaction() {\n+        assertNotCloseInvoked();\n+        if (!_broker.syncWithManagedTransaction())\n+            throw new TransactionRequiredException(_loc.get\n+                (\"no-managed-trans\"), null, null, false);\n+    }\n+\n+    public void begin() {\n+        _broker.begin();\n+    }\n+\n+    public void commit() {\n+        try {\n+            _broker.commit();\n+        } catch (RollbackException e) {\n+            throw e;\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            // RollbackExceptions are special and aren't handled by the\n+            // normal exception translator, since the spec says they\n+            // should be thrown whenever the commit fails for any reason at\n+            // all, wheras the exception translator handles exceptions that\n+            // are caused for specific reasons\n+            throw new RollbackException(e);\n+        }\n+    }\n+\n+    public void rollback() {\n+        _broker.rollback();\n+    }\n+\n+    public void commitAndResume() {\n+        _broker.commitAndResume();\n+    }\n+\n+    public void rollbackAndResume() {\n+        _broker.rollbackAndResume();\n+    }\n+\n+    public Throwable getRollbackCause() {\n+        if (!isActive())\n+            throw new IllegalStateException(_loc.get(\"no-transaction\")\n+                .getMessage());\n+\n+        return _broker.getRollbackCause();\n+    }\n+\n+    public boolean getRollbackOnly() {\n+        if (!isActive())\n+            throw new IllegalStateException(_loc.get(\"no-transaction\")\n+                .getMessage());\n+\n+        return _broker.getRollbackOnly();\n+    }\n+\n+    public void setRollbackOnly() {\n+        _broker.setRollbackOnly();\n+    }\n+\n+    public void setRollbackOnly(Throwable cause) {\n+        _broker.setRollbackOnly(cause);\n+    }\n+\n+    public void setSavepoint(String name) {\n+        assertNotCloseInvoked();\n+        _broker.setSavepoint(name);\n+    }\n+\n+    public void rollbackToSavepoint() {\n+        assertNotCloseInvoked();\n+        _broker.rollbackToSavepoint();\n+    }\n+\n+    public void rollbackToSavepoint(String name) {\n+        assertNotCloseInvoked();\n+        _broker.rollbackToSavepoint(name);\n+    }\n+\n+    public void releaseSavepoint() {\n+        assertNotCloseInvoked();\n+        _broker.releaseSavepoint();\n+    }\n+\n+    public void releaseSavepoint(String name) {\n+        assertNotCloseInvoked();\n+        _broker.releaseSavepoint(name);\n+    }\n+\n+    public void flush() {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        _broker.assertActiveTransaction();\n+        _broker.flush();\n+    }\n+\n+    public void preFlush() {\n+        assertNotCloseInvoked();\n+        _broker.preFlush();\n+    }\n+\n+    public void validateChanges() {\n+        assertNotCloseInvoked();\n+        _broker.validateChanges();\n+    }\n+\n+    public boolean isActive() {\n+        return isOpen() && _broker.isActive();\n+    }\n+\n+    public boolean isStoreActive() {\n+        return _broker.isStoreActive();\n+    }\n+\n+    public void beginStore() {\n+        _broker.beginStore();\n+    }\n+\n+    public boolean contains(Object entity) {\n+        assertNotCloseInvoked();\n+        if (entity == null)\n+            return false;\n+        OpenJPAStateManager sm = _broker.getStateManager(entity);\n+        if (sm == null\n+            && !ImplHelper.isManagedType(getConfiguration(), entity.getClass()))\n+            throw new ArgumentException(_loc.get(\"not-entity\",\n+                entity.getClass()), null, null, true);\n+        return sm != null && !sm.isDeleted();\n+    }\n+\n+    public boolean containsAll(Object... entities) {\n+        for (Object entity : entities)\n+            if (!contains(entity))\n+                return false;\n+        return true;\n+    }\n+\n+    public boolean containsAll(Collection entities) {\n+        for (Object entity : entities)\n+            if (!contains(entity))\n+                return false;\n+        return true;\n+    }\n+\n+    public void persist(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.persist(entity, this);\n+    }\n+\n+    public void persistAll(Object... entities) {\n+        persistAll(Arrays.asList(entities));\n+    }\n+\n+    public void persistAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.persistAll(entities, this);\n+    }\n+\n+    public void remove(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.delete(entity, this);\n+    }\n+\n+    public void removeAll(Object... entities) {\n+        removeAll(Arrays.asList(entities));\n+    }\n+\n+    public void removeAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.deleteAll(entities, this);\n+    }\n+\n+    public void release(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.release(entity, this);\n+    }\n+\n+    public void releaseAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.releaseAll(entities, this);\n+    }\n+\n+    public void releaseAll(Object... entities) {\n+        releaseAll(Arrays.asList(entities));\n+    }\n+\n+    public void refresh(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.assertWriteOperation();\n+        _broker.refresh(entity, this);\n+    }\n+\n+    public void refreshAll() {\n+        assertNotCloseInvoked();\n+        _broker.assertWriteOperation();\n+        _broker.refreshAll(_broker.getTransactionalObjects(), this);\n+    }\n+\n+    public void refreshAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.assertWriteOperation();\n+        _broker.refreshAll(entities, this);\n+    }\n+\n+    public void refreshAll(Object... entities) {\n+        refreshAll(Arrays.asList(entities));\n+    }\n+\n+    public void retrieve(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.retrieve(entity, true, this);\n+    }\n+\n+    public void retrieveAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.retrieveAll(entities, true, this);\n+    }\n+\n+    public void retrieveAll(Object... entities) {\n+        retrieveAll(Arrays.asList(entities));\n+    }\n+\n+    public void evict(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.evict(entity, this);\n+    }\n+\n+    public void evictAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(entities, this);\n+    }\n+\n+    public void evictAll(Object... entities) {\n+        evictAll(Arrays.asList(entities));\n+    }\n+\n+    public void evictAll() {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(this);\n+    }\n+\n+    public void evictAll(Class cls) {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(_broker.newExtent(cls, true), this);\n+    }\n+\n+    public void evictAll(Extent extent) {\n+        assertNotCloseInvoked();\n+        _broker.evictAll(((ExtentImpl) extent).getDelegate(), this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T detach(T entity) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.detach(entity, this);\n+    }\n+\n+    public Object[] detachAll(Object... entities) {\n+        assertNotCloseInvoked();\n+        return _broker.detachAll(Arrays.asList(entities), this);\n+    }\n+\n+    public Collection detachAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        return Arrays.asList(_broker.detachAll(entities, this));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T merge(T entity) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.attach(entity, true, this);\n+    }\n+\n+    public Object[] mergeAll(Object... entities) {\n+        if (entities.length == 0)\n+            return EMPTY_OBJECTS;\n+        return mergeAll(Arrays.asList(entities)).toArray();\n+    }\n+\n+    public Collection mergeAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        return Arrays.asList(_broker.attachAll(entities, true, this));\n+    }\n+\n+    public void transactional(Object entity, boolean updateVersion) {\n+        assertNotCloseInvoked();\n+        _broker.transactional(entity, updateVersion, this);\n+    }\n+\n+    public void transactionalAll(Collection objs, boolean updateVersion) {\n+        assertNotCloseInvoked();\n+        _broker.transactionalAll(objs, updateVersion, this);\n+    }\n+\n+    public void transactionalAll(Object[] objs, boolean updateVersion) {\n+        assertNotCloseInvoked();\n+        _broker.transactionalAll(Arrays.asList(objs), updateVersion, this);\n+    }\n+\n+    public void nontransactional(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.nontransactional(entity, this);\n+    }\n+\n+    public void nontransactionalAll(Collection objs) {\n+        assertNotCloseInvoked();\n+        _broker.nontransactionalAll(objs, this);\n+    }\n+\n+    public void nontransactionalAll(Object[] objs) {\n+        assertNotCloseInvoked();\n+        _broker.nontransactionalAll(Arrays.asList(objs), this);\n+    }\n+\n+    public Generator getNamedGenerator(String name) {\n+        assertNotCloseInvoked();\n+        try {\n+            SequenceMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getSequenceMetaData(name,\n+                _broker.getClassLoader(), true);\n+            Seq seq = meta.getInstance(_broker.getClassLoader());\n+            return new GeneratorImpl(seq, name, _broker, null);\n+        } catch (RuntimeException re) {\n+            throw PersistenceExceptions.toPersistenceException(re);\n+        }\n+    }\n+\n+    public Generator getIdGenerator(Class forClass) {\n+        assertNotCloseInvoked();\n+        try {\n+            ClassMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData(forClass,\n+                _broker.getClassLoader(), true);\n+            Seq seq = _broker.getIdentitySequence(meta);\n+            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\n+                meta);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    public Generator getFieldGenerator(Class forClass, String fieldName) {\n+        assertNotCloseInvoked();\n+        try {\n+            ClassMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getMetaData(forClass,\n+                _broker.getClassLoader(), true);\n+            FieldMetaData fmd = meta.getField(fieldName);\n+            if (fmd == null)\n+                throw new ArgumentException(_loc.get(\"no-named-field\",\n+                    forClass, fieldName), null, null, false);\n+\n+            Seq seq = _broker.getValueSequence(fmd);\n+            return (seq == null) ? null : new GeneratorImpl(seq, null, _broker,\n+                meta);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    public <T> Extent<T> createExtent(Class<T> cls, boolean subclasses) {\n+        assertNotCloseInvoked();\n+        return new ExtentImpl<T>(this, _broker.newExtent(cls, subclasses));\n+    }\n+\n+    public OpenJPAQuery createQuery(String query) {\n+        return createQuery(JPQLParser.LANG_JPQL, query);\n+    }\n+\n+    public OpenJPAQuery createQuery(String language, String query) {\n+        assertNotCloseInvoked();\n+        return new QueryImpl(this, ret, _broker.newQuery(language, query));\n+    }\n+\n+    public OpenJPAQuery createQuery(Query query) {\n+        if (query == null)\n+            return createQuery((String) null);\n+        assertNotCloseInvoked();\n+        org.apache.openjpa.kernel.Query q = ((QueryImpl) query).getDelegate();\n+        return new QueryImpl(this, ret, _broker.newQuery(q.getLanguage(),\n+            q));\n+    }\n+\n+    public OpenJPAQuery createNamedQuery(String name) {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        try {\n+            QueryMetaData meta = _broker.getConfiguration().\n+                getMetaDataRepositoryInstance().getQueryMetaData(null, name,\n+                _broker.getClassLoader(), true);\n+            org.apache.openjpa.kernel.Query del =\n+                _broker.newQuery(meta.getLanguage(), null);\n+            meta.setInto(del);\n+            del.compile();\n+\n+            OpenJPAQuery q = new QueryImpl(this, ret, del);\n+            String[] hints = meta.getHintKeys();\n+            Object[] values = meta.getHintValues();\n+            for (int i = 0; i < hints.length; i++)\n+                q.setHint(hints[i], values[i]);\n+            return q;\n+        } catch (RuntimeException re) {\n+            throw PersistenceExceptions.toPersistenceException(re);\n+        }\n+    }\n+\n+    public OpenJPAQuery createNativeQuery(String query) {\n+        validateSQL(query);\n+        return createQuery(QueryLanguages.LANG_SQL, query);\n+    }\n+\n+    public OpenJPAQuery createNativeQuery(String query, Class cls) {\n+        return createNativeQuery(query).setResultClass(cls);\n+    }\n+\n+    public OpenJPAQuery createNativeQuery(String query, String mappingName) {\n+        assertNotCloseInvoked();\n+        validateSQL(query);\n+        org.apache.openjpa.kernel.Query kernelQuery = _broker.newQuery(\n+            QueryLanguages.LANG_SQL, query);\n+        kernelQuery.setResultMapping(null, mappingName);\n+        return new QueryImpl(this, ret, kernelQuery);\n+    }\n+\n+    /**\n+     * Validate that the user provided SQL.\n+     */\n+    private static void validateSQL(String query) {\n+        if (StringUtils.trimToNull(query) == null)\n+            throw new ArgumentException(_loc.get(\"no-sql\"), null, null, false);\n+    }\n+\n+    public void setFlushMode(FlushModeType flushMode) {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        _broker.getFetchConfiguration().setFlushBeforeQueries\n+            (toFlushBeforeQueries(flushMode));\n+    }\n+\n+    public FlushModeType getFlushMode() {\n+        assertNotCloseInvoked();\n+        _broker.assertOpen();\n+        return fromFlushBeforeQueries(_broker.getFetchConfiguration().\n+            getFlushBeforeQueries());\n+    }\n+\n+    /**\n+     * Translate our internal flush constant to a flush mode enum value.\n+     */\n+    static FlushModeType fromFlushBeforeQueries(int flush) {\n+        switch (flush) {\n+            case QueryFlushModes.FLUSH_TRUE:\n+                return FlushModeType.AUTO;\n+            case QueryFlushModes.FLUSH_FALSE:\n+                return FlushModeType.COMMIT;\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    /**\n+     * Translate a flush mode enum value to our internal flush constant.\n+     */\n+    static int toFlushBeforeQueries(FlushModeType flushMode) {\n+        // choose default for null\n+        if (flushMode == null)\n+            return QueryFlushModes.FLUSH_WITH_CONNECTION;\n+        if (flushMode == FlushModeType.AUTO)\n+            return QueryFlushModes.FLUSH_TRUE;\n+        if (flushMode == FlushModeType.COMMIT)\n+            return QueryFlushModes.FLUSH_FALSE;\n+        throw new ArgumentException(flushMode.toString(), null, null, false);\n+    }\n+\n+    public void clear() {\n+        assertNotCloseInvoked();\n+        _broker.detachAll(this, false);\n+    }\n+\n+    public Object getDelegate() {\n+        _broker.assertOpen();\n+        assertNotCloseInvoked();\n+        return this;\n+    }\n+\n+    public LockModeType getLockMode(Object entity) {\n+        assertNotCloseInvoked();\n+        return fromLockLevel(_broker.getLockLevel(entity));\n+    }\n+\n+    public void lock(Object entity, LockModeType mode) {\n+        assertNotCloseInvoked();\n+        _broker.lock(entity, toLockLevel(mode), -1, this);\n+    }\n+\n+    public void lock(Object entity) {\n+        assertNotCloseInvoked();\n+        _broker.lock(entity, this);\n+    }\n+\n+    public void lock(Object entity, LockModeType mode, int timeout) {\n+        assertNotCloseInvoked();\n+        _broker.lock(entity, toLockLevel(mode), timeout, this);\n+    }\n+\n+    public void lockAll(Collection entities) {\n+        assertNotCloseInvoked();\n+        _broker.lockAll(entities, this);\n+    }\n+\n+    public void lockAll(Collection entities, LockModeType mode, int timeout) {\n+        assertNotCloseInvoked();\n+        _broker.lockAll(entities, toLockLevel(mode), timeout, this);\n+    }\n+\n+    public void lockAll(Object... entities) {\n+        lockAll(Arrays.asList(entities));\n+    }\n+\n+    public void lockAll(Object[] entities, LockModeType mode, int timeout) {\n+        lockAll(Arrays.asList(entities), mode, timeout);\n+    }\n+\n+    /**\n+     * Translate our internal lock level to a javax.persistence enum value.\n+     */\n+    static LockModeType fromLockLevel(int level) {\n+        if (level < LockLevels.LOCK_READ)\n+            return null;\n+        if (level < LockLevels.LOCK_WRITE)\n+            return LockModeType.READ;\n+        return LockModeType.WRITE;\n+    }\n+\n+    /**\n+     * Translate the javax.persistence enum value to our internal lock level.\n+     */\n+    static int toLockLevel(LockModeType mode) {\n+        if (mode == null)\n+            return LockLevels.LOCK_NONE;\n+        if (mode == LockModeType.READ)\n+            return LockLevels.LOCK_READ;\n+        if (mode == LockModeType.WRITE)\n+            return LockLevels.LOCK_WRITE;\n+        throw new ArgumentException(mode.toString(), null, null, true);\n+    }\n+\n+    public boolean cancelAll() {\n+        return _broker.cancelAll();\n+    }\n+\n+    public Object getConnection() {\n+        return _broker.getConnection();\n+    }\n+\n+    public Collection getManagedObjects() {\n+        return _broker.getManagedObjects();\n+    }\n+\n+    public Collection getTransactionalObjects() {\n+        return _broker.getTransactionalObjects();\n+    }\n+\n+    public Collection getPendingTransactionalObjects() {\n+        return _broker.getPendingTransactionalObjects();\n+    }\n+\n+    public Collection getDirtyObjects() {\n+        return _broker.getDirtyObjects();\n+    }\n+\n+    public boolean getOrderDirtyObjects() {\n+        return _broker.getOrderDirtyObjects();\n+    }\n+\n+    public void setOrderDirtyObjects(boolean order) {\n+        assertNotCloseInvoked();\n+        _broker.setOrderDirtyObjects(order);\n+    }\n+\n+    public void dirtyClass(Class cls) {\n+        assertNotCloseInvoked();\n+        _broker.dirtyType(cls);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<Class> getPersistedClasses() {\n+        return (Collection<Class>) _broker.getPersistedTypes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<Class> getUpdatedClasses() {\n+        return (Collection<Class>) _broker.getUpdatedTypes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Collection<Class> getRemovedClasses() {\n+        return (Collection<Class>) _broker.getDeletedTypes();\n+    }\n+\n+    public <T> T createInstance(Class<T> cls) {\n+        assertNotCloseInvoked();\n+        return (T) _broker.newInstance(cls);\n+    }\n+\n+    public void close() {\n+        assertNotCloseInvoked();\n+        _broker.close();\n+    }\n+\n+    public boolean isOpen() {\n+        return !_broker.isCloseInvoked();\n+    }\n+\n+    public void dirty(Object o, String field) {\n+        assertNotCloseInvoked();\n+        OpenJPAStateManager sm = _broker.getStateManager(o);\n+        try {\n+            if (sm != null)\n+                sm.dirty(field);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    public Object getObjectId(Object o) {\n+        assertNotCloseInvoked();\n+        return JPAFacadeHelper.fromOpenJPAObjectId(_broker.getObjectId(o));\n+    }\n+\n+    public boolean isDirty(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isDirty(o);\n+    }\n+\n+    public boolean isTransactional(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isTransactional(o);\n+    }\n+\n+    public boolean isPersistent(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isPersistent(o);\n+    }\n+\n+    public boolean isNewlyPersistent(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isNew(o);\n+    }\n+\n+    public boolean isRemoved(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.isDeleted(o);\n+    }\n+\n+    public boolean isDetached(Object entity) {\n+        assertNotCloseInvoked();\n+        return _broker.isDetached(entity);\n+    }\n+\n+    public Object getVersion(Object o) {\n+        assertNotCloseInvoked();\n+        return _broker.getVersion(o);\n+    }\n+\n+    /**\n+     * Throw appropriate exception if close has been invoked but the broker\n+     * is still open.  We test only for this because if the broker is already\n+     * closed, it will throw its own more informative exception when we \n+     * delegate the pending operation to it.\n+     */\n+    void assertNotCloseInvoked() {\n+        if (!_broker.isClosed() && _broker.isCloseInvoked())\n+            throw new InvalidStateException(_loc.get(\"close-invoked\"), null,\n+                null, true);\n+    }\n+\n+    ////////////////////////////////\n+    // FindCallbacks implementation\n+    ////////////////////////////////\n+\n+    public Object processArgument(Object arg) {\n+        return arg;\n+    }\n+\n+    public Object processReturn(Object oid, OpenJPAStateManager sm) {\n+        return (sm == null || sm.isDeleted()) ? null : sm.getManagedInstance();\n+    }\n+\n+    //////////////////////////////\n+    // OpCallbacks implementation\n+    //////////////////////////////\n+\n+    public int processArgument(int op, Object obj, OpenJPAStateManager sm) {\n+        switch (op) {\n+            case OP_DELETE:\n+                // cascade through non-persistent non-detached instances\n+                if (sm == null && !_broker.isDetached(obj))\n+                    return ACT_CASCADE;\n+                if (sm != null && !sm.isDetached() && !sm.isPersistent())\n+                    return ACT_CASCADE;\n+                // ignore deleted instances\n+                if (sm != null && sm.isDeleted())\n+                    return ACT_NONE;\n+                break;\n+            case OP_ATTACH:\n+                // die on removed\n+                if (sm != null && sm.isDeleted())\n+                    throw new UserException(_loc.get(\"removed\",\n+                        Exceptions.toString(obj))).setFailedObject(obj);\n+                // cascade through managed instances\n+                if (sm != null && !sm.isDetached())\n+                    return ACT_CASCADE;\n+                break;\n+            case OP_REFRESH:\n+                // die on unmanaged instances\n+                if (sm == null)\n+                    throw new UserException(_loc.get(\"not-managed\",\n+                        Exceptions.toString(obj))).setFailedObject(obj);\n+                break;\n+        }\n+        return ACT_RUN | ACT_CASCADE;\n+    }\n+\n+    public int hashCode() {\n+        return _broker.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof EntityManagerImpl))\n+            return false;\n+        return _broker.equals(((EntityManagerImpl) other)._broker);\n+    }\n+\n+    public void readExternal(ObjectInput in)\n+        throws IOException, ClassNotFoundException {\n+        try {\n+            ret = PersistenceExceptions.getRollbackTranslator(this);\n+\n+            // this assumes that serialized Brokers are from something\n+            // that extends AbstractBrokerFactory.\n+            Object factoryKey = in.readObject();\n+            AbstractBrokerFactory factory =\n+                AbstractBrokerFactory.getPooledFactoryForKey(factoryKey);\n+            byte[] brokerBytes = (byte[]) in.readObject();\n+            ObjectInputStream innerIn = new BrokerBytesInputStream(brokerBytes,\n+                factory.getConfiguration());\n+\n+            Broker broker = (Broker) innerIn.readObject();\n+            EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\n+                JPAFacadeHelper.toEntityManagerFactory(\n+                    broker.getBrokerFactory());\n+            broker.putUserObject(JPAFacadeHelper.EM_KEY, this);\n+            initialize(emf, broker);\n+        } catch (RuntimeException re) {\n+            try {\n+                re = ret.translate(re);\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+            throw re;\n+        }\n+    }\n+\n+    public void writeExternal(ObjectOutput out) throws IOException {\n+        try {\n+            // this requires that only AbstractBrokerFactory-sourced\n+            // brokers can be serialized\n+            Object factoryKey = ((AbstractBrokerFactory) _broker\n+                .getBrokerFactory()).getPoolKey();\n+            out.writeObject(factoryKey);\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            ObjectOutputStream innerOut = new ObjectOutputStream(baos);\n+            innerOut.writeObject(_broker.getDelegate());\n+            innerOut.flush();\n+            out.writeObject(baos.toByteArray());\n+        } catch (RuntimeException re) {\n+            try {\n+                re = ret.translate(re);\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+            throw re;\n+        }\n+    }\n+\n+    private static class BrokerBytesInputStream extends ObjectInputStream {\n+\n+        private OpenJPAConfiguration conf;\n+\n+        BrokerBytesInputStream(byte[] bytes, OpenJPAConfiguration conf)\n+            throws IOException {\n+            super(new ByteArrayInputStream(bytes));\n+            if (conf == null)\n+                throw new IllegalArgumentException(\n+                    \"Illegal null argument to ObjectInputStreamWithLoader\");\n+            this.conf = conf;\n+        }\n+\n+        /**\n+         * Make a primitive array class\n+         */\n+        private Class primitiveType(char type) {\n+            switch (type) {\n+                case 'B': return byte.class;\n+                case 'C': return char.class;\n+                case 'D': return double.class;\n+                case 'F': return float.class;\n+                case 'I': return int.class;\n+                case 'J': return long.class;\n+                case 'S': return short.class;\n+                case 'Z': return boolean.class;\n+                default: return null;\n+            }\n+        }\n+\n+        protected Class resolveClass(ObjectStreamClass classDesc)\n+            throws IOException, ClassNotFoundException {\n+\n+            String cname = classDesc.getName();\n+            if (cname.startsWith(\"[\")) {\n+                // An array\n+                Class component;\t\t// component class\n+                int dcount;\t\t\t    // dimension\n+                for (dcount=1; cname.charAt(dcount)=='['; dcount++) ;\n+                if (cname.charAt(dcount) == 'L') {\n+                    component = lookupClass(cname.substring(dcount+1,\n+                        cname.length()-1));\n+                } else {\n+                    if (cname.length() != dcount+1) {\n+                        throw new ClassNotFoundException(cname);// malformed\n+                    }\n+                    component = primitiveType(cname.charAt(dcount));\n+                }\n+                int dim[] = new int[dcount];\n+                for (int i=0; i<dcount; i++) {\n+                    dim[i]=0;\n+                }\n+                return Array.newInstance(component, dim).getClass();\n+            } else {\n+                return lookupClass(cname);\n+            }\n+        }\n+\n+        /**\n+         * If this is a generated subclass, look up the corresponding Class\n+         * object via metadata.\n+         */\n+        private Class lookupClass(String className)\n+            throws ClassNotFoundException {\n+            try {\n+                return Class.forName(className);\n+            } catch (ClassNotFoundException e) {\n+                if (PCEnhancer.isPCSubclassName(className)) {\n+                    String superName = PCEnhancer.toManagedTypeName(className);\n+                    ClassMetaData[] metas = conf.getMetaDataRepositoryInstance()\n+                        .getMetaDatas();\n+                    for (int i = 0; i < metas.length; i++) {\n+                        if (superName.equals(\n+                            metas[i].getDescribedType().getName())) {\n+                            return PCRegistry.getPCType(\n+                                metas[i].getDescribedType());\n+                        }\n+                    }\n+\n+                    // if it's not found, try to look for it anyways\n+                    return Class.forName(className);\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+    }\n+}"},{"sha":"7351e34b53ec73078c3b5b8dea3b0e922c8955f2","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","status":"modified","additions":319,"deletions":319,"changes":638,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/JPAFacadeHelper.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,319 +1,319 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.math.BigDecimal;\r\n-import java.math.BigInteger;\r\n-import java.util.ArrayList;\r\n-import java.util.Collection;\r\n-import java.util.Iterator;\r\n-import javax.persistence.EntityManager;\r\n-import javax.persistence.EntityManagerFactory;\r\n-\r\n-import org.apache.openjpa.kernel.Broker;\r\n-import org.apache.openjpa.kernel.BrokerFactory;\r\n-import org.apache.openjpa.meta.ClassMetaData;\r\n-import org.apache.openjpa.util.BigDecimalId;\r\n-import org.apache.openjpa.util.BigIntegerId;\r\n-import org.apache.openjpa.util.ByteId;\r\n-import org.apache.openjpa.util.CharId;\r\n-import org.apache.openjpa.util.DoubleId;\r\n-import org.apache.openjpa.util.FloatId;\r\n-import org.apache.openjpa.util.Id;\r\n-import org.apache.openjpa.util.ImplHelper;\r\n-import org.apache.openjpa.util.IntId;\r\n-import org.apache.openjpa.util.LongId;\r\n-import org.apache.openjpa.util.ObjectId;\r\n-import org.apache.openjpa.util.OpenJPAId;\r\n-import org.apache.openjpa.util.ShortId;\r\n-import org.apache.openjpa.util.StringId;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-\r\n-/**\r\n- * Helper class for switching between OpenJPA's JPA facade and the underlying\r\n- * Broker kernel.\r\n- *\r\n- * @since 1.0.0\r\n- * @nojavadoc\r\n- */\r\n-public class JPAFacadeHelper {\r\n-\r\n-    public static final String EM_KEY =\r\n-        \"org.apache.openjpa.persistence.EntityManager\";\r\n-    public static final String EMF_KEY =\r\n-        \"org.apache.openjpa.persistence.EntityManagerFactory\";\r\n-\r\n-    private static final Localizer _loc =\r\n-        Localizer.forPackage(JPAFacadeHelper.class);\r\n-\r\n-    public static OpenJPAEntityManagerFactory toEntityManagerFactory(\r\n-        BrokerFactory factory) {\r\n-        if (factory == null)\r\n-            return null;\r\n-\r\n-        factory.lock();\r\n-        try {\r\n-            OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\r\n-                factory.getUserObject(EMF_KEY);\r\n-            if (emf == null) {\r\n-                emf = EntityManagerFactoryValue.newFactory(factory);\r\n-                factory.putUserObject(EMF_KEY, emf);\r\n-            }\r\n-            return emf;\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        } finally {\r\n-            factory.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the underlying broker factory for the given persistence manager\r\n-     * factory facade.\r\n-     */\r\n-    public static BrokerFactory toBrokerFactory(EntityManagerFactory emf) {\r\n-        if (emf == null)\r\n-            return null;\r\n-        if (!(emf instanceof EntityManagerFactoryImpl)) {\r\n-            Class c = emf.getClass();\r\n-            try {\r\n-                // either cast here may fail\r\n-                emf = (EntityManagerFactoryImpl) ((OpenJPAEntityManagerFactory)\r\n-                    emf).getUserObject(EMF_KEY);\r\n-            } catch (ClassCastException cce) {\r\n-                throw new ArgumentException(_loc.get(\r\n-                    \"cant-convert-brokerfactory\", c), null, null, false);\r\n-            }\r\n-        }\r\n-        return ((EntityManagerFactoryImpl) emf).getBrokerFactory();\r\n-    }\r\n-\r\n-    /**\r\n-     * Return a persistence manager facade to the given broker retaining\r\n-     * previously associated persistence context type.\r\n-     */\r\n-    public static OpenJPAEntityManager toEntityManager(Broker broker) {\r\n-        if (broker == null)\r\n-            return null;\r\n-\r\n-        broker.lock();\r\n-        try {\r\n-            OpenJPAEntityManager em = (OpenJPAEntityManager)\r\n-                broker.getUserObject(EM_KEY);\r\n-            if (em == null) {\r\n-                EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\r\n-                    toEntityManagerFactory(broker.getBrokerFactory());\r\n-                em = emf.newEntityManagerImpl(broker);\r\n-                broker.putUserObject(EM_KEY, em);\r\n-            }\r\n-            return em;\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        } finally {\r\n-            broker.unlock();\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Return the underlying broker for the given entity manager facade.\r\n-     */\r\n-    public static Broker toBroker(EntityManager em) {\r\n-        if (em == null)\r\n-            return null;\r\n-        if (!(em instanceof EntityManagerImpl)) {\r\n-            Class c = em.getClass();\r\n-            try {\r\n-                // either cast here may fail\r\n-                em = (EntityManagerImpl) ((OpenJPAEntityManager) em).\r\n-                    getUserObject(EM_KEY);\r\n-            } catch (ClassCastException cce) {\r\n-                throw new ArgumentException(_loc.get(\"cant-convert-broker\", c),\r\n-                    new Throwable[] { cce }, null, false);\r\n-            }\r\n-        }\r\n-        return ((EntityManagerImpl) em).getBroker();\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated with the\r\n-     * persistent object <code>o</code>.\r\n-     */\r\n-    public static ClassMetaData getMetaData(Object o) {\r\n-        if (o == null)\r\n-            return null;\r\n-        EntityManager em = OpenJPAPersistence.getEntityManager(o);\r\n-        return (em == null) ? null : getMetaData(em,\r\n-            ImplHelper.getManagedInstance(o).getClass());\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n-     * with the persistent type <code>cls</code>.\r\n-     */\r\n-    public static ClassMetaData getMetaData(EntityManager em, Class cls) {\r\n-        if (em == null)\r\n-            throw new NullPointerException(\"em == null\");\r\n-\r\n-        OpenJPAEntityManagerSPI kem = (OpenJPAEntityManagerSPI)\r\n-            OpenJPAPersistence.cast(em);\r\n-        try {\r\n-            return kem.getConfiguration().getMetaDataRepositoryInstance().\r\n-                getMetaData(cls, kem.getClassLoader(), false);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\r\n-     * with the persistent type <code>cls</code>.\r\n-     */\r\n-    public static ClassMetaData getMetaData(EntityManagerFactory emf,\r\n-        Class cls) {\r\n-        if (emf == null)\r\n-            throw new NullPointerException(\"emf == null\");\r\n-\r\n-        OpenJPAEntityManagerFactorySPI emfSPI =\r\n-            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf);\r\n-        try {\r\n-            return emfSPI.getConfiguration().getMetaDataRepositoryInstance().\r\n-                getMetaData(cls, null, false);\r\n-        } catch (Exception e) {\r\n-            throw PersistenceExceptions.toPersistenceException(e);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate from a OpenJPA identity object to a Persistence one.\r\n-     */\r\n-    public static Object fromOpenJPAObjectId(Object oid) {\r\n-        if (oid instanceof OpenJPAId)\r\n-            return ((OpenJPAId) oid).getIdObject();\r\n-        return oid;\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate from a Persistence identity object to a OpenJPA one.\r\n-     */\r\n-    public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\r\n-        if (oid == null || meta == null)\r\n-            return null;\r\n-\r\n-        Class cls = meta.getDescribedType();\r\n-        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\r\n-            return new Id(cls, ((Number) oid).longValue());\r\n-\r\n-        if (oid instanceof Byte)\r\n-            return new ByteId(cls, (Byte) oid);\r\n-        if (oid instanceof Character)\r\n-            return new CharId(cls, (Character) oid);\r\n-        if (oid instanceof Double)\r\n-            return new DoubleId(cls, (Double) oid);\r\n-        if (oid instanceof Float)\r\n-            return new FloatId(cls, (Float) oid);\r\n-        if (oid instanceof Integer)\r\n-            return new IntId(cls, (Integer) oid);\r\n-        if (oid instanceof Long)\r\n-            return new LongId(cls, (Long) oid);\r\n-        if (oid instanceof Short)\r\n-            return new ShortId(cls, (Short) oid);\r\n-        if (oid instanceof String)\r\n-            return new StringId(cls, (String) oid);\r\n-        if (oid instanceof BigDecimal)\r\n-            return new BigDecimalId(cls, (BigDecimal) oid);\r\n-        if (oid instanceof BigInteger)\r\n-            return new BigIntegerId(cls, (BigInteger) oid);\r\n-        return new ObjectId(cls, oid);\r\n-    }\r\n-\r\n-    /**\r\n-     * Return an array of OpenJPA oids for the given native oid array.\r\n-     */\r\n-    public static Object[] toOpenJPAObjectIds(ClassMetaData meta,\r\n-        Object... oids) {\r\n-        if (oids == null || oids.length == 0)\r\n-            return oids;\r\n-\r\n-        // since the class if fixed for all oids, we can tell if we have to\r\n-        // translate the array based on whether the first oid needs translating\r\n-        Object oid = toOpenJPAObjectId(meta, oids[0]);\r\n-        if (oid == oids[0])\r\n-            return oids;\r\n-\r\n-        Object[] copy = new Object[oids.length];\r\n-        copy[0] = oid;\r\n-        for (int i = 1; i < oids.length; i++)\r\n-            copy[i] = toOpenJPAObjectId(meta, oids[i]);\r\n-        return copy;\r\n-    }\r\n-\r\n-    /**\r\n-     * Return a collection of OpenJPA oids for the given native oid collection.\r\n-     */\r\n-    public static Collection toOpenJPAObjectIds(ClassMetaData meta,\r\n-        Collection oids) {\r\n-        if (oids == null || oids.isEmpty())\r\n-            return oids;\r\n-\r\n-        // since the class if fixed for all oids, we can tell if we have to\r\n-        // translate the array based on whether the first oid needs translating\r\n-        Iterator itr = oids.iterator();\r\n-        Object orig = itr.next();\r\n-        Object oid = toOpenJPAObjectId(meta, orig);\r\n-        if (oid == orig)\r\n-            return oids;\r\n-\r\n-        Collection copy = new ArrayList(oids.size());\r\n-        copy.add(oid);\r\n-        while (itr.hasNext())\r\n-            copy.add(toOpenJPAObjectId(meta, itr.next()));\r\n-        return copy;\r\n-    }\r\n-\r\n-    /**\r\n-     * Translate from a OpenJPA identity class to a native one.\r\n-     */\r\n-    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\r\n-        if (oidClass == null)\r\n-            return null;\r\n-        if (oidClass == Id.class)\r\n-            return Long.class;\r\n-        if (oidClass == ByteId.class)\r\n-            return Byte.class;\r\n-        if (oidClass == CharId.class)\r\n-            return Character.class;\r\n-        if (oidClass == DoubleId.class)\r\n-            return Double.class;\r\n-        if (oidClass == FloatId.class)\r\n-            return Float.class;\r\n-        if (oidClass == IntId.class)\r\n-            return Integer.class;\r\n-        if (oidClass == LongId.class)\r\n-            return Long.class;\r\n-        if (oidClass == ShortId.class)\r\n-            return Short.class;\r\n-        if (oidClass == StringId.class)\r\n-            return String.class;\r\n-        if (oidClass == BigDecimalId.class)\r\n-            return BigDecimal.class;\r\n-        if (oidClass == BigIntegerId.class)\r\n-            return BigInteger.class;\r\n-        return oidClass;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+\n+import org.apache.openjpa.kernel.Broker;\n+import org.apache.openjpa.kernel.BrokerFactory;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.util.BigDecimalId;\n+import org.apache.openjpa.util.BigIntegerId;\n+import org.apache.openjpa.util.ByteId;\n+import org.apache.openjpa.util.CharId;\n+import org.apache.openjpa.util.DoubleId;\n+import org.apache.openjpa.util.FloatId;\n+import org.apache.openjpa.util.Id;\n+import org.apache.openjpa.util.ImplHelper;\n+import org.apache.openjpa.util.IntId;\n+import org.apache.openjpa.util.LongId;\n+import org.apache.openjpa.util.ObjectId;\n+import org.apache.openjpa.util.OpenJPAId;\n+import org.apache.openjpa.util.ShortId;\n+import org.apache.openjpa.util.StringId;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Helper class for switching between OpenJPA's JPA facade and the underlying\n+ * Broker kernel.\n+ *\n+ * @since 1.0.0\n+ * @nojavadoc\n+ */\n+public class JPAFacadeHelper {\n+\n+    public static final String EM_KEY =\n+        \"org.apache.openjpa.persistence.EntityManager\";\n+    public static final String EMF_KEY =\n+        \"org.apache.openjpa.persistence.EntityManagerFactory\";\n+\n+    private static final Localizer _loc =\n+        Localizer.forPackage(JPAFacadeHelper.class);\n+\n+    public static OpenJPAEntityManagerFactory toEntityManagerFactory(\n+        BrokerFactory factory) {\n+        if (factory == null)\n+            return null;\n+\n+        factory.lock();\n+        try {\n+            OpenJPAEntityManagerFactory emf = (OpenJPAEntityManagerFactory)\n+                factory.getUserObject(EMF_KEY);\n+            if (emf == null) {\n+                emf = EntityManagerFactoryValue.newFactory(factory);\n+                factory.putUserObject(EMF_KEY, emf);\n+            }\n+            return emf;\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        } finally {\n+            factory.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Return the underlying broker factory for the given persistence manager\n+     * factory facade.\n+     */\n+    public static BrokerFactory toBrokerFactory(EntityManagerFactory emf) {\n+        if (emf == null)\n+            return null;\n+        if (!(emf instanceof EntityManagerFactoryImpl)) {\n+            Class c = emf.getClass();\n+            try {\n+                // either cast here may fail\n+                emf = (EntityManagerFactoryImpl) ((OpenJPAEntityManagerFactory)\n+                    emf).getUserObject(EMF_KEY);\n+            } catch (ClassCastException cce) {\n+                throw new ArgumentException(_loc.get(\n+                    \"cant-convert-brokerfactory\", c), null, null, false);\n+            }\n+        }\n+        return ((EntityManagerFactoryImpl) emf).getBrokerFactory();\n+    }\n+\n+    /**\n+     * Return a persistence manager facade to the given broker retaining\n+     * previously associated persistence context type.\n+     */\n+    public static OpenJPAEntityManager toEntityManager(Broker broker) {\n+        if (broker == null)\n+            return null;\n+\n+        broker.lock();\n+        try {\n+            OpenJPAEntityManager em = (OpenJPAEntityManager)\n+                broker.getUserObject(EM_KEY);\n+            if (em == null) {\n+                EntityManagerFactoryImpl emf = (EntityManagerFactoryImpl)\n+                    toEntityManagerFactory(broker.getBrokerFactory());\n+                em = emf.newEntityManagerImpl(broker);\n+                broker.putUserObject(EM_KEY, em);\n+            }\n+            return em;\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        } finally {\n+            broker.unlock();\n+        }\n+    }\n+\n+    /**\n+     * Return the underlying broker for the given entity manager facade.\n+     */\n+    public static Broker toBroker(EntityManager em) {\n+        if (em == null)\n+            return null;\n+        if (!(em instanceof EntityManagerImpl)) {\n+            Class c = em.getClass();\n+            try {\n+                // either cast here may fail\n+                em = (EntityManagerImpl) ((OpenJPAEntityManager) em).\n+                    getUserObject(EM_KEY);\n+            } catch (ClassCastException cce) {\n+                throw new ArgumentException(_loc.get(\"cant-convert-broker\", c),\n+                    new Throwable[] { cce }, null, false);\n+            }\n+        }\n+        return ((EntityManagerImpl) em).getBroker();\n+    }\n+\n+    /**\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated with the\n+     * persistent object <code>o</code>.\n+     */\n+    public static ClassMetaData getMetaData(Object o) {\n+        if (o == null)\n+            return null;\n+        EntityManager em = OpenJPAPersistence.getEntityManager(o);\n+        return (em == null) ? null : getMetaData(em,\n+            ImplHelper.getManagedInstance(o).getClass());\n+    }\n+\n+    /**\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\n+     * with the persistent type <code>cls</code>.\n+     */\n+    public static ClassMetaData getMetaData(EntityManager em, Class cls) {\n+        if (em == null)\n+            throw new NullPointerException(\"em == null\");\n+\n+        OpenJPAEntityManagerSPI kem = (OpenJPAEntityManagerSPI)\n+            OpenJPAPersistence.cast(em);\n+        try {\n+            return kem.getConfiguration().getMetaDataRepositoryInstance().\n+                getMetaData(cls, kem.getClassLoader(), false);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * Returns the {@link org.apache.openjpa.meta.ClassMetaData} associated\n+     * with the persistent type <code>cls</code>.\n+     */\n+    public static ClassMetaData getMetaData(EntityManagerFactory emf,\n+        Class cls) {\n+        if (emf == null)\n+            throw new NullPointerException(\"emf == null\");\n+\n+        OpenJPAEntityManagerFactorySPI emfSPI =\n+            (OpenJPAEntityManagerFactorySPI) OpenJPAPersistence.cast(emf);\n+        try {\n+            return emfSPI.getConfiguration().getMetaDataRepositoryInstance().\n+                getMetaData(cls, null, false);\n+        } catch (Exception e) {\n+            throw PersistenceExceptions.toPersistenceException(e);\n+        }\n+    }\n+\n+    /**\n+     * Translate from a OpenJPA identity object to a Persistence one.\n+     */\n+    public static Object fromOpenJPAObjectId(Object oid) {\n+        if (oid instanceof OpenJPAId)\n+            return ((OpenJPAId) oid).getIdObject();\n+        return oid;\n+    }\n+\n+    /**\n+     * Translate from a Persistence identity object to a OpenJPA one.\n+     */\n+    public static Object toOpenJPAObjectId(ClassMetaData meta, Object oid) {\n+        if (oid == null || meta == null)\n+            return null;\n+\n+        Class cls = meta.getDescribedType();\n+        if (meta.getIdentityType() == ClassMetaData.ID_DATASTORE)\n+            return new Id(cls, ((Number) oid).longValue());\n+\n+        if (oid instanceof Byte)\n+            return new ByteId(cls, (Byte) oid);\n+        if (oid instanceof Character)\n+            return new CharId(cls, (Character) oid);\n+        if (oid instanceof Double)\n+            return new DoubleId(cls, (Double) oid);\n+        if (oid instanceof Float)\n+            return new FloatId(cls, (Float) oid);\n+        if (oid instanceof Integer)\n+            return new IntId(cls, (Integer) oid);\n+        if (oid instanceof Long)\n+            return new LongId(cls, (Long) oid);\n+        if (oid instanceof Short)\n+            return new ShortId(cls, (Short) oid);\n+        if (oid instanceof String)\n+            return new StringId(cls, (String) oid);\n+        if (oid instanceof BigDecimal)\n+            return new BigDecimalId(cls, (BigDecimal) oid);\n+        if (oid instanceof BigInteger)\n+            return new BigIntegerId(cls, (BigInteger) oid);\n+        return new ObjectId(cls, oid);\n+    }\n+\n+    /**\n+     * Return an array of OpenJPA oids for the given native oid array.\n+     */\n+    public static Object[] toOpenJPAObjectIds(ClassMetaData meta,\n+        Object... oids) {\n+        if (oids == null || oids.length == 0)\n+            return oids;\n+\n+        // since the class if fixed for all oids, we can tell if we have to\n+        // translate the array based on whether the first oid needs translating\n+        Object oid = toOpenJPAObjectId(meta, oids[0]);\n+        if (oid == oids[0])\n+            return oids;\n+\n+        Object[] copy = new Object[oids.length];\n+        copy[0] = oid;\n+        for (int i = 1; i < oids.length; i++)\n+            copy[i] = toOpenJPAObjectId(meta, oids[i]);\n+        return copy;\n+    }\n+\n+    /**\n+     * Return a collection of OpenJPA oids for the given native oid collection.\n+     */\n+    public static Collection toOpenJPAObjectIds(ClassMetaData meta,\n+        Collection oids) {\n+        if (oids == null || oids.isEmpty())\n+            return oids;\n+\n+        // since the class if fixed for all oids, we can tell if we have to\n+        // translate the array based on whether the first oid needs translating\n+        Iterator itr = oids.iterator();\n+        Object orig = itr.next();\n+        Object oid = toOpenJPAObjectId(meta, orig);\n+        if (oid == orig)\n+            return oids;\n+\n+        Collection copy = new ArrayList(oids.size());\n+        copy.add(oid);\n+        while (itr.hasNext())\n+            copy.add(toOpenJPAObjectId(meta, itr.next()));\n+        return copy;\n+    }\n+\n+    /**\n+     * Translate from a OpenJPA identity class to a native one.\n+     */\n+    public static Class fromOpenJPAObjectIdClass(Class oidClass) {\n+        if (oidClass == null)\n+            return null;\n+        if (oidClass == Id.class)\n+            return Long.class;\n+        if (oidClass == ByteId.class)\n+            return Byte.class;\n+        if (oidClass == CharId.class)\n+            return Character.class;\n+        if (oidClass == DoubleId.class)\n+            return Double.class;\n+        if (oidClass == FloatId.class)\n+            return Float.class;\n+        if (oidClass == IntId.class)\n+            return Integer.class;\n+        if (oidClass == LongId.class)\n+            return Long.class;\n+        if (oidClass == ShortId.class)\n+            return Short.class;\n+        if (oidClass == StringId.class)\n+            return String.class;\n+        if (oidClass == BigDecimalId.class)\n+            return BigDecimal.class;\n+        if (oidClass == BigIntegerId.class)\n+            return BigInteger.class;\n+        return oidClass;\n+\t}\n+}"},{"sha":"a5b7058f17db59e2a392c32c2e6d9bba0a66c9db","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerFactorySPI.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,71 +1,71 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-\r\n-public interface OpenJPAEntityManagerFactorySPI\r\n-    extends OpenJPAEntityManagerFactory {\r\n-\r\n-    /**\r\n-     * Register a listener for lifecycle-related events on the specified\r\n-     * classes. If the classes are null, all events will be propagated to\r\n-     * the listener. The listener will be passed on to all new entity\r\n-     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n-     * listener types.\r\n-     *\r\n-     * @since 0.3.3\r\n-     */\r\n-    public void addLifecycleListener(Object listener, Class... classes);\r\n-\r\n-    /**\r\n-     * Remove a listener for lifecycle-related events.\r\n-     *\r\n-     * @since 0.3.3\r\n-     */\r\n-    public void removeLifecycleListener (Object listener);\r\n-\r\n-    /**\r\n-     * Register a listener for transaction-related events on the specified\r\n-     * classes. The listener will be passed on to all new entity\r\n-     * managers. See the <code>org.apache.openjpa.event</code> package for\r\n-     * listener types.\r\n-     *\r\n-     * @since 1.0.0\r\n-     */\r\n-    public void addTransactionListener(Object listener);\r\n-\r\n-    /**\r\n-     * Remove a listener for transaction-related events.\r\n-     *\r\n-     * @since 1.0.0\r\n-     */\r\n-    public void removeTransactionListener (Object listener);\r\n-\r\n-    /**\r\n-     * Return the configuration for this factory.\r\n-     */\r\n-    public OpenJPAConfiguration getConfiguration();\r\n-\r\n-    public OpenJPAEntityManagerSPI createEntityManager();\r\n-\r\n-    public OpenJPAEntityManagerSPI createEntityManager(Map props);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+\n+public interface OpenJPAEntityManagerFactorySPI\n+    extends OpenJPAEntityManagerFactory {\n+\n+    /**\n+     * Register a listener for lifecycle-related events on the specified\n+     * classes. If the classes are null, all events will be propagated to\n+     * the listener. The listener will be passed on to all new entity\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\n+     * listener types.\n+     *\n+     * @since 0.3.3\n+     */\n+    public void addLifecycleListener(Object listener, Class... classes);\n+\n+    /**\n+     * Remove a listener for lifecycle-related events.\n+     *\n+     * @since 0.3.3\n+     */\n+    public void removeLifecycleListener (Object listener);\n+\n+    /**\n+     * Register a listener for transaction-related events on the specified\n+     * classes. The listener will be passed on to all new entity\n+     * managers. See the <code>org.apache.openjpa.event</code> package for\n+     * listener types.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * Remove a listener for transaction-related events.\n+     *\n+     * @since 1.0.0\n+     */\n+    public void removeTransactionListener (Object listener);\n+\n+    /**\n+     * Return the configuration for this factory.\n+     */\n+    public OpenJPAConfiguration getConfiguration();\n+\n+    public OpenJPAEntityManagerSPI createEntityManager();\n+\n+    public OpenJPAEntityManagerSPI createEntityManager(Map props);\n+}"},{"sha":"1a80ffc940a48226116439c785d8c3b48a9cbb44","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","status":"modified","additions":108,"deletions":108,"changes":216,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityManagerSPI.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,108 +1,108 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.ee.ManagedRuntime;\r\n-\r\n-public interface OpenJPAEntityManagerSPI\r\n-    extends OpenJPAEntityManager {\r\n-\r\n-    /**\r\n-     * Return the configuration associated with this entity manager.\r\n-     */\r\n-    public OpenJPAConfiguration getConfiguration();\r\n-\r\n-    /**\r\n-     * Return the managed runtime in use.\r\n-     */\r\n-    public ManagedRuntime getManagedRuntime();\r\n-\r\n-    //////////\r\n-    // Events\r\n-    //////////\r\n-\r\n-    /**\r\n-     * Register a listener for transaction-related events.\r\n-     */\r\n-    public void addTransactionListener(Object listener);\r\n-\r\n-    /**\r\n-     * Remove a listener for transaction-related events.\r\n-     */\r\n-    public void removeTransactionListener(Object listener);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling transaction listener\r\n-     * exceptions.\r\n-     *\r\n-     * @since 1.1.0\r\n-     */\r\n-    public EnumSet<CallbackMode> getTransactionListenerCallbackModes();\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flag for handling transaction listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setTransactionListenerCallbackMode(CallbackMode mode);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling transaction listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n-\r\n-    /**\r\n-     * Register a listener for lifecycle-related events on the specified\r\n-     * classes. If the classes are null, all events will be propagated to\r\n-     * the listener.\r\n-     */\r\n-    public void addLifecycleListener(Object listener, Class... classes);\r\n-\r\n-    /**\r\n-     * Remove a listener for lifecycle-related events.\r\n-     */\r\n-    public void removeLifecycleListener(Object listener);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling lifecycle listener\r\n-     * exceptions.\r\n-     *\r\n-     * @since 1.1.0\r\n-     */\r\n-    public EnumSet<CallbackMode> getLifecycleListenerCallbackModes();\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flag for handling lifecycle listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setLifecycleListenerCallbackMode(CallbackMode mode);\r\n-\r\n-    /**\r\n-     * The {@link CallbackMode} flags for handling lifecycle listener\r\n-     * exceptions. The flags provided here will entirely replace the\r\n-     * previous settings.\r\n-     */\r\n-    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.ee.ManagedRuntime;\n+\n+public interface OpenJPAEntityManagerSPI\n+    extends OpenJPAEntityManager {\n+\n+    /**\n+     * Return the configuration associated with this entity manager.\n+     */\n+    public OpenJPAConfiguration getConfiguration();\n+\n+    /**\n+     * Return the managed runtime in use.\n+     */\n+    public ManagedRuntime getManagedRuntime();\n+\n+    //////////\n+    // Events\n+    //////////\n+\n+    /**\n+     * Register a listener for transaction-related events.\n+     */\n+    public void addTransactionListener(Object listener);\n+\n+    /**\n+     * Remove a listener for transaction-related events.\n+     */\n+    public void removeTransactionListener(Object listener);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling transaction listener\n+     * exceptions.\n+     *\n+     * @since 1.1.0\n+     */\n+    public EnumSet<CallbackMode> getTransactionListenerCallbackModes();\n+\n+    /**\n+     * The {@link CallbackMode} flag for handling transaction listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setTransactionListenerCallbackMode(CallbackMode mode);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling transaction listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setTransactionListenerCallbackMode(EnumSet<CallbackMode> modes);\n+\n+    /**\n+     * Register a listener for lifecycle-related events on the specified\n+     * classes. If the classes are null, all events will be propagated to\n+     * the listener.\n+     */\n+    public void addLifecycleListener(Object listener, Class... classes);\n+\n+    /**\n+     * Remove a listener for lifecycle-related events.\n+     */\n+    public void removeLifecycleListener(Object listener);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling lifecycle listener\n+     * exceptions.\n+     *\n+     * @since 1.1.0\n+     */\n+    public EnumSet<CallbackMode> getLifecycleListenerCallbackModes();\n+\n+    /**\n+     * The {@link CallbackMode} flag for handling lifecycle listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setLifecycleListenerCallbackMode(CallbackMode mode);\n+\n+    /**\n+     * The {@link CallbackMode} flags for handling lifecycle listener\n+     * exceptions. The flags provided here will entirely replace the\n+     * previous settings.\n+     */\n+    public void setLifecycleListenerCallbackMode(EnumSet<CallbackMode> modes);\n+}"},{"sha":"7b7cf8597f629ec6de030e6fe28b0134bcc6576b","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","status":"modified","additions":71,"deletions":71,"changes":142,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAEntityTransaction.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,71 +1,71 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import javax.persistence.EntityTransaction;\r\n-\r\n-/**\r\n- * Extension of the JPA {@link EntityTransaction} interface.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public interface OpenJPAEntityTransaction\r\n-    extends EntityTransaction {\r\n-\r\n-    /**\r\n-     * Issue a commit and then start a new transaction. This is identical to:\r\n-     * <pre> manager.commit (); manager.begin ();\r\n-     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n-     * so this method can be safely executed from multiple threads.\r\n-     *\r\n-     * @see javax.persistence.EntityTransaction#commit()\r\n-     * @see javax.persistence.EntityTransaction#begin()\r\n-     */\r\n-    public void commitAndResume();\r\n-\r\n-    /**\r\n-     * Issue a rollback and then start a new transaction. This is identical to:\r\n-     * <pre> manager.rollback (); manager.begin ();\r\n-     * </pre> except that the entity manager's internal atomic lock is utilized,\r\n-     * so this method can be safely executed from multiple threads.\r\n-     *\r\n-     * @see javax.persistence.EntityTransaction#rollback()\r\n-     * @see javax.persistence.EntityTransaction#begin()\r\n-     */\r\n-    public void rollbackAndResume();\r\n-\r\n-    /**\r\n-     * Mark the current transaction for rollback with the specified cause\r\n-     * of the rollback.\r\n-     *\r\n-     * @since 0.9.7\r\n-     */\r\n-    public void setRollbackOnly(Throwable cause);\r\n-\r\n-    /**\r\n-     * Returns the Throwable that caused the transaction to be\r\n-     * marked for rollback.\r\n-     *\r\n-     * @return the Throwable, or null if none was given\r\n-     *\r\n-     * @since 0.9.7\r\n-     */\r\n-    public Throwable getRollbackCause();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import javax.persistence.EntityTransaction;\n+\n+/**\n+ * Extension of the JPA {@link EntityTransaction} interface.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public interface OpenJPAEntityTransaction\n+    extends EntityTransaction {\n+\n+    /**\n+     * Issue a commit and then start a new transaction. This is identical to:\n+     * <pre> manager.commit (); manager.begin ();\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\n+     * so this method can be safely executed from multiple threads.\n+     *\n+     * @see javax.persistence.EntityTransaction#commit()\n+     * @see javax.persistence.EntityTransaction#begin()\n+     */\n+    public void commitAndResume();\n+\n+    /**\n+     * Issue a rollback and then start a new transaction. This is identical to:\n+     * <pre> manager.rollback (); manager.begin ();\n+     * </pre> except that the entity manager's internal atomic lock is utilized,\n+     * so this method can be safely executed from multiple threads.\n+     *\n+     * @see javax.persistence.EntityTransaction#rollback()\n+     * @see javax.persistence.EntityTransaction#begin()\n+     */\n+    public void rollbackAndResume();\n+\n+    /**\n+     * Mark the current transaction for rollback with the specified cause\n+     * of the rollback.\n+     *\n+     * @since 0.9.7\n+     */\n+    public void setRollbackOnly(Throwable cause);\n+\n+    /**\n+     * Returns the Throwable that caused the transaction to be\n+     * marked for rollback.\n+     *\n+     * @return the Throwable, or null if none was given\n+     *\n+     * @since 0.9.7\n+     */\n+    public Throwable getRollbackCause();\n+}"},{"sha":"bde8162b0cadca75840c5c38b8600653cf1eb54a","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","status":"modified","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/OpenJPAQuerySPI.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.exps.FilterListener;\r\n-import org.apache.openjpa.kernel.exps.AggregateListener;\r\n-\r\n-public interface OpenJPAQuerySPI\r\n-    extends OpenJPAQuery {\r\n-\r\n-    /**\r\n-     * Register a filter listener for the query.\r\n-     */\r\n-    public OpenJPAQuery addFilterListener(FilterListener listener);\r\n-\r\n-    /**\r\n-     * Remove a filter listener from the query.\r\n-     */\r\n-    public OpenJPAQuery removeFilterListener(FilterListener listener);\r\n-\r\n-    /**\r\n-     * Register an aggregate listener for the query.\r\n-     */\r\n-    public OpenJPAQuery addAggregateListener(AggregateListener listener);\r\n-\r\n-    /**\r\n-     * Remove an aggregate listener from the query.\r\n-     */\r\n-    public OpenJPAQuery removeAggregateListener(AggregateListener listener);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.exps.FilterListener;\n+import org.apache.openjpa.kernel.exps.AggregateListener;\n+\n+public interface OpenJPAQuerySPI\n+    extends OpenJPAQuery {\n+\n+    /**\n+     * Register a filter listener for the query.\n+     */\n+    public OpenJPAQuery addFilterListener(FilterListener listener);\n+\n+    /**\n+     * Remove a filter listener from the query.\n+     */\n+    public OpenJPAQuery removeFilterListener(FilterListener listener);\n+\n+    /**\n+     * Register an aggregate listener for the query.\n+     */\n+    public OpenJPAQuery addAggregateListener(AggregateListener listener);\n+\n+    /**\n+     * Remove an aggregate listener from the query.\n+     */\n+    public OpenJPAQuery removeAggregateListener(AggregateListener listener);\n+}"},{"sha":"953fe7c8c0d29e24c05890d45d09ddc14ab70079","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -20,24 +20,30 @@\n \n import java.lang.instrument.ClassFileTransformer;\n import java.lang.instrument.IllegalClassFormatException;\n+import java.security.AccessController;\n import java.security.ProtectionDomain;\n import java.util.Map;\n+\n import javax.persistence.EntityManager;\n import javax.persistence.spi.ClassTransformer;\n import javax.persistence.spi.PersistenceProvider;\n import javax.persistence.spi.PersistenceUnitInfo;\n \n import org.apache.openjpa.conf.BrokerValue;\n+import org.apache.openjpa.conf.MetaDataRepositoryValue;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.enhance.PCClassFileTransformer;\n+import org.apache.openjpa.kernel.AbstractBrokerFactory;\n import org.apache.openjpa.kernel.Bootstrap;\n import org.apache.openjpa.kernel.BrokerFactory;\n import org.apache.openjpa.lib.conf.Configuration;\n import org.apache.openjpa.lib.conf.ConfigurationProvider;\n import org.apache.openjpa.lib.conf.Configurations;\n import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.util.J2DoPrivHelper;\n import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n import org.apache.openjpa.meta.MetaDataModes;\n import org.apache.openjpa.meta.MetaDataRepository;\n import org.apache.openjpa.util.ClassResolver;\n@@ -79,6 +85,8 @@ public OpenJPAEntityManagerFactory createEntityManagerFactory(String name,\n                 return null;\n \n             BrokerFactory factory = getBrokerFactory(cp, poolValue, null);\n+            preloadMetaDataRepository(factory);\n+            \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -153,6 +161,7 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(\n                         _loc.get(\"transformer-registration-error\", pui));\n                 }\n             }\n+            preloadMetaDataRepository(factory);           \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -177,6 +186,30 @@ protected String getDefaultBrokerAlias() {\n     protected OpenJPAConfiguration newConfigurationImpl() {\n         return new OpenJPAConfigurationImpl();\n     }\n+\n+    /**\n+     * Private worker method that will call to the MetaDataRepository to preload if the provided\n+     * BrokerFactory is configured to do so.\n+     */\n+    private void preloadMetaDataRepository(BrokerFactory factory){\n+        // We need to wait to preload until after we get back a fully configured/instantiated\n+        // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n+        // functions and they need to be allowed time to configure themselves before we go off and\n+        // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+        // any exceptions here because we want to fail-fast.\n+        OpenJPAConfiguration conf = factory.getConfiguration();\n+        Options o = Configurations.parseProperties(Configurations.getProperties(conf.getMetaDataRepository()));\n+        if (MetaDataRepository.needsPreload(o) == true) {\n+            MetaDataRepository mdr = conf.getMetaDataRepositoryInstance(); \n+            mdr.setValidate(MetaDataRepository.VALIDATE_RUNTIME, true);\n+            mdr.setResolve(MetaDataRepository.MODE_MAPPING_INIT, true);\n+            \n+            // Load persistent classes and hook in subclasser\n+            ((AbstractBrokerFactory) factory).loadPersistentTypes((ClassLoader) AccessController\n+                .doPrivileged(J2DoPrivHelper.getContextClassLoaderAction()));\n+            mdr.preload();\n+        }\n+    }\n     \n     /**\n      * Java EE 5 class transformer."},{"sha":"a683f8d12b72876d0ce91f76135f511eeae890ec","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","status":"modified","additions":59,"deletions":59,"changes":118,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/QueryOperationType.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,59 +1,59 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.QueryOperations;\r\n-\r\n-/**\r\n- * The possible operations that a query can perform.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum QueryOperationType {\r\n-    SELECT(QueryOperations.OP_SELECT),\r\n-    DELETE(QueryOperations.OP_DELETE),\r\n-    UPDATE(QueryOperations.OP_UPDATE);\r\n-\r\n-    private final int queryOperationConstant;\r\n-\r\n-    private QueryOperationType(int value) {\r\n-        queryOperationConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return queryOperationConstant;\r\n-    }\r\n-\r\n-    static QueryOperationType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case QueryOperations.OP_SELECT:\r\n-                return SELECT;\r\n-\r\n-            case QueryOperations.OP_UPDATE:\r\n-                return UPDATE;\r\n-\r\n-            case QueryOperations.OP_DELETE:\r\n-                return DELETE;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.QueryOperations;\n+\n+/**\n+ * The possible operations that a query can perform.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum QueryOperationType {\n+    SELECT(QueryOperations.OP_SELECT),\n+    DELETE(QueryOperations.OP_DELETE),\n+    UPDATE(QueryOperations.OP_UPDATE);\n+\n+    private final int queryOperationConstant;\n+\n+    private QueryOperationType(int value) {\n+        queryOperationConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return queryOperationConstant;\n+    }\n+\n+    static QueryOperationType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case QueryOperations.OP_SELECT:\n+                return SELECT;\n+\n+            case QueryOperations.OP_UPDATE:\n+                return UPDATE;\n+\n+            case QueryOperations.OP_DELETE:\n+                return DELETE;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"f65439b9c4969ae1c68dc6e6aade5cf20979ffe8","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","status":"modified","additions":60,"deletions":60,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/RestoreStateType.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,60 +1,60 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import org.apache.openjpa.kernel.RestoreState;\r\n-\r\n-/**\r\n- * The possible settings for the restore behavior after transaction rollback\r\n- * of an {@link OpenJPAEntityManager}.\r\n- *\r\n- * @since 1.0.0\r\n- * @published\r\n- */\r\n-public enum RestoreStateType {\r\n-    NONE(RestoreState.RESTORE_NONE),\r\n-    IMMUTABLE(RestoreState.RESTORE_IMMUTABLE),\r\n-    ALL(RestoreState.RESTORE_ALL);\r\n-\r\n-    private final int restoreStateConstant;\r\n-\r\n-    private RestoreStateType(int value) {\r\n-        restoreStateConstant = value;\r\n-    }\r\n-\r\n-    int toKernelConstant() {\r\n-        return restoreStateConstant;\r\n-    }\r\n-\r\n-    static RestoreStateType fromKernelConstant(int kernelConstant) {\r\n-        switch (kernelConstant) {\r\n-            case RestoreState.RESTORE_NONE:\r\n-                return NONE;\r\n-\r\n-            case RestoreState.RESTORE_IMMUTABLE:\r\n-                return IMMUTABLE;\r\n-\r\n-            case RestoreState.RESTORE_ALL:\r\n-                return ALL;\r\n-\r\n-            default:\r\n-                throw new IllegalArgumentException(kernelConstant + \"\");\r\n-        }\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import org.apache.openjpa.kernel.RestoreState;\n+\n+/**\n+ * The possible settings for the restore behavior after transaction rollback\n+ * of an {@link OpenJPAEntityManager}.\n+ *\n+ * @since 1.0.0\n+ * @published\n+ */\n+public enum RestoreStateType {\n+    NONE(RestoreState.RESTORE_NONE),\n+    IMMUTABLE(RestoreState.RESTORE_IMMUTABLE),\n+    ALL(RestoreState.RESTORE_ALL);\n+\n+    private final int restoreStateConstant;\n+\n+    private RestoreStateType(int value) {\n+        restoreStateConstant = value;\n+    }\n+\n+    int toKernelConstant() {\n+        return restoreStateConstant;\n+    }\n+\n+    static RestoreStateType fromKernelConstant(int kernelConstant) {\n+        switch (kernelConstant) {\n+            case RestoreState.RESTORE_NONE:\n+                return NONE;\n+\n+            case RestoreState.RESTORE_IMMUTABLE:\n+                return IMMUTABLE;\n+\n+            case RestoreState.RESTORE_ALL:\n+                return ALL;\n+\n+            default:\n+                throw new IllegalArgumentException(kernelConstant + \"\");\n+        }\n+    }\n+}"},{"sha":"e467f0e010cba8309deb59c4e6f5acca3970944e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/XMLPersistenceMetaDataParser.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -786,6 +786,7 @@ protected boolean startClass(String elem, Attributes attrs)\n             String name = attrs.getValue(\"name\");\n             if (!StringUtils.isEmpty(name))\n                 meta.setTypeAlias(name);\n+            meta.setAbstract(mappedSuper);\n             meta.setEmbeddedOnly(mappedSuper || \"embeddable\".equals(elem));\n             if (mappedSuper)\n                 meta.setIdentityType(meta.ID_UNKNOWN);"},{"sha":"a98a9661bdf63e66e19a873b4ba321aa43d2e5ab","filename":"openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","status":"modified","additions":270,"deletions":270,"changes":540,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/test/java/org/apache/openjpa/persistence/TestEnumToKernelConstantMappings.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,270 +1,270 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package org.apache.openjpa.persistence;\r\n-\r\n-import java.util.EnumSet;\r\n-\r\n-import junit.framework.TestCase;\r\n-import org.apache.openjpa.kernel.ConnectionRetainModes;\r\n-import org.apache.openjpa.kernel.DetachState;\r\n-import org.apache.openjpa.kernel.RestoreState;\r\n-import org.apache.openjpa.kernel.AutoClear;\r\n-import org.apache.openjpa.kernel.AutoDetach;\r\n-import org.apache.openjpa.kernel.QueryOperations;\r\n-import org.apache.openjpa.event.CallbackModes;\r\n-\r\n-public class TestEnumToKernelConstantMappings\r\n-    extends TestCase {\r\n-\r\n-    public void testConnectionRetainModes() {\r\n-        assertEquals(ConnectionRetainModes.CONN_RETAIN_ALWAYS,\r\n-            ConnectionRetainMode.ALWAYS.toKernelConstant());\r\n-        assertEquals(ConnectionRetainMode.ALWAYS,\r\n-            ConnectionRetainMode.fromKernelConstant(\r\n-                ConnectionRetainModes.CONN_RETAIN_ALWAYS));\r\n-        assertEquals(ConnectionRetainMode.ALWAYS.toKernelConstant(),\r\n-            ConnectionRetainMode.ALWAYS.ordinal());\r\n-\r\n-        assertEquals(ConnectionRetainModes.CONN_RETAIN_DEMAND,\r\n-            ConnectionRetainMode.ON_DEMAND.toKernelConstant());\r\n-        assertEquals(ConnectionRetainMode.ON_DEMAND,\r\n-            ConnectionRetainMode.fromKernelConstant(\r\n-                ConnectionRetainModes.CONN_RETAIN_DEMAND));\r\n-        assertEquals(ConnectionRetainMode.ON_DEMAND.toKernelConstant(),\r\n-            ConnectionRetainMode.ON_DEMAND.ordinal());\r\n-\r\n-        assertEquals(ConnectionRetainModes.CONN_RETAIN_TRANS,\r\n-            ConnectionRetainMode.TRANSACTION.toKernelConstant());\r\n-        assertEquals(ConnectionRetainMode.TRANSACTION,\r\n-            ConnectionRetainMode.fromKernelConstant(\r\n-                ConnectionRetainModes.CONN_RETAIN_TRANS));\r\n-        assertEquals(ConnectionRetainMode.TRANSACTION.toKernelConstant(),\r\n-            ConnectionRetainMode.TRANSACTION.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(ConnectionRetainModes.class),\r\n-            ConnectionRetainMode.values().length);\r\n-    }\r\n-\r\n-    public void testDetachState() {\r\n-        assertEquals(DetachState.DETACH_ALL,\r\n-            DetachStateType.ALL.toKernelConstant());\r\n-        assertEquals(DetachStateType.ALL,\r\n-            DetachStateType.fromKernelConstant(DetachState.DETACH_ALL));\r\n-        assertEquals(DetachStateType.ALL.toKernelConstant(),\r\n-            DetachStateType.ALL.ordinal());\r\n-\r\n-        assertEquals(DetachState.DETACH_FETCH_GROUPS,\r\n-            DetachStateType.FETCH_GROUPS.toKernelConstant());\r\n-        assertEquals(DetachStateType.FETCH_GROUPS,\r\n-            DetachStateType.fromKernelConstant(\r\n-                DetachState.DETACH_FETCH_GROUPS));\r\n-        assertEquals(DetachStateType.FETCH_GROUPS.toKernelConstant(),\r\n-            DetachStateType.FETCH_GROUPS.ordinal());\r\n-\r\n-        assertEquals(DetachState.DETACH_LOADED,\r\n-            DetachStateType.LOADED.toKernelConstant());\r\n-        assertEquals(DetachStateType.LOADED,\r\n-            DetachStateType.fromKernelConstant(DetachState.DETACH_LOADED));\r\n-        assertEquals(DetachStateType.LOADED.toKernelConstant(),\r\n-            DetachStateType.LOADED.ordinal());\r\n-\r\n-        // subtract 1 for DetachState.DETACH_FGS, which is deprecated\r\n-        assertEquals(getConstantCount(DetachState.class) - 1,\r\n-            DetachStateType.values().length);\r\n-    }\r\n-\r\n-    public void testRestoreState() {\r\n-        assertEquals(RestoreState.RESTORE_ALL,\r\n-            RestoreStateType.ALL.toKernelConstant());\r\n-        assertEquals(RestoreStateType.ALL,\r\n-            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_ALL));\r\n-        assertEquals(RestoreStateType.ALL.toKernelConstant(),\r\n-            RestoreStateType.ALL.ordinal());\r\n-\r\n-        assertEquals(RestoreState.RESTORE_IMMUTABLE,\r\n-            RestoreStateType.IMMUTABLE.toKernelConstant());\r\n-        assertEquals(RestoreStateType.IMMUTABLE,\r\n-            RestoreStateType.fromKernelConstant(\r\n-                RestoreState.RESTORE_IMMUTABLE));\r\n-        assertEquals(RestoreStateType.IMMUTABLE.toKernelConstant(),\r\n-            RestoreStateType.IMMUTABLE.ordinal());\r\n-\r\n-        assertEquals(RestoreState.RESTORE_NONE,\r\n-            RestoreStateType.NONE.toKernelConstant());\r\n-        assertEquals(RestoreStateType.NONE,\r\n-            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_NONE));\r\n-        assertEquals(RestoreStateType.NONE.toKernelConstant(),\r\n-            RestoreStateType.NONE.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(RestoreState.class),\r\n-            RestoreStateType.values().length);\r\n-    }\r\n-\r\n-    public void testAutoClear() {\r\n-        assertEquals(AutoClear.CLEAR_ALL, AutoClearType.ALL.toKernelConstant());\r\n-        assertEquals(AutoClearType.ALL,\r\n-            AutoClearType.fromKernelConstant(AutoClear.CLEAR_ALL));\r\n-        assertEquals(AutoClearType.ALL.toKernelConstant(),\r\n-            AutoClearType.ALL.ordinal());\r\n-\r\n-        assertEquals(AutoClear.CLEAR_DATASTORE,\r\n-            AutoClearType.DATASTORE.toKernelConstant());\r\n-        assertEquals(AutoClearType.DATASTORE,\r\n-            AutoClearType.fromKernelConstant(AutoClear.CLEAR_DATASTORE));\r\n-        assertEquals(AutoClearType.DATASTORE.toKernelConstant(),\r\n-            AutoClearType.DATASTORE.ordinal());\r\n-\r\n-        assertEquals(getConstantCount(AutoClear.class),\r\n-            AutoClearType.values().length);\r\n-    }\r\n-\r\n-    public void testAutoDetach() {\r\n-        assertEquals(getConstantCount(AutoDetach.class),\r\n-            AutoDetachType.values().length);\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.CLOSE),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_CLOSE));\r\n-        assertEquals(AutoDetach.DETACH_CLOSE,\r\n-            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.CLOSE)));\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.COMMIT),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_COMMIT));\r\n-        assertEquals(AutoDetach.DETACH_COMMIT,\r\n-            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.COMMIT)));\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_NONTXREAD));\r\n-        assertEquals(AutoDetach.DETACH_NONTXREAD,\r\n-            AutoDetachType.fromEnumSet(\r\n-                EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ)));\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.ROLLBACK),\r\n-            AutoDetachType.toEnumSet(AutoDetach.DETACH_ROLLBACK));\r\n-        assertEquals(AutoDetach.DETACH_ROLLBACK,\r\n-            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.ROLLBACK)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.of(AutoDetachType.CLOSE, AutoDetachType.COMMIT),\r\n-            AutoDetachType.toEnumSet(\r\n-                AutoDetach.DETACH_CLOSE | AutoDetach.DETACH_COMMIT));\r\n-        assertEquals(AutoDetach.DETACH_ROLLBACK | AutoDetach.DETACH_CLOSE,\r\n-            AutoDetachType.fromEnumSet(\r\n-                EnumSet.of(AutoDetachType.ROLLBACK, AutoDetachType.CLOSE)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.allOf(AutoDetachType.class),\r\n-            AutoDetachType.toEnumSet(\r\n-                AutoDetach.DETACH_CLOSE\r\n-                    | AutoDetach.DETACH_COMMIT\r\n-                    | AutoDetach.DETACH_NONTXREAD\r\n-                    | AutoDetach.DETACH_ROLLBACK));\r\n-        assertEquals(AutoDetach.DETACH_CLOSE\r\n-                    | AutoDetach.DETACH_COMMIT\r\n-                    | AutoDetach.DETACH_NONTXREAD\r\n-                    | AutoDetach.DETACH_ROLLBACK,\r\n-            AutoDetachType.fromEnumSet(EnumSet.allOf(AutoDetachType.class)));\r\n-    }\r\n-\r\n-    public void testCallbackMode() {\r\n-        assertEquals(getConstantCount(CallbackModes.class),\r\n-            CallbackMode.values().length);\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.FAIL_FAST),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\r\n-        assertEquals(CallbackModes.CALLBACK_FAIL_FAST,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.FAIL_FAST)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.IGNORE),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_IGNORE));\r\n-        assertEquals(CallbackModes.CALLBACK_IGNORE,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.IGNORE)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.LOG),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_LOG));\r\n-        assertEquals(CallbackModes.CALLBACK_LOG,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.LOG)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.RETHROW),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_RETHROW));\r\n-        assertEquals(CallbackModes.CALLBACK_RETHROW,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.RETHROW)));\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.ROLLBACK),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\r\n-        assertEquals(CallbackModes.CALLBACK_ROLLBACK,\r\n-            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.ROLLBACK)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE),\r\n-            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\r\n-                | CallbackModes.CALLBACK_IGNORE));\r\n-        assertEquals(\r\n-            CallbackModes.CALLBACK_ROLLBACK | CallbackModes.CALLBACK_IGNORE,\r\n-            CallbackMode.fromEnumSet(\r\n-                EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE)));\r\n-\r\n-\r\n-        assertEquals(EnumSet.allOf(CallbackMode.class),\r\n-            CallbackMode.toEnumSet(\r\n-                CallbackModes.CALLBACK_FAIL_FAST\r\n-                    | CallbackModes.CALLBACK_IGNORE\r\n-                    | CallbackModes.CALLBACK_LOG\r\n-                    | CallbackModes.CALLBACK_RETHROW\r\n-                    | CallbackModes.CALLBACK_ROLLBACK));\r\n-        assertEquals(CallbackModes.CALLBACK_FAIL_FAST\r\n-                    | CallbackModes.CALLBACK_IGNORE\r\n-                    | CallbackModes.CALLBACK_LOG\r\n-                    | CallbackModes.CALLBACK_RETHROW\r\n-                    | CallbackModes.CALLBACK_ROLLBACK,\r\n-            CallbackMode.fromEnumSet(EnumSet.allOf(CallbackMode.class)));\r\n-    }\r\n-\r\n-    public void testQueryOperationTypes() {\r\n-        assertEquals(QueryOperations.OP_SELECT,\r\n-            QueryOperationType.SELECT.toKernelConstant());\r\n-        assertEquals(QueryOperationType.SELECT,\r\n-            QueryOperationType.fromKernelConstant(\r\n-                QueryOperations.OP_SELECT));\r\n-        assertEquals(QueryOperationType.SELECT.toKernelConstant(),\r\n-            QueryOperationType.SELECT.ordinal() + 1);\r\n-\r\n-        assertEquals(QueryOperations.OP_UPDATE,\r\n-            QueryOperationType.UPDATE.toKernelConstant());\r\n-        assertEquals(QueryOperationType.UPDATE,\r\n-            QueryOperationType.fromKernelConstant(\r\n-                QueryOperations.OP_UPDATE));\r\n-        assertEquals(QueryOperationType.UPDATE.toKernelConstant(),\r\n-            QueryOperationType.UPDATE.ordinal() + 1);\r\n-\r\n-        assertEquals(QueryOperations.OP_DELETE,\r\n-            QueryOperationType.DELETE.toKernelConstant());\r\n-        assertEquals(QueryOperationType.DELETE,\r\n-            QueryOperationType.fromKernelConstant(\r\n-                QueryOperations.OP_DELETE));\r\n-        assertEquals(QueryOperationType.DELETE.toKernelConstant(),\r\n-            QueryOperationType.DELETE.ordinal() + 1);\r\n-\r\n-        assertEquals(getConstantCount(QueryOperations.class),\r\n-            QueryOperationType.values().length);\r\n-    }\r\n-\r\n-    private int getConstantCount(Class cls) {\r\n-        return cls.getDeclaredFields().length;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.openjpa.persistence;\n+\n+import java.util.EnumSet;\n+\n+import junit.framework.TestCase;\n+import org.apache.openjpa.kernel.ConnectionRetainModes;\n+import org.apache.openjpa.kernel.DetachState;\n+import org.apache.openjpa.kernel.RestoreState;\n+import org.apache.openjpa.kernel.AutoClear;\n+import org.apache.openjpa.kernel.AutoDetach;\n+import org.apache.openjpa.kernel.QueryOperations;\n+import org.apache.openjpa.event.CallbackModes;\n+\n+public class TestEnumToKernelConstantMappings\n+    extends TestCase {\n+\n+    public void testConnectionRetainModes() {\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_ALWAYS,\n+            ConnectionRetainMode.ALWAYS.toKernelConstant());\n+        assertEquals(ConnectionRetainMode.ALWAYS,\n+            ConnectionRetainMode.fromKernelConstant(\n+                ConnectionRetainModes.CONN_RETAIN_ALWAYS));\n+        assertEquals(ConnectionRetainMode.ALWAYS.toKernelConstant(),\n+            ConnectionRetainMode.ALWAYS.ordinal());\n+\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_DEMAND,\n+            ConnectionRetainMode.ON_DEMAND.toKernelConstant());\n+        assertEquals(ConnectionRetainMode.ON_DEMAND,\n+            ConnectionRetainMode.fromKernelConstant(\n+                ConnectionRetainModes.CONN_RETAIN_DEMAND));\n+        assertEquals(ConnectionRetainMode.ON_DEMAND.toKernelConstant(),\n+            ConnectionRetainMode.ON_DEMAND.ordinal());\n+\n+        assertEquals(ConnectionRetainModes.CONN_RETAIN_TRANS,\n+            ConnectionRetainMode.TRANSACTION.toKernelConstant());\n+        assertEquals(ConnectionRetainMode.TRANSACTION,\n+            ConnectionRetainMode.fromKernelConstant(\n+                ConnectionRetainModes.CONN_RETAIN_TRANS));\n+        assertEquals(ConnectionRetainMode.TRANSACTION.toKernelConstant(),\n+            ConnectionRetainMode.TRANSACTION.ordinal());\n+\n+        assertEquals(getConstantCount(ConnectionRetainModes.class),\n+            ConnectionRetainMode.values().length);\n+    }\n+\n+    public void testDetachState() {\n+        assertEquals(DetachState.DETACH_ALL,\n+            DetachStateType.ALL.toKernelConstant());\n+        assertEquals(DetachStateType.ALL,\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_ALL));\n+        assertEquals(DetachStateType.ALL.toKernelConstant(),\n+            DetachStateType.ALL.ordinal());\n+\n+        assertEquals(DetachState.DETACH_FETCH_GROUPS,\n+            DetachStateType.FETCH_GROUPS.toKernelConstant());\n+        assertEquals(DetachStateType.FETCH_GROUPS,\n+            DetachStateType.fromKernelConstant(\n+                DetachState.DETACH_FETCH_GROUPS));\n+        assertEquals(DetachStateType.FETCH_GROUPS.toKernelConstant(),\n+            DetachStateType.FETCH_GROUPS.ordinal());\n+\n+        assertEquals(DetachState.DETACH_LOADED,\n+            DetachStateType.LOADED.toKernelConstant());\n+        assertEquals(DetachStateType.LOADED,\n+            DetachStateType.fromKernelConstant(DetachState.DETACH_LOADED));\n+        assertEquals(DetachStateType.LOADED.toKernelConstant(),\n+            DetachStateType.LOADED.ordinal());\n+\n+        // subtract 1 for DetachState.DETACH_FGS, which is deprecated\n+        assertEquals(getConstantCount(DetachState.class) - 1,\n+            DetachStateType.values().length);\n+    }\n+\n+    public void testRestoreState() {\n+        assertEquals(RestoreState.RESTORE_ALL,\n+            RestoreStateType.ALL.toKernelConstant());\n+        assertEquals(RestoreStateType.ALL,\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_ALL));\n+        assertEquals(RestoreStateType.ALL.toKernelConstant(),\n+            RestoreStateType.ALL.ordinal());\n+\n+        assertEquals(RestoreState.RESTORE_IMMUTABLE,\n+            RestoreStateType.IMMUTABLE.toKernelConstant());\n+        assertEquals(RestoreStateType.IMMUTABLE,\n+            RestoreStateType.fromKernelConstant(\n+                RestoreState.RESTORE_IMMUTABLE));\n+        assertEquals(RestoreStateType.IMMUTABLE.toKernelConstant(),\n+            RestoreStateType.IMMUTABLE.ordinal());\n+\n+        assertEquals(RestoreState.RESTORE_NONE,\n+            RestoreStateType.NONE.toKernelConstant());\n+        assertEquals(RestoreStateType.NONE,\n+            RestoreStateType.fromKernelConstant(RestoreState.RESTORE_NONE));\n+        assertEquals(RestoreStateType.NONE.toKernelConstant(),\n+            RestoreStateType.NONE.ordinal());\n+\n+        assertEquals(getConstantCount(RestoreState.class),\n+            RestoreStateType.values().length);\n+    }\n+\n+    public void testAutoClear() {\n+        assertEquals(AutoClear.CLEAR_ALL, AutoClearType.ALL.toKernelConstant());\n+        assertEquals(AutoClearType.ALL,\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_ALL));\n+        assertEquals(AutoClearType.ALL.toKernelConstant(),\n+            AutoClearType.ALL.ordinal());\n+\n+        assertEquals(AutoClear.CLEAR_DATASTORE,\n+            AutoClearType.DATASTORE.toKernelConstant());\n+        assertEquals(AutoClearType.DATASTORE,\n+            AutoClearType.fromKernelConstant(AutoClear.CLEAR_DATASTORE));\n+        assertEquals(AutoClearType.DATASTORE.toKernelConstant(),\n+            AutoClearType.DATASTORE.ordinal());\n+\n+        assertEquals(getConstantCount(AutoClear.class),\n+            AutoClearType.values().length);\n+    }\n+\n+    public void testAutoDetach() {\n+        assertEquals(getConstantCount(AutoDetach.class),\n+            AutoDetachType.values().length);\n+\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_CLOSE));\n+        assertEquals(AutoDetach.DETACH_CLOSE,\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.CLOSE)));\n+\n+        assertEquals(EnumSet.of(AutoDetachType.COMMIT),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_COMMIT));\n+        assertEquals(AutoDetach.DETACH_COMMIT,\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.COMMIT)));\n+\n+        assertEquals(EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_NONTXREAD));\n+        assertEquals(AutoDetach.DETACH_NONTXREAD,\n+            AutoDetachType.fromEnumSet(\n+                EnumSet.of(AutoDetachType.NON_TRANSACTIONAL_READ)));\n+\n+        assertEquals(EnumSet.of(AutoDetachType.ROLLBACK),\n+            AutoDetachType.toEnumSet(AutoDetach.DETACH_ROLLBACK));\n+        assertEquals(AutoDetach.DETACH_ROLLBACK,\n+            AutoDetachType.fromEnumSet(EnumSet.of(AutoDetachType.ROLLBACK)));\n+\n+\n+        assertEquals(EnumSet.of(AutoDetachType.CLOSE, AutoDetachType.COMMIT),\n+            AutoDetachType.toEnumSet(\n+                AutoDetach.DETACH_CLOSE | AutoDetach.DETACH_COMMIT));\n+        assertEquals(AutoDetach.DETACH_ROLLBACK | AutoDetach.DETACH_CLOSE,\n+            AutoDetachType.fromEnumSet(\n+                EnumSet.of(AutoDetachType.ROLLBACK, AutoDetachType.CLOSE)));\n+\n+\n+        assertEquals(EnumSet.allOf(AutoDetachType.class),\n+            AutoDetachType.toEnumSet(\n+                AutoDetach.DETACH_CLOSE\n+                    | AutoDetach.DETACH_COMMIT\n+                    | AutoDetach.DETACH_NONTXREAD\n+                    | AutoDetach.DETACH_ROLLBACK));\n+        assertEquals(AutoDetach.DETACH_CLOSE\n+                    | AutoDetach.DETACH_COMMIT\n+                    | AutoDetach.DETACH_NONTXREAD\n+                    | AutoDetach.DETACH_ROLLBACK,\n+            AutoDetachType.fromEnumSet(EnumSet.allOf(AutoDetachType.class)));\n+    }\n+\n+    public void testCallbackMode() {\n+        assertEquals(getConstantCount(CallbackModes.class),\n+            CallbackMode.values().length);\n+\n+        assertEquals(EnumSet.of(CallbackMode.FAIL_FAST),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_FAIL_FAST));\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.FAIL_FAST)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.IGNORE),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_IGNORE));\n+        assertEquals(CallbackModes.CALLBACK_IGNORE,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.IGNORE)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.LOG),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_LOG));\n+        assertEquals(CallbackModes.CALLBACK_LOG,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.LOG)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.RETHROW),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_RETHROW));\n+        assertEquals(CallbackModes.CALLBACK_RETHROW,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.RETHROW)));\n+\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK));\n+        assertEquals(CallbackModes.CALLBACK_ROLLBACK,\n+            CallbackMode.fromEnumSet(EnumSet.of(CallbackMode.ROLLBACK)));\n+\n+\n+        assertEquals(EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE),\n+            CallbackMode.toEnumSet(CallbackModes.CALLBACK_ROLLBACK\n+                | CallbackModes.CALLBACK_IGNORE));\n+        assertEquals(\n+            CallbackModes.CALLBACK_ROLLBACK | CallbackModes.CALLBACK_IGNORE,\n+            CallbackMode.fromEnumSet(\n+                EnumSet.of(CallbackMode.ROLLBACK, CallbackMode.IGNORE)));\n+\n+\n+        assertEquals(EnumSet.allOf(CallbackMode.class),\n+            CallbackMode.toEnumSet(\n+                CallbackModes.CALLBACK_FAIL_FAST\n+                    | CallbackModes.CALLBACK_IGNORE\n+                    | CallbackModes.CALLBACK_LOG\n+                    | CallbackModes.CALLBACK_RETHROW\n+                    | CallbackModes.CALLBACK_ROLLBACK));\n+        assertEquals(CallbackModes.CALLBACK_FAIL_FAST\n+                    | CallbackModes.CALLBACK_IGNORE\n+                    | CallbackModes.CALLBACK_LOG\n+                    | CallbackModes.CALLBACK_RETHROW\n+                    | CallbackModes.CALLBACK_ROLLBACK,\n+            CallbackMode.fromEnumSet(EnumSet.allOf(CallbackMode.class)));\n+    }\n+\n+    public void testQueryOperationTypes() {\n+        assertEquals(QueryOperations.OP_SELECT,\n+            QueryOperationType.SELECT.toKernelConstant());\n+        assertEquals(QueryOperationType.SELECT,\n+            QueryOperationType.fromKernelConstant(\n+                QueryOperations.OP_SELECT));\n+        assertEquals(QueryOperationType.SELECT.toKernelConstant(),\n+            QueryOperationType.SELECT.ordinal() + 1);\n+\n+        assertEquals(QueryOperations.OP_UPDATE,\n+            QueryOperationType.UPDATE.toKernelConstant());\n+        assertEquals(QueryOperationType.UPDATE,\n+            QueryOperationType.fromKernelConstant(\n+                QueryOperations.OP_UPDATE));\n+        assertEquals(QueryOperationType.UPDATE.toKernelConstant(),\n+            QueryOperationType.UPDATE.ordinal() + 1);\n+\n+        assertEquals(QueryOperations.OP_DELETE,\n+            QueryOperationType.DELETE.toKernelConstant());\n+        assertEquals(QueryOperationType.DELETE,\n+            QueryOperationType.fromKernelConstant(\n+                QueryOperations.OP_DELETE));\n+        assertEquals(QueryOperationType.DELETE.toKernelConstant(),\n+            QueryOperationType.DELETE.ordinal() + 1);\n+\n+        assertEquals(getConstantCount(QueryOperations.class),\n+            QueryOperationType.values().length);\n+    }\n+\n+    private int getConstantCount(Class cls) {\n+        return cls.getDeclaredFields().length;\n+    }\n+}"},{"sha":"675782176b98a4c2af83a9ee93fc40a98115846a","filename":"openjpa-project/CHANGES.txt","status":"modified","additions":44,"deletions":76,"changes":120,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/CHANGES.txt","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/CHANGES.txt?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,20 +1,16 @@\n-                           Release Notes for OpenJPA 1.2.1\n+                           Release Notes for OpenJPA 1.2.2\n \n         * Overview\n         * License\n         * Prerequisites\n         * Documentation\n         * Getting Involved\n-        * Bugs\n-        * Improvements\n-        * New Features\n-        * Task\n-        * Test\n+        * JIRA Issues resolved\n \n Overview\n \n-   These notes describe the difference between OpenJPA release 1.2.1 and the\n-   preceding release: 1.2.0. \n+   These notes describe the difference between OpenJPA release 1.2.2 and the\n+   preceding release: 1.2.1. \n \n    OpenJPA is a feature-rich implementation of the persistence part of Java\n    Community Process JSR-220 (Enterprise JavaBeans 3.0), which is known as\n@@ -81,83 +77,55 @@ Getting Involved\n           freenode.net.\n         * Bugs and other issues can be posted on the project JIRA.\n \n-                          OpenJPA 1.2.1 Release Notes\n+    JIRA Issues Resolved in this release\n Sub-task\n \n-    * [OPENJPA-681] - Subquery generates SQL with syntax error\n-    * [OPENJPA-708] - sub-sub-query generates SQL with syntax error\n-    * [OPENJPA-744] - Extra SQL on LAZY/EAGER ManyToOne relation\n-    * [OPENJPA-765] - Check for insertable or updateable before checking value \n-                      for null\n-\n+    * [OPENJPA-1023] - Message files contain windows EOL characters\n+    * [OPENJPA-1210] - Specify derby timeouts via properties.\n Bug\n \n-    * [OPENJPA-646] - JDK problems with defineClass and enum class types\n-    * [OPENJPA-650] - Document openjpa.RuntimeUnenhancedClasses=unsupported/\n-                      warn configuration property\n-    * [OPENJPA-676] - Connection used for NativeSequences is not closed\n-    * [OPENJPA-679] - java.lang.ArrayIndexOutOfBoundsException may occur when\n-                      a relation field is annotated as a primary key and a foreign key\n-    * [OPENJPA-685] - Problem enhancing test cases with Maven 2.0.9\n-    * [OPENJPA-702] - MappingTool fails requires appropriate DESCSTAT parm \n-                      value on DB2 for z/OS\n-    * [OPENJPA-710] - Unordered collection field adds ORDER BY clause\n-    * [OPENJPA-711] - PDF manual lacks images\n-    * [OPENJPA-713] - openjpa-1.2.0.jar file is 11 MB\n-    * [OPENJPA-715] - OpenJpa does not generate IDs properly. \"duplicate key \n-                      value in a unique or primary key constraint\" while merging object tree.\n-    * [OPENJPA-719] - GeneralException in PCEnhancer during class transform in \n-                      Turkish locale AppServer setting\n-    * [OPENJPA-724] - Corrections for the manual\n-    * [OPENJPA-727] - Image mapping-table.png missing in HTML manual\n-    * [OPENJPA-731] - Bug on FetchType.EAGER when QuerySQLCache is turned on\n-    * [OPENJPA-733] - Entity contains pseudo-attached embeddable after detach\n-    * [OPENJPA-745] - Sybase by default silently truncates a string which is \n-                      longer than the column length without raising an exception\n-    * [OPENJPA-755] - OpenJPA thows EntityExistsException trying persist a\n-                      preexisting, detached entity\n-    * [OPENJPA-762] - Batch execution fails for Oracle when batch limit set to\n-                      -1 (unlimited batch size)\n-    * [OPENJPA-777] - Exception is thrown during retrieval of an entity which \n-                      contains a persistent collection of embeddable\n-    * [OPENJPA-811] - With Oracle, OpenJPA allows setting non-nullable field to null \n-    * [OPENJPA-835] - Loading nested toMany EAGER relation resuled in \n-                      PersistenceException\n-    * [OPENJPA-838] - fix parameter setting problem when QuerySQLCache is on\n-    * [OPENJPA-843] - Unnecessary version update on inverse-side of a 1-m \n-                      relationship\n-    * [OPENJPA-853] - Informix cursor not open problem if synchronizeMapping \n-                      set true\n-    * [OPENJPA-864] - Subquery problems with SYNTAX_DATABASE (Oracle)\n-    * [OPENJPA-872] - Compound custom id in bidirectional many-to-one\n-    * [OPENJPA-912] - Potential NPE in setInverseRelation\n-    * [OPENJPA-917] - stored procedures throw InvalidStateException when using \n-                      getSingleResult() or getResultList()\n-    * [OPENJPA-919] - JUnit for Bi-directional OneToOne with null relationships\n-    * [OPENJPA-925] - Bidirectional OneToOne relation incorrectly set in \n-                      loadEagerJoin\n+    * [OPENJPA-466] - Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app\n+    * [OPENJPA-714] - \"Encountered unmanaged object in persistent field\" error while merging object tree\n+    * [OPENJPA-732] - Updates to entities via Lifecycle callback methods\n+    * [OPENJPA-873] - @MappedSuperClass Cause Null Pointer Exception in Class With IdClass\n+    * [OPENJPA-896] - Several source files include Windows EoL chars\n+    * [OPENJPA-1025] - AbstractResultList.subList throws UnsupportedOperationException\n+    * [OPENJPA-1029] - SQLServerDictionary causes NumberFormatException if MS SQL Server JDBC driver is used\n+    * [OPENJPA-1061] - Entities extending from a Mapped Superclass that defines the ID fields share the same ObjectID type parameter\n+    * [OPENJPA-1067] - SetQueryTimeout(x) where x != 0 causes SQLException with DB2 on Z/OS\n+    * [OPENJPA-1141] - NPE at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1400)\n+    * [OPENJPA-1156] - Path length issues on Windows\n+    * [OPENJPA-1197] - NativeQueries fail with MySQL\n+    * [OPENJPA-1308] - shouldn't always use CAST with UPPER and LOWER for DB2\n+    * [OPENJPA-1326] - ReverseMappingTool and SchemaTool failing for Sybase\n+    * [OPENJPA-1328] - Move cacheable class configuration to ClassMetaData\n+    * [OPENJPA-1359] - SQLServer driver 2.0 works, but causes exception in SQLServerDictionary on the first connection\n+    * [OPENJPA-1384] - ClassNotFoundException for custom DBDictionary used by EJB\n+    * [OPENJPA-1397] - NULL in columns part of an @IdClass composite key leads to \"disappearing\" (null) returned objects\n+    * [OPENJPA-1400] - Unable to persist a relationship to a detached Entity\n+    * [OPENJPA-1421] - Reduce lock contention in JDBCStoreManager\n+    * [OPENJPA-1441] - NPE when enhancing a Serializable, versioned class\n+    * [OPENJPA-1457] - Remove Java.net maven repostiory from tck pom.xml\n \n Improvement\n \n-    * [OPENJPA-686] - Openjpa manual needs to be updated for database \n-                      restriction on BigDecimal field on Sybase\n-    * [OPENJPA-726] - Provide MD5Sums for latest downloads\n-    * [OPENJPA-742] - Add line number and column number to QueryMetaData\n-    * [OPENJPA-752] - ProxySetupStateManager.setProxyData routing through \n-                      PersistanceCapable caused \"PersistenceException: null\"\n-    * [OPENJPA-772] - Proper maven pluginManagement and use ianal-maven-plugin\n-                      for enforcing legal files\n-    * [OPENJPA-779] - patch for eclipse .project and .classpath files...\n-    * [OPENJPA-817] - Order of inserts lost when using ConstraintUpdateManager\n-    * [OPENJPA-876] - Better test profiles for proprietary databases (DB2, \n-                      Oracle) and continuous build\n-    * [OPENJPA-881] - Enable connection pooling for testcases.\n-    * [OPENJPA-901] - Use hosted JAI artifacts as the default for the docbook build\n+    * [OPENJPA-250] - Reduce synchronization bottlenecks in data cache, metadata repository, and lifecycle event manager\n+    * [OPENJPA-975] - Oracle needs ability to not have an escape character for search strings.\n+    * [OPENJPA-991] - Implement LockTimeout using db specific server-side lock timeout feature\n+    * [OPENJPA-1045] - Add opt-in and opt-out configuration for L2 DataCache\n+    * [OPENJPA-1136] - Add .gitignore for git users\n+    * [OPENJPA-1171] - Use StringBuilder instead of StringBuffer in SQLBuffer\n+    * [OPENJPA-1172] - Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n+    * [OPENJPA-1414] - Performance improvements for detach\n+    * [OPENJPA-1415] - Performance improvement by reduced logging of batched OLE\n+\n+Test\n+    * [OPENJPA-1071] - Derby test suit speed-up\n+    * [OPENJPA-1092] - enable test case for jpql\n \n Changes for previous releases\n \n-OpenJPA 1.2.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/CHANGES.txt?view=markup\n+OpenJPA 1.2.1 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.2.1/openjpa-project/CHANGES.txt?view=co\n \n-OpenJPA 1.1.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/CHANGES.txt?view=markup\n+OpenJPA 1.2.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.2.0/openjpa-project/CHANGES.txt?view=co\n \n-OpenJPA 1.0.0 Changes: http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/CHANGES.txt?view=markup"},{"sha":"267b38562e4ca9cd916fad600706e9b66670b8e6","filename":"openjpa-project/RELEASE-NOTES.html","status":"modified","additions":60,"deletions":78,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/RELEASE-NOTES.html","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/RELEASE-NOTES.html","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/RELEASE-NOTES.html?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,25 +1,22 @@\n <html>\n-<title>Release Notes for OpenJPA 1.2.1</title>\n+<title>Release Notes for OpenJPA 1.2.2</title>\n <body>\n-<h1>Release Notes for OpenJPA</h1>\n+<h1>Release Notes for OpenJPA 1.2.2</h1>\n \n <ul>\n <li><a href=\"#Overview\">Overview</a></li>\n <li><a href=\"#License\">License</a></li>\n <li><a href=\"#Prerequisites\">Prerequisites</a></li>\n <li><a href=\"#Documentation\">Documentation</a></li>\n <li><a href=\"#GetInvolved\">Getting Involved</a></li>\n-<li><a href=\"#Sub-task\">Sub-task</a></li>\n-<li><a href=\"#Bug\">Bug</a></li>\n-<li><a href=\"#Improvement\">Improvement</a></li>\n-<li><a href=\"#New Feature\">New Feature</a></li>\n+<li><a href=\"#JIRA\">JIRA Issues Resolved</a></li>\n <li><a href=\"#Previous\">RELEASE-NOTES for previous releases</a></li>\n </ul>\n \n <h2><a name=\"Overview\"></a>Overview</h2>\n \n-<p> These notes describe the difference between OpenJPA release 1.2.1\n-and the preceding release: 1.2.0.\n+<p> These notes describe the difference between OpenJPA release 1.2.2\n+and the preceding release: 1.2.1.\n <P>\n OpenJPA is a feature-rich implementation of the persistence part of \n Java Community Process JSR-220 (Enterprise JavaBeans 3.0), which is\n@@ -96,117 +93,102 @@ <h2><a name=\"GetInvolved\"></a>Getting Involved</h2>\n     <li> Bugs and other issues can be posted on the project JIRA. </li>\n </ul>\n \n+<h2><a name=\"JIRA\"</a>JIRA Issues Fixed in this release</h2>\n \n-        Release Notes - OpenJPA - Version 1.2.1.\n-    \n-<h2><a name='Sub-task'>        Sub-task\n-</h2>\n+<h3>        Sub-task\n+</h3>\n <ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-681'>OPENJPA-681</a>] -         Subquery generates SQL with syntax error\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-708'>OPENJPA-708</a>] -         sub-sub-query generates SQL with syntax error\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1023'>OPENJPA-1023</a>] -         Message files contain windows EOL characters\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-744'>OPENJPA-744</a>] -         Extra SQL on LAZY/EAGER  ManyToOne relation\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1210'>OPENJPA-1210</a>] -         Specify derby timeouts via properties.\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-765'>OPENJPA-765</a>] -         Check for insertable or updateable before checking value for null\n-</li>\n-</ul>    \n-\n-<h2><a name='Bug'>        Bug\n-</h2>\n+</ul>\n+    \n+<h3>        Bug\n+</h3>\n <ul>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-646'>OPENJPA-646</a>] -         JDK problems with defineClass and enum class types\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-650'>OPENJPA-650</a>] -         Document openjpa.RuntimeUnenhancedClasses=unsupported/warn configuration property\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-676'>OPENJPA-676</a>] -         Connection used for NativeSequences is not closed\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-679'>OPENJPA-679</a>] -         java.lang.ArrayIndexOutOfBoundsException may occur when a relation field is annotated as a primary key and a foreign key\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-685'>OPENJPA-685</a>] -         Problem enhancing test cases with Maven 2.0.9 \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-466'>OPENJPA-466</a>] -         Primary key constraint violated using (Oracle) sequence to generate ID in multithreaded app\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-702'>OPENJPA-702</a>] -         MappingTool fails requires appropriate DESCSTAT parm value on DB2 for z/OS\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-714'>OPENJPA-714</a>] -         &quot;Encountered unmanaged object in persistent field&quot; error while merging object tree\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-710'>OPENJPA-710</a>] -         Unordered collection field adds ORDER BY clause\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-732'>OPENJPA-732</a>] -         Updates to entities via Lifecycle callback methods \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-711'>OPENJPA-711</a>] -         PDF manual lacks images\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-873'>OPENJPA-873</a>] -         @MappedSuperClass Cause Null Pointer Exception in Class With IdClass\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-713'>OPENJPA-713</a>] -         openjpa-1.2.0.jar file is 11 MB\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-896'>OPENJPA-896</a>] -         Several source files include Windows EoL chars\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-715'>OPENJPA-715</a>] -         OpenJpa does not generate IDs properly. &quot;duplicate key value in a unique or primary key constraint&quot; while merging object tree.\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1025'>OPENJPA-1025</a>] -         AbstractResultList.subList throws UnsupportedOperationException\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-719'>OPENJPA-719</a>] -         GeneralException in PCEnhancer during class transform in Turkish locale AppServer setting\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1029'>OPENJPA-1029</a>] -         SQLServerDictionary causes NumberFormatException if MS SQL Server JDBC driver is used\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-724'>OPENJPA-724</a>] -         Corrections for the manual\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1061'>OPENJPA-1061</a>] -         Entities extending from a Mapped Superclass that defines the ID fields share the same ObjectID type parameter\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-727'>OPENJPA-727</a>] -         Image mapping-table.png missing in HTML manual\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1067'>OPENJPA-1067</a>] -         SetQueryTimeout(x) where x != 0 causes SQLException with DB2 on Z/OS\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-731'>OPENJPA-731</a>] -         Bug on FetchType.EAGER when QuerySQLCache is turned on\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1141'>OPENJPA-1141</a>] -         NPE  at org.apache.openjpa.jdbc.meta.MappingInfo.mergeJoinColumn(MappingInfo.java:1400)\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-733'>OPENJPA-733</a>] -         Entity contains pseudo-attached embeddable after detach\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1156'>OPENJPA-1156</a>] -         Path length issues on Windows \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-745'>OPENJPA-745</a>] -         Sybase by default silently truncates a string which is longer than the column length without raising an exception \n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1197'>OPENJPA-1197</a>] -         NativeQueries fail with MySQL \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-755'>OPENJPA-755</a>] -         OpenJPA thows EntityExistsException trying persist a preexisting, detached entity\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1308'>OPENJPA-1308</a>] -         shouldn't always use CAST with UPPER and LOWER for DB2\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-762'>OPENJPA-762</a>] -         Batch execution fails for Oracle when batch limit set to -1 (unlimited batch size)\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1326'>OPENJPA-1326</a>] -         ReverseMappingTool and SchemaTool failing for Sybase\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-777'>OPENJPA-777</a>] -         Exception is thrown during retrieval of an entity which contains a persistent collection of embeddable\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1328'>OPENJPA-1328</a>] -         Move cacheable class configuration to ClassMetaData\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-835'>OPENJPA-835</a>] -         Loading nested toMany EAGER relation resuled in PersistenceException\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1359'>OPENJPA-1359</a>] -         SQLServer driver 2.0 works, but causes exception in SQLServerDictionary on the first connection\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-811'>OPENJPA-811</a>] -         With Oracle, OpenJPA allows setting non-nullable field to null\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1384'>OPENJPA-1384</a>] -         ClassNotFoundException for custom DBDictionary used by EJB\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-838'>OPENJPA-838</a>] -         fix parameter setting problem when QuerySQLCache is on\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1397'>OPENJPA-1397</a>] -         NULL in columns part of an @IdClass composite key leads to &quot;disappearing&quot; (null) returned objects\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-843'>OPENJPA-843</a>] -         Unnecessary version update on inverse-side of a 1-m relationship\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1400'>OPENJPA-1400</a>] -         Unable to persist a relationship to a detached Entity \n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-853'>OPENJPA-853</a>] -         Informix cursor not open problem if synchronizeMapping set true\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1421'>OPENJPA-1421</a>] -         Reduce lock contention in JDBCStoreManager\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-864'>OPENJPA-864</a>] -         Subquery problems with SYNTAX_DATABASE (Oracle)\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1441'>OPENJPA-1441</a>] -         NPE when enhancing a Serializable, versioned class\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-872'>OPENJPA-872</a>] -         Compound custom id in bidirectional many-to-one\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1457'>OPENJPA-1457</a>] -         Remove Java.net maven repostiory from tck pom.xml\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-912'>OPENJPA-912</a>] -         Potential NPE in setInverseRelation\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-917'>OPENJPA-917</a>] -         stored procedures throw InvalidStateException when using getSingleResult() or getResultList()\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-919'>OPENJPA-919</a>] -         JUnit for Bi-directional OneToOne with null relationships\n-</li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-925'>OPENJPA-925</a>] -         Bidirectional OneToOne relation incorrectly set in loadEagerJoin\n+</ul>\n+    \n+<h3>        Improvement\n+</h3>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-250'>OPENJPA-250</a>] -         Reduce synchronization bottlenecks in data cache, metadata repository, and lifecycle event manager\n </li>\n-</ul>    \n-\n-<h2><a name='Improvement'>        Improvement\n-</h2>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-686'>OPENJPA-686</a>] -         Openjpa manual needs to be updated for database restriction on BigDecimal field on Sybase\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-975'>OPENJPA-975</a>] -         Oracle needs ability to not have an escape character for search strings.\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-726'>OPENJPA-726</a>] -         Provide MD5Sums for latest downloads\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-991'>OPENJPA-991</a>] -         Implement LockTimeout using db specific server-side lock timeout feature\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-742'>OPENJPA-742</a>] -         Add line number and column number to QueryMetaData\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1045'>OPENJPA-1045</a>] -         Add opt-in and opt-out configuration for L2 DataCache\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-752'>OPENJPA-752</a>] -         ProxySetupStateManager.setProxyData routing through PersistanceCapable caused &quot;PersistenceException: null&quot;\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1136'>OPENJPA-1136</a>] -         Add .gitignore for git users\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-772'>OPENJPA-772</a>] -         Proper maven pluginManagement and use ianal-maven-plugin for enforcing legal files\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1171'>OPENJPA-1171</a>] -         Use StringBuilder instead of StringBuffer in SQLBuffer\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-779'>OPENJPA-779</a>] -         patch for eclipse .project and .classpath files...\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1172'>OPENJPA-1172</a>] -         Use java.util.concurrent.ConcurrentHashMap rather than a synchronized HashMap in ClassMapping.\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-817'>OPENJPA-817</a>] -         Order of inserts lost when using ConstraintUpdateManager\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1414'>OPENJPA-1414</a>] -         Performance improvements for detach\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-876'>OPENJPA-876</a>] -         Better test profiles for proprietary databases (DB2, Oracle) and continuous build\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1415'>OPENJPA-1415</a>] -         Performance improvement by reduced logging of batched OLE\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-881'>OPENJPA-881</a>] -         Enable connection pooling for testcases. \n+</ul>\n+                                \n+<h3>        Test\n+</h3>\n+<ul>\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1071'>OPENJPA-1071</a>] -         Derby test suit speed-up\n </li>\n-<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-901'>OPENJPA-901</a>] -         Use hosted JAI artifacts as the default for the docbook build\n+<li>[<a href='https://issues.apache.org/jira/browse/OPENJPA-1092'>OPENJPA-1092</a>] -         enable test case for jpql\n </li>\n-</ul> \n-\n+</ul>\n \n <h2><a name=\"Previous\"></a>         Previous Releases\n </h2>\n Release notes for earlier releases of OpenJPA may be found in SVN at the following locations. \n-<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.2.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.2.0 RELEASE-NOTES.html</a></li>\n- <li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.1.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.1.0 RELEASE-NOTES.html</a></li>\n-<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.0.0/openjpa-project/RELEASE-NOTES.html?view=markup'>OpenJPA 1.0.0 RELEASE-NOTES.html</a></li>\n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.2.1/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.2.1 RELEASE-NOTES.html</a></li>\n+<li><a href='http://svn.apache.org/viewvc/openjpa/tags/1.2.0/openjpa-project/RELEASE-NOTES.html?view=co'>OpenJPA 1.2.0 RELEASE-NOTES.html</a></li>\n </body>\n </html>"},{"sha":"2748816777514887ce60bc01d57499637b920914","filename":"openjpa-project/assembly.xml","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/assembly.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/assembly.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/assembly.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,102 +1,102 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<assembly>\r\n-    <id>binary</id>\r\n-    <formats>\r\n-        <format>zip</format>\r\n-    </formats>\r\n-    <includeBaseDirectory>true</includeBaseDirectory>\r\n-    <fileSets>\r\n-        <fileSet>\r\n-            <directory>target/aggregate</directory>\r\n-            <outputDirectory>/</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <includes>\r\n-                <include>README</include>\r\n-                <include>DISCLAIMER</include>\r\n-                <include>LICENSE</include>\r\n-                <include>STATUS</include>\r\n-                <include>NOTICE</include>\r\n-                <include>README.txt</include>\r\n-                <include>DISCLAIMER.txt</include>\r\n-                <include>LICENSE.txt</include>\r\n-                <include>STATUS.txt</include>\r\n-                <include>NOTICE.txt</include>\r\n-                <include>RELEASE-NOTES</include>\r\n-                <include>RELEASE-NOTES.html</include>\r\n-                <include>RELEASE-NOTES.txt</include>\r\n-                <include>CHANGES</include>\r\n-                <include>CHANGES.txt</include>\r\n-            </includes>\r\n-        </fileSet>\r\n-        <!--\r\n-        <fileSet>\r\n-            <directory>licenses</directory>\r\n-            <outputDirectory>/lib</outputDirectory>\r\n-            <includes>\r\n-                <include>*</include>\r\n-            </includes>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>target/examples</directory>\r\n-            <outputDirectory>/examples</outputDirectory>\r\n-        </fileSet>\r\n-        -->\r\n-        <fileSet>\r\n-            <directory>target/manual</directory>\r\n-            <outputDirectory>docs/manual</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>../target/site/apidocs</directory>\r\n-            <outputDirectory>docs/javadoc</outputDirectory>\r\n-        </fileSet>\r\n-        <fileSet>\r\n-            <directory>../openjpa-examples/src/main/java</directory>\r\n-            <outputDirectory>examples</outputDirectory>\r\n-        </fileSet>\r\n-    </fileSets>\r\n-    <dependencySets>\r\n-        <dependencySet>\r\n-            <outputDirectory>/</outputDirectory>\r\n-            <unpack>false</unpack>\r\n-            <scope>runtime</scope>\r\n-            <includes>\r\n-                <include>org.apache.openjpa:openjpa</include>\r\n-            </includes>\r\n-        </dependencySet>\r\n-        <dependencySet>\r\n-            <outputDirectory>/lib</outputDirectory>\r\n-            <unpack>false</unpack>\r\n-            <scope>runtime</scope>\r\n-            <includes>\r\n-                <include>net.sourceforge.serp:serp</include>\r\n-                <include>org.apache.derby:derby</include>\r\n-\r\n-                <include>commons-lang:commons-lang</include>\r\n-                <include>commons-collections:commons-collections</include>\r\n-                <include>commons-pool:commons-pool</include>\r\n-\r\n-                <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\r\n-                <include>org.apache.geronimo.specs:geronimo-jpa_3.0_spec</include>\r\n-            </includes>\r\n-        </dependencySet>\r\n-    </dependencySets>\r\n-</assembly>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<assembly>\n+    <id>binary</id>\n+    <formats>\n+        <format>zip</format>\n+    </formats>\n+    <includeBaseDirectory>true</includeBaseDirectory>\n+    <fileSets>\n+        <fileSet>\n+            <directory>target/aggregate</directory>\n+            <outputDirectory>/</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <includes>\n+                <include>README</include>\n+                <include>DISCLAIMER</include>\n+                <include>LICENSE</include>\n+                <include>STATUS</include>\n+                <include>NOTICE</include>\n+                <include>README.txt</include>\n+                <include>DISCLAIMER.txt</include>\n+                <include>LICENSE.txt</include>\n+                <include>STATUS.txt</include>\n+                <include>NOTICE.txt</include>\n+                <include>RELEASE-NOTES</include>\n+                <include>RELEASE-NOTES.html</include>\n+                <include>RELEASE-NOTES.txt</include>\n+                <include>CHANGES</include>\n+                <include>CHANGES.txt</include>\n+            </includes>\n+        </fileSet>\n+        <!--\n+        <fileSet>\n+            <directory>licenses</directory>\n+            <outputDirectory>/lib</outputDirectory>\n+            <includes>\n+                <include>*</include>\n+            </includes>\n+        </fileSet>\n+        <fileSet>\n+            <directory>target/examples</directory>\n+            <outputDirectory>/examples</outputDirectory>\n+        </fileSet>\n+        -->\n+        <fileSet>\n+            <directory>target/manual</directory>\n+            <outputDirectory>docs/manual</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <directory>../target/site/apidocs</directory>\n+            <outputDirectory>docs/javadoc</outputDirectory>\n+        </fileSet>\n+        <fileSet>\n+            <directory>../openjpa-examples/src/main/java</directory>\n+            <outputDirectory>examples</outputDirectory>\n+        </fileSet>\n+    </fileSets>\n+    <dependencySets>\n+        <dependencySet>\n+            <outputDirectory>/</outputDirectory>\n+            <unpack>false</unpack>\n+            <scope>runtime</scope>\n+            <includes>\n+                <include>org.apache.openjpa:openjpa</include>\n+            </includes>\n+        </dependencySet>\n+        <dependencySet>\n+            <outputDirectory>/lib</outputDirectory>\n+            <unpack>false</unpack>\n+            <scope>runtime</scope>\n+            <includes>\n+                <include>net.sourceforge.serp:serp</include>\n+                <include>org.apache.derby:derby</include>\n+\n+                <include>commons-lang:commons-lang</include>\n+                <include>commons-collections:commons-collections</include>\n+                <include>commons-pool:commons-pool</include>\n+\n+                <include>org.apache.geronimo.specs:geronimo-jta_1.1_spec</include>\n+                <include>org.apache.geronimo.specs:geronimo-jpa_3.0_spec</include>\n+            </includes>\n+        </dependencySet>\n+    </dependencySets>\n+</assembly>"},{"sha":"3f60ab96d0b991dce74f28745bd2a580980b3e52","filename":"openjpa-project/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/pom.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -41,7 +41,7 @@\n     <parent>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-parent</artifactId>\n-        <version>1.2.1</version>\n+        <version>1.2.2</version>\n     </parent>\n \n     <properties>"},{"sha":"65ecc96137417e3eadb78a0b31c49cb0b794084a","filename":"openjpa-project/src/doc/manual/jpa_overview_pc.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/jpa_overview_pc.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/jpa_overview_pc.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/jpa_overview_pc.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -65,11 +65,11 @@ an entity by its persistent identity (covered later in this chapter), or use a\n An instance of an embeddable class, on the other hand, is only stored as part of\n a separate entity. Embeddable instances have no persistent identity, and are\n never returned directly from the <classname>EntityManager</classname> or from a\n-<classname>Query</classname> unless the query uses a projection on owning class \r\n-to the embedded instance. For example, if <classname>Address</classname> is \r\n-embedded in <classname>Company</classname>, then \r\n-a query <classname>\"SELECT a FROM Address a\"</classname> will never return the \r\n-embedded <classname>Address</classname> of <classname>Company</classname>; \r\n+<classname>Query</classname> unless the query uses a projection on owning class \n+to the embedded instance. For example, if <classname>Address</classname> is \n+embedded in <classname>Company</classname>, then \n+a query <classname>\"SELECT a FROM Address a\"</classname> will never return the \n+embedded <classname>Address</classname> of <classname>Company</classname>; \n but a projection query such as\n <classname>\"SELECT c.address FROM Company c\"</classname> will.\n     </para>"},{"sha":"49324544c4dd4de1c35dbe7a8df6bf85301cc98a","filename":"openjpa-project/src/doc/manual/manual.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/manual.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/manual.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/manual.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -46,7 +46,7 @@\n     <!ENTITY ref_guide_deploy.xml SYSTEM \"ref_guide_deploy.xml\">\n     <!ENTITY ref_guide_runtime.xml SYSTEM \"ref_guide_runtime.xml\">\n     <!ENTITY ref_guide_caching.xml SYSTEM \"ref_guide_caching.xml\">\n-    <!ENTITY ref_guide_remote.xml SYSTEM \"ref_guide_remote.xml\">\r\n+    <!ENTITY ref_guide_remote.xml SYSTEM \"ref_guide_remote.xml\">\n     <!ENTITY ref_guide_slice.xml SYSTEM \"ref_guide_slice.xml\">\n     <!ENTITY ref_guide_integration.xml SYSTEM \"ref_guide_integration.xml\">\n     <!ENTITY ref_guide_optimization.xml SYSTEM \"ref_guide_optimization.xml\">\n@@ -101,7 +101,7 @@\n         &ref_guide_deploy.xml;\n         &ref_guide_runtime.xml;\n         &ref_guide_caching.xml;\n-        &ref_guide_remote.xml;\r\n+        &ref_guide_remote.xml;\n         &ref_guide_slice.xml;\n         &ref_guide_integration.xml;\n         &ref_guide_optimization.xml;"},{"sha":"24b64f4db24461fb8b26f2c4c6e5310e8c0b0646","filename":"openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_dbsetup.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1926,6 +1926,22 @@ the query, this setting is primarily used when translating other query\n languages, such as JDOQL.  Defaults to <literal>\"\\\\\"</literal> \n (a single backslash in Java speak).\n                     </para>\n+                </listitem>                \n+                <listitem id=\"DBDictionary.RequiresSearchStringEscapeForLike\">\n+                    <para>\n+                    <indexterm>\n+                        <primary>\n+                            SQL\n+                        </primary>\n+                        <secondary>\n+                            RequiresSearchStringEscapeForLike\n+                        </secondary>\n+                    </indexterm>\n+<literal>RequiresSearchStringEscapeForLike</literal>:\n+When true, the database requires an escape string for queries that use\n+<literal>LIKE</literal>.  The escape string can be specified using\n+<literal>searchStringEscape</literal>.  Defaults to <literal>true</literal>.\n+                    </para>\n                 </listitem>\n                 <listitem id=\"DBDictionary.SelectWords\">\n                     <para>\n@@ -3583,7 +3599,13 @@ property accepts the following values:\n                 <para>\n <literal>always</literal>: Each <classname>EntityManager</classname> obtains a\n single connection and uses it until the <classname>EntityManager</classname>\n-closes.\n+closes. Great care should be taken when using this property if the application \n+cannot close the EntityManager (ie container-managed EntityManagers in a JEE \n+Application Server). In this case the connection will remain open for an \n+undefined time and the application may not be able to recover from a terminated\n+connection(ie if a TCP/IP timeout severs the connection to the database). \n+For this reason the <literal>always</literal> option should not be used with \n+container managed EntityManagers.\n                 </para>\n             </listitem>\n             <listitem>"},{"sha":"5c0ca295b0bfc4a9e7e8b34390fa977e5d3a0f10","filename":"openjpa-project/src/doc/manual/ref_guide_mapping.xml","status":"modified","additions":3501,"deletions":3501,"changes":7002,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/ref_guide_mapping.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/ref_guide_mapping.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_mapping.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e222cb2521128567bddf0c75e9061adf5b87eb07","filename":"openjpa-project/src/doc/manual/ref_guide_slice.xml","status":"modified","additions":542,"deletions":542,"changes":1084,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/ref_guide_slice.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-project/src/doc/manual/ref_guide_slice.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-project/src/doc/manual/ref_guide_slice.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,543 +1,543 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n- Licensed to the Apache Software Foundation (ASF) under one\r\n- or more contributor license agreements.  See the NOTICE file\r\n- distributed with this work for additional information\r\n- regarding copyright ownership.  The ASF licenses this file\r\n- to you under the Apache License, Version 2.0 (the\r\n- \"License\"); you may not use this file except in compliance\r\n- with the License.  You may obtain a copy of the License at\r\n- \r\n- http://www.apache.org/licenses/LICENSE-2.0\r\n- \r\n- Unless required by applicable law or agreed to in writing,\r\n- software distributed under the License is distributed on an\r\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- KIND, either express or implied.  See the License for the\r\n- specific language governing permissions and limitations\r\n- under the License.   \r\n--->\r\n-<chapter id=\"ref_guide_slice\">\r\n-  <title>\r\n-    Distributed Persistence\r\n-  </title>\r\n-  <para>\r\n-  The standard JPA runtime environment works with a <emphasis>single</emphasis>\r\n-  database instance. OpenJPA can be extended via plug-in to work with \r\n-  multiple databases within the same transaction without any change to the \r\n-  existing application. This capability of OpenJPA for distributed \r\n-  database environment is called <emphasis>Slice</emphasis> and is explained in \r\n-  the following sections.\r\n-  </para>\r\n-  \r\n-  <section id=\"slice_overview\">\r\n-    <title>Overview</title>\r\n-    <para>\r\n-    Enterprise applications are increasingly deployed for distributed database\r\n-    environments. The reasons for distributed, often horizontally-partitioned \r\n-    database environment can be to counter massive data growth, to \r\n-    support multiple external clients on a hosted platform or many other \r\n-    practical scenarios that can benefit from data partitioning.\r\n-    </para>\r\n-    \r\n-    <para>\r\n-    Any JPA-based user application has to address serious technical and conceptual\r\n-    challenges to directly interact with a set of physical databases\r\n-    within a single transaction. \r\n-    Slice encapsulates the complexity of distributed database environment \r\n-    via the abstraction of <emphasis>virtual</emphasis> database which internally \r\n-    manages multiple physical databases. We refer each physical database instance \r\n-    as <emphasis>slice</emphasis>. \r\n-    <emphasis>Virtualization</emphasis> of distributed databases \r\n-    makes OpenJPA object management kernel and \r\n-    the user application to work in the same way as in the case of a single physical \r\n-    database.\r\n-    </para>\r\n-  </section>\r\n-  \r\n-    <section id=\"Features and Limitations\">\r\n-       <title>Salient Features</title>\r\n-         <section><title>Transparency</title>\r\n-            <para>\r\n-              The existing application or the persistent domain featureSelection requires \r\n-              <emphasis>no change</emphasis> to upgrade from a single database \r\n-              to a distributed database environment. \r\n-            </para>\r\n-         </section>\r\n-         \r\n-         <section><title>Custom Distribution Policy</title>\r\n-            <para>\r\n-             User application decides how the newly persistent instances be \r\n-             distributed across the database slices. The data\r\n-             distribution policy across the slices may be based on the attribute \r\n-             of the data itself. For example, all Customer whose first name begins with\r\n-             character 'A' to 'M' will be stored in one slice while names\r\n-             beginning with 'N' to 'Z' will be stored in another slice. \r\n-             </para>\r\n-             <para>\r\n-             This custom data distribution policy is specified by implementing  \r\n-             <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\r\n-             interface by the user application.\r\n-             </para>\r\n-          \r\n-             <para> \r\n-             Slice tracks the original database for existing instances. When\r\n-             an application issues a query, the resultant instances can be loaded \r\n-             from different slices. This tracking is important as subsequent\r\n-             update to any of these instances is committed to the appropriate \r\n-             original database slice. \r\n-            </para>\r\n-            \r\n-            <note>\r\n-            <para>\r\n-            You can find the original slice of an instance <code>pc</code> by \r\n-            the static utility method  \r\n-            <methodname>SlicePersistence.getSlice(pc)</methodname>.\r\n-            This method returns the slice identifier string associated with the\r\n-            given <emphasis>managed</emphasis> instance. If the instance is not\r\n-            being managed then the method return null because any unmanaged or\r\n-            detached instance is not associated with any slice. \r\n-            </para>\r\n-            </note>\r\n-            \r\n-            <para>\r\n-            <warning>Currently, there is no provision for migrating an \r\n-            existing instance from one slice to another.\r\n-            </warning>\r\n-            </para>\r\n-         </section>\r\n-         \r\n-         <section><title>Heterogeneous Database</title>\r\n-            <para> \r\n-              Each slice can be configured independently with its own JDBC \r\n-              driver and other connection parameters. Hence the target database \r\n-              environment can constitute of heterogeneous databases. \r\n-            </para>\r\n-        </section>\r\n-        \r\n-        <section><title>Parallel Execution</title>\r\n-            <para> \r\n-              All database operations such as query, commit or flush operates\r\n-              in parallel across the database slices. The execution threading\r\n-              policy is configurable. \r\n-            </para>\r\n-         </section>\r\n-         \r\n-         <section><title>Distributed Query</title>\r\n-            <para>\r\n-            The queries are executed across all slices and the results are\r\n-            merged into a single list. The query result that includes \r\n-            <code>ORDER BY</code> clause are sorted correctly by merging \r\n-            results from each individual slice. \r\n-            </para>\r\n-            The queries that specify an aggregate projection such as \r\n-            <code>COUNT()</code>, <code>MAX()</code>, <code>MIN()</code> \r\n-            and <code>SUM()</code>\r\n-            are correctly evaluated <emphasis>only if</emphasis> they \r\n-            return a single result.\r\n-            <para>\r\n-            </para>\r\n-            <para>\r\n-            <warning>\r\n-            The aggregate operation <code>AVG()</code> is not supported.\r\n-            </warning>\r\n-            </para>\r\n-            \r\n-         </section>\r\n-         \r\n-         <section><title>Targeted Query</title>\r\n-            <para>\r\n-            You can target the query only to a subset of slices rather than\r\n-            all slices by setting a <emphasis>hint</emphasis>. The hint key\r\n-            <code>openjpa.hint.slice.Target</code> is set on any query and \r\n-            hint value is\r\n-            comma-separated list of slice identifiers. The following \r\n-            example shows how to target a query only to slice <code>\"One\"</code>\r\n-                          \r\n-            <programlisting>\r\n-              <![CDATA[EntityManager em = ...;\r\n-              em.getTransaction().begin();\r\n-              String hint = \"openjpa.hint.slice.Target\";\r\n-              Query query = em.createQuery(\"SELECT p FROM PObject\").setHint(hint, \"One\");\r\n-              List result = query.getResultList();\r\n-              // verify that each instance is originaing from the given slice\r\n-              for (Object pc : result) {\r\n-                 String sliceOrigin = SlicePersistence.getSlice(pc);\r\n-                 assertTrue (\"One\", sliceOrigin);\r\n-              }\r\n-              ]]>\r\n-            </programlisting> \r\n-            </para>\r\n-         </section>\r\n-         \r\n-         \r\n-         <section><title>Distributed Transaction</title>\r\n-            <para> \r\n-            The database slices participate in a global transaction provided\r\n-            each slice is configured with a XA-compliant JDBC driver, even\r\n-            when the persistence unit is configured for <code>RESOURCE_LOCAL</code>\r\n-            transaction.\r\n-            </para>\r\n-            <para>\r\n-            <warning>\r\n-            If any of the configured slices is not XA-compliant <emphasis>and</emphasis> \r\n-            the persistence unit is configured for <code>RESOURCE_LOCAL</code>\r\n-            transaction then each slice is committed without any two-phase\r\n-            commit protocol. If commit on any slice fails, then atomic nature of\r\n-            the transaction is not ensured.\r\n-            </warning>\r\n-            </para>\r\n-          </section>\r\n-   \r\n-    \r\n-    \r\n-        \r\n-         <section id=\"collocation_constraint\"><title>Collocation Constraint</title>\r\n-            <para> \r\n-            No relationship can exist across database slices. In O-R mapping parlance,\r\n-            this condition translates to the limitation that the closure of an object graph must be \r\n-            <emphasis>collocated</emphasis> in the same database.\r\n-            For example, consider a domain featureSelection where Person relates to Adress.\r\n-            Person X refers to Address A while Person Y refers to Address B. \r\n-            Collocation Constraint means that <emphasis>both</emphasis> X and A \r\n-            must be stored in the same\r\n-            database slice. Similarly Y and B must be stored in a single slice.\r\n-            </para>\r\n-            <para>\r\n-            Slice, however, helps to maintain collocation constraint automatically.\r\n-            The instances in the closure set of any newly persistent instance \r\n-            reachable via cascaded relationship is stored in the same slice.\r\n-            The user-defined distribution policy requires to supply the slice \r\n-            for the root instance only.\r\n-            </para>\r\n-         </section>\r\n-    </section>\r\n-  \r\n-  <section id=\"slice_configuration\">\r\n-    <title>Usage</title>\r\n-    <para>\r\n-     Slice is activated via the following property settings:\r\n-    </para>\r\n-    <section>\r\n-      <title>How to activate Slice Runtime?</title>\r\n-      <para>\r\n-       The basic configuration property is \r\n-       <programlisting> \r\n-        <![CDATA[ <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>]]>\r\n-       </programlisting> \r\n-       This critical configuration activates a specialized factory class aliased\r\n-       as <code>slice</code> to create object management kernel that\r\n-       can work against multiple databases.  \r\n-      </para>\r\n-    </section> \r\n-    \r\n-    <section>\r\n-      <title>How to configure each database slice?</title>\r\n-      <para>\r\n-      Each database slice is identified by a logical name unique within a\r\n-      persistent unit. The list of the slices is specified by \r\n-      <code>openjpa.slice.Names</code> property.\r\n-      For example, specify three slices named <code>\"One\"</code>, \r\n-      <code>\"Two\"</code> and <code>\"Three\"</code> as follows:\r\n-      <programlisting>\r\n-      <![CDATA[ <property name=\"openjpa.slice.Names\" value=\"One, Two, Three\"/>]]>\r\n-      </programlisting>\r\n-      </para>\r\n-      <para>\r\n-      This property is not mandatory. If this property is not specified then\r\n-      the configuration is scanned for logical slice names. Any property\r\n-      <code>\"abc\"</code> of the form <code>openjpa.slice.XYZ.abc</code> will \r\n-      register a slice with logical\r\n-      name <code>\"XYZ\"</code>.\r\n-      </para>\r\n-      <para>\r\n-      The order of the names is significant when no <code>openjpa.slice.Master</code> \r\n-      property is not specified. Then the persistence unit is scanned to find\r\n-      all configured slice names and they are ordered alphabetically.  \r\n-      </para>\r\n-      \r\n-      <para>\r\n-       Each database slice properties can be configured independently. \r\n-       For example, the\r\n-       following configuration will register two slices with logical name \r\n-       <code>One</code> and <code>Two</code>.\r\n-       <programlisting> \r\n-        <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql:localhost//slice1\"/>\r\n-        <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql:localhost//slice2\"/>]]>\r\n-       </programlisting> \r\n-      </para>\r\n-      \r\n-      <para>\r\n-       Any OpenJPA specific property can be configured per slice basis. \r\n-       For example, the following configuration will use two different JDBC \r\n-       drivers for slice <code>One</code> and <code>Two</code>.\r\n-       <programlisting> \r\n-        <![CDATA[<property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\r\n-        <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>]]>\r\n-       </programlisting> \r\n-      </para>\r\n-      \r\n-      <para>\r\n-        Any property if unspecified for a particular slice will be defaulted by\r\n-        corresponding OpenJPA property. For example, consider following three slices\r\n-        <programlisting> \r\n-         <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice1\"/>\r\n-         <property name=\"openjpa.slice.Two.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice2\"/>\r\n-         <property name=\"openjpa.slice.Three.ConnectionURL\"        value=\"jdbc:oracle:localhost//slice3\"/>\r\n-\r\n-         <property name=\"openjpa.ConnectionDriverName\"     value=\"com.mysql.jdbc.Driver\"/>\r\n-         <property name=\"openjpa.slice.Three.ConnectionDriverName\" value=\"oracle.jdbc.Driver\"/>]]>\r\n-        </programlisting> \r\n-        In this example, <code>Three</code> will use slice-specific\r\n-        <code>oracle.jdbc.Driver</code> driver while slice\r\n-        <code>One</code> and <code>Two</code> will use\r\n-        the driver <code>com.mysql.jdbc.Driver</code> as \r\n-        specified by <code>openjpa.ConnectionDriverName</code> \r\n-        property value.\r\n-      </para>\r\n-    </section>\r\n-     \r\n-    <section id=\"distribution_policy\">\r\n-       <title>Implement DistributionPolicy interface</title>\r\n-       <para>\r\n-        Slice needs to determine which slice will persist a new instance. \r\n-        The application can only decide this policy (for example, \r\n-        all PurchaseOrders before April 30 goes to slice <code>One</code>,\r\n-        all the rest goes to slice <code>Two</code>). This is why\r\n-        the application has to implement \r\n-        <code>org.apache.openjpa.slice.DistributionPolicy</code> and\r\n-        specify the implementation class in configuration\r\n-        <programlisting> \r\n-         <![CDATA[ <property name=\"openjpa.slice.DistributionPolicy\" value=\"com.acme.foo.MyOptimialDistributionPolicy\"/>]]>\r\n-        </programlisting>\r\n-       </para>\r\n-       \r\n-       <para>\r\n-        The interface <code>org.apache.openjpa.slice.DistributionPolicy</code>\r\n-        is simple with a single method. The complete listing of the\r\n-        documented interface follows:\r\n-       <programlisting> \r\n-       <![CDATA[ \r\n-public interface DistributionPolicy {\r\n-    /**\r\n-     * Gets the name of the slice where a given instance will be stored.\r\n-     *  \r\n-     * @param pc The newly persistent or to-be-merged object. \r\n-     * @param slices name of the configured slices.\r\n-     * @param context persistence context managing the given instance.\r\n-     * \r\n-     * @return identifier of the slice. This name must match one of the\r\n-     * configured slice names. \r\n-     * @see DistributedConfiguration#getSliceNames()\r\n-     */\r\n-    String distribute(Object pc, List<String> slices, Object context);\r\n-}\r\n-]]>\r\n-       </programlisting>\r\n-        </para>\r\n-        \r\n-        <para>\r\n-        While implementing a distribution policy the most important thing to\r\n-        remember is <link linkend=\"collocation_constraint\">collocation constraint</link>.\r\n-        Because Slice can not establish or query any cross-database relationship, all the\r\n-        related instances must be stored in the same database slice. \r\n- \r\n-        Slice can determine the closure of a root object by traversal of \r\n-        cascaded relationships. Hence user-defined policy has to only decide the\r\n-        database for the root instance that is the explicit argument to \r\n-        <methodname>EntityManager.persist()</methodname> call.\r\n-        Slice will ensure that all other related instances that gets persisted by cascade\r\n-        is assigned to the same database slice as that of the root instance.\r\n-        However, the user-defined distribution policy must return the\r\n-        same slice identifier for the instances that are logically related but\r\n-        not cascaded for persist. \r\n-        </para>\r\n-    </section>\r\n-    \r\n-    <section>\r\n-    </section>\r\n-  </section>\r\n-  \r\n-  <title>Configuration Properties</title>\r\n-    <para>\r\n-    The properties to configure Slice can be classified in two broad groups.\r\n-The <emphasis>global</emphasis> properties apply to all the slices, for example,\r\n-the thread pool used to execute the queries in parallel or the transaction \r\n-manager used to coordinate transaction across multiple slices. \r\n-The <emphasis>per-slice</emphasis> properties apply to individual slice, for example,\r\n-the JDBC connection URL of a slice.\r\n-   </para>\r\n-   \r\n-   <section>\r\n-     <title>Global Properties</title>\r\n-     \r\n-     <section>\r\n-        <title>openjpa.slice.DistributionPolicy</title>\r\n-        <para>\r\n-         This <emphasis>mandatory</emphasis> plug-in property determines how newly\r\n-         persistent instances are distributed across individual slices. \r\n-         The value of this property is a fully-qualified class name that implements\r\n-         <ulink url=\"../javadoc/org/apache/openjpa/slice/DistributionPolicy.html\">\r\n-         <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\r\n-         </ulink> interface.\r\n-        </para>\r\n-     </section>\r\n-     \r\n-     <section><title>openjpa.slice.Lenient</title>\r\n-      <para>\r\n-        This boolean plug-in property controls the behavior when one or more slice \r\n-        can not be connected or unavailable for some other reasons.\r\n-        If <code>true</code>, the unreachable slices are ignored. If \r\n-        <code>false</code> then any unreachable slice will raise an exception\r\n-        during startup.\r\n-        </para>\r\n-        <para>\r\n-        By default this value is set to <code>false</code> i.e. all configured\r\n-        slices must be available.\r\n-        </para> \r\n-     </section>\r\n-\r\n-     <section>\r\n-      <title>openjpa.slice.Master</title>\r\n-      <para>\r\n-       This plug-in property can be used to identify the name of the master slice. \r\n-       Master slice is used when a primary key is to be generated from a database sequence. \r\n-       </para>\r\n-       <para>\r\n-        By default the master slice is the first slice in the list of configured slice names. \r\n-       </para>\r\n-       <para>\r\n-              <warning>\r\n-              Currently, there is no provision to use sequence from \r\n-              multiple database slices.\r\n-              </warning>\r\n-       </para>\r\n-     </section>\r\n-    \r\n-     <section>\r\n-        <title>openjpa.slice.Names</title>\r\n-        <para>\r\n-         This plug-in property can be used to register the logical slice names.\r\n-         The value of this property is comma-separated list of slice names. \r\n-         The ordering of the names in this list is \r\n-         <emphasis>significant</emphasis> because \r\n-         <link linkend=\"distribution_policy\">DistributionPolicy</link> receives \r\n-         the input argument of the slice names in the same order.\r\n-        </para>\r\n-        <para>\r\n-        If logical slice names are not registered explicitly via this property,\r\n-        then all logical slice names available in the persistence unit are \r\n-        registered. The ordering of the slice names in this case is alphabetical.  \r\n-        </para>\r\n-        <para>\r\n-        If logical slice names are registered explicitly via this property, then\r\n-        any logical slice that is available in the persistence unit but excluded\r\n-        from this list is ignored. \r\n-        </para>\r\n-     </section>\r\n-    \r\n-     <section>\r\n-        <title>openjpa.slice.ThreadingPolicy</title>\r\n-        <para>\r\n-        This plug-in property determines the nature of thread pool being used \r\n-        for database operations such as query or flush on individual slices. \r\n-        The value of the property is a \r\n-        fully-qualified class name that implements \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ExecutorService.html\">\r\n-        <classname>java.util.concurrent.ExecutorService</classname>\r\n-        </ulink> interface.  \r\n-        Two pre-defined pools can be chosen via their aliases namely \r\n-        <code>fixed</code> or <code>cached</code>.\r\n-        </para>\r\n-        <para>\r\n-        The pre-defined alias <code>cached</code> activates a \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool()\">cached thread pool</ulink>. \r\n-        A cached thread pool creates new threads as needed, but will reuse \r\n-        previously constructed threads when they are available. This pool \r\n-        is suitable in scenarios that execute many short-lived asynchronous tasks.\r\n-        The way Slice uses the thread pool to execute database operations is \r\n-        akin to such scenario and hence <code>cached</code> is the default \r\n-        value for this plug-in property.  \r\n-        </para>\r\n-        <para>\r\n-        The <code>fixed</code> alias activates a \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int)\">fixed thread pool</ulink>.\r\n-        The fixed thread pool can be further parameterized with \r\n-        <code>CorePoolSize</code>, <code>MaximumPoolSize</code>, \r\n-        <code>KeepAliveTime</code> and <code>RejectedExecutionHandler</code>. \r\n-        The meaning of these parameters are described in \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html\">JavaDoc</ulink>.\r\n-        The users can exercise finer control on thread pool behavior via these\r\n-        parameters.\r\n-        By default, the core pool size is <code>10</code>, maximum pool size is\r\n-        also <code>10</code>, keep alive time is <code>60</code> seconds and \r\n-        rejected execution is \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html\">aborted</ulink>.\r\n-        </para>\r\n-        <para>\r\n-        Both of the pre-defined aliases can be parameterized with a fully-qualified\r\n-        class name that implements \r\n-        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadFactory.html\">\r\n-        <classname>java.util.concurrent.ThreadFactory</classname>\r\n-        </ulink> interface.\r\n-        </para>\r\n-     </section>\r\n-      \r\n-     <section>\r\n-      <title>openjpa.slice.TransactionPolicy</title>\r\n-      <para>\r\n-      This plug-in property determines the policy for transaction commit \r\n-      across multiple slices. The value of this property is a fully-qualified \r\n-      class name that implements \r\n-      <ulink url=\"http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/transaction/TransactionManager.html\">\r\n-      <classname>javax.transaction.TransactionManager</classname> \r\n-      </ulink> interface. \r\n-      </para>\r\n-      <para>\r\n-      Three pre-defined policies can be chosen\r\n-      by their aliases namely <code>default</code>,\r\n-      <code>xa</code> and <code>jndi</code>. \r\n-      </para>\r\n-      <para>\r\n-      The <code>default</code> policy employs \r\n-      a Transaction Manager that commits or rolls back transaction on individual\r\n-      slices <emphasis>without</emphasis> a two-phase commit protocol. \r\n-      It does <emphasis>not</emphasis>\r\n-      guarantee atomic nature of transaction across all the slices because if\r\n-      one or more slice fails to commit, there is no way to rollback the transaction\r\n-      on other slices that committed successfully.\r\n-      </para>\r\n-      <para>\r\n-      The <code>xa</code> policy employs a Transaction Manager that that commits \r\n-      or rolls back transaction on individual\r\n-      slices using a two-phase commit protocol. The prerequisite to use this scheme\r\n-      is, of course, that all the slices must be configured to use\r\n-      XA-compliant JDBC driver. \r\n-      </para>\r\n-      <para>\r\n-      The <code>jndi</code> policy employs a Transaction Manager by looking up the\r\n-      JNDI context. The prerequisite to use this transaction\r\n-      manager is, of course, that all the slices must be configured to use\r\n-      XA-compliant JDBC driver. \r\n-      <warning>This JNDI based policy is not available currently.</warning>\r\n-      </para>\r\n-    </section>\r\n-   </section>\r\n-   \r\n-   <section>\r\n-     <title>Per-Slice Properties</title>\r\n-     <para>\r\n-     Any OpenJPA property can be configured for each individual slice. The property name\r\n-     is of the form <code>openjpa.slice.[Logical slice name].[OpenJPA Property Name]</code>.\r\n-     For example, <code>openjpa.slice.One.ConnectionURL</code> where <code>One</code>\r\n-     is the logical slice name and <code>ConnectionURL</code> is an OpenJPA property\r\n-     name. \r\n-     </para>\r\n-     <para>\r\n-     If a property is not configured for a specific slice, then the value for\r\n-     the property equals to the corresponding <code>openjpa.*</code> property.\r\n-     </para>\r\n-   </section>\r\n-  \r\n-</chapter>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+ \n+ http://www.apache.org/licenses/LICENSE-2.0\n+ \n+ Unless required by applicable law or agreed to in writing,\n+ software distributed under the License is distributed on an\n+ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ KIND, either express or implied.  See the License for the\n+ specific language governing permissions and limitations\n+ under the License.   \n+-->\n+<chapter id=\"ref_guide_slice\">\n+  <title>\n+    Distributed Persistence\n+  </title>\n+  <para>\n+  The standard JPA runtime environment works with a <emphasis>single</emphasis>\n+  database instance. OpenJPA can be extended via plug-in to work with \n+  multiple databases within the same transaction without any change to the \n+  existing application. This capability of OpenJPA for distributed \n+  database environment is called <emphasis>Slice</emphasis> and is explained in \n+  the following sections.\n+  </para>\n+  \n+  <section id=\"slice_overview\">\n+    <title>Overview</title>\n+    <para>\n+    Enterprise applications are increasingly deployed for distributed database\n+    environments. The reasons for distributed, often horizontally-partitioned \n+    database environment can be to counter massive data growth, to \n+    support multiple external clients on a hosted platform or many other \n+    practical scenarios that can benefit from data partitioning.\n+    </para>\n+    \n+    <para>\n+    Any JPA-based user application has to address serious technical and conceptual\n+    challenges to directly interact with a set of physical databases\n+    within a single transaction. \n+    Slice encapsulates the complexity of distributed database environment \n+    via the abstraction of <emphasis>virtual</emphasis> database which internally \n+    manages multiple physical databases. We refer each physical database instance \n+    as <emphasis>slice</emphasis>. \n+    <emphasis>Virtualization</emphasis> of distributed databases \n+    makes OpenJPA object management kernel and \n+    the user application to work in the same way as in the case of a single physical \n+    database.\n+    </para>\n+  </section>\n+  \n+    <section id=\"Features and Limitations\">\n+       <title>Salient Features</title>\n+         <section><title>Transparency</title>\n+            <para>\n+              The existing application or the persistent domain featureSelection requires \n+              <emphasis>no change</emphasis> to upgrade from a single database \n+              to a distributed database environment. \n+            </para>\n+         </section>\n+         \n+         <section><title>Custom Distribution Policy</title>\n+            <para>\n+             User application decides how the newly persistent instances be \n+             distributed across the database slices. The data\n+             distribution policy across the slices may be based on the attribute \n+             of the data itself. For example, all Customer whose first name begins with\n+             character 'A' to 'M' will be stored in one slice while names\n+             beginning with 'N' to 'Z' will be stored in another slice. \n+             </para>\n+             <para>\n+             This custom data distribution policy is specified by implementing  \n+             <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\n+             interface by the user application.\n+             </para>\n+          \n+             <para> \n+             Slice tracks the original database for existing instances. When\n+             an application issues a query, the resultant instances can be loaded \n+             from different slices. This tracking is important as subsequent\n+             update to any of these instances is committed to the appropriate \n+             original database slice. \n+            </para>\n+            \n+            <note>\n+            <para>\n+            You can find the original slice of an instance <code>pc</code> by \n+            the static utility method  \n+            <methodname>SlicePersistence.getSlice(pc)</methodname>.\n+            This method returns the slice identifier string associated with the\n+            given <emphasis>managed</emphasis> instance. If the instance is not\n+            being managed then the method return null because any unmanaged or\n+            detached instance is not associated with any slice. \n+            </para>\n+            </note>\n+            \n+            <para>\n+            <warning>Currently, there is no provision for migrating an \n+            existing instance from one slice to another.\n+            </warning>\n+            </para>\n+         </section>\n+         \n+         <section><title>Heterogeneous Database</title>\n+            <para> \n+              Each slice can be configured independently with its own JDBC \n+              driver and other connection parameters. Hence the target database \n+              environment can constitute of heterogeneous databases. \n+            </para>\n+        </section>\n+        \n+        <section><title>Parallel Execution</title>\n+            <para> \n+              All database operations such as query, commit or flush operates\n+              in parallel across the database slices. The execution threading\n+              policy is configurable. \n+            </para>\n+         </section>\n+         \n+         <section><title>Distributed Query</title>\n+            <para>\n+            The queries are executed across all slices and the results are\n+            merged into a single list. The query result that includes \n+            <code>ORDER BY</code> clause are sorted correctly by merging \n+            results from each individual slice. \n+            </para>\n+            The queries that specify an aggregate projection such as \n+            <code>COUNT()</code>, <code>MAX()</code>, <code>MIN()</code> \n+            and <code>SUM()</code>\n+            are correctly evaluated <emphasis>only if</emphasis> they \n+            return a single result.\n+            <para>\n+            </para>\n+            <para>\n+            <warning>\n+            The aggregate operation <code>AVG()</code> is not supported.\n+            </warning>\n+            </para>\n+            \n+         </section>\n+         \n+         <section><title>Targeted Query</title>\n+            <para>\n+            You can target the query only to a subset of slices rather than\n+            all slices by setting a <emphasis>hint</emphasis>. The hint key\n+            <code>openjpa.hint.slice.Target</code> is set on any query and \n+            hint value is\n+            comma-separated list of slice identifiers. The following \n+            example shows how to target a query only to slice <code>\"One\"</code>\n+                          \n+            <programlisting>\n+              <![CDATA[EntityManager em = ...;\n+              em.getTransaction().begin();\n+              String hint = \"openjpa.hint.slice.Target\";\n+              Query query = em.createQuery(\"SELECT p FROM PObject\").setHint(hint, \"One\");\n+              List result = query.getResultList();\n+              // verify that each instance is originaing from the given slice\n+              for (Object pc : result) {\n+                 String sliceOrigin = SlicePersistence.getSlice(pc);\n+                 assertTrue (\"One\", sliceOrigin);\n+              }\n+              ]]>\n+            </programlisting> \n+            </para>\n+         </section>\n+         \n+         \n+         <section><title>Distributed Transaction</title>\n+            <para> \n+            The database slices participate in a global transaction provided\n+            each slice is configured with a XA-compliant JDBC driver, even\n+            when the persistence unit is configured for <code>RESOURCE_LOCAL</code>\n+            transaction.\n+            </para>\n+            <para>\n+            <warning>\n+            If any of the configured slices is not XA-compliant <emphasis>and</emphasis> \n+            the persistence unit is configured for <code>RESOURCE_LOCAL</code>\n+            transaction then each slice is committed without any two-phase\n+            commit protocol. If commit on any slice fails, then atomic nature of\n+            the transaction is not ensured.\n+            </warning>\n+            </para>\n+          </section>\n+   \n+    \n+    \n+        \n+         <section id=\"collocation_constraint\"><title>Collocation Constraint</title>\n+            <para> \n+            No relationship can exist across database slices. In O-R mapping parlance,\n+            this condition translates to the limitation that the closure of an object graph must be \n+            <emphasis>collocated</emphasis> in the same database.\n+            For example, consider a domain featureSelection where Person relates to Adress.\n+            Person X refers to Address A while Person Y refers to Address B. \n+            Collocation Constraint means that <emphasis>both</emphasis> X and A \n+            must be stored in the same\n+            database slice. Similarly Y and B must be stored in a single slice.\n+            </para>\n+            <para>\n+            Slice, however, helps to maintain collocation constraint automatically.\n+            The instances in the closure set of any newly persistent instance \n+            reachable via cascaded relationship is stored in the same slice.\n+            The user-defined distribution policy requires to supply the slice \n+            for the root instance only.\n+            </para>\n+         </section>\n+    </section>\n+  \n+  <section id=\"slice_configuration\">\n+    <title>Usage</title>\n+    <para>\n+     Slice is activated via the following property settings:\n+    </para>\n+    <section>\n+      <title>How to activate Slice Runtime?</title>\n+      <para>\n+       The basic configuration property is \n+       <programlisting> \n+        <![CDATA[ <property name=\"openjpa.BrokerFactory\" value=\"slice\"/>]]>\n+       </programlisting> \n+       This critical configuration activates a specialized factory class aliased\n+       as <code>slice</code> to create object management kernel that\n+       can work against multiple databases.  \n+      </para>\n+    </section> \n+    \n+    <section>\n+      <title>How to configure each database slice?</title>\n+      <para>\n+      Each database slice is identified by a logical name unique within a\n+      persistent unit. The list of the slices is specified by \n+      <code>openjpa.slice.Names</code> property.\n+      For example, specify three slices named <code>\"One\"</code>, \n+      <code>\"Two\"</code> and <code>\"Three\"</code> as follows:\n+      <programlisting>\n+      <![CDATA[ <property name=\"openjpa.slice.Names\" value=\"One, Two, Three\"/>]]>\n+      </programlisting>\n+      </para>\n+      <para>\n+      This property is not mandatory. If this property is not specified then\n+      the configuration is scanned for logical slice names. Any property\n+      <code>\"abc\"</code> of the form <code>openjpa.slice.XYZ.abc</code> will \n+      register a slice with logical\n+      name <code>\"XYZ\"</code>.\n+      </para>\n+      <para>\n+      The order of the names is significant when no <code>openjpa.slice.Master</code> \n+      property is not specified. Then the persistence unit is scanned to find\n+      all configured slice names and they are ordered alphabetically.  \n+      </para>\n+      \n+      <para>\n+       Each database slice properties can be configured independently. \n+       For example, the\n+       following configuration will register two slices with logical name \n+       <code>One</code> and <code>Two</code>.\n+       <programlisting> \n+        <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\" value=\"jdbc:mysql:localhost//slice1\"/>\n+        <property name=\"openjpa.slice.Two.ConnectionURL\" value=\"jdbc:mysql:localhost//slice2\"/>]]>\n+       </programlisting> \n+      </para>\n+      \n+      <para>\n+       Any OpenJPA specific property can be configured per slice basis. \n+       For example, the following configuration will use two different JDBC \n+       drivers for slice <code>One</code> and <code>Two</code>.\n+       <programlisting> \n+        <![CDATA[<property name=\"openjpa.slice.One.ConnectionDriverName\" value=\"com.mysql.jdbc.Driver\"/>\n+        <property name=\"openjpa.slice.Two.ConnectionDriverName\" value=\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"/>]]>\n+       </programlisting> \n+      </para>\n+      \n+      <para>\n+        Any property if unspecified for a particular slice will be defaulted by\n+        corresponding OpenJPA property. For example, consider following three slices\n+        <programlisting> \n+         <![CDATA[<property name=\"openjpa.slice.One.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice1\"/>\n+         <property name=\"openjpa.slice.Two.ConnectionURL\"          value=\"jdbc:mysql:localhost//slice2\"/>\n+         <property name=\"openjpa.slice.Three.ConnectionURL\"        value=\"jdbc:oracle:localhost//slice3\"/>\n+\n+         <property name=\"openjpa.ConnectionDriverName\"     value=\"com.mysql.jdbc.Driver\"/>\n+         <property name=\"openjpa.slice.Three.ConnectionDriverName\" value=\"oracle.jdbc.Driver\"/>]]>\n+        </programlisting> \n+        In this example, <code>Three</code> will use slice-specific\n+        <code>oracle.jdbc.Driver</code> driver while slice\n+        <code>One</code> and <code>Two</code> will use\n+        the driver <code>com.mysql.jdbc.Driver</code> as \n+        specified by <code>openjpa.ConnectionDriverName</code> \n+        property value.\n+      </para>\n+    </section>\n+     \n+    <section id=\"distribution_policy\">\n+       <title>Implement DistributionPolicy interface</title>\n+       <para>\n+        Slice needs to determine which slice will persist a new instance. \n+        The application can only decide this policy (for example, \n+        all PurchaseOrders before April 30 goes to slice <code>One</code>,\n+        all the rest goes to slice <code>Two</code>). This is why\n+        the application has to implement \n+        <code>org.apache.openjpa.slice.DistributionPolicy</code> and\n+        specify the implementation class in configuration\n+        <programlisting> \n+         <![CDATA[ <property name=\"openjpa.slice.DistributionPolicy\" value=\"com.acme.foo.MyOptimialDistributionPolicy\"/>]]>\n+        </programlisting>\n+       </para>\n+       \n+       <para>\n+        The interface <code>org.apache.openjpa.slice.DistributionPolicy</code>\n+        is simple with a single method. The complete listing of the\n+        documented interface follows:\n+       <programlisting> \n+       <![CDATA[ \n+public interface DistributionPolicy {\n+    /**\n+     * Gets the name of the slice where a given instance will be stored.\n+     *  \n+     * @param pc The newly persistent or to-be-merged object. \n+     * @param slices name of the configured slices.\n+     * @param context persistence context managing the given instance.\n+     * \n+     * @return identifier of the slice. This name must match one of the\n+     * configured slice names. \n+     * @see DistributedConfiguration#getSliceNames()\n+     */\n+    String distribute(Object pc, List<String> slices, Object context);\n+}\n+]]>\n+       </programlisting>\n+        </para>\n+        \n+        <para>\n+        While implementing a distribution policy the most important thing to\n+        remember is <link linkend=\"collocation_constraint\">collocation constraint</link>.\n+        Because Slice can not establish or query any cross-database relationship, all the\n+        related instances must be stored in the same database slice. \n+ \n+        Slice can determine the closure of a root object by traversal of \n+        cascaded relationships. Hence user-defined policy has to only decide the\n+        database for the root instance that is the explicit argument to \n+        <methodname>EntityManager.persist()</methodname> call.\n+        Slice will ensure that all other related instances that gets persisted by cascade\n+        is assigned to the same database slice as that of the root instance.\n+        However, the user-defined distribution policy must return the\n+        same slice identifier for the instances that are logically related but\n+        not cascaded for persist. \n+        </para>\n+    </section>\n+    \n+    <section>\n+    </section>\n+  </section>\n+  \n+  <title>Configuration Properties</title>\n+    <para>\n+    The properties to configure Slice can be classified in two broad groups.\n+The <emphasis>global</emphasis> properties apply to all the slices, for example,\n+the thread pool used to execute the queries in parallel or the transaction \n+manager used to coordinate transaction across multiple slices. \n+The <emphasis>per-slice</emphasis> properties apply to individual slice, for example,\n+the JDBC connection URL of a slice.\n+   </para>\n+   \n+   <section>\n+     <title>Global Properties</title>\n+     \n+     <section>\n+        <title>openjpa.slice.DistributionPolicy</title>\n+        <para>\n+         This <emphasis>mandatory</emphasis> plug-in property determines how newly\n+         persistent instances are distributed across individual slices. \n+         The value of this property is a fully-qualified class name that implements\n+         <ulink url=\"../javadoc/org/apache/openjpa/slice/DistributionPolicy.html\">\n+         <classname>org.apache.openjpa.slice.DistributionPolicy</classname>\n+         </ulink> interface.\n+        </para>\n+     </section>\n+     \n+     <section><title>openjpa.slice.Lenient</title>\n+      <para>\n+        This boolean plug-in property controls the behavior when one or more slice \n+        can not be connected or unavailable for some other reasons.\n+        If <code>true</code>, the unreachable slices are ignored. If \n+        <code>false</code> then any unreachable slice will raise an exception\n+        during startup.\n+        </para>\n+        <para>\n+        By default this value is set to <code>false</code> i.e. all configured\n+        slices must be available.\n+        </para> \n+     </section>\n+\n+     <section>\n+      <title>openjpa.slice.Master</title>\n+      <para>\n+       This plug-in property can be used to identify the name of the master slice. \n+       Master slice is used when a primary key is to be generated from a database sequence. \n+       </para>\n+       <para>\n+        By default the master slice is the first slice in the list of configured slice names. \n+       </para>\n+       <para>\n+              <warning>\n+              Currently, there is no provision to use sequence from \n+              multiple database slices.\n+              </warning>\n+       </para>\n+     </section>\n+    \n+     <section>\n+        <title>openjpa.slice.Names</title>\n+        <para>\n+         This plug-in property can be used to register the logical slice names.\n+         The value of this property is comma-separated list of slice names. \n+         The ordering of the names in this list is \n+         <emphasis>significant</emphasis> because \n+         <link linkend=\"distribution_policy\">DistributionPolicy</link> receives \n+         the input argument of the slice names in the same order.\n+        </para>\n+        <para>\n+        If logical slice names are not registered explicitly via this property,\n+        then all logical slice names available in the persistence unit are \n+        registered. The ordering of the slice names in this case is alphabetical.  \n+        </para>\n+        <para>\n+        If logical slice names are registered explicitly via this property, then\n+        any logical slice that is available in the persistence unit but excluded\n+        from this list is ignored. \n+        </para>\n+     </section>\n+    \n+     <section>\n+        <title>openjpa.slice.ThreadingPolicy</title>\n+        <para>\n+        This plug-in property determines the nature of thread pool being used \n+        for database operations such as query or flush on individual slices. \n+        The value of the property is a \n+        fully-qualified class name that implements \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ExecutorService.html\">\n+        <classname>java.util.concurrent.ExecutorService</classname>\n+        </ulink> interface.  \n+        Two pre-defined pools can be chosen via their aliases namely \n+        <code>fixed</code> or <code>cached</code>.\n+        </para>\n+        <para>\n+        The pre-defined alias <code>cached</code> activates a \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool()\">cached thread pool</ulink>. \n+        A cached thread pool creates new threads as needed, but will reuse \n+        previously constructed threads when they are available. This pool \n+        is suitable in scenarios that execute many short-lived asynchronous tasks.\n+        The way Slice uses the thread pool to execute database operations is \n+        akin to such scenario and hence <code>cached</code> is the default \n+        value for this plug-in property.  \n+        </para>\n+        <para>\n+        The <code>fixed</code> alias activates a \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int)\">fixed thread pool</ulink>.\n+        The fixed thread pool can be further parameterized with \n+        <code>CorePoolSize</code>, <code>MaximumPoolSize</code>, \n+        <code>KeepAliveTime</code> and <code>RejectedExecutionHandler</code>. \n+        The meaning of these parameters are described in \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.html\">JavaDoc</ulink>.\n+        The users can exercise finer control on thread pool behavior via these\n+        parameters.\n+        By default, the core pool size is <code>10</code>, maximum pool size is\n+        also <code>10</code>, keep alive time is <code>60</code> seconds and \n+        rejected execution is \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html\">aborted</ulink>.\n+        </para>\n+        <para>\n+        Both of the pre-defined aliases can be parameterized with a fully-qualified\n+        class name that implements \n+        <ulink url=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ThreadFactory.html\">\n+        <classname>java.util.concurrent.ThreadFactory</classname>\n+        </ulink> interface.\n+        </para>\n+     </section>\n+      \n+     <section>\n+      <title>openjpa.slice.TransactionPolicy</title>\n+      <para>\n+      This plug-in property determines the policy for transaction commit \n+      across multiple slices. The value of this property is a fully-qualified \n+      class name that implements \n+      <ulink url=\"http://java.sun.com/j2ee/sdk_1.3/techdocs/api/javax/transaction/TransactionManager.html\">\n+      <classname>javax.transaction.TransactionManager</classname> \n+      </ulink> interface. \n+      </para>\n+      <para>\n+      Three pre-defined policies can be chosen\n+      by their aliases namely <code>default</code>,\n+      <code>xa</code> and <code>jndi</code>. \n+      </para>\n+      <para>\n+      The <code>default</code> policy employs \n+      a Transaction Manager that commits or rolls back transaction on individual\n+      slices <emphasis>without</emphasis> a two-phase commit protocol. \n+      It does <emphasis>not</emphasis>\n+      guarantee atomic nature of transaction across all the slices because if\n+      one or more slice fails to commit, there is no way to rollback the transaction\n+      on other slices that committed successfully.\n+      </para>\n+      <para>\n+      The <code>xa</code> policy employs a Transaction Manager that that commits \n+      or rolls back transaction on individual\n+      slices using a two-phase commit protocol. The prerequisite to use this scheme\n+      is, of course, that all the slices must be configured to use\n+      XA-compliant JDBC driver. \n+      </para>\n+      <para>\n+      The <code>jndi</code> policy employs a Transaction Manager by looking up the\n+      JNDI context. The prerequisite to use this transaction\n+      manager is, of course, that all the slices must be configured to use\n+      XA-compliant JDBC driver. \n+      <warning>This JNDI based policy is not available currently.</warning>\n+      </para>\n+    </section>\n+   </section>\n+   \n+   <section>\n+     <title>Per-Slice Properties</title>\n+     <para>\n+     Any OpenJPA property can be configured for each individual slice. The property name\n+     is of the form <code>openjpa.slice.[Logical slice name].[OpenJPA Property Name]</code>.\n+     For example, <code>openjpa.slice.One.ConnectionURL</code> where <code>One</code>\n+     is the logical slice name and <code>ConnectionURL</code> is an OpenJPA property\n+     name. \n+     </para>\n+     <para>\n+     If a property is not configured for a specific slice, then the value for\n+     the property equals to the corresponding <code>openjpa.*</code> property.\n+     </para>\n+   </section>\n+  \n+</chapter>\n   \n\\ No newline at end of file"},{"sha":"de9a15e9f4b063d0883a32afdab091d4db979aa0","filename":"openjpa-slice/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/pom.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -31,7 +31,7 @@\n \t<parent>\n \t\t<groupId>org.apache.openjpa</groupId>\n \t\t<artifactId>openjpa-parent</artifactId>\n-\t\t<version>1.2.1</version>\n+\t\t<version>1.2.2</version>\n \t</parent>\n \t<properties>\n \t\t<openjpa.loglevel>INFO</openjpa.loglevel>"},{"sha":"a493c3e50489ca94fd29da3032e4ffbc66a760b0","filename":"openjpa-slice/src/main/ant/enhancer.xml","status":"modified","additions":81,"deletions":81,"changes":162,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/ant/enhancer.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/ant/enhancer.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/ant/enhancer.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,82 +1,82 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<!--\r\n-    Licensed to the Apache Software Foundation (ASF) under one\r\n-    or more contributor license agreements.  See the NOTICE file\r\n-    distributed with this work for additional information\r\n-    regarding copyright ownership.  The ASF licenses this file\r\n-    to you under the Apache License, Version 2.0 (the\r\n-    \"License\"); you may not use this file except in compliance\r\n-    with the License.  You may obtain a copy of the License at\r\n-    \r\n-    http://www.apache.org/licenses/LICENSE-2.0\r\n-    \r\n-    Unless required by applicable law or agreed to in writing,\r\n-    software distributed under the License is distributed on an\r\n-    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n-    KIND, either express or implied.  See the License for the\r\n-    specific language governing permissions and limitations\r\n-    under the License.   \r\n--->\r\n-<project name=\"enhance\" basedir=\".\">\r\n-    <!--\r\n-        This build file executes the PCEnhancer on the test entities. It's in a\r\n-        separate file instead of nested in pom.xml to make some conditional \r\n-        processing easier.\r\n-        \r\n-        Test classes will not be compiled if maven is invoked with \r\n-        -Dmaven.tests.skip=true. \r\n-    -->\r\n-\r\n-    <condition property=\"maven.test.skip.istrue\">\r\n-        <istrue value=\"${maven.test.skip}\" />\r\n-    </condition>\r\n-\r\n-    <condition property=\"test.isfalse\">\r\n-        <equals arg1=\"${test}\" arg2=\"false\" />\r\n-    </condition>\r\n-\r\n-    <!-- ================================= \r\n-          target: enhance              \r\n-         ================================= -->\r\n-    <target name=\"enhance\"\r\n-            description=\"--> run the enhancer unless test=false\"\r\n-            unless=\"test.isfalse\">\r\n-        <antcall target=\"enhance.all.entities\"\r\n-                 inheritall=\"true\"\r\n-                 inheritrefs=\"true\" />\r\n-    </target>\r\n-\r\n-    <!-- ================================= \r\n-          target: enhance.all.entities              \r\n-         ================================= -->\r\n-    <target name=\"enhance.all.entities\"\r\n-            description=\"--> enhance the test entities\"\r\n-            unless=\"maven.test.skip.istrue\">\r\n-        <echo> running enhancer</echo>\r\n-        <!-- \r\n-            Inherited references won't be present until the task is called. \r\n-            Therefore the path definition needs to stay inside the task.\r\n-          -->\r\n-        <path id=\"cp\">\r\n-            <path refid=\"maven.test.classpath\" />\r\n-        </path>\r\n-\r\n-        <taskdef name=\"openjpac\"\r\n-                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\r\n-            <classpath refid=\"cp\" />\r\n-        </taskdef>\r\n-\r\n-        <fileset id=\"enhance.path.ref\"\r\n-                 dir=\"${project.build.testOutputDirectory}\">\r\n-            <include name=\"**/Address.class\" />\r\n-            <include name=\"**/Person.class\" />\r\n-            <include name=\"**/PObject.class\" />\r\n-            <exclude name=\"**/Test*.class\" />\r\n-        </fileset>\r\n-        <openjpac>\r\n-            <classpath refid=\"cp\" />\r\n-            <fileset refid=\"enhance.path.ref\" />\r\n-            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\r\n-        </openjpac>\r\n-    </target>\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+    \n+    http://www.apache.org/licenses/LICENSE-2.0\n+    \n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.   \n+-->\n+<project name=\"enhance\" basedir=\".\">\n+    <!--\n+        This build file executes the PCEnhancer on the test entities. It's in a\n+        separate file instead of nested in pom.xml to make some conditional \n+        processing easier.\n+        \n+        Test classes will not be compiled if maven is invoked with \n+        -Dmaven.tests.skip=true. \n+    -->\n+\n+    <condition property=\"maven.test.skip.istrue\">\n+        <istrue value=\"${maven.test.skip}\" />\n+    </condition>\n+\n+    <condition property=\"test.isfalse\">\n+        <equals arg1=\"${test}\" arg2=\"false\" />\n+    </condition>\n+\n+    <!-- ================================= \n+          target: enhance              \n+         ================================= -->\n+    <target name=\"enhance\"\n+            description=\"--> run the enhancer unless test=false\"\n+            unless=\"test.isfalse\">\n+        <antcall target=\"enhance.all.entities\"\n+                 inheritall=\"true\"\n+                 inheritrefs=\"true\" />\n+    </target>\n+\n+    <!-- ================================= \n+          target: enhance.all.entities              \n+         ================================= -->\n+    <target name=\"enhance.all.entities\"\n+            description=\"--> enhance the test entities\"\n+            unless=\"maven.test.skip.istrue\">\n+        <echo> running enhancer</echo>\n+        <!-- \n+            Inherited references won't be present until the task is called. \n+            Therefore the path definition needs to stay inside the task.\n+          -->\n+        <path id=\"cp\">\n+            <path refid=\"maven.test.classpath\" />\n+        </path>\n+\n+        <taskdef name=\"openjpac\"\n+                 classname=\"org.apache.openjpa.ant.PCEnhancerTask\">\n+            <classpath refid=\"cp\" />\n+        </taskdef>\n+\n+        <fileset id=\"enhance.path.ref\"\n+                 dir=\"${project.build.testOutputDirectory}\">\n+            <include name=\"**/Address.class\" />\n+            <include name=\"**/Person.class\" />\n+            <include name=\"**/PObject.class\" />\n+            <exclude name=\"**/Test*.class\" />\n+        </fileset>\n+        <openjpac>\n+            <classpath refid=\"cp\" />\n+            <fileset refid=\"enhance.path.ref\" />\n+            <config log=\"DefaultLevel=${openjpa.loglevel}\" />\n+        </openjpac>\n+    </target>\n </project>\n\\ No newline at end of file"},{"sha":"15f7506b22470a83693d866e30978f763a673804","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","status":"modified","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedBrokerImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,93 +1,93 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import org.apache.openjpa.kernel.FinalizingBrokerImpl;\r\n-import org.apache.openjpa.kernel.OpCallbacks;\r\n-import org.apache.openjpa.kernel.OpenJPAStateManager;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * A specialized Broker to associate slice identifiers with the StateManagers as\r\n- * they are persisted in a cascade. This intervention helps the user to define\r\n- * distribution policy only for root instances i.e. the instances that are\r\n- * explicit argument to persist() call. The cascaded instances are assigned the\r\n- * same slice to honor collocation constraint.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-@SuppressWarnings(\"serial\")\r\n-public class DistributedBrokerImpl extends FinalizingBrokerImpl {\r\n-\tprivate transient String slice;\r\n-\r\n-\tprivate static final Localizer _loc =\r\n-\t\t\tLocalizer.forPackage(DistributedBrokerImpl.class);\r\n-\r\n-\t/**\r\n-\t * Assigns slice identifier to the resultant StateManager as initialized by\r\n-\t * the super class implementation. The slice identifier is decided by\r\n-\t * {@link DistributionPolicy} for given <code>pc</code> if it is a root\r\n-\t * instance i.e. the argument of the user application's persist() call. The\r\n-\t * cascaded instances are detected by non-empty status of the current\r\n-\t * operating set. The slice is assigned only if a StateManager has never\r\n-\t * been assigned before.\r\n-\t */\r\n-\t@Override\r\n-\tpublic OpenJPAStateManager persist(Object pc, Object id, boolean explicit,\r\n-\t\t\tOpCallbacks call) {\r\n-\t\tOpenJPAStateManager sm = getStateManager(pc);\r\n-\t\tif (getOperatingSet().isEmpty()\r\n-\t\t\t\t&& (sm == null || sm.getImplData() == null)) {\r\n-\t\t\tslice = getSlice(pc);\r\n-\t\t}\r\n-\t\tsm = super.persist(pc, id, explicit, call);\r\n-\t\tif (sm.getImplData() == null)\r\n-\t\t\tsm.setImplData(slice, true);\r\n-\r\n-\t\treturn sm;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Gets the slice by the user-defined distribution policy.\r\n-\t */\r\n-\tString getSlice(Object pc) {\r\n-\t\tDistributedConfiguration conf =\r\n-\t\t\t\t(DistributedConfiguration) getConfiguration();\r\n-\t\tString slice =\r\n-\t\t\t\t(conf.getDistributionPolicyInstance().distribute(pc, conf\r\n-\t\t\t\t\t\t.getActiveSliceNames(), this));\r\n-\t\tif (!conf.getActiveSliceNames().contains(slice))\r\n-\t\t\tthrow new UserException(_loc.get(\"bad-policy-slice\", new Object[] {\r\n-\t\t\t\t\tconf.getDistributionPolicyInstance().getClass().getName(),\r\n-\t\t\t\t\tslice, pc, conf.getActiveSliceNames() }));\r\n-\t\treturn slice;\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic boolean endOperation() {\r\n-\t    try {\r\n-\t        return super.endOperation();\r\n-\t    } catch (Exception ex) {\r\n-\t        \r\n-\t    }\r\n-\t    return true;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice;\n+\n+import org.apache.openjpa.kernel.FinalizingBrokerImpl;\n+import org.apache.openjpa.kernel.OpCallbacks;\n+import org.apache.openjpa.kernel.OpenJPAStateManager;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * A specialized Broker to associate slice identifiers with the StateManagers as\n+ * they are persisted in a cascade. This intervention helps the user to define\n+ * distribution policy only for root instances i.e. the instances that are\n+ * explicit argument to persist() call. The cascaded instances are assigned the\n+ * same slice to honor collocation constraint.\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+@SuppressWarnings(\"serial\")\n+public class DistributedBrokerImpl extends FinalizingBrokerImpl {\n+\tprivate transient String slice;\n+\n+\tprivate static final Localizer _loc =\n+\t\t\tLocalizer.forPackage(DistributedBrokerImpl.class);\n+\n+\t/**\n+\t * Assigns slice identifier to the resultant StateManager as initialized by\n+\t * the super class implementation. The slice identifier is decided by\n+\t * {@link DistributionPolicy} for given <code>pc</code> if it is a root\n+\t * instance i.e. the argument of the user application's persist() call. The\n+\t * cascaded instances are detected by non-empty status of the current\n+\t * operating set. The slice is assigned only if a StateManager has never\n+\t * been assigned before.\n+\t */\n+\t@Override\n+\tpublic OpenJPAStateManager persist(Object pc, Object id, boolean explicit,\n+\t\t\tOpCallbacks call) {\n+\t\tOpenJPAStateManager sm = getStateManager(pc);\n+\t\tif (getOperatingSet().isEmpty()\n+\t\t\t\t&& (sm == null || sm.getImplData() == null)) {\n+\t\t\tslice = getSlice(pc);\n+\t\t}\n+\t\tsm = super.persist(pc, id, explicit, call);\n+\t\tif (sm.getImplData() == null)\n+\t\t\tsm.setImplData(slice, true);\n+\n+\t\treturn sm;\n+\t}\n+\n+\t/**\n+\t * Gets the slice by the user-defined distribution policy.\n+\t */\n+\tString getSlice(Object pc) {\n+\t\tDistributedConfiguration conf =\n+\t\t\t\t(DistributedConfiguration) getConfiguration();\n+\t\tString slice =\n+\t\t\t\t(conf.getDistributionPolicyInstance().distribute(pc, conf\n+\t\t\t\t\t\t.getActiveSliceNames(), this));\n+\t\tif (!conf.getActiveSliceNames().contains(slice))\n+\t\t\tthrow new UserException(_loc.get(\"bad-policy-slice\", new Object[] {\n+\t\t\t\t\tconf.getDistributionPolicyInstance().getClass().getName(),\n+\t\t\t\t\tslice, pc, conf.getActiveSliceNames() }));\n+\t\treturn slice;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean endOperation() {\n+\t    try {\n+\t        return super.endOperation();\n+\t    } catch (Exception ex) {\n+\t        \n+\t    }\n+\t    return true;\n+\t}\n+}"},{"sha":"1c58a73a482b1ed9a7e0fa1b9273850f3aff4023","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributedConfiguration.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,78 +1,78 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-\r\n-/**\r\n- * A configuration for multiple data stores, each referred as <em>slice</em>.\r\n- * This configuration allows each underlying slice be configured with its\r\n- * own specific configuration properties such as JDBC Driver or connection\r\n- * user/password etc. <br>\r\n- * This configuration also extends by adding a {@link DistributionPolicy \r\n- * DistributionPolicy} that governs how new instances be distributed\r\n- * among the slices.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-public interface DistributedConfiguration extends OpenJPAConfiguration {\r\n-\t/**\r\n-\t * Gets the active slice identifiers. This list is determined by the\r\n-\t * configuration properties either by explicit listing in \r\n-\t * <code>openjpa.slice.Names</code> property or by scanning \r\n-\t * <code>openjpa.slice.*.*</code> properties.\r\n-\t * <br> \r\n-\t * The ordering of the slice identifiers is determined when they are\r\n-\t * specified explicitly in <code>openjpa.slice.Names</code> property or \r\n-\t * ordered alphabetically when found by scanning the properties.\r\n-\t * <br>\r\n-\t * This list always returns the identifiers that are <em>active</em>, slices\r\n-\t * that can not be connected to are not included in this list.\r\n-\t */\r\n-\tList<String> getActiveSliceNames();\r\n-\t\r\n-\t/**\r\n-\t * Gets the available slice identifiers irrespective of their status.\r\n-\t * @return\r\n-\t */\r\n-    List<String> getAvailableSliceNames();\r\n-\r\n-\t\r\n-\t/**\r\n-\t * Gets the slices of given status.\r\n-\t * @param statuses list of status flags. If null, returns all slices \r\n-\t * irrespective of status.\r\n-\t */\r\n-\tList<Slice> getSlices(Slice.Status...statuses);\r\n-\t\r\n-\t/**\r\n-\t * Gets the Slice for a given name.\r\n-\t * Exception is raised if the given slice is not configured.\r\n-\t */\r\n-\tSlice getSlice(String sliceName);\r\n-\t\r\n-\t/**\r\n-\t * Gets the policy that governs how new instances will be distributed across\r\n-\t * the available slices.\r\n-\t */\r\n-\tDistributionPolicy getDistributionPolicyInstance();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice;\n+\n+import java.util.List;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+\n+/**\n+ * A configuration for multiple data stores, each referred as <em>slice</em>.\n+ * This configuration allows each underlying slice be configured with its\n+ * own specific configuration properties such as JDBC Driver or connection\n+ * user/password etc. <br>\n+ * This configuration also extends by adding a {@link DistributionPolicy \n+ * DistributionPolicy} that governs how new instances be distributed\n+ * among the slices.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+public interface DistributedConfiguration extends OpenJPAConfiguration {\n+\t/**\n+\t * Gets the active slice identifiers. This list is determined by the\n+\t * configuration properties either by explicit listing in \n+\t * <code>openjpa.slice.Names</code> property or by scanning \n+\t * <code>openjpa.slice.*.*</code> properties.\n+\t * <br> \n+\t * The ordering of the slice identifiers is determined when they are\n+\t * specified explicitly in <code>openjpa.slice.Names</code> property or \n+\t * ordered alphabetically when found by scanning the properties.\n+\t * <br>\n+\t * This list always returns the identifiers that are <em>active</em>, slices\n+\t * that can not be connected to are not included in this list.\n+\t */\n+\tList<String> getActiveSliceNames();\n+\t\n+\t/**\n+\t * Gets the available slice identifiers irrespective of their status.\n+\t * @return\n+\t */\n+    List<String> getAvailableSliceNames();\n+\n+\t\n+\t/**\n+\t * Gets the slices of given status.\n+\t * @param statuses list of status flags. If null, returns all slices \n+\t * irrespective of status.\n+\t */\n+\tList<Slice> getSlices(Slice.Status...statuses);\n+\t\n+\t/**\n+\t * Gets the Slice for a given name.\n+\t * Exception is raised if the given slice is not configured.\n+\t */\n+\tSlice getSlice(String sliceName);\n+\t\n+\t/**\n+\t * Gets the policy that governs how new instances will be distributed across\n+\t * the available slices.\n+\t */\n+\tDistributionPolicy getDistributionPolicyInstance();\n+}"},{"sha":"b7a48dceb71cce8bd049624785460a2cecc06e77","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","status":"modified","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/DistributionPolicy.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,47 +1,47 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import java.util.List;\r\n-\r\n-\r\n-/**\r\n- * Policy to select one of the physical databases referred as <em>slice</em>\r\n- * in which a given persistent instance will be stored.\r\n- *  \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-public interface DistributionPolicy {\r\n-\t/**\r\n-\t * Gets the name of the slice where a given instance will be stored.\r\n-\t *  \r\n-\t * @param pc The newly persistent or to-be-merged object. \r\n-\t * @param slices list of names of the active slices. The ordering of \r\n-\t * the list is either explicit <code>openjpa.slice.Names</code> property\r\n-\t * or implicit i.e. alphabetic order of available identifiers if \r\n-\t * <code>openjpa.slice.Names</code> is unspecified.  \r\n-\t * @param context generic persistence context managing the given instance.\r\n-\t * \r\n-\t * @return identifier of the slice. This name must match one of the\r\n-\t * given slice names. \r\n-\t * @see DistributedConfiguration#getActiveSliceNames()\r\n-\t */\r\n-\tString distribute(Object pc, List<String> slices, Object context);\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice;\n+\n+import java.util.List;\n+\n+\n+/**\n+ * Policy to select one of the physical databases referred as <em>slice</em>\n+ * in which a given persistent instance will be stored.\n+ *  \n+ * @author Pinaki Poddar \n+ *\n+ */\n+public interface DistributionPolicy {\n+\t/**\n+\t * Gets the name of the slice where a given instance will be stored.\n+\t *  \n+\t * @param pc The newly persistent or to-be-merged object. \n+\t * @param slices list of names of the active slices. The ordering of \n+\t * the list is either explicit <code>openjpa.slice.Names</code> property\n+\t * or implicit i.e. alphabetic order of available identifiers if \n+\t * <code>openjpa.slice.Names</code> is unspecified.  \n+\t * @param context generic persistence context managing the given instance.\n+\t * \n+\t * @return identifier of the slice. This name must match one of the\n+\t * given slice names. \n+\t * @see DistributedConfiguration#getActiveSliceNames()\n+\t */\n+\tString distribute(Object pc, List<String> slices, Object context);\n+}"},{"sha":"5044ba084bf249f1e799083a1b2ec4e6aa0eb2e0","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","status":"modified","additions":108,"deletions":108,"changes":216,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/ExecutorServiceValue.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,108 +1,108 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.List;\r\n-import java.util.concurrent.ExecutorService;\r\n-import java.util.concurrent.Executors;\r\n-import java.util.concurrent.PriorityBlockingQueue;\r\n-import java.util.concurrent.SynchronousQueue;\r\n-import java.util.concurrent.ThreadFactory;\r\n-import java.util.concurrent.ThreadPoolExecutor;\r\n-import java.util.concurrent.TimeUnit;\r\n-\r\n-import org.apache.openjpa.lib.conf.Configuration;\r\n-import org.apache.openjpa.lib.conf.Configurations;\r\n-import org.apache.openjpa.lib.conf.PluginValue;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.lib.util.Options;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * Value type used to represent a {@link ExecutorService}.\r\n- * This value controls the thread pool parameters. The thread pool is used\r\n- * to execute the queries.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * @nojavadoc\r\n- */\r\n-\r\n-public class ExecutorServiceValue extends PluginValue {\r\n-    private static List<String> known =\r\n-            Arrays.asList(new String[] { \"cached\", \"fixed\" });\r\n-\r\n-    private static Localizer _loc =\r\n-            Localizer.forPackage(ExecutorServiceValue.class);\r\n-\r\n-    public ExecutorServiceValue() {\r\n-        super(\"ThreadingPolicy\", true);\r\n-        setDefault(\"cached\");\r\n-    }\r\n-\r\n-    public void setProperties(String props) {\r\n-        super.setProperties(props);\r\n-    }\r\n-\r\n-    /**\r\n-     * Configures a cached or fixed thread pool.\r\n-     */\r\n-    @Override\r\n-    public Object instantiate(Class type, Configuration conf, boolean fatal) {\r\n-        Object obj = null;\r\n-        int defaultSize = 10;\r\n-        String cls = getClassName();\r\n-        if (!known.contains(cls))\r\n-            cls = \"cached\";\r\n-\r\n-        Options opts = Configurations.parseProperties(getProperties());\r\n-\r\n-        ThreadFactory factory = null;\r\n-        if (opts.containsKey(\"ThreadFactory\")) {\r\n-            String fName = opts.getProperty(\"ThreadFactory\");\r\n-            try {\r\n-                factory = (ThreadFactory) Class.forName(fName).newInstance();\r\n-                Configurations.configureInstance(factory, conf, opts,\r\n-                        getProperty());\r\n-            } catch (Throwable t) {\r\n-                throw new UserException(_loc.get(\"bad-thread-factory\", fName), t);\r\n-            } finally {\r\n-                opts.removeProperty(\"ThreadFactory\");\r\n-            }\r\n-        } else {\r\n-            factory = Executors.defaultThreadFactory();\r\n-        }\r\n-        if (\"cached\".equals(cls)) {\r\n-            obj = Executors.newCachedThreadPool(factory);\r\n-        } else if (\"fixed\".equals(cls)) {\r\n-            long keepAliveTime = 60L;\r\n-            if (opts.containsKey(\"KeepAliveTime\")) {\r\n-                keepAliveTime = opts.getLongProperty(\"KeepAliveTime\");\r\n-                opts.removeLongProperty(\"KeepAliveTime\");\r\n-            }\r\n-            obj = new ThreadPoolExecutor(defaultSize, defaultSize,\r\n-                            keepAliveTime, TimeUnit.SECONDS,\r\n-                            new SynchronousQueue<Runnable>(), factory);\r\n-\r\n-            Configurations.configureInstance(obj, conf, opts, getProperty());\r\n-        }\r\n-        set(obj, true);\r\n-        return obj;\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.PriorityBlockingQueue;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.lib.util.Options;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Value type used to represent a {@link ExecutorService}.\n+ * This value controls the thread pool parameters. The thread pool is used\n+ * to execute the queries.\n+ * \n+ * @author Pinaki Poddar\n+ * @nojavadoc\n+ */\n+\n+public class ExecutorServiceValue extends PluginValue {\n+    private static List<String> known =\n+            Arrays.asList(new String[] { \"cached\", \"fixed\" });\n+\n+    private static Localizer _loc =\n+            Localizer.forPackage(ExecutorServiceValue.class);\n+\n+    public ExecutorServiceValue() {\n+        super(\"ThreadingPolicy\", true);\n+        setDefault(\"cached\");\n+    }\n+\n+    public void setProperties(String props) {\n+        super.setProperties(props);\n+    }\n+\n+    /**\n+     * Configures a cached or fixed thread pool.\n+     */\n+    @Override\n+    public Object instantiate(Class type, Configuration conf, boolean fatal) {\n+        Object obj = null;\n+        int defaultSize = 10;\n+        String cls = getClassName();\n+        if (!known.contains(cls))\n+            cls = \"cached\";\n+\n+        Options opts = Configurations.parseProperties(getProperties());\n+\n+        ThreadFactory factory = null;\n+        if (opts.containsKey(\"ThreadFactory\")) {\n+            String fName = opts.getProperty(\"ThreadFactory\");\n+            try {\n+                factory = (ThreadFactory) Class.forName(fName).newInstance();\n+                Configurations.configureInstance(factory, conf, opts,\n+                        getProperty());\n+            } catch (Throwable t) {\n+                throw new UserException(_loc.get(\"bad-thread-factory\", fName), t);\n+            } finally {\n+                opts.removeProperty(\"ThreadFactory\");\n+            }\n+        } else {\n+            factory = Executors.defaultThreadFactory();\n+        }\n+        if (\"cached\".equals(cls)) {\n+            obj = Executors.newCachedThreadPool(factory);\n+        } else if (\"fixed\".equals(cls)) {\n+            long keepAliveTime = 60L;\n+            if (opts.containsKey(\"KeepAliveTime\")) {\n+                keepAliveTime = opts.getLongProperty(\"KeepAliveTime\");\n+                opts.removeLongProperty(\"KeepAliveTime\");\n+            }\n+            obj = new ThreadPoolExecutor(defaultSize, defaultSize,\n+                            keepAliveTime, TimeUnit.SECONDS,\n+                            new SynchronousQueue<Runnable>(), factory);\n+\n+            Configurations.configureInstance(obj, conf, opts, getProperty());\n+        }\n+        set(obj, true);\n+        return obj;\n+    }\n+}"},{"sha":"2ed25c801e911dc0cde79af6ef9c8ec84fb408ab","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/ProductDerivation.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,63 +1,63 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAProductDerivation;\r\n-import org.apache.openjpa.lib.conf.AbstractProductDerivation;\r\n-import org.apache.openjpa.slice.jdbc.DistributedJDBCBrokerFactory;\r\n-\r\n-/**\r\n- * Derives configuration for Slice.\r\n- * Introduces a specialized BrokerFactory aliased as <code>slice</code>.\r\n- * All Slice specific configuration is prefixed as \r\n- * <code>openjpa.slice.*.*</code>\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-public class ProductDerivation extends AbstractProductDerivation implements\r\n-\t\tOpenJPAProductDerivation {\r\n-    /**\r\n-     * Prefix for all Slice-specific configuration properties. \r\n-     */\r\n-    public static final String PREFIX_SLICE = \"openjpa.slice\";\r\n-    \r\n-    /**\r\n-     * Hint key <code>openjpa.hint.slice.Target </code> to specify a subset of \r\n-     * slices for query. The value corresponding to the key is comma-separated\r\n-     * list of slice identifiers.\r\n-     *  \r\n-     */\r\n-    public static final String HINT_TARGET  = \"openjpa.hint.slice.Target\";\r\n-    \r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic void putBrokerFactoryAliases(Map m) {\r\n-\t\tm.put(\"slice\", DistributedJDBCBrokerFactory.class.getName());\r\n-\t}\r\n-\r\n-\tpublic String getConfigurationPrefix() {\r\n-\t\treturn PREFIX_SLICE;\r\n-\t}\r\n-\r\n-\tpublic int getType() {\r\n-\t\treturn TYPE_FEATURE;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.conf.OpenJPAProductDerivation;\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n+import org.apache.openjpa.slice.jdbc.DistributedJDBCBrokerFactory;\n+\n+/**\n+ * Derives configuration for Slice.\n+ * Introduces a specialized BrokerFactory aliased as <code>slice</code>.\n+ * All Slice specific configuration is prefixed as \n+ * <code>openjpa.slice.*.*</code>\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+public class ProductDerivation extends AbstractProductDerivation implements\n+\t\tOpenJPAProductDerivation {\n+    /**\n+     * Prefix for all Slice-specific configuration properties. \n+     */\n+    public static final String PREFIX_SLICE = \"openjpa.slice\";\n+    \n+    /**\n+     * Hint key <code>openjpa.hint.slice.Target </code> to specify a subset of \n+     * slices for query. The value corresponding to the key is comma-separated\n+     * list of slice identifiers.\n+     *  \n+     */\n+    public static final String HINT_TARGET  = \"openjpa.hint.slice.Target\";\n+    \n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void putBrokerFactoryAliases(Map m) {\n+\t\tm.put(\"slice\", DistributedJDBCBrokerFactory.class.getName());\n+\t}\n+\n+\tpublic String getConfigurationPrefix() {\n+\t\treturn PREFIX_SLICE;\n+\t}\n+\n+\tpublic int getType() {\n+\t\treturn TYPE_FEATURE;\n+\t}\n+}"},{"sha":"9587a8656bbe24dd595178cb50686048bfe8afb3","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","status":"modified","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/Slice.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,99 +1,99 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-\r\n-/**\r\n- * Represents a database slice of immutable logical name, a configuration and\r\n- * status.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-public class Slice implements Comparable<Slice> {\r\n-    public enum Status {\r\n-        NOT_INITIALIZED, \r\n-        ACTIVE, \r\n-        INACTIVE, // configured but not available\r\n-        EXCLUDED  // configured but not used\r\n-    }; \r\n-    \r\n-    private final String name;\r\n-    private transient final OpenJPAConfiguration conf;\r\n-    private transient Status status;\r\n-    \r\n-    /**\r\n-     * Supply the logical name and configuration.\r\n-     */\r\n-    public Slice(String name, OpenJPAConfiguration conf) {\r\n-        this.name = name;\r\n-        this.conf = conf;\r\n-        this.status = Status.NOT_INITIALIZED;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Gets the immutable logical name.\r\n-     */\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-    \r\n-    public OpenJPAConfiguration getConfiguration() {\r\n-        return conf;\r\n-    }\r\n-    \r\n-    public Status getStatus() {\r\n-        return status;\r\n-    }\r\n-    \r\n-    public void setStatus(Status status) {\r\n-        this.status = status;\r\n-    }\r\n-    \r\n-    public boolean isActive() {\r\n-        return status == Status.ACTIVE;\r\n-    }\r\n-    \r\n-    public String toString() {\r\n-        return name;\r\n-    }\r\n-    \r\n-    public int compareTo(Slice other) {\r\n-        return name.compareTo(other.name);\r\n-    }\r\n-    \r\n-    /**\r\n-     * Equals by name.\r\n-     */\r\n-    @Override\r\n-    public boolean equals(Object other) {\r\n-        if (this == other) return true;\r\n-        if (other == null) return false;\r\n-        if (other instanceof Slice) {\r\n-            return name.equals(((Slice)other).getName());\r\n-        }\r\n-        return false;\r\n-    }\r\n-    \r\n-    @Override\r\n-    public int hashCode() {\r\n-        return name.hashCode();\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+\n+/**\n+ * Represents a database slice of immutable logical name, a configuration and\n+ * status.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+public class Slice implements Comparable<Slice> {\n+    public enum Status {\n+        NOT_INITIALIZED, \n+        ACTIVE, \n+        INACTIVE, // configured but not available\n+        EXCLUDED  // configured but not used\n+    }; \n+    \n+    private final String name;\n+    private transient final OpenJPAConfiguration conf;\n+    private transient Status status;\n+    \n+    /**\n+     * Supply the logical name and configuration.\n+     */\n+    public Slice(String name, OpenJPAConfiguration conf) {\n+        this.name = name;\n+        this.conf = conf;\n+        this.status = Status.NOT_INITIALIZED;\n+    }\n+    \n+    /**\n+     * Gets the immutable logical name.\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+    \n+    public OpenJPAConfiguration getConfiguration() {\n+        return conf;\n+    }\n+    \n+    public Status getStatus() {\n+        return status;\n+    }\n+    \n+    public void setStatus(Status status) {\n+        this.status = status;\n+    }\n+    \n+    public boolean isActive() {\n+        return status == Status.ACTIVE;\n+    }\n+    \n+    public String toString() {\n+        return name;\n+    }\n+    \n+    public int compareTo(Slice other) {\n+        return name.compareTo(other.name);\n+    }\n+    \n+    /**\n+     * Equals by name.\n+     */\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) return true;\n+        if (other == null) return false;\n+        if (other instanceof Slice) {\n+            return name.equals(((Slice)other).getName());\n+        }\n+        return false;\n+    }\n+    \n+    @Override\n+    public int hashCode() {\n+        return name.hashCode();\n+    }\n+}"},{"sha":"e04f09a67c6a62c51c3672ece1dc55a878a795d6","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/SlicePersistence.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,50 +1,50 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice;\r\n-\r\n-import org.apache.openjpa.enhance.PersistenceCapable;\r\n-import org.apache.openjpa.kernel.StateManagerImpl;\r\n-import org.apache.openjpa.util.ImplHelper;\r\n-\r\n-/**\r\n- * A helper to determine the slice identifier of an instance.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-public class SlicePersistence {\r\n-\t/**\r\n-\t * Get the slice identifier for the given instance if it is a managed\r\n-\t * instance and has been assigned to a slice.\r\n-\t * \r\n-\t * @return name of the slice, if any. null otherwise.\r\n-\t */\r\n-\tpublic static String getSlice(Object obj) {\r\n-\t\tif (obj == null)\r\n-\t\t\treturn null;\r\n-\t\tPersistenceCapable pc = ImplHelper.toPersistenceCapable(obj, null);\r\n-\t\tif (pc == null)\r\n-\t\t\treturn null;\r\n-\t\tStateManagerImpl sm = (StateManagerImpl)pc.pcGetStateManager();\r\n-\t\tif (sm == null)\r\n-\t\t\treturn null;\r\n-\t\tObject slice = sm.getImplData();\r\n-\t\treturn (slice instanceof String) ? (String)slice : null;\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice;\n+\n+import org.apache.openjpa.enhance.PersistenceCapable;\n+import org.apache.openjpa.kernel.StateManagerImpl;\n+import org.apache.openjpa.util.ImplHelper;\n+\n+/**\n+ * A helper to determine the slice identifier of an instance.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+public class SlicePersistence {\n+\t/**\n+\t * Get the slice identifier for the given instance if it is a managed\n+\t * instance and has been assigned to a slice.\n+\t * \n+\t * @return name of the slice, if any. null otherwise.\n+\t */\n+\tpublic static String getSlice(Object obj) {\n+\t\tif (obj == null)\n+\t\t\treturn null;\n+\t\tPersistenceCapable pc = ImplHelper.toPersistenceCapable(obj, null);\n+\t\tif (pc == null)\n+\t\t\treturn null;\n+\t\tStateManagerImpl sm = (StateManagerImpl)pc.pcGetStateManager();\n+\t\tif (sm == null)\n+\t\t\treturn null;\n+\t\tObject slice = sm.getImplData();\n+\t\treturn (slice instanceof String) ? (String)slice : null;\n+\t}\n+}"},{"sha":"4129f23c88810ace0ea636d2e20a1541bdc25953","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","status":"modified","additions":263,"deletions":263,"changes":526,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedConnection.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,263 +1,263 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.jdbc;\r\n-\r\n-import java.sql.CallableStatement;\r\n-import java.sql.Connection;\r\n-import java.sql.DatabaseMetaData;\r\n-import java.sql.PreparedStatement;\r\n-import java.sql.SQLException;\r\n-import java.sql.SQLWarning;\r\n-import java.sql.Savepoint;\r\n-import java.sql.Statement;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-/**\r\n- * A virtual connection that contains multiple physical connections.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-class DistributedConnection implements Connection {\r\n-\tprivate final List<Connection> real;\r\n-\tprivate final Connection master;\r\n-\r\n-\tpublic DistributedConnection(List<Connection> connections) {\r\n-\t\tif (connections == null || connections.isEmpty())\r\n-\t\t\tthrow new NullPointerException();\r\n-\t\treal = connections;\r\n-\t\tmaster = connections.get(0);\r\n-\t}\r\n-\t\r\n-\tpublic boolean contains(Connection c) {\r\n-\t\treturn real.contains(c);\r\n-\t}\r\n-\r\n-\tpublic void clearWarnings() throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.clearWarnings();\r\n-\t}\r\n-\r\n-\tpublic void close() throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.close();\r\n-\t}\r\n-\r\n-\tpublic void commit() throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.commit();\r\n-\t}\r\n-\r\n-\tpublic Statement createStatement() throws SQLException {\r\n-\t\tDistributedStatement ret = new DistributedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.createStatement());\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic Statement createStatement(int arg0, int arg1) throws SQLException {\r\n-\t\tDistributedStatement ret = new DistributedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.createStatement(arg0, arg1));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic Statement createStatement(int arg0, int arg1, int arg2)\r\n-\t\t\tthrows SQLException {\r\n-\t\tDistributedStatement ret = new DistributedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.createStatement(arg0, arg1, arg2));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic boolean getAutoCommit() throws SQLException {\r\n-\t\treturn master.getAutoCommit();\r\n-\t}\r\n-\r\n-\tpublic String getCatalog() throws SQLException {\r\n-\t\treturn master.getCatalog();\r\n-\t}\r\n-\r\n-\tpublic int getHoldability() throws SQLException {\r\n-\t\treturn master.getHoldability();\r\n-\t}\r\n-\r\n-\tpublic DatabaseMetaData getMetaData() throws SQLException {\r\n-\t\treturn master.getMetaData();\r\n-\t}\r\n-\r\n-\tpublic int getTransactionIsolation() throws SQLException {\r\n-\t\treturn master.getTransactionIsolation();\r\n-\t}\r\n-\r\n-\tpublic Map<String, Class<?>> getTypeMap() throws SQLException {\r\n-\t\treturn master.getTypeMap();\r\n-\t}\r\n-\r\n-\tpublic SQLWarning getWarnings() throws SQLException {\r\n-\t\treturn master.getWarnings();\r\n-\t}\r\n-\r\n-\tpublic boolean isClosed() throws SQLException {\r\n-\t\tboolean ret = true;\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret &= c.isClosed();\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic boolean isReadOnly() throws SQLException {\r\n-\t\tboolean ret = true;\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret &= c.isReadOnly();\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic String nativeSQL(String arg0) throws SQLException {\r\n-\t\treturn master.nativeSQL(arg0);\r\n-\t}\r\n-\r\n-\tpublic CallableStatement prepareCall(String arg0) throws SQLException {\r\n-\t\tthrow new UnsupportedOperationException();\r\n-\t}\r\n-\r\n-\tpublic CallableStatement prepareCall(String arg0, int arg1, int arg2)\r\n-\t\t\tthrows SQLException {\r\n-\t\tthrow new UnsupportedOperationException();\r\n-\t}\r\n-\r\n-\tpublic CallableStatement prepareCall(String arg0, int arg1, int arg2,\r\n-\t\t\tint arg3) throws SQLException {\r\n-\t\tthrow new UnsupportedOperationException();\r\n-\t}\r\n-\r\n-\tpublic PreparedStatement prepareStatement(String arg0) throws SQLException {\r\n-\t\t// TODO: Big hack\r\n-\t\tif (arg0.startsWith(\"SELECT SEQUENCE_VALUE FROM OPENJPA_SEQUENCE_TABLE\"))\r\n-\t\t\treturn master.prepareStatement(arg0);\r\n-\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.prepareStatement(arg0));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic PreparedStatement prepareStatement(String arg0, int arg1)\r\n-\t\t\tthrows SQLException {\r\n-\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.prepareStatement(arg0, arg1));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic PreparedStatement prepareStatement(String arg0, int[] arg1)\r\n-\t\t\tthrows SQLException {\r\n-\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.prepareStatement(arg0, arg1));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic PreparedStatement prepareStatement(String arg0, String[] arg1)\r\n-\t\t\tthrows SQLException {\r\n-\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.prepareStatement(arg0, arg1));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic PreparedStatement prepareStatement(String arg0, int arg1, int arg2)\r\n-\t\t\tthrows SQLException {\r\n-\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.prepareStatement(arg0, arg1, arg2));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic PreparedStatement prepareStatement(String arg0, int arg1, int arg2,\r\n-\t\t\tint arg3) throws SQLException {\r\n-\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\r\n-\t\tfor (Connection c : real) {\r\n-\t\t\tret.add(c.prepareStatement(arg0, arg1, arg2));\r\n-\t\t}\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic void releaseSavepoint(Savepoint arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.releaseSavepoint(arg0);\r\n-\t}\r\n-\r\n-\tpublic void rollback() throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.rollback();\r\n-\t}\r\n-\r\n-\tpublic void rollback(Savepoint arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.rollback(arg0);\r\n-\t}\r\n-\r\n-\tpublic void setAutoCommit(boolean arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.setAutoCommit(arg0);\r\n-\t}\r\n-\r\n-\tpublic void setCatalog(String arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.setCatalog(arg0);\r\n-\t}\r\n-\r\n-\tpublic void setHoldability(int arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.setHoldability(arg0);\r\n-\t}\r\n-\r\n-\tpublic void setReadOnly(boolean arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.setReadOnly(arg0);\r\n-\t}\r\n-\r\n-\tpublic Savepoint setSavepoint() throws SQLException {\r\n-\t\tthrow new UnsupportedOperationException();\r\n-\t}\r\n-\r\n-\tpublic Savepoint setSavepoint(String arg0) throws SQLException {\r\n-\t\tthrow new UnsupportedOperationException();\r\n-\t}\r\n-\r\n-\tpublic void setTransactionIsolation(int arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.setTransactionIsolation(arg0);\r\n-\t}\r\n-\r\n-\tpublic void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {\r\n-\t\tfor (Connection c : real)\r\n-\t\t\tc.setTypeMap(arg0);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice.jdbc;\n+\n+import java.sql.CallableStatement;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.Savepoint;\n+import java.sql.Statement;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A virtual connection that contains multiple physical connections.\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+class DistributedConnection implements Connection {\n+\tprivate final List<Connection> real;\n+\tprivate final Connection master;\n+\n+\tpublic DistributedConnection(List<Connection> connections) {\n+\t\tif (connections == null || connections.isEmpty())\n+\t\t\tthrow new NullPointerException();\n+\t\treal = connections;\n+\t\tmaster = connections.get(0);\n+\t}\n+\t\n+\tpublic boolean contains(Connection c) {\n+\t\treturn real.contains(c);\n+\t}\n+\n+\tpublic void clearWarnings() throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.clearWarnings();\n+\t}\n+\n+\tpublic void close() throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.close();\n+\t}\n+\n+\tpublic void commit() throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.commit();\n+\t}\n+\n+\tpublic Statement createStatement() throws SQLException {\n+\t\tDistributedStatement ret = new DistributedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.createStatement());\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic Statement createStatement(int arg0, int arg1) throws SQLException {\n+\t\tDistributedStatement ret = new DistributedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.createStatement(arg0, arg1));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic Statement createStatement(int arg0, int arg1, int arg2)\n+\t\t\tthrows SQLException {\n+\t\tDistributedStatement ret = new DistributedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.createStatement(arg0, arg1, arg2));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic boolean getAutoCommit() throws SQLException {\n+\t\treturn master.getAutoCommit();\n+\t}\n+\n+\tpublic String getCatalog() throws SQLException {\n+\t\treturn master.getCatalog();\n+\t}\n+\n+\tpublic int getHoldability() throws SQLException {\n+\t\treturn master.getHoldability();\n+\t}\n+\n+\tpublic DatabaseMetaData getMetaData() throws SQLException {\n+\t\treturn master.getMetaData();\n+\t}\n+\n+\tpublic int getTransactionIsolation() throws SQLException {\n+\t\treturn master.getTransactionIsolation();\n+\t}\n+\n+\tpublic Map<String, Class<?>> getTypeMap() throws SQLException {\n+\t\treturn master.getTypeMap();\n+\t}\n+\n+\tpublic SQLWarning getWarnings() throws SQLException {\n+\t\treturn master.getWarnings();\n+\t}\n+\n+\tpublic boolean isClosed() throws SQLException {\n+\t\tboolean ret = true;\n+\t\tfor (Connection c : real) {\n+\t\t\tret &= c.isClosed();\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic boolean isReadOnly() throws SQLException {\n+\t\tboolean ret = true;\n+\t\tfor (Connection c : real) {\n+\t\t\tret &= c.isReadOnly();\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic String nativeSQL(String arg0) throws SQLException {\n+\t\treturn master.nativeSQL(arg0);\n+\t}\n+\n+\tpublic CallableStatement prepareCall(String arg0) throws SQLException {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic CallableStatement prepareCall(String arg0, int arg1, int arg2)\n+\t\t\tthrows SQLException {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic CallableStatement prepareCall(String arg0, int arg1, int arg2,\n+\t\t\tint arg3) throws SQLException {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic PreparedStatement prepareStatement(String arg0) throws SQLException {\n+\t\t// TODO: Big hack\n+\t\tif (arg0.startsWith(\"SELECT SEQUENCE_VALUE FROM OPENJPA_SEQUENCE_TABLE\"))\n+\t\t\treturn master.prepareStatement(arg0);\n+\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.prepareStatement(arg0));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic PreparedStatement prepareStatement(String arg0, int arg1)\n+\t\t\tthrows SQLException {\n+\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.prepareStatement(arg0, arg1));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic PreparedStatement prepareStatement(String arg0, int[] arg1)\n+\t\t\tthrows SQLException {\n+\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.prepareStatement(arg0, arg1));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic PreparedStatement prepareStatement(String arg0, String[] arg1)\n+\t\t\tthrows SQLException {\n+\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.prepareStatement(arg0, arg1));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic PreparedStatement prepareStatement(String arg0, int arg1, int arg2)\n+\t\t\tthrows SQLException {\n+\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.prepareStatement(arg0, arg1, arg2));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic PreparedStatement prepareStatement(String arg0, int arg1, int arg2,\n+\t\t\tint arg3) throws SQLException {\n+\t\tDistributedPreparedStatement ret = new DistributedPreparedStatement(this);\n+\t\tfor (Connection c : real) {\n+\t\t\tret.add(c.prepareStatement(arg0, arg1, arg2));\n+\t\t}\n+\t\treturn ret;\n+\t}\n+\n+\tpublic void releaseSavepoint(Savepoint arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.releaseSavepoint(arg0);\n+\t}\n+\n+\tpublic void rollback() throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.rollback();\n+\t}\n+\n+\tpublic void rollback(Savepoint arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.rollback(arg0);\n+\t}\n+\n+\tpublic void setAutoCommit(boolean arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.setAutoCommit(arg0);\n+\t}\n+\n+\tpublic void setCatalog(String arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.setCatalog(arg0);\n+\t}\n+\n+\tpublic void setHoldability(int arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.setHoldability(arg0);\n+\t}\n+\n+\tpublic void setReadOnly(boolean arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.setReadOnly(arg0);\n+\t}\n+\n+\tpublic Savepoint setSavepoint() throws SQLException {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic Savepoint setSavepoint(String arg0) throws SQLException {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic void setTransactionIsolation(int arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.setTransactionIsolation(arg0);\n+\t}\n+\n+\tpublic void setTypeMap(Map<String, Class<?>> arg0) throws SQLException {\n+\t\tfor (Connection c : real)\n+\t\t\tc.setTypeMap(arg0);\n+\t}\n+}"},{"sha":"c1be06dfdb140d807135230e0f0e46ee477183ad","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java","status":"modified","additions":102,"deletions":102,"changes":204,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedDataSource.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,102 +1,102 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.jdbc;\r\n-\r\n-import java.io.PrintWriter;\r\n-import java.sql.Connection;\r\n-import java.sql.SQLException;\r\n-import java.util.ArrayList;\r\n-import java.util.Iterator;\r\n-import java.util.List;\r\n-\r\n-import javax.sql.DataSource;\r\n-import javax.sql.XADataSource;\r\n-\r\n-import org.apache.openjpa.lib.jdbc.DecoratingDataSource;\r\n-\r\n-/**\r\n- * A virtual datasource that contains many physical datasources.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-class DistributedDataSource extends DecoratingDataSource implements\r\n-\t\tIterable<DataSource> {\r\n-\tprivate List<DataSource> real = new ArrayList<DataSource>();\r\n-\tprivate DataSource master;\r\n-\t\r\n-\tpublic DistributedDataSource(List<DataSource> dataSources) {\r\n-\t\tsuper(dataSources.get(0));\r\n-\t\treal = dataSources;\r\n-\t\tmaster = dataSources.get(0);\r\n-\t}\r\n-\t\r\n-\tConnection getConnection(DataSource ds) throws SQLException {\r\n-\t\tif (ds instanceof DecoratingDataSource)\r\n-\t\t\treturn getConnection(((DecoratingDataSource)ds).getInnermostDelegate());\r\n-\t\tif (ds instanceof XADataSource)\r\n-\t\t\treturn ((XADataSource)ds).getXAConnection().getConnection();\r\n-\t\treturn ds.getConnection();\r\n-\t}\r\n-\t\r\n-\tConnection getConnection(DataSource ds, String user, String pwd) throws SQLException {\r\n-\t\tif (ds instanceof DecoratingDataSource)\r\n-\t\t\treturn getConnection(((DecoratingDataSource)ds).getInnermostDelegate(), user, pwd);\r\n-\t\tif (ds instanceof XADataSource)\r\n-\t\t\treturn ((XADataSource)ds).getXAConnection(user, pwd).getConnection();\r\n-\t\treturn ds.getConnection(user, pwd);\r\n-\t}\r\n-\r\n-\tpublic Iterator<DataSource> iterator() {\r\n-\t\treturn real.iterator();\r\n-\t}\r\n-\r\n-\tpublic Connection getConnection() throws SQLException {\r\n-\t\tList<Connection> c = new ArrayList<Connection>();\r\n-\t\tfor (DataSource ds : real)\r\n-\t\t\tc.add(ds.getConnection());\r\n-\t\treturn new DistributedConnection(c);\r\n-\t}\r\n-\r\n-\tpublic Connection getConnection(String username, String password)\r\n-\t\t\tthrows SQLException {\r\n-\t\tList<Connection> c = new ArrayList<Connection>();\r\n-\t\tfor (DataSource ds : real)\r\n-\t\t\tc.add(ds.getConnection(username, password));\r\n-\t\treturn new DistributedConnection(c);\r\n-\t}\r\n-\r\n-\tpublic PrintWriter getLogWriter() throws SQLException {\r\n-\t\treturn master.getLogWriter();\r\n-\t}\r\n-\r\n-\tpublic int getLoginTimeout() throws SQLException {\r\n-\t\treturn master.getLoginTimeout();\r\n-\t}\r\n-\r\n-\tpublic void setLogWriter(PrintWriter out) throws SQLException {\r\n-\t\tfor (DataSource ds:real)\r\n-\t\t\tds.setLogWriter(out);\r\n-\t}\r\n-\r\n-\tpublic void setLoginTimeout(int seconds) throws SQLException {\r\n-\t\tfor (DataSource ds:real)\r\n-\t\t\tds.setLoginTimeout(seconds);\r\n-\t}\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice.jdbc;\n+\n+import java.io.PrintWriter;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import javax.sql.DataSource;\n+import javax.sql.XADataSource;\n+\n+import org.apache.openjpa.lib.jdbc.DecoratingDataSource;\n+\n+/**\n+ * A virtual datasource that contains many physical datasources.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+class DistributedDataSource extends DecoratingDataSource implements\n+\t\tIterable<DataSource> {\n+\tprivate List<DataSource> real = new ArrayList<DataSource>();\n+\tprivate DataSource master;\n+\t\n+\tpublic DistributedDataSource(List<DataSource> dataSources) {\n+\t\tsuper(dataSources.get(0));\n+\t\treal = dataSources;\n+\t\tmaster = dataSources.get(0);\n+\t}\n+\t\n+\tConnection getConnection(DataSource ds) throws SQLException {\n+\t\tif (ds instanceof DecoratingDataSource)\n+\t\t\treturn getConnection(((DecoratingDataSource)ds).getInnermostDelegate());\n+\t\tif (ds instanceof XADataSource)\n+\t\t\treturn ((XADataSource)ds).getXAConnection().getConnection();\n+\t\treturn ds.getConnection();\n+\t}\n+\t\n+\tConnection getConnection(DataSource ds, String user, String pwd) throws SQLException {\n+\t\tif (ds instanceof DecoratingDataSource)\n+\t\t\treturn getConnection(((DecoratingDataSource)ds).getInnermostDelegate(), user, pwd);\n+\t\tif (ds instanceof XADataSource)\n+\t\t\treturn ((XADataSource)ds).getXAConnection(user, pwd).getConnection();\n+\t\treturn ds.getConnection(user, pwd);\n+\t}\n+\n+\tpublic Iterator<DataSource> iterator() {\n+\t\treturn real.iterator();\n+\t}\n+\n+\tpublic Connection getConnection() throws SQLException {\n+\t\tList<Connection> c = new ArrayList<Connection>();\n+\t\tfor (DataSource ds : real)\n+\t\t\tc.add(ds.getConnection());\n+\t\treturn new DistributedConnection(c);\n+\t}\n+\n+\tpublic Connection getConnection(String username, String password)\n+\t\t\tthrows SQLException {\n+\t\tList<Connection> c = new ArrayList<Connection>();\n+\t\tfor (DataSource ds : real)\n+\t\t\tc.add(ds.getConnection(username, password));\n+\t\treturn new DistributedConnection(c);\n+\t}\n+\n+\tpublic PrintWriter getLogWriter() throws SQLException {\n+\t\treturn master.getLogWriter();\n+\t}\n+\n+\tpublic int getLoginTimeout() throws SQLException {\n+\t\treturn master.getLoginTimeout();\n+\t}\n+\n+\tpublic void setLogWriter(PrintWriter out) throws SQLException {\n+\t\tfor (DataSource ds:real)\n+\t\t\tds.setLogWriter(out);\n+\t}\n+\n+\tpublic void setLoginTimeout(int seconds) throws SQLException {\n+\t\tfor (DataSource ds:real)\n+\t\t\tds.setLoginTimeout(seconds);\n+\t}\n+}"},{"sha":"98d15638c3dd295feb7f8c12cc7e4a32d2eb751b","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","status":"modified","additions":106,"deletions":106,"changes":212,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCBrokerFactory.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,106 +1,106 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.jdbc;\r\n-\r\n-import java.util.Map;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAVersion;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\r\n-import org.apache.openjpa.kernel.Bootstrap;\r\n-import org.apache.openjpa.kernel.StoreManager;\r\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-\r\n-/**\r\n- * A factory for distributed JDBC datastores.\r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-@SuppressWarnings(\"serial\")\r\n-public class DistributedJDBCBrokerFactory extends JDBCBrokerFactory {\r\n-\tprivate static final Localizer _loc = \r\n-\t    Localizer.forPackage(DistributedJDBCBrokerFactory.class);\r\n-\t/**\r\n-\t * Factory method for constructing a factory from properties. Invoked from\r\n-\t * {@link Bootstrap#newBrokerFactory}.\r\n-\t */\r\n-\tpublic static DistributedJDBCBrokerFactory newInstance(\r\n-\t\t\tConfigurationProvider cp) {\r\n-\t\tDistributedJDBCConfigurationImpl conf =\r\n-\t\t\t\tnew DistributedJDBCConfigurationImpl(cp);\r\n-\t\tcp.setInto(conf);\r\n-\t\treturn new DistributedJDBCBrokerFactory(conf);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Factory method for obtaining a possibly-pooled factory from properties.\r\n-\t * Invoked from {@link Bootstrap#getBrokerFactory}.\r\n-\t */\r\n-\tpublic static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\r\n-\t    Map properties = cp.getProperties();\r\n-\t    Object key = toPoolKey(properties);\r\n-\t\tDistributedJDBCBrokerFactory factory =\r\n-\t\t\t\t(DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\r\n-\t\tif (factory != null)\r\n-\t\t\treturn factory;\r\n-\r\n-\t\tfactory = newInstance(cp);\r\n-\t\tpool(key, factory);\r\n-\t\treturn factory;\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Factory method for constructing a factory from a configuration.\r\n-\t */\r\n-\tpublic static synchronized JDBCBrokerFactory getInstance(\r\n-\t\t\tJDBCConfiguration conf) {\r\n-\t    Map properties = conf.toProperties(false);\r\n-\t    Object key = toPoolKey(properties);\r\n-\t\tDistributedJDBCBrokerFactory factory =\r\n-\t\t\t\t(DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\r\n-\t\tif (factory != null)\r\n-\t\t\treturn factory;\r\n-\r\n-\t\tfactory = new DistributedJDBCBrokerFactory(\r\n-\t\t        (DistributedJDBCConfiguration) conf);\r\n-\t\tpool(key, factory);\r\n-\t\treturn factory;\r\n-\t}\r\n-\r\n-\tpublic DistributedJDBCBrokerFactory(DistributedJDBCConfiguration conf) {\r\n-\t\tsuper(conf);\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic DistributedJDBCConfiguration getConfiguration() {\r\n-\t    return (DistributedJDBCConfiguration)super.getConfiguration();\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tprotected StoreManager newStoreManager() {\r\n-\t\treturn new DistributedStoreManager(getConfiguration());\r\n-\t}\r\n-\t\r\n-    @Override\r\n-    protected Object getFactoryInitializationBanner() {\r\n-        return _loc.get(\"factory-init\", OpenJPAVersion.VERSION_NUMBER);\r\n-    }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice.jdbc;\n+\n+import java.util.Map;\n+\n+import org.apache.openjpa.conf.OpenJPAVersion;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.kernel.JDBCBrokerFactory;\n+import org.apache.openjpa.kernel.Bootstrap;\n+import org.apache.openjpa.kernel.StoreManager;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * A factory for distributed JDBC datastores.\n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+@SuppressWarnings(\"serial\")\n+public class DistributedJDBCBrokerFactory extends JDBCBrokerFactory {\n+\tprivate static final Localizer _loc = \n+\t    Localizer.forPackage(DistributedJDBCBrokerFactory.class);\n+\t/**\n+\t * Factory method for constructing a factory from properties. Invoked from\n+\t * {@link Bootstrap#newBrokerFactory}.\n+\t */\n+\tpublic static DistributedJDBCBrokerFactory newInstance(\n+\t\t\tConfigurationProvider cp) {\n+\t\tDistributedJDBCConfigurationImpl conf =\n+\t\t\t\tnew DistributedJDBCConfigurationImpl(cp);\n+\t\tcp.setInto(conf);\n+\t\treturn new DistributedJDBCBrokerFactory(conf);\n+\t}\n+\n+\t/**\n+\t * Factory method for obtaining a possibly-pooled factory from properties.\n+\t * Invoked from {@link Bootstrap#getBrokerFactory}.\n+\t */\n+\tpublic static JDBCBrokerFactory getInstance(ConfigurationProvider cp) {\n+\t    Map properties = cp.getProperties();\n+\t    Object key = toPoolKey(properties);\n+\t\tDistributedJDBCBrokerFactory factory =\n+\t\t\t\t(DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\n+\t\tif (factory != null)\n+\t\t\treturn factory;\n+\n+\t\tfactory = newInstance(cp);\n+\t\tpool(key, factory);\n+\t\treturn factory;\n+\t}\n+\n+\t/**\n+\t * Factory method for constructing a factory from a configuration.\n+\t */\n+\tpublic static synchronized JDBCBrokerFactory getInstance(\n+\t\t\tJDBCConfiguration conf) {\n+\t    Map properties = conf.toProperties(false);\n+\t    Object key = toPoolKey(properties);\n+\t\tDistributedJDBCBrokerFactory factory =\n+\t\t\t\t(DistributedJDBCBrokerFactory) getPooledFactoryForKey(key);\n+\t\tif (factory != null)\n+\t\t\treturn factory;\n+\n+\t\tfactory = new DistributedJDBCBrokerFactory(\n+\t\t        (DistributedJDBCConfiguration) conf);\n+\t\tpool(key, factory);\n+\t\treturn factory;\n+\t}\n+\n+\tpublic DistributedJDBCBrokerFactory(DistributedJDBCConfiguration conf) {\n+\t\tsuper(conf);\n+\t}\n+\t\n+\t@Override\n+\tpublic DistributedJDBCConfiguration getConfiguration() {\n+\t    return (DistributedJDBCConfiguration)super.getConfiguration();\n+\t}\n+\n+\t@Override\n+\tprotected StoreManager newStoreManager() {\n+\t\treturn new DistributedStoreManager(getConfiguration());\n+\t}\n+\t\n+    @Override\n+    protected Object getFactoryInitializationBanner() {\n+        return _loc.get(\"factory-init\", OpenJPAVersion.VERSION_NUMBER);\n+    }\n+}"},{"sha":"e3f665b00d24bb5be97700fb8fb1f1ea28de4385","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfiguration.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,51 +1,51 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.jdbc;\r\n-\r\n-import java.util.concurrent.ExecutorService;\r\n-\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.slice.DistributedConfiguration;\r\n-import org.apache.openjpa.slice.Slice;\r\n-\r\n-/**\r\n- * A distributed configuration that is a ordered collection of \r\n- * JDBCConfigurations.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-public interface DistributedJDBCConfiguration extends JDBCConfiguration, \r\n-\tDistributedConfiguration {\r\n-    /**\r\n-     * Gets the master slice.\r\n-     */\r\n-    Slice getMaster();\r\n-    \r\n-    /**\r\n-     * Gets the alias for ExecutorService being used.\r\n-     */\r\n-    \r\n-    String getExecutorService();\r\n-    \r\n-    /**\r\n-     * Gets the ExecutorService being used.\r\n-     */\r\n-    ExecutorService getExecutorServiceInstance();\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice.jdbc;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.slice.DistributedConfiguration;\n+import org.apache.openjpa.slice.Slice;\n+\n+/**\n+ * A distributed configuration that is a ordered collection of \n+ * JDBCConfigurations.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+public interface DistributedJDBCConfiguration extends JDBCConfiguration, \n+\tDistributedConfiguration {\n+    /**\n+     * Gets the master slice.\n+     */\n+    Slice getMaster();\n+    \n+    /**\n+     * Gets the alias for ExecutorService being used.\n+     */\n+    \n+    String getExecutorService();\n+    \n+    /**\n+     * Gets the ExecutorService being used.\n+     */\n+    ExecutorService getExecutorServiceInstance();\n+}"},{"sha":"9ad06a15d2535d81bdad7eae8ac4033b4239b795","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","status":"modified","additions":468,"deletions":468,"changes":936,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedJDBCConfigurationImpl.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,468 +1,468 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.jdbc;\r\n-\r\n-import java.sql.Connection;\r\n-import java.sql.SQLException;\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Properties;\r\n-import java.util.concurrent.ExecutorService;\r\n-\r\n-import javax.sql.DataSource;\r\n-import javax.sql.XADataSource;\r\n-\r\n-import org.apache.openjpa.conf.OpenJPAConfiguration;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\r\n-import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\r\n-import org.apache.openjpa.jdbc.schema.DataSourceFactory;\r\n-import org.apache.openjpa.lib.conf.BooleanValue;\r\n-import org.apache.openjpa.lib.conf.ConfigurationProvider;\r\n-import org.apache.openjpa.lib.conf.PluginValue;\r\n-import org.apache.openjpa.lib.conf.StringListValue;\r\n-import org.apache.openjpa.lib.conf.StringValue;\r\n-import org.apache.openjpa.lib.jdbc.DecoratingDataSource;\r\n-import org.apache.openjpa.lib.jdbc.DelegatingDataSource;\r\n-import org.apache.openjpa.lib.log.Log;\r\n-import org.apache.openjpa.lib.log.LogFactory;\r\n-import org.apache.openjpa.lib.log.LogFactoryImpl;\r\n-import org.apache.openjpa.lib.util.Localizer;\r\n-import org.apache.openjpa.slice.DistributedBrokerImpl;\r\n-import org.apache.openjpa.slice.DistributionPolicy;\r\n-import org.apache.openjpa.slice.ExecutorServiceValue;\r\n-import org.apache.openjpa.slice.ProductDerivation;\r\n-import org.apache.openjpa.slice.Slice;\r\n-import org.apache.openjpa.util.UserException;\r\n-\r\n-/**\r\n- * Implements a distributed configuration of JDBCStoreManagers.\r\n- * The original configuration properties are analyzed to create a set of\r\n- * Slice specific properties with defaulting rules. \r\n- * \r\n- * @author Pinaki Poddar\r\n- * \r\n- */\r\n-public class DistributedJDBCConfigurationImpl extends JDBCConfigurationImpl\r\n-        implements DistributedJDBCConfiguration {\r\n-\r\n-    private final List<Slice> _slices = new ArrayList<Slice>();\r\n-    private List<String> _activeSliceNames = new ArrayList<String>();\r\n-    private Slice _master;\r\n-    \r\n-    private DecoratingDataSource virtualDataSource;\r\n-    \r\n-    protected BooleanValue lenientPlugin;\r\n-    protected StringValue masterPlugin;\r\n-    protected StringListValue namesPlugin;\r\n-    protected ExecutorServiceValue executorServicePlugin;\r\n-    protected PluginValue distributionPolicyPlugin;\r\n-\r\n-    public static final String DOT = \".\";\r\n-    public static final String REGEX_DOT = \"\\\\.\";\r\n-    public static final String PREFIX_SLICE = ProductDerivation.PREFIX_SLICE + DOT;\r\n-    public static final String PREFIX_OPENJPA = \"openjpa.\";\r\n-    private static Localizer _loc =\r\n-            Localizer.forPackage(DistributedJDBCConfigurationImpl.class);\r\n-\r\n-    /**\r\n-     * Configure itself as well as underlying slices.\r\n-     * \r\n-     */\r\n-    public DistributedJDBCConfigurationImpl(ConfigurationProvider cp) {\r\n-        super(true, false);\r\n-        Map p = cp.getProperties();\r\n-        String pUnit = getPersistenceUnitName(p);\r\n-        setDiagnosticContext(pUnit);\r\n-        \r\n-        brokerPlugin.setString(DistributedBrokerImpl.class.getName());\r\n-        \r\n-        distributionPolicyPlugin = addPlugin(\"DistributionPolicy\", true);\r\n-        distributionPolicyPlugin.setDynamic(true);\r\n-        \r\n-        lenientPlugin = addBoolean(\"Lenient\");\r\n-        \r\n-        masterPlugin = addString(\"Master\");\r\n-        \r\n-        namesPlugin = addStringList(\"Names\");\r\n-        \r\n-        executorServicePlugin = new ExecutorServiceValue();\r\n-        addValue(executorServicePlugin);\r\n-        \r\n-        setSlices(p);\r\n-    }\r\n-    \r\n-    private String getPersistenceUnitName(Map p) {\r\n-        Object unit = p.get(PREFIX_OPENJPA+id.getProperty());\r\n-        return (unit == null) ? \"?\" : unit.toString();\r\n-    }\r\n-    \r\n-    private void setDiagnosticContext(String unit) {\r\n-        LogFactory logFactory = getLogFactory();\r\n-        if (logFactory instanceof LogFactoryImpl) {\r\n-            ((LogFactoryImpl)logFactory).setDiagnosticContext(unit);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the name of the active slices.\r\n-     */\r\n-    public List<String> getActiveSliceNames() {\r\n-        if (_activeSliceNames.isEmpty()) {\r\n-            for (Slice slice:_slices)\r\n-                if (slice.isActive())\r\n-                    _activeSliceNames.add(slice.getName());\r\n-        }\r\n-        return _activeSliceNames;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Gets the name of the available slices.\r\n-     */\r\n-    public List<String> getAvailableSliceNames() {\r\n-        List<String> result = new ArrayList<String>();\r\n-        for (Slice slice:_slices)\r\n-            result.add(slice.getName());\r\n-        return result;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Gets the slices of given status. Null returns all irrespective of status.\r\n-     */\r\n-    public List<Slice> getSlices(Slice.Status...statuses) {\r\n-        if (statuses == null)\r\n-            return Collections.unmodifiableList(_slices);\r\n-        List<Slice> result = new ArrayList<Slice>();\r\n-        for (Slice slice:_slices) {\r\n-            for (Slice.Status status:statuses)\r\n-                if (slice.getStatus().equals(status))\r\n-                    result.add(slice);\r\n-        }\r\n-        return result;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Gets the master slice. \r\n-     */\r\n-    public Slice getMaster() {\r\n-        return _master;\r\n-    }\r\n-\r\n-    /**\r\n-     * Get the configuration for given slice.\r\n-     */\r\n-    public Slice getSlice(String name) {\r\n-        for (Slice slice:_slices)\r\n-            if (slice.getName().equals(name))\r\n-                return slice;\r\n-        throw new UserException(_loc.get(\"slice-not-found\", name,\r\n-                    getActiveSliceNames()));\r\n-    }\r\n-\r\n-    public DistributionPolicy getDistributionPolicyInstance() {\r\n-        if (distributionPolicyPlugin.get() == null) {\r\n-            distributionPolicyPlugin.instantiate(DistributionPolicy.class,\r\n-                    this, true);\r\n-        }\r\n-        return (DistributionPolicy) distributionPolicyPlugin.get();\r\n-    }\r\n-\r\n-    public void setDistributionPolicyInstance(String val) {\r\n-        distributionPolicyPlugin.set(val);\r\n-    }\r\n-\r\n-    public Object getConnectionFactory() {\r\n-        if (virtualDataSource == null) {\r\n-            DistributedDataSource ds = createDistributedDataStore();\r\n-            virtualDataSource =\r\n-                    DataSourceFactory.installDBDictionary(\r\n-                            getDBDictionaryInstance(), ds, this, false);\r\n-        }\r\n-        return virtualDataSource;\r\n-    }\r\n-\r\n-    /**\r\n-     * Create a virtual DistributedDataSource as a composite of individual\r\n-     * slices as per configuration, optionally ignoring slices that can not be\r\n-     * connected.\r\n-     */\r\n-    private DistributedDataSource createDistributedDataStore() {\r\n-        List<DataSource> dataSources = new ArrayList<DataSource>();\r\n-        boolean isLenient = lenientPlugin.get();\r\n-        boolean isXA = true;\r\n-        for (Slice slice : _slices) {\r\n-            JDBCConfiguration conf = (JDBCConfiguration)slice.getConfiguration();\r\n-            Log log = conf.getConfigurationLog();\r\n-            String url = getConnectionInfo(conf);\r\n-            if (log.isInfoEnabled())\r\n-                log.info(_loc.get(\"slice-connect\", slice, url));\r\n-            try {\r\n-                DataSource ds = DataSourceFactory.newDataSource(conf, false);\r\n-                DecoratingDataSource dds = new DecoratingDataSource(ds);\r\n-                ds = DataSourceFactory.installDBDictionary(\r\n-                        conf.getDBDictionaryInstance(), dds, conf, false);\r\n-                if (verifyDataSource(slice, ds)) {\r\n-                    dataSources.add(ds);\r\n-                    isXA &= isXACompliant(ds);\r\n-                }\r\n-            } catch (Throwable ex) {\r\n-                handleBadConnection(isLenient, slice, ex);\r\n-            }\r\n-        }\r\n-        if (dataSources.isEmpty())\r\n-            throw new UserException(_loc.get(\"no-slice\"));\r\n-        DistributedDataSource result = new DistributedDataSource(dataSources);\r\n-        return result;\r\n-    }\r\n-\r\n-    String getConnectionInfo(OpenJPAConfiguration conf) {\r\n-        String result = conf.getConnectionURL();\r\n-        if (result == null) {\r\n-            result = conf.getConnectionDriverName();\r\n-            String props = conf.getConnectionProperties();\r\n-            if (props != null)\r\n-                result += \"(\" + props + \")\";\r\n-        }\r\n-        return result;\r\n-    }\r\n-\r\n-    boolean isXACompliant(DataSource ds) {\r\n-        if (ds instanceof DelegatingDataSource)\r\n-            return ((DelegatingDataSource) ds).getInnermostDelegate() \r\n-               instanceof XADataSource;\r\n-        return ds instanceof XADataSource;\r\n-    }\r\n-\r\n-    /**\r\n-     * Verify that a connection can be established to the given slice. If\r\n-     * connection can not be established then slice is set to INACTIVE state.\r\n-     */\r\n-    private boolean verifyDataSource(Slice slice, DataSource ds) {\r\n-        Connection con = null;\r\n-        try {\r\n-            con = ds.getConnection();\r\n-            slice.setStatus(Slice.Status.ACTIVE);\r\n-            if (con == null) {\r\n-                slice.setStatus(Slice.Status.INACTIVE);\r\n-                return false;\r\n-            }\r\n-            return true;\r\n-        } catch (SQLException ex) {\r\n-            slice.setStatus(Slice.Status.INACTIVE);\r\n-            return false;\r\n-        } finally {\r\n-            if (con != null)\r\n-                try {\r\n-                    con.close();\r\n-                } catch (SQLException ex) {\r\n-                    // ignore\r\n-                }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Either throw a user exception or add the configuration to the given list,\r\n-     * based on <code>isLenient</code>.\r\n-     */\r\n-    private void handleBadConnection(boolean isLenient, Slice slice,\r\n-            Throwable ex) {\r\n-        OpenJPAConfiguration conf = slice.getConfiguration();\r\n-        String url = conf.getConnectionURL();\r\n-        Log log = getLog(LOG_RUNTIME);\r\n-        if (isLenient) {\r\n-            if (ex != null) {\r\n-                log.warn(_loc.get(\"slice-connect-known-warn\", slice, url, ex\r\n-                        .getCause()));\r\n-            } else {\r\n-                log.warn(_loc.get(\"slice-connect-warn\", slice, url));\r\n-            }\r\n-        } else if (ex != null) {\r\n-            throw new UserException(_loc.get(\"slice-connect-known-error\",\r\n-                    slice, url, ex), ex.getCause());\r\n-        } else {\r\n-            throw new UserException(_loc.get(\"slice-connect-error\", slice, url));\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Create individual slices with configurations from the given properties.\r\n-     */\r\n-    void setSlices(Map original) {\r\n-        List<String> sliceNames = findSlices(original);\r\n-        Log log = getConfigurationLog();\r\n-        if (sliceNames.isEmpty()) {\r\n-            throw new UserException(_loc.get(\"slice-none-configured\"));\r\n-        } \r\n-        String unit = getPersistenceUnitName(original);\r\n-        for (String key : sliceNames) {\r\n-            JDBCConfiguration child = new JDBCConfigurationImpl();\r\n-            child.fromProperties(createSliceProperties(original, key));\r\n-            child.setId(unit+DOT+key);\r\n-            Slice slice = new Slice(key, child);\r\n-            _slices.add(slice);\r\n-            if (log.isTraceEnabled())\r\n-                log.trace(_loc.get(\"slice-configuration\", key, child\r\n-                        .toProperties(false)));\r\n-        }\r\n-        setMaster(original);\r\n-    }\r\n-\r\n-    /**\r\n-     * Finds the slices. If <code>openjpa.slice.Names</code> property is \r\n-     * specified then the slices are ordered in the way they are listed. \r\n-     * Otherwise scans all available slices by looking for property of the form\r\n-     * <code>openjpa.slice.XYZ.abc</code> where <code>XYZ</code> is the slice\r\n-     * identifier and <code>abc</code> is any openjpa property name. The slices\r\n-     * are then ordered alphabetically by their identifier.\r\n-     */\r\n-    private List<String> findSlices(Map p) {\r\n-        List<String> sliceNames = new ArrayList<String>();\r\n-        \r\n-        Log log = getConfigurationLog();\r\n-        String key = PREFIX_SLICE + namesPlugin.getProperty();\r\n-        boolean explicit = p.containsKey(key);\r\n-        if (explicit) {\r\n-            String[] values = p.get(key).toString().split(\"\\\\,\");\r\n-            for (String name:values)\r\n-                if (!sliceNames.contains(name.trim()))\r\n-                    sliceNames.add(name.trim());\r\n-        } else {\r\n-            if (log.isWarnEnabled())\r\n-                log.warn(_loc.get(\"no-slice-names\", key));\r\n-            sliceNames = scanForSliceNames(p);\r\n-            Collections.sort(sliceNames);\r\n-        }\r\n-        if (log.isInfoEnabled()) {\r\n-            log.info(_loc.get(\"slice-available\", sliceNames));\r\n-        }\r\n-        return sliceNames;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Scan the given map for slice-specific property of the form \r\n-     * <code>openjpa.slice.XYZ.abc</code> (while ignoring \r\n-     * <code>openjpa.slice.XYZ</code> as they refer to slice-wide property)\r\n-     * to determine the names of all available slices.\r\n-     */\r\n-    private List<String> scanForSliceNames(Map p) {\r\n-        List<String> sliceNames = new ArrayList<String>();\r\n-        for (Object o : p.keySet()) {\r\n-            String key = o.toString();\r\n-            if (key.startsWith(PREFIX_SLICE) && getPartCount(key) > 3) {\r\n-                String sliceName =\r\n-                    chopTail(chopHead(o.toString(), PREFIX_SLICE), DOT);\r\n-                if (!sliceNames.contains(sliceName))\r\n-                    sliceNames.add(sliceName);\r\n-            }\r\n-        }\r\n-        return sliceNames;\r\n-    }\r\n-\r\n-    private static int getPartCount(String s) {\r\n-        return (s == null) ? 0 : s.split(REGEX_DOT).length;\r\n-    }\r\n-    \r\n-    private static String chopHead(String s, String head) {\r\n-        if (s.startsWith(head))\r\n-            return s.substring(head.length());\r\n-        return s;\r\n-    }\r\n-\r\n-    private static String chopTail(String s, String tail) {\r\n-        int i = s.lastIndexOf(tail);\r\n-        if (i == -1)\r\n-            return s;\r\n-        return s.substring(0, i);\r\n-    }\r\n-\r\n-    /**\r\n-     * Creates given <code>slice</code> specific configuration properties from\r\n-     * given <code>original</code> key-value map. The rules are\r\n-     * <LI> if key begins with <code>\"slice.XXX.\"</code> where\r\n-     * <code>XXX</code> is the given slice name, then replace\r\n-     * <code>\"slice.XXX.</code> with <code>openjpa.</code>.\r\n-     * <LI>if key begins with <code>\"slice.\"</code> but not with\r\n-     * <code>\"slice.XXX.\"</code>, the ignore i.e. any property of other\r\n-     * slices or global slice property e.g.\r\n-     * <code>slice.DistributionPolicy</code>\r\n-     * <code>if key starts with <code>\"openjpa.\"</code> and a corresponding\r\n-     * <code>\"slice.XXX.\"</code> property does not exist, then use this as\r\n-     * default property\r\n-     * <code>property with any other prefix is simply copied\r\n-     *\r\n-     */\r\n-    Map createSliceProperties(Map original, String slice) {\r\n-        Map result = new Properties();\r\n-        String prefix = PREFIX_SLICE + slice + DOT;\r\n-        for (Object o : original.keySet()) {\r\n-            String key = o.toString();\r\n-            if (key.startsWith(prefix)) {\r\n-                String newKey = PREFIX_OPENJPA + key.substring(prefix.length());\r\n-                result.put(newKey, original.get(o));\r\n-            } else if (key.startsWith(PREFIX_SLICE)) {\r\n-                // ignore keys that are in 'slice.' namespace but not this slice\r\n-            } else if (key.startsWith(PREFIX_OPENJPA)) {\r\n-                String newKey = prefix + key.substring(PREFIX_OPENJPA.length());\r\n-                if (!original.containsKey(newKey))\r\n-                    result.put(key, original.get(o));\r\n-            } else { // keys that are neither \"openjpa\" nor \"slice\" namespace\r\n-                result.put(key, original.get(o));\r\n-            }\r\n-        }\r\n-        return result;\r\n-    }\r\n-\r\n-    /**\r\n-     * Determine the master slice.\r\n-     */\r\n-    private void setMaster(Map original) {\r\n-        String key = PREFIX_SLICE + masterPlugin.getProperty();\r\n-        Object masterSlice = original.get(key);\r\n-        Log log = getConfigurationLog();\r\n-        List<Slice> activeSlices = getSlices(null);\r\n-        if (masterSlice == null) {\r\n-            _master = activeSlices.get(0);\r\n-            if (log.isWarnEnabled())\r\n-                log.warn(_loc.get(\"no-master-slice\", key, _master));\r\n-            return;\r\n-        }\r\n-        for (Slice slice:activeSlices)\r\n-            if (slice.getName().equals(masterSlice))\r\n-                _master = slice;\r\n-        if (_master == null) {\r\n-            _master = activeSlices.get(0);\r\n-        }\r\n-    }\r\n-    \r\n-    public String getExecutorService() {\r\n-        return executorServicePlugin.getString();\r\n-    }\r\n-\r\n-    public void setExecutorService(ExecutorService txnManager) {\r\n-        executorServicePlugin.set(txnManager);\r\n-    }\r\n-\r\n-    public ExecutorService getExecutorServiceInstance() {\r\n-        if (executorServicePlugin.get() == null) {\r\n-            executorServicePlugin.instantiate(ExecutorService.class, this);\r\n-        }\r\n-        return (ExecutorService) executorServicePlugin.get();\r\n-    }    \r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice.jdbc;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.ExecutorService;\n+\n+import javax.sql.DataSource;\n+import javax.sql.XADataSource;\n+\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfiguration;\n+import org.apache.openjpa.jdbc.conf.JDBCConfigurationImpl;\n+import org.apache.openjpa.jdbc.schema.DataSourceFactory;\n+import org.apache.openjpa.lib.conf.BooleanValue;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.PluginValue;\n+import org.apache.openjpa.lib.conf.StringListValue;\n+import org.apache.openjpa.lib.conf.StringValue;\n+import org.apache.openjpa.lib.jdbc.DecoratingDataSource;\n+import org.apache.openjpa.lib.jdbc.DelegatingDataSource;\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.lib.log.LogFactory;\n+import org.apache.openjpa.lib.log.LogFactoryImpl;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.slice.DistributedBrokerImpl;\n+import org.apache.openjpa.slice.DistributionPolicy;\n+import org.apache.openjpa.slice.ExecutorServiceValue;\n+import org.apache.openjpa.slice.ProductDerivation;\n+import org.apache.openjpa.slice.Slice;\n+import org.apache.openjpa.util.UserException;\n+\n+/**\n+ * Implements a distributed configuration of JDBCStoreManagers.\n+ * The original configuration properties are analyzed to create a set of\n+ * Slice specific properties with defaulting rules. \n+ * \n+ * @author Pinaki Poddar\n+ * \n+ */\n+public class DistributedJDBCConfigurationImpl extends JDBCConfigurationImpl\n+        implements DistributedJDBCConfiguration {\n+\n+    private final List<Slice> _slices = new ArrayList<Slice>();\n+    private List<String> _activeSliceNames = new ArrayList<String>();\n+    private Slice _master;\n+    \n+    private DecoratingDataSource virtualDataSource;\n+    \n+    protected BooleanValue lenientPlugin;\n+    protected StringValue masterPlugin;\n+    protected StringListValue namesPlugin;\n+    protected ExecutorServiceValue executorServicePlugin;\n+    protected PluginValue distributionPolicyPlugin;\n+\n+    public static final String DOT = \".\";\n+    public static final String REGEX_DOT = \"\\\\.\";\n+    public static final String PREFIX_SLICE = ProductDerivation.PREFIX_SLICE + DOT;\n+    public static final String PREFIX_OPENJPA = \"openjpa.\";\n+    private static Localizer _loc =\n+            Localizer.forPackage(DistributedJDBCConfigurationImpl.class);\n+\n+    /**\n+     * Configure itself as well as underlying slices.\n+     * \n+     */\n+    public DistributedJDBCConfigurationImpl(ConfigurationProvider cp) {\n+        super(true, false);\n+        Map p = cp.getProperties();\n+        String pUnit = getPersistenceUnitName(p);\n+        setDiagnosticContext(pUnit);\n+        \n+        brokerPlugin.setString(DistributedBrokerImpl.class.getName());\n+        \n+        distributionPolicyPlugin = addPlugin(\"DistributionPolicy\", true);\n+        distributionPolicyPlugin.setDynamic(true);\n+        \n+        lenientPlugin = addBoolean(\"Lenient\");\n+        \n+        masterPlugin = addString(\"Master\");\n+        \n+        namesPlugin = addStringList(\"Names\");\n+        \n+        executorServicePlugin = new ExecutorServiceValue();\n+        addValue(executorServicePlugin);\n+        \n+        setSlices(p);\n+    }\n+    \n+    private String getPersistenceUnitName(Map p) {\n+        Object unit = p.get(PREFIX_OPENJPA+id.getProperty());\n+        return (unit == null) ? \"?\" : unit.toString();\n+    }\n+    \n+    private void setDiagnosticContext(String unit) {\n+        LogFactory logFactory = getLogFactory();\n+        if (logFactory instanceof LogFactoryImpl) {\n+            ((LogFactoryImpl)logFactory).setDiagnosticContext(unit);\n+        }\n+    }\n+\n+    /**\n+     * Gets the name of the active slices.\n+     */\n+    public List<String> getActiveSliceNames() {\n+        if (_activeSliceNames.isEmpty()) {\n+            for (Slice slice:_slices)\n+                if (slice.isActive())\n+                    _activeSliceNames.add(slice.getName());\n+        }\n+        return _activeSliceNames;\n+    }\n+    \n+    /**\n+     * Gets the name of the available slices.\n+     */\n+    public List<String> getAvailableSliceNames() {\n+        List<String> result = new ArrayList<String>();\n+        for (Slice slice:_slices)\n+            result.add(slice.getName());\n+        return result;\n+    }\n+    \n+    /**\n+     * Gets the slices of given status. Null returns all irrespective of status.\n+     */\n+    public List<Slice> getSlices(Slice.Status...statuses) {\n+        if (statuses == null)\n+            return Collections.unmodifiableList(_slices);\n+        List<Slice> result = new ArrayList<Slice>();\n+        for (Slice slice:_slices) {\n+            for (Slice.Status status:statuses)\n+                if (slice.getStatus().equals(status))\n+                    result.add(slice);\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Gets the master slice. \n+     */\n+    public Slice getMaster() {\n+        return _master;\n+    }\n+\n+    /**\n+     * Get the configuration for given slice.\n+     */\n+    public Slice getSlice(String name) {\n+        for (Slice slice:_slices)\n+            if (slice.getName().equals(name))\n+                return slice;\n+        throw new UserException(_loc.get(\"slice-not-found\", name,\n+                    getActiveSliceNames()));\n+    }\n+\n+    public DistributionPolicy getDistributionPolicyInstance() {\n+        if (distributionPolicyPlugin.get() == null) {\n+            distributionPolicyPlugin.instantiate(DistributionPolicy.class,\n+                    this, true);\n+        }\n+        return (DistributionPolicy) distributionPolicyPlugin.get();\n+    }\n+\n+    public void setDistributionPolicyInstance(String val) {\n+        distributionPolicyPlugin.set(val);\n+    }\n+\n+    public Object getConnectionFactory() {\n+        if (virtualDataSource == null) {\n+            DistributedDataSource ds = createDistributedDataStore();\n+            virtualDataSource =\n+                    DataSourceFactory.installDBDictionary(\n+                            getDBDictionaryInstance(), ds, this, false);\n+        }\n+        return virtualDataSource;\n+    }\n+\n+    /**\n+     * Create a virtual DistributedDataSource as a composite of individual\n+     * slices as per configuration, optionally ignoring slices that can not be\n+     * connected.\n+     */\n+    private DistributedDataSource createDistributedDataStore() {\n+        List<DataSource> dataSources = new ArrayList<DataSource>();\n+        boolean isLenient = lenientPlugin.get();\n+        boolean isXA = true;\n+        for (Slice slice : _slices) {\n+            JDBCConfiguration conf = (JDBCConfiguration)slice.getConfiguration();\n+            Log log = conf.getConfigurationLog();\n+            String url = getConnectionInfo(conf);\n+            if (log.isInfoEnabled())\n+                log.info(_loc.get(\"slice-connect\", slice, url));\n+            try {\n+                DataSource ds = DataSourceFactory.newDataSource(conf, false);\n+                DecoratingDataSource dds = new DecoratingDataSource(ds);\n+                ds = DataSourceFactory.installDBDictionary(\n+                        conf.getDBDictionaryInstance(), dds, conf, false);\n+                if (verifyDataSource(slice, ds)) {\n+                    dataSources.add(ds);\n+                    isXA &= isXACompliant(ds);\n+                }\n+            } catch (Throwable ex) {\n+                handleBadConnection(isLenient, slice, ex);\n+            }\n+        }\n+        if (dataSources.isEmpty())\n+            throw new UserException(_loc.get(\"no-slice\"));\n+        DistributedDataSource result = new DistributedDataSource(dataSources);\n+        return result;\n+    }\n+\n+    String getConnectionInfo(OpenJPAConfiguration conf) {\n+        String result = conf.getConnectionURL();\n+        if (result == null) {\n+            result = conf.getConnectionDriverName();\n+            String props = conf.getConnectionProperties();\n+            if (props != null)\n+                result += \"(\" + props + \")\";\n+        }\n+        return result;\n+    }\n+\n+    boolean isXACompliant(DataSource ds) {\n+        if (ds instanceof DelegatingDataSource)\n+            return ((DelegatingDataSource) ds).getInnermostDelegate() \n+               instanceof XADataSource;\n+        return ds instanceof XADataSource;\n+    }\n+\n+    /**\n+     * Verify that a connection can be established to the given slice. If\n+     * connection can not be established then slice is set to INACTIVE state.\n+     */\n+    private boolean verifyDataSource(Slice slice, DataSource ds) {\n+        Connection con = null;\n+        try {\n+            con = ds.getConnection();\n+            slice.setStatus(Slice.Status.ACTIVE);\n+            if (con == null) {\n+                slice.setStatus(Slice.Status.INACTIVE);\n+                return false;\n+            }\n+            return true;\n+        } catch (SQLException ex) {\n+            slice.setStatus(Slice.Status.INACTIVE);\n+            return false;\n+        } finally {\n+            if (con != null)\n+                try {\n+                    con.close();\n+                } catch (SQLException ex) {\n+                    // ignore\n+                }\n+        }\n+    }\n+\n+    /**\n+     * Either throw a user exception or add the configuration to the given list,\n+     * based on <code>isLenient</code>.\n+     */\n+    private void handleBadConnection(boolean isLenient, Slice slice,\n+            Throwable ex) {\n+        OpenJPAConfiguration conf = slice.getConfiguration();\n+        String url = conf.getConnectionURL();\n+        Log log = getLog(LOG_RUNTIME);\n+        if (isLenient) {\n+            if (ex != null) {\n+                log.warn(_loc.get(\"slice-connect-known-warn\", slice, url, ex\n+                        .getCause()));\n+            } else {\n+                log.warn(_loc.get(\"slice-connect-warn\", slice, url));\n+            }\n+        } else if (ex != null) {\n+            throw new UserException(_loc.get(\"slice-connect-known-error\",\n+                    slice, url, ex), ex.getCause());\n+        } else {\n+            throw new UserException(_loc.get(\"slice-connect-error\", slice, url));\n+        }\n+    }\n+\n+    /**\n+     * Create individual slices with configurations from the given properties.\n+     */\n+    void setSlices(Map original) {\n+        List<String> sliceNames = findSlices(original);\n+        Log log = getConfigurationLog();\n+        if (sliceNames.isEmpty()) {\n+            throw new UserException(_loc.get(\"slice-none-configured\"));\n+        } \n+        String unit = getPersistenceUnitName(original);\n+        for (String key : sliceNames) {\n+            JDBCConfiguration child = new JDBCConfigurationImpl();\n+            child.fromProperties(createSliceProperties(original, key));\n+            child.setId(unit+DOT+key);\n+            Slice slice = new Slice(key, child);\n+            _slices.add(slice);\n+            if (log.isTraceEnabled())\n+                log.trace(_loc.get(\"slice-configuration\", key, child\n+                        .toProperties(false)));\n+        }\n+        setMaster(original);\n+    }\n+\n+    /**\n+     * Finds the slices. If <code>openjpa.slice.Names</code> property is \n+     * specified then the slices are ordered in the way they are listed. \n+     * Otherwise scans all available slices by looking for property of the form\n+     * <code>openjpa.slice.XYZ.abc</code> where <code>XYZ</code> is the slice\n+     * identifier and <code>abc</code> is any openjpa property name. The slices\n+     * are then ordered alphabetically by their identifier.\n+     */\n+    private List<String> findSlices(Map p) {\n+        List<String> sliceNames = new ArrayList<String>();\n+        \n+        Log log = getConfigurationLog();\n+        String key = PREFIX_SLICE + namesPlugin.getProperty();\n+        boolean explicit = p.containsKey(key);\n+        if (explicit) {\n+            String[] values = p.get(key).toString().split(\"\\\\,\");\n+            for (String name:values)\n+                if (!sliceNames.contains(name.trim()))\n+                    sliceNames.add(name.trim());\n+        } else {\n+            if (log.isWarnEnabled())\n+                log.warn(_loc.get(\"no-slice-names\", key));\n+            sliceNames = scanForSliceNames(p);\n+            Collections.sort(sliceNames);\n+        }\n+        if (log.isInfoEnabled()) {\n+            log.info(_loc.get(\"slice-available\", sliceNames));\n+        }\n+        return sliceNames;\n+    }\n+    \n+    /**\n+     * Scan the given map for slice-specific property of the form \n+     * <code>openjpa.slice.XYZ.abc</code> (while ignoring \n+     * <code>openjpa.slice.XYZ</code> as they refer to slice-wide property)\n+     * to determine the names of all available slices.\n+     */\n+    private List<String> scanForSliceNames(Map p) {\n+        List<String> sliceNames = new ArrayList<String>();\n+        for (Object o : p.keySet()) {\n+            String key = o.toString();\n+            if (key.startsWith(PREFIX_SLICE) && getPartCount(key) > 3) {\n+                String sliceName =\n+                    chopTail(chopHead(o.toString(), PREFIX_SLICE), DOT);\n+                if (!sliceNames.contains(sliceName))\n+                    sliceNames.add(sliceName);\n+            }\n+        }\n+        return sliceNames;\n+    }\n+\n+    private static int getPartCount(String s) {\n+        return (s == null) ? 0 : s.split(REGEX_DOT).length;\n+    }\n+    \n+    private static String chopHead(String s, String head) {\n+        if (s.startsWith(head))\n+            return s.substring(head.length());\n+        return s;\n+    }\n+\n+    private static String chopTail(String s, String tail) {\n+        int i = s.lastIndexOf(tail);\n+        if (i == -1)\n+            return s;\n+        return s.substring(0, i);\n+    }\n+\n+    /**\n+     * Creates given <code>slice</code> specific configuration properties from\n+     * given <code>original</code> key-value map. The rules are\n+     * <LI> if key begins with <code>\"slice.XXX.\"</code> where\n+     * <code>XXX</code> is the given slice name, then replace\n+     * <code>\"slice.XXX.</code> with <code>openjpa.</code>.\n+     * <LI>if key begins with <code>\"slice.\"</code> but not with\n+     * <code>\"slice.XXX.\"</code>, the ignore i.e. any property of other\n+     * slices or global slice property e.g.\n+     * <code>slice.DistributionPolicy</code>\n+     * <code>if key starts with <code>\"openjpa.\"</code> and a corresponding\n+     * <code>\"slice.XXX.\"</code> property does not exist, then use this as\n+     * default property\n+     * <code>property with any other prefix is simply copied\n+     *\n+     */\n+    Map createSliceProperties(Map original, String slice) {\n+        Map result = new Properties();\n+        String prefix = PREFIX_SLICE + slice + DOT;\n+        for (Object o : original.keySet()) {\n+            String key = o.toString();\n+            if (key.startsWith(prefix)) {\n+                String newKey = PREFIX_OPENJPA + key.substring(prefix.length());\n+                result.put(newKey, original.get(o));\n+            } else if (key.startsWith(PREFIX_SLICE)) {\n+                // ignore keys that are in 'slice.' namespace but not this slice\n+            } else if (key.startsWith(PREFIX_OPENJPA)) {\n+                String newKey = prefix + key.substring(PREFIX_OPENJPA.length());\n+                if (!original.containsKey(newKey))\n+                    result.put(key, original.get(o));\n+            } else { // keys that are neither \"openjpa\" nor \"slice\" namespace\n+                result.put(key, original.get(o));\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Determine the master slice.\n+     */\n+    private void setMaster(Map original) {\n+        String key = PREFIX_SLICE + masterPlugin.getProperty();\n+        Object masterSlice = original.get(key);\n+        Log log = getConfigurationLog();\n+        List<Slice> activeSlices = getSlices(null);\n+        if (masterSlice == null) {\n+            _master = activeSlices.get(0);\n+            if (log.isWarnEnabled())\n+                log.warn(_loc.get(\"no-master-slice\", key, _master));\n+            return;\n+        }\n+        for (Slice slice:activeSlices)\n+            if (slice.getName().equals(masterSlice))\n+                _master = slice;\n+        if (_master == null) {\n+            _master = activeSlices.get(0);\n+        }\n+    }\n+    \n+    public String getExecutorService() {\n+        return executorServicePlugin.getString();\n+    }\n+\n+    public void setExecutorService(ExecutorService txnManager) {\n+        executorServicePlugin.set(txnManager);\n+    }\n+\n+    public ExecutorService getExecutorServiceInstance() {\n+        if (executorServicePlugin.get() == null) {\n+            executorServicePlugin.instantiate(ExecutorService.class, this);\n+        }\n+        return (ExecutorService) executorServicePlugin.get();\n+    }    \n+}"},{"sha":"49776e2ed0fd9c52a317969005f61ca78738b081","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","status":"modified","additions":247,"deletions":247,"changes":494,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedPreparedStatement.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675","patch":"@@ -1,247 +1,247 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.    \r\n- */\r\n-package org.apache.openjpa.slice.jdbc;\r\n-\r\n-import java.io.InputStream;\r\n-import java.io.Reader;\r\n-import java.math.BigDecimal;\r\n-import java.net.URL;\r\n-import java.sql.Array;\r\n-import java.sql.Blob;\r\n-import java.sql.Clob;\r\n-import java.sql.Date;\r\n-import java.sql.ParameterMetaData;\r\n-import java.sql.PreparedStatement;\r\n-import java.sql.Ref;\r\n-import java.sql.ResultSet;\r\n-import java.sql.ResultSetMetaData;\r\n-import java.sql.SQLException;\r\n-import java.sql.Time;\r\n-import java.sql.Timestamp;\r\n-import java.util.Calendar;\r\n-\r\n-/**\r\n- * A virtual PreparedStaement that delegates to a set of actual PreparedStatements.\r\n- * \r\n- * @author Pinaki Poddar \r\n- *\r\n- */\r\n-class DistributedPreparedStatement extends DistributedTemplate<PreparedStatement>\r\n-\t\timplements PreparedStatement {\r\n-\r\n-\tDistributedPreparedStatement(DistributedConnection c) {\r\n-\t\tsuper(c);\r\n-\t}\r\n-\r\n-\tpublic void clearParameters() throws SQLException {\r\n-\t\tfor (PreparedStatement s : this)\r\n-\t\t\ts.clearParameters();\r\n-\t}\r\n-\r\n-\tpublic boolean execute() throws SQLException {\r\n-\t\tboolean ret = true;\r\n-\t\tfor (PreparedStatement s : this)\r\n-\t\t\tret = s.execute() & ret;\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic ResultSet executeQuery() throws SQLException {\r\n-\t\tDistributedResultSet mrs = new DistributedResultSet();\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tmrs.add(t.executeQuery());\r\n-\t\treturn mrs;\r\n-\t}\r\n-\r\n-\tpublic int executeUpdate() throws SQLException {\r\n-\t\tint ret = 0;\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tret += t.executeUpdate();\r\n-\t\treturn ret;\r\n-\t}\r\n-\r\n-\tpublic ResultSetMetaData getMetaData() throws SQLException {\r\n-\t\treturn master.getMetaData();\r\n-\t}\r\n-\r\n-\tpublic ParameterMetaData getParameterMetaData() throws SQLException {\r\n-\t\tthrow new UnsupportedOperationException();\r\n-\t}\r\n-\r\n-\tpublic void setArray(int i, Array x) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setArray(i, x);\r\n-\t}\r\n-\r\n-\tpublic void setAsciiStream(int arg0, InputStream arg1, int arg2)\r\n-\t\t\tthrows SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setAsciiStream(arg0, arg1, arg2);\r\n-\t}\r\n-\r\n-\tpublic void setBigDecimal(int arg0, BigDecimal arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setBigDecimal(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setBinaryStream(int arg0, InputStream arg1, int arg2)\r\n-\t\t\tthrows SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setBinaryStream(arg0, arg1, arg2);\r\n-\t}\r\n-\r\n-\tpublic void setBlob(int arg0, Blob arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setBlob(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setBoolean(int arg0, boolean arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setBoolean(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setByte(int arg0, byte arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setByte(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setBytes(int arg0, byte[] arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setBytes(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setCharacterStream(int arg0, Reader arg1, int arg2)\r\n-\t\t\tthrows SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setCharacterStream(arg0, arg1, arg2);\r\n-\t}\r\n-\r\n-\tpublic void setClob(int arg0, Clob arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setClob(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setDate(int arg0, Date arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setDate(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setDate(int arg0, Date arg1, Calendar arg2) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setDate(arg0, arg1, arg2);\r\n-\t}\r\n-\r\n-\tpublic void setDouble(int arg0, double arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setDouble(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setFloat(int arg0, float arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setFloat(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setInt(int arg0, int arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setInt(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setLong(int arg0, long arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setLong(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setNull(int arg0, int arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setNull(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setNull(int arg0, int arg1, String arg2) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setNull(arg0, arg1, arg2);\r\n-\t}\r\n-\r\n-\tpublic void setObject(int arg0, Object arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setObject(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setObject(int arg0, Object arg1, int arg2) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setObject(arg0, arg1, arg2);\r\n-\t}\r\n-\r\n-\tpublic void setObject(int arg0, Object arg1, int arg2, int arg3)\r\n-\t\t\tthrows SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setObject(arg0, arg1, arg2, arg3);\r\n-\t}\r\n-\r\n-\tpublic void setRef(int arg0, Ref arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setRef(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setShort(int arg0, short arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setShort(arg0, arg1);\r\n-\t}\r\n-\r\n-\tpublic void setString(int arg0, String arg1) throws SQLException {\r\n-\t\tfor (PreparedStatement t : this)\r\n-\t\t\tt.setString(arg0, arg1);\r\n-\t}\r\n-\r\n-\t public void setTime(int arg0, Time arg1) throws SQLException {\r\n-\t\t\tfor (PreparedStatement t : this)\r\n-\t\t\t\tt.setTime(arg0, arg1);\r\n-\t }\r\n-\t\r\n-\t public void setTime(int arg0, Time arg1, Calendar arg2) throws\r\n-\t SQLException {\r\n-\t\t\tfor (PreparedStatement t : this)\r\n-\t\t\t\tt.setTime(arg0, arg1, arg2);\r\n-\t }\r\n-\t\r\n-\t public void setTimestamp(int arg0, Timestamp arg1) throws SQLException {\r\n-\t\t\tfor (PreparedStatement t : this)\r\n-\t\t\t\tt.setTimestamp(arg0, arg1);\r\n-\t }\r\n-\t\r\n-\t public void setTimestamp(int arg0, Timestamp arg1, Calendar arg2)\r\n-\t throws SQLException {\r\n-\t\t\tfor (PreparedStatement t : this)\r\n-\t\t\t\tt.setTimestamp(arg0, arg1, arg2);\r\n-\t }\r\n-\t\r\n-\t public void setURL(int arg0, URL arg1) throws SQLException {\r\n-\t\t\tfor (PreparedStatement t : this)\r\n-\t\t\t\tt.setURL(arg0, arg1);\r\n-\t }\r\n-\t\r\n-\t public void setUnicodeStream(int arg0, InputStream arg1, int arg2)\r\n-\t     throws SQLException {\r\n-\t\t\tfor (PreparedStatement t : this)\r\n-\t\t\t\tt.setUnicodeStream(arg0, arg1, arg2);\r\n-\t }\r\n-\t\r\n-\t public void addBatch() throws SQLException {\r\n-\t\tfor (PreparedStatement t:this)\r\n-\t\t    t.addBatch();\r\n-\t }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.slice.jdbc;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.net.URL;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.ParameterMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+\n+/**\n+ * A virtual PreparedStaement that delegates to a set of actual PreparedStatements.\n+ * \n+ * @author Pinaki Poddar \n+ *\n+ */\n+class DistributedPreparedStatement extends DistributedTemplate<PreparedStatement>\n+\t\timplements PreparedStatement {\n+\n+\tDistributedPreparedStatement(DistributedConnection c) {\n+\t\tsuper(c);\n+\t}\n+\n+\tpublic void clearParameters() throws SQLException {\n+\t\tfor (PreparedStatement s : this)\n+\t\t\ts.clearParameters();\n+\t}\n+\n+\tpublic boolean execute() throws SQLException {\n+\t\tboolean ret = true;\n+\t\tfor (PreparedStatement s : this)\n+\t\t\tret = s.execute() & ret;\n+\t\treturn ret;\n+\t}\n+\n+\tpublic ResultSet executeQuery() throws SQLException {\n+\t\tDistributedResultSet mrs = new DistributedResultSet();\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tmrs.add(t.executeQuery());\n+\t\treturn mrs;\n+\t}\n+\n+\tpublic int executeUpdate() throws SQLException {\n+\t\tint ret = 0;\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tret += t.executeUpdate();\n+\t\treturn ret;\n+\t}\n+\n+\tpublic ResultSetMetaData getMetaData() throws SQLException {\n+\t\treturn master.getMetaData();\n+\t}\n+\n+\tpublic ParameterMetaData getParameterMetaData() throws SQLException {\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic void setArray(int i, Array x) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setArray(i, x);\n+\t}\n+\n+\tpublic void setAsciiStream(int arg0, InputStream arg1, int arg2)\n+\t\t\tthrows SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setAsciiStream(arg0, arg1, arg2);\n+\t}\n+\n+\tpublic void setBigDecimal(int arg0, BigDecimal arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setBigDecimal(arg0, arg1);\n+\t}\n+\n+\tpublic void setBinaryStream(int arg0, InputStream arg1, int arg2)\n+\t\t\tthrows SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setBinaryStream(arg0, arg1, arg2);\n+\t}\n+\n+\tpublic void setBlob(int arg0, Blob arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setBlob(arg0, arg1);\n+\t}\n+\n+\tpublic void setBoolean(int arg0, boolean arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setBoolean(arg0, arg1);\n+\t}\n+\n+\tpublic void setByte(int arg0, byte arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setByte(arg0, arg1);\n+\t}\n+\n+\tpublic void setBytes(int arg0, byte[] arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setBytes(arg0, arg1);\n+\t}\n+\n+\tpublic void setCharacterStream(int arg0, Reader arg1, int arg2)\n+\t\t\tthrows SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setCharacterStream(arg0, arg1, arg2);\n+\t}\n+\n+\tpublic void setClob(int arg0, Clob arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setClob(arg0, arg1);\n+\t}\n+\n+\tpublic void setDate(int arg0, Date arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setDate(arg0, arg1);\n+\t}\n+\n+\tpublic void setDate(int arg0, Date arg1, Calendar arg2) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setDate(arg0, arg1, arg2);\n+\t}\n+\n+\tpublic void setDouble(int arg0, double arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setDouble(arg0, arg1);\n+\t}\n+\n+\tpublic void setFloat(int arg0, float arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setFloat(arg0, arg1);\n+\t}\n+\n+\tpublic void setInt(int arg0, int arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setInt(arg0, arg1);\n+\t}\n+\n+\tpublic void setLong(int arg0, long arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setLong(arg0, arg1);\n+\t}\n+\n+\tpublic void setNull(int arg0, int arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setNull(arg0, arg1);\n+\t}\n+\n+\tpublic void setNull(int arg0, int arg1, String arg2) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setNull(arg0, arg1, arg2);\n+\t}\n+\n+\tpublic void setObject(int arg0, Object arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setObject(arg0, arg1);\n+\t}\n+\n+\tpublic void setObject(int arg0, Object arg1, int arg2) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setObject(arg0, arg1, arg2);\n+\t}\n+\n+\tpublic void setObject(int arg0, Object arg1, int arg2, int arg3)\n+\t\t\tthrows SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setObject(arg0, arg1, arg2, arg3);\n+\t}\n+\n+\tpublic void setRef(int arg0, Ref arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setRef(arg0, arg1);\n+\t}\n+\n+\tpublic void setShort(int arg0, short arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setShort(arg0, arg1);\n+\t}\n+\n+\tpublic void setString(int arg0, String arg1) throws SQLException {\n+\t\tfor (PreparedStatement t : this)\n+\t\t\tt.setString(arg0, arg1);\n+\t}\n+\n+\t public void setTime(int arg0, Time arg1) throws SQLException {\n+\t\t\tfor (PreparedStatement t : this)\n+\t\t\t\tt.setTime(arg0, arg1);\n+\t }\n+\t\n+\t public void setTime(int arg0, Time arg1, Calendar arg2) throws\n+\t SQLException {\n+\t\t\tfor (PreparedStatement t : this)\n+\t\t\t\tt.setTime(arg0, arg1, arg2);\n+\t }\n+\t\n+\t public void setTimestamp(int arg0, Timestamp arg1) throws SQLException {\n+\t\t\tfor (PreparedStatement t : this)\n+\t\t\t\tt.setTimestamp(arg0, arg1);\n+\t }\n+\t\n+\t public void setTimestamp(int arg0, Timestamp arg1, Calendar arg2)\n+\t throws SQLException {\n+\t\t\tfor (PreparedStatement t : this)\n+\t\t\t\tt.setTimestamp(arg0, arg1, arg2);\n+\t }\n+\t\n+\t public void setURL(int arg0, URL arg1) throws SQLException {\n+\t\t\tfor (PreparedStatement t : this)\n+\t\t\t\tt.setURL(arg0, arg1);\n+\t }\n+\t\n+\t public void setUnicodeStream(int arg0, InputStream arg1, int arg2)\n+\t     throws SQLException {\n+\t\t\tfor (PreparedStatement t : this)\n+\t\t\t\tt.setUnicodeStream(arg0, arg1, arg2);\n+\t }\n+\t\n+\t public void addBatch() throws SQLException {\n+\t\tfor (PreparedStatement t:this)\n+\t\t    t.addBatch();\n+\t }\n+}"},{"sha":"55acc1947d87234864455eed1c9f12e5c21699db","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedResultSet.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"6b680a88db5e2063de12cede452b0bf25a709a76","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","status":"modified","additions":33,"deletions":33,"changes":66,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStatement.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7cbfe3a305ca867b2bdb2401d95ffefaf0e84455","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","status":"modified","additions":435,"deletions":435,"changes":870,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreManager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"f8f70ff44df30d03148f8b6dfebb7c2c107363da","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","status":"modified","additions":244,"deletions":244,"changes":488,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedStoreQuery.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"33836ededb0b0073584f69445ff7d0d237375fde","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","status":"modified","additions":273,"deletions":273,"changes":546,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/DistributedTemplate.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"c62aed5a207371e30d2e963a616d1fdebb04b281","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","status":"modified","additions":50,"deletions":50,"changes":100,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/SliceStoreManager.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"681470949f119bf59357c8a12290553f6a536f21","filename":"openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","status":"modified","additions":165,"deletions":165,"changes":330,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/java/org/apache/openjpa/slice/jdbc/UniqueResultObjectProvider.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"e7050511fe8f5b1e9fed5de6c37d038d7139ce91","filename":"openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","status":"modified","additions":67,"deletions":67,"changes":134,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/resources/org/apache/openjpa/slice/jdbc/localizer.properties?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"2c1b80445ced6f821a80925b2cd4bf6f859da2fa","filename":"openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/resources/org/apache/openjpa/slice/localizer.properties?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"ca73757b76e9b5d5ea4e9bbf714af19050b63fe9","filename":"openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/main/resources/org/apache/openjpa/slice/transaction/localizer.properties?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"d04efb8eb7c9048287d80ab65a32721adc9fc416","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","status":"modified","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/Address.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"818e624b8f4a5b0e8051b02eff380129f344909d","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","status":"modified","additions":48,"deletions":48,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PObject.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"53dc4a9f0511f41f7f97b9425327e9ee79b472d0","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","status":"modified","additions":241,"deletions":241,"changes":482,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/PersistenceTestCase.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8a06c08d4d75a36dbd37c89b9cfb442250910fe0","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","status":"modified","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/Person.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7f895e26b9a0f53e7613816caaec1a4f8214f7b2","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","status":"modified","additions":76,"deletions":76,"changes":152,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/SingleEMFTestCase.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"a70dd3b4d04dc473c4db3221ea59b7dda1032b4a","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","status":"modified","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/SliceTestCase.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"235df3645c3674ad4ac847118baa4a79a3bd6ea1","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","status":"modified","additions":189,"deletions":189,"changes":378,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestBasic.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"aa7089153e198ea3f6ce07efcd6d5c6442129ff5","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","status":"modified","additions":63,"deletions":63,"changes":126,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestConfiguration.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"7b7c6bf78b691009ac5d88efc949152cd926203c","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","status":"modified","additions":128,"deletions":128,"changes":256,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestQuery.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"8b047b61cdb532f5303276b2587ffb06ae5afa68","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/TestXA.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"cb5104a4cc55cc4b2c05b8fd6b9ecca3bb8f8800","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","status":"modified","additions":36,"deletions":36,"changes":72,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/EvenOddDistributionPolicy.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"fe7a54ed26a6663d3d9b6ccf5d3ed9394b7c2950","filename":"openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","status":"modified","additions":78,"deletions":78,"changes":156,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/java/org/apache/openjpa/slice/policy/UserDistributionPolicy.java?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"93389283a9ee3160bf14e8e4d60e9da80d10af10","filename":"openjpa-slice/src/test/resources/META-INF/persistence.xml","status":"modified","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/resources/META-INF/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-slice/src/test/resources/META-INF/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-slice/src/test/resources/META-INF/persistence.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"552e0e589510434d8004028ade7912910528afd5","filename":"openjpa-xmlstore/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-xmlstore/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/openjpa-xmlstore/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-xmlstore/pom.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"},{"sha":"759769d7ae870e8ed5c5471da54a34ab53422c05","filename":"pom.xml","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/pom.xml","raw_url":"https://github.com/apache/openjpa/raw/9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675/pom.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/pom.xml?ref=9d34ef9dfc27f9fd5e712e1afe7f3ac25d119675"}]}

