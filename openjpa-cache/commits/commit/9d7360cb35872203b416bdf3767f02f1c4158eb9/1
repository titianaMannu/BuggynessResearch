{"sha":"9d7360cb35872203b416bdf3767f02f1c4158eb9","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkNzM2MGNiMzU4NzIyMDNiNDE2YmRmMzc2N2YwMmYxYzQxNThlYjk=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-02-22T05:52:06Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-02-22T05:52:06Z"},"message":"OPENJPA-935: Detect table for embedded PC to avoid extra select before delete.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@746640 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0f9dd0793aef870feb3ec9e7509e833175c36cdd","url":"https://api.github.com/repos/apache/openjpa/git/trees/0f9dd0793aef870feb3ec9e7509e833175c36cdd"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9d7360cb35872203b416bdf3767f02f1c4158eb9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9d7360cb35872203b416bdf3767f02f1c4158eb9","html_url":"https://github.com/apache/openjpa/commit/9d7360cb35872203b416bdf3767f02f1c4158eb9","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9d7360cb35872203b416bdf3767f02f1c4158eb9/comments","author":null,"committer":null,"parents":[{"sha":"e2fef6a276ef70e789672f11b0971d1b8ab90336","url":"https://api.github.com/repos/apache/openjpa/commits/e2fef6a276ef70e789672f11b0971d1b8ab90336","html_url":"https://github.com/apache/openjpa/commit/e2fef6a276ef70e789672f11b0971d1b8ab90336"}],"stats":{"total":58,"additions":54,"deletions":4},"files":[{"sha":"868382b8351314ffbf7d7bf7449ebf8a306867fb","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCStoreQuery.java?ref=9d7360cb35872203b416bdf3767f02f1c4158eb9","patch":"@@ -582,7 +582,8 @@ private Table getTable(FieldMapping[] fields, Table table) {\n      * returns INVALID. Also returns INVALID if field is dependent.\n      */\n     private Table getTable(FieldMapping fm, Table table) {\n-        if (fm.getCascadeDelete() != ValueMetaData.CASCADE_NONE)\n+        if (fm.getCascadeDelete() != ValueMetaData.CASCADE_NONE \n+            && !fm.isEmbeddedPC())\n             return INVALID;\n \n         Column[] columns = fm.getColumns();"},{"sha":"ed5e08dba4cea9b923a602ea2a64557ceba0b694","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","status":"modified","additions":43,"deletions":1,"changes":44,"blob_url":"https://github.com/apache/openjpa/blob/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","raw_url":"https://github.com/apache/openjpa/raw/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/embed/TestEmbedded.java?ref=9d7360cb35872203b416bdf3767f02f1c4158eb9","patch":"@@ -23,9 +23,10 @@\n import javax.persistence.EntityManager;\r\n import javax.persistence.EntityTransaction;\r\n \r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n \r\n-public class TestEmbedded extends SingleEMFTestCase {\r\n+public class TestEmbedded extends SQLListenerTestCase {\r\n     public void setUp() {\r\n         super.setUp(BaseEntity.class, Address.class, Geocode.class,\r\n                 CLEAR_TABLES);\r\n@@ -76,6 +77,47 @@ public void testDetachedQueryEmbedded() {\n         \r\n         assertEquals(a2.getGeocode().getLatitude(),1.0f);\r\n     }\r\n+    \r\n+    public void testDeleteEmbeddedDoesNotSelectBeforeDelete() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        String[] streets = {\"S1\", \"S2\", \"S3\"};\r\n+        String[] cities = {\"C1\", \"C2\", \"C3\"};\r\n+        String[] states = {\"AB\", \"CD\", \"EF\"};\r\n+        int[] zips = {123456, 345678, 456789};\r\n+        \r\n+        for (int i = 0; i < streets.length; i++) {\r\n+            Address a = new Address();\r\n+            a.setStreetAddress(streets[i]);\r\n+            a.setCity(cities[i]);\r\n+            a.setState(states[i]);\r\n+            a.setZip(zips[i]);\r\n+            Geocode g = new Geocode();\r\n+            g.setLatitude(i+1.0f);\r\n+            g.setLongtitude(i+6.0f);\r\n+            a.setGeocode(g);\r\n+            em.persist(a);\r\n+        } \r\n+        em.getTransaction().commit();\r\n+        \r\n+        em = emf.createEntityManager();\r\n+        em.getTransaction().begin();\r\n+        sql.clear();\r\n+        int count = em.createQuery(\"DELETE FROM Address a WHERE a.zip=:zip\")\r\n+            .setParameter(\"zip\", zips[0])\r\n+            .executeUpdate();\r\n+        assertEquals(1, count);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(1, sql.size());\r\n+        \r\n+        em.getTransaction().begin();\r\n+        sql.clear();\r\n+        count = em.createQuery(\"DELETE FROM Address\").executeUpdate();\r\n+        assertEquals(streets.length-1, count);\r\n+        assertTrue(count>1);\r\n+        em.getTransaction().commit();\r\n+        assertEquals(1, sql.size());\r\n+    }\r\n \r\n     private void persistAddress(Address address) {\r\n         final EntityManager em = emf.createEntityManager();\r"},{"sha":"96351e916769068b7f1377a7704457344d7b00ce","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","raw_url":"https://github.com/apache/openjpa/raw/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/jdbc/annotations/TestNonstandardMappingAnnotations.java?ref=9d7360cb35872203b416bdf3767f02f1c4158eb9","patch":"@@ -48,7 +48,7 @@ public void setUp() {\n         setUp(NonstandardMappingEntity.class, ExtensionsEntity.class,\r\n             NonstandardMappingMappedSuper.class, EmbedValue2.class,\r\n             EmbedValue.class,\r\n-            CLEAR_TABLES);\r\n+            CLEAR_TABLES, RETAIN_DATA);\r\n \r\n         // trigger complete resolution of metadata etc.\r\n         emf.createEntityManager().close();\r"},{"sha":"4dcfa6bd10dbee0253a65375316238306f147f63","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/openjpa/blob/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9d7360cb35872203b416bdf3767f02f1c4158eb9/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/test/PersistenceTestCase.java?ref=9d7360cb35872203b416bdf3767f02f1c4158eb9","patch":"@@ -61,6 +61,8 @@\n     extends TestCase {\n     private static FixedMap _emfs = new FixedMap();\n     public static final String FRESH_EMF = \"Creates new EntityManagerFactory\";\n+    public static final String RETAIN_DATA = \"Retain data after test run\";\n+    private boolean retainDataOnTearDown; \n     /**\n      * Marker object you pass to {@link #setUp} to indicate that the\n      * database table rows should be cleared.\n@@ -118,6 +120,10 @@ protected OpenJPAEntityManagerFactorySPI createNamedEMF(String pu,\n                 fresh = true;\n                 continue;\n             }\n+            if (props[i] == RETAIN_DATA) {\n+                retainDataOnTearDown= true;\n+                continue;\n+            }\n             if (prop) {\n                 map.put(props[i - 1], props[i]);\n                 prop = false;\n@@ -262,7 +268,8 @@ private void clear(EntityManagerFactory emf, boolean closeEMs,\n         // before issuing delete statements on a new entity manager.\n         if (closeEMs)\n             closeAllOpenEMs(emf);\n-\n+        if (retainDataOnTearDown)\n+            return;\n         EntityManager em = emf.createEntityManager();\n         em.getTransaction().begin();\n         for (ClassMetaData meta : types) {"}]}

