{"sha":"9da79359463d72a0c68087ae0b3c77e6fe8124cc","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkYTc5MzU5NDYzZDcyYTBjNjgwODdhZTBiM2M3N2U2ZmU4MTI0Y2M=","commit":{"author":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-25T19:40:31Z"},"committer":{"name":"Mark Struberg","email":"struberg@apache.org","date":"2013-10-25T19:40:31Z"},"message":"OPENJPA-2018 improve unit test setup\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1535838 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95bfb845e7b3718cfc27cff0a0e9c0bb91f10483","url":"https://api.github.com/repos/apache/openjpa/git/trees/95bfb845e7b3718cfc27cff0a0e9c0bb91f10483"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9da79359463d72a0c68087ae0b3c77e6fe8124cc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9da79359463d72a0c68087ae0b3c77e6fe8124cc","html_url":"https://github.com/apache/openjpa/commit/9da79359463d72a0c68087ae0b3c77e6fe8124cc","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9da79359463d72a0c68087ae0b3c77e6fe8124cc/comments","author":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"committer":{"login":"struberg","id":79310,"node_id":"MDQ6VXNlcjc5MzEw","avatar_url":"https://avatars.githubusercontent.com/u/79310?v=4","gravatar_id":"","url":"https://api.github.com/users/struberg","html_url":"https://github.com/struberg","followers_url":"https://api.github.com/users/struberg/followers","following_url":"https://api.github.com/users/struberg/following{/other_user}","gists_url":"https://api.github.com/users/struberg/gists{/gist_id}","starred_url":"https://api.github.com/users/struberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/struberg/subscriptions","organizations_url":"https://api.github.com/users/struberg/orgs","repos_url":"https://api.github.com/users/struberg/repos","events_url":"https://api.github.com/users/struberg/events{/privacy}","received_events_url":"https://api.github.com/users/struberg/received_events","type":"User","site_admin":false},"parents":[{"sha":"c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","url":"https://api.github.com/repos/apache/openjpa/commits/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","html_url":"https://github.com/apache/openjpa/commit/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6"}],"stats":{"total":171,"additions":67,"deletions":104},"files":[{"sha":"a2ecce259ddada45edf8cb5f67a493606575fd3b","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","status":"modified","additions":67,"deletions":71,"changes":138,"blob_url":"https://github.com/apache/openjpa/blob/9da79359463d72a0c68087ae0b3c77e6fe8124cc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","raw_url":"https://github.com/apache/openjpa/raw/9da79359463d72a0c68087ae0b3c77e6fe8124cc/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/openjpa2018/OpenJPA2018Test.java?ref=9da79359463d72a0c68087ae0b3c77e6fe8124cc","patch":"@@ -18,12 +18,8 @@\n  */\n package org.apache.openjpa.openjpa2018;\n \n-import junit.framework.TestCase;\n-import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.SingleEMTestCase;\n \n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n import javax.persistence.TypedQuery;\n import javax.persistence.criteria.CriteriaBuilder;\n import javax.persistence.criteria.CriteriaQuery;\n@@ -33,87 +29,87 @@\n import java.util.Collection;\n import java.util.List;\n \n-public class OpenJPA2018Test extends TestCase {\n-    private EntityManager em;\n-    private EntityTransaction transaction;\n-    private EntityManagerFactory factory;\n+public class OpenJPA2018Test extends SingleEMTestCase\n+{\n \n     @Override\n     public void setUp() {\n-        factory = OpenJPAPersistence.createEntityManagerFactory(\"openjpa2018\", \"META-INF/openjpa2018.xml\");\n-        em = factory.createEntityManager();\n-        transaction = em.getTransaction();\n-        transaction.begin();\n-    }\n-\n-    @Override\n-    public void tearDown() {\n-        transaction.rollback();\n-        em.close();\n-        factory.close();\n+        super.setUp(User2018.class, CLEAR_TABLES);\n     }\n \n     public void testInCriteriaWithArray() {\n-\n-        User2018 user = new User2018();\n-        em.persist(user);\n-        em.flush();\n-\n-        CriteriaBuilder builder = em.getCriteriaBuilder();\n-\n-        CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n-        Root<User2018> root = criteria.from(User2018.class);\n-        criteria.where(root.get(\"id\").in(builder.parameter(Long[].class)));\n-\n-        TypedQuery<User2018> query = em.createQuery(criteria);\n-        for (ParameterExpression parameter : criteria.getParameters()) {\n-            query.setParameter(parameter, new Long[] { user.id });\n+        em.getTransaction().begin();\n+        try {\n+            User2018 user = new User2018();\n+            em.persist(user);\n+            em.flush();\n+\n+            CriteriaBuilder builder = em.getCriteriaBuilder();\n+\n+            CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n+            Root<User2018> root = criteria.from(User2018.class);\n+            criteria.where(root.get(\"id\").in(builder.parameter(Long[].class)));\n+\n+            TypedQuery<User2018> query = em.createQuery(criteria);\n+            for (ParameterExpression parameter : criteria.getParameters()) {\n+                query.setParameter(parameter, new Long[] { user.id });\n+            }\n+\n+            List<User2018> result = query.getResultList();\n+            assertTrue(!result.isEmpty());\n+        } finally {\n+            em.getTransaction().commit();\n         }\n-\n-        List<User2018> result = query.getResultList();\n-        assertTrue(!result.isEmpty());\n     }\n \n     public void testInCriteriaWithCollection() {\n-\n-        User2018 user = new User2018();\n-        em.persist(user);\n-        em.flush();\n-\n-        CriteriaBuilder builder = em.getCriteriaBuilder();\n-\n-        CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n-        Root<User2018> root = criteria.from(User2018.class);\n-        criteria.where(root.get(\"id\").in(builder.parameter(Collection.class)));\n-\n-        TypedQuery<User2018> query = em.createQuery(criteria);\n-        for (ParameterExpression parameter : criteria.getParameters()) {\n-            query.setParameter(parameter, Arrays.asList(user.id));\n+        em.getTransaction().begin();\n+        try {\n+            User2018 user = new User2018();\n+            em.persist(user);\n+            em.flush();\n+\n+            CriteriaBuilder builder = em.getCriteriaBuilder();\n+\n+            CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n+            Root<User2018> root = criteria.from(User2018.class);\n+            criteria.where(root.get(\"id\").in(builder.parameter(Collection.class)));\n+\n+            TypedQuery<User2018> query = em.createQuery(criteria);\n+            for (ParameterExpression parameter : criteria.getParameters()) {\n+                query.setParameter(parameter, Arrays.asList(user.id));\n+            }\n+\n+            List<User2018> result = query.getResultList();\n+            assertTrue(!result.isEmpty());\n+        } finally {\n+            em.getTransaction().commit();\n         }\n-\n-        List<User2018> result = query.getResultList();\n-        assertTrue(!result.isEmpty());\n     }\n \n     public void testId() {\n-\n-        User2018 user = new User2018();\n-        em.persist(user);\n-        em.flush();\n-\n-        CriteriaBuilder builder = em.getCriteriaBuilder();\n-\n-        CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n-        Root<User2018> root = criteria.from(User2018.class);\n-        criteria.where(builder.equal(root.get(\"id\"), user.id));\n-\n-        TypedQuery<User2018> query = em.createQuery(criteria);\n-        for (ParameterExpression parameter : criteria.getParameters()) {\n-            query.setParameter(parameter, user.id);\n+        em.getTransaction().begin();\n+        try {\n+            User2018 user = new User2018();\n+            em.persist(user);\n+            em.flush();\n+\n+            CriteriaBuilder builder = em.getCriteriaBuilder();\n+\n+            CriteriaQuery<User2018> criteria = builder.createQuery(User2018.class);\n+            Root<User2018> root = criteria.from(User2018.class);\n+            criteria.where(builder.equal(root.get(\"id\"), user.id));\n+\n+            TypedQuery<User2018> query = em.createQuery(criteria);\n+            for (ParameterExpression parameter : criteria.getParameters()) {\n+                query.setParameter(parameter, user.id);\n+            }\n+\n+            List<User2018> result = query.getResultList();\n+            assertTrue(!result.isEmpty());\n+        } finally {\n+            em.getTransaction().commit();\n         }\n-\n-        List<User2018> result = query.getResultList();\n-        assertTrue(!result.isEmpty());\n     }\n \n }"},{"sha":"384801970e0fdc728adad0374682edf0667abc9e","filename":"openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/apache/openjpa/blob/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml","raw_url":"https://github.com/apache/openjpa/raw/c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6/openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/resources/META-INF/openjpa2018.xml?ref=c428609da75df0ca7bc5dfd7727ef6c4ebc99bb6","patch":"@@ -1,33 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n- Licensed to the Apache Software Foundation (ASF) under one\n- or more contributor license agreements.  See the NOTICE file\n- distributed with this work for additional information\n- regarding copyright ownership.  The ASF licenses this file\n- to you under the Apache License, Version 2.0 (the\n- \"License\"); you may not use this file except in compliance\n- with the License.  You may obtain a copy of the License at\n-\n- http://www.apache.org/licenses/LICENSE-2.0\n-\n- Unless required by applicable law or agreed to in writing,\n- software distributed under the License is distributed on an\n- \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- KIND, either express or implied.  See the License for the\n- specific language governing permissions and limitations\n- under the License.\n--->\n-<persistence version=\"2.0\" xmlns=\"http://java.sun.com/xml/ns/persistence\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">\n-  <persistence-unit name=\"openjpa2018\">\n-    <provider>org.apache.openjpa.persistence.PersistenceProviderImpl</provider>\n-    <class>org.apache.openjpa.openjpa2018.User2018</class>\n-    <properties>\n-      <property name=\"openjpa.ConnectionDriverName\" value=\"org.apache.derby.jdbc.EmbeddedDriver\"/>\n-      <property name=\"openjpa.ConnectionURL\" value=\"jdbc:derby:memory:openjpa2018;create=true\"/>\n-      <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\"/>\n-      <property name=\"openjpa.RuntimeUnenhancedClasses\" value=\"supported\"/>\n-    </properties>\n-  </persistence-unit>\n-</persistence>"}]}

