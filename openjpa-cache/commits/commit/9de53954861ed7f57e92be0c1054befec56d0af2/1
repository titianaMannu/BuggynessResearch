{"sha":"9de53954861ed7f57e92be0c1054befec56d0af2","node_id":"MDY6Q29tbWl0MjA2MzY0OjlkZTUzOTU0ODYxZWQ3ZjU3ZTkyYmUwYzEwNTRiZWZlYzU2ZDBhZjI=","commit":{"author":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-21T22:29:47Z"},"committer":{"name":"A. Abram White","email":"awhite@apache.org","date":"2006-08-21T22:29:47Z"},"message":"Add some query validations on compilation.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openjpa/trunk@433399 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1d2e88a3badd0fa7fbb46d9edb56de4f66f731d6","url":"https://api.github.com/repos/apache/openjpa/git/trees/1d2e88a3badd0fa7fbb46d9edb56de4f66f731d6"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9de53954861ed7f57e92be0c1054befec56d0af2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9de53954861ed7f57e92be0c1054befec56d0af2","html_url":"https://github.com/apache/openjpa/commit/9de53954861ed7f57e92be0c1054befec56d0af2","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9de53954861ed7f57e92be0c1054befec56d0af2/comments","author":null,"committer":null,"parents":[{"sha":"978bc40091963f9a89f08b64a4163687a0d9fec7","url":"https://api.github.com/repos/apache/openjpa/commits/978bc40091963f9a89f08b64a4163687a0d9fec7","html_url":"https://github.com/apache/openjpa/commit/978bc40091963f9a89f08b64a4163687a0d9fec7"}],"stats":{"total":320,"additions":236,"deletions":84},"files":[{"sha":"eaa628eb48879dfcad48b000297528576f4c9508","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/SQLStoreQuery.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -235,14 +235,8 @@ else if (q.getContext().getCandidateType() != null)\n                         res, q.getContext().getResultType());\n             } catch (SQLException se) {\n                 if (stmnt != null)\n-                    try {\n-                        stmnt.close();\n-                    } catch (SQLException se2) {\n-                    }\n-                try {\n-                    conn.close();\n-                } catch (SQLException se2) {\n-                }\n+                    try { stmnt.close(); } catch (SQLException se2) {}\n+                try { conn.close(); } catch (SQLException se2) {}\n                 throw SQLExceptions.getStore(se, dict);\n             }\n "},{"sha":"8e20b081411ee8ae026c0a825d28a77bfb83e20c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/AbstractVal.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -36,6 +36,10 @@ public boolean isVariable() {\n         return false;\n     }\n \n+    public boolean isAggregate() {\n+        return false;\n+    }\n+\n     public void appendIsEmpty(SQLBuffer sql, Select sel, JDBCStore store,\n         Object[] params, JDBCFetchConfiguration fetch) {\n         sql.append(FALSE);"},{"sha":"411ca1a2b211d719f2e37dd84d790b8469a1e65c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Aggregate.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -62,8 +62,8 @@ public void setMetaData(ClassMetaData meta) {\n         _meta = meta;\n     }\n \n-    public boolean isVariable() {\n-        return false;\n+    public boolean isAggregate() {\n+        return true;\n     }\n \n     public Class getType() {"},{"sha":"8e8a21b6653a32dda61f150d03ab85b1a5975067","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Avg.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -34,7 +34,7 @@ protected String getOperator() {\n         return \"AVG\";\n     }\n \n-    protected boolean isAggregate() {\n+    public boolean isAggregate() {\n         return true;\n     }\n }"},{"sha":"42729b7c1a367abff7da0bb376cb1cfb0675e0bc","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Count.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -48,7 +48,7 @@ protected String getOperator() {\n         return \"COUNT\";\n     }\n \n-    protected boolean isAggregate() {\n+    public boolean isAggregate() {\n         return true;\n     }\n }"},{"sha":"3cac14d4bd9e276d06706fb3d4c00ce2de965b91","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Distinct.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -41,9 +41,5 @@ public void initialize(Select sel, JDBCStore store, boolean nullTest) {\n     protected String getOperator() {\n         return \"DISTINCT\";\n     }\n-\n-    protected boolean isAggregate() {\n-        return false;\n-    }\n }\n "},{"sha":"bfe7a5ad6b4e3b30ca12a1e2d99acb41c186be90","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Extension.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -70,6 +70,10 @@ public boolean isVariable() {\n         return false;\n     }\n \n+    public boolean isAggregate() {\n+        return false;\n+    }\n+\n     public Class getType() {\n         if (_cast != null)\n             return _cast;"},{"sha":"a136f6519537c0cda6f9590100b8afeb663d7fe5","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/HasContainsExpressionVisitor.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -14,13 +14,14 @@\n \n     private boolean _found = false;\n \n-    /**\n-     * Whether a contains expression has been found.\n-     */\n-    public boolean foundContainsExpression() {\n-        return _found;\n+    public static boolean hasContains(Expression exp) {\n+        if (exp == null)\n+            return false;\n+        HasContainsExpressionVisitor v = new HasContainsExpressionVisitor();\n+        exp.acceptVisit(v);\n+        return v._found;\n     }\n-    \n+\n     public void enter(Expression exp) {\n         if (!_found)\n             _found = exp instanceof ContainsExpression "},{"sha":"2a9426f8a31d752082ef5766d649cb1a32b9c64c","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/JDBCExpressionFactory.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -213,13 +213,9 @@ public Expression or(Expression exp1, Expression exp2) {\n     }\n \n     public Expression not(Expression exp) {\n-        Exp e = (Exp) exp;\n-        HasContainsExpressionVisitor visitor = \n-            new HasContainsExpressionVisitor();\n-        e.acceptVisit(visitor);\n-        if (visitor.foundContainsExpression())\n-            return new NotContainsExpression(e);\n-        return new NotExpression(e);\n+        if (HasContainsExpressionVisitor.hasContains(exp))\n+            return new NotContainsExpression((Exp) exp);\n+        return new NotExpression((Exp) exp);\n     }\n \n     public Expression bindVariable(Value var, Value val) {"},{"sha":"fa2aebc64720a7a16b4d1fe601aa0bb6b26b3068","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Max.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -34,7 +34,7 @@ protected String getOperator() {\n         return \"MAX\";\n     }\n \n-    protected boolean isAggregate() {\n+    public boolean isAggregate() {\n         return true;\n     }\n }"},{"sha":"a380269fad6210955b69997e715c98d606aad409","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Min.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -34,7 +34,7 @@ protected String getOperator() {\n         return \"MIN\";\n     }\n \n-    protected boolean isAggregate() {\n+    public boolean isAggregate() {\n         return true;\n     }\n }"},{"sha":"1fb892de015e0c593f66f6deb1f843f477e0840b","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -20,6 +20,7 @@\n import java.util.LinkedList;\n import java.util.ListIterator;\n \n+import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.jdbc.kernel.JDBCFetchConfiguration;\n import org.apache.openjpa.jdbc.kernel.JDBCStore;\n import org.apache.openjpa.jdbc.meta.ClassMapping;\n@@ -626,6 +627,22 @@ public void appendIsNotNull(SQLBuffer sql, Select sel,\n             _field.appendIsNotNull(sql, sel, _joins);\n     }\n \n+    public int hashCode() {\n+        if (_actions == null)\n+            return _candidate.hashCode();\n+        return _candidate.hashCode() ^ _actions.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof PCPath))\n+            return false;\n+        PCPath path = (PCPath) other;\n+        return ObjectUtils.equals(_candidate, path._candidate)\n+            && ObjectUtils.equals(_actions, path._actions);\n+    }\n+\n     /**\n      * Helper class representing an action.\n      */\n@@ -645,5 +662,19 @@ public void appendIsNotNull(SQLBuffer sql, Select sel,\n         public String toString() {\n             return op + \"|\" + data;\n         }\n+\n+        public int hashCode() {\n+            if (data == null)\n+                return op;\n+            return op ^ data.hashCode();\n+        }\n+\n+        public boolean equals(Object other) {\n+            if (other == this)\n+                return true;\n+            Action a = (Action) other;\n+            return op == a.op\n+                && ObjectUtils.equals(data, a.data);\n+        }\n     }\n }"},{"sha":"189123d11bb3bebc22aafcfc07834ee9afb40383","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/SelectConstructor.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -205,12 +205,8 @@ else if ((exps.distinct & exps.DISTINCT_FALSE) != 0)\n     private void initializeJoins(Select sel, JDBCStore store,\n         QueryExpressions exps, Object[] params) {\n         Map contains = null;\n-        HasContainsExpressionVisitor visitor = \n-            new HasContainsExpressionVisitor();\n-        exps.filter.acceptVisit(visitor);\n-        if (!visitor.foundContainsExpression() && exps.having != null)\n-            exps.having.acceptVisit(visitor);\n-        if (visitor.foundContainsExpression())\n+        if (HasContainsExpressionVisitor.hasContains(exps.filter)\n+            || HasContainsExpressionVisitor.hasContains(exps.having))\n             contains = new HashMap(7);\n \n         // initialize filter and having expressions"},{"sha":"991d26d87f6b5deffebce60121864a01279075a2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Sum.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -45,7 +45,7 @@ protected String getOperator() {\n         return \"SUM\";\n     }\n \n-    protected boolean isAggregate() {\n+    public boolean isAggregate() {\n         return true;\n     }\n }"},{"sha":"84169ba247afb6bca29cb0357e41bfb4f4fe8b33","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -144,13 +144,6 @@ public void appendTo(SQLBuffer sql, int index, Select sel,\n         sql.append(\")\");\n     }\n \n-    /**\n-     * Return whether this operator is an aggregate.\n-     */\n-    protected boolean isAggregate() {\n-        return false;\n-    }\n-\n     /**\n      * Return the type of this value based on the argument type. Returns\n      * the argument type by default."},{"sha":"e2c371f3111589612f72db4417147d0b758125ea","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/datacache/QueryCacheStoreQuery.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -380,6 +380,10 @@ public Number executeUpdate(StoreQuery q, Map params) {\n             return EMPTY_STRINGS;\n         }\n \n+        public void validate(StoreQuery q) {\n+            _ex.validate(unwrap(q));\n+        }\n+\n         public Object getOrderingValue(StoreQuery q, Object[] params,\n             Object resultObject, int orderIndex) {\n             return _ex.getOrderingValue(unwrap(q), params, resultObject,"},{"sha":"8d0a1f5231758985ed790dc828b6df26b448d918","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/AbstractStoreQuery.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -137,6 +137,9 @@ public Number executeUpdate(StoreQuery q, Map params) {\n             return EMPTY_STRINGS;\n         }\n \n+        public void validate(StoreQuery q) {\n+        }\n+\n         public Object getOrderingValue(StoreQuery q, Object[] params,\n             Object resultObject, int orderIndex) {\n             return null;"},{"sha":"278002122a868268b77cc36b8b40756d8f2f0513","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","status":"modified","additions":76,"deletions":3,"changes":79,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/ExpressionStoreQuery.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -17,9 +17,11 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.apache.commons.collections.map.LinkedMap;\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n@@ -285,8 +287,14 @@ protected ExpressionFactory getExpressionFactory(ClassMetaData type) {\n         extends AbstractExecutor\n         implements Executor {\n \n-        abstract QueryExpressions[] getQueryExpressions();\n+        /**\n+         * Return the parsed query expressions for our candidate types.\n+         */\n+        protected abstract QueryExpressions[] getQueryExpressions();\n \n+        /**\n+         * Return the query expressions for one candidate type, or die if none.\n+         */\n         private QueryExpressions assertQueryExpression() {\n             QueryExpressions[] exp = getQueryExpressions();\n             if (exp == null || exp.length < 1)\n@@ -315,6 +323,11 @@ protected void assertNotContainer(Value val, StoreQuery q) {\n             }\n         }\n \n+        public final void validate(StoreQuery q) {\n+            QueryExpressions exps = assertQueryExpression();    \n+            ValidateGroupingExpressionVisitor.validate(q.getContext(), exps); \n+        }\n+\n         public final Class getResultClass(StoreQuery q) {\n             return assertQueryExpression().resultClass;\n         }\n@@ -369,6 +382,66 @@ public final Map getUpdates(StoreQuery q) {\n         public boolean isPacking(StoreQuery q) {\n             return false;\n         }\n+\n+        /**\n+         * Throws an exception if select or having clauses contain \n+         * non-aggregate, non-grouped paths.\n+         */\n+        private static class ValidateGroupingExpressionVisitor \n+            extends AbstractExpressionVisitor {\n+\n+            private final QueryContext _ctx;\n+            private boolean _grouping = false;\n+            private Set _grouped = null;\n+            private Value _agg = null;\n+\n+            /**\n+             * Throw proper exception if query does not meet validation.\n+             */\n+            public static void validate(QueryContext ctx, \n+                QueryExpressions exps) {\n+                if (exps.grouping.length == 0)\n+                    return;\n+\n+                ValidateGroupingExpressionVisitor visitor = \n+                    new ValidateGroupingExpressionVisitor(ctx);\n+                visitor._grouping = true;\n+                for (int i = 0; i < exps.grouping.length; i++)\n+                    exps.grouping[i].acceptVisit(visitor);\n+                visitor._grouping = false;\n+                if (exps.having != null)\n+                    exps.having.acceptVisit(visitor);\n+                for (int i = 0; i < exps.projections.length; i++)\n+                    exps.projections[i].acceptVisit(visitor);\n+            }\n+\n+            public ValidateGroupingExpressionVisitor(QueryContext ctx) {\n+                _ctx = ctx;\n+            }\n+\n+            public void enter(Value val) {\n+                if (_grouping) {\n+                    if (val instanceof Path) {\n+                        if (_grouped == null)\n+                            _grouped = new HashSet();\n+                        _grouped.add(val);\n+                    }\n+                } else if (_agg == null) {\n+                    if (val.isAggregate()) \n+                        _agg = val;\n+                    else if (val instanceof Path \n+                        && (_grouped == null || !_grouped.contains(val))) {\n+                        throw new UserException(_loc.get(\"bad-grouping\",\n+                            _ctx.getCandidateType(), _ctx.getQueryString())); \n+                    }\n+                }\n+            }\n+\n+            public void exit(Value val) {\n+                if (val == _agg)\n+                    _agg = null;\n+            }\n+        }\n     }\n \n     /**\n@@ -410,7 +483,7 @@ public InMemoryExecutor(ExpressionStoreQuery q,\n             }\n         }\n \n-        QueryExpressions[] getQueryExpressions() {\n+        protected QueryExpressions[] getQueryExpressions() {\n             return _exps;\n         }\n \n@@ -568,7 +641,7 @@ public DataStoreExecutor(ExpressionStoreQuery q,\n             }\n         }\n \n-        QueryExpressions[] getQueryExpressions() {\n+        protected QueryExpressions[] getQueryExpressions() {\n             return _exps;\n         }\n "},{"sha":"f2c2091587a7ce8dee821b35bda1450d6b779836","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","status":"modified","additions":37,"deletions":34,"changes":71,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/MethodStoreQuery.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -206,41 +206,9 @@ public ResultObjectProvider executeQuery(StoreQuery q,\n          * result.\n          */\n         private Object invoke(StoreQuery q, Object[] args) {\n-            Method meth = _meth;\n-            if (meth == null) {\n-                String methName = q.getContext().getQueryString();\n-                if (methName == null || methName.length() == 0)\n-                    throw new UserException(_loc.get(\"no-method\"));\n-\n-                int dotIdx = methName.lastIndexOf('.');\n-                Class cls;\n-                if (dotIdx == -1)\n-                    cls = _meta.getDescribedType();\n-                else {\n-                    cls = q.getContext().classForName(methName.substring(0,\n-                        dotIdx), null);\n-                    if (cls == null)\n-                        throw new UserException(_loc.get(\"bad-method-class\",\n-                            methName.substring(0, dotIdx), methName));\n-                    methName = methName.substring(dotIdx + 1);\n-                }\n-\n-                Class[] types = (_inMem) ? ARGS_INMEM : ARGS_DATASTORE;\n-                try {\n-                    meth = cls.getMethod(methName, types);\n-                } catch (Exception e) {\n-                    String msg = (_inMem) ? \"bad-inmem-method\"\n-                        : \"bad-datastore-method\";\n-                    throw new UserException(_loc.get(msg, methName, cls));\n-                }\n-                if (!Modifier.isStatic(meth.getModifiers()))\n-                    throw new UserException(_loc.get(\"method-not-static\",\n-                        meth));\n-                _meth = meth;\n-            }\n-\n+            validate(q);\n             try {\n-                return meth.invoke(null, args);\n+                return _meth.invoke(null, args);\n             } catch (OpenJPAException ke) {\n                 throw ke;\n             } catch (Exception e) {\n@@ -249,6 +217,41 @@ private Object invoke(StoreQuery q, Object[] args) {\n             }\n         }\n \n+        public void validate(StoreQuery q) {\n+            if (_meth != null)\n+                return;\n+\n+            String methName = q.getContext().getQueryString();\n+            if (methName == null || methName.length() == 0)\n+                throw new UserException(_loc.get(\"no-method\"));\n+\n+            int dotIdx = methName.lastIndexOf('.');\n+            Class cls;\n+            if (dotIdx == -1)\n+                cls = _meta.getDescribedType();\n+            else {\n+                cls = q.getContext().classForName(methName.substring(0, dotIdx),\n+                    null);\n+                if (cls == null)\n+                    throw new UserException(_loc.get(\"bad-method-class\",\n+                        methName.substring(0, dotIdx), methName));\n+                methName = methName.substring(dotIdx + 1);\n+            }\n+\n+            Method meth;\n+            Class[] types = (_inMem) ? ARGS_INMEM : ARGS_DATASTORE;\n+            try {\n+                meth = cls.getMethod(methName, types);\n+            } catch (Exception e) {\n+                String msg = (_inMem) ? \"bad-inmem-method\"\n+                    : \"bad-datastore-method\";\n+                throw new UserException(_loc.get(msg, methName, cls));\n+            }\n+            if (!Modifier.isStatic(meth.getModifiers()))\n+                throw new UserException(_loc.get(\"method-not-static\", meth));\n+            _meth = meth;\n+        }\n+\n         public LinkedMap getParameterTypes(StoreQuery q) {\n             return ((MethodStoreQuery) q).bindParameterTypes();\n \t\t}"},{"sha":"e9229c6aa2bea4e100cbca42a89da57e88c1a212","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/QueryImpl.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -576,7 +576,9 @@ public void compile() {\n         lock();\n         try {\n             assertOpen();\n-            getResultPacker(compileForExecutor());\n+            StoreQuery.Executor ex = compileForExecutor();\n+            getResultPacker(ex);\n+            ex.validate(_storeQuery);\n         } finally {\n             unlock();\n         }\n@@ -1877,6 +1879,10 @@ public Number executeUpdate(StoreQuery q, Map params) {\n             return (String[]) results.toArray(new String[results.size()]);\n         }\n \n+        public void validate(StoreQuery q) {\n+            _executors[0].validate(q);\n+        }\n+\n         public Object getOrderingValue(StoreQuery q, Object[] params,\n             Object resultObject, int idx) {\n             // unfortunately, at this point (must be a merged rop containing"},{"sha":"46f01cd2793c755b03230c90eef29e61e88d6806","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/StoreQuery.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -222,6 +222,11 @@ public ResultObjectProvider executeQuery(StoreQuery q, Map params,\n         public String[] getDataStoreActions(StoreQuery q, Object[] params,\n             long startIdx, long endIdx);\n \n+        /**\n+         * Validate components of query.\n+         */\n+        public void validate(StoreQuery q);\n+\n         /**\n          * Extract the value of the <code>orderIndex</code>th ordering\n          * expression in {@link Query#getOrderingClauses} from the"},{"sha":"68c7cddfc1788bca85700d58c2def1a70e93c89c","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Aggregate.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -43,6 +43,10 @@ public Aggregate(AggregateListener listener, Val arg) {\n         _arg = arg;\n     }\n \n+    public boolean isAggregate() {\n+        return true;\n+    }\n+\n     public Class getType() {\n         return _listener.getType(getArgTypes());\n     }"},{"sha":"cda372d038b2e4c75a1b997aac93f153513481c6","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/AggregateVal.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -42,6 +42,10 @@ public AggregateVal(Val val) {\n         _val = val;\n     }\n \n+    public boolean isAggregate() {\n+        return true;\n+    }\n+\n     public Class getType() {\n         return getType(_val.getType());\n     }"},{"sha":"147bde60a4c4adcfb54eac50ee16e4354f20ac61","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/CandidatePath.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -19,6 +19,7 @@\n import java.util.LinkedList;\n import java.util.ListIterator;\n \n+import org.apache.commons.lang.ObjectUtils;\n import org.apache.openjpa.enhance.PersistenceCapable;\n import org.apache.openjpa.kernel.Broker;\n import org.apache.openjpa.kernel.Filters;\n@@ -145,6 +146,18 @@ protected Object eval(Object candidate, Object orig,\n         return candidate;\n     }\n \n+    public int hashCode() {\n+        return (_actions == null) ? 0 : _actions.hashCode();\n+    }\n+\n+    public boolean equals(Object other) {\n+        if (other == this)\n+            return true;\n+        if (!(other instanceof CandidatePath))\n+            return false;\n+        return ObjectUtils.equals(_actions, ((CandidatePath) other)._actions);\n+    }\n+\n     /**\n      * Represents a traversal through a field.\n      */\n@@ -157,5 +170,15 @@ private Traversal(FieldMetaData field, boolean nullTraversal) {\n             this.field = field;\n             this.nullTraversal = nullTraversal;\n         }\n+\n+        public int hashCode() {\n+            return field.hashCode();\n+        }\n+\n+        public boolean equals(Object other) {\n+            if (other == this)\n+                return true;\n+            return ((Traversal) other).field.equals(field);\n+        }\n \t}\n }"},{"sha":"41505aa174401f40995870d167e8118af20cbe31","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Val.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -103,6 +103,10 @@ public boolean isVariable() {\n         return false;\n     }\n \n+    public boolean isAggregate() {\n+        return false;\n+    }\n+\n     public void acceptVisit(ExpressionVisitor visitor) {\n         visitor.enter(this);\n         visitor.exit(this);"},{"sha":"993dd2a6ccd15641a44e9edaa89de8a026262159","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/exps/Value.java?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -43,6 +43,11 @@\n      */\n     public boolean isVariable();\n \n+    /**\n+     * Return true if this value is an aggregate.\n+     */\n+    public boolean isAggregate();\n+\n     /**\n      * Return any associated persistent type.\n      */"},{"sha":"1b00f932f31fb2c9c0da316d1512d1e9e6f06785","filename":"openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","raw_url":"https://github.com/apache/openjpa/raw/9de53954861ed7f57e92be0c1054befec56d0af2/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/resources/org/apache/openjpa/kernel/localizer.properties?ref=9de53954861ed7f57e92be0c1054befec56d0af2","patch":"@@ -199,14 +199,17 @@ no-version-field: Encountered object \"{0}\" without a version field during \\\n \thave a version field.\n inmem-agg-proj-var: Queries with aggregates or projections using variables \\\n \tcurrently cannot be executed in-memory.  Either set IgnoreCache to true, \\\n-\tset the org.apache.openjpa.FlushBeforeQueries property to true, or execute the query \\\n+\tset the openjpa.FlushBeforeQueries property to true, or execute the query \\\n \tbefore changing any instances in the transaction.  The offending query was \\\n \ton type \"{0}\" with filter \"{1}\".\n merged-order-with-result: This query on candidate type \"{0}\" with filter \"{1}\" \\\n \tinvolves combining the results of multiple queries in memory. \\\n \tYou have chosen to order the results on \"{2}\", but you have not selected \\\n \tthis data in your setResult() clause.  Please include this ordering data \\\n \tin setResult() so that OpenJPA can extract it for in-memory ordering.\n+bad-grouping: Your query on type \"{0}\" with filter \"{1}\" is invalid.  Your \\\n+    select and having clauses must only include aggregates or values that also \\\n+    appear in your grouping clause.\n query-nosupport: The \"{0}\" query type does not support this operation.\n range-too-big: The range of the query is too big. Start index: \"{0}\", end \\\n \tindex: \"{1}\". The range must be less than Integer.MAX_VALUE."}]}

