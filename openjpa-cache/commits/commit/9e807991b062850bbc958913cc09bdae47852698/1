{"sha":"9e807991b062850bbc958913cc09bdae47852698","node_id":"MDY6Q29tbWl0MjA2MzY0OjllODA3OTkxYjA2Mjg1MGJiYzk1ODkxM2NjMDliZGFlNDc4NTI2OTg=","commit":{"author":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-13T00:35:12Z"},"committer":{"name":"Michael Dick","email":"mikedd@apache.org","date":"2007-10-13T00:35:12Z"},"message":"OPENJPA-399 Committing Teresa's patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/branches/1.0.x@584350 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06ead7b9863f8e7c30f139088185614a744d9005","url":"https://api.github.com/repos/apache/openjpa/git/trees/06ead7b9863f8e7c30f139088185614a744d9005"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e807991b062850bbc958913cc09bdae47852698","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e807991b062850bbc958913cc09bdae47852698","html_url":"https://github.com/apache/openjpa/commit/9e807991b062850bbc958913cc09bdae47852698","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e807991b062850bbc958913cc09bdae47852698/comments","author":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"committer":{"login":"mikedd","id":669432,"node_id":"MDQ6VXNlcjY2OTQzMg==","avatar_url":"https://avatars.githubusercontent.com/u/669432?v=4","gravatar_id":"","url":"https://api.github.com/users/mikedd","html_url":"https://github.com/mikedd","followers_url":"https://api.github.com/users/mikedd/followers","following_url":"https://api.github.com/users/mikedd/following{/other_user}","gists_url":"https://api.github.com/users/mikedd/gists{/gist_id}","starred_url":"https://api.github.com/users/mikedd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikedd/subscriptions","organizations_url":"https://api.github.com/users/mikedd/orgs","repos_url":"https://api.github.com/users/mikedd/repos","events_url":"https://api.github.com/users/mikedd/events{/privacy}","received_events_url":"https://api.github.com/users/mikedd/received_events","type":"User","site_admin":false},"parents":[{"sha":"3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","url":"https://api.github.com/repos/apache/openjpa/commits/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","html_url":"https://github.com/apache/openjpa/commit/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d"}],"stats":{"total":175,"additions":12,"deletions":163},"files":[{"sha":"57f0a74a29bedb386443f0587152bd3236886c1d","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9e807991b062850bbc958913cc09bdae47852698/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","raw_url":"https://github.com/apache/openjpa/raw/9e807991b062850bbc958913cc09bdae47852698/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/schema/LocalConstraint.java?ref=9e807991b062850bbc958913cc09bdae47852698","patch":"@@ -93,6 +93,11 @@ public void setColumns(Column[] cols) {\n      * Add a column to the constraint.\n      */\n     public void addColumn(Column col) {\n+    \tif (col == null)\n+            throw new InvalidStateException(_loc.get(\"table-mismatch\",\n+                col == null ? null : col.getTable(),\n+                col == null ? null : getTable()));\n+    \t\n         if (_colList == null)\n             _colList = new ArrayList(3);\n         else if (_colList.contains(col))"},{"sha":"a101690abd261d46b06cf674a71fac4cd6fc2106","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","raw_url":"https://github.com/apache/openjpa/raw/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog1.java?ref=9e807991b062850bbc958913cc09bdae47852698","patch":"@@ -25,18 +25,14 @@\n  * Extension of Animal class illustrating inheritance.\n  */\n @Entity(name = \"Dog1\")\n-@Table(name = \"DOGTAB\", schema = \"SCHEMA1\")\n-@IdClass(DogId.class)\n+@Table(name = \"DOGAUTO\", schema = \"SCHEMA1\")\n public class Dog1 implements Serializable\n \n {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private int id2;\n \n-    @Id\n-    private int datastoreid;\n-\n     private String name;\n \n     private float price;\n@@ -86,11 +82,4 @@ public void setDomestic(boolean domestic) {\n         this.domestic = domestic;\n     }\n \n-    public int getDatastoreid() {\n-        return datastoreid;\n-    }\n-\n-    public void setDatastoreid(int datastoreid) {\n-        this.datastoreid = datastoreid;\n-    }\n }"},{"sha":"5a62ed6eef6bb579de516723b9618bc9f8eba504","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","raw_url":"https://github.com/apache/openjpa/raw/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/Dog2.java?ref=9e807991b062850bbc958913cc09bdae47852698","patch":"@@ -25,18 +25,14 @@\n  * Extension of Animal class illustrating inheritance.\n  */\n @Entity(name = \"Dog2\")\n-@Table(name = \"DOGTAB\", schema = \"SCHEMA2\")\n-@IdClass(DogId.class)\n+@Table(name = \"DOGAUTO\", schema = \"SCHEMA2\")\n public class Dog2 implements Serializable\n \n {\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     private int id2;\n \n-    @Id\n-    private int datastoreid;\n-\n     private String name;\n \n     private float price;\n@@ -86,11 +82,4 @@ public void setDomestic(boolean domestic) {\n         this.domestic = domestic;\n     }\n \n-    public int getDatastoreid() {\n-        return datastoreid;\n-    }\n-\n-    public void setDatastoreid(int datastoreid) {\n-        this.datastoreid = datastoreid;\n-    }\n }"},{"sha":"f7d68629d31e7de9f11863bc91dfbd1c560dbbae","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java","status":"removed","additions":0,"deletions":103,"changes":103,"blob_url":"https://github.com/apache/openjpa/blob/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java","raw_url":"https://github.com/apache/openjpa/raw/3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogId.java?ref=3b2b878d0a686ae22d6dc5d7a626e1e544e9d75d","patch":"@@ -1,103 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.openjpa.persistence.generationtype;\n-\n-\n-import java.io.*;\n-\n-/**\n- * Application identity class for: tutorial.ejb.Animal\n- * \n- * Auto-generated by: org.apache.openjpa.enhance.ApplicationIdTool\n- */\n-public class DogId implements Serializable {\n-    static {\n-        // register persistent class in JVM\n-        try {\n-            Class.forName(\"tutorial.ejb.Dog\");\n-        } catch (Exception e) {\n-        }\n-    }\n-\n-    public int id2;\n-\n-    public int datastoreid;\n-\n-    public DogId() {\n-    }\n-\n-    public DogId(String str) {\n-        fromString(str);\n-    }\n-\n-    public String toString() {\n-        return String.valueOf(id2) + \"::\" + datastoreid;\n-    }\n-\n-    public int hashCode() {\n-        int rs = 17;\n-        rs = rs * 37 + (int) (id2 ^ (id2 >>> 32));\n-        rs = rs\n-                * 37\n-                + ((datastoreid == 0) ? 0 : new Integer(datastoreid).hashCode());\n-        return rs;\n-    }\n-\n-    public boolean equals(Object obj) {\n-        if (this == obj)\n-            return true;\n-        if (obj == null || obj.getClass() != getClass())\n-            return false;\n-\n-        DogId other = (DogId) obj;\n-        return (id2 == other.id2)\n-                && ((datastoreid == 0 && other.datastoreid == 0) || (datastoreid != 0 && datastoreid == other.datastoreid));\n-    }\n-\n-    private void fromString(String str) {\n-        Tokenizer toke = new Tokenizer(str);\n-        str = toke.nextToken();\n-        id2 = Integer.parseInt(str);\n-        str = toke.nextToken();\n-        datastoreid = Integer.parseInt(str);\n-    }\n-\n-    protected static class Tokenizer {\n-        private final String str;\n-\n-        private int last;\n-\n-        public Tokenizer(String str) {\n-            this.str = str;\n-        }\n-\n-        public String nextToken() {\n-            int next = str.indexOf(\"::\", last);\n-            String part;\n-            if (next == -1) {\n-                part = str.substring(last);\n-                last = str.length();\n-            } else {\n-                part = str.substring(last, next);\n-                last = next + 2;\n-            }\n-            return part;\n-        }\n-    }\n-}\n\\ No newline at end of file"},{"sha":"695da48454090648cade8969c8c736285d6e7972","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","raw_url":"https://github.com/apache/openjpa/raw/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable.java?ref=9e807991b062850bbc958913cc09bdae47852698","patch":"@@ -26,8 +26,7 @@\n  * Extension of Animal class illustrating inheritance.\n  */\n @Entity(name = \"DogTable\")\n-@Table(name = \"DOGTABLE\", schema = \"SCHEMA1\")\n-@IdClass(DogId.class)\n+@Table(name = \"DOGTABLES\", schema = \"SCHEMA1\")\n public class DogTable implements Serializable\n \n {\n@@ -38,9 +37,6 @@\n     @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen1\")\n     private int id2;\n \n-    @Id\n-    private int datastoreid;\n-\n     private String name;\n \n     private float price;\n@@ -53,7 +49,6 @@ public DogTable() {\n     }\n \n     public DogTable(String name) {\n-        this.id2 = id2;\n         this.name = name;\n \n     }\n@@ -91,11 +86,4 @@ public void setDomestic(boolean domestic) {\n         this.domestic = domestic;\n     }\n \n-    public int getDatastoreid() {\n-        return datastoreid;\n-    }\n-\n-    public void setDatastoreid(int datastoreid) {\n-        this.datastoreid = datastoreid;\n-    }\n }"},{"sha":"de06404280971ffb80a91dec988feb1b227c075d","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","status":"modified","additions":1,"deletions":14,"changes":15,"blob_url":"https://github.com/apache/openjpa/blob/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","raw_url":"https://github.com/apache/openjpa/raw/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/DogTable2.java?ref=9e807991b062850bbc958913cc09bdae47852698","patch":"@@ -25,8 +25,7 @@\n  * Extension of Animal class illustrating inheritance.\n  */\n @Entity(name = \"DogTable2\")\n-@Table(name = \"DOGTABLE\", schema = \"SCHEMA2\")\n-@IdClass(DogId.class)\n+@Table(name = \"DOGTABLES\", schema = \"SCHEMA2\")\n public class DogTable2 implements Serializable\n \n {\n@@ -37,9 +36,6 @@\n     @GeneratedValue(strategy = GenerationType.TABLE, generator = \"Dog_Gen2\")\n     private int id2;\n \n-    @Id\n-    private int datastoreid;\n-\n     private String name;\n \n     private float price;\n@@ -52,7 +48,6 @@ public DogTable2() {\n     }\n \n     public DogTable2(String name) {\n-        this.id2 = id2;\n         this.name = name;\n \n     }\n@@ -89,12 +84,4 @@ public boolean isDomestic() {\n     public void setDomestic(boolean domestic) {\n         this.domestic = domestic;\n     }\n-\n-    public int getDatastoreid() {\n-        return datastoreid;\n-    }\n-\n-    public void setDatastoreid(int datastoreid) {\n-        this.datastoreid = datastoreid;\n-    }\n }"},{"sha":"94310df54b17d39e25b4fd19a39a4f5ffabb7e59","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","raw_url":"https://github.com/apache/openjpa/raw/9e807991b062850bbc958913cc09bdae47852698/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/generationtype/TestMultipleSchemaNames.java?ref=9e807991b062850bbc958913cc09bdae47852698","patch":"@@ -83,31 +83,29 @@ public void testGeneratedAUTO() {\n \n         Dog1 dog1 = new Dog1();\n         dog1.setName(\"helloDog1\");\n-        dog1.setDatastoreid(12);\n         dog1.setPrice(12000);\n \n         em.persist(dog1);\n         Dog1 dog1a = new Dog1();\n         dog1a.setName(\"helloDog2\");\n-        dog1a.setDatastoreid(15);\n         dog1a.setPrice(22000);\n         em.persist(dog1a);\n         // add dog2\n         Dog2 dog2 = new Dog2();\n         dog2.setName(\"helloDog3\");\n-        dog2.setDatastoreid(12);\n         dog2.setPrice(15000);\n         em.persist(dog2);\n \n         Dog2 dog2a = new Dog2();\n         dog2a.setName(\"helloDog4\");\n-        dog2a.setDatastoreid(19);\n         dog2a.setPrice(25000);\n         em.persist(dog2a);\n         em.getTransaction().commit();\n-        // System.out.println(\"persist dogs are done\");\n \n         Dog1 dog1x = em.find(Dog1.class, kem.getObjectId(dog1));\n+        // Derby can't guarantee the order of the generated value, therefore,\n+        // we can't assert the id based on the order. For db2, we see the id \n+        // value in the right order\n         assertTrue(dog1x.getId2() == 1 || dog1x.getId2() == 2);\n         assertEquals(dog1x.getName(), \"helloDog1\");\n         dog1x.setName(\"Dog1\");\n@@ -162,25 +160,21 @@ public void testGeneratedTABLE() {\n \n         DogTable dog1 = new DogTable();\n         dog1.setName(\"helloDog1\");\n-        dog1.setDatastoreid(12);\n         dog1.setPrice(12000);\n \n         em.persist(dog1);\n         DogTable dog1a = new DogTable();\n         dog1a.setName(\"helloDog2\");\n-        dog1a.setDatastoreid(15);\n         dog1a.setPrice(22000);\n         em.persist(dog1a);\n         // add dog2\n         DogTable2 dog2 = new DogTable2();\n         dog2.setName(\"helloDog3\");\n-        dog2.setDatastoreid(12);\n         dog2.setPrice(15000);\n         em.persist(dog2);\n \n         DogTable2 dog2a = new DogTable2();\n         dog2a.setName(\"helloDog4\");\n-        dog2a.setDatastoreid(19);\n         dog2a.setPrice(25000);\n         em.persist(dog2a);\n         em.getTransaction().commit();"}]}

