{"sha":"9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","node_id":"MDY6Q29tbWl0MjA2MzY0OjllOGIwZGVkMGI1YzIwNGYzZGUzZGYzYWJiOGY3OWI0NGQ5Zjc0MjE=","commit":{"author":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-16T23:31:44Z"},"committer":{"name":"Catalina Wei","email":"fancy@apache.org","date":"2009-12-16T23:31:44Z"},"message":"OPENJPA-1401 Inheritance using Join Strategy may fail in cross join JPQL\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@891476 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c68fd3d55a8702cb0a9b866145efa5cdfd382bab","url":"https://api.github.com/repos/apache/openjpa/git/trees/c68fd3d55a8702cb0a9b866145efa5cdfd382bab"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","html_url":"https://github.com/apache/openjpa/commit/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/comments","author":null,"committer":null,"parents":[{"sha":"a05e0073947dd98b7f62c623bb86c6c05ac10308","url":"https://api.github.com/repos/apache/openjpa/commits/a05e0073947dd98b7f62c623bb86c6c05ac10308","html_url":"https://github.com/apache/openjpa/commit/a05e0073947dd98b7f62c623bb86c6c05ac10308"}],"stats":{"total":472,"additions":468,"deletions":4},"files":[{"sha":"a2a843cd96d3dd9e241af7157fb2f2cb861a37df","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","status":"modified","additions":25,"deletions":4,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","raw_url":"https://github.com/apache/openjpa/raw/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/PCPath.java?ref=9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","patch":"@@ -73,6 +73,7 @@\n     private static final int UNBOUND_VAR = 2;\n     private static final int UNACCESSED_VAR = 3;\n     private static final int XPATH = 4;\n+    private static final int OBJECT_PATH = 5;\n \n     private static final Localizer _loc = Localizer.forPackage(PCPath.class);\n \n@@ -412,6 +413,22 @@ public synchronized void getKey() {\n         _type = PATH;\n     }\n \n+    private void checkObjectPathInheritanceTypeJoined(PathExpState pstate) {\n+        // if this mapping is in InheritanceType.JOINED,\n+        // then add joins\n+         ClassMapping base = _class;\n+         while (base.getJoinablePCSuperclassMapping() != null)\n+             base = base.getJoinablePCSuperclassMapping();\n+         if (base != _class) {\n+             ClassMapping from = _class;\n+             ClassMapping to = base;\n+             _type = OBJECT_PATH;\n+             for (; from != null && from != to; from = from.getJoinablePCSuperclassMapping()) {\n+                 pstate.joins = from.joinSuperclass(pstate.joins, false);\n+             }\n+         }\n+    }\n+\n     public FieldMetaData last() {\n         Action act = lastFieldAction();\n         return (act == null) ? null : isXPath() ?\n@@ -445,7 +462,7 @@ public Class getType() {\n         Action act = lastFieldAction();\n         if (act != null && act.op == Action.GET_XPATH)\n             return ((XMLMetaData) act.data).getType();\n-        \n+\n         FieldMetaData fld = (act == null) ? null : (FieldMetaData) act.data;\n         boolean key = act != null && act.op == Action.GET_KEY;\n         if (fld != null) {\n@@ -529,6 +546,9 @@ else if (action.op == Action.UNBOUND_VAR) {\n \n                 pstate.joins = pstate.joins.crossJoin(_candidate.getTable(),\n                     rel.getTable());\n+                if (!itr.hasNext() && isVariable()) {\n+                    checkObjectPathInheritanceTypeJoined(pstate);\n+                }\n             } else {\n                 // move past the previous field, if any\n                 field = (FieldMapping) ((action.op == Action.GET_XPATH) ?\n@@ -626,6 +646,7 @@ else if (action.op == Action.UNBOUND_VAR) {\n             String subqAlias = findSubqAlias(sel);\n             pstate.joins = pstate.joins.setSubselect(subqAlias);\n             pstate.joins.setCorrelatedVariable(_schemaAlias);\n+            checkObjectPathInheritanceTypeJoined(pstate);\n         }\n         \n         return pstate;\n@@ -652,7 +673,7 @@ private boolean navigateFromParentRootInSubselect(Select sel) {\n         if (sel.getParent() == null)\n             return false;\n         Iterator itr = (_actions == null) ? null : _actions.iterator();\n-        boolean navigateFromRoot = false;\n+\n         boolean hasVar = false;\n         boolean startsWithSubquery = false;\n         while (itr != null && itr.hasNext()) {\n@@ -830,8 +851,8 @@ public void selectColumns(Select sel, ExpContext ctx, ExpState state,\n         sel.setSchemaAlias(_schemaAlias);\n         ClassMapping mapping = getClassMapping(state);\n         PathExpState pstate = (PathExpState) state;\n-        if (mapping == null || !pstate.joinedRel ||\n-            pstate.isEmbedElementColl)            \n+        if (_type != OBJECT_PATH && (mapping == null || !pstate.joinedRel ||\n+            pstate.isEmbedElementColl))\n             sel.select(getColumns(state), pstate.joins);\n         else if (_key && pstate.field.getKey().isEmbedded())\n             selectEmbeddedMapKey(sel, ctx, state);"},{"sha":"ed82f785618f3f1ea2e0985a1c46d5cbe0f0fa07","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/openjpa/blob/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","raw_url":"https://github.com/apache/openjpa/raw/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Contractor.java?ref=9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","patch":"@@ -0,0 +1,81 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.jointable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.JoinColumn;\r\n+import javax.persistence.ManyToOne;\r\n+import javax.persistence.Table;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.Index;\r\n+\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@Entity\r\n+@Table(name=\"WContractor\")\r\n+public class Contractor extends Employee {\r\n+    @Column(name=\"ContractorProp1\",length=10)\r\n+    @Basic\r\n+    private String ctrProp1;\r\n+\r\n+\r\n+    @ManyToOne(optional=true,cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\r\n+    @JoinColumn(name=\"Dept_No\",referencedColumnName=\"OID\")\r\n+    @Index\r\n+    private Department dept;\r\n+\r\n+    public Contractor() {\r\n+    }\r\n+\r\n+    public Contractor(String desc) {\r\n+        setDescription(desc);\r\n+    }\r\n+\r\n+    public String getCtrProp1() {\r\n+        return ctrProp1;\r\n+    }\r\n+\r\n+    public void setCtrProp1(String ctrProp1) {\r\n+        this.ctrProp1 = ctrProp1;\r\n+    }\r\n+\r\n+    public Department getDept() {\r\n+        return dept;\r\n+    }\r\n+\r\n+    public void setDept(Department dept) {\r\n+        this.dept = dept;\r\n+    }\r\n+\r\n+    public boolean equals(Object other) {\r\n+        if (other instanceof Contractor) {\r\n+            Contractor c = (Contractor) other;\r\n+            if (c.getOID() == this.getOID() &&\r\n+                c.getDept() == this.getDept())\r\n+                return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+}\r\n+\r"},{"sha":"d20e750ab92c16a96e40446b84e227cfde8392f9","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/openjpa/blob/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","raw_url":"https://github.com/apache/openjpa/raw/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Department.java?ref=9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","patch":"@@ -0,0 +1,92 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.jointable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.CascadeType;\r\n+import javax.persistence.Column;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.OneToMany;\r\n+import javax.persistence.Table;\r\n+\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@Entity\r\n+@Table(name=\"WDept\")\r\n+public class Department {\r\n+    @Id\r\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\r\n+    private long OID; \r\n+\r\n+    @Basic\r\n+    private String description;\r\n+\r\n+\t@Column(name=\"DeptProp1\",length=10)\r\n+    @Basic\r\n+    private String deptProp1;\r\n+  \r\n+    @OneToMany(mappedBy=\"dept\",cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH},fetch=FetchType.LAZY)\r\n+    private java.util.Collection<Contractor> ctrs;\r\n+    \r\n+\tpublic Department() {\r\n+\t}\r\n+\t\r\n+\tpublic Department(String desc) {\r\n+        setDescription(desc);\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+    \r\n+    public long getOID() {\r\n+        return OID;\r\n+    }\r\n+    \r\n+    public void setOID(long oid) {\r\n+        this.OID = oid;\r\n+    }\r\n+\r\n+\t\r\n+\tpublic String getDeptProp1() {\r\n+\t\treturn deptProp1;\r\n+\t}\r\n+\r\n+\tpublic void setDeptProp1(String deptProp1) {\r\n+\t\tthis.deptProp1 = deptProp1;\r\n+\t}\r\n+\r\n+\tpublic java.util.Collection<Contractor> getCtrs() {\r\n+\t\treturn ctrs;\r\n+\t}\r\n+\r\n+\tpublic void setCtrs(java.util.Collection<Contractor> ctrs) {\r\n+\t\tthis.ctrs = ctrs;\r\n+\t}\r\n+}\r\n+\r"},{"sha":"962e103060f608ee467987f571d11de19898698f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/openjpa/blob/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","raw_url":"https://github.com/apache/openjpa/raw/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Employee.java?ref=9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.jointable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.Table;\r\n+\r\n+@Entity\r\n+@Table(name=\"WEmployee\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+public abstract class Employee extends Person {\r\n+\r\n+    @Basic\r\n+    private String description;\r\n+\r\n+    public Employee() {\r\n+    }\r\n+\r\n+\tpublic void setDescription(String description) {\r\n+\t\tthis.description = description;\r\n+        super.setName(\"Name \"+description);\r\n+\t}\r\n+\r\n+\tpublic String getDescription() {\r\n+\t\treturn description;\r\n+\t}\r\n+}\r\n+\r"},{"sha":"a1bbf12c209bf13fec307734356031e0d5de70bb","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/openjpa/blob/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","raw_url":"https://github.com/apache/openjpa/raw/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/Person.java?ref=9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","patch":"@@ -0,0 +1,64 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.jointable;\r\n+\r\n+import javax.persistence.Basic;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+import javax.persistence.Table;\r\n+import javax.persistence.TableGenerator;\r\n+\r\n+@Entity\r\n+@Table(name=\"WPerson\")\r\n+@Inheritance(strategy=InheritanceType.JOINED)\r\n+@TableGenerator(name=\"JWTGen\", table=\"JWT_GEN\", pkColumnName=\"PK\",\r\n+        valueColumnName=\"ID\")\r\n+\r\n+public abstract class Person {\r\n+    @Id\r\n+    @GeneratedValue(strategy=GenerationType.TABLE, generator=\"JWTGen\")\r\n+    private long OID; \r\n+\r\n+    @Basic\r\n+    private String name;\r\n+\r\n+    public Person() {\r\n+    }\r\n+\r\n+\tpublic void setName(String name) {\r\n+\t\tthis.name = name;\r\n+\t}\r\n+\r\n+\tpublic String getName() {\r\n+\t\treturn name;\r\n+\t}\r\n+\t\r\n+\tpublic long getOID() {\r\n+\t\treturn OID;\r\n+\t}\r\n+\t\r\n+\tpublic void setOID(long oid) {\r\n+\t\tthis.OID = oid;\r\n+\t}\r\n+}\r\n+\r"},{"sha":"e844187734e3a04e34059cd194f120123426b541","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","status":"added","additions":159,"deletions":0,"changes":159,"blob_url":"https://github.com/apache/openjpa/blob/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","raw_url":"https://github.com/apache/openjpa/raw/9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/jointable/TestInheritanceTypeJoinedQuery.java?ref=9e8b0ded0b5c204f3de3df3abb8f79b44d9f7421","patch":"@@ -0,0 +1,159 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.    \r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.jointable;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+import javax.persistence.Query;\r\n+\r\n+import org.apache.openjpa.persistence.test.SQLListenerTestCase;\r\n+\r\n+\r\n+public class TestInheritanceTypeJoinedQuery  extends SQLListenerTestCase {\r\n+\r\n+    public void setUp() {\r\n+        setUp(Contractor.class, Employee.class, Department.class, Person.class,\r\n+            CLEAR_TABLES);\r\n+        populate();\r\n+    }\r\n+\r\n+    public void populate() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        \r\n+        Department d = new Department(\"IT\");\r\n+        for (int i = 0; i < 3; i++) {\r\n+            Contractor c = new Contractor(\"ctr\" + i);\r\n+            c.setDept(d);\r\n+            em.persist(c);\r\n+        }\r\n+        em.persist(d);\r\n+      \r\n+        em.getTransaction().begin();\r\n+        em.getTransaction().commit();\r\n+        em.close();\r\n+    }\r\n+\r\n+    public void testInheritanceTypeJoinedQuery() {\r\n+        EntityManager em = emf.createEntityManager();\r\n+        Query q = null;\r\n+        String qS = null;\r\n+        Department dept = null;\r\n+        \r\n+        qS = \"SELECT c.OID, c.dept FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS); \r\n+        List<Object[]> lResult = q.getResultList();\r\n+        for (Object[] resultElement : lResult) {\r\n+            Long oid = (Long)resultElement[0];\r\n+            dept = (Department)resultElement[1];\r\n+        }\r\n+        \r\n+        qS = \"SELECT c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS); \r\n+        for (Object resultElement : q.getResultList()) {\r\n+            Long oid = (Long)resultElement;\r\n+        }\r\n+       \r\n+        qS = \"SELECT d FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS); \r\n+        for (Department aResult: (List <Department>) q.getResultList()) {\r\n+            assertEquals(dept.getOID(), aResult.getOID());\r\n+        }\r\n+\r\n+        qS = \"SELECT c FROM Department d, Contractor c  where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS);             \r\n+        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\r\n+            //System.out.println(aResult.getDescription() + \", \" + aResult.getOID());\r\n+            assertEquals(dept.getOID(), aResult.getDept().getOID());\r\n+        }\r\n+        qS = \"SELECT c FROM Contractor c, Department d  where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS);             \r\n+        for (Contractor aResult: (List <Contractor>) q.getResultList()) {\r\n+            assertEquals(dept.getOID(), aResult.getDept().getOID());\r\n+        }\r\n+        \r\n+        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS);             \r\n+        List<Object[]> cResult = q.getResultList();\r\n+        Contractor contractor = null;\r\n+        for (Object[] resultElement : cResult) {\r\n+            contractor = (Contractor)resultElement[0];\r\n+            Long oid = (Long)resultElement[1];\r\n+            assertTrue(contractor.getOID() == oid);\r\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n+        }\r\n+        \r\n+        qS = \"SELECT c.OID, c FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS);             \r\n+        List<Object[]> dResult = q.getResultList();\r\n+        for (Object[] resultElement : dResult) {\r\n+            Long oid = (Long)resultElement[0];\r\n+            contractor = (Contractor)resultElement[1];\r\n+            assertTrue(contractor.getOID() == oid);\r\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n+        }\r\n+        \r\n+        qS = \"SELECT c, c.OID FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS);             \r\n+        List<Object[]> eResult = q.getResultList();\r\n+        for (Object[] resultElement : eResult) {\r\n+            Long oid = (Long)resultElement[1];\r\n+            contractor = (Contractor)resultElement[0];\r\n+            assertTrue(contractor.getOID() == oid);\r\n+            assertEquals(dept.getOID(), contractor.getDept().getOID());\r\n+        }\r\n+\r\n+        qS = \"SELECT c.OID, c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT'\";\r\n+        q = em.createQuery(qS);             \r\n+        List<Object[]> fResult = q.getResultList();\r\n+        for (Object[] resultElement : fResult) {\r\n+            Long oid = (Long)resultElement[0];\r\n+            Contractor c = (Contractor)resultElement[1];\r\n+            assertTrue(oid.longValue() == c.getOID());\r\n+            assertEquals(dept.getOID(), c.getDept().getOID());\r\n+        }\r\n+        \r\n+        qS = \"SELECT d,c FROM Department d, Contractor c where d.OID = c.dept.OID and d.description = 'IT' \" +\r\n+                \" and c = ?1\";\r\n+        q = em.createQuery(qS);\r\n+        q.setParameter(1, contractor);\r\n+        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\r\n+            System.out.println(((Department)aResult[0]).getOID() + \", \" + ((Contractor)aResult[1]).getOID());\r\n+            assertTrue(contractor.equals(aResult[1]));\r\n+        }\r\n+                \r\n+        qS = \"SELECT c,d FROM Contractor c, Department d where d.OID = c.dept.OID and d.description = 'IT' \" +\r\n+                \" and c = ?1\";\r\n+        q = em.createQuery(qS);\r\n+        q.setParameter(1, contractor);\r\n+        for (Object[] aResult: (List <Object[]>) q.getResultList()) {\r\n+            System.out.println(((Contractor)aResult[0]).getOID() + \", \" + ((Department)aResult[1]).getOID());\r\n+            assertTrue(contractor.equals(aResult[0]));\r\n+        }\r\n+\r\n+        qS = \"SELECT p FROM Person p \";\r\n+        q = em.createQuery(qS);\r\n+        for (Object aResult: (List<Object>) q.getResultList()) {\r\n+            assertTrue(aResult instanceof Contractor);\r\n+        }\r\n+\r\n+        em.close();\r\n+    }\r\n+}\r\n+\r"}]}

