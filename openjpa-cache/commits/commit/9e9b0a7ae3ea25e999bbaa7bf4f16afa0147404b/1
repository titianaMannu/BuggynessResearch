{"sha":"9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b","node_id":"MDY6Q29tbWl0MjA2MzY0OjllOWIwYTdhZTNlYTI1ZTk5OWJiYWE3YmY0ZjE2YWZhMDE0NzQwNGI=","commit":{"author":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-08-23T19:27:22Z"},"committer":{"name":"Jody Grassel","email":"jgrassel@apache.org","date":"2012-08-23T19:27:22Z"},"message":"OPENJPA-2149: Criteria.function adds wrong casts to parameters making it unusable\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1376659 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2bf4d52ea3a0c669bffa8fffe9a0a1b2097d34c8","url":"https://api.github.com/repos/apache/openjpa/git/trees/2bf4d52ea3a0c669bffa8fffe9a0a1b2097d34c8"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b","html_url":"https://github.com/apache/openjpa/commit/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b/comments","author":null,"committer":null,"parents":[{"sha":"a5992927e3e17cfada14dcbdbe8585accb919e84","url":"https://api.github.com/repos/apache/openjpa/commits/a5992927e3e17cfada14dcbdbe8585accb919e84","html_url":"https://github.com/apache/openjpa/commit/a5992927e3e17cfada14dcbdbe8585accb919e84"}],"stats":{"total":31,"additions":21,"deletions":10},"files":[{"sha":"ed9520d64290e7d83e5876c44048b5f8cba893ca","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","raw_url":"https://github.com/apache/openjpa/raw/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/Args.java?ref=9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b","patch":"@@ -171,11 +171,17 @@ public int length(Select sel, ExpContext ctx, ExpState state) {\n         return 0;\n     }\n \n-    public void appendTo(Select sel, ExpContext ctx, ExpState state, \n-        SQLBuffer sql, int index) {\n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, SQLBuffer sql, int index) {\n+        appendTo(sel, ctx, state, sql, index, null);\n+    }\n+    \n+    public void appendTo(Select sel, ExpContext ctx, ExpState state, SQLBuffer sql, int index, String operator) {\n         ArgsExpState astate = (ArgsExpState) state;\n         for (int i = 0; i < _args.length; i++) {\n             _args[i].appendTo(sel, ctx, astate.states[i], sql, index);\n+            if( operator != null ) {\n+                sql.addCastForParam(operator, _args[i]);\n+            }\n             if (i < _args.length-1)\n                 sql.append(\", \");\n         }"},{"sha":"49586d1d3be6ecc7a6d8ae0ce39a525d0a1b4b51","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/openjpa/blob/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","raw_url":"https://github.com/apache/openjpa/raw/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/DatastoreFunction.java?ref=9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b","patch":"@@ -46,16 +46,12 @@ protected String getOperator() {\n     public void appendTo(Select sel, ExpContext ctx, ExpState state, \n         SQLBuffer sql, int index) {\n         Args args = (Args) getValue();\n-        if (!ctx.store.getDBDictionary().requiresCastForMathFunctions || args.getValues().length == 1)\n+        if (!ctx.store.getDBDictionary().requiresCastForMathFunctions || args.getValues().length == 1) {\n             super.appendTo(sel, ctx, state, sql, index);\n-        else {\n+        } else {\n             sql.append(getOperator());\n             sql.append(\"(\");            \n-            args.appendTo(sel, ctx, state, sql, 0);\n-            Val[] vals = args.getVals();\n-            for (int i = 1; i < vals.length; i++) {\n-                sql.addCastForParam(getOperator(), vals[i]);\n-            }\n+            args.appendTo(sel, ctx, state, sql, 0, getOperator());\n             sql.append(\")\");\n         }            \n     }"},{"sha":"642a67c6b40e2bf5efc11098202a1ba3673a9894","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/openjpa/blob/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","raw_url":"https://github.com/apache/openjpa/raw/9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/exps/UnaryOp.java?ref=9e9b0a7ae3ea25e999bbaa7bf4f16afa0147404b","patch":"@@ -139,7 +139,16 @@ public void appendTo(Select sel, ExpContext ctx, ExpState state,\n         sql.append(getOperator());\n         sql.append(_noParen ? \" \" : \"(\");\n         _val.appendTo(sel, ctx, state, sql, 0);\n-        sql.addCastForParam(getOperator(), _val);\n+       \n+        // OPENJPA-2149: If _val (Val) is an 'Arg', we need to get the Val[]\n+        // from it, and the single element it contains because the\n+        // 'addCastForParam' method gets the 'type' from the Val it receives.\n+        // In the case where _val is an Arg, when addCastForParam gets the\n+        // type, it will be getting the type of the Val (an Object) rather\n+        // the type of the Arg.\n+        sql.addCastForParam(getOperator(),\n+            (_val instanceof Args) ? (((Args) _val).getVals())[0]\n+                                   : _val);\n         if (!_noParen)\n             sql.append(\")\");\n     }"}]}

