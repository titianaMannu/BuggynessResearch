{"sha":"9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYTAzNTRmMWJmZGY1NmYwZjZhMDUyNDA2ZWRhZWZlYmU1ZmIzYjg=","commit":{"author":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-04-26T16:00:52Z"},"committer":{"name":"Albert Lee","email":"allee8285@apache.org","date":"2011-04-26T16:00:52Z"},"message":"OPENJPA-1984 - Skip non-root object validation when performing remove(root object). Let's validation provider to perform root object validation so that the contraint violation can report the correct root bean.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@1096791 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d20f437c4f4288fbc9ef81c4c9a7241c51b9ebbb","url":"https://api.github.com/repos/apache/openjpa/git/trees/d20f437c4f4288fbc9ef81c4c9a7241c51b9ebbb"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","html_url":"https://github.com/apache/openjpa/commit/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/comments","author":null,"committer":null,"parents":[{"sha":"d1d356c151f8cd6d7f5c047d9c6641ea93c624fe","url":"https://api.github.com/repos/apache/openjpa/commits/d1d356c151f8cd6d7f5c047d9c6641ea93c624fe","html_url":"https://github.com/apache/openjpa/commit/d1d356c151f8cd6d7f5c047d9c6641ea93c624fe"}],"stats":{"total":512,"additions":510,"deletions":2},"files":[{"sha":"6052b3cf17a023a42fdb6fdbe6de644e7b1f18b9","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Image.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/openjpa/blob/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Image.java","raw_url":"https://github.com/apache/openjpa/raw/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Image.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Image.java?ref=9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Embedded;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Image entity which makes use of several BV constraints.\n+ */\n+@Entity\n+public class Image {\n+\n+    private int id;\n+    private String fileName;\n+    private Location location;\n+\n+    @Id\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    @NotNull(message=\"Image file name must not be null.\")\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    public void setFileName(String fileName) {\n+        this.fileName = fileName;\n+    }\n+\n+    @Valid\n+    @Embedded\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    public void setLocation(Location location) {\n+        this.location = location;\n+    }\n+\n+    public String toString() {\n+        return \"[Image:id=\" + id + \",filename=\" + fileName + \",\" + location + ']';\n+    }\n+}"},{"sha":"84068409e81e0372e103c06b0e7b8ab69c398647","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Location.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/openjpa/blob/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Location.java","raw_url":"https://github.com/apache/openjpa/raw/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Location.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/Location.java?ref=9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","patch":"@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.openjpa.integration.validation;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Embeddable;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Pattern;\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * Location embeddable with several BV constraints applied.\n+ */\n+@Embeddable\n+public class Location {\n+\n+    @NotNull(message=\"City must be specified.\")\n+    private String city;\n+\n+    private String street;\n+\n+    private String state;\n+\n+    @NotNull(message=\"Country must be specified.\")\n+    @Size(message=\"Country must be 50 characters or less.\", max=50)\n+    @Column(length=50)\n+    private String country;\n+\n+    @Size(message=\"Zip code must be 10 characters or less.\", max=10)\n+    @Pattern(message=\"Zip code must be 5 digits or use the 5+4 format.\",\n+        regexp=\"^\\\\d{5}(([\\\\-]|[\\\\+])\\\\d{4})?$\")\n+    @Column(length=10)\n+    private String zipCode;\n+\n+    public void setCity(String city) {\n+        this.city = city;\n+    }\n+\n+    public String getCity() {\n+        return city;\n+    }\n+\n+    public void setStreet(String street) {\n+        this.street = street;\n+    }\n+\n+    public String getStreet() {\n+        return street;\n+    }\n+\n+    public void setState(String state) {\n+        this.state = state;\n+    }\n+\n+    public String getState() {\n+        return state;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setZipCode(String zipCode) {\n+        this.zipCode = zipCode;\n+    }\n+\n+    public String getZipCode() {\n+        return zipCode;\n+    }\n+\n+    public String toString() {\n+        return \"[Location:city=\" + city + \",street=\" + street + \",state=\" + state + \",country=\" + country + \",zipCode=\"\n+                + zipCode + ']';\n+    }\n+}"},{"sha":"c68eaa068bfc1589679bc5ccd3a32653efe48c99","filename":"openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraintViolation.java","status":"added","additions":309,"deletions":0,"changes":309,"blob_url":"https://github.com/apache/openjpa/blob/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraintViolation.java","raw_url":"https://github.com/apache/openjpa/raw/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraintViolation.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/java/org/apache/openjpa/integration/validation/TestConstraintViolation.java?ref=9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","patch":"@@ -0,0 +1,309 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.    \n+ */\n+package org.apache.openjpa.integration.validation;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.EntityManagerFactory;\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+\n+import org.apache.openjpa.lib.log.Log;\n+import org.apache.openjpa.persistence.OpenJPAEntityManagerFactorySPI;\n+import org.apache.openjpa.persistence.OpenJPAPersistence;\n+import org.apache.openjpa.persistence.test.AbstractPersistenceTestCase;\n+\n+public class TestConstraintViolation extends AbstractPersistenceTestCase {\n+\n+    EntityManagerFactory emf2 = null;\n+    Log log = null;\n+\n+    public void setUp() {\n+        Map<String, String> props = new HashMap<String, String>();\n+        props.put(\"javax.persistence.validation.group.pre-remove\", \"javax.validation.groups.Default\");\n+\n+        // This test case uses a different persistence xml file because validation require 2.0 xsd.\n+        emf2 = OpenJPAPersistence.createEntityManagerFactory(\"ConstraintViolationTestPU\",\n+                \"org/apache/openjpa/integration/validation/persistence.xml\", props);\n+        log = ((OpenJPAEntityManagerFactorySPI)emf2).getConfiguration().getLog(\"Tests\");\n+\n+        EntityManager em = emf2.createEntityManager();\n+        Image img = em.find(Image.class, 1);\n+        if (img != null) {\n+            em.getTransaction().begin();\n+            em.remove(img);\n+            em.getTransaction().commit();\n+        }\n+        em.close();\n+    }\n+\n+    public void testPersistNormalValidation() {\n+        EntityManager em = emf2.createEntityManager();\n+\n+        // Persist with successful validations\n+        Location loc = new Location();\n+        loc.setCity(\"Rochester\");\n+        loc.setStreet(null);\n+        loc.setState(\"MN\");\n+        loc.setZipCode(\"55901\");\n+        loc.setCountry(\"USA\");\n+\n+        Image img = new Image();\n+        img.setId(1);\n+        img.setFileName(\"Winter_01.gif\");\n+        img.setLocation(loc);\n+\n+        try {\n+            em.getTransaction().begin();\n+            log.trace(\"------------------------------------------------\");\n+            log.trace(\"** Persist with successful validations\");\n+            em.persist(img);\n+        } catch (ConstraintViolationException cve) {\n+            // Transaction was marked for rollback, roll it back and start a new TX\n+            Set<ConstraintViolation<?>> cvs = cve.getConstraintViolations();\n+            for (ConstraintViolation<?> cv : cvs) {\n+                log.trace(\"Message: \" + cv.getMessage());\n+                log.trace(\"RootBean: \" + cv.getRootBean());\n+                log.trace(\"LeafBean: \" + cv.getLeafBean());\n+                log.trace(\"PropertyPath: \" + cv.getPropertyPath());\n+                log.trace(\"Invalid value: \" + cv.getInvalidValue());\n+            }\n+            fail();\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+            emf2.close();\n+        }\n+    }\n+\n+    public void testPersistImageNullValidation() {\n+        EntityManager em = emf2.createEntityManager();\n+\n+        // Persist with null filename in Image\n+        Location loc = new Location();\n+        loc.setCity(\"Rochester\");\n+        loc.setStreet(\"3605 Hwy 52 N\");\n+        loc.setState(\"MN\");\n+        loc.setZipCode(\"55901\");\n+        loc.setCountry(\"USA\");\n+\n+        Image img = new Image();\n+        img.setId(1);\n+        img.setFileName(null);\n+        img.setLocation(loc);\n+\n+        try {\n+            em.getTransaction().begin();\n+            log.trace(\"------------------------------------------------\");\n+            log.trace(\"** Persist with null filename in Image\");\n+            em.persist(img);\n+            fail();\n+        } catch (ConstraintViolationException cve) {\n+            // Transaction was marked for rollback, roll it back and start a new TX\n+            Set<ConstraintViolation<?>> cvs = cve.getConstraintViolations();\n+            assertEquals(1, cvs.size());\n+            for (ConstraintViolation<?> cv : cvs) {\n+                log.trace(\"Message: \" + cv.getMessage());\n+                log.trace(\"RootBean: \" + cv.getRootBean());\n+                log.trace(\"LeafBean: \" + cv.getLeafBean());\n+                log.trace(\"PropertyPath: \" + cv.getPropertyPath());\n+                log.trace(\"Invalid value: \" + cv.getInvalidValue());\n+\n+                assertEquals(\"Image file name must not be null.\", cv.getMessage());\n+                assertEquals(\"Image\", cv.getRootBeanClass().getSimpleName());\n+                assertEquals(\"Image\", cv.getLeafBean().getClass().getSimpleName());\n+                assertTrue(cv.getLeafBean().getClass() == cv.getRootBeanClass());\n+                assertEquals(\"fileName\", cv.getPropertyPath().toString());\n+                assertNull(cv.getInvalidValue());\n+            }\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+            emf2.close();\n+        }\n+    }\n+\n+    public void testPersistEmbedCityNullValidation() {\n+        EntityManager em = emf2.createEntityManager();\n+\n+        // Persist with null city name in location\n+        Location loc = new Location();\n+        loc.setCity(null);\n+        loc.setStreet(\"3605 Hwy 52 N\");\n+        loc.setState(\"MN\");\n+        loc.setZipCode(\"55901\");\n+        loc.setCountry(\"USA\");\n+\n+        Image img = new Image();\n+        img.setId(1);\n+        img.setFileName(\"Winter_01.gif\");\n+        img.setLocation(loc);\n+\n+        try {\n+            em.getTransaction().begin();\n+            log.trace(\"------------------------------------------------\");\n+            log.trace(\"** Persist with null city name in location\" );\n+            em.persist(img);\n+            fail();\n+        } catch (ConstraintViolationException cve) {\n+            // Transaction was marked for rollback, roll it back and start a new TX\n+            Set<ConstraintViolation<?>> cvs = cve.getConstraintViolations();\n+            assertEquals(1, cvs.size());\n+            for (ConstraintViolation<?> cv : cvs) {\n+                log.trace(\"Message: \" + cv.getMessage());\n+                log.trace(\"RootBean: \" + cv.getRootBean());\n+                log.trace(\"LeafBean: \" + cv.getLeafBean());\n+                log.trace(\"PropertyPath: \" + cv.getPropertyPath());\n+                log.trace(\"Invalid value: \" + cv.getInvalidValue());\n+\n+                assertEquals(\"City must be specified.\", cv.getMessage());\n+                assertEquals(\"Image\", cv.getRootBeanClass().getSimpleName());\n+                // The violation occurred on a leaf bean (embeddable)\n+                assertEquals(\"Location\", cv.getLeafBean().getClass().getSimpleName());\n+                assertTrue(cv.getLeafBean().getClass() != cv.getRootBeanClass());\n+                assertEquals(\"location.city\", cv.getPropertyPath().toString());\n+                assertNull(cv.getInvalidValue());\n+            }\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+            emf2.close();\n+        }\n+    }\n+\n+    public void testRemoveEmbedCityNullValidation() {\n+        EntityManager em = emf2.createEntityManager();\n+\n+        // Remove with null city name in location\n+        Location loc = new Location();\n+        loc.setCity(\"Rochester\");\n+        loc.setStreet(\"3605 Hwy 52 N\");\n+        loc.setState(\"MN\");\n+        loc.setZipCode(\"55901\");\n+        loc.setCountry(\"USA\");\n+\n+        Image img = new Image();\n+        img.setId(1);\n+        img.setFileName(\"Winter_01.gif\");\n+        img.setLocation(loc);\n+\n+        try {\n+            em.getTransaction().begin();\n+            log.trace(\"------------------------------------------------\");\n+            log.trace(\"** Create normal Image/location\" );\n+            em.persist(img);\n+            em.getTransaction().commit();\n+        } catch (ConstraintViolationException cve) {\n+            fail();\n+        }\n+            \n+        try {\n+            em.getTransaction().begin();\n+            log.trace(\"** set null city name in location and remove\" );\n+            img.getLocation().setCity(null);\n+            em.remove(img);\n+            fail();\n+        } catch (ConstraintViolationException cve) {\n+            // Transaction was marked for rollback, roll it back and\n+            // start a new TX\n+            Set<ConstraintViolation<?>> cvs = cve.getConstraintViolations();\n+            assertEquals(1, cvs.size());\n+            for (ConstraintViolation<?> cv : cvs) {\n+                log.trace(\"Message: \" + cv.getMessage());\n+                log.trace(\"RootBean: \" + cv.getRootBean());\n+                log.trace(\"LeafBean: \" + cv.getLeafBean());\n+                log.trace(\"PropertyPath: \" + cv.getPropertyPath());\n+                log.trace(\"Invalid value: \" + cv.getInvalidValue());\n+\n+                assertEquals(\"City must be specified.\", cv.getMessage());\n+                assertEquals(\"Image\", cv.getRootBeanClass().getSimpleName());\n+                // The violation occurred on a leaf bean (embeddable)\n+                assertEquals(\"Location\", cv.getLeafBean().getClass().getSimpleName());\n+                assertTrue(cv.getLeafBean().getClass() != cv.getRootBeanClass());\n+                assertEquals(\"location.city\", cv.getPropertyPath().toString());\n+                assertNull(cv.getInvalidValue());\n+            }\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+            emf2.close();\n+        }\n+    }\n+\n+    public void testFlushEmbedCityNullValidation() {\n+        EntityManager em = emf2.createEntityManager();\n+\n+        // set invalid zipCode in location and flush testing pre-update\n+        Location loc = new Location();\n+        loc.setCity(\"Rochester\");\n+        loc.setStreet(\"3605 Hwy 52 N\");\n+        loc.setState(\"MN\");\n+        loc.setZipCode(\"55901\");\n+        loc.setCountry(\"USA\");\n+\n+        Image img = new Image();\n+        img.setId(1);\n+        img.setFileName(\"Winter_01.gif\");\n+        img.setLocation(loc);\n+\n+        try {\n+            em.getTransaction().begin();\n+            log.trace(\"------------------------------------------------\");\n+            log.trace(\"** Create normal Image/location\" );\n+            em.persist(img);\n+            em.getTransaction().commit();\n+        } catch (ConstraintViolationException cve) {\n+            fail();\n+        }\n+\n+        try {\n+            em.getTransaction().begin();\n+            log.trace(\"** set invalid zipCode and flush testing pre-update\" );\n+            img.getLocation().setZipCode(\"abcde\");\n+            em.flush();\n+            fail();\n+        } catch (ConstraintViolationException cve) {\n+            // Transaction was marked for rollback, roll it back and start a new TX\n+            Set<ConstraintViolation<?>> cvs = cve.getConstraintViolations();\n+            assertEquals(1, cvs.size());\n+            for (ConstraintViolation<?> cv : cvs) {\n+                log.trace(\"Message: \" + cv.getMessage());\n+                log.trace(\"RootBean: \" + cv.getRootBean());\n+                log.trace(\"LeafBean: \" + cv.getLeafBean());\n+                log.trace(\"PropertyPath: \" + cv.getPropertyPath());\n+                log.trace(\"Invalid value: \" + cv.getInvalidValue());\n+\n+                assertEquals(\"Zip code must be 5 digits or use the 5+4 format.\", cv.getMessage());\n+                assertEquals(\"Image\", cv.getRootBeanClass().getSimpleName());\n+                // The violation occurred on a leaf bean (embeddable)\n+                assertEquals(\"Location\", cv.getLeafBean().getClass().getSimpleName());\n+                assertTrue(cv.getLeafBean().getClass() != cv.getRootBeanClass());\n+                assertEquals(\"location.zipCode\", cv.getPropertyPath().toString());\n+                assertEquals(\"abcde\", cv.getInvalidValue());\n+            }\n+        } finally {\n+            em.getTransaction().rollback();\n+            em.close();\n+            emf2.close();\n+        }\n+    }\n+}"},{"sha":"3b57da605d5c1b2e02cab44bc89dd1d4ea468fa4","filename":"openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/openjpa/blob/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","raw_url":"https://github.com/apache/openjpa/raw/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-integration/validation/src/test/resources/org/apache/openjpa/integration/validation/persistence.xml?ref=9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","patch":"@@ -210,4 +210,16 @@\n         </properties>\n     </persistence-unit>\n     \n+    <!-- ============================================================ -->\n+    <!-- Persistence unit for testing ConstraintViolation object      -->\n+    <persistence-unit name=\"ConstraintViolationTestPU\">\n+        <class>org.apache.openjpa.integration.validation.Image</class>\n+        <class>org.apache.openjpa.integration.validation.Location</class>\n+        <exclude-unlisted-classes>true</exclude-unlisted-classes>\n+        <validation-mode>CALLBACK</validation-mode>\n+        <properties>\n+            <property name=\"openjpa.jdbc.SynchronizeMappings\" value=\"buildSchema(ForeignKeys=true)\" />\n+        </properties>\n+    </persistence-unit>\n+\n </persistence>"},{"sha":"738e54bfb1b9fd0d6c62009851eb69cc39894713","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/openjpa/blob/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","patch":"@@ -96,6 +96,7 @@\n import org.apache.openjpa.util.UnsupportedException;\n import org.apache.openjpa.util.UserException;\n import org.apache.openjpa.util.WrappedException;\n+import org.apache.openjpa.validation.ValidatingLifecycleEventManager;\n \n /**\n  * Concrete {@link Broker}. The broker handles object-level behavior,\n@@ -2759,7 +2760,18 @@ void delete(Object obj, StateManagerImpl sm, OpCallbacks call) {\n                 throw newDetachedException(obj, \"delete\");\n             if ((action & OpCallbacks.ACT_CASCADE) != 0) {\n                 if (!sm.isEmbedded() || !sm.getDereferencedEmbedDependent()) {\n-                    sm.cascadeDelete(call);\n+                    if (ValidatingLifecycleEventManager.class.isAssignableFrom(_lifeEventManager.getClass())) {\n+                        ValidatingLifecycleEventManager _validatingLCEventManager = \n+                            (ValidatingLifecycleEventManager) _lifeEventManager;\n+                        boolean saved = _validatingLCEventManager.setValidationEnabled(false);\n+                        try {\n+                            sm.cascadeDelete(call);\n+                        } finally {\n+                            _validatingLCEventManager.setValidationEnabled(saved);\n+                        }\n+                    } else {\n+                        sm.cascadeDelete(call);\n+                    }\n                 }\n             }\n             sm.delete();"},{"sha":"d86540c487f88cfe16456903882a43a493b4cca7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/openjpa/blob/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","raw_url":"https://github.com/apache/openjpa/raw/9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/validation/ValidatingLifecycleEventManager.java?ref=9ea0354f1bfdf56f0f6a052406edaefebe5fb3b8","patch":"@@ -37,6 +37,7 @@\n \n     private OpenJPAConfiguration _conf = null;\n     private Validator _validator = null;\n+    protected boolean _validationEnabled = true;\n \n     /**\n      * Constructor which accepts a reference to the validator to use.  If null,\n@@ -118,7 +119,7 @@ public boolean hasDeleteListeners(Object source, ClassMetaData meta) {\n         \n         // If a validator is provided and the source object should be validated,\n         // validate it and return any exceptions\n-        if (_validator != null && _validator.validating(source, type)) {\n+        if (_validationEnabled && _validator != null && _validator.validating(source, type)) {\n             ValidationException vex = _validator.validate(source, type);\n             if (vex != null) {\n                 if (evx == null || evx.length == 0) {\n@@ -137,4 +138,14 @@ public boolean hasDeleteListeners(Object source, ClassMetaData meta) {\n         }\n         return evx;\n     }\n+\n+    public boolean isValidationEnabled() {\n+        return _validationEnabled;\n+    }\n+\n+    public boolean setValidationEnabled(boolean enabled) {\n+        boolean val = _validationEnabled;\n+        _validationEnabled = enabled;\n+        return val;\n+    }\n }"}]}

