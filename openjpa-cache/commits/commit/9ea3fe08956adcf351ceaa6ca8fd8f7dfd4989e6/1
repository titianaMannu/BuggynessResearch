{"sha":"9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYTNmZTA4OTU2YWRjZjM1MWNlYWE2Y2E4ZmQ4ZjdkZmQ0OTg5ZTY=","commit":{"author":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:22:10Z"},"committer":{"name":"Donald Woods","email":"dwoods@apache.org","date":"2010-01-20T21:22:10Z"},"message":"OPENJPA-1374 undo changes to PersistenceProviderImpl.java, which are for OPENJPA-1410 instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@901384 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac946375c5a0acb039b8894002cecbd6338956ec","url":"https://api.github.com/repos/apache/openjpa/git/trees/ac946375c5a0acb039b8894002cecbd6338956ec"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","html_url":"https://github.com/apache/openjpa/commit/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6/comments","author":null,"committer":null,"parents":[{"sha":"2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","url":"https://api.github.com/repos/apache/openjpa/commits/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f","html_url":"https://github.com/apache/openjpa/commit/2b2ede1e38d86e089cb0b1c8262b6c887e68f95f"}],"stats":{"total":40,"additions":15,"deletions":25},"files":[{"sha":"907a720b7647e0b53ebb3732c822a27cd7acf1e0","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":15,"deletions":25,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=9ea3fe08956adcf351ceaa6ca8fd8f7dfd4989e6","patch":"@@ -93,17 +93,12 @@ public OpenJPAEntityManagerFactory createEntityManagerFactory(String name, Strin\n             _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);            \n             pd.checkPuNameCollisions(_log,name);\n             \n-            // add enhancer\n-            loadAgent(factory);\n+            loadAgent(_log, conf);\n             \n+            // TODO - Can this be moved back to BrokerImpl.initialize()?\n             // Create appropriate LifecycleEventManager\n-            loadValidator(factory);\n+            loadValidator(_log, conf);\n             \n-            // We need to wait to preload until after we get back a fully configured/instantiated\n-            // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n-            // functions and they need to be allowed time to configure themselves before we go off and\n-            // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n-            // any exceptions here because we want to fail-fast.\n             preloadMetaDataRepository(factory);\n             \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n@@ -186,17 +181,18 @@ public OpenJPAEntityManagerFactory createContainerEntityManagerFactory(Persisten\n                     log.warn(_loc.get(\"transformer-registration-error\", pui));\n                 }\n             }\n-\n             // Create appropriate LifecycleEventManager\n-            loadValidator(factory);\n+            OpenJPAConfiguration conf = factory.getConfiguration();\n+            conf.setPersistenceUnitRootUrl(pui.getPersistenceUnitRootUrl());\n+            _log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n+            loadValidator(_log, conf);\n             \n             // We need to wait to preload until after we get back a fully configured/instantiated\n             // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n             // functions and they need to be allowed time to configure themselves before we go off and\n             // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n             // any exceptions here because we want to fail-fast.\n-            preloadMetaDataRepository(factory);\n-            \n+            preloadMetaDataRepository(factory);           \n             return JPAFacadeHelper.toEntityManagerFactory(factory);\n         } catch (Exception e) {\n             throw PersistenceExceptions.toPersistenceException(e);\n@@ -238,7 +234,7 @@ private void preloadMetaDataRepository(BrokerFactory factory){\n         // We need to wait to preload until after we get back a fully configured/instantiated\n         // BrokerFactory. This is because it is possible that someone has extended OpenJPA\n         // functions and they need to be allowed time to configure themselves before we go off and\n-        // start instantiating configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n+        // start instanting configurable objects (ie:openjpa.MetaDataRepository). Don't catch\n         // any exceptions here because we want to fail-fast.\n         OpenJPAConfiguration conf = factory.getConfiguration();\n         Options o = Configurations.parseProperties(Configurations.getProperties(conf.getMetaDataRepository()));\n@@ -289,14 +285,11 @@ public ClassLoader getClassLoader(Class<?> context, ClassLoader env) {\n     /**\n      * This private worker method will attempt load the PCEnhancerAgent.\n      */\n-    private void loadAgent(BrokerFactory factory) {\n-        OpenJPAConfiguration conf = factory.getConfiguration();\n-        Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-\n+    private void loadAgent(Log log, OpenJPAConfiguration conf) {\n         if (conf.getDynamicEnhancementAgent() == true) {\n             boolean res = PCEnhancerAgent.loadDynamicAgent(log);\n-            if (log.isInfoEnabled() && res == true ){\n-                log.info(_loc.get(\"dynamic-agent\"));\n+            if(_log.isInfoEnabled() && res == true ){\n+                _log.info(_loc.get(\"dynamic-agent\"));\n             }\n         }\n     }\n@@ -309,13 +302,10 @@ private void loadAgent(BrokerFactory factory) {\n      * @param conf\n      * @throws if validation setup failed and was required by the config\n      */\n-    private void loadValidator(BrokerFactory factory) {\n-        OpenJPAConfiguration conf = factory.getConfiguration();\n-        Log log = conf.getLog(OpenJPAConfiguration.LOG_RUNTIME);\n-\n+    private void loadValidator(Log log, OpenJPAConfiguration conf) {\n         if ((ValidationUtils.setupValidation(conf) == true) &&\n-                log.isInfoEnabled()) {\n-            log.info(_loc.get(\"vlem-creation-info\"));\n+                _log.isInfoEnabled()) {\n+            _log.info(_loc.get(\"vlem-creation-info\"));\n         }\n     }\n "}]}

