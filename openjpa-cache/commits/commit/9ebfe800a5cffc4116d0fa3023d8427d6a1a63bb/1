{"sha":"9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","node_id":"MDY6Q29tbWl0MjA2MzY0OjllYmZlODAwYTVjZmZjNDExNmQwZmEzMDIzZDg0MjdkNmExYTYzYmI=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-08T08:06:18Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2008-08-08T08:06:18Z"},"message":"OPENJPA-677: While loading intermediate data be more strict about when superclass oid  can be allowed\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@683902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58989e87c88d5458a116bfeaf173d4cecd76b140","url":"https://api.github.com/repos/apache/openjpa/git/trees/58989e87c88d5458a116bfeaf173d4cecd76b140"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","html_url":"https://github.com/apache/openjpa/commit/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/comments","author":null,"committer":null,"parents":[{"sha":"446b85a6ae50f6f66215af6263af373b45e5e6be","url":"https://api.github.com/repos/apache/openjpa/commits/446b85a6ae50f6f66215af6263af373b45e5e6be","html_url":"https://github.com/apache/openjpa/commit/446b85a6ae50f6f66215af6263af373b45e5e6be"}],"stats":{"total":211,"additions":210,"deletions":1},"files":[{"sha":"2e1c47d1ffbac55a369b4df34b3a3d89858afaa2","filename":"openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/RelationFieldStrategy.java?ref=9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","patch":"@@ -556,8 +556,10 @@ public void load(OpenJPAStateManager sm, JDBCStore store,\n         ClassMapping relMapping = field.getTypeMapping();\n         Object oid = null;\n         if (relMapping.isMapped()) {\n+        \tboolean subs = field.getPolymorphic() != ValueMapping.POLY_FALSE \n+        \t\t&& relMapping.getPCSubclasses().length > 0;\n             oid = relMapping.getObjectId(store, res, field.getForeignKey(),\n-                field.getPolymorphic() != ValueMapping.POLY_FALSE, null);\n+                subs, null);\n         } else {\n             Column[] cols = field.getColumns();\n             if (relMapping.getIdentityType() == ClassMapping.ID_DATASTORE) {"},{"sha":"e60f32a3031547444e106a17782c980f69a1210e","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/openjpa/blob/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java","raw_url":"https://github.com/apache/openjpa/raw/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/TestIdentityWithSingleTableStrategy.java?ref=9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","patch":"@@ -0,0 +1,86 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance;\r\n+\r\n+import javax.persistence.EntityManager;\r\n+\r\n+import org.apache.openjpa.persistence.inheritance.entity.Admin;\r\n+import org.apache.openjpa.persistence.inheritance.entity.ComputerUser;\r\n+import org.apache.openjpa.persistence.inheritance.entity.RegularUser;\r\n+import org.apache.openjpa.persistence.test.SingleEMFTestCase;\r\n+\r\n+/**\r\n+ * Tests entities obtained via find(), getReference() or navigated to via\r\n+ * relation traversal refers to the same instances.\r\n+ * \r\n+ * Original reported in the context of entities of a inheritance hierarchy with\r\n+ * SINGLE_TABLE strategy.\r\n+ * \r\n+ * <A HREF=\"http://issues.apache.org/jira/browse/OPENJPA-677\">OPENJPA-677</A>\r\n+ * \r\n+ * @author Przemek Koprowski\r\n+ * @author Pinaki Poddar\r\n+ * \r\n+ */\r\n+public class TestIdentityWithSingleTableStrategy extends SingleEMFTestCase {\r\n+\tprivate Admin admin;\r\n+\tprivate RegularUser user;\r\n+\r\n+\tpublic void setUp() {\r\n+\t\tsuper.setUp(CLEAR_TABLES, Admin.class, RegularUser.class,\r\n+\t\t\t\tComputerUser.class);\r\n+\r\n+\t\tEntityManager em = emf.createEntityManager();\r\n+\t\tem.getTransaction().begin();\r\n+\t\tadmin = new Admin();\r\n+\t\tuser = new RegularUser();\r\n+\t\tuser.setAdmin(admin);\r\n+\t\tadmin.addRegularUser(user);\r\n+\t\tem.persist(admin);\r\n+\t\tem.persist(user);\r\n+\t\tem.getTransaction().commit();\r\n+\t\tem.close();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void tearDown() {\r\n+\t\t// problem deleting table in MySQL\r\n+\t}\r\n+\r\n+\tpublic void testFindAndNaviagtedEntityIdential() {\r\n+\t\tEntityManager em1 = emf.createEntityManager();\r\n+\t\tRegularUser regularUserFromFind = (RegularUser) em1.find(\r\n+\t\t\t\tRegularUser.class, user.getOid());\r\n+\t\tAdmin adminFromFind = em1.find(Admin.class, admin.getOid());\r\n+\t\tAdmin adminFromMethodBean = regularUserFromFind.getAdmin();\r\n+\t\tassertTrue(adminFromFind == adminFromMethodBean);\r\n+\t\tem1.close();\r\n+\t}\r\n+\r\n+\tpublic void testReferenceAndNaviagtedEntityIdential() {\r\n+\t\tEntityManager em1 = emf.createEntityManager();\r\n+\t\tRegularUser regularUserFromFind = (RegularUser) em1.find(\r\n+\t\t\t\tRegularUser.class, user.getOid());\r\n+\t\tAdmin adminFromGetReference = em1.getReference(Admin.class, admin\r\n+\t\t\t\t.getOid());\r\n+\t\tAdmin adminFromMethodBean = regularUserFromFind.getAdmin();\r\n+\t\tassertTrue(adminFromGetReference == adminFromMethodBean);\r\n+\t\tem1.close();\r\n+\t}\r\n+}\r"},{"sha":"d83c4dbc3304b8d1218b5003ee80b938e1711cf6","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/openjpa/blob/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java","raw_url":"https://github.com/apache/openjpa/raw/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/Admin.java?ref=9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","patch":"@@ -0,0 +1,38 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.OneToMany;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"admin\")\r\n+public class Admin extends ComputerUser {\r\n+\t@OneToMany(mappedBy = \"admin\")\r\n+\tprotected Set<RegularUser> regularUsers = new HashSet<RegularUser>();\r\n+\r\n+\tpublic boolean addRegularUser(RegularUser version) {\r\n+\t\treturn regularUsers.add(version);\r\n+\t}\r\n+\r\n+}\r"},{"sha":"413a062f3fa846bf6ac51590f6d1780590fd9cd0","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/openjpa/blob/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java","raw_url":"https://github.com/apache/openjpa/raw/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/ComputerUser.java?ref=9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","patch":"@@ -0,0 +1,40 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.GenerationType;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Inheritance;\r\n+import javax.persistence.InheritanceType;\r\n+\r\n+@Entity\r\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\r\n+public abstract class ComputerUser {\r\n+\r\n+\t@GeneratedValue(strategy = GenerationType.AUTO)\r\n+\t@Id\r\n+\tprivate Integer oid;\r\n+\r\n+\tpublic Integer getOid() {\r\n+\t\treturn oid;\r\n+\t}\r\n+\r\n+}\r"},{"sha":"c6171878c2daf6bad731c9d9c8d13129c8096a70","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/openjpa/blob/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java","raw_url":"https://github.com/apache/openjpa/raw/9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/inheritance/entity/RegularUser.java?ref=9ebfe800a5cffc4116d0fa3023d8427d6a1a63bb","patch":"@@ -0,0 +1,43 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.openjpa.persistence.inheritance.entity;\r\n+\r\n+import javax.persistence.DiscriminatorValue;\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n+import javax.persistence.ManyToOne;\r\n+\r\n+import org.apache.openjpa.persistence.jdbc.Nonpolymorphic;\r\n+\r\n+@Entity\r\n+@DiscriminatorValue(\"user\")\r\n+public class RegularUser extends ComputerUser {\r\n+\r\n+\t@ManyToOne(fetch = FetchType.LAZY)\r\n+\tprivate Admin admin;\r\n+\r\n+\tpublic Admin getAdmin() {\r\n+\t\treturn admin;\r\n+\t}\r\n+\r\n+\tpublic void setAdmin(Admin admin) {\r\n+\t\tthis.admin = admin;\r\n+\t}\r\n+\r\n+}\r"}]}

