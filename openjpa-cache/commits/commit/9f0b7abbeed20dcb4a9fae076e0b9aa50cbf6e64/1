{"sha":"9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmMGI3YWJiZWVkMjBkY2I0YTlmYWUwNzZlMGI5YWE1MGNiZjZlNjQ=","commit":{"author":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T22:44:01Z"},"committer":{"name":"Pinaki Poddar","email":"ppoddar@apache.org","date":"2009-11-18T22:44:01Z"},"message":"Run CriteriaTest on MySQL as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openjpa/trunk@881977 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7de17661730311d3e9ec0c1e366b7233ab72e3c1","url":"https://api.github.com/repos/apache/openjpa/git/trees/7de17661730311d3e9ec0c1e366b7233ab72e3c1"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","html_url":"https://github.com/apache/openjpa/commit/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/comments","author":null,"committer":null,"parents":[{"sha":"96c723b3cb5e85f6f68059f62307d488eeedbc27","url":"https://api.github.com/repos/apache/openjpa/commits/96c723b3cb5e85f6f68059f62307d488eeedbc27","html_url":"https://github.com/apache/openjpa/commit/96c723b3cb5e85f6f68059f62307d488eeedbc27"}],"stats":{"total":53,"additions":37,"deletions":16},"files":[{"sha":"6adc0ebe0865568b93a43234928db1402b9d9f8f","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/openjpa/blob/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","raw_url":"https://github.com/apache/openjpa/raw/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/AbstractCriteriaTestCase.java?ref=9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","patch":"@@ -206,7 +206,7 @@ void executeAndCompareSQL(String jpql, String expectedSQL) {\n             fail(\"JPQL \" + jpql + \" failed to execute\\r\\n\" + w);\n         }\n \n-        if (!(dict instanceof DerbyDictionary))\n+        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary))\n             return;\n \n         for (int i = 0; i < jSQL.size(); i++) {\n@@ -229,7 +229,7 @@ void executeAndCompareSQL(Query jQ, String expectedSQL) {\n             fail(w.toString());\n         }\n \n-        if (!(dict instanceof DerbyDictionary))\n+        if (!(dict instanceof DerbyDictionary || dict instanceof MySQLDictionary))\n             return;\n \n         String jSql = jSQL.get(0).trim();"},{"sha":"6f1ff04fa678dc0a18380a857302e58b8e8caf33","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","status":"modified","additions":22,"deletions":7,"changes":29,"blob_url":"https://github.com/apache/openjpa/blob/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","raw_url":"https://github.com/apache/openjpa/raw/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestJPQLSubquery.java?ref=9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","patch":"@@ -34,6 +34,7 @@\n import javax.persistence.criteria.SetJoin;\n import javax.persistence.criteria.Subquery;\n \n+import org.apache.openjpa.jdbc.sql.DerbyDictionary;\n import org.apache.openjpa.persistence.criteria.AbstractCriteriaTestCase.QueryDecorator;\n import org.apache.openjpa.persistence.embed.Division;\n \n@@ -771,9 +772,12 @@ public void testSubquery01() {\n             + \" (select distinct o.id from LineItem i, Order o\"\n             + \" where i.quantity > 10 and o.count > 1000 and i.id = o.id)\";\n \n+        String crossJoin = (getDictionary() instanceof DerbyDictionary) \n+             ? \"JOIN CR_ODR t2 ON (1 = 1)\"\n+             : \"CROSS JOIN CR_ODR t2\";\n         String expectedSQL = \"SELECT t0.id FROM CR_ODR t0 WHERE (t0.id IN (\"\n             + \"SELECT DISTINCT t2.id \"\n-            + \"FROM CR_ODR t1 JOIN CR_ODR t2 ON (1 = 1), CR_LI t3 WHERE (\" \n+            + \"FROM CR_ODR t1 \" + crossJoin + \", CR_LI t3 WHERE (\" \n             + \"t3.quantity > ? AND t2.cnt > ? AND t3.id = t2.id)))\";\n \n         executeAndCompareSQL(jpql, expectedSQL);\n@@ -1086,8 +1090,11 @@ public void testSubquery13() {\n             + \" where o1.quantity = \"\n             + \" any(select o2.quantity from in(c.orders) o2)\";\n \n+        String crossJoin = getDictionary() instanceof DerbyDictionary\n+            ? \"JOIN CR_CUST t1 ON (1 = 1)\"\n+            : \"CROSS JOIN CR_CUST t1\";\n         String expectedSQL = \"SELECT t0.id, t1.name \" + \n-        \"FROM CR_ODR t0 JOIN CR_CUST t1 ON (1 = 1) WHERE (t0.quantity = ANY (\" + \n+        \"FROM CR_ODR t0 \" + crossJoin + \" WHERE (t0.quantity = ANY (\" + \n         \"SELECT t3.quantity FROM CR_ODR t2, CR_ODR t3 WHERE (t2.id = t3.id) AND (t1.id = t2.CUSTOMER_ID)))\"; \n \n         executeAndCompareSQL(jpql, expectedSQL);\n@@ -1182,8 +1189,11 @@ public void testSubquery16() {\n             + \" (select o.quantity*2 from LineItem i, Order o\"\n             + \" where i.quantity > 10 and o.quantity > 1000 and i.id = \"\n             + \"o.id)\";\n+        String crossJoin = (getDictionary() instanceof DerbyDictionary) \n+        ? \"JOIN CR_ODR t2 ON (1 = 1)\"\n+        : \"CROSS JOIN CR_ODR t2\";\n         String expectedSQL = \"SELECT t0.id FROM CR_ODR t0 WHERE (t0.quantity > (\"\n-            + \"SELECT (t2.quantity * ?) FROM CR_ODR t1 JOIN CR_ODR t2 ON (1 = 1), CR_LI t3 WHERE (\"\n+            + \"SELECT (t2.quantity * ?) FROM CR_ODR t1 \" + crossJoin + \", CR_LI t3 WHERE (\"\n             + \"t3.quantity > ? AND t2.quantity > ? AND t3.id = t2.id)))\";\n         executeAndCompareSQL(jpql, expectedSQL);\n \n@@ -1208,10 +1218,13 @@ public void testSubquery17() {\n         String jpql = \"select o.id from Order o where o.customer.name =\"\n             + \" (select substring(o2.customer.name, 3) from Order o2\"\n             + \" where o.customer.id = o2.customer.id)\";\n-\n+        \n+        String useCast = (getDictionary() instanceof DerbyDictionary) \n+        ? \"SUBSTR(CAST((t3.name) AS VARCHAR(1000)), 3) \"\n+        : \"SUBSTRING(t3.name, 3) \";\n         String expectedSQL = \"SELECT t0.id FROM CR_ODR t0 \"\n             + \"INNER JOIN CR_CUST t1 ON t0.CUSTOMER_ID = t1.id WHERE (t1.name = (\"\n-            + \"SELECT SUBSTR(CAST((t3.name) AS VARCHAR(1000)), 3) \"\n+            + \"SELECT \" + useCast\n             + \"FROM CR_ODR t2 INNER JOIN CR_CUST t3 ON t2.CUSTOMER_ID = t3.id \"\n             + \"WHERE (t0.CUSTOMER_ID = t2.CUSTOMER_ID)))\";\n         executeAndCompareSQL(jpql, expectedSQL);\n@@ -1280,10 +1293,12 @@ public void testSubquery20() {\n         String jpql = \"select o.id from Order o where o.customer.name in\"\n             + \" (select CONCAT(o.customer.name, 'XX') from Order o\"\n             + \" where o.quantity > 10)\";\n-\n+        String useCast = getDictionary() instanceof DerbyDictionary\n+           ? \"(CAST(t1.name AS VARCHAR(1000)) || CAST(? AS VARCHAR(1000))) \"\n+           : \"CONCAT(t1.name,?) \";\n         String expectedSQL = \"SELECT t2.id FROM CR_ODR t2 \"\n             + \"INNER JOIN CR_CUST t3 ON t2.CUSTOMER_ID = t3.id WHERE (t3.name IN (\"\n-            + \"SELECT (CAST(t1.name AS VARCHAR(1000)) || CAST(? AS VARCHAR(1000))) \"\n+            + \"SELECT \" + useCast \n             + \"FROM CR_ODR t0 INNER JOIN CR_CUST t1 ON t0.CUSTOMER_ID = t1.id WHERE (t0.quantity > ?)))\";\n \n         executeAndCompareSQL(jpql, expectedSQL);"},{"sha":"af4cf0eee3621b885bff6b505b137ef0e2ccb778","filename":"openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/apache/openjpa/blob/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","raw_url":"https://github.com/apache/openjpa/raw/9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/criteria/TestTypesafeCriteria.java?ref=9f0b7abbeed20dcb4a9fae076e0b9aa50cbf6e64","patch":"@@ -1406,19 +1406,25 @@ public void testDefaultProjectionWithUntypedResult() {\n     }\n     \n     public void testCountDistinct() {\n-        // JPQL Parser does not do well with the following \n-        String jpql = \"select DISTINCT COUNT(a.name) from Account a\";\n+        String jpql = \"select COUNT(DISTINCT a.name) from Account a\";\n         \n         CriteriaQuery<Long> c = cb.createQuery(Long.class);\n         Root<Account> a = c.from(Account.class);\n         c.select(cb.countDistinct(a.get(Account_.name)));\n         \n-        // hence we do not check equivalence against JPQL \n-        // assertEquivalence(c, jpql);\n-        // but check against SQL\n-        String expectedSQL = \"SELECT COUNT(DISTINCT t0.name) FROM CR_ACCT t0\";\n-        executeAndCompareSQL(c, expectedSQL);\n+        assertEquivalence(c, jpql);\n+    }\n+    \n+    public void testCountDistinctOnJoin() {\n+        String jpql = \"select COUNT(DISTINCT a.b.age) from A a\";\n+        \n+        CriteriaQuery<Long> c = cb.createQuery(Long.class);\n+        Root<A> a = c.from(A.class);\n+        c.select(cb.countDistinct(a.get(A_.b).get(B_.age)));\n+        \n+        assertEquivalence(c, jpql);\n     }\n+\n     \n     public void testSizeReturnsInteger() {\n         String jpql = \"select SIZE(c.accounts) from Customer c\";"}]}

