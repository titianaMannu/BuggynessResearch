{"sha":"9fa619f94ecec2510d2ec560bb719eecd8f222c1","node_id":"MDY6Q29tbWl0MjA2MzY0OjlmYTYxOWY5NGVjZWMyNTEwZDJlYzU2MGJiNzE5ZWVjZDhmMjIyYzE=","commit":{"author":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2020-09-30T13:34:44Z"},"committer":{"name":"Romain Manni-Bucau","email":"rmannibucau@gmail.com","date":"2020-09-30T13:34:44Z"},"message":"[OPENJPA-2834] ensure getProperties does not fail with xmlstore","tree":{"sha":"7267d714f8fa967af3be79cdcc5131ce7a6fe64e","url":"https://api.github.com/repos/apache/openjpa/git/trees/7267d714f8fa967af3be79cdcc5131ce7a6fe64e"},"url":"https://api.github.com/repos/apache/openjpa/git/commits/9fa619f94ecec2510d2ec560bb719eecd8f222c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/openjpa/commits/9fa619f94ecec2510d2ec560bb719eecd8f222c1","html_url":"https://github.com/apache/openjpa/commit/9fa619f94ecec2510d2ec560bb719eecd8f222c1","comments_url":"https://api.github.com/repos/apache/openjpa/commits/9fa619f94ecec2510d2ec560bb719eecd8f222c1/comments","author":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"committer":{"login":"rmannibucau","id":1249546,"node_id":"MDQ6VXNlcjEyNDk1NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1249546?v=4","gravatar_id":"","url":"https://api.github.com/users/rmannibucau","html_url":"https://github.com/rmannibucau","followers_url":"https://api.github.com/users/rmannibucau/followers","following_url":"https://api.github.com/users/rmannibucau/following{/other_user}","gists_url":"https://api.github.com/users/rmannibucau/gists{/gist_id}","starred_url":"https://api.github.com/users/rmannibucau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmannibucau/subscriptions","organizations_url":"https://api.github.com/users/rmannibucau/orgs","repos_url":"https://api.github.com/users/rmannibucau/repos","events_url":"https://api.github.com/users/rmannibucau/events{/privacy}","received_events_url":"https://api.github.com/users/rmannibucau/received_events","type":"User","site_admin":false},"parents":[{"sha":"4a546f759cee4220495e4206abc3c0503af204fa","url":"https://api.github.com/repos/apache/openjpa/commits/4a546f759cee4220495e4206abc3c0503af204fa","html_url":"https://github.com/apache/openjpa/commit/4a546f759cee4220495e4206abc3c0503af204fa"}],"stats":{"total":57,"additions":43,"deletions":14},"files":[{"sha":"4660b8d4bc290e28dadf1840ddd34cfe1db4f2b7","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/openjpa/blob/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/conf/OpenJPAConfigurationImpl.java?ref=9fa619f94ecec2510d2ec560bb719eecd8f222c1","patch":"@@ -2023,6 +2023,9 @@ public String getFinderCache() {\n \n     @Override\n     public FinderCache getFinderCacheInstance() {\n+        if (finderCachePlugin == null) { // xmlstore case\n+            return null;\n+        }\n         if (finderCachePlugin.get() == null) {\n             finderCachePlugin.instantiate(FinderCache.class, this);\n         }"},{"sha":"8376c6e551bb0ff0a6df5d94b561fba745635a3e","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","status":"modified","additions":34,"deletions":11,"changes":45,"blob_url":"https://github.com/apache/openjpa/blob/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","raw_url":"https://github.com/apache/openjpa/raw/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCClassFileTransformer.java?ref=9fa619f94ecec2510d2ec560bb719eecd8f222c1","patch":"@@ -54,7 +54,6 @@\n     private final ClassLoader _tmpLoader;\n     private final Log _log;\n     private final Set _names;\n-    private boolean _transforming = false;\n \n     /**\n      * Constructor.\n@@ -104,6 +103,13 @@ public PCClassFileTransformer(MetaDataRepository repos, PCEnhancer.Flags flags,\n             _log.info(_loc.get(\"runtime-enhance-pcclasses\"));\n     }\n \n+    public static PCClassFileTransformer newInstance(final MetaDataRepository repos, final Options parseProperties,\n+                                                     final ClassLoader tmpLoader) {\n+        return parseProperties != null && parseProperties.getBooleanProperty(\"Reentrant\") ?\n+                new PCClassFileTransformer.Reentrant(repos, parseProperties, tmpLoader) :\n+                new PCClassFileTransformer(repos, parseProperties, tmpLoader);\n+    }\n+\n     @Override\n     public byte[] transform(ClassLoader loader, String className, Class redef, ProtectionDomain domain, byte[] bytes)\n         throws IllegalClassFormatException {\n@@ -115,14 +121,6 @@ public PCClassFileTransformer(MetaDataRepository repos, PCEnhancer.Flags flags,\n         if (className == null) {\n             return null;\n         }\n-        // prevent re-entrant calls, which can occur if the enhancing\n-        // loader is used to also load OpenJPA libraries; this is to prevent\n-        // recursive enhancement attempts for internal openjpa libraries\n-        if (_transforming)\n-            return null;\n-\n-        _transforming = true;\n-\n         return transform0(className, redef, bytes);\n     }\n \n@@ -131,7 +129,7 @@ public PCClassFileTransformer(MetaDataRepository repos, PCEnhancer.Flags flags,\n      * ClassCircularityError when executing method using pure-JIT JVMs\n      * such as JRockit.\n      */\n-    private byte[] transform0(String className, Class redef, byte[] bytes)\n+    protected byte[] transform0(String className, Class redef, byte[] bytes)\n         throws IllegalClassFormatException {\n \n         byte[] returnBytes = null;\n@@ -169,7 +167,6 @@ public PCClassFileTransformer(MetaDataRepository repos, PCEnhancer.Flags flags,\n                 throw (IllegalClassFormatException) t;\n             throw new GeneralException(t);\n         } finally {\n-            _transforming = false;\n             if (returnBytes != null && _log.isTraceEnabled())\n                 _log.trace(_loc.get(\"runtime-enhance-complete\", className,\n                     bytes.length, returnBytes.length));\n@@ -228,4 +225,30 @@ private Boolean needsEnhance(String clsName, Class redef, byte[] bytes) {\n     private static boolean isEnhanced(byte[] b) {\n         return AsmAdaptor.isEnhanced(b);\n     }\n+\n+    public static class Reentrant extends PCClassFileTransformer {\n+        private final ThreadLocal<Boolean> transforming = new ThreadLocal<>();\n+\n+        public Reentrant(final MetaDataRepository repos, final Options opts, final ClassLoader loader) {\n+            super(repos, opts, loader);\n+        }\n+\n+        public Reentrant(final MetaDataRepository repos, final PCEnhancer.Flags flags,\n+                         final ClassLoader tmpLoader, final boolean devscan) {\n+            super(repos, flags, tmpLoader, devscan);\n+        }\n+\n+        @Override\n+        protected byte[] transform0(String className, Class redef, byte[] bytes) throws IllegalClassFormatException {\n+            if (transforming.get() != null) {\n+                return bytes;\n+            }\n+            transforming.set(true);\n+            try {\n+                return super.transform0(className, redef, bytes);\n+            } finally {\n+                transforming.remove();\n+            }\n+        }\n+    }\n }"},{"sha":"83f68485aa46fa3a487edf46c96817481fd9151f","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","raw_url":"https://github.com/apache/openjpa/raw/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/enhance/PCEnhancerAgent.java?ref=9fa619f94ecec2510d2ec560bb719eecd8f222c1","patch":"@@ -182,7 +182,7 @@ public ClassLoader getClassLoader(Class context,\n     \t\tconf.setReadOnly(Configuration.INIT_STATE_FREEZING);\n     \t\tconf.instantiateAll(); // avoid threading issues\n \n-    \t\tPCClassFileTransformer transformer = new PCClassFileTransformer\n+    \t\tPCClassFileTransformer transformer = PCClassFileTransformer.newInstance\n     \t\t    (conf.newMetaDataRepositoryInstance(), clonedOptions,\n     \t\t    tmpLoader);\n     \t\tinst.addTransformer(transformer);"},{"sha":"664296697e779aea240fe1b17fae062acf244e20","filename":"openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/openjpa/blob/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/BrokerImpl.java?ref=9fa619f94ecec2510d2ec560bb719eecd8f222c1","patch":"@@ -791,7 +791,10 @@ public Object putUserObject(Object key, Object val) {\n     public Map<String, Object> getProperties() {\n         Map<String, Object> props = _conf.toProperties(true);\n         for (String s : _supportedPropertyNames) {\n-            props.put(\"openjpa.\" + s, Reflection.getValue(this, s, true));\n+            final Object value = Reflection.getValue(this, s, !\"CacheFinderQuery\".equals(s));\n+            if (value != null) {\n+                props.put(\"openjpa.\" + s, value);\n+            }\n         }\n         return props;\n     }"},{"sha":"9cfd5207ed0d3c3a3a619d2b1a1a6e978693829e","filename":"openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/openjpa/blob/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","raw_url":"https://github.com/apache/openjpa/raw/9fa619f94ecec2510d2ec560bb719eecd8f222c1/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java","contents_url":"https://api.github.com/repos/apache/openjpa/contents/openjpa-persistence/src/main/java/org/apache/openjpa/persistence/PersistenceProviderImpl.java?ref=9fa619f94ecec2510d2ec560bb719eecd8f222c1","patch":"@@ -342,7 +342,7 @@ public ClassLoader getClassLoader(Class<?> context, ClassLoader env) {\n \n             MetaDataRepository repos = conf.getMetaDataRepositoryInstance();\n             repos.setResolve(MetaDataModes.MODE_MAPPING, false);\n-            _trans = new PCClassFileTransformer(repos,\n+            _trans = PCClassFileTransformer.newInstance(repos,\n                 Configurations.parseProperties(props), tmpLoader);\n         }\n "}]}

